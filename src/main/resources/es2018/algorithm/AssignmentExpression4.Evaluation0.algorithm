<algorithm>
  <param>LeftHandSideExpression</param>
  <param>AssignmentExpression</param>
  <step-list>
    <step>If LeftHandSideExpression is neither an ObjectLiteral nor an ArrayLiteral , then     <step-list>
      <step>Let <id>lref</id> be the result of evaluating LeftHandSideExpression .</step>
      <step>ReturnIfAbrupt ( <id>lref</id> ).</step>
      <step>Let <id>rref</id> be the result of evaluating AssignmentExpression .</step>
      <step>Let <id>rval</id> be ? GetValue ( <id>rref</id> ).</step>
      <step>If IsAnonymousFunctionDefinition ( AssignmentExpression ) and IsIdentifierRef of LeftHandSideExpression are both <value>true</value> , then       <step-list>
        <step>Let <id>hasNameProperty</id> be ? HasOwnProperty ( <id>rval</id> , <value>"name"</value> ).</step>
        <step>If <id>hasNameProperty</id> is <value>false</value> , perform SetFunctionName ( <id>rval</id> , GetReferencedName ( <id>lref</id> )).</step>
      </step-list></step>
      <step>Perform ? PutValue ( <id>lref</id> , <id>rval</id> ).</step>
      <step>Return <id>rval</id> .</step>
    </step-list></step>
    <step>Let <id>assignmentPattern</id> be the AssignmentPattern that is covered by LeftHandSideExpression .</step>
    <step>Let <id>rref</id> be the result of evaluating AssignmentExpression .</step>
    <step>Let <id>rval</id> be ? GetValue ( <id>rref</id> ).</step>
    <step>Perform ? DestructuringAssignmentEvaluation of <id>assignmentPattern</id> using <id>rval</id> as the argument.</step>
    <step>Return <id>rval</id> .</step>
  </step-list>
</algorithm>