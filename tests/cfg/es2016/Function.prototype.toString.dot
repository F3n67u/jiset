digraph {
  node0 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node1 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node2 [shape=diamond, label=<<font color="black">(= (typeof func) &quot;BoundFunctionExoticObject&quot;)</font>> color="black" fillcolor="white" style=filled]
  node3 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">??? &quot;Return an implementation - dependent String source code representation of id:{func} . The representation must conform to the rules below . It is implementation dependent whether the representation includes bound function information or information about the target function .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node4 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">2:??? &quot;If Type ( id:{func} ) is Object and is either a built - in function object or has an [ [ ECMAScriptCode ] ] internal slot , then in:{} out:{}&quot;</td></tr>
      <tr><td align="left">4:throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node0 -> node2 [ color="black"]
  node2 -> node3 [label=<<font color="black">true</font>> color="black"]
  node2 -> node4 [label=<<font color="black">false</font>> color="black"]
  node3 -> node4 [ color="black"]
  node4 -> node1 [ color="black"]
}
