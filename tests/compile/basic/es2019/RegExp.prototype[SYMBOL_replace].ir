{
  let rx = this
  app __x0__ = (Type rx)
  if (! (= __x0__ Object)) throw TypeError else {}
  app __x1__ = (ToString string)
  let S = [? __x1__]
  let lengthS = S.length
  app __x2__ = (IsCallable replaceValue)
  let functionalReplace = __x2__
  if (= functionalReplace false) {
    app __x3__ = (ToString replaceValue)
    replaceValue = [? __x3__]
  } else {}
  app __x4__ = (Get rx "global")
  app __x5__ = (ToBoolean [? __x4__])
  let global = __x5__
  if (= global true) {
    app __x6__ = (Get rx "unicode")
    app __x7__ = (ToBoolean [? __x6__])
    let fullUnicode = __x7__
    app __x8__ = (Set rx "lastIndex" 0i true)
    [? __x8__]
  } else {}
  let results = (new [])
  let done = false
  while (= done false) {
    app __x9__ = (RegExpExec rx S)
    let result = [? __x9__]
    if (= result null) done = true else {
      append result -> results
      if (= global false) done = true else {
        app __x10__ = (Get result "0")
        app __x11__ = (ToString [? __x10__])
        let matchStr = [? __x11__]
        if (= matchStr "") {
          app __x12__ = (Get rx "lastIndex")
          app __x13__ = (ToLength [? __x12__])
          let thisIndex = [? __x13__]
          app __x14__ = (AdvanceStringIndex S thisIndex fullUnicode)
          let nextIndex = __x14__
          app __x15__ = (Set rx "lastIndex" nextIndex true)
          [? __x15__]
        } else {}
      }
    }
  }
  let accumulatedResult = ""
  let nextSourcePosition = 0i
  let __x16__ = results
  let __x17__ = 0i
  while (< __x17__ __x16__.length) {
    let result = __x16__[__x17__]
    app __x18__ = (Get result "length")
    app __x19__ = (ToLength [? __x18__])
    let nCaptures = [? __x19__]
    app __x20__ = (max (- nCaptures 1i) 0i)
    nCaptures = __x20__
    app __x21__ = (Get result "0")
    app __x22__ = (ToString [? __x21__])
    let matched = [? __x22__]
    let matchLength = matched.length
    app __x23__ = (Get result "index")
    app __x24__ = (ToInteger [? __x23__])
    let position = [? __x24__]
    app __x25__ = (min position lengthS)
    app __x26__ = (max __x25__ 0i)
    position = __x26__
    let n = 1i
    let captures = (new [])
    while (! (< nCaptures n)) {
      app __x27__ = (ToString n)
      app __x28__ = (Get result [! __x27__])
      let capN = [? __x28__]
      if (! (= capN undefined)) {
        app __x29__ = (ToString capN)
        capN = [? __x29__]
      } else {}
      append capN -> captures
      n = (+ n 1i)
    }
    app __x30__ = (Get result "groups")
    let namedCaptures = [? __x30__]
    if (= functionalReplace true) {
      let replacerArgs = (new [matched])
      let __x31__ = captures
      let __x32__ = 0i
      while (< __x32__ __x31__.length) {
        let __x33__ = __x31__[__x32__]
        append __x33__ -> replacerArgs
        __x32__ = (+ __x32__ 1i)
      }
      append position -> replacerArgs
      append S -> replacerArgs
      if (! (= namedCaptures undefined)) append namedCaptures -> replacerArgs else {}
      app __x34__ = (Call replaceValue undefined replacerArgs)
      let replValue = [? __x34__]
      app __x35__ = (ToString replValue)
      let replacement = [? __x35__]
    } else {
      app __x36__ = (GetSubstitution matched S position captures namedCaptures replaceValue)
      let replacement = __x36__
    }
    if (! (< position nextSourcePosition)) {
      ??? "Set id:{accumulatedResult} to the string - concatenation of the current value of id:{accumulatedResult} , the substring of id:{S} consisting of the code units from id:{nextSourcePosition} ( inclusive ) up to id:{position} ( exclusive ) , and id:{replacement} ."
      nextSourcePosition = (+ position matchLength)
    } else {}
    __x17__ = (+ __x17__ 1i)
  }
  if (! (< nextSourcePosition lengthS)) return accumulatedResult else {}
  ??? "Return the string - concatenation of id:{accumulatedResult} and the substring of id:{S} consisting of the code units from id:{nextSourcePosition} ( inclusive ) up through the final code unit of id:{S} ( inclusive ) ."
}