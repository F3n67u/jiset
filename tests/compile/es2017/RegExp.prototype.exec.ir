{
  app string = (GetArgument argumentsList 0i)
  [0] let R = this
  [1] app __x0__ = (Type R)
  [1] if (! (= __x0__ Object)) {
    app __x1__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_TypeError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
    return __x1__
  } else [8] {}
  [2] if (= R.RegExpMatcher absent) {
    app __x2__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_TypeError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
    return __x2__
  } else [8] {}
  [3] app __x3__ = (ToString string)
  [3] if (is-completion __x3__) if (= __x3__.Type CONST_normal) __x3__ = __x3__.Value else return __x3__ else [8] {}
  [3] let S = __x3__
  [4] app __x4__ = (RegExpBuiltinExec R S)
  [4] if (is-completion __x4__) if (= __x4__.Type CONST_normal) __x4__ = __x4__.Value else return __x4__ else [8] {}
  [4] app __x5__ = (WrapCompletion __x4__)
  [4] return __x5__
}