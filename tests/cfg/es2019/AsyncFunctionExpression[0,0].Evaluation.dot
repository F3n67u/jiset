digraph {
  node9292 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node9298 [shape=cds, label=<<font color="black">2:app __x1__ = (AsyncFunctionCreate CONST_Normal FormalParameters AsyncFunctionBody scope strict)</font>> color="black" fillcolor="white" style=filled]
  node9296 [shape=cds, label=<<font color="black">1:access __x0__ = (GLOBAL_context &quot;LexicalEnvironment&quot;)</font>> color="black" fillcolor="white" style=filled]
  node9291 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node9295 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let strict = false</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node9294 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let strict = true</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node9297 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">1:let scope = __x0__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node9299 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">2:let closure = [! __x1__]</td></tr>
      <tr><td align="left">3:closure.SourceText = (get-syntax AsyncFunctionExpression)</td></tr>
      <tr><td align="left">4:return closure</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node9293 [shape=diamond, label=<<font color="black">true</font>> color="black" fillcolor="white" style=filled]
  node9293 -> node9294 [label=<<font color="black">true</font>> color="black"]
  node9293 -> node9295 [label=<<font color="black">false</font>> color="black"]
  node9291 -> node9293 [ color="black"]
  node9299 -> node9292 [ color="black"]
  node9294 -> node9296 [ color="black"]
  node9296 -> node9297 [ color="black"]
  node9295 -> node9296 [ color="black"]
  node9297 -> node9298 [ color="black"]
  node9298 -> node9299 [ color="black"]
}
