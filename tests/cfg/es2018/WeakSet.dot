digraph {
  node16013 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">5:let adder = [? __x1__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16027 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">12:let status = __x6__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16022 [shape=diamond, label=<<font color="black">(= next false)</font>> color="black" fillcolor="white" style=filled]
  node16003 [shape=cds, label=<<font color="black">app iterable = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node16018 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">7:let iteratorRecord = [? __x3__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16023 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return set</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16008 [shape=diamond, label=<<font color="black">(= iterable absent)</font>> color="black" fillcolor="white" style=filled]
  node16012 [shape=cds, label=<<font color="black">5:app __x1__ = (Get set &quot;add&quot;)</font>> color="black" fillcolor="white" style=filled]
  node16030 [shape=cds, label=<<font color="black">app __x8__ = (IteratorClose iteratorRecord status)</font>> color="black" fillcolor="white" style=filled]
  node16005 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16024 [shape=cds, label=<<font color="black">11:app __x5__ = (IteratorValue next)</font>> color="black" fillcolor="white" style=filled]
  node16001 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node16009 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let iterable = undefined</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16006 [shape=cds, label=<<font color="black">1:app __x0__ = (OrdinaryCreateFromConstructor NewTarget INTRINSIC_WeakSetPrototype (new [&quot;WeakSetData&quot;]))</font>> color="black" fillcolor="white" style=filled]
  node16021 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">9:let next = [? __x4__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16002 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node16017 [shape=cds, label=<<font color="black">7:app __x3__ = (GetIterator iterable)</font>> color="black" fillcolor="white" style=filled]
  node16007 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">1:let set = [? __x0__]</td></tr>
      <tr><td align="left">2:set.WeakSetData = (new [])</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16028 [shape=cds, label=<<font color="black">13:app __x7__ = (IsAbruptCompletion status)</font>> color="black" fillcolor="white" style=filled]
  node16011 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return set</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16016 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16026 [shape=cds, label=<<font color="black">12:app __x6__ = (Call adder set (new [nextValue]))</font>> color="black" fillcolor="white" style=filled]
  node16019 [shape=diamond, label=<<font color="black">true</font>> color="black" fillcolor="white" style=filled]
  node16004 [shape=diamond, label=<<font color="black">(= NewTarget undefined)</font>> color="black" fillcolor="white" style=filled]
  node16031 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return [? __x8__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16010 [shape=diamond, label=<<font color="black">(|| (= iterable undefined) (= iterable null))</font>> color="black" fillcolor="white" style=filled]
  node16025 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">11:let nextValue = [? __x5__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16015 [shape=diamond, label=<<font color="black">(= __x2__ false)</font>> color="black" fillcolor="white" style=filled]
  node16020 [shape=cds, label=<<font color="black">9:app __x4__ = (IteratorStep iteratorRecord)</font>> color="black" fillcolor="white" style=filled]
  node16014 [shape=cds, label=<<font color="black">6:app __x2__ = (IsCallable adder)</font>> color="black" fillcolor="white" style=filled]
  node16029 [shape=diamond, label=<<font color="black">__x7__</font>> color="black" fillcolor="white" style=filled]
  node16023 -> node16024 [ color="black"]
  node16001 -> node16003 [ color="black"]
  node16029 -> node16030 [label=<<font color="black">true</font>> color="black"]
  node16029 -> node16019 [label=<<font color="black">false</font>> color="black"]
  node16026 -> node16027 [ color="black"]
  node16016 -> node16017 [ color="black"]
  node16013 -> node16014 [ color="black"]
  node16007 -> node16008 [ color="black"]
  node16010 -> node16011 [label=<<font color="black">true</font>> color="black"]
  node16010 -> node16012 [label=<<font color="black">false</font>> color="black"]
  node16006 -> node16007 [ color="black"]
  node16014 -> node16015 [ color="black"]
  node16003 -> node16004 [ color="black"]
  node16028 -> node16029 [ color="black"]
  node16024 -> node16025 [ color="black"]
  node16008 -> node16009 [label=<<font color="black">true</font>> color="black"]
  node16008 -> node16010 [label=<<font color="black">false</font>> color="black"]
  node16019 -> node16020 [label=<<font color="black">true</font>> color="black"]
  node16019 -> node16002 [label=<<font color="black">false</font>> color="black"]
  node16012 -> node16013 [ color="black"]
  node16004 -> node16005 [label=<<font color="black">true</font>> color="black"]
  node16004 -> node16006 [label=<<font color="black">false</font>> color="black"]
  node16031 -> node16019 [ color="black"]
  node16020 -> node16021 [ color="black"]
  node16018 -> node16019 [ color="black"]
  node16017 -> node16018 [ color="black"]
  node16005 -> node16006 [ color="black"]
  node16011 -> node16012 [ color="black"]
  node16021 -> node16022 [ color="black"]
  node16025 -> node16026 [ color="black"]
  node16022 -> node16023 [label=<<font color="black">true</font>> color="black"]
  node16022 -> node16024 [label=<<font color="black">false</font>> color="black"]
  node16030 -> node16031 [ color="black"]
  node16027 -> node16028 [ color="black"]
  node16015 -> node16016 [label=<<font color="black">true</font>> color="black"]
  node16015 -> node16017 [label=<<font color="black">false</font>> color="black"]
  node16009 -> node16010 [ color="black"]
}
