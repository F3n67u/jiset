{
  ??? "Let id:{substitutions} be a List consisting of all of the arguments passed to this function , starting with the second argument . If fewer than two arguments were passed , the List is empty ."
  let numberOfSubstitutions = substitutions.length
  app __x0__ = (ToObject template)
  let cooked = [? __x0__]
  app __x1__ = (Get cooked "raw")
  app __x2__ = (ToObject [? __x1__])
  let raw = [? __x2__]
  app __x3__ = (Get raw "length")
  app __x4__ = (ToLength [? __x3__])
  let literalSegments = [? __x4__]
  if (! (< 0i literalSegments)) return "" else {}
  let stringElements = (new [])
  let nextIndex = 0i
  while true {
    app __x5__ = (ToString nextIndex)
    let nextKey = [! __x5__]
    app __x6__ = (Get raw nextKey)
    app __x7__ = (ToString [? __x6__])
    let nextSeg = [? __x7__]
    let __x8__ = nextSeg
    let __x9__ = 0i
    while (< __x9__ __x8__.length) {
      let __x10__ = __x8__[__x9__]
      append __x10__ -> stringElements
      __x9__ = (+ __x9__ 1i)
    }
    if (== (+ nextIndex 1i) literalSegments) ??? "Return the String value whose code units are , in order , the elements in the List id:{stringElements} . If id:{stringElements} has no elements , the empty string is returned ." else {}
    if (< nextIndex numberOfSubstitutions) let next = substitutions[nextIndex] else let next = ""
    app __x11__ = (ToString next)
    let nextSub = [? __x11__]
    let __x12__ = nextSub
    let __x13__ = 0i
    while (< __x13__ __x12__.length) {
      let __x14__ = __x12__[__x13__]
      append __x14__ -> stringElements
      __x13__ = (+ __x13__ 1i)
    }
    let nextIndex = (+ nextIndex 1i)
  }
}