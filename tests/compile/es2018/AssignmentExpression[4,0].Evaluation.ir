{
  [0] if (! (|| (is-instance-of LeftHandSideExpression ObjectLiteral) (is-instance-of LeftHandSideExpression ArrayLiteral))) {
    [1] access __x0__ = (LeftHandSideExpression "Evaluation")
    [1] let lref = __x0__
    [2] if (is-completion lref) if (= lref.Type CONST_normal) lref = lref.Value else return lref else [3] {}
    [2] lref
    [3] access __x1__ = (AssignmentExpression "Evaluation")
    [3] let rref = __x1__
    [4] app __x2__ = (GetValue rref)
    [4] if (is-completion __x2__) if (= __x2__.Type CONST_normal) __x2__ = __x2__.Value else return __x2__ else [3] {}
    [4] let rval = __x2__
    [5] app __x3__ = (IsAnonymousFunctionDefinition AssignmentExpression)
    [5] access __x4__ = (LeftHandSideExpression "IsIdentifierRef")
    [5] if (&& (= __x3__ true) (= __x4__ true)) {
      [6] app __x5__ = (HasOwnProperty rval "name")
      [6] if (is-completion __x5__) if (= __x5__.Type CONST_normal) __x5__ = __x5__.Value else return __x5__ else [3] {}
      [6] let hasNameProperty = __x5__
      [7] if (= hasNameProperty false) {
        app __x6__ = (GetReferencedName lref)
        app __x7__ = (SetFunctionName rval __x6__)
        __x7__
      } else [3] {}
    } else [3] {}
    [8] app __x8__ = (PutValue lref rval)
    [8] if (is-completion __x8__) if (= __x8__.Type CONST_normal) __x8__ = __x8__.Value else return __x8__ else [3] {}
    [8] __x8__
    [9] app __x9__ = (WrapCompletion rval)
    [9] return __x9__
  } else [3] {}
  [10] let assignmentPattern = (parse-syntax LeftHandSideExpression "AssignmentPattern" (new []))
  [11] access __x10__ = (AssignmentExpression "Evaluation")
  [11] let rref = __x10__
  [12] app __x11__ = (GetValue rref)
  [12] if (is-completion __x11__) if (= __x11__.Type CONST_normal) __x11__ = __x11__.Value else return __x11__ else [3] {}
  [12] let rval = __x11__
  [13] access __x12__ = (assignmentPattern "DestructuringAssignmentEvaluation")
  [13] app __x13__ = (__x12__ rval)
  [13] if (is-completion __x13__) if (= __x13__.Type CONST_normal) __x13__ = __x13__.Value else return __x13__ else [3] {}
  [13] __x13__
  [14] app __x14__ = (WrapCompletion rval)
  [14] return __x14__
}