digraph {
  node17920 [shape=cds, label=<<font color="black">5:app __x2__ = (ToBigInt expectedValue)</font>> color="black" fillcolor="white" style=filled]
  node17929 [shape=diamond, label=<<font color="black">(= __x6__ true)</font>> color="black" fillcolor="white" style=filled]
  node17946 [shape=diamond, label=<<font color="black">(= __x11__ true)</font>> color="black" fillcolor="white" style=filled]
  node17911 [shape=cds, label=<<font color="black">app typedArray = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node17916 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let buffer = [? __x0__]</td></tr>
      <tr><td align="left">1:let block = buffer.ArrayBufferData</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17919 [shape=diamond, label=<<font color="black">(= typedArray.ContentType CONST_BigInt)</font>> color="black" fillcolor="white" style=filled]
  node17915 [shape=cds, label=<<font color="black">0:app __x0__ = (ValidateIntegerTypedArray typedArray)</font>> color="black" fillcolor="white" style=filled]
  node17931 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">12:??? &quot;Let id:{elementType} be the Element Type value in link:{unhandled: table-the-typedarray-constructors} for id:{arrayTypeName} .&quot;</td></tr>
      <tr><td align="left">13:??? &quot;Let id:{elementSize} be the Element Size value specified in link:{unhandled: table-the-typedarray-constructors} for Element Type id:{elementType} .&quot;</td></tr>
      <tr><td align="left">14:let isLittleEndian = GLOBAL_agent.LittleEndian</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17918 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">2:let indexedPosition = [? __x1__]</td></tr>
      <tr><td align="left">3:let arrayTypeName = typedArray.TypedArrayName</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17935 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">16:let replacementBytes = __x8__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17914 [shape=cds, label=<<font color="black">app replacementValue = (GetArgument argumentsList 3i)</font>> color="black" fillcolor="white" style=filled]
  node17943 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">29:append event -&gt; eventList</td></tr>
      <tr><td align="left">30:append (new ChosenValueRecord(&quot;Event&quot; -&gt; event, &quot;ChosenValue&quot; -&gt; rawBytesRead)) -&gt; execution.ChosenValues</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17930 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17927 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">9:let replacement = [? __x5__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17922 [shape=cds, label=<<font color="black">6:app __x3__ = (ToBigInt replacementValue)</font>> color="black" fillcolor="white" style=filled]
  node17924 [shape=cds, label=<<font color="black">8:app __x4__ = (ToIntegerOrInfinity expectedValue)</font>> color="black" fillcolor="white" style=filled]
  node17925 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">8:let expected = [? __x4__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17928 [shape=cds, label=<<font color="black">10:app __x6__ = (IsDetachedBuffer buffer)</font>> color="black" fillcolor="white" style=filled]
  node17923 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">6:let replacement = [? __x3__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17933 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">15:let expectedBytes = __x7__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17938 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">18:let execution = GLOBAL_agent.CandidateExecution</td></tr>
      <tr><td align="left">19:??? &quot;Let id:{eventList} be the [ [ EventList ] ] field of the element in id:{execution} . [ [ EventsRecords ] ] whose [ [ AgentSignifier ] ] is AgentSignifier ( ) .&quot;</td></tr>
      <tr><td align="left">20:??? &quot;Let id:{rawBytesRead} be a List of length id:{elementSize} whose elements are nondeterministically chosen byte values .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17936 [shape=cds, label=<<font color="black">31:app __x9__ = (IsSharedArrayBuffer buffer)</font>> color="black" fillcolor="white" style=filled]
  node17945 [shape=cds, label=<<font color="black">33:app __x11__ = (ByteListEqual rawBytesRead expectedBytes)</font>> color="black" fillcolor="white" style=filled]
  node17939 [shape=cds, label=<<font color="black">27:app __x10__ = (ByteListEqual rawBytesRead expectedBytes)</font>> color="black" fillcolor="white" style=filled]
  node17942 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let event = (new ReadSharedMemory(&quot;Order&quot; -&gt; CONST_SeqCst, &quot;NoTear&quot; -&gt; true, &quot;Block&quot; -&gt; block, &quot;ByteIndex&quot; -&gt; indexedPosition, &quot;ElementSize&quot; -&gt; elementSize))</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17912 [shape=cds, label=<<font color="black">app index = (GetArgument argumentsList 1i)</font>> color="black" fillcolor="white" style=filled]
  node17932 [shape=cds, label=<<font color="black">15:app __x7__ = (NumericToRawBytes elementType expected isLittleEndian)</font>> color="black" fillcolor="white" style=filled]
  node17949 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">35:return __x12__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17926 [shape=cds, label=<<font color="black">9:app __x5__ = (ToIntegerOrInfinity replacementValue)</font>> color="black" fillcolor="white" style=filled]
  node17921 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">5:let expected = [? __x2__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17940 [shape=diamond, label=<<font color="black">(= __x10__ true)</font>> color="black" fillcolor="white" style=filled]
  node17909 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node17948 [shape=cds, label=<<font color="black">35:app __x12__ = (RawBytesToNumeric elementType rawBytesRead isLittleEndian)</font>> color="black" fillcolor="white" style=filled]
  node17934 [shape=cds, label=<<font color="black">16:app __x8__ = (NumericToRawBytes elementType replacement isLittleEndian)</font>> color="black" fillcolor="white" style=filled]
  node17947 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">??? &quot;Store the individual bytes of id:{replacementBytes} into id:{block} , starting at id:{block} [ id:{indexedPosition} ] .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17917 [shape=cds, label=<<font color="black">2:app __x1__ = (ValidateAtomicAccess typedArray index)</font>> color="black" fillcolor="white" style=filled]
  node17941 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">24:??? &quot;Let id:{second} be a new read - modify - write modification function with parameters ( id:{oldBytes} , id:{newBytes} ) that captures nothing and performs the following steps atomically when called : in:{} out:{}&quot;</td></tr>
      <tr><td align="left">26:let event = (new ReadModifyWriteSharedMemory(&quot;Order&quot; -&gt; CONST_SeqCst, &quot;NoTear&quot; -&gt; true, &quot;Block&quot; -&gt; block, &quot;ByteIndex&quot; -&gt; indexedPosition, &quot;ElementSize&quot; -&gt; elementSize, &quot;Payload&quot; -&gt; replacementBytes, &quot;ModifyOp&quot; -&gt; second))</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17913 [shape=cds, label=<<font color="black">app expectedValue = (GetArgument argumentsList 2i)</font>> color="black" fillcolor="white" style=filled]
  node17937 [shape=diamond, label=<<font color="black">(= __x9__ true)</font>> color="black" fillcolor="white" style=filled]
  node17944 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">32:??? &quot;Let id:{rawBytesRead} be a List of length id:{elementSize} whose elements are the sequence of id:{elementSize} bytes starting with id:{block} [ id:{indexedPosition} ] .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17910 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node17937 -> node17938 [label=<<font color="black">true</font>> color="black"]
  node17937 -> node17944 [label=<<font color="black">false</font>> color="black"]
  node17930 -> node17931 [ color="black"]
  node17946 -> node17947 [label=<<font color="black">true</font>> color="black"]
  node17946 -> node17948 [label=<<font color="black">false</font>> color="black"]
  node17927 -> node17928 [ color="black"]
  node17919 -> node17920 [label=<<font color="black">true</font>> color="black"]
  node17919 -> node17924 [label=<<font color="black">false</font>> color="black"]
  node17920 -> node17921 [ color="black"]
  node17909 -> node17911 [ color="black"]
  node17926 -> node17927 [ color="black"]
  node17935 -> node17936 [ color="black"]
  node17939 -> node17940 [ color="black"]
  node17945 -> node17946 [ color="black"]
  node17918 -> node17919 [ color="black"]
  node17940 -> node17941 [label=<<font color="black">true</font>> color="black"]
  node17940 -> node17942 [label=<<font color="black">false</font>> color="black"]
  node17938 -> node17939 [ color="black"]
  node17949 -> node17910 [ color="black"]
  node17931 -> node17932 [ color="black"]
  node17913 -> node17914 [ color="black"]
  node17947 -> node17948 [ color="black"]
  node17943 -> node17948 [ color="black"]
  node17914 -> node17915 [ color="black"]
  node17916 -> node17917 [ color="black"]
  node17948 -> node17949 [ color="black"]
  node17929 -> node17930 [label=<<font color="black">true</font>> color="black"]
  node17929 -> node17931 [label=<<font color="black">false</font>> color="black"]
  node17928 -> node17929 [ color="black"]
  node17934 -> node17935 [ color="black"]
  node17941 -> node17943 [ color="black"]
  node17922 -> node17923 [ color="black"]
  node17925 -> node17926 [ color="black"]
  node17915 -> node17916 [ color="black"]
  node17942 -> node17943 [ color="black"]
  node17933 -> node17934 [ color="black"]
  node17921 -> node17922 [ color="black"]
  node17923 -> node17928 [ color="black"]
  node17936 -> node17937 [ color="black"]
  node17917 -> node17918 [ color="black"]
  node17944 -> node17945 [ color="black"]
  node17924 -> node17925 [ color="black"]
  node17932 -> node17933 [ color="black"]
  node17912 -> node17913 [ color="black"]
  node17911 -> node17912 [ color="black"]
}
