def CreateListIteratorRecord(list) = {
  0:let closure = ()[list] => {
    1:let __x0__ = list
    1:let __x1__ = 0i
    1:while (< __x1__ __x0__.length) {
      let E = __x0__[__x1__]
      2:app __x2__ = (Yield E)
      2:[? __x2__]
      __x1__ = (+ __x1__ 1i)
    }
    3:return undefined
  }
  4:app __x3__ = (CreateIteratorFromClosure closure CONST_empty INTRINSICS["%IteratorPrototype%"])
  4:let iterator = [! __x3__]
  5:return (new Record("Iterator" -> iterator, "NextMethod" -> INTRINSICS["%GeneratorFunction.prototype.prototype.next%"], "Done" -> false))
}
- id: "sec-createlistiteratorRecord"
- code:
        1. Let _closure_ be a new Abstract Closure with no parameters that captures _list_ and performs the following steps when called:
          1. For each element _E_ of _list_, do
            1. Perform ? Yield(_E_).
          1. Return *undefined*.
        1. Let _iterator_ be ! CreateIteratorFromClosure(_closure_, ~empty~, %IteratorPrototype%).
        1. Return Record { [[Iterator]]: _iterator_, [[NextMethod]]: %GeneratorFunction.prototype.prototype.next%, [[Done]]: *false* }.