digraph {
  node14014 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let pos = Infinity</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14007 [shape=cds, label=<<font color="black">1:app __x1__ = (ToString O)</font>> color="black" fillcolor="white" style=filled]
  node14002 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node14004 [shape=cds, label=<<font color="black">app position = (GetArgument argumentsList 1i)</font>> color="black" fillcolor="white" style=filled]
  node14010 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">2:let searchStr = [? __x2__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14016 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let pos = [! __x4__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14012 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">3:let numPos = [? __x3__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14017 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">6:let len = S.length</td></tr>
      <tr><td align="left">7:??? &quot;Let id:{start} be the result of clamping id:{pos} between 0 and id:{len} .&quot;</td></tr>
      <tr><td align="left">8:let searchLen = searchStr.length</td></tr>
      <tr><td align="left">9:??? &quot;Let id:{k} be the largest possible non - negative integer not larger than id:{start} such that id:{k} + id:{searchLen} &le; id:{len} , and for all non - negative integers id:{j} such that id:{j} &lt; id:{searchLen} , the code unit at index id:{k} + id:{j} within id:{S} is the same as the code unit at index id:{j} within id:{searchStr} ; but if there is no such integer , let id:{k} be - 1 .&quot;</td></tr>
      <tr><td align="left">10:return k</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14005 [shape=cds, label=<<font color="black">0:app __x0__ = (RequireObjectCoercible this)</font>> color="black" fillcolor="white" style=filled]
  node14001 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node14006 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let O = [? __x0__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14013 [shape=diamond, label=<<font color="black">(= numPos NaN)</font>> color="black" fillcolor="white" style=filled]
  node14011 [shape=cds, label=<<font color="black">3:app __x3__ = (ToNumber position)</font>> color="black" fillcolor="white" style=filled]
  node14008 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">1:let S = [? __x1__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14003 [shape=cds, label=<<font color="black">app searchString = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node14009 [shape=cds, label=<<font color="black">2:app __x2__ = (ToString searchString)</font>> color="black" fillcolor="white" style=filled]
  node14015 [shape=cds, label=<<font color="black">app __x4__ = (ToIntegerOrInfinity numPos)</font>> color="black" fillcolor="white" style=filled]
  node14007 -> node14008 [ color="black"]
  node14014 -> node14017 [ color="black"]
  node14003 -> node14004 [ color="black"]
  node14013 -> node14014 [label=<<font color="black">true</font>> color="black"]
  node14013 -> node14015 [label=<<font color="black">false</font>> color="black"]
  node14008 -> node14009 [ color="black"]
  node14015 -> node14016 [ color="black"]
  node14012 -> node14013 [ color="black"]
  node14005 -> node14006 [ color="black"]
  node14001 -> node14003 [ color="black"]
  node14016 -> node14017 [ color="black"]
  node14017 -> node14002 [ color="black"]
  node14004 -> node14005 [ color="black"]
  node14010 -> node14011 [ color="black"]
  node14006 -> node14007 [ color="black"]
  node14009 -> node14010 [ color="black"]
  node14011 -> node14012 [ color="black"]
}
