{
  [0] app __x0__ = (IsDetachedBuffer arrayBuffer)
  [0] assert (= __x0__ false)
  [2] app __x1__ = (IsNonNegativeInteger byteIndex)
  [2] if (is-completion __x1__) if (= __x1__.Type CONST_normal) __x1__ = __x1__.Value else return __x1__ else [3] {}
  [2] assert (= __x1__ true)
  [4] let block = arrayBuffer.ArrayBufferData
  [5] ??? "Let id:{elementSize} be the Element Size value specified in link:{} for Element Type id:{type} ."
  [6] if (= isLittleEndian absent) isLittleEndian = GLOBAL_agent.LittleEndian else [3] {}
  [7] app __x2__ = (NumericToRawBytes type value isLittleEndian)
  [7] let rawBytes = __x2__
  [8] app __x3__ = (IsSharedArrayBuffer arrayBuffer)
  [8] if (= __x3__ true) {
    [9] let execution = GLOBAL_agent.CandidateExecution
    [10] ??? "Let id:{eventList} be the [ [ EventList ] ] field of the element in id:{execution} . [ [ EventsRecords ] ] whose [ [ AgentSignifier ] ] is AgentSignifier ( ) ."
    [11] let __x4__ = (= isTypedArray true)
    [11] if __x4__ {
      app __x5__ = (IsNoTearConfiguration type order)
      __x4__ = (= __x5__ true)
    } else [3] {}
    [11] if __x4__ let noTear = true else let noTear = false
    [12] append (new WriteSharedMemory("Order" -> order, "NoTear" -> noTear, "Block" -> block, "ByteIndex" -> byteIndex, "ElementSize" -> elementSize, "Payload" -> rawBytes)) -> eventList
  } else [3] {}
  [13] ??? "Else , store the individual bytes of id:{rawBytes} into id:{block} , in order , starting at id:{block} [ id:{byteIndex} ] ."
  [14] app __x6__ = (NormalCompletion undefined)
  [14] app __x7__ = (WrapCompletion __x6__)
  [14] return __x7__
}