digraph {
  node12705 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw SyntaxError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12700 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node12704 [shape=diamond, label=<<font color="black">(|| (== n 0i) (&lt; NcapturingParens n))</font>> color="black" fillcolor="white" style=filled]
  node12701 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node12702 [shape=cds, label=<<font color="black">0:access __x0__ = (DecimalEscape &quot;Evaluation&quot;)</font>> color="black" fillcolor="white" style=filled]
  node12706 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">8:??? &quot;Return an internal Matcher closure that takes two arguments , a State id:{x} and a Continuation id:{c} , and performs the following steps : in:{} out:{}&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12703 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let E = __x0__</td></tr>
      <tr><td align="left">1:??? &quot;If id:{E} is a character , then in:{} out:{}&quot;</td></tr>
      <tr><td align="left">6:??? &quot;Let id:{n} be that integer .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12702 -> node12703 [ color="black"]
  node12704 -> node12705 [label=<<font color="black">true</font>> color="black"]
  node12704 -> node12706 [label=<<font color="black">false</font>> color="black"]
  node12700 -> node12702 [ color="black"]
  node12706 -> node12701 [ color="black"]
  node12703 -> node12704 [ color="black"]
  node12705 -> node12706 [ color="black"]
}
