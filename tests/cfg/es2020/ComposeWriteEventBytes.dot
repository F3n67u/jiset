digraph {
  node0 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node5 [shape=diamond, label=<<font color="black">(is-instance-of W WriteSharedMemory)</font>> color="black" fillcolor="white" style=filled]
  node10 [shape=cds, label=<<font color="black">10:app __x3__ = (W.ModifyOp W bytes W.Payload)</font>> color="black" fillcolor="white" style=filled]
  node1 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node6 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let byte = W.Payload[payloadIndex]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node9 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">9:let bytes = __x2__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node13 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">14:return bytesRead</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node2 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let byteLocation = byteIndex</td></tr>
      <tr><td align="left">1:let bytesRead = (new [])</td></tr>
      <tr><td align="left">2:let __x0__ = Ws</td></tr>
      <tr><td align="left">2:let __x1__ = 0i</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">12:append byte -&gt; bytesRead</td></tr>
      <tr><td align="left">13:byteLocation = (+ byteLocation 1i)</td></tr>
      <tr><td align="left">__x1__ = (+ __x1__ 1i)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node7 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">8:assert (is-instance-of W ReadModifyWriteSharedMemory)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node3 [shape=diamond, label=<<font color="black">(&lt; __x1__ __x0__.length)</font>> color="black" fillcolor="white" style=filled]
  node11 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">10:let bytesModified = __x3__</td></tr>
      <tr><td align="left">11:let byte = bytesModified[payloadIndex]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node8 [shape=cds, label=<<font color="black">9:app __x2__ = (ValueOfReadEvent execution W)</font>> color="black" fillcolor="white" style=filled]
  node4 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let W = __x0__[__x1__]</td></tr>
      <tr><td align="left">4:let payloadIndex = (- byteLocation W.ByteIndex)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node3 -> node4 [label=<<font color="black">true</font>> color="black"]
  node3 -> node13 [label=<<font color="black">false</font>> color="black"]
  node7 -> node8 [ color="black"]
  node2 -> node3 [ color="black"]
  node11 -> node12 [ color="black"]
  node0 -> node2 [ color="black"]
  node9 -> node10 [ color="black"]
  node6 -> node12 [ color="black"]
  node10 -> node11 [ color="black"]
  node4 -> node5 [ color="black"]
  node12 -> node3 [ color="black"]
  node8 -> node9 [ color="black"]
  node5 -> node6 [label=<<font color="black">true</font>> color="black"]
  node5 -> node7 [label=<<font color="black">false</font>> color="black"]
  node13 -> node1 [ color="black"]
}
