digraph {
  node10673 [shape=diamond, label=<<font color="black">__x1__</font>> color="black" fillcolor="white" style=filled]
  node10670 [shape=cds, label=<<font color="black">3:app __x0__ = (InnerModuleEvaluation module stack 0i)</font>> color="black" fillcolor="white" style=filled]
  node10671 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">3:let result = __x0__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10668 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node10674 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">5:let __x2__ = stack</td></tr>
      <tr><td align="left">5:let __x3__ = 0i</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10669 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let module = this</td></tr>
      <tr><td align="left">1:assert (|| (= module.Status &quot;instantiated&quot;) (= module.Status &quot;evaluated&quot;))</td></tr>
      <tr><td align="left">2:let stack = (new [])</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10678 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">11:assert (&amp;&amp; (= module.Status &quot;evaluated&quot;) (= module.EvaluationError undefined))</td></tr>
      <tr><td align="left">12:assert (= stack.length 0i)</td></tr>
      <tr><td align="left">13:return undefined</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10676 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let m = __x2__[__x3__]</td></tr>
      <tr><td align="left">6:assert (= m.Status &quot;evaluating&quot;)</td></tr>
      <tr><td align="left">7:m.Status = &quot;evaluated&quot;</td></tr>
      <tr><td align="left">8:m.EvaluationError = result</td></tr>
      <tr><td align="left">__x3__ = (+ __x3__ 1i)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10677 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">9:assert (&amp;&amp; (= module.Status &quot;evaluated&quot;) (= module.EvaluationError result))</td></tr>
      <tr><td align="left">10:return result</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10675 [shape=diamond, label=<<font color="black">(&lt; __x3__ __x2__.length)</font>> color="black" fillcolor="white" style=filled]
  node10672 [shape=cds, label=<<font color="black">4:app __x1__ = (IsAbruptCompletion result)</font>> color="black" fillcolor="white" style=filled]
  node10667 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node10669 -> node10670 [ color="black"]
  node10667 -> node10669 [ color="black"]
  node10678 -> node10668 [ color="black"]
  node10671 -> node10672 [ color="black"]
  node10673 -> node10674 [label=<<font color="black">true</font>> color="black"]
  node10673 -> node10678 [label=<<font color="black">false</font>> color="black"]
  node10674 -> node10675 [ color="black"]
  node10676 -> node10675 [ color="black"]
  node10677 -> node10678 [ color="black"]
  node10670 -> node10671 [ color="black"]
  node10675 -> node10676 [label=<<font color="black">true</font>> color="black"]
  node10675 -> node10677 [label=<<font color="black">false</font>> color="black"]
  node10672 -> node10673 [ color="black"]
}
