digraph {
  node12617 [shape=cds, label=<<font color="black">5:app __x5__ = (min __x4__ len)</font>> color="black" fillcolor="white" style=filled]
  node12606 [shape=cds, label=<<font color="black">app searchString = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node12610 [shape=cds, label=<<font color="black">1:app __x1__ = (ToString O)</font>> color="black" fillcolor="white" style=filled]
  node12618 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">5:let start = __x5__</td></tr>
      <tr><td align="left">6:let searchLen = searchStr.length</td></tr>
      <tr><td align="left">7:??? &quot;Return the smallest possible integer id:{k} not smaller than id:{start} such that id:{k} + id:{searchLen} is not greater than id:{len} , and for all nonnegative integers id:{j} less than id:{searchLen} , the code unit at index id:{k} + id:{j} of id:{S} is the same as the code unit at index id:{j} of id:{searchStr} ; but if there is no such integer id:{k} , return the value - 1 .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12609 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let O = [? __x0__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12604 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node12616 [shape=cds, label=<<font color="black">5:app __x4__ = (max pos 0i)</font>> color="black" fillcolor="white" style=filled]
  node12612 [shape=cds, label=<<font color="black">2:app __x2__ = (ToString searchString)</font>> color="black" fillcolor="white" style=filled]
  node12615 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">3:let pos = [? __x3__]</td></tr>
      <tr><td align="left">4:let len = S.length</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12605 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node12611 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">1:let S = [? __x1__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12607 [shape=cds, label=<<font color="black">app position = (GetArgument argumentsList 1i)</font>> color="black" fillcolor="white" style=filled]
  node12614 [shape=cds, label=<<font color="black">3:app __x3__ = (ToInteger position)</font>> color="black" fillcolor="white" style=filled]
  node12613 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">2:let searchStr = [? __x2__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12608 [shape=cds, label=<<font color="black">0:app __x0__ = (RequireObjectCoercible this)</font>> color="black" fillcolor="white" style=filled]
  node12610 -> node12611 [ color="black"]
  node12612 -> node12613 [ color="black"]
  node12614 -> node12615 [ color="black"]
  node12611 -> node12612 [ color="black"]
  node12613 -> node12614 [ color="black"]
  node12615 -> node12616 [ color="black"]
  node12604 -> node12606 [ color="black"]
  node12607 -> node12608 [ color="black"]
  node12618 -> node12605 [ color="black"]
  node12608 -> node12609 [ color="black"]
  node12609 -> node12610 [ color="black"]
  node12606 -> node12607 [ color="black"]
  node12616 -> node12617 [ color="black"]
  node12617 -> node12618 [ color="black"]
}
