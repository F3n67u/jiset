digraph {
  node12334 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let pos = len</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12319 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node12330 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12333 [shape=diamond, label=<<font color="black">(= endPosition undefined)</font>> color="black" fillcolor="white" style=filled]
  node12325 [shape=cds, label=<<font color="black">1:app __x1__ = (ToString O)</font>> color="black" fillcolor="white" style=filled]
  node12329 [shape=diamond, label=<<font color="black">(= isRegExp true)</font>> color="black" fillcolor="white" style=filled]
  node12322 [shape=cds, label=<<font color="black">app endPosition = (GetArgument argumentsList 1i)</font>> color="black" fillcolor="white" style=filled]
  node12327 [shape=cds, label=<<font color="black">2:app __x2__ = (IsRegExp searchString)</font>> color="black" fillcolor="white" style=filled]
  node12337 [shape=cds, label=<<font color="black">7:app __x5__ = (max pos 0i)</font>> color="black" fillcolor="white" style=filled]
  node12326 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">1:let S = [? __x1__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12332 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">4:let searchStr = [? __x3__]</td></tr>
      <tr><td align="left">5:let len = S.length</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12328 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">2:let isRegExp = [? __x2__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12331 [shape=cds, label=<<font color="black">4:app __x3__ = (ToString searchString)</font>> color="black" fillcolor="white" style=filled]
  node12339 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">7:let end = __x6__</td></tr>
      <tr><td align="left">8:let searchLength = searchStr.length</td></tr>
      <tr><td align="left">9:let start = (- end searchLength)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12324 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let O = [? __x0__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12340 [shape=diamond, label=<<font color="black">(&lt; start 0i)</font>> color="black" fillcolor="white" style=filled]
  node12321 [shape=cds, label=<<font color="black">app searchString = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node12336 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let pos = [? __x4__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12341 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return false</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12338 [shape=cds, label=<<font color="black">7:app __x6__ = (min __x5__ len)</font>> color="black" fillcolor="white" style=filled]
  node12323 [shape=cds, label=<<font color="black">0:app __x0__ = (RequireObjectCoercible this)</font>> color="black" fillcolor="white" style=filled]
  node12342 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">11:??? &quot;If the sequence of elements of id:{S} starting at id:{start} of length id:{searchLength} is the same as the full element sequence of id:{searchStr} , return value:{true} .&quot;</td></tr>
      <tr><td align="left">12:??? &quot;Otherwise , return value:{false} .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12335 [shape=cds, label=<<font color="black">app __x4__ = (ToInteger endPosition)</font>> color="black" fillcolor="white" style=filled]
  node12320 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node12321 -> node12322 [ color="black"]
  node12338 -> node12339 [ color="black"]
  node12339 -> node12340 [ color="black"]
  node12324 -> node12325 [ color="black"]
  node12319 -> node12321 [ color="black"]
  node12322 -> node12323 [ color="black"]
  node12337 -> node12338 [ color="black"]
  node12341 -> node12342 [ color="black"]
  node12340 -> node12341 [label=<<font color="black">true</font>> color="black"]
  node12340 -> node12342 [label=<<font color="black">false</font>> color="black"]
  node12335 -> node12336 [ color="black"]
  node12333 -> node12334 [label=<<font color="black">true</font>> color="black"]
  node12333 -> node12335 [label=<<font color="black">false</font>> color="black"]
  node12334 -> node12337 [ color="black"]
  node12323 -> node12324 [ color="black"]
  node12328 -> node12329 [ color="black"]
  node12332 -> node12333 [ color="black"]
  node12325 -> node12326 [ color="black"]
  node12327 -> node12328 [ color="black"]
  node12329 -> node12330 [label=<<font color="black">true</font>> color="black"]
  node12329 -> node12331 [label=<<font color="black">false</font>> color="black"]
  node12331 -> node12332 [ color="black"]
  node12342 -> node12320 [ color="black"]
  node12336 -> node12337 [ color="black"]
  node12330 -> node12331 [ color="black"]
  node12326 -> node12327 [ color="black"]
}
