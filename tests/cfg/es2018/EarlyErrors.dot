digraph {
  node18563 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw SyntaxError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18565 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">1:??? &quot;It is a Syntax Error if the nt:{LeftHandSideExpression} is grammar:{CoverParenthesizedExpressionAndArrowParameterList0, [Expression]} and nt:{Expression} derives a phrase that would produce a Syntax Error according to these rules if that phrase were substituted for nt:{LeftHandSideExpression} . This rule is recursively applied .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18560 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node18562 [shape=diamond, label=<<font color="black">(= __x0__ false)</font>> color="black" fillcolor="white" style=filled]
  node18561 [shape=cds, label=<<font color="black">0:access __x0__ = (LeftHandSideExpression &quot;IsValidSimpleAssignmentTarget&quot;)</font>> color="black" fillcolor="white" style=filled]
  node18564 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return undefined</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18559 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node18561 -> node18562 [ color="black"]
  node18564 -> node18565 [ color="black"]
  node18563 -> node18565 [ color="black"]
  node18559 -> node18561 [ color="black"]
  node18565 -> node18560 [ color="black"]
  node18562 -> node18563 [label=<<font color="black">true</font>> color="black"]
  node18562 -> node18564 [label=<<font color="black">false</font>> color="black"]
}
