def [BUILTIN] WeakSet.prototype.has(value) = {
  0:let S = this
  1:app __x0__ = (RequireInternalSlot S "WeakSetData")
  1:[? __x0__]
  2:let entries = S.WeakSetData
  3:if (! (= (typeof value) Object)) return false else 15:{}
  4:let __x1__ = entries
  4:let __x2__ = 0i
  4:while (< __x2__ __x1__.length) {
    let e = __x1__[__x2__]
    5:let __x3__ = true
    5:__x3__ = (! (= e CONST_empty))
    5:if __x3__ {
      app __x4__ = (SameValue e value)
      __x3__ = (= __x4__ true)
    } else 15:{}
    5:if __x3__ return true else 15:{}
    __x2__ = (+ __x2__ 1i)
  }
  6:return false
}
- id: sec-weakset.prototype.has
- code:
          1. Let _S_ be the *this* value.
          1. Perform ? RequireInternalSlot(_S_, [[WeakSetData]]).
          1. Let _entries_ be the List that is _S_.[[WeakSetData]].
          1. If Type(_value_) is not Object, return *false*.
          1. For each element _e_ of _entries_, do
            1. If _e_ is not ~empty~ and SameValue(_e_, _value_) is *true*, return *true*.
          1. Return *false*.