digraph {
  node12812 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">3:return (+ (+ (+ __x2__ &quot; &quot;) __x3__) __x4__)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12804 [shape=cds, label=<<font color="black">app tv = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node12809 [shape=cds, label=<<font color="black">3:app __x2__ = (DateString t)</font>> color="black" fillcolor="white" style=filled]
  node12803 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node12808 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">2:let t = __x1__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12806 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:assert (= __x0__ Number)</td></tr>
      <tr><td align="left">1:??? &quot;If id:{tv} is value:{NaN} , return ` \&quot; Invalid Date \&quot; ` .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12810 [shape=cds, label=<<font color="black">3:app __x3__ = (TimeString t)</font>> color="black" fillcolor="white" style=filled]
  node12802 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node12807 [shape=cds, label=<<font color="black">2:app __x1__ = (LocalTime tv)</font>> color="black" fillcolor="white" style=filled]
  node12811 [shape=cds, label=<<font color="black">3:app __x4__ = (TimeZoneString tv)</font>> color="black" fillcolor="white" style=filled]
  node12805 [shape=cds, label=<<font color="black">0:app __x0__ = (Type tv)</font>> color="black" fillcolor="white" style=filled]
  node12805 -> node12806 [ color="black"]
  node12810 -> node12811 [ color="black"]
  node12807 -> node12808 [ color="black"]
  node12809 -> node12810 [ color="black"]
  node12811 -> node12812 [ color="black"]
  node12806 -> node12807 [ color="black"]
  node12802 -> node12804 [ color="black"]
  node12804 -> node12805 [ color="black"]
  node12812 -> node12803 [ color="black"]
  node12808 -> node12809 [ color="black"]
}
