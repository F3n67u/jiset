digraph {
  node17126 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node17132 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">5:let iteratorResult = [! __x0__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17136 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">7:[! __x2__]</td></tr>
      <tr><td align="left">8:return undefined</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17129 [shape=cds, label=<<font color="black">app done = (GetArgument argumentsList 2i)</font>> color="black" fillcolor="white" style=filled]
  node17125 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node17133 [shape=cds, label=<<font color="black">6:app __x1__ = (Call promiseCapability.Resolve undefined (new [iteratorResult]))</font>> color="black" fillcolor="white" style=filled]
  node17130 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">1:let queue = generator.AsyncGeneratorQueue</td></tr>
      <tr><td align="left">2:assert (&lt; 0i queue.length)</td></tr>
      <tr><td align="left">3:let next = (pop queue 0i)</td></tr>
      <tr><td align="left">4:let promiseCapability = next.Capability</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17128 [shape=cds, label=<<font color="black">app value = (GetArgument argumentsList 1i)</font>> color="black" fillcolor="white" style=filled]
  node17134 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">6:[! __x1__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17127 [shape=cds, label=<<font color="black">app generator = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node17131 [shape=cds, label=<<font color="black">5:app __x0__ = (CreateIterResultObject value done)</font>> color="black" fillcolor="white" style=filled]
  node17135 [shape=cds, label=<<font color="black">7:app __x2__ = (AsyncGeneratorResumeNext generator)</font>> color="black" fillcolor="white" style=filled]
  node17135 -> node17136 [ color="black"]
  node17132 -> node17133 [ color="black"]
  node17131 -> node17132 [ color="black"]
  node17128 -> node17129 [ color="black"]
  node17125 -> node17127 [ color="black"]
  node17130 -> node17131 [ color="black"]
  node17127 -> node17128 [ color="black"]
  node17136 -> node17126 [ color="black"]
  node17133 -> node17134 [ color="black"]
  node17129 -> node17130 [ color="black"]
  node17134 -> node17135 [ color="black"]
}
