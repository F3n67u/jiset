{
  [? V]
  [? W]
  app __x0__ = (Type V)
  if (! (= __x0__ Reference)) throw INTRINSIC_ReferenceError else {}
  app __x1__ = (GetBase V)
  let base = __x1__
  app __x2__ = (IsUnresolvableReference V)
  if (= __x2__ true) {
    app __x3__ = (IsStrictReference V)
    if (= __x3__ true) throw INTRINSIC_ReferenceError else {}
    app __x4__ = (GetGlobalObject )
    let globalObj = __x4__
    app __x5__ = (GetReferencedName V)
    app __x6__ = (Set globalObj __x5__ W false)
    return [? __x6__]
  } else {
    app __x7__ = (IsPropertyReference V)
    if (= __x7__ true) {
      app __x8__ = (HasPrimitiveBase V)
      if (= __x8__ true) {
        app __x9__ = (ToObject base)
        base = __x9__
      } else {}
      app __x10__ = (GetReferencedName V)
      app __x11__ = (GetThisValue V)
      app __x12__ = (base.Set base __x10__ W __x11__)
      let succeeded = [? __x12__]
      let __x13__ = true
      __x13__ = (= succeeded false)
      if __x13__ {
        app __x14__ = (IsStrictReference V)
        __x13__ = (= __x14__ true)
      } else {}
      if __x13__ throw INTRINSIC_TypeError else {}
      return undefined
    } else {
      app __x15__ = (GetReferencedName V)
      app __x16__ = (IsStrictReference V)
      app __x17__ = (base.SetMutableBinding base __x15__ W __x16__)
      return [? __x17__]
    }
  }
}