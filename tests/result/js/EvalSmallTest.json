{
  "abstract-equality2.js": true,
  "abstract-equality3.js": true,
  "abstract-equality4.js": true,
  "abstract-equality5.js": true,
  "addition1.js": true,
  "addition2.js": true,
  "addition3.js": true,
  "addition4.js": true,
  "addition5.js": true,
  "addition6.js": false,
  "arguments1.js": true,
  "arguments2.js": true,
  "array1.js": true,
  "array2.js": false,
  "array3.js": false,
  "array4.js": false,
  "array5.js": "Pop id:{leafContext} from the execution context stack . The execution context now on the top of the stack becomes the running execution context .",
  "array6.js": false,
  "assign-object.js": true,
  "assign-object2.js": true,
  "assign-object3.js": true,
  "assign-object4.js": true,
  "assign-object5.js": true,
  "assign-object6.js": true,
  "assignment1.js": "Let id:{opText} be the sequence of Unicode code points associated with id:{assignmentOpText} in the following table : in:{} out:{}",
  "async-generator1.js": "Let id:{steps} be the algorithm steps defined in link:{sec-getcapabilitiesexecutor-functions} .",
  "async1.js": "Let id:{steps} be the algorithm steps defined in link:{sec-getcapabilitiesexecutor-functions} .",
  "await1.js": "Let id:{steps} be the algorithm steps defined in link:{sec-getcapabilitiesexecutor-functions} .",
  "await2.js": "Let id:{steps} be the algorithm steps defined in link:{sec-getcapabilitiesexecutor-functions} .",
  "bind1.js": false,
  "block1.js": true,
  "boolean1.js": true,
  "boolean2.js": true,
  "boolean3.js": true,
  "boolean4.js": true,
  "class-decl1.js": "Let id:{steps} be the algorithm steps defined in link:{sec-default-constructor-functions} .",
  "class-decl2.js": "Let id:{steps} be the algorithm steps defined in link:{sec-default-constructor-functions} .",
  "compare1.js": "If id:{q} can be the string - concatenation of id:{p} and some other String id:{r} , return value:{true} . Otherwise , return value:{false} .",
  "complement1.js": true,
  "constructor1.js": true,
  "delete1.js": "If id:{N} is an element of id:{varNames} , remove that element from the id:{varNames} .",
  "empty-statement.js": true,
  "equality1.js": true,
  "expression-statement1.js": true,
  "for1.js": "Let id:{opText} be the sequence of Unicode code points associated with id:{assignmentOpText} in the following table : in:{} out:{}",
  "for2.js": true,
  "forin1.js": false,
  "forof1.js": false,
  "function-application1.js": true,
  "function-application2.js": false,
  "function-application3.js": true,
  "function-application4.js": true,
  "function-application5.js": "If id:{envRec} does not have a binding for id:{N} , then in:{} out:{}",
  "function-declare1.js": true,
  "function1.js": "If Type ( id:{func} ) is Object and id:{func} has a [ [ SourceText ] ] internal slot and id:{func} . [ [ SourceText ] ] is a sequence of Unicode code points and ! HostHasSourceTextAvailable ( id:{func} ) is value:{true} , then in:{} out:{}",
  "function2.js": "If Type ( id:{func} ) is Object and id:{func} has a [ [ SourceText ] ] internal slot and id:{func} . [ [ SourceText ] ] is a sequence of Unicode code points and ! HostHasSourceTextAvailable ( id:{func} ) is value:{true} , then in:{} out:{}",
  "function3.js": false,
  "generator1.js": true,
  "generator2.js": "If id:{envRec} does not have a binding for id:{N} , then in:{} out:{}",
  "global-eval.js": false,
  "global-object.js": false,
  "global-object2.js": true,
  "global.js": false,
  "harness.js": false,
  "if-statement1.js": true,
  "increment1.js": true,
  "increment2.js": true,
  "instanceof1.js": true,
  "instanceof2.js": true,
  "multiple-statements.js": true,
  "number1.js": true,
  "number2.js": true,
  "number3.js": true,
  "number4.js": true,
  "object1.js": false,
  "object2.js": "For each own property key id:{P} of id:{O} such that id:{P} is an array index , in ascending numeric index order , do in:{} out:{}",
  "promise1.js": "Let id:{stepsResolve} be the algorithm steps defined in link:{sec-promise-resolve-functions} .",
  "read-property1.js": true,
  "semicolon-insertion1.js": true,
  "semicolon-insertion2.js": true,
  "semicolon-insertion3.js": true,
  "set1.js": false,
  "shift1.js": false,
  "string1.js": true,
  "string2.js": true,
  "string3.js": true,
  "switch1.js": "Let id:{A} be the List of nt:{CaseClause} items in the first nt:{CaseClauses} , in source text order .",
  "symbol1.js": true,
  "symbol2.js": true,
  "symbol3.js": "Return a new unique Symbol value whose [ [ Description ] ] value is id:{descString} .",
  "template1.js": true,
  "template2.js": true,
  "try1.js": false,
  "try2.js": false,
  "typeof1.js": "Return a String according to link:{table-typeof-operator-results} .",
  "variable-declare1.js": true,
  "variable-declare2.js": true,
  "variable-declare3.js": true,
  "variable-declare4.js": true,
  "with-statement1.js": true
}
