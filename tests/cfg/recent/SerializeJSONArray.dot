digraph {
  node18416 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">8:let strP = [? __x2__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18424 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">18:??? &quot;Let id:{properties} be the String value formed by concatenating all the element Strings of id:{partial} with each adjacent pair of Strings separated with the code unit 0x002C ( COMMA ) . A comma is not inserted either before the first String or after the last String .&quot;</td></tr>
      <tr><td align="left">19:let final = (+ (+ &quot;[&quot; properties) &quot;]&quot;)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18407 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node18411 [shape=cds, label=<<font color="black">5:app __x0__ = (LengthOfArrayLike value)</font>> color="black" fillcolor="white" style=filled]
  node18415 [shape=cds, label=<<font color="black">8:app __x2__ = (SerializeJSONProperty state [! __x1__] value)</font>> color="black" fillcolor="white" style=filled]
  node18418 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">append &quot;null&quot; -&gt; partial</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18414 [shape=cds, label=<<font color="black">8:app __x1__ = (ToString index)</font>> color="black" fillcolor="white" style=filled]
  node18422 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let final = &quot;[]&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18413 [shape=diamond, label=<<font color="black">(&lt; index len)</font>> color="black" fillcolor="white" style=filled]
  node18409 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18426 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">24:??? &quot;Remove the last element of id:{state} . [ [ Stack ] ] .&quot;</td></tr>
      <tr><td align="left">25:state.Indent = stepback</td></tr>
      <tr><td align="left">26:return final</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18425 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">21:let separator = (+ (+ &quot;,&quot; &quot;\n&quot;) state.Indent)</td></tr>
      <tr><td align="left">22:??? &quot;Let id:{properties} be the String value formed by concatenating all the element Strings of id:{partial} with each adjacent pair of Strings separated with id:{separator} . The id:{separator} String is not inserted either before the first String or after the last String .&quot;</td></tr>
      <tr><td align="left">23:let final = (+ (+ (+ (+ (+ (+ &quot;[&quot; &quot;\n&quot;) state.Indent) properties) &quot;\n&quot;) stepback) &quot;]&quot;)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18420 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">13:index = (+ index 1i)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18417 [shape=diamond, label=<<font color="black">(= strP undefined)</font>> color="black" fillcolor="white" style=filled]
  node18412 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">5:let len = [? __x0__]</td></tr>
      <tr><td align="left">6:let index = 0i</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18421 [shape=diamond, label=<<font color="black">(= partial.length 0i)</font>> color="black" fillcolor="white" style=filled]
  node18408 [shape=diamond, label=<<font color="black">(contains state.Stack value)</font>> color="black" fillcolor="white" style=filled]
  node18419 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">append strP -&gt; partial</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18410 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">1:append value -&gt; state.Stack</td></tr>
      <tr><td align="left">2:let stepback = state.Indent</td></tr>
      <tr><td align="left">3:state.Indent = (+ state.Indent state.Gap)</td></tr>
      <tr><td align="left">4:let partial = (new [])</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18423 [shape=diamond, label=<<font color="black">(= state.Gap &quot;&quot;)</font>> color="black" fillcolor="white" style=filled]
  node18406 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node18406 -> node18408 [ color="black"]
  node18416 -> node18417 [ color="black"]
  node18414 -> node18415 [ color="black"]
  node18425 -> node18426 [ color="black"]
  node18422 -> node18426 [ color="black"]
  node18412 -> node18413 [ color="black"]
  node18413 -> node18414 [label=<<font color="black">true</font>> color="black"]
  node18413 -> node18421 [label=<<font color="black">false</font>> color="black"]
  node18426 -> node18407 [ color="black"]
  node18421 -> node18422 [label=<<font color="black">true</font>> color="black"]
  node18421 -> node18423 [label=<<font color="black">false</font>> color="black"]
  node18411 -> node18412 [ color="black"]
  node18418 -> node18420 [ color="black"]
  node18415 -> node18416 [ color="black"]
  node18409 -> node18410 [ color="black"]
  node18423 -> node18424 [label=<<font color="black">true</font>> color="black"]
  node18423 -> node18425 [label=<<font color="black">false</font>> color="black"]
  node18420 -> node18413 [ color="black"]
  node18417 -> node18418 [label=<<font color="black">true</font>> color="black"]
  node18417 -> node18419 [label=<<font color="black">false</font>> color="black"]
  node18419 -> node18420 [ color="black"]
  node18408 -> node18409 [label=<<font color="black">true</font>> color="black"]
  node18408 -> node18410 [label=<<font color="black">false</font>> color="black"]
  node18410 -> node18411 [ color="black"]
  node18424 -> node18426 [ color="black"]
}
