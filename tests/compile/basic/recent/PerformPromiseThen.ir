{
  app __x0__ = (IsPromise promise)
  assert (= __x0__ true)
  if (= resultCapability absent) resultCapability = undefined else {}
  app __x1__ = (IsCallable onFulfilled)
  if (= __x1__ false) let onFulfilledJobCallback = CONST_empty else {
    app __x2__ = (HostMakeJobCallback onFulfilled)
    let onFulfilledJobCallback = __x2__
  }
  app __x3__ = (IsCallable onRejected)
  if (= __x3__ false) let onRejectedJobCallback = CONST_empty else {
    app __x4__ = (HostMakeJobCallback onRejected)
    let onRejectedJobCallback = __x4__
  }
  let fulfillReaction = (new PromiseReaction("Capability" -> resultCapability, "Type" -> CONST_Fulfill, "Handler" -> onFulfilledJobCallback))
  let rejectReaction = (new PromiseReaction("Capability" -> resultCapability, "Type" -> CONST_Reject, "Handler" -> onRejectedJobCallback))
  if (= promise.PromiseState CONST_pending) {
    append fulfillReaction -> promise.PromiseFulfillReactions
    append rejectReaction -> promise.PromiseRejectReactions
  } else if (= promise.PromiseState CONST_fulfilled) {
    let value = promise.PromiseResult
    app __x5__ = (NewPromiseReactionJob fulfillReaction value)
    let fulfillJob = __x5__
    app __x6__ = (HostEnqueuePromiseJob fulfillJob.Job fulfillJob.Realm)
    __x6__
  } else {
    assert (= promise.PromiseState CONST_rejected)
    let reason = promise.PromiseResult
    if (= promise.PromiseIsHandled false) {
      app __x7__ = (HostPromiseRejectionTracker promise "handle")
      __x7__
    } else {}
    app __x8__ = (NewPromiseReactionJob rejectReaction reason)
    let rejectJob = __x8__
    app __x9__ = (HostEnqueuePromiseJob rejectJob.Job rejectJob.Realm)
    __x9__
  }
  promise.PromiseIsHandled = true
  if (= resultCapability undefined) return undefined else return resultCapability.Promise
}