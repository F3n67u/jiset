{
  app __x0__ = (GeneratorValidate generator generatorBrand)
  let state = [? __x0__]
  if (= state CONST_suspendedStart) {
    generator.GeneratorState = CONST_completed
    state = CONST_completed
  } else {}
  if (= state CONST_completed) {
    if (= abruptCompletion.Type CONST_return) {
      app __x1__ = (CreateIterResultObject abruptCompletion.Value true)
      return __x1__
    } else {}
    return abruptCompletion
  } else {}
  assert (= state CONST_suspendedYield)
  let genContext = generator.GeneratorContext
  let methodContext = CONTEXT
  CONTEXT = null
  generator.GeneratorState = CONST_executing
  append genContext -> EXECUTION_STACK
  CONTEXT = EXECUTION_STACK[(- EXECUTION_STACK.length 1i)]
  withcont __x2__ (result) = {
    if (= genContext.ReturnCont absent) genContext.ReturnCont = (new []) else {}
    append __x2__ -> genContext.ReturnCont
    app _ = (genContext.ResumeCont abruptCompletion)
  }
  return result
}