digraph {
  node9828 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">2:[! __x1__]</td></tr>
      <tr><td align="left">3:return F</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node9822 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node9825 [shape=cds, label=<<font color="black">1:app __x0__ = (OrdinaryFunctionCreate INTRINSIC_AsyncFunction_prototype sourceText FormalParameters AsyncFunctionBody CONST_nonDASHlexicalDASHthis scope)</font>> color="black" fillcolor="white" style=filled]
  node9826 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">1:let F = [! __x0__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node9824 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let sourceText = (get-syntax AsyncFunctionDeclaration)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node9823 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node9827 [shape=cds, label=<<font color="black">2:app __x1__ = (SetFunctionName F &quot;default&quot;)</font>> color="black" fillcolor="white" style=filled]
  node9826 -> node9827 [ color="black"]
  node9828 -> node9823 [ color="black"]
  node9824 -> node9825 [ color="black"]
  node9827 -> node9828 [ color="black"]
  node9825 -> node9826 [ color="black"]
  node9822 -> node9824 [ color="black"]
}
