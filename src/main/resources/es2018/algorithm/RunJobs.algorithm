<algorithm>
  <step-list>
    <step>Perform ? InitializeHostDefinedRealm ().</step>
    <step>In an implementation-dependent manner, obtain the ECMAScript source texts (see clause 10 ) and any associated host-defined values for zero or more ECMAScript scripts and/or ECMAScript modules. For each such <id>sourceText</id> and <id>hostDefined</id> , do     <step-list>
      <step>If <id>sourceText</id> is the source code of a script, then       <step-list>
        <step>Perform EnqueueJob ( <value>"ScriptJobs"</value> , ScriptEvaluationJob , « <id>sourceText</id> , <id>hostDefined</id> »).</step>
      </step-list></step>
      <step>Else <id>sourceText</id> is the source code of a module,       <step-list>
        <step>Perform EnqueueJob ( <value>"ScriptJobs"</value> , TopLevelModuleEvaluationJob , « <id>sourceText</id> , <id>hostDefined</id> »).</step>
      </step-list></step>
    </step-list></step>
    <step>Repeat,     <step-list>
      <step>Suspend the running execution context and remove it from the execution context stack .</step>
      <step>Assert : The execution context stack is now empty.</step>
      <step>Let <id>nextQueue</id> be a non-empty Job Queue chosen in an implementation-defined manner. If
 all Job Queues are empty, the result is implementation-defined.</step>
      <step>Let <id>nextPending</id> be the PendingJob record at the front of <id>nextQueue</id> . Remove that record from <id>nextQueue</id> .</step>
      <step>Let <id>newContext</id> be a new execution context .</step>
      <step>Set <id>newContext</id> 's Function to <value>null</value> .</step>
      <step>Set <id>newContext</id> 's Realm to <id>nextPending</id> .[[Realm]].</step>
      <step>Set <id>newContext</id> 's ScriptOrModule to <id>nextPending</id> .[[ScriptOrModule]].</step>
      <step>Push <id>newContext</id> onto the execution context stack ; <id>newContext</id> is now the running execution context .</step>
      <step>Perform any implementation or host environment defined job initialization using <id>nextPending</id> .</step>
      <step>Let <id>result</id> be the result of performing the abstract operation named by <id>nextPending</id> .[[Job]] using the elements of <id>nextPending</id> .[[Arguments]] as its arguments.</step>
      <step>If <id>result</id> is an abrupt completion , perform HostReportErrors (« <id>result</id> .[[Value]] »).</step>
    </step-list></step>
  </step-list>
</algorithm>