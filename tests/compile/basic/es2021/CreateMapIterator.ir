{
  assert (|| (|| (= kind CONST_keyPLUSvalue) (= kind CONST_key)) (= kind CONST_value))
  app __x0__ = (RequireInternalSlot map "MapData")
  [? __x0__]
  let closure = ()[map, kind] => {
    let entries = map.MapData
    let index = 0i
    let numEntries = entries.length
    while (< index numEntries) {
      ??? "Let id:{e} be the Record { [ [ Key ] ] , [ [ Value ] ] } that is the value of id:{entries} [ id:{index} ] ."
      index = (+ index 1i)
      if (! (= e.Key CONST_empty)) {
        if (= kind CONST_key) let result = e.Key else if (= kind CONST_value) let result = e.Value else {
          assert (= kind CONST_keyPLUSvalue)
          app __x1__ = (CreateArrayFromList (new [e.Key, e.Value]))
          let result = [! __x1__]
        }
        app __x2__ = (Yield result)
        [? __x2__]
        numEntries = entries.length
      } else {}
    }
    return undefined
  }
  app __x3__ = (CreateIteratorFromClosure closure "%MapIteratorPrototype%" INTRINSIC_MapIteratorPrototype)
  return [! __x3__]
}