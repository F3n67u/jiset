{
  [1] app __x0__ = (Type S)
  [1] assert (= __x0__ String)
  [2] let length = S.length
  [3] app __x1__ = (Get R "lastIndex")
  [3] if (is-completion __x1__) if (= __x1__.Type CONST_normal) __x1__ = __x1__.Value else return __x1__ else [45] {}
  [3] app __x2__ = (ToLength __x1__)
  [3] if (is-completion __x2__) if (= __x2__.Type CONST_normal) __x2__ = __x2__.Value else return __x2__ else [45] {}
  [3] let lastIndex = __x2__
  [4] app __x3__ = (Get R "global")
  [4] if (is-completion __x3__) if (= __x3__.Type CONST_normal) __x3__ = __x3__.Value else return __x3__ else [45] {}
  [4] app __x4__ = (ToBoolean __x3__)
  [4] let global = __x4__
  [5] app __x5__ = (Get R "sticky")
  [5] if (is-completion __x5__) if (= __x5__.Type CONST_normal) __x5__ = __x5__.Value else return __x5__ else [45] {}
  [5] app __x6__ = (ToBoolean __x5__)
  [5] let sticky = __x6__
  [6] if (&& (= global false) (= sticky false)) let lastIndex = 0i else [45] {}
  [7] let matcher = R.RegExpMatcher
  [8] let flags = R.OriginalFlags
  [9] if (contains flags "u") let fullUnicode = true else let fullUnicode = false
  [10] let matchSucceeded = false
  [11] while (= matchSucceeded false) {
    [12] if (< length lastIndex) {
      [13] app __x7__ = (Set R "lastIndex" 0i true)
      [13] if (is-completion __x7__) if (= __x7__.Type CONST_normal) __x7__ = __x7__.Value else return __x7__ else [45] {}
      [13] __x7__
      [14] app __x8__ = (WrapCompletion null)
      [14] return __x8__
    } else [45] {}
    [15] app __x9__ = (matcher S lastIndex)
    [15] let r = __x9__
    [21] if (= r CONST_failure) {
      [17] if (= sticky true) {
        [18] app __x10__ = (Set R "lastIndex" 0i true)
        [18] if (is-completion __x10__) if (= __x10__.Type CONST_normal) __x10__ = __x10__.Value else return __x10__ else [45] {}
        [18] __x10__
        [19] app __x11__ = (WrapCompletion null)
        [19] return __x11__
      } else [45] {}
      [20] app __x12__ = (AdvanceStringIndex S lastIndex fullUnicode)
      [20] let lastIndex = __x12__
    } else matchSucceeded = true
  }
  [24] let e = r.endIndex
  [25] if (= fullUnicode true) {
    [26] ??? "id:{e} is an index into the id:{Input} character list , derived from id:{S} , matched by id:{matcher} . Let id:{eUTF} be the smallest index into id:{S} that corresponds to the character at element id:{e} of id:{Input} . If id:{e} is greater than or equal to the length of id:{Input} , then id:{eUTF} is the number of code units in id:{S} ."
    [27] let e = eUTF
  } else [45] {}
  [28] if (|| (= global true) (= sticky true)) {
    [29] app __x13__ = (Set R "lastIndex" e true)
    [29] if (is-completion __x13__) if (= __x13__.Type CONST_normal) __x13__ = __x13__.Value else return __x13__ else [45] {}
    [29] __x13__
  } else [45] {}
  [30] ??? "Let id:{n} be the length of id:{r} ' s id:{captures} List . ( This is the same value as link:{} ' s id:{NcapturingParens} . )"
  [31] app __x14__ = (ArrayCreate (+ n 1i))
  [31] let A = __x14__
  [33] let matchIndex = lastIndex
  [34] app __x15__ = (CreateDataProperty A "index" matchIndex)
  [34] if (is-completion __x15__) if (= __x15__.Type CONST_normal) __x15__ = __x15__.Value else return __x15__ else [45] {}
  [34] __x15__
  [35] app __x16__ = (CreateDataProperty A "input" S)
  [35] if (is-completion __x16__) if (= __x16__.Type CONST_normal) __x16__ = __x16__.Value else return __x16__ else [45] {}
  [35] __x16__
  [36] ??? "Let id:{matchedSubstr} be the matched substring ( i . e . the portion of id:{S} between offset id:{lastIndex} inclusive and offset id:{e} exclusive ) ."
  [37] app __x17__ = (CreateDataProperty A "0" matchedSubstr)
  [37] if (is-completion __x17__) if (= __x17__.Type CONST_normal) __x17__ = __x17__.Value else return __x17__ else [45] {}
  [37] __x17__
  [38] let i = (+ 0i 1i)
  [38] let __x18__ = (+ n 1i)
  [38] while (< i __x18__) {
    [39] ??? "Let id:{captureI} be id:{i} sup:{th } element of id:{r} ' s id:{captures} List ."
    [41] if (= captureI undefined) let capturedValue = undefined else if (= fullUnicode true) ??? "Let id:{capturedValue} be a string whose code units are the UTF16Encoding of the code points of id:{captureI} ." else [45] {}
    [44] ??? "Else , id:{fullUnicode} is value:{false} , step-list:{...}"
    [47] app __x19__ = (ToString i)
    [47] if (is-completion __x19__) if (= __x19__.Type CONST_normal) __x19__ = __x19__.Value else return __x19__ else [45] {}
    [47] app __x20__ = (CreateDataProperty A __x19__ capturedValue)
    [47] if (is-completion __x20__) if (= __x20__.Type CONST_normal) __x20__ = __x20__.Value else return __x20__ else [45] {}
    [47] __x20__
  }
  [48] app __x21__ = (WrapCompletion A)
  [48] return __x21__
}