{
  app __x0__ = (GetArgument argumentsList 0i)
  let generator = __x0__
  app __x1__ = (GetArgument argumentsList 1i)
  let abruptCompletion = __x1__
  app __x2__ = (GeneratorValidate generator)
  if (is-completion __x2__) if (= __x2__.Type CONST_normal) __x2__ = __x2__.Value else return __x2__ else {}
  let state = __x2__
  if (= state CONST_suspendedStart) {
    generator.GeneratorState = CONST_completed
    state = CONST_completed
  } else {}
  if (= state CONST_completed) {
    if (= abruptCompletion.Type CONST_return) {
      app __x3__ = (CreateIterResultObject abruptCompletion.Value true)
      app __x4__ = (WrapCompletion __x3__)
      return __x4__
    } else {}
    app __x5__ = (Completion abruptCompletion)
    app __x6__ = (WrapCompletion __x5__)
    return __x6__
  } else {}
  assert (= state CONST_suspendedYield)
  let genContext = generator.GeneratorContext
  let methodContext = GLOBAL_context
  GLOBAL_context = null
  generator.GeneratorState = CONST_executing
  append genContext -> GLOBAL_executionStack
  GLOBAL_context = GLOBAL_executionStack[(- GLOBAL_executionStack.length 1i)]
  ??? "Resume the suspended evaluation of id:{genContext} using id:{abruptCompletion} as the result of the operation that suspended it . Let id:{result} be the completion record returned by the resumed computation ."
  app __x7__ = (Completion result)
  app __x8__ = (WrapCompletion __x7__)
  return __x8__
}