digraph {
  node12634 [shape=diamond, label=<<font color="black">(== e 0i)</font>> color="black" fillcolor="white" style=filled]
  node12617 [shape=diamond, label=<<font color="black">(= x NaN)</font>> color="black" fillcolor="white" style=filled]
  node12621 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">6:s = &quot;-&quot;</td></tr>
      <tr><td align="left">7:x = (- x)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12638 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">29:assert (&lt; e 0i)</td></tr>
      <tr><td align="left">30:let c = &quot;-&quot;</td></tr>
      <tr><td align="left">31:e = (- e)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12623 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return (+ s &quot;Infinity&quot;)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12632 [shape=diamond, label=<<font color="black">(! (== f 0i))</font>> color="black" fillcolor="white" style=filled]
  node12628 [shape=diamond, label=<<font color="black">(! (= fractionDigits undefined))</font>> color="black" fillcolor="white" style=filled]
  node12636 [shape=diamond, label=<<font color="black">(&lt; 0i e)</font>> color="black" fillcolor="white" style=filled]
  node12624 [shape=diamond, label=<<font color="black">(|| (&lt; f 0i) (&lt; 100i f))</font>> color="black" fillcolor="white" style=filled]
  node12619 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">4:let s = &quot;&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12631 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">19:??? &quot;Let id:{m} be the String value consisting of the digits of the decimal representation of id:{n} ( in order , with no leading zeroes ) .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12612 [shape=cds, label=<<font color="black">app fractionDigits = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node12630 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">??? &quot;Let id:{e} , id:{n} , and id:{f} be integers such that id:{f} &ge; 0 , 10 sup:{id:{f}} &le; id:{n} &lt; 10 sup:{id:{f} + 1} , the Number value for ℝ ( id:{n} ) &times; 10 sub:{ℝ} sup:{ℝ ( id:{e} ) - ℝ ( id:{f} )} is id:{x} , and id:{f} is as small as possible . Note that the decimal representation of id:{n} has id:{f} + 1 sub:{ℝ} digits , id:{n} is not divisible by 10 , and the least significant digit of id:{n} is not necessarily uniquely determined by these criteria .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12633 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">21:??? &quot;Let id:{a} be the first code unit of id:{m} , and let id:{b} be the remaining id:{f} code units of id:{m} .&quot;</td></tr>
      <tr><td align="left">22:m = (+ (+ a &quot;.&quot;) b)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12620 [shape=diamond, label=<<font color="black">(&lt; x 0i)</font>> color="black" fillcolor="white" style=filled]
  node12615 [shape=cds, label=<<font color="black">1:app __x1__ = (ToInteger fractionDigits)</font>> color="black" fillcolor="white" style=filled]
  node12637 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let c = &quot;+&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12629 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">??? &quot;Let id:{e} and id:{n} be integers such that 10 sup:{id:{f}} &le; id:{n} &lt; 10 sup:{id:{f} + 1} and for which ℝ ( id:{n} ) &times; 10 sub:{ℝ} sup:{ℝ ( id:{e} ) - ℝ ( id:{n} )} - ℝ ( id:{x} ) is as close to zero as possible . If there are two such sets of id:{e} and id:{n} , pick the id:{e} and id:{n} for which ℝ ( id:{n} ) &times; 10 sub:{ℝ} sup:{ℝ ( id:{e} ) - ℝ ( id:{f} )} is larger .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12614 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let x = [? __x0__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12610 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node12625 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw RangeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12613 [shape=cds, label=<<font color="black">0:app __x0__ = (thisNumberValue this)</font>> color="black" fillcolor="white" style=filled]
  node12635 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">24:let c = &quot;+&quot;</td></tr>
      <tr><td align="left">25:let d = &quot;0&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12640 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">33:m = (+ (+ (+ m &quot;e&quot;) c) d)</td></tr>
      <tr><td align="left">34:return (+ s m)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12618 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return &quot;NaN&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12639 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">32:??? &quot;Let id:{d} be the String value consisting of the digits of the decimal representation of id:{e} ( in order , with no leading zeroes ) .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12622 [shape=diamond, label=<<font color="black">(== x Infinity)</font>> color="black" fillcolor="white" style=filled]
  node12627 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">12:??? &quot;Let id:{m} be the String value consisting of id:{f} + 1 occurrences of the code unit 0x0030 ( DIGIT ZERO ) .&quot;</td></tr>
      <tr><td align="left">13:let e = 0i</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12616 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">1:let f = [? __x1__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12611 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node12626 [shape=diamond, label=<<font color="black">(== x 0i)</font>> color="black" fillcolor="white" style=filled]
  node12639 -> node12640 [ color="black"]
  node12620 -> node12621 [label=<<font color="black">true</font>> color="black"]
  node12620 -> node12622 [label=<<font color="black">false</font>> color="black"]
  node12613 -> node12614 [ color="black"]
  node12640 -> node12611 [ color="black"]
  node12627 -> node12632 [ color="black"]
  node12615 -> node12616 [ color="black"]
  node12633 -> node12634 [ color="black"]
  node12628 -> node12629 [label=<<font color="black">true</font>> color="black"]
  node12628 -> node12630 [label=<<font color="black">false</font>> color="black"]
  node12624 -> node12625 [label=<<font color="black">true</font>> color="black"]
  node12624 -> node12626 [label=<<font color="black">false</font>> color="black"]
  node12610 -> node12612 [ color="black"]
  node12632 -> node12633 [label=<<font color="black">true</font>> color="black"]
  node12632 -> node12634 [label=<<font color="black">false</font>> color="black"]
  node12637 -> node12639 [ color="black"]
  node12621 -> node12622 [ color="black"]
  node12612 -> node12613 [ color="black"]
  node12631 -> node12632 [ color="black"]
  node12638 -> node12639 [ color="black"]
  node12635 -> node12640 [ color="black"]
  node12614 -> node12615 [ color="black"]
  node12634 -> node12635 [label=<<font color="black">true</font>> color="black"]
  node12634 -> node12636 [label=<<font color="black">false</font>> color="black"]
  node12618 -> node12619 [ color="black"]
  node12629 -> node12631 [ color="black"]
  node12626 -> node12627 [label=<<font color="black">true</font>> color="black"]
  node12626 -> node12628 [label=<<font color="black">false</font>> color="black"]
  node12619 -> node12620 [ color="black"]
  node12630 -> node12631 [ color="black"]
  node12617 -> node12618 [label=<<font color="black">true</font>> color="black"]
  node12617 -> node12619 [label=<<font color="black">false</font>> color="black"]
  node12622 -> node12623 [label=<<font color="black">true</font>> color="black"]
  node12622 -> node12624 [label=<<font color="black">false</font>> color="black"]
  node12623 -> node12624 [ color="black"]
  node12636 -> node12637 [label=<<font color="black">true</font>> color="black"]
  node12636 -> node12638 [label=<<font color="black">false</font>> color="black"]
  node12616 -> node12617 [ color="black"]
  node12625 -> node12626 [ color="black"]
}
