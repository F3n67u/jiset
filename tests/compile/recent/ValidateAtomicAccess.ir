{
  [1] let length = typedArray.ArrayLength
  [2] app __x0__ = (ToIndex requestIndex)
  [2] if (is-completion __x0__) if (= __x0__.Type CONST_normal) __x0__ = __x0__.Value else return __x0__ else [0] {}
  [2] let accessIndex = __x0__
  [3] assert (! (< accessIndex 0i))
  [4] if (! (< accessIndex length)) {
    app __x1__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_RangeError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
    return __x1__
  } else [0] {}
  [5] let arrayTypeName = typedArray.TypedArrayName
  [6] ??? "Let id:{elementSize} be the Element Size value specified in link:{} for id:{arrayTypeName} ."
  [7] let offset = typedArray.ByteOffset
  [8] app __x2__ = (WrapCompletion (+ (* accessIndex elementSize) offset))
  [8] return __x2__
}