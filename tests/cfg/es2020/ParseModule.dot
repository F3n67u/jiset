digraph {
  node10987 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node11008 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">append ee -&gt; starExportEntries</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10991 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">3:let requestedModules = __x0__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11004 [shape=diamond, label=<<font color="black">(= ie.ImportName &quot;*&quot;)</font>> color="black" fillcolor="white" style=filled]
  node11007 [shape=diamond, label=<<font color="black">(&amp;&amp; (= ee.ImportName &quot;*&quot;) (= ee.ExportName null))</font>> color="black" fillcolor="white" style=filled]
  node11000 [shape=diamond, label=<<font color="black">(= ee.ModuleRequest null)</font>> color="black" fillcolor="white" style=filled]
  node11006 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">append (new ExportEntryRecord(&quot;ModuleRequest&quot; -&gt; ie.ModuleRequest, &quot;ImportName&quot; -&gt; ie.ImportName, &quot;LocalName&quot; -&gt; null, &quot;ExportName&quot; -&gt; ee.ExportName)) -&gt; indirectExportEntries</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10989 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">1:??? &quot;Parse id:{sourceText} using nt:{Module} as the goal symbol and analyse the parse result for any Early Error conditions . If the parse was successful and no early errors were found , let id:{body} be the resulting parse tree . Otherwise , let id:{body} be a List of one or more value:{SyntaxError} objects representing the parsing errors and / or early errors . Parsing and early error detection may be interweaved in an implementation - dependent manner . If more than one parsing error or early error is present , the number and ordering of error objects in the list is implementation - dependent , but at least one must be present .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11002 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">append ee -&gt; localExportEntries</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10995 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">5:let importedBoundNames = __x2__</td></tr>
      <tr><td align="left">6:let indirectExportEntries = (new [])</td></tr>
      <tr><td align="left">7:let localExportEntries = (new [])</td></tr>
      <tr><td align="left">8:let starExportEntries = (new [])</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10994 [shape=cds, label=<<font color="black">5:app __x2__ = (ImportedLocalNames importEntries)</font>> color="black" fillcolor="white" style=filled]
  node10988 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node11010 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">__x5__ = (+ __x5__ 1i)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10997 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">9:let exportEntries = __x3__</td></tr>
      <tr><td align="left">10:let __x4__ = exportEntries</td></tr>
      <tr><td align="left">10:let __x5__ = 0i</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10999 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let ee = __x4__[__x5__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10990 [shape=cds, label=<<font color="black">3:access __x0__ = (body &quot;ModuleRequests&quot;)</font>> color="black" fillcolor="white" style=filled]
  node11003 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">15:??? &quot;Let id:{ie} be the element of id:{importEntries} whose [ [ LocalName ] ] is the same as id:{ee} . [ [ LocalName ] ] .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10993 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">4:let importEntries = __x1__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11011 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">26:return (new SourceTextModuleRecord(&quot;Realm&quot; -&gt; realm, &quot;Environment&quot; -&gt; undefined, &quot;Namespace&quot; -&gt; undefined, &quot;Status&quot; -&gt; CONST_unlinked, &quot;EvaluationError&quot; -&gt; undefined, &quot;HostDefined&quot; -&gt; hostDefined, &quot;ECMAScriptCode&quot; -&gt; body, &quot;Context&quot; -&gt; CONST_empty, &quot;ImportMeta&quot; -&gt; CONST_empty, &quot;RequestedModules&quot; -&gt; requestedModules, &quot;ImportEntries&quot; -&gt; importEntries, &quot;LocalExportEntries&quot; -&gt; localExportEntries, &quot;IndirectExportEntries&quot; -&gt; indirectExportEntries, &quot;StarExportEntries&quot; -&gt; starExportEntries, &quot;DFSIndex&quot; -&gt; undefined, &quot;DFSAncestorIndex&quot; -&gt; undefined))</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10992 [shape=cds, label=<<font color="black">4:access __x1__ = (body &quot;ImportEntries&quot;)</font>> color="black" fillcolor="white" style=filled]
  node11005 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">append ee -&gt; localExportEntries</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10996 [shape=cds, label=<<font color="black">9:access __x3__ = (body &quot;ExportEntries&quot;)</font>> color="black" fillcolor="white" style=filled]
  node11001 [shape=diamond, label=<<font color="black">(! (contains importedBoundNames ee.LocalName))</font>> color="black" fillcolor="white" style=filled]
  node10998 [shape=diamond, label=<<font color="black">(&lt; __x5__ __x4__.length)</font>> color="black" fillcolor="white" style=filled]
  node11009 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">append ee -&gt; indirectExportEntries</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11004 -> node11005 [label=<<font color="black">true</font>> color="black"]
  node11004 -> node11006 [label=<<font color="black">false</font>> color="black"]
  node11011 -> node10988 [ color="black"]
  node10995 -> node10996 [ color="black"]
  node10987 -> node10989 [ color="black"]
  node10993 -> node10994 [ color="black"]
  node10994 -> node10995 [ color="black"]
  node11005 -> node11010 [ color="black"]
  node11006 -> node11010 [ color="black"]
  node11008 -> node11010 [ color="black"]
  node10989 -> node10990 [ color="black"]
  node11000 -> node11001 [label=<<font color="black">true</font>> color="black"]
  node11000 -> node11007 [label=<<font color="black">false</font>> color="black"]
  node10991 -> node10992 [ color="black"]
  node11001 -> node11002 [label=<<font color="black">true</font>> color="black"]
  node11001 -> node11003 [label=<<font color="black">false</font>> color="black"]
  node11007 -> node11008 [label=<<font color="black">true</font>> color="black"]
  node11007 -> node11009 [label=<<font color="black">false</font>> color="black"]
  node11002 -> node11010 [ color="black"]
  node10996 -> node10997 [ color="black"]
  node10992 -> node10993 [ color="black"]
  node10997 -> node10998 [ color="black"]
  node11010 -> node10998 [ color="black"]
  node10990 -> node10991 [ color="black"]
  node10999 -> node11000 [ color="black"]
  node11009 -> node11010 [ color="black"]
  node11003 -> node11004 [ color="black"]
  node10998 -> node10999 [label=<<font color="black">true</font>> color="black"]
  node10998 -> node11011 [label=<<font color="black">false</font>> color="black"]
}
