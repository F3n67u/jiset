{
  [0] access __x0__ = (Atom "Evaluation")
  [0] let m = __x0__
  [1] access __x1__ = (Quantifier "Evaluation")
  [1] let min = __x1__[0i]
  [1] let max = __x1__[1i]
  [1] let greedy = __x1__[2i]
  [2] ??? "If id:{max} is finite and less than id:{min} , throw a value:{SyntaxError} exception ."
  [3] ??? "Let id:{parenIndex} be the number of left - capturing parentheses in the entire regular expression that occur to the left of this nt:{Term} . This is the total number of grammar:{Atom4} Parse Nodes prior to or enclosing this nt:{Term} ."
  [4] ??? "Let id:{parenCount} be the number of left - capturing parentheses in nt:{Atom} . This is the total number of grammar:{Atom4} Parse Nodes enclosed by nt:{Atom} ."
  [5] ??? "Return an internal Matcher closure that takes two arguments , a State id:{x} and a Continuation id:{c} , and performs the following steps when evaluated : step-list:{...}"
}