digraph {
  node276 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node280 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">7:return db</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node275 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node279 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let i = __x0__[__x1__]</td></tr>
      <tr><td align="left">6:append (new WriteSharedMemory(&quot;Order&quot; -&gt; &quot;Init&quot;, &quot;NoTear&quot; -&gt; true, &quot;Block&quot; -&gt; db, &quot;ByteIndex&quot; -&gt; i, &quot;ElementSize&quot; -&gt; 1i, &quot;Payload&quot; -&gt; zero)) -&gt; eventList</td></tr>
      <tr><td align="left">__x1__ = (+ __x1__ 1i)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node278 [shape=diamond, label=<<font color="black">(&lt; __x1__ __x0__.length)</font>> color="black" fillcolor="white" style=filled]
  node277 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:assert (! (&lt; size 0i))</td></tr>
      <tr><td align="left">1:??? &quot;Let id:{db} be a new Shared Data Block value consisting of id:{size} bytes . If it is impossible to create such a Shared Data Block , throw a value:{RangeError} exception .&quot;</td></tr>
      <tr><td align="left">2:let execution = GLOBAL_agent.CandidateExecution</td></tr>
      <tr><td align="left">3:??? &quot;Let id:{eventList} be the [ [ EventList ] ] field of the element in id:{execution} . [ [ EventsRecords ] ] whose [ [ AgentSignifier ] ] is AgentSignifier ( ) .&quot;</td></tr>
      <tr><td align="left">4:let zero = (new [0i])</td></tr>
      <tr><td align="left">5:let __x0__ = db</td></tr>
      <tr><td align="left">5:let __x1__ = 0i</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node278 -> node279 [label=<<font color="black">true</font>> color="black"]
  node278 -> node280 [label=<<font color="black">false</font>> color="black"]
  node280 -> node276 [ color="black"]
  node279 -> node278 [ color="black"]
  node275 -> node277 [ color="black"]
  node277 -> node278 [ color="black"]
}
