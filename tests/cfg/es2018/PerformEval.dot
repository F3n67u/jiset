digraph {
  node11235 [shape=diamond, label=<<font color="black">(= (typeof thisEnvRec) &quot;FunctionEnvironmentRecord&quot;)</font>> color="black" fillcolor="white" style=filled]
  node11239 [shape=diamond, label=<<font color="black">(= F.ConstructorKind &quot;derived&quot;)</font>> color="black" fillcolor="white" style=filled]
  node11238 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">6:let inMethod = __x2__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11234 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">2:let thisEnvRec = [! __x1__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11254 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">17:let ctx = GLOBAL_context</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11237 [shape=cds, label=<<font color="black">6:app __x2__ = (thisEnvRec.HasSuperBinding thisEnvRec)</font>> color="black" fillcolor="white" style=filled]
  node11268 [shape=cds, label=<<font color="black">36:access __x10__ = (body &quot;Evaluation&quot;)</font>> color="black" fillcolor="white" style=filled]
  node11233 [shape=cds, label=<<font color="black">2:app __x1__ = (GetThisEnvironment )</font>> color="black" fillcolor="white" style=filled]
  node11257 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">20:let lexEnv = __x7__</td></tr>
      <tr><td align="left">21:let varEnv = ctx.VariableEnvironment</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11240 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let inDerivedConstructor = true</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11256 [shape=cds, label=<<font color="black">20:app __x7__ = (NewDeclarativeEnvironment ctx.LexicalEnvironment)</font>> color="black" fillcolor="white" style=filled]
  node11266 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">34:let result = __x9__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11228 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node11260 [shape=diamond, label=<<font color="black">(= strictEval true)</font>> color="black" fillcolor="white" style=filled]
  node11273 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">39:GLOBAL_context = null</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11250 [shape=diamond, label=<<font color="black">(= strictCaller true)</font>> color="black" fillcolor="white" style=filled]
  node11232 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return x</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11264 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">27:let evalCxt = (new ExecutionContext(&quot;SubMap&quot; -&gt; (new SubMap())))</td></tr>
      <tr><td align="left">28:evalCxt.Function = null</td></tr>
      <tr><td align="left">29:evalCxt.Realm = evalRealm</td></tr>
      <tr><td align="left">30:evalCxt.ScriptOrModule = ctx.ScriptOrModule</td></tr>
      <tr><td align="left">31:evalCxt.VariableEnvironment = varEnv</td></tr>
      <tr><td align="left">32:evalCxt.LexicalEnvironment = lexEnv</td></tr>
      <tr><td align="left">33:append evalCxt -&gt; GLOBAL_executionStack</td></tr>
      <tr><td align="left">33:GLOBAL_context = GLOBAL_executionStack[(- GLOBAL_executionStack.length 1i)]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11247 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return undefined</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11242 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">9:let inFunction = false</td></tr>
      <tr><td align="left">10:let inMethod = false</td></tr>
      <tr><td align="left">11:let inDerivedConstructor = false</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11265 [shape=cds, label=<<font color="black">34:app __x9__ = (EvalDeclarationInstantiation body varEnv lexEnv strictEval)</font>> color="black" fillcolor="white" style=filled]
  node11270 [shape=diamond, label=<<font color="black">(&amp;&amp; (= result.Type CONST_normal) (= result.Value CONST_empty))</font>> color="black" fillcolor="white" style=filled]
  node11253 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let strictEval = __x6__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11255 [shape=diamond, label=<<font color="black">(= direct true)</font>> color="black" fillcolor="white" style=filled]
  node11244 [shape=cds, label=<<font color="black">13:access __x3__ = (script &quot;Contains&quot;)</font>> color="black" fillcolor="white" style=filled]
  node11249 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">14:let body = __x5__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11248 [shape=cds, label=<<font color="black">14:access __x5__ = (script &quot;ScriptBody&quot;)</font>> color="black" fillcolor="white" style=filled]
  node11229 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node11243 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">12:??? &quot;Let id:{script} be the ECMAScript code that is the result of parsing id:{x} , interpreted as UTF - 16 encoded Unicode text as described in link:{unhandled: sec-ecmascript-language-types-string-type} , for the goal symbol nt:{Script} . If id:{inFunction} is value:{false} , additional early error rules from link:{unhandled: sec-performeval-rules-outside-functions} are applied . If id:{inMethod} is value:{false} , additional early error rules from link:{unhandled: sec-performeval-rules-outside-methods} are applied . If id:{inDerivedConstructor} is value:{false} , additional early error rules from link:{unhandled: sec-performeval-rules-outside-constructors} are applied . If the parse fails , throw a value:{SyntaxError} exception . If any early errors are detected , throw a value:{SyntaxError} or a value:{ReferenceError} exception , depending on the type of the error ( but see also clause link:{unhandled: sec-error-handling-and-language-extensions} ) . Parsing and early error detection may be interweaved in an implementation - dependent manner .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11269 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">36:result = __x10__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11261 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">varEnv = lexEnv</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11274 [shape=diamond, label=<<font color="black">(= GLOBAL_executionStack[(- GLOBAL_executionStack.length 1i)] evalCxt)</font>> color="black" fillcolor="white" style=filled]
  node11262 [shape=diamond, label=<<font color="black">(= ctx null)</font>> color="black" fillcolor="white" style=filled]
  node11245 [shape=cds, label=<<font color="black">13:app __x4__ = (__x3__ &quot;ScriptBody&quot;)</font>> color="black" fillcolor="white" style=filled]
  node11272 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">38:result = __x11__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11230 [shape=cds, label=<<font color="black">1:app __x0__ = (Type x)</font>> color="black" fillcolor="white" style=filled]
  node11275 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">(pop GLOBAL_executionStack (- GLOBAL_executionStack.length 1i))</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11252 [shape=cds, label=<<font color="black">access __x6__ = (script &quot;IsStrict&quot;)</font>> color="black" fillcolor="white" style=filled]
  node11267 [shape=diamond, label=<<font color="black">(= result.Type CONST_normal)</font>> color="black" fillcolor="white" style=filled]
  node11259 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">23:let lexEnv = __x8__</td></tr>
      <tr><td align="left">24:let varEnv = evalRealm.GlobalEnv</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11271 [shape=cds, label=<<font color="black">38:app __x11__ = (NormalCompletion undefined)</font>> color="black" fillcolor="white" style=filled]
  node11263 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">GLOBAL_context = null</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11231 [shape=diamond, label=<<font color="black">(! (= __x0__ String))</font>> color="black" fillcolor="white" style=filled]
  node11246 [shape=diamond, label=<<font color="black">(= __x4__ false)</font>> color="black" fillcolor="white" style=filled]
  node11236 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">4:let F = thisEnvRec.FunctionObject</td></tr>
      <tr><td align="left">5:let inFunction = true</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11258 [shape=cds, label=<<font color="black">23:app __x8__ = (NewDeclarativeEnvironment evalRealm.GlobalEnv)</font>> color="black" fillcolor="white" style=filled]
  node11276 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">40:GLOBAL_context = GLOBAL_executionStack[(- GLOBAL_executionStack.length 1i)]</td></tr>
      <tr><td align="left">41:return result</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11251 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let strictEval = true</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11241 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let inDerivedConstructor = false</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11272 -> node11273 [ color="black"]
  node11244 -> node11245 [ color="black"]
  node11255 -> node11256 [label=<<font color="black">true</font>> color="black"]
  node11255 -> node11258 [label=<<font color="black">false</font>> color="black"]
  node11257 -> node11260 [ color="black"]
  node11228 -> node11230 [ color="black"]
  node11268 -> node11269 [ color="black"]
  node11275 -> node11276 [ color="black"]
  node11267 -> node11268 [label=<<font color="black">true</font>> color="black"]
  node11267 -> node11270 [label=<<font color="black">false</font>> color="black"]
  node11250 -> node11251 [label=<<font color="black">true</font>> color="black"]
  node11250 -> node11252 [label=<<font color="black">false</font>> color="black"]
  node11237 -> node11238 [ color="black"]
  node11234 -> node11235 [ color="black"]
  node11256 -> node11257 [ color="black"]
  node11261 -> node11262 [ color="black"]
  node11251 -> node11254 [ color="black"]
  node11242 -> node11243 [ color="black"]
  node11269 -> node11270 [ color="black"]
  node11259 -> node11260 [ color="black"]
  node11232 -> node11233 [ color="black"]
  node11273 -> node11274 [ color="black"]
  node11266 -> node11267 [ color="black"]
  node11263 -> node11264 [ color="black"]
  node11270 -> node11271 [label=<<font color="black">true</font>> color="black"]
  node11270 -> node11273 [label=<<font color="black">false</font>> color="black"]
  node11271 -> node11272 [ color="black"]
  node11252 -> node11253 [ color="black"]
  node11253 -> node11254 [ color="black"]
  node11264 -> node11265 [ color="black"]
  node11260 -> node11261 [label=<<font color="black">true</font>> color="black"]
  node11260 -> node11262 [label=<<font color="black">false</font>> color="black"]
  node11248 -> node11249 [ color="black"]
  node11262 -> node11263 [label=<<font color="black">true</font>> color="black"]
  node11262 -> node11264 [label=<<font color="black">false</font>> color="black"]
  node11254 -> node11255 [ color="black"]
  node11233 -> node11234 [ color="black"]
  node11238 -> node11239 [ color="black"]
  node11265 -> node11266 [ color="black"]
  node11274 -> node11275 [label=<<font color="black">true</font>> color="black"]
  node11274 -> node11276 [label=<<font color="black">false</font>> color="black"]
  node11230 -> node11231 [ color="black"]
  node11258 -> node11259 [ color="black"]
  node11239 -> node11240 [label=<<font color="black">true</font>> color="black"]
  node11239 -> node11241 [label=<<font color="black">false</font>> color="black"]
  node11245 -> node11246 [ color="black"]
  node11247 -> node11248 [ color="black"]
  node11235 -> node11236 [label=<<font color="black">true</font>> color="black"]
  node11235 -> node11242 [label=<<font color="black">false</font>> color="black"]
  node11240 -> node11243 [ color="black"]
  node11246 -> node11247 [label=<<font color="black">true</font>> color="black"]
  node11246 -> node11248 [label=<<font color="black">false</font>> color="black"]
  node11241 -> node11243 [ color="black"]
  node11231 -> node11232 [label=<<font color="black">true</font>> color="black"]
  node11231 -> node11233 [label=<<font color="black">false</font>> color="black"]
  node11236 -> node11237 [ color="black"]
  node11276 -> node11229 [ color="black"]
  node11249 -> node11250 [ color="black"]
  node11243 -> node11244 [ color="black"]
}
