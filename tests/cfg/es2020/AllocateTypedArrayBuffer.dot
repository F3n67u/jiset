digraph {
  node16409 [shape=cds, label=<<font color="black">2:app __x0__ = (IsNonNegativeInteger length)</font>> color="black" fillcolor="white" style=filled]
  node16406 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node16410 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">2:assert (= [! __x0__] true)</td></tr>
      <tr><td align="left">3:let constructorName = O.TypedArrayName</td></tr>
      <tr><td align="left">4:??? &quot;Let id:{elementSize} be the Element Size value specified in link:{unhandled: table-the-typedarray-constructors} for id:{constructorName} .&quot;</td></tr>
      <tr><td align="left">5:let byteLength = (* elementSize length)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16408 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">1:assert (= O.ViewedArrayBuffer undefined)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16411 [shape=cds, label=<<font color="black">6:app __x1__ = (AllocateArrayBuffer INTRINSIC_ArrayBuffer byteLength)</font>> color="black" fillcolor="white" style=filled]
  node16407 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node16412 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">6:let data = [? __x1__]</td></tr>
      <tr><td align="left">7:O.ViewedArrayBuffer = data</td></tr>
      <tr><td align="left">8:O.ByteLength = byteLength</td></tr>
      <tr><td align="left">9:O.ByteOffset = 0i</td></tr>
      <tr><td align="left">10:O.ArrayLength = length</td></tr>
      <tr><td align="left">11:return O</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16408 -> node16409 [ color="black"]
  node16406 -> node16408 [ color="black"]
  node16409 -> node16410 [ color="black"]
  node16411 -> node16412 [ color="black"]
  node16412 -> node16407 [ color="black"]
  node16410 -> node16411 [ color="black"]
}
