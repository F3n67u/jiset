{
  app searchValue = (GetArgument argumentsList 0i)
  app replaceValue = (GetArgument argumentsList 1i)
  [0] app __x0__ = (RequireObjectCoercible this)
  [0] if (is-completion __x0__) if (= __x0__.Type CONST_normal) __x0__ = __x0__.Value else return __x0__ else [4] {}
  [0] let O = __x0__
  [1] if (! (|| (= searchValue undefined) (= searchValue null))) {
    [2] app __x1__ = (GetMethod searchValue SYMBOL_replace)
    [2] if (is-completion __x1__) if (= __x1__.Type CONST_normal) __x1__ = __x1__.Value else return __x1__ else [4] {}
    [2] let replacer = __x1__
    [3] if (! (= replacer undefined)) {
      [4] app __x2__ = (Call replacer searchValue (new [O, replaceValue]))
      [4] if (is-completion __x2__) if (= __x2__.Type CONST_normal) __x2__ = __x2__.Value else return __x2__ else [4] {}
      [4] app __x3__ = (WrapCompletion __x2__)
      [4] return __x3__
    } else [4] {}
  } else [4] {}
  [5] app __x4__ = (ToString O)
  [5] if (is-completion __x4__) if (= __x4__.Type CONST_normal) __x4__ = __x4__.Value else return __x4__ else [4] {}
  [5] let string = __x4__
  [6] app __x5__ = (ToString searchValue)
  [6] if (is-completion __x5__) if (= __x5__.Type CONST_normal) __x5__ = __x5__.Value else return __x5__ else [4] {}
  [6] let searchString = __x5__
  [7] app __x6__ = (IsCallable replaceValue)
  [7] let functionalReplace = __x6__
  [8] if (= functionalReplace false) {
    [9] app __x7__ = (ToString replaceValue)
    [9] if (is-completion __x7__) if (= __x7__.Type CONST_normal) __x7__ = __x7__.Value else return __x7__ else [4] {}
    [9] replaceValue = __x7__
  } else [4] {}
  [10] ??? "Search id:{string} for the first occurrence of id:{searchString} and let id:{pos} be the index within id:{string} of the first code unit of the matched substring and let id:{matched} be id:{searchString} . If no occurrences of id:{searchString} were found , return id:{string} ."
  [14] if (= functionalReplace true) {
    [12] app __x8__ = (Call replaceValue undefined (new [matched, pos, string]))
    [12] if (is-completion __x8__) if (= __x8__.Type CONST_normal) __x8__ = __x8__.Value else return __x8__ else [4] {}
    [12] let replValue = __x8__
    [13] app __x9__ = (ToString replValue)
    [13] if (is-completion __x9__) if (= __x9__.Type CONST_normal) __x9__ = __x9__.Value else return __x9__ else [4] {}
    [13] let replStr = __x9__
  } else {
    [15] let captures = (new [])
    [16] app __x10__ = (GetSubstitution matched string pos captures undefined replaceValue)
    [16] if (is-completion __x10__) if (= __x10__.Type CONST_normal) __x10__ = __x10__.Value else return __x10__ else [4] {}
    [16] let replStr = __x10__
  }
  [17] let tailPos = (+ pos matched.length)
  [18] ??? "Let id:{newString} be the string - concatenation of the first id:{pos} code units of id:{string} , id:{replStr} , and the trailing substring of id:{string} starting at index id:{tailPos} . If id:{pos} is 0 , the first element of the concatenation will be the empty String ."
  [19] app __x11__ = (WrapCompletion newString)
  [19] return __x11__
}