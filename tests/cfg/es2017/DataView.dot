digraph {
  node15752 [shape=diamond, label=<<font color="black">(|| (= byteLength absent) (= byteLength undefined))</font>> color="black" fillcolor="white" style=filled]
  node15759 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">12:let O = [? __x4__]</td></tr>
      <tr><td align="left">13:O.ViewedArrayBuffer = buffer</td></tr>
      <tr><td align="left">14:O.ByteLength = viewByteLength</td></tr>
      <tr><td align="left">15:O.ByteOffset = offset</td></tr>
      <tr><td align="left">16:return O</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15748 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15738 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15751 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw RangeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15734 [shape=cds, label=<<font color="black">app buffer = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node15756 [shape=diamond, label=<<font color="black">(&lt; bufferByteLength (+ offset viewByteLength))</font>> color="black" fillcolor="white" style=filled]
  node15739 [shape=cds, label=<<font color="black">1:app __x0__ = (Type buffer)</font>> color="black" fillcolor="white" style=filled]
  node15747 [shape=diamond, label=<<font color="black">(= __x2__ true)</font>> color="black" fillcolor="white" style=filled]
  node15733 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node15740 [shape=diamond, label=<<font color="black">(! (= __x0__ Object))</font>> color="black" fillcolor="white" style=filled]
  node15753 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let viewByteLength = (- bufferByteLength offset)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15736 [shape=cds, label=<<font color="black">app byteLength = (GetArgument argumentsList 2i)</font>> color="black" fillcolor="white" style=filled]
  node15743 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15741 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15758 [shape=cds, label=<<font color="black">12:app __x4__ = (OrdinaryCreateFromConstructor NewTarget INTRINSIC_DataViewPrototype (new [&quot;DataView&quot;, &quot;ViewedArrayBuffer&quot;, &quot;ByteLength&quot;, &quot;ByteOffset&quot;]))</font>> color="black" fillcolor="white" style=filled]
  node15755 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">10:let viewByteLength = [? __x3__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15735 [shape=cds, label=<<font color="black">app byteOffset = (GetArgument argumentsList 1i)</font>> color="black" fillcolor="white" style=filled]
  node15742 [shape=diamond, label=<<font color="black">(= buffer.ArrayBufferData absent)</font>> color="black" fillcolor="white" style=filled]
  node15744 [shape=cds, label=<<font color="black">3:app __x1__ = (ToIndex byteOffset)</font>> color="black" fillcolor="white" style=filled]
  node15750 [shape=diamond, label=<<font color="black">(&lt; bufferByteLength offset)</font>> color="black" fillcolor="white" style=filled]
  node15745 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">3:let offset = [? __x1__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15746 [shape=cds, label=<<font color="black">4:app __x2__ = (IsDetachedBuffer buffer)</font>> color="black" fillcolor="white" style=filled]
  node15757 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw RangeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15754 [shape=cds, label=<<font color="black">10:app __x3__ = (ToIndex byteLength)</font>> color="black" fillcolor="white" style=filled]
  node15749 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">5:let bufferByteLength = buffer.ArrayBufferByteLength</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15737 [shape=diamond, label=<<font color="black">(= NewTarget undefined)</font>> color="black" fillcolor="white" style=filled]
  node15732 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node15737 -> node15738 [label=<<font color="black">true</font>> color="black"]
  node15737 -> node15739 [label=<<font color="black">false</font>> color="black"]
  node15739 -> node15740 [ color="black"]
  node15751 -> node15752 [ color="black"]
  node15757 -> node15758 [ color="black"]
  node15750 -> node15751 [label=<<font color="black">true</font>> color="black"]
  node15750 -> node15752 [label=<<font color="black">false</font>> color="black"]
  node15759 -> node15733 [ color="black"]
  node15753 -> node15758 [ color="black"]
  node15732 -> node15734 [ color="black"]
  node15749 -> node15750 [ color="black"]
  node15752 -> node15753 [label=<<font color="black">true</font>> color="black"]
  node15752 -> node15754 [label=<<font color="black">false</font>> color="black"]
  node15748 -> node15749 [ color="black"]
  node15738 -> node15739 [ color="black"]
  node15743 -> node15744 [ color="black"]
  node15742 -> node15743 [label=<<font color="black">true</font>> color="black"]
  node15742 -> node15744 [label=<<font color="black">false</font>> color="black"]
  node15755 -> node15756 [ color="black"]
  node15745 -> node15746 [ color="black"]
  node15756 -> node15757 [label=<<font color="black">true</font>> color="black"]
  node15756 -> node15758 [label=<<font color="black">false</font>> color="black"]
  node15734 -> node15735 [ color="black"]
  node15746 -> node15747 [ color="black"]
  node15740 -> node15741 [label=<<font color="black">true</font>> color="black"]
  node15740 -> node15742 [label=<<font color="black">false</font>> color="black"]
  node15754 -> node15755 [ color="black"]
  node15741 -> node15742 [ color="black"]
  node15735 -> node15736 [ color="black"]
  node15747 -> node15748 [label=<<font color="black">true</font>> color="black"]
  node15747 -> node15749 [label=<<font color="black">false</font>> color="black"]
  node15744 -> node15745 [ color="black"]
  node15758 -> node15759 [ color="black"]
  node15736 -> node15737 [ color="black"]
}
