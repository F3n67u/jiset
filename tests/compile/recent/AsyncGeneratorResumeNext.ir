{
  [1] let state = generator.AsyncGeneratorState
  [2] assert (! (= state CONST_executing))
  [3] if (= state CONST_awaitingDASHreturn) {
    app __x0__ = (WrapCompletion undefined)
    return __x0__
  } else [38] {}
  [4] let queue = generator.AsyncGeneratorQueue
  [5] if (= queue.length 0i) {
    app __x1__ = (WrapCompletion undefined)
    return __x1__
  } else [38] {}
  [6] let next = queue[0i]
  [8] let completion = next.Completion
  [29] app __x2__ = (IsAbruptCompletion completion)
  [29] if __x2__ {
    [10] if (= state CONST_suspendedStart) {
      [11] generator.AsyncGeneratorState = CONST_completed
      [12] state = CONST_completed
    } else [38] {}
    [13] if (= state CONST_completed) if (= completion.Type CONST_return) {
      [15] generator.AsyncGeneratorState = CONST_awaitingDASHreturn
      [16] app __x3__ = (PromiseResolve INTRINSIC_Promise completion.Value)
      [16] if (is-completion __x3__) if (= __x3__.Type CONST_normal) __x3__ = __x3__.Value else return __x3__ else [38] {}
      [16] let promise = __x3__
      [17] ??? "Let id:{stepsFulfilled} be the algorithm steps defined in link:{} ."
      [18] app __x4__ = (CreateBuiltinFunction stepsFulfilled (new ["Generator"]))
      [18] if (is-completion __x4__) if (= __x4__.Type CONST_normal) __x4__ = __x4__.Value else return __x4__ else [38] {}
      [18] let onFulfilled = __x4__
      [19] onFulfilled.Generator = generator
      [20] ??? "Let id:{stepsRejected} be the algorithm steps defined in link:{} ."
      [21] app __x5__ = (CreateBuiltinFunction stepsRejected (new ["Generator"]))
      [21] if (is-completion __x5__) if (= __x5__.Type CONST_normal) __x5__ = __x5__.Value else return __x5__ else [38] {}
      [21] let onRejected = __x5__
      [22] onRejected.Generator = generator
      [23] app __x6__ = (PerformPromiseThen promise onFulfilled onRejected)
      [23] if (is-completion __x6__) if (= __x6__.Type CONST_normal) __x6__ = __x6__.Value else return __x6__ else [38] {}
      [23] __x6__
      [24] app __x7__ = (WrapCompletion undefined)
      [24] return __x7__
    } else {
      [26] assert (= completion.Type CONST_throw)
      [27] app __x8__ = (AsyncGeneratorReject generator completion.Value)
      [27] if (is-completion __x8__) if (= __x8__.Type CONST_normal) __x8__ = __x8__.Value else return __x8__ else [38] {}
      [27] __x8__
      [28] app __x9__ = (WrapCompletion undefined)
      [28] return __x9__
    } else [38] {}
  } else if (= state CONST_completed) {
    app __x10__ = (AsyncGeneratorResolve generator undefined true)
    if (is-completion __x10__) if (= __x10__.Type CONST_normal) __x10__ = __x10__.Value else return __x10__ else [38] {}
    app __x11__ = (WrapCompletion __x10__)
    return __x11__
  } else [38] {}
  [30] assert (|| (= state CONST_suspendedStart) (= state CONST_suspendedYield))
  [31] let genContext = generator.AsyncGeneratorContext
  [32] let callerContext = GLOBAL_context
  [33] GLOBAL_context = null
  [34] generator.AsyncGeneratorState = CONST_executing
  [35] append genContext -> GLOBAL_executionStack
  [35] GLOBAL_context = GLOBAL_executionStack[(- GLOBAL_executionStack.length 1i)]
  [36] ??? "Resume the suspended evaluation of id:{genContext} using id:{completion} as the result of the operation that suspended it . Let id:{result} be the completion record returned by the resumed computation ."
  [39] app __x12__ = (WrapCompletion undefined)
  [39] return __x12__
}