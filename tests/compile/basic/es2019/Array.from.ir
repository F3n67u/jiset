{
  let C = this
  if (= mapfn undefined) let mapping = false else {
    app __x0__ = (IsCallable mapfn)
    if (= __x0__ false) throw INTRINSIC_TypeError else {}
    if (! (= thisArg absent)) let T = thisArg else let T = undefined
    let mapping = true
  }
  app __x1__ = (GetMethod items SYMBOL_iterator)
  let usingIterator = [? __x1__]
  if (! (= usingIterator undefined)) {
    app __x2__ = (IsConstructor C)
    if (= __x2__ true) {
      app __x3__ = (Construct C)
      let A = [? __x3__]
    } else {
      app __x4__ = (ArrayCreate 0i)
      let A = [! __x4__]
    }
    app __x5__ = (GetIterator items CONST_sync usingIterator)
    let iteratorRecord = [? __x5__]
    let k = 0i
    while true {
      if (! (< k (- (** 2.0 53i) 1i))) {
        app __x6__ = (ThrowCompletion ??? "TypeError")
        let error = __x6__
        app __x7__ = (IteratorClose iteratorRecord error)
        return [? __x7__]
      } else {}
      app __x8__ = (ToString k)
      let Pk = [! __x8__]
      app __x9__ = (IteratorStep iteratorRecord)
      let next = [? __x9__]
      if (= next false) {
        app __x10__ = (Set A "length" k true)
        [? __x10__]
        return A
      } else {}
      app __x11__ = (IteratorValue next)
      let nextValue = [? __x11__]
      if (= mapping true) {
        app __x12__ = (Call mapfn T (new [nextValue, k]))
        let mappedValue = __x12__
        app __x13__ = (IsAbruptCompletion mappedValue)
        if __x13__ {
          app __x14__ = (IteratorClose iteratorRecord mappedValue)
          return [? __x14__]
        } else {}
        mappedValue = mappedValue.Value
      } else let mappedValue = nextValue
      app __x15__ = (CreateDataPropertyOrThrow A Pk mappedValue)
      let defineStatus = __x15__
      app __x16__ = (IsAbruptCompletion defineStatus)
      if __x16__ {
        app __x17__ = (IteratorClose iteratorRecord defineStatus)
        return [? __x17__]
      } else {}
      k = (+ k 1i)
    }
  } else {}
  app __x18__ = (ToObject items)
  let arrayLike = [! __x18__]
  app __x19__ = (Get arrayLike "length")
  app __x20__ = (ToLength [? __x19__])
  let len = [? __x20__]
  app __x21__ = (IsConstructor C)
  if (= __x21__ true) {
    app __x22__ = (Construct C (new [len]))
    let A = [? __x22__]
  } else {
    app __x23__ = (ArrayCreate len)
    let A = [? __x23__]
  }
  let k = 0i
  while (< k len) {
    app __x24__ = (ToString k)
    let Pk = [! __x24__]
    app __x25__ = (Get arrayLike Pk)
    let kValue = [? __x25__]
    if (= mapping true) {
      app __x26__ = (Call mapfn T (new [kValue, k]))
      let mappedValue = [? __x26__]
    } else let mappedValue = kValue
    app __x27__ = (CreateDataPropertyOrThrow A Pk mappedValue)
    [? __x27__]
    k = (+ k 1i)
  }
  app __x28__ = (Set A "length" len true)
  [? __x28__]
  return A
}