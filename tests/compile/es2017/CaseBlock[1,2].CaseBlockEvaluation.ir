{
  [0] let V = undefined
  [3] if (! (= CaseClauses0 absent)) ??? "Let id:{A} be the List of nt:{CaseClause} items in the first nt:{CaseClauses} , in source text order ." else let A = (new [])
  [5] let found = false
  [6] let __x0__ = A
  [6] let __x1__ = 0i
  [6] while (< __x1__ __x0__.length) {
    let C = __x0__[__x1__]
    [7] if (= found false) {
      [8] access __x2__ = (C "CaseSelectorEvaluation")
      [8] let clauseSelector = __x2__
      [9] if (is-completion clauseSelector) if (= clauseSelector.Type CONST_normal) clauseSelector = clauseSelector.Value else return clauseSelector else [20] {}
      [9] clauseSelector
      [10] app __x3__ = (StrictEqualityComparison input clauseSelector)
      [10] found = __x3__
    } else [20] {}
    [11] if (= found true) {
      [12] access __x4__ = (C "Evaluation")
      [12] let R = __x4__
      [13] if (! (= R.Value CONST_empty)) V = R.Value else [20] {}
      [14] app __x5__ = (IsAbruptCompletion R)
      [14] if __x5__ {
        app __x6__ = (UpdateEmpty R V)
        app __x7__ = (Completion __x6__)
        app __x8__ = (WrapCompletion __x7__)
        return __x8__
      } else [20] {}
    } else [20] {}
    __x1__ = (+ __x1__ 1i)
  }
  [15] let foundInB = false
  [18] if (! (= CaseClauses1 absent)) ??? "Let id:{B} be the List of nt:{CaseClause} items in the second nt:{CaseClauses} , in source text order ." else let B = (new [])
  [20] if (= found false) {
    [21] let __x9__ = B
    [21] let __x10__ = 0i
    [21] while (< __x10__ __x9__.length) {
      let C = __x9__[__x10__]
      [22] if (= foundInB false) {
        [23] access __x11__ = (C "CaseSelectorEvaluation")
        [23] let clauseSelector = __x11__
        [24] if (is-completion clauseSelector) if (= clauseSelector.Type CONST_normal) clauseSelector = clauseSelector.Value else return clauseSelector else [20] {}
        [24] clauseSelector
        [25] app __x12__ = (StrictEqualityComparison input clauseSelector)
        [25] foundInB = __x12__
      } else [20] {}
      [26] if (= foundInB true) {
        [27] access __x13__ = (C "Evaluation")
        [27] let R = __x13__
        [28] if (! (= R.Value CONST_empty)) V = R.Value else [20] {}
        [29] app __x14__ = (IsAbruptCompletion R)
        [29] if __x14__ {
          app __x15__ = (UpdateEmpty R V)
          app __x16__ = (Completion __x15__)
          app __x17__ = (WrapCompletion __x16__)
          return __x17__
        } else [20] {}
      } else [20] {}
      __x10__ = (+ __x10__ 1i)
    }
  } else [20] {}
  [30] if (= foundInB true) {
    app __x18__ = (NormalCompletion V)
    app __x19__ = (WrapCompletion __x18__)
    return __x19__
  } else [20] {}
  [31] access __x20__ = (DefaultClause "Evaluation")
  [31] let R = __x20__
  [32] if (! (= R.Value CONST_empty)) V = R.Value else [20] {}
  [33] app __x21__ = (IsAbruptCompletion R)
  [33] if __x21__ {
    app __x22__ = (UpdateEmpty R V)
    app __x23__ = (Completion __x22__)
    app __x24__ = (WrapCompletion __x23__)
    return __x24__
  } else [20] {}
  [34] let __x25__ = B
  [34] let __x26__ = 0i
  [34] while (< __x26__ __x25__.length) {
    let C = __x25__[__x26__]
    [35] access __x27__ = (C "Evaluation")
    [35] let R = __x27__
    [36] if (! (= R.Value CONST_empty)) V = R.Value else [20] {}
    [37] app __x28__ = (IsAbruptCompletion R)
    [37] if __x28__ {
      app __x29__ = (UpdateEmpty R V)
      app __x30__ = (Completion __x29__)
      app __x31__ = (WrapCompletion __x30__)
      return __x31__
    } else [20] {}
    __x26__ = (+ __x26__ 1i)
  }
  [38] app __x32__ = (NormalCompletion V)
  [38] app __x33__ = (WrapCompletion __x32__)
  [38] return __x33__
}