{
  app __x0__ = (RequireObjectCoercible this)
  let O = [? __x0__]
  if (! (|| (= searchValue undefined) (= searchValue null))) {
    app __x1__ = (GetMethod searchValue SYMBOL_replace)
    let replacer = [? __x1__]
    if (! (= replacer undefined)) {
      app __x2__ = (Call replacer searchValue (new [O, replaceValue]))
      return [? __x2__]
    } else {}
  } else {}
  app __x3__ = (ToString O)
  let string = [? __x3__]
  app __x4__ = (ToString searchValue)
  let searchString = [? __x4__]
  app __x5__ = (IsCallable replaceValue)
  let functionalReplace = __x5__
  if (= functionalReplace false) {
    app __x6__ = (ToString replaceValue)
    replaceValue = [? __x6__]
  } else {}
  let searchLength = searchString.length
  app __x7__ = (StringIndexOf string searchString 0i)
  let position = [! __x7__]
  if (= position -1i) return string else {}
  let __x8__ = ""
  let __x9__ = 0i
  while (< __x9__ (+ position 1i)) {
    access __x10__ = (string __x9__)
    __x8__ = (+ __x8__ __x10__)
    __x9__ = (+ __x9__ 1i)
  }
  let preserved = __x8__
  if (= functionalReplace true) {
    app __x11__ = (Call replaceValue undefined (new [searchString, position, string]))
    app __x12__ = (ToString [? __x11__])
    let replacement = [? __x12__]
  } else {
    assert (= (typeof replaceValue) String)
    let captures = (new [])
    app __x13__ = (GetSubstitution searchString string position captures undefined replaceValue)
    let replacement = [! __x13__]
  }
  ??? "Return the string - concatenation of id:{preserved} , id:{replacement} , and the substring of id:{string} from id:{position} + id:{searchLength} ."
}