digraph {
  node11472 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">11:??? &quot;If the code units at index ( id:{k} + 1 ) and ( id:{k} + 2 ) within id:{string} do not represent hexadecimal digits , throw a value:{URIError} exception .&quot;</td></tr>
      <tr><td align="left">12:??? &quot;Let id:{B} be the 8 - bit value represented by the two hexadecimal digits at index ( id:{k} + 1 ) and ( id:{k} + 2 ) .&quot;</td></tr>
      <tr><td align="left">13:k = (+ k 2i)</td></tr>
      <tr><td align="left">14:??? &quot;If the most significant bit in id:{B} is 0 , then in:{} out:{}&quot;</td></tr>
      <tr><td align="left">20:??? &quot;Else the most significant bit in id:{B} is 1 , in:{} out:{}&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11468 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let S = C</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11463 [shape=diamond, label=<<font color="black">true</font>> color="black" fillcolor="white" style=filled]
  node11471 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw URIError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11467 [shape=diamond, label=<<font color="black">(! (= C &quot;%&quot;))</font>> color="black" fillcolor="white" style=filled]
  node11466 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">5:let C = string[k]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11470 [shape=diamond, label=<<font color="black">(! (&lt; (+ k 2i) strLen))</font>> color="black" fillcolor="white" style=filled]
  node11465 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return R</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11469 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">9:let start = k</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11462 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let strLen = string.length</td></tr>
      <tr><td align="left">1:let R = &quot;&quot;</td></tr>
      <tr><td align="left">2:let k = 0i</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11458 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node11473 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">39:R = (+ R S)</td></tr>
      <tr><td align="left">40:k = (+ k 1i)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11464 [shape=diamond, label=<<font color="black">(= k strLen)</font>> color="black" fillcolor="white" style=filled]
  node11459 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node11461 [shape=cds, label=<<font color="black">app reservedSet = (GetArgument argumentsList 1i)</font>> color="black" fillcolor="white" style=filled]
  node11460 [shape=cds, label=<<font color="black">app string = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node11458 -> node11460 [ color="black"]
  node11469 -> node11470 [ color="black"]
  node11463 -> node11464 [label=<<font color="black">true</font>> color="black"]
  node11463 -> node11459 [label=<<font color="black">false</font>> color="black"]
  node11460 -> node11461 [ color="black"]
  node11468 -> node11473 [ color="black"]
  node11467 -> node11468 [label=<<font color="black">true</font>> color="black"]
  node11467 -> node11469 [label=<<font color="black">false</font>> color="black"]
  node11464 -> node11465 [label=<<font color="black">true</font>> color="black"]
  node11464 -> node11466 [label=<<font color="black">false</font>> color="black"]
  node11461 -> node11462 [ color="black"]
  node11473 -> node11463 [ color="black"]
  node11465 -> node11466 [ color="black"]
  node11466 -> node11467 [ color="black"]
  node11462 -> node11463 [ color="black"]
  node11470 -> node11471 [label=<<font color="black">true</font>> color="black"]
  node11470 -> node11472 [label=<<font color="black">false</font>> color="black"]
  node11471 -> node11472 [ color="black"]
  node11472 -> node11473 [ color="black"]
}
