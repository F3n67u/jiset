{
  app __x0__ = (Type index)
  assert (= __x0__ Number)
  if (= O.ContentType CONST_BigInt) {
    app __x1__ = (ToBigInt value)
    let numValue = [? __x1__]
  } else {
    app __x2__ = (ToNumber value)
    let numValue = [? __x2__]
  }
  let buffer = O.ViewedArrayBuffer
  app __x3__ = (IsDetachedBuffer buffer)
  if (= __x3__ true) throw INTRINSIC_TypeError else {}
  app __x4__ = (IsValidIntegerIndex O index)
  if (= [! __x4__] false) return false else {}
  let offset = O.ByteOffset
  let arrayTypeName = O.TypedArrayName
  let elementSize = GLOBAL_typedArrayInfo[arrayTypeName].ElementSize
  let indexedPosition = (+ (* index elementSize) offset)
  let elementType = GLOBAL_typedArrayInfo[arrayTypeName].ElementType
  app __x5__ = (SetValueInBuffer buffer indexedPosition elementType numValue true CONST_Unordered)
  __x5__
  return true
}