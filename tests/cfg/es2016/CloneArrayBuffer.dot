digraph {
  node14927 [shape=cds, label=<<font color="black">9:app __x3__ = (AllocateArrayBuffer cloneConstructor cloneLength)</font>> color="black" fillcolor="white" style=filled]
  node14923 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14917 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node14921 [shape=cds, label=<<font color="black">3:app __x1__ = (IsDetachedBuffer srcBuffer)</font>> color="black" fillcolor="white" style=filled]
  node14926 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">5:let srcLength = srcBuffer.ArrayBufferByteLength</td></tr>
      <tr><td align="left">6:assert (! (&lt; srcLength srcByteOffset))</td></tr>
      <tr><td align="left">7:let cloneLength = (- srcLength srcByteOffset)</td></tr>
      <tr><td align="left">8:let srcBlock = srcBuffer.ArrayBufferData</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14929 [shape=cds, label=<<font color="black">10:app __x4__ = (IsDetachedBuffer srcBuffer)</font>> color="black" fillcolor="white" style=filled]
  node14918 [shape=diamond, label=<<font color="black">(= cloneConstructor absent)</font>> color="black" fillcolor="white" style=filled]
  node14933 [shape=cds, label=<<font color="black">12:app __x5__ = (CopyDataBlockBytes targetBlock 0i srcBlock srcByteOffset cloneLength)</font>> color="black" fillcolor="white" style=filled]
  node14934 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">12:__x5__</td></tr>
      <tr><td align="left">13:return targetBuffer</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14919 [shape=cds, label=<<font color="black">2:app __x0__ = (SpeciesConstructor srcBuffer INTRINSIC_ArrayBuffer)</font>> color="black" fillcolor="white" style=filled]
  node14931 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14916 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node14928 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">9:let targetBuffer = [? __x3__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14924 [shape=cds, label=<<font color="black">app __x2__ = (IsConstructor cloneConstructor)</font>> color="black" fillcolor="white" style=filled]
  node14920 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">2:let cloneConstructor = [? __x0__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14922 [shape=diamond, label=<<font color="black">(= __x1__ true)</font>> color="black" fillcolor="white" style=filled]
  node14932 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">11:let targetBlock = targetBuffer.ArrayBufferData</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14925 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">assert (= __x2__ true)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14930 [shape=diamond, label=<<font color="black">(= __x4__ true)</font>> color="black" fillcolor="white" style=filled]
  node14924 -> node14925 [ color="black"]
  node14925 -> node14926 [ color="black"]
  node14916 -> node14918 [ color="black"]
  node14921 -> node14922 [ color="black"]
  node14933 -> node14934 [ color="black"]
  node14923 -> node14926 [ color="black"]
  node14931 -> node14932 [ color="black"]
  node14918 -> node14919 [label=<<font color="black">true</font>> color="black"]
  node14918 -> node14924 [label=<<font color="black">false</font>> color="black"]
  node14932 -> node14933 [ color="black"]
  node14926 -> node14927 [ color="black"]
  node14928 -> node14929 [ color="black"]
  node14927 -> node14928 [ color="black"]
  node14929 -> node14930 [ color="black"]
  node14920 -> node14921 [ color="black"]
  node14919 -> node14920 [ color="black"]
  node14934 -> node14917 [ color="black"]
  node14930 -> node14931 [label=<<font color="black">true</font>> color="black"]
  node14930 -> node14932 [label=<<font color="black">false</font>> color="black"]
  node14922 -> node14923 [label=<<font color="black">true</font>> color="black"]
  node14922 -> node14926 [label=<<font color="black">false</font>> color="black"]
}
