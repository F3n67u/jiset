digraph {
  node10609 [shape=cds, label=<<font color="black">4:access __x1__ = (body &quot;ImportEntries&quot;)</font>> color="black" fillcolor="white" style=filled]
  node10616 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let ee = __x4__[__x5__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10612 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">5:let importedBoundNames = __x2__</td></tr>
      <tr><td align="left">6:let indirectExportEntries = (new [])</td></tr>
      <tr><td align="left">7:let localExportEntries = (new [])</td></tr>
      <tr><td align="left">8:let starExportEntries = (new [])</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10615 [shape=diamond, label=<<font color="black">(&lt; __x5__ __x4__.length)</font>> color="black" fillcolor="white" style=filled]
  node10620 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">15:??? &quot;Let id:{ie} be the element of id:{importEntries} whose [ [ LocalName ] ] is the same as id:{ee} . [ [ LocalName ] ] .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10611 [shape=cds, label=<<font color="black">5:app __x2__ = (ImportedLocalNames importEntries)</font>> color="black" fillcolor="white" style=filled]
  node10622 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">append ee -&gt; localExportEntries</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10618 [shape=diamond, label=<<font color="black">(! (contains importedBoundNames ee.LocalName))</font>> color="black" fillcolor="white" style=filled]
  node10619 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">append ee -&gt; localExportEntries</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10606 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">1:??? &quot;Parse id:{sourceText} using nt:{Module} as the goal symbol and analyse the parse result for any Early Error conditions . If the parse was successful and no early errors were found , let id:{body} be the resulting parse tree . Otherwise , let id:{body} be a List of one or more value:{SyntaxError} or value:{ReferenceError} objects representing the parsing errors and / or early errors . Parsing and early error detection may be interweaved in an implementation - dependent manner . If more than one parsing error or early error is present , the number and ordering of error objects in the list is implementation - dependent , but at least one must be present .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10623 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">19:??? &quot;Else this is a re - export of a single name , in:{} out:{}&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10626 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">append ee -&gt; indirectExportEntries</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10614 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">9:let exportEntries = __x3__</td></tr>
      <tr><td align="left">10:let __x4__ = exportEntries</td></tr>
      <tr><td align="left">10:let __x5__ = 0i</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10624 [shape=diamond, label=<<font color="black">(= ee.ImportName &quot;*&quot;)</font>> color="black" fillcolor="white" style=filled]
  node10607 [shape=cds, label=<<font color="black">3:access __x0__ = (body &quot;ModuleRequests&quot;)</font>> color="black" fillcolor="white" style=filled]
  node10625 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">append ee -&gt; starExportEntries</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10621 [shape=diamond, label=<<font color="black">(= ie.ImportName &quot;*&quot;)</font>> color="black" fillcolor="white" style=filled]
  node10628 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">25:return (new SourceTextModuleRecord(&quot;Realm&quot; -&gt; realm, &quot;Environment&quot; -&gt; undefined, &quot;Namespace&quot; -&gt; undefined, &quot;Status&quot; -&gt; &quot;uninstantiated&quot;, &quot;EvaluationError&quot; -&gt; undefined, &quot;HostDefined&quot; -&gt; hostDefined, &quot;ECMAScriptCode&quot; -&gt; body, &quot;RequestedModules&quot; -&gt; requestedModules, &quot;ImportEntries&quot; -&gt; importEntries, &quot;LocalExportEntries&quot; -&gt; localExportEntries, &quot;IndirectExportEntries&quot; -&gt; indirectExportEntries, &quot;StarExportEntries&quot; -&gt; starExportEntries, &quot;DFSIndex&quot; -&gt; undefined, &quot;DFSAncestorIndex&quot; -&gt; undefined))</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10617 [shape=diamond, label=<<font color="black">(= ee.ModuleRequest null)</font>> color="black" fillcolor="white" style=filled]
  node10604 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node10613 [shape=cds, label=<<font color="black">9:access __x3__ = (body &quot;ExportEntries&quot;)</font>> color="black" fillcolor="white" style=filled]
  node10608 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">3:let requestedModules = __x0__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10605 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node10610 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">4:let importEntries = __x1__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10627 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">__x5__ = (+ __x5__ 1i)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10606 -> node10607 [ color="black"]
  node10626 -> node10627 [ color="black"]
  node10625 -> node10627 [ color="black"]
  node10611 -> node10612 [ color="black"]
  node10623 -> node10627 [ color="black"]
  node10614 -> node10615 [ color="black"]
  node10609 -> node10610 [ color="black"]
  node10620 -> node10621 [ color="black"]
  node10613 -> node10614 [ color="black"]
  node10612 -> node10613 [ color="black"]
  node10616 -> node10617 [ color="black"]
  node10610 -> node10611 [ color="black"]
  node10615 -> node10616 [label=<<font color="black">true</font>> color="black"]
  node10615 -> node10628 [label=<<font color="black">false</font>> color="black"]
  node10617 -> node10618 [label=<<font color="black">true</font>> color="black"]
  node10617 -> node10624 [label=<<font color="black">false</font>> color="black"]
  node10607 -> node10608 [ color="black"]
  node10618 -> node10619 [label=<<font color="black">true</font>> color="black"]
  node10618 -> node10620 [label=<<font color="black">false</font>> color="black"]
  node10621 -> node10622 [label=<<font color="black">true</font>> color="black"]
  node10621 -> node10623 [label=<<font color="black">false</font>> color="black"]
  node10608 -> node10609 [ color="black"]
  node10619 -> node10627 [ color="black"]
  node10624 -> node10625 [label=<<font color="black">true</font>> color="black"]
  node10624 -> node10626 [label=<<font color="black">false</font>> color="black"]
  node10627 -> node10615 [ color="black"]
  node10622 -> node10623 [ color="black"]
  node10604 -> node10606 [ color="black"]
  node10628 -> node10605 [ color="black"]
}
