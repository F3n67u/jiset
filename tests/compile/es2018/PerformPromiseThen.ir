{
  [0] app __x0__ = (IsPromise promise)
  [0] assert (= __x0__ true)
  [2] app __x1__ = (IsCallable onFulfilled)
  [2] if (= __x1__ false) onFulfilled = undefined else [1] {}
  [4] app __x2__ = (IsCallable onRejected)
  [4] if (= __x2__ false) onRejected = undefined else [1] {}
  [6] let fulfillReaction = (new PromiseReaction("Capability" -> resultCapability, "Type" -> "Fulfill", "Handler" -> onFulfilled))
  [7] let rejectReaction = (new PromiseReaction("Capability" -> resultCapability, "Type" -> "Reject", "Handler" -> onRejected))
  [14] if (= promise.PromiseState "pending") {
    [9] append fulfillReaction -> promise.PromiseFulfillReactions
    [10] append rejectReaction -> promise.PromiseRejectReactions
  } else if (= promise.PromiseState "fulfilled") {
    [12] let value = promise.PromiseResult
    [13] app __x3__ = (EnqueueJob "PromiseJobs" PromiseReactionJob (new [fulfillReaction, value]))
    [13] __x3__
  } else {
    [15] assert (= promise.PromiseState "rejected")
    [16] let reason = promise.PromiseResult
    [17] if (= promise.PromiseIsHandled false) {
      app __x4__ = (HostPromiseRejectionTracker promise "handle")
      __x4__
    } else [1] {}
    [18] app __x5__ = (EnqueueJob "PromiseJobs" PromiseReactionJob (new [rejectReaction, reason]))
    [18] __x5__
  }
  [19] promise.PromiseIsHandled = true
  [20] app __x6__ = (WrapCompletion resultCapability.Promise)
  [20] return __x6__
}