{
  let handler = O.ProxyHandler
  if (= handler null) throw INTRINSIC_TypeError else {}
  app __x0__ = (Type handler)
  assert (= __x0__ Object)
  let target = O.ProxyTarget
  app __x1__ = (GetMethod handler "construct")
  if (is-completion __x1__) if (= __x1__.Type CONST_normal) __x1__ = __x1__.Value else return __x1__ else {}
  let trap = __x1__
  if (= trap undefined) {
    app __x2__ = (IsConstructor target)
    assert (= __x2__ true)
    app __x3__ = (Construct target argumentsList newTarget)
    if (is-completion __x3__) if (= __x3__.Type CONST_normal) __x3__ = __x3__.Value else return __x3__ else {}
    app __x4__ = (WrapCompletion __x3__)
    return __x4__
  } else {}
  app __x5__ = (CreateArrayFromList argumentsList)
  let argArray = __x5__
  app __x6__ = (Call trap handler (new [target, argArray, newTarget]))
  if (is-completion __x6__) if (= __x6__.Type CONST_normal) __x6__ = __x6__.Value else return __x6__ else {}
  let newObj = __x6__
  app __x7__ = (Type newObj)
  if (! (= __x7__ Object)) throw INTRINSIC_TypeError else {}
  app __x8__ = (WrapCompletion newObj)
  return __x8__
}