{
  [0] let handler = O.ProxyHandler
  [1] if (= handler null) {
    app __x0__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_TypeError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
    return __x0__
  } else [0] {}
  [2] app __x1__ = (Type handler)
  [2] assert (= __x1__ Object)
  [3] let target = O.ProxyTarget
  [4] app __x2__ = (GetMethod handler "getPrototypeOf")
  [4] if (is-completion __x2__) if (= __x2__.Type CONST_normal) __x2__ = __x2__.Value else return __x2__ else [0] {}
  [4] let trap = __x2__
  [5] if (= trap undefined) {
    [6] app __x3__ = (target.GetPrototypeOf target)
    [6] if (is-completion __x3__) if (= __x3__.Type CONST_normal) __x3__ = __x3__.Value else return __x3__ else [0] {}
    [6] app __x4__ = (WrapCompletion __x3__)
    [6] return __x4__
  } else [0] {}
  [7] app __x5__ = (Call trap handler (new [target]))
  [7] if (is-completion __x5__) if (= __x5__.Type CONST_normal) __x5__ = __x5__.Value else return __x5__ else [0] {}
  [7] let handlerProto = __x5__
  [8] app __x6__ = (Type handlerProto)
  [8] if (! (|| (= __x6__ Object) (= __x6__ Null))) {
    app __x7__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_TypeError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
    return __x7__
  } else [0] {}
  [9] app __x8__ = (IsExtensible target)
  [9] if (is-completion __x8__) if (= __x8__.Type CONST_normal) __x8__ = __x8__.Value else return __x8__ else [0] {}
  [9] let extensibleTarget = __x8__
  [10] if (= extensibleTarget true) {
    app __x9__ = (WrapCompletion handlerProto)
    return __x9__
  } else [0] {}
  [11] app __x10__ = (target.GetPrototypeOf target)
  [11] if (is-completion __x10__) if (= __x10__.Type CONST_normal) __x10__ = __x10__.Value else return __x10__ else [0] {}
  [11] let targetProto = __x10__
  [12] app __x11__ = (SameValue handlerProto targetProto)
  [12] if (= __x11__ false) {
    app __x12__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_TypeError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
    return __x12__
  } else [0] {}
  [13] app __x13__ = (WrapCompletion handlerProto)
  [13] return __x13__
}