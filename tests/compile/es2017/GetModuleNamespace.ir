{
  [1] let namespace = module.Namespace
  [2] if (= namespace undefined) {
    [3] app __x0__ = (module.GetExportedNames module (new []))
    [3] if (is-completion __x0__) if (= __x0__.Type CONST_normal) __x0__ = __x0__.Value else return __x0__ else [0] {}
    [3] let exportedNames = __x0__
    [4] let unambiguousNames = (new [])
    [5] let __x1__ = exportedNames
    [5] let __x2__ = 0i
    [5] while (< __x2__ __x1__.length) {
      let name = __x1__[__x2__]
      [6] app __x3__ = (module.ResolveExport module name (new []))
      [6] if (is-completion __x3__) if (= __x3__.Type CONST_normal) __x3__ = __x3__.Value else return __x3__ else [0] {}
      [6] let resolution = __x3__
      [7] if (= resolution null) {
        app __x4__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_SyntaxError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
        return __x4__
      } else [0] {}
      [8] if (! (= resolution "ambiguous")) append name -> unambiguousNames else [0] {}
      __x2__ = (+ __x2__ 1i)
    }
    [9] app __x5__ = (ModuleNamespaceCreate module unambiguousNames)
    [9] namespace = __x5__
  } else [0] {}
  [10] app __x6__ = (WrapCompletion namespace)
  [10] return __x6__
}