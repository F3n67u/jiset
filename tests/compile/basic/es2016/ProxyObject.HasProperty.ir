{
  app __x0__ = (IsPropertyKey P)
  assert (= __x0__ true)
  let handler = O.ProxyHandler
  if (= handler null) throw TypeError else {}
  app __x1__ = (Type handler)
  assert (= __x1__ Object)
  let target = O.ProxyTarget
  app __x2__ = (GetMethod handler "has")
  let trap = [? __x2__]
  if (= trap undefined) {
    app __x3__ = (target.HasProperty target P)
    return [? __x3__]
  } else {}
  app __x4__ = (Call trap handler (new [target, P]))
  app __x5__ = (ToBoolean [? __x4__])
  let booleanTrapResult = __x5__
  if (= booleanTrapResult false) {
    app __x6__ = (target.GetOwnProperty target P)
    let targetDesc = [? __x6__]
    if (! (= targetDesc undefined)) {
      if (= targetDesc.Configurable false) throw TypeError else {}
      app __x7__ = (IsExtensible target)
      let extensibleTarget = [? __x7__]
      if (= extensibleTarget false) throw TypeError else {}
    } else {}
  } else {}
  return booleanTrapResult
}