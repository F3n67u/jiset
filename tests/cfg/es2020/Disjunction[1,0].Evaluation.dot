digraph {
  node14574 [shape=cds, label=<<font color="black">1:access __x2__ = (Disjunction &quot;Evaluation&quot;)</font>> color="black" fillcolor="white" style=filled]
  node14570 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node14569 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node14573 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let m1 = __x1__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14572 [shape=cds, label=<<font color="black">0:app __x1__ = (__x0__ direction)</font>> color="black" fillcolor="white" style=filled]
  node14576 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">1:let m2 = __x3__</td></tr>
      <tr><td align="left">2:??? &quot;Return a new Matcher with parameters ( id:{x} , id:{c} ) that captures id:{m1} and id:{m2} and performs the following steps when called : in:{} out:{}&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14571 [shape=cds, label=<<font color="black">0:access __x0__ = (Alternative &quot;Evaluation&quot;)</font>> color="black" fillcolor="white" style=filled]
  node14575 [shape=cds, label=<<font color="black">1:app __x3__ = (__x2__ direction)</font>> color="black" fillcolor="white" style=filled]
  node14574 -> node14575 [ color="black"]
  node14576 -> node14570 [ color="black"]
  node14569 -> node14571 [ color="black"]
  node14571 -> node14572 [ color="black"]
  node14573 -> node14574 [ color="black"]
  node14575 -> node14576 [ color="black"]
  node14572 -> node14573 [ color="black"]
}
