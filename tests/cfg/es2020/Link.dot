digraph {
  node11235 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">3:let result = __x0__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11239 [shape=diamond, label=<<font color="black">(&lt; __x3__ __x2__.length)</font>> color="black" fillcolor="white" style=filled]
  node11232 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node11242 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">13:assert (|| (= module.Status CONST_linked) (= module.Status CONST_evaluated))</td></tr>
      <tr><td align="left">14:assert (= stack.length 0i)</td></tr>
      <tr><td align="left">15:return undefined</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11238 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">5:let __x2__ = stack</td></tr>
      <tr><td align="left">5:let __x3__ = 0i</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11234 [shape=cds, label=<<font color="black">3:app __x0__ = (InnerModuleLinking module stack 0i)</font>> color="black" fillcolor="white" style=filled]
  node11237 [shape=diamond, label=<<font color="black">__x1__</font>> color="black" fillcolor="white" style=filled]
  node11233 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let module = this</td></tr>
      <tr><td align="left">1:assert (! (|| (= module.Status CONST_linking) (= module.Status CONST_evaluating)))</td></tr>
      <tr><td align="left">2:let stack = (new [])</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11240 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let m = __x2__[__x3__]</td></tr>
      <tr><td align="left">6:assert (= m.Status CONST_linking)</td></tr>
      <tr><td align="left">7:m.Status = CONST_unlinked</td></tr>
      <tr><td align="left">8:m.Environment = undefined</td></tr>
      <tr><td align="left">9:m.DFSIndex = undefined</td></tr>
      <tr><td align="left">10:m.DFSAncestorIndex = undefined</td></tr>
      <tr><td align="left">__x3__ = (+ __x3__ 1i)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11231 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node11236 [shape=cds, label=<<font color="black">4:app __x1__ = (IsAbruptCompletion result)</font>> color="black" fillcolor="white" style=filled]
  node11241 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">11:assert (= module.Status CONST_unlinked)</td></tr>
      <tr><td align="left">12:return result</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11237 -> node11238 [label=<<font color="black">true</font>> color="black"]
  node11237 -> node11242 [label=<<font color="black">false</font>> color="black"]
  node11240 -> node11239 [ color="black"]
  node11234 -> node11235 [ color="black"]
  node11241 -> node11242 [ color="black"]
  node11239 -> node11240 [label=<<font color="black">true</font>> color="black"]
  node11239 -> node11241 [label=<<font color="black">false</font>> color="black"]
  node11235 -> node11236 [ color="black"]
  node11233 -> node11234 [ color="black"]
  node11238 -> node11239 [ color="black"]
  node11242 -> node11232 [ color="black"]
  node11231 -> node11233 [ color="black"]
  node11236 -> node11237 [ color="black"]
}
