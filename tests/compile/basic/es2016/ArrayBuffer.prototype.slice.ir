{
  let O = this
  if (! (= (typeof O) Object)) throw TypeError else {}
  if (= O.ArrayBufferData absent) throw TypeError else {}
  app __x0__ = (IsDetachedBuffer O)
  if (= __x0__ true) throw TypeError else {}
  let len = O.ArrayBufferByteLength
  app __x1__ = (ToInteger start)
  let relativeStart = [? __x1__]
  if (< relativeStart 0i) {
    app __x2__ = (max (+ len relativeStart) 0i)
    let first = __x2__
  } else {
    app __x3__ = (min relativeStart len)
    let first = __x3__
  }
  if (= end undefined) let relativeEnd = len else {
    app __x4__ = (ToInteger end)
    let relativeEnd = [? __x4__]
  }
  if (< relativeEnd 0i) {
    app __x5__ = (max (+ len relativeEnd) 0i)
    let final = __x5__
  } else {
    app __x6__ = (min relativeEnd len)
    let final = __x6__
  }
  app __x7__ = (max (- final first) 0i)
  let newLen = __x7__
  app __x8__ = (SpeciesConstructor O INTRINSIC_ArrayBuffer)
  let ctor = [? __x8__]
  app __x9__ = (Construct ctor (new [newLen]))
  let new = [? __x9__]
  if (= new.ArrayBufferData absent) throw TypeError else {}
  app __x10__ = (IsDetachedBuffer new)
  if (= __x10__ true) throw TypeError else {}
  app __x11__ = (SameValue new O)
  if (= __x11__ true) throw TypeError else {}
  if (< new.ArrayBufferByteLength newLen) throw TypeError else {}
  app __x12__ = (IsDetachedBuffer O)
  if (= __x12__ true) throw TypeError else {}
  let fromBuf = O.ArrayBufferData
  let toBuf = new.ArrayBufferData
  app __x13__ = (CopyDataBlockBytes toBuf 0i fromBuf first newLen)
  __x13__
  return new
}