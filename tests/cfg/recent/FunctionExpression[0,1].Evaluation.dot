digraph {
  node8911 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">2:let name = __x1__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node8919 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">7:__x5__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node8907 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let scope = GLOBAL_context.LexicalEnvironment</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node8910 [shape=cds, label=<<font color="black">2:access __x1__ = (BindingIdentifier &quot;StringValue&quot;)</font>> color="black" fillcolor="white" style=filled]
  node8920 [shape=cds, label=<<font color="black">8:app __x6__ = (funcEnv.InitializeBinding funcEnv name closure)</font>> color="black" fillcolor="white" style=filled]
  node8916 [shape=cds, label=<<font color="black">6:app __x4__ = (SetFunctionName closure name)</font>> color="black" fillcolor="white" style=filled]
  node8906 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node8909 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">1:let funcEnv = __x0__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node8905 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node8917 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">6:__x4__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node8914 [shape=cds, label=<<font color="black">5:app __x3__ = (OrdinaryFunctionCreate INTRINSIC_Function_prototype sourceText FormalParameters FunctionBody CONST_nonDASHlexicalDASHthis funcEnv)</font>> color="black" fillcolor="white" style=filled]
  node8912 [shape=cds, label=<<font color="black">3:app __x2__ = (funcEnv.CreateImmutableBinding funcEnv name false)</font>> color="black" fillcolor="white" style=filled]
  node8908 [shape=cds, label=<<font color="black">1:app __x0__ = (NewDeclarativeEnvironment scope)</font>> color="black" fillcolor="white" style=filled]
  node8921 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">8:__x6__</td></tr>
      <tr><td align="left">9:return closure</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node8918 [shape=cds, label=<<font color="black">7:app __x5__ = (MakeConstructor closure)</font>> color="black" fillcolor="white" style=filled]
  node8913 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">3:__x2__</td></tr>
      <tr><td align="left">4:let sourceText = (get-syntax FunctionExpression)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node8915 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">5:let closure = __x3__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node8916 -> node8917 [ color="black"]
  node8910 -> node8911 [ color="black"]
  node8907 -> node8908 [ color="black"]
  node8905 -> node8907 [ color="black"]
  node8917 -> node8918 [ color="black"]
  node8911 -> node8912 [ color="black"]
  node8914 -> node8915 [ color="black"]
  node8909 -> node8910 [ color="black"]
  node8912 -> node8913 [ color="black"]
  node8919 -> node8920 [ color="black"]
  node8918 -> node8919 [ color="black"]
  node8921 -> node8906 [ color="black"]
  node8913 -> node8914 [ color="black"]
  node8908 -> node8909 [ color="black"]
  node8915 -> node8916 [ color="black"]
  node8920 -> node8921 [ color="black"]
}
