["Let", {
  "id": "closure"
}, "be", "a", "new", "Abstract", "Closure", "with", "no", "parameters", "that", "captures", {
  "id": "list"
}, "and", "performs", "the", "following", "steps", "when", "called", ":", {
  "in": null
}, "For", "each", "element", {
  "id": "E"
}, "of", {
  "id": "list"
}, ",", "do", {
  "in": null
}, "Perform", "?", "Yield", "(", {
  "id": "E"
}, ")", ".", {
  "k": 2
}, {
  "out": null
}, {
  "k": 1
}, "Return", {
  "value": "undefined"
}, ".", {
  "k": 3
}, {
  "out": null
}, {
  "k": 0
}, "Let", {
  "id": "iterator"
}, "be", "!", "CreateIteratorFromClosure", "(", {
  "id": "closure"
}, ",", {
  "const": "empty"
}, ",", "%", "IteratorPrototype", "%", ")", ".", {
  "k": 4
}, "Return", "Record", "{", "[", "[", "Iterator", "]", "]", ":", {
  "id": "iterator"
}, ",", "[", "[", "NextMethod", "]", "]", ":", "%", "GeneratorFunction", ".", "prototype", ".", "prototype", ".", "next", "%", ",", "[", "[", "Done", "]", "]", ":", {
  "value": "false"
}, "}", ".", {
  "k": 5
}]