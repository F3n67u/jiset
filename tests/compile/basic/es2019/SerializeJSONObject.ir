{
  if (contains stack value) {
    app __x0__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_TypeError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
    return __x0__
  } else {}
  append value -> stack
  let stepback = indent
  indent = (+ indent gap)
  if (! (= PropertyList undefined)) let K = PropertyList else {
    app __x1__ = (EnumerableOwnPropertyNames value "key")
    if (is-completion __x1__) if (= __x1__.Type CONST_normal) __x1__ = __x1__.Value else return __x1__ else {}
    let K = __x1__
  }
  let partial = (new [])
  let __x2__ = K
  let __x3__ = 0i
  while (< __x3__ __x2__.length) {
    let P = __x2__[__x3__]
    app __x4__ = (SerializeJSONProperty P value)
    if (is-completion __x4__) if (= __x4__.Type CONST_normal) __x4__ = __x4__.Value else return __x4__ else {}
    let strP = __x4__
    if (! (= strP undefined)) {
      app __x5__ = (QuoteJSONString P)
      let member = __x5__
      member = (+ member ":")
      if (! (= gap "")) member = (+ member " ") else {}
      member = (+ member strP)
      append member -> partial
    } else {}
    __x3__ = (+ __x3__ 1i)
  }
  if (= partial.length 0i) let final = "{}" else if (= gap "") {
    ??? "Let id:{properties} be the String value formed by concatenating all the element Strings of id:{partial} with each adjacent pair of Strings separated with the code unit 0x002C ( COMMA ) . A comma is not inserted either before the first String or after the last String ."
    let final = (+ (+ "{" properties) "}")
  } else {
    let separator = (+ (+ "," "\n") indent)
    ??? "Let id:{properties} be the String value formed by concatenating all the element Strings of id:{partial} with each adjacent pair of Strings separated with id:{separator} . The id:{separator} String is not inserted either before the first String or after the last String ."
    let final = (+ (+ (+ (+ (+ (+ "{" "\n") indent) properties) "\n") stepback) "}")
  }
  (pop stack (- stack.length 1i))
  indent = stepback
  app __x6__ = (WrapCompletion final)
  return __x6__
}