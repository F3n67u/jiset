{
  app __x0__ = (Type index)
  assert (= __x0__ Number)
  let buffer = O.ViewedArrayBuffer
  app __x1__ = (IsDetachedBuffer buffer)
  if (= __x1__ true) {
    app __x2__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_TypeError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
    return __x2__
  } else {}
  app __x3__ = (IsValidIntegerIndex O index)
  if (is-completion __x3__) if (= __x3__.Type CONST_normal) __x3__ = __x3__.Value else return __x3__ else {}
  if (= __x3__ false) {
    app __x4__ = (WrapCompletion undefined)
    return __x4__
  } else {}
  let offset = O.ByteOffset
  let arrayTypeName = O.TypedArrayName
  ??? "Let id:{elementSize} be the Element Size value specified in link:{} for id:{arrayTypeName} ."
  let indexedPosition = (+ (* index elementSize) offset)
  ??? "Let id:{elementType} be the Element Type value in link:{} for id:{arrayTypeName} ."
  app __x5__ = (GetValueFromBuffer buffer indexedPosition elementType true CONST_Unordered)
  app __x6__ = (WrapCompletion __x5__)
  return __x6__
}