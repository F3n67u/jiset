{
  let rx = this
  if (! (= (typeof rx) Object)) throw TypeError else {}
  app __x0__ = (ToString string)
  let S = [? __x0__]
  app __x1__ = (SpeciesConstructor rx INTRINSIC_RegExp)
  let C = [? __x1__]
  app __x2__ = (Get rx "flags")
  app __x3__ = (ToString [? __x2__])
  let flags = [? __x3__]
  if (contains flags "u") let unicodeMatching = true else let unicodeMatching = false
  if (contains flags "y") let newFlags = flags else let newFlags = (+ flags "y")
  app __x4__ = (Construct C (new [rx, newFlags]))
  let splitter = [? __x4__]
  app __x5__ = (ArrayCreate 0i)
  let A = [! __x5__]
  let lengthA = 0i
  if (= limit undefined) let lim = (- (** 2.0 32i) 1i) else {
    app __x6__ = (ToUint32 limit)
    let lim = [? __x6__]
  }
  if (= lim 0i) return A else {}
  let size = S.length
  if (= size 0i) {
    app __x7__ = (RegExpExec splitter S)
    let z = [? __x7__]
    if (! (= z null)) return A else {}
    app __x8__ = (CreateDataPropertyOrThrow A "0" S)
    [! __x8__]
    return A
  } else {}
  let p = 0i
  let q = p
  while (< q size) {
    app __x9__ = (Set splitter "lastIndex" q true)
    [? __x9__]
    app __x10__ = (RegExpExec splitter S)
    let z = [? __x10__]
    if (= z null) {
      app __x11__ = (AdvanceStringIndex S q unicodeMatching)
      q = __x11__
    } else {
      app __x12__ = (Get splitter "lastIndex")
      app __x13__ = (ToLength [? __x12__])
      let e = [? __x13__]
      app __x14__ = (min e size)
      e = __x14__
      if (== e p) {
        app __x15__ = (AdvanceStringIndex S q unicodeMatching)
        q = __x15__
      } else {
        let __x16__ = ""
        let __x17__ = p
        while (< __x17__ (+ q 1i)) {
          access __x18__ = (S __x17__)
          __x16__ = (+ __x16__ __x18__)
          __x17__ = (+ __x17__ 1i)
        }
        let T = __x16__
        app __x19__ = (ToString lengthA)
        app __x20__ = (CreateDataPropertyOrThrow A [! __x19__] T)
        [! __x20__]
        lengthA = (+ lengthA 1i)
        if (== lengthA lim) return A else {}
        p = e
        app __x21__ = (LengthOfArrayLike z)
        let numberOfCaptures = [? __x21__]
        app __x22__ = (max (- numberOfCaptures 1i) 0i)
        numberOfCaptures = __x22__
        let i = 1i
        while (! (< numberOfCaptures i)) {
          app __x23__ = (ToString i)
          app __x24__ = (Get z [! __x23__])
          let nextCapture = [? __x24__]
          app __x25__ = (ToString lengthA)
          app __x26__ = (CreateDataPropertyOrThrow A [! __x25__] nextCapture)
          [! __x26__]
          i = (+ i 1i)
          lengthA = (+ lengthA 1i)
          if (== lengthA lim) return A else {}
        }
        q = p
      }
    }
  }
  let __x27__ = ""
  let __x28__ = p
  while (< __x28__ (+ size 1i)) {
    access __x29__ = (S __x28__)
    __x27__ = (+ __x27__ __x29__)
    __x28__ = (+ __x28__ 1i)
  }
  let T = __x27__
  app __x30__ = (ToString lengthA)
  app __x31__ = (CreateDataPropertyOrThrow A [! __x30__] T)
  [! __x31__]
  return A
}