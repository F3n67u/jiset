{
  let queue = generator.AsyncGeneratorQueue
  assert (< 0i queue.length)
  let next = queue[0i]
  let __x0__ = (pop queue 0i)
  let promiseCapability = next.Capability
  app __x1__ = (CreateIterResultObject value done)
  if (is-completion __x1__) if (= __x1__.Type CONST_normal) __x1__ = __x1__.Value else return __x1__ else {}
  let iteratorResult = __x1__
  app __x2__ = (Call promiseCapability.Resolve undefined (new [iteratorResult]))
  if (is-completion __x2__) if (= __x2__.Type CONST_normal) __x2__ = __x2__.Value else return __x2__ else {}
  __x2__
  app __x3__ = (AsyncGeneratorResumeNext generator)
  if (is-completion __x3__) if (= __x3__.Type CONST_normal) __x3__ = __x3__.Value else return __x3__ else {}
  __x3__
  app __x4__ = (WrapCompletion undefined)
  return __x4__
}