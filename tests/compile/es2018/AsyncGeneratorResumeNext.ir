{
  app generator = (GetArgument argumentsList 0i)
  [1] let state = generator.AsyncGeneratorState
  [2] assert (! (= state "executing"))
  [3] if (= state "awaiting-return") {
    app __x0__ = (WrapCompletion undefined)
    return __x0__
  } else [41] {}
  [4] let queue = generator.AsyncGeneratorQueue
  [5] if (= queue.length 0i) {
    app __x1__ = (WrapCompletion undefined)
    return __x1__
  } else [41] {}
  [6] let next = queue[0i]
  [8] let completion = next.Completion
  [32] app __x2__ = (IsAbruptCompletion completion)
  [32] if __x2__ {
    [10] if (= state "suspendedStart") {
      [11] generator.AsyncGeneratorState = "completed"
      [12] state = "completed"
    } else [41] {}
    [13] if (= state "completed") if (= completion.Type CONST_return) {
      [15] generator.AsyncGeneratorState = "awaiting-return"
      [16] app __x3__ = (NewPromiseCapability INTRINSIC_Promise)
      [16] if (is-completion __x3__) if (= __x3__.Type CONST_normal) __x3__ = __x3__.Value else return __x3__ else [41] {}
      [16] let promiseCapability = __x3__
      [17] app __x4__ = (Call promiseCapability.Resolve undefined (new [completion.Value]))
      [17] if (is-completion __x4__) if (= __x4__.Type CONST_normal) __x4__ = __x4__.Value else return __x4__ else [41] {}
      [17] __x4__
      [18] ??? "Let id:{stepsFulfilled} be the algorithm steps defined in link:{} ."
      [19] app __x5__ = (CreateBuiltinFunction stepsFulfilled (new ["Generator"]))
      [19] let onFulfilled = __x5__
      [20] onFulfilled.Generator = generator
      [21] ??? "Let id:{stepsRejected} be the algorithm steps defined in link:{} ."
      [22] app __x6__ = (CreateBuiltinFunction stepsRejected (new ["Generator"]))
      [22] let onRejected = __x6__
      [23] onRejected.Generator = generator
      [24] app __x7__ = (NewPromiseCapability INTRINSIC_Promise)
      [24] if (is-completion __x7__) if (= __x7__.Type CONST_normal) __x7__ = __x7__.Value else return __x7__ else [41] {}
      [24] let throwawayCapability = __x7__
      [25] throwawayCapability.Promise.PromiseIsHandled = true
      [26] app __x8__ = (PerformPromiseThen promiseCapability.Promise onFulfilled onRejected throwawayCapability)
      [26] if (is-completion __x8__) if (= __x8__.Type CONST_normal) __x8__ = __x8__.Value else return __x8__ else [41] {}
      [26] __x8__
      [27] app __x9__ = (WrapCompletion undefined)
      [27] return __x9__
    } else {
      [29] assert (= completion.Type CONST_throw)
      [30] app __x10__ = (AsyncGeneratorReject generator completion.Value)
      [30] if (is-completion __x10__) if (= __x10__.Type CONST_normal) __x10__ = __x10__.Value else return __x10__ else [41] {}
      [30] __x10__
      [31] app __x11__ = (WrapCompletion undefined)
      [31] return __x11__
    } else [41] {}
  } else if (= state "completed") {
    app __x12__ = (AsyncGeneratorResolve generator undefined true)
    if (is-completion __x12__) if (= __x12__.Type CONST_normal) __x12__ = __x12__.Value else return __x12__ else [41] {}
    app __x13__ = (WrapCompletion __x12__)
    return __x13__
  } else [41] {}
  [33] assert (|| (= state "suspendedStart") (= state "suspendedYield"))
  [34] let genContext = generator.AsyncGeneratorContext
  [35] let callerContext = GLOBAL_context
  [36] GLOBAL_context = null
  [37] generator.AsyncGeneratorState = "executing"
  [38] append genContext -> GLOBAL_executionStack
  [38] GLOBAL_context = GLOBAL_executionStack[(- GLOBAL_executionStack.length 1i)]
  [39] ??? "Resume the suspended evaluation of id:{genContext} using id:{completion} as the result of the operation that suspended it . Let id:{result} be the completion record returned by the resumed computation ."
  [42] app __x14__ = (WrapCompletion undefined)
  [42] return __x14__
}