digraph {
  node15009 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">3:assert (= __x1__ Number)</td></tr>
      <tr><td align="left">4:let block = arrayBuffer.ArrayBufferData</td></tr>
      <tr><td align="left">5:assert (! (= block undefined))</td></tr>
      <tr><td align="left">6:??? &quot;If id:{isLittleEndian} is not present , set id:{isLittleEndian} to either value:{true} or value:{false} . The choice is implementation dependent and should be the alternative that is most efficient for the implementation . An implementation must use the same value each time this step is executed and the same value must be used for the corresponding step in the GetValueFromBuffer abstract operation .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15019 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">??? &quot;Let id:{rawBytes} be a List containing the id:{n} - byte binary 2 ' s complement encoding of id:{intValue} . If id:{isLittleEndian} is value:{false} , the bytes are ordered in big endian order . Otherwise , the bytes are ordered in little endian order .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15013 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">??? &quot;Set id:{rawBytes} to a List containing the 8 bytes that are the IEEE 754 - 2008 binary64 format encoding of id:{value} . If id:{isLittleEndian} is value:{false} , the bytes are arranged in big endian order . Otherwise , the bytes are arranged in little endian order . If id:{value} is value:{NaN} , id:{rawValue} may be set to any implementation chosen IEEE 754 - 2008 binary32 format Not - a - Number encoding . An implementation must always choose the same encoding for each implementation distinguishable value:{NaN} value .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15008 [shape=cds, label=<<font color="black">3:app __x1__ = (Type value)</font>> color="black" fillcolor="white" style=filled]
  node15014 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">12:??? &quot;Let id:{n} be the Number value of the Element Size specified in link:{unhandled: table-49} for Element Type id:{type} .&quot;</td></tr>
      <tr><td align="left">13:??? &quot;Let id:{convOp} be the abstract operation named in the Conversion Operation column in link:{unhandled: table-49} for Element Type id:{type} .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15017 [shape=diamond, label=<<font color="black">(! (&lt; intValue 0i))</font>> color="black" fillcolor="white" style=filled]
  node15015 [shape=cds, label=<<font color="black">14:app __x2__ = (convOp value)</font>> color="black" fillcolor="white" style=filled]
  node15020 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">19:??? &quot;Store the individual bytes of id:{rawBytes} into id:{block} , in order , starting at id:{block} [ id:{byteIndex} ] .&quot;</td></tr>
      <tr><td align="left">20:return undefined</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15016 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">14:let intValue = __x2__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15012 [shape=diamond, label=<<font color="black">(= type &quot;Float64&quot;)</font>> color="black" fillcolor="white" style=filled]
  node15018 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">??? &quot;Let id:{rawBytes} be a List containing the id:{n} - byte binary encoding of id:{intValue} . If id:{isLittleEndian} is value:{false} , the bytes are ordered in big endian order . Otherwise , the bytes are ordered in little endian order .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15005 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node15007 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:assert (= __x0__ false)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15010 [shape=diamond, label=<<font color="black">(= type &quot;Float32&quot;)</font>> color="black" fillcolor="white" style=filled]
  node15011 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">??? &quot;Set id:{rawBytes} to a List containing the 4 bytes that are the result of converting id:{value} to IEEE 754 - 2008 binary32 format using &ldquo; Round to nearest , ties to even &rdquo; rounding mode . If id:{isLittleEndian} is value:{false} , the bytes are arranged in big endian order . Otherwise , the bytes are arranged in little endian order . If id:{value} is value:{NaN} , id:{rawValue} may be set to any implementation chosen IEEE 754 - 2008 binary64 format Not - a - Number encoding . An implementation must always choose the same encoding for each implementation distinguishable value:{NaN} value .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15004 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node15006 [shape=cds, label=<<font color="black">0:app __x0__ = (IsDetachedBuffer arrayBuffer)</font>> color="black" fillcolor="white" style=filled]
  node15017 -> node15018 [label=<<font color="black">true</font>> color="black"]
  node15017 -> node15019 [label=<<font color="black">false</font>> color="black"]
  node15009 -> node15010 [ color="black"]
  node15014 -> node15015 [ color="black"]
  node15006 -> node15007 [ color="black"]
  node15018 -> node15020 [ color="black"]
  node15004 -> node15006 [ color="black"]
  node15012 -> node15013 [label=<<font color="black">true</font>> color="black"]
  node15012 -> node15014 [label=<<font color="black">false</font>> color="black"]
  node15019 -> node15020 [ color="black"]
  node15013 -> node15020 [ color="black"]
  node15015 -> node15016 [ color="black"]
  node15007 -> node15008 [ color="black"]
  node15011 -> node15020 [ color="black"]
  node15020 -> node15005 [ color="black"]
  node15008 -> node15009 [ color="black"]
  node15016 -> node15017 [ color="black"]
  node15010 -> node15011 [label=<<font color="black">true</font>> color="black"]
  node15010 -> node15012 [label=<<font color="black">false</font>> color="black"]
}
