digraph {
  node8335 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">11:__x2__</td></tr>
      <tr><td align="left">12:return (new Record(&quot;Key&quot; -&gt; propKey, &quot;Closure&quot; -&gt; closure))</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node8321 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node8326 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let strict = true</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node8332 [shape=cds, label=<<font color="black">10:app __x1__ = (FunctionCreate kind UniqueFormalParameters FunctionBody scope strict prototype)</font>> color="black" fillcolor="white" style=filled]
  node8323 [shape=cds, label=<<font color="black">0:access __x0__ = (PropertyName &quot;Evaluation&quot;)</font>> color="black" fillcolor="white" style=filled]
  node8327 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let strict = false</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node8331 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">8:let kind = CONST_Method</td></tr>
      <tr><td align="left">9:let prototype = INTRINSIC_FunctionPrototype</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node8324 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let propKey = __x0__</td></tr>
      <tr><td align="left">1:[? propKey]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node8328 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">3:let scope = GLOBAL_context.LexicalEnvironment</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node8325 [shape=diamond, label=<<font color="black">true</font>> color="black" fillcolor="white" style=filled]
  node8330 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">5:let kind = CONST_Normal</td></tr>
      <tr><td align="left">6:let prototype = functionPrototype</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node8329 [shape=diamond, label=<<font color="black">(! (= functionPrototype absent))</font>> color="black" fillcolor="white" style=filled]
  node8334 [shape=cds, label=<<font color="black">11:app __x2__ = (MakeMethod closure object)</font>> color="black" fillcolor="white" style=filled]
  node8333 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">10:let closure = __x1__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node8322 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node8329 -> node8330 [label=<<font color="black">true</font>> color="black"]
  node8329 -> node8331 [label=<<font color="black">false</font>> color="black"]
  node8332 -> node8333 [ color="black"]
  node8326 -> node8328 [ color="black"]
  node8325 -> node8326 [label=<<font color="black">true</font>> color="black"]
  node8325 -> node8327 [label=<<font color="black">false</font>> color="black"]
  node8334 -> node8335 [ color="black"]
  node8330 -> node8332 [ color="black"]
  node8328 -> node8329 [ color="black"]
  node8323 -> node8324 [ color="black"]
  node8324 -> node8325 [ color="black"]
  node8331 -> node8332 [ color="black"]
  node8335 -> node8322 [ color="black"]
  node8333 -> node8334 [ color="black"]
  node8321 -> node8323 [ color="black"]
  node8327 -> node8328 [ color="black"]
}
