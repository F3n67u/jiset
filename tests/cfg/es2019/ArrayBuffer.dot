digraph {
  node16427 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16424 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node16431 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">2:return [? __x1__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16428 [shape=cds, label=<<font color="black">1:app __x0__ = (ToIndex length)</font>> color="black" fillcolor="white" style=filled]
  node16423 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node16425 [shape=cds, label=<<font color="black">app length = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node16429 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">1:let byteLength = [? __x0__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16426 [shape=diamond, label=<<font color="black">(= NewTarget undefined)</font>> color="black" fillcolor="white" style=filled]
  node16430 [shape=cds, label=<<font color="black">2:app __x1__ = (AllocateArrayBuffer NewTarget byteLength)</font>> color="black" fillcolor="white" style=filled]
  node16428 -> node16429 [ color="black"]
  node16429 -> node16430 [ color="black"]
  node16423 -> node16425 [ color="black"]
  node16430 -> node16431 [ color="black"]
  node16431 -> node16424 [ color="black"]
  node16426 -> node16427 [label=<<font color="black">true</font>> color="black"]
  node16426 -> node16428 [label=<<font color="black">false</font>> color="black"]
  node16425 -> node16426 [ color="black"]
  node16427 -> node16428 [ color="black"]
}
