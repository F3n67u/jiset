digraph {
  node12116 [shape=cds, label=<<font color="black">app radix = (GetArgument argumentsList 1i)</font>> color="black" fillcolor="white" style=filled]
  node12129 [shape=diamond, label=<<font color="black">(= stripPrefix true)</font>> color="black" fillcolor="white" style=filled]
  node12126 [shape=diamond, label=<<font color="black">(! (== R 16i))</font>> color="black" fillcolor="white" style=filled]
  node12141 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return -0.0</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12122 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">5:let R = [? __x2__]</td></tr>
      <tr><td align="left">6:let stripPrefix = true</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12137 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return NaN</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12133 [shape=cds, label=<<font color="black">access __x5__ = (S __x4__)</font>> color="black" fillcolor="white" style=filled]
  node12115 [shape=cds, label=<<font color="black">app string = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node12142 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">22:return 0i</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12138 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">19:??? &quot;Let id:{mathInt} be the integer value that is represented by id:{Z} in radix - id:{R} notation , using the letters &lt; b &gt; A &lt; / b &gt; - &lt; b &gt; Z &lt; / b &gt; and &lt; b &gt; a &lt; / b &gt; - &lt; b &gt; z &lt; / b &gt; for digits with values 10 through 35 . ( However , if id:{R} is 10 and id:{Z} contains more than 20 significant digits , every significant digit after the 20th may be replaced by a 0 digit , at the option of the implementation ; and if id:{R} is not 2 , 4 , 8 , 10 , 16 , or 32 , then id:{mathInt} may be an implementation - approximated value representing the integer value that is represented by id:{Z} in radix - id:{R} notation . )&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12123 [shape=diamond, label=<<font color="black">(! (== R 0i))</font>> color="black" fillcolor="white" style=filled]
  node12119 [shape=cds, label=<<font color="black">1:app __x1__ = (TrimString inputString CONST_start)</font>> color="black" fillcolor="white" style=filled]
  node12143 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">23:return (* sign mathInt)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12128 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">R = 10i</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12114 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node12135 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">17:let Z = __x3__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12139 [shape=diamond, label=<<font color="black">(== mathInt 0i)</font>> color="black" fillcolor="white" style=filled]
  node12124 [shape=diamond, label=<<font color="black">(|| (&lt; R 2i) (&lt; 36i R))</font>> color="black" fillcolor="white" style=filled]
  node12130 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">??? &quot;If the length of id:{S} is at least 2 and the first two code units of id:{S} are either value:{\&quot;0x\&quot;} or value:{\&quot;0X\&quot;} , then in:{} out:{}&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12113 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node12125 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return NaN</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12121 [shape=cds, label=<<font color="black">5:app __x2__ = (ToInt32 radix)</font>> color="black" fillcolor="white" style=filled]
  node12134 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">__x3__ = (+ __x3__ __x5__)</td></tr>
      <tr><td align="left">__x4__ = (+ __x4__ 1i)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12132 [shape=diamond, label=<<font color="black">(&lt; __x4__ (+ end 1i))</font>> color="black" fillcolor="white" style=filled]
  node12127 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">stripPrefix = false</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12131 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">16:??? &quot;If id:{S} contains a code unit that is not a radix - id:{R} digit , let id:{end} be the index within id:{S} of the first such code unit ; otherwise , let id:{end} be the length of id:{S} .&quot;</td></tr>
      <tr><td align="left">17:let __x3__ = &quot;&quot;</td></tr>
      <tr><td align="left">17:let __x4__ = 0i</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12136 [shape=diamond, label=<<font color="black">(= Z.length 0i)</font>> color="black" fillcolor="white" style=filled]
  node12120 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">1:let S = [! __x1__]</td></tr>
      <tr><td align="left">2:let sign = 1i</td></tr>
      <tr><td align="left">3:??? &quot;If id:{S} is not empty and the first code unit of id:{S} is the code unit 0x002D ( HYPHEN - MINUS ) , set id:{sign} to - 1 .&quot;</td></tr>
      <tr><td align="left">4:??? &quot;If id:{S} is not empty and the first code unit of id:{S} is the code unit 0x002B ( PLUS SIGN ) or the code unit 0x002D ( HYPHEN - MINUS ) , remove the first code unit from id:{S} .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12118 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let inputString = [? __x0__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12117 [shape=cds, label=<<font color="black">0:app __x0__ = (ToString string)</font>> color="black" fillcolor="white" style=filled]
  node12140 [shape=diamond, label=<<font color="black">(== sign -1i)</font>> color="black" fillcolor="white" style=filled]
  node12128 -> node12129 [ color="black"]
  node12115 -> node12116 [ color="black"]
  node12131 -> node12132 [ color="black"]
  node12141 -> node12142 [ color="black"]
  node12140 -> node12141 [label=<<font color="black">true</font>> color="black"]
  node12140 -> node12142 [label=<<font color="black">false</font>> color="black"]
  node12135 -> node12136 [ color="black"]
  node12143 -> node12114 [ color="black"]
  node12126 -> node12127 [label=<<font color="black">true</font>> color="black"]
  node12126 -> node12129 [label=<<font color="black">false</font>> color="black"]
  node12139 -> node12140 [label=<<font color="black">true</font>> color="black"]
  node12139 -> node12143 [label=<<font color="black">false</font>> color="black"]
  node12119 -> node12120 [ color="black"]
  node12113 -> node12115 [ color="black"]
  node12132 -> node12133 [label=<<font color="black">true</font>> color="black"]
  node12132 -> node12135 [label=<<font color="black">false</font>> color="black"]
  node12117 -> node12118 [ color="black"]
  node12120 -> node12121 [ color="black"]
  node12124 -> node12125 [label=<<font color="black">true</font>> color="black"]
  node12124 -> node12126 [label=<<font color="black">false</font>> color="black"]
  node12122 -> node12123 [ color="black"]
  node12133 -> node12134 [ color="black"]
  node12138 -> node12139 [ color="black"]
  node12130 -> node12131 [ color="black"]
  node12129 -> node12130 [label=<<font color="black">true</font>> color="black"]
  node12129 -> node12131 [label=<<font color="black">false</font>> color="black"]
  node12134 -> node12132 [ color="black"]
  node12118 -> node12119 [ color="black"]
  node12125 -> node12126 [ color="black"]
  node12116 -> node12117 [ color="black"]
  node12136 -> node12137 [label=<<font color="black">true</font>> color="black"]
  node12136 -> node12138 [label=<<font color="black">false</font>> color="black"]
  node12121 -> node12122 [ color="black"]
  node12137 -> node12138 [ color="black"]
  node12127 -> node12129 [ color="black"]
  node12142 -> node12143 [ color="black"]
  node12123 -> node12124 [label=<<font color="black">true</font>> color="black"]
  node12123 -> node12128 [label=<<font color="black">false</font>> color="black"]
}
