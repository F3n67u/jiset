digraph {
  node19640 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">11:[! __x4__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node19636 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">4:[! __x3__]</td></tr>
      <tr><td align="left">5:return promiseCapability.Promise</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node19626 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node19629 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let promiseCapability = [! __x0__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node19639 [shape=cds, label=<<font color="black">11:app __x4__ = (AsyncGeneratorResumeNext generator)</font>> color="black" fillcolor="white" style=filled]
  node19635 [shape=cds, label=<<font color="black">4:app __x3__ = (Call promiseCapability.Reject undefined (new [badGeneratorError]))</font>> color="black" fillcolor="white" style=filled]
  node19638 [shape=diamond, label=<<font color="black">(! (= state CONST_executing))</font>> color="black" fillcolor="white" style=filled]
  node19634 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">3:let badGeneratorError = ??? &quot;TypeError&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node19631 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">1:let check = __x1__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node19641 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">12:return promiseCapability.Promise</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node19628 [shape=cds, label=<<font color="black">0:app __x0__ = (NewPromiseCapability INTRINSIC_Promise)</font>> color="black" fillcolor="white" style=filled]
  node19633 [shape=diamond, label=<<font color="black">__x2__</font>> color="black" fillcolor="white" style=filled]
  node19637 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">6:let queue = generator.AsyncGeneratorQueue</td></tr>
      <tr><td align="left">7:let request = (new AsyncGeneratorRequest(&quot;Completion&quot; -&gt; completion, &quot;Capability&quot; -&gt; promiseCapability))</td></tr>
      <tr><td align="left">8:append request -&gt; queue</td></tr>
      <tr><td align="left">9:let state = generator.AsyncGeneratorState</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node19632 [shape=cds, label=<<font color="black">2:app __x2__ = (IsAbruptCompletion check)</font>> color="black" fillcolor="white" style=filled]
  node19630 [shape=cds, label=<<font color="black">1:app __x1__ = (AsyncGeneratorValidate generator generatorBrand)</font>> color="black" fillcolor="white" style=filled]
  node19627 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node19634 -> node19635 [ color="black"]
  node19629 -> node19630 [ color="black"]
  node19638 -> node19639 [label=<<font color="black">true</font>> color="black"]
  node19638 -> node19641 [label=<<font color="black">false</font>> color="black"]
  node19631 -> node19632 [ color="black"]
  node19635 -> node19636 [ color="black"]
  node19637 -> node19638 [ color="black"]
  node19640 -> node19641 [ color="black"]
  node19641 -> node19627 [ color="black"]
  node19632 -> node19633 [ color="black"]
  node19639 -> node19640 [ color="black"]
  node19626 -> node19628 [ color="black"]
  node19630 -> node19631 [ color="black"]
  node19633 -> node19634 [label=<<font color="black">true</font>> color="black"]
  node19633 -> node19637 [label=<<font color="black">false</font>> color="black"]
  node19628 -> node19629 [ color="black"]
  node19636 -> node19637 [ color="black"]
}
