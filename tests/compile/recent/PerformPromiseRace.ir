{
  [0] app __x0__ = (IsConstructor constructor)
  [0] assert (= __x0__ true)
  [1] app __x1__ = (IsCallable promiseResolve)
  [1] assert (= __x1__ true)
  [2] while true {
    [3] app __x2__ = (IteratorStep iteratorRecord)
    [3] let next = __x2__
    [4] app __x3__ = (IsAbruptCompletion next)
    [4] if __x3__ iteratorRecord.Done = true else [10] {}
    [5] if (is-completion next) if (= next.Type CONST_normal) next = next.Value else return next else [10] {}
    [5] next
    [6] if (= next false) {
      [7] iteratorRecord.Done = true
      [8] app __x4__ = (WrapCompletion resultCapability.Promise)
      [8] return __x4__
    } else [10] {}
    [9] app __x5__ = (IteratorValue next)
    [9] let nextValue = __x5__
    [10] app __x6__ = (IsAbruptCompletion nextValue)
    [10] if __x6__ iteratorRecord.Done = true else [10] {}
    [11] if (is-completion nextValue) if (= nextValue.Type CONST_normal) nextValue = nextValue.Value else return nextValue else [10] {}
    [11] nextValue
    [12] app __x7__ = (Call promiseResolve constructor (new [nextValue]))
    [12] if (is-completion __x7__) if (= __x7__.Type CONST_normal) __x7__ = __x7__.Value else return __x7__ else [10] {}
    [12] let nextPromise = __x7__
    [13] app __x8__ = (Invoke nextPromise "then" (new [resultCapability.Resolve, resultCapability.Reject]))
    [13] if (is-completion __x8__) if (= __x8__.Type CONST_normal) __x8__ = __x8__.Value else return __x8__ else [10] {}
    [13] __x8__
  }
}