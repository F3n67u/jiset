{
  if (= resolveSet absent) resolveSet = (new []) else {}
  let __x0__ = resolveSet
  let __x1__ = 0i
  while (< __x1__ __x0__.length) {
    let r = __x0__[__x1__]
    let __x2__ = true
    __x2__ = (= module r.Module)
    if __x2__ {
      app __x3__ = (SameValue exportName r.ExportName)
      __x2__ = (= __x3__ true)
    } else {}
    if __x2__ return null else {}
    __x1__ = (+ __x1__ 1i)
  }
  append (new Record("Module" -> module, "ExportName" -> exportName)) -> resolveSet
  let __x4__ = module.LocalExportEntries
  let __x5__ = 0i
  while (< __x5__ __x4__.length) {
    let e = __x4__[__x5__]
    app __x6__ = (SameValue exportName e.ExportName)
    if (= __x6__ true) return (new ResolvedBindingRecord("Module" -> module, "BindingName" -> e.LocalName)) else {}
    __x5__ = (+ __x5__ 1i)
  }
  let __x7__ = module.IndirectExportEntries
  let __x8__ = 0i
  while (< __x8__ __x7__.length) {
    let e = __x7__[__x8__]
    app __x9__ = (SameValue exportName e.ExportName)
    if (= __x9__ true) {
      app __x10__ = (HostResolveImportedModule module e.ModuleRequest)
      let importedModule = [? __x10__]
      if (= e.ImportName "*") return (new ResolvedBindingRecord("Module" -> importedModule, "BindingName" -> "*namespace*")) else {
        app __x11__ = (importedModule.ResolveExport importedModule e.ImportName resolveSet)
        return __x11__
      }
    } else {}
    __x8__ = (+ __x8__ 1i)
  }
  app __x12__ = (SameValue exportName "default")
  if (= __x12__ true) return null else {}
  let starResolution = null
  let __x13__ = module.StarExportEntries
  let __x14__ = 0i
  while (< __x14__ __x13__.length) {
    let e = __x13__[__x14__]
    app __x15__ = (HostResolveImportedModule module e.ModuleRequest)
    let importedModule = [? __x15__]
    app __x16__ = (importedModule.ResolveExport importedModule exportName resolveSet)
    let resolution = [? __x16__]
    if (= resolution "ambiguous") return "ambiguous" else {}
    if (! (= resolution null)) {
      assert (is-instance-of resolution ResolvedBindingRecord)
      if (= starResolution null) starResolution = resolution else {
        let __x17__ = true
        __x17__ = (! (= resolution.Module starResolution.Module))
        if __x17__ {} else {
          app __x18__ = (SameValue resolution.BindingName starResolution.BindingName)
          __x17__ = (= __x18__ false)
        }
        if __x17__ return "ambiguous" else {}
      }
    } else {}
    __x14__ = (+ __x14__ 1i)
  }
  return starResolution
}