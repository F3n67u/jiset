{
  access __x0__ = (GLOBAL_context "LexicalEnvironment")
  let scope = __x0__
  let sourceText = (get-syntax AsyncGeneratorExpression)
  ??? "Let id:{closure} be ! OrdinaryFunctionCreate ( % AsyncGeneratorFunction . prototype % , id:{sourceText} , nt:{FormalParameters} , nt:{AsyncGeneratorBody} , const:{non-lexical-this} , id:{scope} ) ."
  app __x1__ = (SetFunctionName closure name)
  __x1__
  ??? "Let id:{prototype} be ! OrdinaryObjectCreate ( % AsyncGeneratorFunction . prototype . prototype % ) ."
  app __x2__ = (DefinePropertyOrThrow closure "prototype" (new PropertyDescriptor("Value" -> prototype, "Writable" -> true, "Enumerable" -> false, "Configurable" -> false)))
  if (is-completion __x2__) if (= __x2__.Type CONST_normal) __x2__ = __x2__.Value else return __x2__ else {}
  __x2__
  app __x3__ = (WrapCompletion closure)
  return __x3__
}