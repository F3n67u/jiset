digraph {
  node14937 [shape=cds, label=<<font color="black">0:app __x1__ = (__x0__ direction)</font>> color="black" fillcolor="white" style=filled]
  node14936 [shape=cds, label=<<font color="black">0:access __x0__ = (Atom &quot;Evaluation&quot;)</font>> color="black" fillcolor="white" style=filled]
  node14934 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node14938 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let m = __x1__</td></tr>
      <tr><td align="left">1:??? &quot;Evaluate nt:{Quantifier} to obtain the three results : a non - negative integer id:{min} , a non - negative integer ( or + &infin; ) id:{max} , and Boolean id:{greedy} .&quot;</td></tr>
      <tr><td align="left">2:assert (! (&lt; max min))</td></tr>
      <tr><td align="left">3:??? &quot;Let id:{parenIndex} be the number of left - capturing parentheses in the entire regular expression that occur to the left of this nt:{Term} . This is the total number of grammar:{Atom4, [GroupSpecifier, Disjunction]} Parse Nodes prior to or enclosing this nt:{Term} .&quot;</td></tr>
      <tr><td align="left">4:??? &quot;Let id:{parenCount} be the number of left - capturing parentheses in nt:{Atom} . This is the total number of grammar:{Atom4, [GroupSpecifier, Disjunction]} Parse Nodes enclosed by nt:{Atom} .&quot;</td></tr>
      <tr><td align="left">5:??? &quot;Return a new Matcher with parameters ( id:{x} , id:{c} ) that captures id:{m} , id:{min} , id:{max} , id:{greedy} , id:{parenIndex} , and id:{parenCount} and performs the following steps when called : in:{} out:{}&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14935 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node14934 -> node14936 [ color="black"]
  node14936 -> node14937 [ color="black"]
  node14937 -> node14938 [ color="black"]
  node14938 -> node14935 [ color="black"]
}
