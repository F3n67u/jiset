{
  app iteratorRecord = (GetArgument argumentsList 0i)
  app constructor = (GetArgument argumentsList 1i)
  app resultCapability = (GetArgument argumentsList 2i)
  [0] app __x0__ = (IsConstructor constructor)
  [0] assert (= __x0__ true)
  [2] app __x1__ = (Get constructor "resolve")
  [2] if (is-completion __x1__) if (= __x1__.Type CONST_normal) __x1__ = __x1__.Value else return __x1__ else [1] {}
  [2] let promiseResolve = __x1__
  [3] app __x2__ = (IsCallable promiseResolve)
  [3] if (is-completion __x2__) if (= __x2__.Type CONST_normal) __x2__ = __x2__.Value else return __x2__ else [1] {}
  [3] if (= __x2__ false) {
    app __x3__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_TypeError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
    return __x3__
  } else [1] {}
  [4] while true {
    [5] app __x4__ = (IteratorStep iteratorRecord)
    [5] let next = __x4__
    [6] app __x5__ = (IsAbruptCompletion next)
    [6] if __x5__ iteratorRecord.Done = true else [1] {}
    [7] if (is-completion next) if (= next.Type CONST_normal) next = next.Value else return next else [1] {}
    [7] next
    [8] if (= next false) {
      [9] iteratorRecord.Done = true
      [10] app __x6__ = (WrapCompletion resultCapability.Promise)
      [10] return __x6__
    } else [1] {}
    [11] app __x7__ = (IteratorValue next)
    [11] let nextValue = __x7__
    [12] app __x8__ = (IsAbruptCompletion nextValue)
    [12] if __x8__ iteratorRecord.Done = true else [1] {}
    [13] if (is-completion nextValue) if (= nextValue.Type CONST_normal) nextValue = nextValue.Value else return nextValue else [1] {}
    [13] nextValue
    [14] app __x9__ = (Call promiseResolve constructor (new [nextValue]))
    [14] if (is-completion __x9__) if (= __x9__.Type CONST_normal) __x9__ = __x9__.Value else return __x9__ else [1] {}
    [14] let nextPromise = __x9__
    [15] app __x10__ = (Invoke nextPromise "then" (new [resultCapability.Resolve, resultCapability.Reject]))
    [15] if (is-completion __x10__) if (= __x10__.Type CONST_normal) __x10__ = __x10__.Value else return __x10__ else [1] {}
    [15] __x10__
  }
}