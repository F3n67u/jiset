digraph {
  node14729 [shape=cds, label=<<font color="black">0:app __x1__ = (__x0__ direction)</font>> color="black" fillcolor="white" style=filled]
  node14726 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node14730 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let m = __x1__</td></tr>
      <tr><td align="left">1:??? &quot;Let id:{parenIndex} be the number of left - capturing parentheses in the entire regular expression that occur to the left of this nt:{Atom} . This is the total number of grammar:{Atom4, [GroupSpecifier, Disjunction]} Parse Nodes prior to or enclosing this nt:{Atom} .&quot;</td></tr>
      <tr><td align="left">2:??? &quot;Return a new Matcher with parameters ( id:{x} , id:{c} ) that captures id:{direction} , id:{m} , and id:{parenIndex} and performs the following steps when called : in:{} out:{}&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14728 [shape=cds, label=<<font color="black">0:access __x0__ = (Disjunction &quot;Evaluation&quot;)</font>> color="black" fillcolor="white" style=filled]
  node14727 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node14726 -> node14728 [ color="black"]
  node14728 -> node14729 [ color="black"]
  node14729 -> node14730 [ color="black"]
  node14730 -> node14727 [ color="black"]
}
