digraph {
  node10271 [shape=diamond, label=<<font color="black">__x1__</font>> color="black" fillcolor="white" style=filled]
  node10273 [shape=diamond, label=<<font color="black">(&lt; __x3__ __x2__.length)</font>> color="black" fillcolor="white" style=filled]
  node10266 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node10270 [shape=cds, label=<<font color="black">4:app __x1__ = (IsAbruptCompletion result)</font>> color="black" fillcolor="white" style=filled]
  node10274 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let m = __x2__[__x3__]</td></tr>
      <tr><td align="left">6:assert (= m.Status &quot;instantiating&quot;)</td></tr>
      <tr><td align="left">7:m.Status = &quot;uninstantiated&quot;</td></tr>
      <tr><td align="left">8:m.Environment = undefined</td></tr>
      <tr><td align="left">9:m.DFSIndex = undefined</td></tr>
      <tr><td align="left">10:m.DFSAncestorIndex = undefined</td></tr>
      <tr><td align="left">__x3__ = (+ __x3__ 1i)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10265 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node10275 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">11:assert (= module.Status &quot;uninstantiated&quot;)</td></tr>
      <tr><td align="left">12:return result</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10269 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">3:let result = __x0__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10268 [shape=cds, label=<<font color="black">3:app __x0__ = (InnerModuleInstantiation module stack 0i)</font>> color="black" fillcolor="white" style=filled]
  node10276 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">13:assert (|| (= module.Status &quot;instantiated&quot;) (= module.Status &quot;evaluated&quot;))</td></tr>
      <tr><td align="left">14:assert (= stack.length 0i)</td></tr>
      <tr><td align="left">15:return undefined</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10267 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let module = this</td></tr>
      <tr><td align="left">1:assert (! (|| (= module.Status &quot;instantiating&quot;) (= module.Status &quot;evaluating&quot;)))</td></tr>
      <tr><td align="left">2:let stack = (new [])</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10272 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">5:let __x2__ = stack</td></tr>
      <tr><td align="left">5:let __x3__ = 0i</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10268 -> node10269 [ color="black"]
  node10272 -> node10273 [ color="black"]
  node10275 -> node10276 [ color="black"]
  node10271 -> node10272 [label=<<font color="black">true</font>> color="black"]
  node10271 -> node10276 [label=<<font color="black">false</font>> color="black"]
  node10274 -> node10273 [ color="black"]
  node10267 -> node10268 [ color="black"]
  node10276 -> node10266 [ color="black"]
  node10270 -> node10271 [ color="black"]
  node10269 -> node10270 [ color="black"]
  node10265 -> node10267 [ color="black"]
  node10273 -> node10274 [label=<<font color="black">true</font>> color="black"]
  node10273 -> node10275 [label=<<font color="black">false</font>> color="black"]
}
