{
  let strLen = string.length
  let R = ""
  let k = 0i
  while true {
    if (= k strLen) {
      app __x0__ = (WrapCompletion R)
      return __x0__
    } else {}
    let C = string[k]
    if (! (= C INTRINSIC_)) let S = C else {
      let start = k
      if (! (< (+ k 2i) strLen)) {
        app __x1__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_URIError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
        return __x1__
      } else {}
      ??? "If the code units at index ( id:{k} + 1 ) and ( id:{k} + 2 ) within id:{string} do not represent hexadecimal digits , throw a value:{URIError} exception ."
      ??? "Let id:{B} be the 8 - bit value represented by the two hexadecimal digits at index ( id:{k} + 1 ) and ( id:{k} + 2 ) ."
      k = (+ k 2i)
      ??? "If the most significant bit in id:{B} is 0 , then in:{} out:{}"
      ??? "Else the most significant bit in id:{B} is 1 , in:{} out:{}"
    }
    let R = (+ R S)
    k = (+ k 1i)
  }
}