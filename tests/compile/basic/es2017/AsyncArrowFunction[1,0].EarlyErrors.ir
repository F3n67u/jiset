{
  access __x0__ = (CoverCallExpressionAndAsyncArrowHead "Contains")
  app __x1__ = (__x0__ "YieldExpression")
  if (= __x1__ true) {
    app __x2__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_SyntaxError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
    return __x2__
  } else {
    app __x3__ = (NormalCompletion undefined)
    return __x3__
  }
  access __x4__ = (CoverCallExpressionAndAsyncArrowHead "Contains")
  app __x5__ = (__x4__ "AwaitExpression")
  if (= __x5__ true) {
    app __x6__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_SyntaxError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
    return __x6__
  } else {
    app __x7__ = (NormalCompletion undefined)
    return __x7__
  }
  ??? "It is a Syntax Error if the lexical token sequence matched by nt:{CoverCallExpressionAndAsyncArrowHead} cannot be parsed with no tokens left over using nt:{AsyncArrowHead} as the goal symbol ."
  access __x8__ = (CoverCallExpressionAndAsyncArrowHead "BoundNames")
  access __x9__ = (AsyncConciseBody "LexicallyDeclaredNames")
  let __x10__ = __x8__
  let __x11__ = __x9__
  let __x12__ = 0i
  let __x13__ = 0i
  let __x14__ = false
  while (< __x12__ __x10__.length) {
    __x13__ = 0i
    while (< __x13__ __x11__.length) if (= __x10__[__x12__] __x11__[__x13__]) __x14__ = true else {}
  }
  if __x14__ {
    app __x15__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_SyntaxError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
    return __x15__
  } else {
    app __x16__ = (NormalCompletion undefined)
    return __x16__
  }
  let __x17__ = true
  access __x18__ = (AsyncConciseBody "ContainsUseStrict")
  __x17__ = (= __x18__ true)
  if __x17__ {
    access __x19__ = (CoverCallExpressionAndAsyncArrowHead "IsSimpleParameterList")
    __x17__ = (= __x19__ false)
  } else {}
  if __x17__ {
    app __x20__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_SyntaxError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
    return __x20__
  } else {
    app __x21__ = (NormalCompletion undefined)
    return __x21__
  }
  ??? "All Early Error rules for nt:{AsyncArrowHead} and its derived productions apply to CoveredAsyncArrowHead of nt:{CoverCallExpressionAndAsyncArrowHead} ."
}