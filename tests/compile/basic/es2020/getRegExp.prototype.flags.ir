{
  let R = this
  if (! (= (typeof R) Object)) throw TypeError else {}
  let result = ""
  app __x0__ = (Get R "global")
  app __x1__ = (ToBoolean [? __x0__])
  let global = [! __x1__]
  if (= global true) let result = (+ result "g") else {}
  app __x2__ = (Get R "ignoreCase")
  app __x3__ = (ToBoolean [? __x2__])
  let ignoreCase = [! __x3__]
  if (= ignoreCase true) let result = (+ result "i") else {}
  app __x4__ = (Get R "multiline")
  app __x5__ = (ToBoolean [? __x4__])
  let multiline = [! __x5__]
  if (= multiline true) let result = (+ result "m") else {}
  app __x6__ = (Get R "dotAll")
  app __x7__ = (ToBoolean [? __x6__])
  let dotAll = [! __x7__]
  if (= dotAll true) let result = (+ result "s") else {}
  app __x8__ = (Get R "unicode")
  app __x9__ = (ToBoolean [? __x8__])
  let unicode = [! __x9__]
  if (= unicode true) let result = (+ result "u") else {}
  app __x10__ = (Get R "sticky")
  app __x11__ = (ToBoolean [? __x10__])
  let sticky = [! __x11__]
  if (= sticky true) let result = (+ result "y") else {}
  return result
}