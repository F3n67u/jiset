digraph {
  node12212 [shape=diamond, label=<<font color="black">(! (== f 0i))</font>> color="black" fillcolor="white" style=filled]
  node12197 [shape=cds, label=<<font color="black">0:app __x0__ = (thisNumberValue this)</font>> color="black" fillcolor="white" style=filled]
  node12204 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return &quot;NaN&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12217 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">21:return (+ s m)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12215 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">16:??? &quot;Let id:{z} be the String value consisting of id:{f} + 1 - id:{k} occurrences of the code unit 0x0030 ( DIGIT ZERO ) .&quot;</td></tr>
      <tr><td align="left">17:let m = (+ z m)</td></tr>
      <tr><td align="left">18:let k = (+ f 1i)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12196 [shape=cds, label=<<font color="black">app fractionDigits = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node12211 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">11:??? &quot;Let id:{n} be an integer for which the exact mathematical value of id:{n} &divide; 10 sup:{id:{f}} - id:{x} is as close to zero as possible . If there are two such id:{n} , pick the larger id:{n} .&quot;</td></tr>
      <tr><td align="left">12:??? &quot;If id:{n} = 0 , let id:{m} be the String code:{\&quot;0\&quot;} . Otherwise , let id:{m} be the String value consisting of the digits of the decimal representation of id:{n} ( in order , with no leading zeroes ) .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12199 [shape=cds, label=<<font color="black">1:app __x1__ = (ToInteger fractionDigits)</font>> color="black" fillcolor="white" style=filled]
  node12214 [shape=diamond, label=<<font color="black">(! (&lt; f k))</font>> color="black" fillcolor="white" style=filled]
  node12195 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node12207 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">6:let s = &quot;-&quot;</td></tr>
      <tr><td align="left">7:let x = (- x)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12202 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw RangeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12209 [shape=cds, label=<<font color="black">9:app __x2__ = (ToString x)</font>> color="black" fillcolor="white" style=filled]
  node12194 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node12198 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let x = [? __x0__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12203 [shape=diamond, label=<<font color="black">(= x NaN)</font>> color="black" fillcolor="white" style=filled]
  node12200 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">1:let f = [? __x1__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12205 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">4:let s = &quot;&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12201 [shape=diamond, label=<<font color="black">(|| (&lt; f 0i) (&lt; 100i f))</font>> color="black" fillcolor="white" style=filled]
  node12206 [shape=diamond, label=<<font color="black">(&lt; x 0i)</font>> color="black" fillcolor="white" style=filled]
  node12216 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">19:??? &quot;Let id:{a} be the first id:{k} - id:{f} elements of id:{m} , and let id:{b} be the remaining id:{f} elements of id:{m} .&quot;</td></tr>
      <tr><td align="left">20:let m = (+ (+ a &quot;.&quot;) b)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12210 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">9:let m = [! __x2__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12208 [shape=diamond, label=<<font color="black">(! (&lt; x (** 10.0 21i)))</font>> color="black" fillcolor="white" style=filled]
  node12213 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">14:let k = m.length</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12196 -> node12197 [ color="black"]
  node12215 -> node12216 [ color="black"]
  node12198 -> node12199 [ color="black"]
  node12214 -> node12215 [label=<<font color="black">true</font>> color="black"]
  node12214 -> node12216 [label=<<font color="black">false</font>> color="black"]
  node12207 -> node12208 [ color="black"]
  node12202 -> node12203 [ color="black"]
  node12200 -> node12201 [ color="black"]
  node12217 -> node12195 [ color="black"]
  node12209 -> node12210 [ color="black"]
  node12213 -> node12214 [ color="black"]
  node12212 -> node12213 [label=<<font color="black">true</font>> color="black"]
  node12212 -> node12217 [label=<<font color="black">false</font>> color="black"]
  node12210 -> node12217 [ color="black"]
  node12206 -> node12207 [label=<<font color="black">true</font>> color="black"]
  node12206 -> node12208 [label=<<font color="black">false</font>> color="black"]
  node12201 -> node12202 [label=<<font color="black">true</font>> color="black"]
  node12201 -> node12203 [label=<<font color="black">false</font>> color="black"]
  node12204 -> node12205 [ color="black"]
  node12211 -> node12212 [ color="black"]
  node12203 -> node12204 [label=<<font color="black">true</font>> color="black"]
  node12203 -> node12205 [label=<<font color="black">false</font>> color="black"]
  node12194 -> node12196 [ color="black"]
  node12208 -> node12209 [label=<<font color="black">true</font>> color="black"]
  node12208 -> node12211 [label=<<font color="black">false</font>> color="black"]
  node12199 -> node12200 [ color="black"]
  node12205 -> node12206 [ color="black"]
  node12216 -> node12217 [ color="black"]
  node12197 -> node12198 [ color="black"]
}
