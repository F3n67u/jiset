digraph {
  node18328 [shape=cds, label=<<font color="black">app exception = (GetArgument argumentsList 1i)</font>> color="black" fillcolor="white" style=filled]
  node18333 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">6:[! __x1__]</td></tr>
      <tr><td align="left">7:return undefined</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18329 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">1:let queue = generator.AsyncGeneratorQueue</td></tr>
      <tr><td align="left">2:assert (&lt; 0i queue.length)</td></tr>
      <tr><td align="left">3:let next = (pop queue 0i)</td></tr>
      <tr><td align="left">4:let promiseCapability = next.Capability</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18331 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">5:[! __x0__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18326 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node18332 [shape=cds, label=<<font color="black">6:app __x1__ = (AsyncGeneratorResumeNext generator)</font>> color="black" fillcolor="white" style=filled]
  node18325 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node18330 [shape=cds, label=<<font color="black">5:app __x0__ = (Call promiseCapability.Reject undefined (new [exception]))</font>> color="black" fillcolor="white" style=filled]
  node18327 [shape=cds, label=<<font color="black">app generator = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node18331 -> node18332 [ color="black"]
  node18333 -> node18326 [ color="black"]
  node18328 -> node18329 [ color="black"]
  node18327 -> node18328 [ color="black"]
  node18325 -> node18327 [ color="black"]
  node18329 -> node18330 [ color="black"]
  node18330 -> node18331 [ color="black"]
  node18332 -> node18333 [ color="black"]
}
