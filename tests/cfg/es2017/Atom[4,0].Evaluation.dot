digraph {
  node12850 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node12852 [shape=cds, label=<<font color="black">0:access __x0__ = (Disjunction &quot;Evaluation&quot;)</font>> color="black" fillcolor="white" style=filled]
  node12853 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let m = __x0__</td></tr>
      <tr><td align="left">1:??? &quot;Let id:{parenIndex} be the number of left - capturing parentheses in the entire regular expression that occur to the left of this nt:{Atom} . This is the total number of grammar:{Atom4, [Disjunction]} Parse Nodes prior to or enclosing this nt:{Atom} .&quot;</td></tr>
      <tr><td align="left">2:??? &quot;Return an internal Matcher closure that takes two arguments , a State id:{x} and a Continuation id:{c} , and performs the following steps : in:{} out:{}&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12851 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node12850 -> node12852 [ color="black"]
  node12852 -> node12853 [ color="black"]
  node12853 -> node12851 [ color="black"]
}
