{
  let __x0__ = true
  access __x1__ = (AsyncFunctionBody "ContainsUseStrict")
  __x0__ = (= __x1__ true)
  if __x0__ {
    access __x2__ = (FormalParameters "IsSimpleParameterList")
    __x0__ = (= __x2__ false)
  } else {}
  if __x0__ throw INTRINSIC_SyntaxError else {
    app __x3__ = (NormalCompletion undefined)
    return __x3__
  }
  access __x4__ = (FormalParameters "Contains")
  app __x5__ = (__x4__ "AwaitExpression")
  if (= __x5__ true) throw INTRINSIC_SyntaxError else {
    app __x6__ = (NormalCompletion undefined)
    return __x6__
  }
  ??? "If the source code matching this production is strict code , the Early Error rules for grammar:{UniqueFormalParameters0, [FormalParameters]} are applied ."
  ??? "If the source code matching this production is strict code , it is a Syntax Error if nt:{BindingIdentifier} is the nt:{IdentifierName} code:{eval} or the nt:{IdentifierName} code:{arguments} ."
  access __x7__ = (FormalParameters "BoundNames")
  access __x8__ = (AsyncFunctionBody "LexicallyDeclaredNames")
  let __x9__ = __x7__
  let __x10__ = __x8__
  let __x11__ = 0i
  let __x12__ = 0i
  let __x13__ = false
  while (< __x11__ __x9__.length) {
    __x12__ = 0i
    while (< __x12__ __x10__.length) if (= __x9__[__x11__] __x10__[__x12__]) __x13__ = true else {}
  }
  if __x13__ throw INTRINSIC_SyntaxError else {
    app __x14__ = (NormalCompletion undefined)
    return __x14__
  }
  access __x15__ = (FormalParameters "Contains")
  app __x16__ = (__x15__ "SuperProperty")
  if (= __x16__ true) throw INTRINSIC_SyntaxError else {
    app __x17__ = (NormalCompletion undefined)
    return __x17__
  }
  access __x18__ = (AsyncFunctionBody "Contains")
  app __x19__ = (__x18__ "SuperProperty")
  if (= __x19__ true) throw INTRINSIC_SyntaxError else {
    app __x20__ = (NormalCompletion undefined)
    return __x20__
  }
  access __x21__ = (FormalParameters "Contains")
  app __x22__ = (__x21__ "SuperCall")
  if (= __x22__ true) throw INTRINSIC_SyntaxError else {
    app __x23__ = (NormalCompletion undefined)
    return __x23__
  }
  access __x24__ = (AsyncFunctionBody "Contains")
  app __x25__ = (__x24__ "SuperCall")
  if (= __x25__ true) throw INTRINSIC_SyntaxError else {
    app __x26__ = (NormalCompletion undefined)
    return __x26__
  }
}