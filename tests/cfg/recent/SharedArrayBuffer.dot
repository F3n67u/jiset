digraph {
  node17631 [shape=diamond, label=<<font color="black">(= NewTarget undefined)</font>> color="black" fillcolor="white" style=filled]
  node17628 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node17632 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17630 [shape=cds, label=<<font color="black">app length = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node17635 [shape=cds, label=<<font color="black">2:app __x1__ = (AllocateSharedArrayBuffer NewTarget byteLength)</font>> color="black" fillcolor="white" style=filled]
  node17633 [shape=cds, label=<<font color="black">1:app __x0__ = (ToIndex length)</font>> color="black" fillcolor="white" style=filled]
  node17629 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node17636 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">2:return [? __x1__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17634 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">1:let byteLength = [? __x0__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17632 -> node17633 [ color="black"]
  node17635 -> node17636 [ color="black"]
  node17636 -> node17629 [ color="black"]
  node17628 -> node17630 [ color="black"]
  node17630 -> node17631 [ color="black"]
  node17633 -> node17634 [ color="black"]
  node17631 -> node17632 [label=<<font color="black">true</font>> color="black"]
  node17631 -> node17633 [label=<<font color="black">false</font>> color="black"]
  node17634 -> node17635 [ color="black"]
}
