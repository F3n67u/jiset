{
  [0] let keys = (new [])
  [1] let str = O.StringData
  [2] app __x0__ = (Type str)
  [2] assert (= __x0__ String)
  [3] let len = str.length
  [4] let i = (+ 0i 0i)
  [4] let __x1__ = (+ len 0i)
  [4] while (< i __x1__) {
    [5] app __x2__ = (ToString i)
    [5] if (is-completion __x2__) if (= __x2__.Type CONST_normal) __x2__ = __x2__.Value else return __x2__ else [15] {}
    [5] append __x2__ -> keys
  }
  [6] ??? "For each own property key id:{P} of id:{O} such that id:{P} is an array index and ToInteger ( id:{P} ) â‰¥ id:{len} , in ascending numeric index order , do step-list:{...}"
  [8] ??? "For each own property key id:{P} of id:{O} such that Type ( id:{P} ) is String and id:{P} is not an array index , in ascending chronological order of property creation , do step-list:{...}"
  [10] ??? "For each own property key id:{P} of id:{O} such that Type ( id:{P} ) is Symbol , in ascending chronological order of property creation , do step-list:{...}"
  [12] app __x3__ = (WrapCompletion keys)
  [12] return __x3__
}