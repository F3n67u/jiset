{
  app value = (GetArgument argumentsList 0i)
  [0] let asyncContext = GLOBAL_context
  [1] app __x0__ = (NewPromiseCapability INTRINSIC_Promise)
  [1] if (is-completion __x0__) if (= __x0__.Type CONST_normal) __x0__ = __x0__.Value else return __x0__ else [17] {}
  [1] let promiseCapability = __x0__
  [2] app __x1__ = (Call promiseCapability.Resolve undefined (new [value]))
  [2] if (is-completion __x1__) if (= __x1__.Type CONST_normal) __x1__ = __x1__.Value else return __x1__ else [17] {}
  [2] let resolveResult = __x1__
  [3] let onFulfilled = (new BuiltinFunctionObject("SubMap" -> (new SubMap())))
  [4] let onRejected = (new BuiltinFunctionObject("SubMap" -> (new SubMap())))
  [5] onFulfilled.AsyncContext = asyncContext
  [6] onRejected.AsyncContext = asyncContext
  [7] app __x2__ = (NewPromiseCapability INTRINSIC_Promise)
  [7] if (is-completion __x2__) if (= __x2__.Type CONST_normal) __x2__ = __x2__.Value else return __x2__ else [17] {}
  [7] let throwawayCapability = __x2__
  [8] throwawayCapability.Promise.PromiseIsHandled = true
  [9] app __x3__ = (PerformPromiseThen promiseCapability.Promise onFulfilled onRejected throwawayCapability)
  [9] if (is-completion __x3__) if (= __x3__.Type CONST_normal) __x3__ = __x3__.Value else return __x3__ else [17] {}
  [9] __x3__
  [10] if (= GLOBAL_executionStack[(- GLOBAL_executionStack.length 1i)] asyncContext) {
    let __x4__ = (- GLOBAL_executionStack.length 1i)
    (pop GLOBAL_executionStack __x4__)
  } else {}
  [10] GLOBAL_context = GLOBAL_executionStack[(- GLOBAL_executionStack.length 1i)]
  [11] ??? "Set the code evaluation state of id:{asyncContext} such that when evaluation is resumed with a Completion id:{resumptionValue} the following steps will be performed : step-list:{...}"
  [13] app __x5__ = (NormalCompletion undefined)
  [13] return __x5__
}