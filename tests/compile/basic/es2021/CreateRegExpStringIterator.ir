{
  assert (= (typeof S) String)
  assert (= (typeof global) Boolean)
  assert (= (typeof fullUnicode) Boolean)
  let closure = ()[R, S, global, fullUnicode] => while true {
    app __x0__ = (RegExpExec R S)
    let match = [? __x0__]
    if (= match null) return undefined else {}
    if (= global false) {
      app __x1__ = (Yield match)
      [? __x1__]
      return undefined
    } else {}
    app __x2__ = (Get match "0")
    app __x3__ = (ToString [? __x2__])
    let matchStr = [? __x3__]
    if (= matchStr "") {
      app __x4__ = (Get R "lastIndex")
      app __x5__ = (ToLength [? __x4__])
      let thisIndex = [? __x5__]
      app __x6__ = (AdvanceStringIndex S thisIndex fullUnicode)
      let nextIndex = [! __x6__]
      app __x7__ = (Set R "lastIndex" nextIndex true)
      [? __x7__]
    } else {}
    app __x8__ = (Yield match)
    [? __x8__]
  }
  app __x9__ = (CreateIteratorFromClosure closure "%RegExpStringIteratorPrototype%" INTRINSIC_RegExpStringIteratorPrototype)
  return [! __x9__]
}