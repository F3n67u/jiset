{
  app __x0__ = (IsCallable adder)
  if (= __x0__ false) throw INTRINSIC_TypeError else {}
  app __x1__ = (GetIterator iterable)
  let iteratorRecord = [? __x1__]
  while true {
    app __x2__ = (IteratorStep iteratorRecord)
    let next = [? __x2__]
    if (= next false) return target else {}
    app __x3__ = (IteratorValue next)
    let nextItem = [? __x3__]
    app __x4__ = (Type nextItem)
    if (! (= __x4__ Object)) {
      app __x5__ = (ThrowCompletion ??? "TypeError")
      let error = __x5__
      app __x6__ = (IteratorClose iteratorRecord error)
      return [? __x6__]
    } else {}
    app __x7__ = (Get nextItem "0")
    let k = __x7__
    app __x8__ = (IsAbruptCompletion k)
    if __x8__ {
      app __x9__ = (IteratorClose iteratorRecord k)
      return [? __x9__]
    } else {}
    app __x10__ = (Get nextItem "1")
    let v = __x10__
    app __x11__ = (IsAbruptCompletion v)
    if __x11__ {
      app __x12__ = (IteratorClose iteratorRecord v)
      return [? __x12__]
    } else {}
    app __x13__ = (Call adder target (new [k.Value, v.Value]))
    let status = __x13__
    app __x14__ = (IsAbruptCompletion status)
    if __x14__ {
      app __x15__ = (IteratorClose iteratorRecord status)
      return [? __x15__]
    } else {}
  }
}