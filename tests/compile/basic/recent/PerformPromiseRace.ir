{
  app __x0__ = (IsConstructor constructor)
  assert (= __x0__ true)
  app __x1__ = (IsCallable promiseResolve)
  assert (= __x1__ true)
  while true {
    app __x2__ = (IteratorStep iteratorRecord)
    let next = __x2__
    app __x3__ = (IsAbruptCompletion next)
    if __x3__ iteratorRecord.Done = true else {}
    [? next]
    if (= next false) {
      iteratorRecord.Done = true
      return resultCapability.Promise
    } else {}
    app __x4__ = (IteratorValue next)
    let nextValue = __x4__
    app __x5__ = (IsAbruptCompletion nextValue)
    if __x5__ iteratorRecord.Done = true else {}
    [? nextValue]
    app __x6__ = (Call promiseResolve constructor (new [nextValue]))
    let nextPromise = [? __x6__]
    app __x7__ = (Invoke nextPromise "then" (new [resultCapability.Resolve, resultCapability.Reject]))
    [? __x7__]
  }
}