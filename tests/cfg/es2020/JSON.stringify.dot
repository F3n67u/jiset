digraph {
  node17665 [shape=cds, label=<<font color="black">22:app __x10__ = (Type space)</font>> color="black" fillcolor="white" style=filled]
  node17687 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">37:return [? __x19__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17663 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">??? &quot;If id:{v} has a [ [ StringData ] ] or [ [ NumberData ] ] internal slot , set id:{item} to ? ToString ( id:{v} ) .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17671 [shape=cds, label=<<font color="black">26:app __x12__ = (ToString space)</font>> color="black" fillcolor="white" style=filled]
  node17639 [shape=cds, label=<<font color="black">3:app __x0__ = (Type replacer)</font>> color="black" fillcolor="white" style=filled]
  node17684 [shape=cds, label=<<font color="black">35:app __x18__ = (CreateDataPropertyOrThrow wrapper &quot;&quot; value)</font>> color="black" fillcolor="white" style=filled]
  node17656 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">item = v</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17641 [shape=cds, label=<<font color="black">6:app __x1__ = (IsCallable replacer)</font>> color="black" fillcolor="white" style=filled]
  node17677 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">28:space = __x15__</td></tr>
      <tr><td align="left">29:??? &quot;If id:{space} &lt; 1 , let id:{gap} be the empty String ; otherwise let id:{gap} be the String value containing id:{space} occurrences of the code unit 0x0020 ( SPACE ) .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17662 [shape=diamond, label=<<font color="black">(= __x9__ Object)</font>> color="black" fillcolor="white" style=filled]
  node17667 [shape=diamond, label=<<font color="black">(! (= space.NumberData absent))</font>> color="black" fillcolor="white" style=filled]
  node17652 [shape=cds, label=<<font color="black">13:app __x5__ = (Get replacer [! __x4__])</font>> color="black" fillcolor="white" style=filled]
  node17635 [shape=cds, label=<<font color="black">app value = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node17633 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node17674 [shape=diamond, label=<<font color="black">(= __x13__ Number)</font>> color="black" fillcolor="white" style=filled]
  node17645 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">7:let isArray = [? __x2__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17655 [shape=diamond, label=<<font color="black">(= __x6__ String)</font>> color="black" fillcolor="white" style=filled]
  node17642 [shape=diamond, label=<<font color="black">(= __x1__ true)</font>> color="black" fillcolor="white" style=filled]
  node17670 [shape=diamond, label=<<font color="black">(! (= space.StringData absent))</font>> color="black" fillcolor="white" style=filled]
  node17683 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">34:let wrapper = __x17__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17659 [shape=cds, label=<<font color="black">app __x8__ = (ToString v)</font>> color="black" fillcolor="white" style=filled]
  node17638 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let stack = (new [])</td></tr>
      <tr><td align="left">1:let indent = &quot;&quot;</td></tr>
      <tr><td align="left">2:let PropertyList = undefined</td></tr>
      <tr><td align="left">2:let ReplacerFunction = undefined</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17678 [shape=cds, label=<<font color="black">app __x16__ = (Type space)</font>> color="black" fillcolor="white" style=filled]
  node17675 [shape=cds, label=<<font color="black">28:app __x14__ = (ToInteger space)</font>> color="black" fillcolor="white" style=filled]
  node17651 [shape=cds, label=<<font color="black">13:app __x4__ = (ToString k)</font>> color="black" fillcolor="white" style=filled]
  node17646 [shape=diamond, label=<<font color="black">(= isArray true)</font>> color="black" fillcolor="white" style=filled]
  node17686 [shape=cds, label=<<font color="black">37:app __x19__ = (SerializeJSONProperty state &quot;&quot; wrapper)</font>> color="black" fillcolor="white" style=filled]
  node17669 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">24:space = [? __x11__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17654 [shape=cds, label=<<font color="black">17:app __x6__ = (Type v)</font>> color="black" fillcolor="white" style=filled]
  node17643 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">ReplacerFunction = replacer</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17660 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">item = [! __x8__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17682 [shape=cds, label=<<font color="black">34:app __x17__ = (OrdinaryObjectCreate INTRINSIC_Object_prototype)</font>> color="black" fillcolor="white" style=filled]
  node17637 [shape=cds, label=<<font color="black">app space = (GetArgument argumentsList 2i)</font>> color="black" fillcolor="white" style=filled]
  node17650 [shape=diamond, label=<<font color="black">(&lt; k len)</font>> color="black" fillcolor="white" style=filled]
  node17679 [shape=diamond, label=<<font color="black">(= __x16__ String)</font>> color="black" fillcolor="white" style=filled]
  node17647 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">9:PropertyList = (new [])</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17676 [shape=cds, label=<<font color="black">28:app __x15__ = (min 10i [! __x14__])</font>> color="black" fillcolor="white" style=filled]
  node17664 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">19:??? &quot;If id:{item} is not value:{undefined} and id:{item} is not currently an element of id:{PropertyList} , then in:{} out:{}&quot;</td></tr>
      <tr><td align="left">21:k = (+ k 1i)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17685 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">35:[! __x18__]</td></tr>
      <tr><td align="left">36:let state = (new Record(&quot;ReplacerFunction&quot; -&gt; ReplacerFunction, &quot;Stack&quot; -&gt; stack, &quot;Indent&quot; -&gt; indent, &quot;Gap&quot; -&gt; gap, &quot;PropertyList&quot; -&gt; PropertyList))</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17668 [shape=cds, label=<<font color="black">24:app __x11__ = (ToNumber space)</font>> color="black" fillcolor="white" style=filled]
  node17657 [shape=cds, label=<<font color="black">app __x7__ = (Type v)</font>> color="black" fillcolor="white" style=filled]
  node17640 [shape=diamond, label=<<font color="black">(= __x0__ Object)</font>> color="black" fillcolor="white" style=filled]
  node17666 [shape=diamond, label=<<font color="black">(= __x10__ Object)</font>> color="black" fillcolor="white" style=filled]
  node17672 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">26:space = [? __x12__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17681 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let gap = &quot;&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17653 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">13:let v = [? __x5__]</td></tr>
      <tr><td align="left">14:let item = undefined</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17644 [shape=cds, label=<<font color="black">7:app __x2__ = (IsArray replacer)</font>> color="black" fillcolor="white" style=filled]
  node17649 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">10:let len = [? __x3__]</td></tr>
      <tr><td align="left">11:let k = 0i</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17648 [shape=cds, label=<<font color="black">10:app __x3__ = (LengthOfArrayLike replacer)</font>> color="black" fillcolor="white" style=filled]
  node17680 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">??? &quot;If the length of id:{space} is 10 or less , let id:{gap} be id:{space} ; otherwise let id:{gap} be the String value consisting of the first 10 code units of id:{space} .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17673 [shape=cds, label=<<font color="black">32:app __x13__ = (Type space)</font>> color="black" fillcolor="white" style=filled]
  node17661 [shape=cds, label=<<font color="black">app __x9__ = (Type v)</font>> color="black" fillcolor="white" style=filled]
  node17658 [shape=diamond, label=<<font color="black">(= __x7__ Number)</font>> color="black" fillcolor="white" style=filled]
  node17636 [shape=cds, label=<<font color="black">app replacer = (GetArgument argumentsList 1i)</font>> color="black" fillcolor="white" style=filled]
  node17634 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node17645 -> node17646 [ color="black"]
  node17669 -> node17673 [ color="black"]
  node17650 -> node17651 [label=<<font color="black">true</font>> color="black"]
  node17650 -> node17665 [label=<<font color="black">false</font>> color="black"]
  node17664 -> node17650 [ color="black"]
  node17633 -> node17635 [ color="black"]
  node17638 -> node17639 [ color="black"]
  node17672 -> node17673 [ color="black"]
  node17679 -> node17680 [label=<<font color="black">true</font>> color="black"]
  node17679 -> node17681 [label=<<font color="black">false</font>> color="black"]
  node17674 -> node17675 [label=<<font color="black">true</font>> color="black"]
  node17674 -> node17678 [label=<<font color="black">false</font>> color="black"]
  node17678 -> node17679 [ color="black"]
  node17677 -> node17682 [ color="black"]
  node17640 -> node17641 [label=<<font color="black">true</font>> color="black"]
  node17640 -> node17665 [label=<<font color="black">false</font>> color="black"]
  node17662 -> node17663 [label=<<font color="black">true</font>> color="black"]
  node17662 -> node17664 [label=<<font color="black">false</font>> color="black"]
  node17647 -> node17648 [ color="black"]
  node17654 -> node17655 [ color="black"]
  node17641 -> node17642 [ color="black"]
  node17643 -> node17665 [ color="black"]
  node17661 -> node17662 [ color="black"]
  node17660 -> node17664 [ color="black"]
  node17637 -> node17638 [ color="black"]
  node17666 -> node17667 [label=<<font color="black">true</font>> color="black"]
  node17666 -> node17673 [label=<<font color="black">false</font>> color="black"]
  node17635 -> node17636 [ color="black"]
  node17682 -> node17683 [ color="black"]
  node17642 -> node17643 [label=<<font color="black">true</font>> color="black"]
  node17642 -> node17644 [label=<<font color="black">false</font>> color="black"]
  node17657 -> node17658 [ color="black"]
  node17681 -> node17682 [ color="black"]
  node17648 -> node17649 [ color="black"]
  node17658 -> node17659 [label=<<font color="black">true</font>> color="black"]
  node17658 -> node17661 [label=<<font color="black">false</font>> color="black"]
  node17659 -> node17660 [ color="black"]
  node17663 -> node17664 [ color="black"]
  node17649 -> node17650 [ color="black"]
  node17671 -> node17672 [ color="black"]
  node17673 -> node17674 [ color="black"]
  node17685 -> node17686 [ color="black"]
  node17651 -> node17652 [ color="black"]
  node17670 -> node17671 [label=<<font color="black">true</font>> color="black"]
  node17670 -> node17673 [label=<<font color="black">false</font>> color="black"]
  node17644 -> node17645 [ color="black"]
  node17653 -> node17654 [ color="black"]
  node17687 -> node17634 [ color="black"]
  node17686 -> node17687 [ color="black"]
  node17668 -> node17669 [ color="black"]
  node17676 -> node17677 [ color="black"]
  node17652 -> node17653 [ color="black"]
  node17656 -> node17664 [ color="black"]
  node17646 -> node17647 [label=<<font color="black">true</font>> color="black"]
  node17646 -> node17665 [label=<<font color="black">false</font>> color="black"]
  node17680 -> node17682 [ color="black"]
  node17667 -> node17668 [label=<<font color="black">true</font>> color="black"]
  node17667 -> node17670 [label=<<font color="black">false</font>> color="black"]
  node17683 -> node17684 [ color="black"]
  node17684 -> node17685 [ color="black"]
  node17639 -> node17640 [ color="black"]
  node17655 -> node17656 [label=<<font color="black">true</font>> color="black"]
  node17655 -> node17657 [label=<<font color="black">false</font>> color="black"]
  node17665 -> node17666 [ color="black"]
  node17636 -> node17637 [ color="black"]
  node17675 -> node17676 [ color="black"]
}
