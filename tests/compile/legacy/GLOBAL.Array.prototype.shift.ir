{
  app __x0__ = (ToObject this)
  let O = [? __x0__]
  app __x1__ = (LengthOfArrayLike O)
  let len = [? __x1__]
  if (= len 0i) {
    app __x2__ = (Set O "length" 0i true)
    [? __x2__]
    return undefined
  } else {}
  app __x3__ = (Get O "0")
  let first = [? __x3__]
  let k = 1i
  while (< k len) {
    app __x4__ = (ToString k)
    let from = [! __x4__]
    app __x5__ = (ToString (- k 1i))
    let to = [! __x5__]
    app __x6__ = (HasProperty O from)
    let fromPresent = [? __x6__]
    if (= fromPresent true) {
      app __x7__ = (Get O from)
      let fromVal = [? __x7__]
      app __x8__ = (Set O to fromVal true)
      [? __x8__]
    } else {
      assert (= fromPresent false)
      app __x9__ = (DeletePropertyOrThrow O to)
      [? __x9__]
    }
    k = (+ k 1i)
  }
  app __x10__ = (ToString (- len 1i))
  app __x11__ = (DeletePropertyOrThrow O [! __x10__])
  [? __x11__]
  app __x12__ = (Set O "length" (- len 1i) true)
  [? __x12__]
  return first
}