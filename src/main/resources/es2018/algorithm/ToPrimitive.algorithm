<algorithm>
  <param>input</param>
  <param>PreferredType</param>
  <step-list>
    <step>Assert : <id>input</id> is an ECMAScript language value .</step>
    <step>If Type ( <id>input</id> ) is Object, then     <step-list>
      <step>If <id>PreferredType</id> is not present, let <id>hint</id> be <value>"default"</value> .</step>
      <step>Else if <id>PreferredType</id> is hint String, let <id>hint</id> be <value>"string"</value> .</step>
      <step>Else <id>PreferredType</id> is hint Number, let <id>hint</id> be <value>"number"</value> .</step>
      <step>Let <id>exoticToPrim</id> be ? GetMethod ( <id>input</id> , @@toPrimitive).</step>
      <step>If <id>exoticToPrim</id> is not <value>undefined</value> , then       <step-list>
        <step>Let <id>result</id> be ? Call ( <id>exoticToPrim</id> , <id>input</id> , « <id>hint</id> »).</step>
        <step>If Type ( <id>result</id> ) is not Object, return <id>result</id> .</step>
        <step>Throw a <value>TypeError</value> exception.</step>
      </step-list></step>
      <step>If <id>hint</id> is <value>"default"</value> , set <id>hint</id> to <value>"number"</value> .</step>
      <step>Return ? OrdinaryToPrimitive ( <id>input</id> , <id>hint</id> ).</step>
    </step-list></step>
    <step>Return <id>input</id> .</step>
  </step-list>
</algorithm>