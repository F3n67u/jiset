{
  [0] let module = this
  [1] if (contains exportStarSet module) {
    [3] app __x0__ = (WrapCompletion (new []))
    [3] return __x0__
  } else [10] {}
  [4] append module -> exportStarSet
  [5] let exportedNames = (new [])
  [6] let __x1__ = module.LocalExportEntries
  [6] let __x2__ = 0i
  [6] while (< __x2__ __x1__.length) {
    let e = __x1__[__x2__]
    [8] append e.ExportName -> exportedNames
    __x2__ = (+ __x2__ 1i)
  }
  [9] let __x3__ = module.IndirectExportEntries
  [9] let __x4__ = 0i
  [9] while (< __x4__ __x3__.length) {
    let e = __x3__[__x4__]
    [11] append e.ExportName -> exportedNames
    __x4__ = (+ __x4__ 1i)
  }
  [12] let __x5__ = module.StarExportEntries
  [12] let __x6__ = 0i
  [12] while (< __x6__ __x5__.length) {
    let e = __x5__[__x6__]
    [13] app __x7__ = (HostResolveImportedModule module e.ModuleRequest)
    [13] if (is-completion __x7__) if (= __x7__.Type CONST_normal) __x7__ = __x7__.Value else return __x7__ else [10] {}
    [13] let requestedModule = __x7__
    [14] app __x8__ = (requestedModule.GetExportedNames requestedModule exportStarSet)
    [14] if (is-completion __x8__) if (= __x8__.Type CONST_normal) __x8__ = __x8__.Value else return __x8__ else [10] {}
    [14] let starNames = __x8__
    [15] let __x9__ = starNames
    [15] let __x10__ = 0i
    [15] while (< __x10__ __x9__.length) {
      let n = __x9__[__x10__]
      [16] app __x11__ = (SameValue n "default")
      [16] if (= __x11__ false) if (! (contains exportedNames n)) append n -> exportedNames else [10] {} else [10] {}
      __x10__ = (+ __x10__ 1i)
    }
    __x6__ = (+ __x6__ 1i)
  }
  [19] app __x12__ = (WrapCompletion exportedNames)
  [19] return __x12__
}