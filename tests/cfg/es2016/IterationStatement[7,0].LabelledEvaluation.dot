digraph {
  node6626 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node6631 [shape=cds, label=<<font color="black">1:app __x2__ = (ForInOfBodyEvaluation ForDeclaration Statement keyResult CONST_lexicalBinding labelSet)</font>> color="black" fillcolor="white" style=filled]
  node6629 [shape=cds, label=<<font color="black">0:app __x1__ = (ForInOfHeadEvaluation __x0__ Expression CONST_enumerate)</font>> color="black" fillcolor="white" style=filled]
  node6630 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let keyResult = [? __x1__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node6628 [shape=cds, label=<<font color="black">0:access __x0__ = (ForDeclaration &quot;BoundNames&quot;)</font>> color="black" fillcolor="white" style=filled]
  node6627 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node6632 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">1:return [? __x2__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node6629 -> node6630 [ color="black"]
  node6630 -> node6631 [ color="black"]
  node6632 -> node6627 [ color="black"]
  node6626 -> node6628 [ color="black"]
  node6628 -> node6629 [ color="black"]
  node6631 -> node6632 [ color="black"]
}
