digraph {
  node11164 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw URIError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11160 [shape=diamond, label=<<font color="black">(! (= C &quot;%&quot;))</font>> color="black" fillcolor="white" style=filled]
  node11151 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node11159 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">5:let C = string[k]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11152 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node11157 [shape=diamond, label=<<font color="black">(= k strLen)</font>> color="black" fillcolor="white" style=filled]
  node11153 [shape=cds, label=<<font color="black">app string = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node11165 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">11:??? &quot;If the code units at index ( id:{k} + 1 ) and ( id:{k} + 2 ) within id:{string} do not represent hexadecimal digits , throw a value:{URIError} exception .&quot;</td></tr>
      <tr><td align="left">12:??? &quot;Let id:{B} be the 8 - bit value represented by the two hexadecimal digits at index ( id:{k} + 1 ) and ( id:{k} + 2 ) .&quot;</td></tr>
      <tr><td align="left">13:k = (+ k 2i)</td></tr>
      <tr><td align="left">14:??? &quot;If the most significant bit in id:{B} is 0 , then in:{} out:{}&quot;</td></tr>
      <tr><td align="left">20:??? &quot;Else the most significant bit in id:{B} is 1 , in:{} out:{}&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11161 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let S = C</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11166 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">39:R = (+ R S)</td></tr>
      <tr><td align="left">40:k = (+ k 1i)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11163 [shape=diamond, label=<<font color="black">(! (&lt; (+ k 2i) strLen))</font>> color="black" fillcolor="white" style=filled]
  node11154 [shape=cds, label=<<font color="black">app reservedSet = (GetArgument argumentsList 1i)</font>> color="black" fillcolor="white" style=filled]
  node11156 [shape=diamond, label=<<font color="black">true</font>> color="black" fillcolor="white" style=filled]
  node11158 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return R</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11155 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let strLen = string.length</td></tr>
      <tr><td align="left">1:let R = &quot;&quot;</td></tr>
      <tr><td align="left">2:let k = 0i</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11162 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">9:let start = k</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11151 -> node11153 [ color="black"]
  node11159 -> node11160 [ color="black"]
  node11158 -> node11159 [ color="black"]
  node11163 -> node11164 [label=<<font color="black">true</font>> color="black"]
  node11163 -> node11165 [label=<<font color="black">false</font>> color="black"]
  node11160 -> node11161 [label=<<font color="black">true</font>> color="black"]
  node11160 -> node11162 [label=<<font color="black">false</font>> color="black"]
  node11165 -> node11166 [ color="black"]
  node11162 -> node11163 [ color="black"]
  node11166 -> node11156 [ color="black"]
  node11153 -> node11154 [ color="black"]
  node11154 -> node11155 [ color="black"]
  node11157 -> node11158 [label=<<font color="black">true</font>> color="black"]
  node11157 -> node11159 [label=<<font color="black">false</font>> color="black"]
  node11161 -> node11166 [ color="black"]
  node11156 -> node11157 [label=<<font color="black">true</font>> color="black"]
  node11156 -> node11152 [label=<<font color="black">false</font>> color="black"]
  node11164 -> node11165 [ color="black"]
  node11155 -> node11156 [ color="black"]
}
