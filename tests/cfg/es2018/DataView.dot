digraph {
  node16765 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw RangeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16752 [shape=cds, label=<<font color="black">3:app __x1__ = (ToIndex byteOffset)</font>> color="black" fillcolor="white" style=filled]
  node16761 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let viewByteLength = (- bufferByteLength offset)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16758 [shape=diamond, label=<<font color="black">(&lt; bufferByteLength offset)</font>> color="black" fillcolor="white" style=filled]
  node16741 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node16754 [shape=cds, label=<<font color="black">4:app __x2__ = (IsDetachedBuffer buffer)</font>> color="black" fillcolor="white" style=filled]
  node16747 [shape=cds, label=<<font color="black">1:app __x0__ = (Type buffer)</font>> color="black" fillcolor="white" style=filled]
  node16750 [shape=diamond, label=<<font color="black">(= buffer.ArrayBufferData absent)</font>> color="black" fillcolor="white" style=filled]
  node16764 [shape=diamond, label=<<font color="black">(&lt; bufferByteLength (+ offset viewByteLength))</font>> color="black" fillcolor="white" style=filled]
  node16767 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">12:let O = [? __x4__]</td></tr>
      <tr><td align="left">13:O.ViewedArrayBuffer = buffer</td></tr>
      <tr><td align="left">14:O.ByteLength = viewByteLength</td></tr>
      <tr><td align="left">15:O.ByteOffset = offset</td></tr>
      <tr><td align="left">16:return O</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16759 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw RangeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16746 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16756 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16743 [shape=cds, label=<<font color="black">app byteOffset = (GetArgument argumentsList 1i)</font>> color="black" fillcolor="white" style=filled]
  node16760 [shape=diamond, label=<<font color="black">(|| (= byteLength absent) (= byteLength undefined))</font>> color="black" fillcolor="white" style=filled]
  node16745 [shape=diamond, label=<<font color="black">(= NewTarget undefined)</font>> color="black" fillcolor="white" style=filled]
  node16762 [shape=cds, label=<<font color="black">10:app __x3__ = (ToIndex byteLength)</font>> color="black" fillcolor="white" style=filled]
  node16740 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node16757 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">5:let bufferByteLength = buffer.ArrayBufferByteLength</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16744 [shape=cds, label=<<font color="black">app byteLength = (GetArgument argumentsList 2i)</font>> color="black" fillcolor="white" style=filled]
  node16753 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">3:let offset = [? __x1__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16751 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16748 [shape=diamond, label=<<font color="black">(! (= __x0__ Object))</font>> color="black" fillcolor="white" style=filled]
  node16742 [shape=cds, label=<<font color="black">app buffer = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node16755 [shape=diamond, label=<<font color="black">(= __x2__ true)</font>> color="black" fillcolor="white" style=filled]
  node16763 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">10:let viewByteLength = [? __x3__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16749 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16766 [shape=cds, label=<<font color="black">12:app __x4__ = (OrdinaryCreateFromConstructor NewTarget INTRINSIC_DataViewPrototype (new [&quot;DataView&quot;, &quot;ViewedArrayBuffer&quot;, &quot;ByteLength&quot;, &quot;ByteOffset&quot;]))</font>> color="black" fillcolor="white" style=filled]
  node16752 -> node16753 [ color="black"]
  node16764 -> node16765 [label=<<font color="black">true</font>> color="black"]
  node16764 -> node16766 [label=<<font color="black">false</font>> color="black"]
  node16759 -> node16760 [ color="black"]
  node16755 -> node16756 [label=<<font color="black">true</font>> color="black"]
  node16755 -> node16757 [label=<<font color="black">false</font>> color="black"]
  node16746 -> node16747 [ color="black"]
  node16742 -> node16743 [ color="black"]
  node16748 -> node16749 [label=<<font color="black">true</font>> color="black"]
  node16748 -> node16750 [label=<<font color="black">false</font>> color="black"]
  node16760 -> node16761 [label=<<font color="black">true</font>> color="black"]
  node16760 -> node16762 [label=<<font color="black">false</font>> color="black"]
  node16756 -> node16757 [ color="black"]
  node16767 -> node16741 [ color="black"]
  node16753 -> node16754 [ color="black"]
  node16749 -> node16750 [ color="black"]
  node16744 -> node16745 [ color="black"]
  node16758 -> node16759 [label=<<font color="black">true</font>> color="black"]
  node16758 -> node16760 [label=<<font color="black">false</font>> color="black"]
  node16743 -> node16744 [ color="black"]
  node16740 -> node16742 [ color="black"]
  node16750 -> node16751 [label=<<font color="black">true</font>> color="black"]
  node16750 -> node16752 [label=<<font color="black">false</font>> color="black"]
  node16751 -> node16752 [ color="black"]
  node16754 -> node16755 [ color="black"]
  node16747 -> node16748 [ color="black"]
  node16763 -> node16764 [ color="black"]
  node16761 -> node16766 [ color="black"]
  node16765 -> node16766 [ color="black"]
  node16745 -> node16746 [label=<<font color="black">true</font>> color="black"]
  node16745 -> node16747 [label=<<font color="black">false</font>> color="black"]
  node16766 -> node16767 [ color="black"]
  node16757 -> node16758 [ color="black"]
  node16762 -> node16763 [ color="black"]
}
