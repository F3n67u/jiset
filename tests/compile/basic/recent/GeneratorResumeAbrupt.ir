{
  app __x0__ = (GeneratorValidate generator generatorBrand)
  let state = [? __x0__]
  if (= state CONST_suspendedStart) {
    generator.GeneratorState = CONST_completed
    state = CONST_completed
  } else {}
  if (= state CONST_completed) {
    if (= abruptCompletion.Type CONST_return) {
      app __x1__ = (CreateIterResultObject abruptCompletion.Value true)
      return __x1__
    } else {}
    app __x2__ = (Completion abruptCompletion)
    return __x2__
  } else {}
  assert (= state CONST_suspendedYield)
  let genContext = generator.GeneratorContext
  let methodContext = GLOBAL_context
  GLOBAL_context = null
  generator.GeneratorState = CONST_executing
  append genContext -> GLOBAL_executionStack
  GLOBAL_context = GLOBAL_executionStack[(- GLOBAL_executionStack.length 1i)]
  ??? "Resume the suspended evaluation of id:{genContext} using id:{abruptCompletion} as the result of the operation that suspended it . Let id:{result} be the completion record returned by the resumed computation ."
  app __x3__ = (Completion result)
  return __x3__
}