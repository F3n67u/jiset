{
  app start = (GetArgument argumentsList 0i)
  app end = (GetArgument argumentsList 1i)
  [0] app __x0__ = (ToObject this)
  [0] if (is-completion __x0__) if (= __x0__.Type CONST_normal) __x0__ = __x0__.Value else return __x0__ else [4] {}
  [0] let O = __x0__
  [1] app __x1__ = (LengthOfArrayLike O)
  [1] if (is-completion __x1__) if (= __x1__.Type CONST_normal) __x1__ = __x1__.Value else return __x1__ else [4] {}
  [1] let len = __x1__
  [2] app __x2__ = (ToIntegerOrInfinity start)
  [2] if (is-completion __x2__) if (= __x2__.Type CONST_normal) __x2__ = __x2__.Value else return __x2__ else [4] {}
  [2] let relativeStart = __x2__
  [3] ??? "If id:{relativeStart} is - ∞ , let id:{k} be 0 ."
  [4] ??? "Else if id:{relativeStart} < 0 , let id:{k} be max ( id:{len} + id:{relativeStart} , 0 ) ."
  [5] ??? "Else , let id:{k} be min ( id:{relativeStart} , id:{len} ) ."
  [6] if (= end undefined) let relativeEnd = len else {
    app __x3__ = (ToIntegerOrInfinity end)
    if (is-completion __x3__) if (= __x3__.Type CONST_normal) __x3__ = __x3__.Value else return __x3__ else [4] {}
    let relativeEnd = __x3__
  }
  [7] ??? "If id:{relativeEnd} is - ∞ , let id:{final} be 0 ."
  [8] ??? "Else if id:{relativeEnd} < 0 , let id:{final} be max ( id:{len} + id:{relativeEnd} , 0 ) ."
  [9] ??? "Else , let id:{final} be min ( id:{relativeEnd} , id:{len} ) ."
  [10] app __x4__ = (max (- final k) 0i)
  [10] let count = __x4__
  [11] app __x5__ = (ArraySpeciesCreate O count)
  [11] if (is-completion __x5__) if (= __x5__.Type CONST_normal) __x5__ = __x5__.Value else return __x5__ else [4] {}
  [11] let A = __x5__
  [12] let n = 0i
  [13] while (< k final) {
    [14] ??? "Let id:{Pk} be ! ToString ( 𝔽 ( id:{k} ) ) ."
    [15] app __x6__ = (HasProperty O Pk)
    [15] if (is-completion __x6__) if (= __x6__.Type CONST_normal) __x6__ = __x6__.Value else return __x6__ else [4] {}
    [15] let kPresent = __x6__
    [16] if (= kPresent true) {
      [17] app __x7__ = (Get O Pk)
      [17] if (is-completion __x7__) if (= __x7__.Type CONST_normal) __x7__ = __x7__.Value else return __x7__ else [4] {}
      [17] let kValue = __x7__
      [18] ??? "Perform ? CreateDataPropertyOrThrow ( id:{A} , ! ToString ( 𝔽 ( id:{n} ) ) , id:{kValue} ) ."
    } else [4] {}
    [19] k = (+ k 1i)
    [20] n = (+ n 1i)
  }
  [21] ??? "Perform ? Set ( id:{A} , value:{\"length\"} , 𝔽 ( id:{n} ) , value:{true} ) ."
  [22] app __x8__ = (WrapCompletion A)
  [22] return __x8__
}