{
  let func = this
  ??? "If id:{func} is a < emu - xref href = \" # sec - bound - function - exotic - objects \" > Bound Function exotic object < / emu - xref > or a < emu - xref href = \" # sec - built - in - function - objects \" > built - in function object < / emu - xref > , then return an implementation - dependent String source code representation of id:{func} . The representation must have the syntax of a nt:{NativeFunction} . Additionally , if id:{func} is a < emu - xref href = \" # sec - well - known - intrinsic - objects \" > Well - known Intrinsic Object < / emu - xref > and is not identified as an anonymous function , the portion of the returned String that would be matched by nt:{PropertyName} must be the initial value of the code:{name} property of id:{func} ."
  let __x0__ = true
  app __x1__ = (Type func)
  __x0__ = (= __x1__ Object)
  if __x0__ {
    let __x2__ = true
    __x2__ = (! (= func.SourceText absent))
    if __x2__ {
      let __x3__ = true
      app __x4__ = (Type func.SourceText)
      __x3__ = (= __x4__ String)
      if __x3__ {
        app __x5__ = (HostHasSourceTextAvailable func)
        __x3__ = (= [! __x5__] true)
      } else {}
      __x2__ = __x3__
    } else {}
    __x0__ = __x2__
  } else {}
  if __x0__ return func.SourceText else {}
  ??? "If Type ( id:{func} ) is Object and IsCallable ( id:{func} ) is value:{true} , then return an implementation - dependent String source code representation of id:{func} . The representation must have the syntax of a nt:{NativeFunction} ."
  throw INTRINSIC_TypeError
}