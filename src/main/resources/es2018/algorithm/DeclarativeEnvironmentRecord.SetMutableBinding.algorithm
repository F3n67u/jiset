<algorithm>
  <param>this</param>
  <param>N</param>
  <param>V</param>
  <param>S</param>
  <step-list>
    <step>Let <id>envRec</id> be the declarative Environment Record for which the method was invoked.</step>
    <step>If <id>envRec</id> does not have a binding for <id>N</id> , then     <step-list>
      <step>If <id>S</id> is <value>true</value> , throw a <value>ReferenceError</value> exception.</step>
      <step>Perform <id>envRec</id> .CreateMutableBinding( <id>N</id> , <value>true</value> ).</step>
      <step>Perform <id>envRec</id> .InitializeBinding( <id>N</id> , <id>V</id> ).</step>
      <step>Return NormalCompletion ( <value>empty</value> ).</step>
    </step-list></step>
    <step>If the binding for <id>N</id> in <id>envRec</id> is a strict binding, set <id>S</id> to <value>true</value> .</step>
    <step>If the binding for <id>N</id> in <id>envRec</id> has not yet been initialized, throw a <value>ReferenceError</value> exception.</step>
    <step>Else if the binding for <id>N</id> in <id>envRec</id> is a mutable binding, change its bound value to <id>V</id> .</step>
    <step>Else,     <step-list>
      <step>Assert : This is an attempt to change the value of an immutable binding.</step>
      <step>If <id>S</id> is <value>true</value> , throw a <value>TypeError</value> exception.</step>
    </step-list></step>
    <step>Return NormalCompletion ( <value>empty</value> ).</step>
  </step-list>
</algorithm>