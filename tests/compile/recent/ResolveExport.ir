{
  [0] if (= resolveSet absent) resolveSet = (new []) else [33] {}
  [2] let __x0__ = resolveSet
  [2] let __x1__ = 0i
  [2] while (< __x1__ __x0__.length) {
    let r = __x0__[__x1__]
    [3] let __x2__ = (= module r.Module)
    [3] if __x2__ {
      app __x3__ = (SameValue exportName r.ExportName)
      __x2__ = (= __x3__ true)
    } else [33] {}
    [3] if __x2__ {
      [5] app __x4__ = (WrapCompletion null)
      [5] return __x4__
    } else [33] {}
    __x1__ = (+ __x1__ 1i)
  }
  [6] append (new Record("Module" -> module, "ExportName" -> exportName)) -> resolveSet
  [7] let __x5__ = module.LocalExportEntries
  [7] let __x6__ = 0i
  [7] while (< __x6__ __x5__.length) {
    let e = __x5__[__x6__]
    [8] app __x7__ = (SameValue exportName e.ExportName)
    [8] if (= __x7__ true) {
      [10] app __x8__ = (WrapCompletion (new ResolvedBindingRecord("Module" -> module, "BindingName" -> e.LocalName)))
      [10] return __x8__
    } else [33] {}
    __x6__ = (+ __x6__ 1i)
  }
  [11] let __x9__ = module.IndirectExportEntries
  [11] let __x10__ = 0i
  [11] while (< __x10__ __x9__.length) {
    let e = __x9__[__x10__]
    [12] app __x11__ = (SameValue exportName e.ExportName)
    [12] if (= __x11__ true) {
      [13] app __x12__ = (HostResolveImportedModule module e.ModuleRequest)
      [13] if (is-completion __x12__) if (= __x12__.Type CONST_normal) __x12__ = __x12__.Value else return __x12__ else [33] {}
      [13] let importedModule = __x12__
      [14] ??? "If id:{e} . [ [ ImportName ] ] is value:{\"\\} \" * , then step-list:{...}"
      [17] ??? "Else , step-list:{...}"
    } else [33] {}
    __x10__ = (+ __x10__ 1i)
  }
  [20] app __x13__ = (SameValue exportName "default")
  [20] if (= __x13__ true) {
    [22] app __x14__ = (WrapCompletion null)
    [22] return __x14__
  } else [33] {}
  [24] let starResolution = null
  [25] let __x15__ = module.StarExportEntries
  [25] let __x16__ = 0i
  [25] while (< __x16__ __x15__.length) {
    let e = __x15__[__x16__]
    [26] app __x17__ = (HostResolveImportedModule module e.ModuleRequest)
    [26] if (is-completion __x17__) if (= __x17__.Type CONST_normal) __x17__ = __x17__.Value else return __x17__ else [33] {}
    [26] let importedModule = __x17__
    [27] app __x18__ = (importedModule.ResolveExport importedModule exportName resolveSet)
    [27] if (is-completion __x18__) if (= __x18__.Type CONST_normal) __x18__ = __x18__.Value else return __x18__ else [33] {}
    [27] let resolution = __x18__
    [28] if (= resolution "ambiguous") {
      app __x19__ = (WrapCompletion "ambiguous")
      return __x19__
    } else [33] {}
    [29] if (! (= resolution null)) {
      [30] assert (= (typeof resolution) "ResolvedBindingRecord")
      [32] if (= starResolution null) starResolution = resolution else {
        [34] let __x20__ = (! (= resolution.Module starResolution.Module))
        [34] if __x20__ [33] {} else {
          app __x21__ = (SameValue resolution.BindingName starResolution.BindingName)
          __x20__ = (= __x21__ false)
        }
        [34] if __x20__ {
          app __x22__ = (WrapCompletion "ambiguous")
          return __x22__
        } else [33] {}
      }
    } else [33] {}
    __x16__ = (+ __x16__ 1i)
  }
  [35] app __x23__ = (WrapCompletion starResolution)
  [35] return __x23__
}