["Assert", ":", "The", "execution", "context", "stack", "has", "at", "least", "two", "elements", ".", {
  "k": 0
}, "Let", {
  "id": "callerContext"
}, "be", "the", "second", "to", "top", "element", "of", "the", "execution", "context", "stack", ".", {
  "k": 1
}, "Let", {
  "id": "callerRealm"
}, "be", {
  "id": "callerContext"
}, "'", "s", "Realm", ".", {
  "k": 2
}, "Let", {
  "id": "calleeRealm"
}, "be", "the", "current", "Realm", "Record", ".", {
  "k": 3
}, "Perform", "?", "HostEnsureCanCompileStrings", "(", {
  "id": "callerRealm"
}, ",", {
  "id": "calleeRealm"
}, ")", ".", {
  "k": 4
}, "If", {
  "id": "newTarget"
}, "is", {
  "value": "undefined"
}, ",", "set", {
  "id": "newTarget"
}, "to", {
  "id": "constructor"
}, ".", {
  "k": 5
}, "If", {
  "id": "kind"
}, "is", {
  "const": "normal"
}, ",", "then", {
  "in": null
}, "Let", {
  "id": "goal"
}, "be", "the", "grammar", "symbol", {
  "nt": "FunctionBody"
}, ".", "Let", {
  "id": "parameterGoal"
}, "be", "the", "grammar", "symbol", {
  "nt": "FormalParameters"
}, ".", "Let", {
  "id": "fallbackProto"
}, "be", {
  "value": "\"%Function.prototype%\""
}, ".", {
  "out": null
}, {
  "k": 6
}, "Else", "if", {
  "id": "kind"
}, "is", {
  "const": "generator"
}, ",", "then", {
  "in": null
}, "Let", {
  "id": "goal"
}, "be", "the", "grammar", "symbol", {
  "nt": "GeneratorBody"
}, ".", "Let", {
  "id": "parameterGoal"
}, "be", "the", "grammar", "symbol", {
  "nt": "FormalParameters"
}, ".", "Let", {
  "id": "fallbackProto"
}, "be", {
  "value": "\"%Generator%\""
}, ".", {
  "out": null
}, {
  "k": 7
}, "Else", "if", {
  "id": "kind"
}, "is", {
  "const": "async"
}, ",", "then", {
  "in": null
}, "Let", {
  "id": "goal"
}, "be", "the", "grammar", "symbol", {
  "nt": "AsyncFunctionBody"
}, ".", "Let", {
  "id": "parameterGoal"
}, "be", "the", "grammar", "symbol", {
  "nt": "FormalParameters"
}, ".", "Let", {
  "id": "fallbackProto"
}, "be", {
  "value": "\"%AsyncFunction.prototype%\""
}, ".", {
  "out": null
}, {
  "k": 8
}, "Else", ",", {
  "in": null
}, "Assert", ":", {
  "id": "kind"
}, "is", {
  "const": "asyncGenerator"
}, ".", "Let", {
  "id": "goal"
}, "be", "the", "grammar", "symbol", {
  "nt": "AsyncGeneratorBody"
}, ".", "Let", {
  "id": "parameterGoal"
}, "be", "the", "grammar", "symbol", {
  "nt": "FormalParameters"
}, ".", "Let", {
  "id": "fallbackProto"
}, "be", {
  "value": "\"%AsyncGenerator%\""
}, ".", {
  "out": null
}, {
  "k": 9
}, "Let", {
  "id": "argCount"
}, "be", "the", "number", "of", "elements", "in", {
  "id": "args"
}, ".", {
  "k": 10
}, "Let", {
  "id": "P"
}, "be", "the", "empty", "String", ".", {
  "k": 11
}, "If", {
  "id": "argCount"
}, "=", "0", ",", "let", {
  "id": "bodyArg"
}, "be", "the", "empty", "String", ".", {
  "k": 12
}, "Else", "if", {
  "id": "argCount"
}, "=", "1", ",", "let", {
  "id": "bodyArg"
}, "be", {
  "id": "args"
}, "[", "0", "]", ".", {
  "k": 13
}, "Else", ",", {
  "in": null
}, "Assert", ":", {
  "id": "argCount"
}, ">", "1", ".", "Let", {
  "id": "firstArg"
}, "be", {
  "id": "args"
}, "[", "0", "]", ".", "Set", {
  "id": "P"
}, "to", "?", "ToString", "(", {
  "id": "firstArg"
}, ")", ".", "Let", {
  "id": "k"
}, "be", "1", ".", "Repeat", ",", "while", {
  "id": "k"
}, "<", {
  "id": "argCount"
}, "-", "1", {
  "in": null
}, "Let", {
  "id": "nextArg"
}, "be", {
  "id": "args"
}, "[", {
  "id": "k"
}, "]", ".", "Let", {
  "id": "nextArgString"
}, "be", "?", "ToString", "(", {
  "id": "nextArg"
}, ")", ".", "Set", {
  "id": "P"
}, "to", "the", "string", "-", "concatenation", "of", "the", "previous", "value", "of", {
  "id": "P"
}, ",", {
  "value": "\",\""
}, "(", "a", "comma", ")", ",", "and", {
  "id": "nextArgString"
}, ".", "Set", {
  "id": "k"
}, "to", {
  "id": "k"
}, "+", "1", ".", {
  "out": null
}, "Let", {
  "id": "bodyArg"
}, "be", {
  "id": "args"
}, "[", {
  "id": "k"
}, "]", ".", {
  "out": null
}, {
  "k": 14
}, "Let", {
  "id": "bodyString"
}, "be", "the", "string", "-", "concatenation", "of", "0x000A", "(", "LINE", "FEED", ")", ",", "?", "ToString", "(", {
  "id": "bodyArg"
}, ")", ",", "and", "0x000A", "(", "LINE", "FEED", ")", ".", {
  "k": 15
}, "Perform", "the", "following", "substeps", "in", "an", "implementation", "-", "dependent", "order", ",", "possibly", "interleaving", "parsing", "and", "error", "detection", ":", {
  "in": null
}, "Let", {
  "id": "parameters"
}, "be", "the", "result", "of", "parsing", "!", "UTF16DecodeString", "(", {
  "id": "P"
}, ")", ",", "using", {
  "id": "parameterGoal"
}, "as", "the", "goal", "symbol", ".", "Throw", "a", {
  "value": "SyntaxError"
}, "exception", "if", "the", "parse", "fails", ".", "Let", {
  "id": "body"
}, "be", "the", "result", "of", "parsing", "!", "UTF16DecodeString", "(", {
  "id": "bodyString"
}, ")", ",", "using", {
  "id": "goal"
}, "as", "the", "goal", "symbol", ".", "Throw", "a", {
  "value": "SyntaxError"
}, "exception", "if", "the", "parse", "fails", ".", "Let", {
  "id": "strict"
}, "be", "ContainsUseStrict", "of", {
  "id": "body"
}, ".", "If", "any", "static", "semantics", "errors", "are", "detected", "for", {
  "id": "parameters"
}, "or", {
  "id": "body"
}, ",", "throw", "a", {
  "value": "SyntaxError"
}, "exception", ".", "If", {
  "id": "strict"
}, "is", {
  "value": "true"
}, ",", "the", "Early", "Error", "rules", "for", {
  "grammar": "UniqueFormalParameters0",
  "subs": ["FormalParameters"]
}, "are", "applied", ".", "If", {
  "id": "strict"
}, "is", {
  "value": "true"
}, "and", "IsSimpleParameterList", "of", {
  "id": "parameters"
}, "is", {
  "value": "false"
}, ",", "throw", "a", {
  "value": "SyntaxError"
}, "exception", ".", "If", "any", "element", "of", "the", "BoundNames", "of", {
  "id": "parameters"
}, "also", "occurs", "in", "the", "LexicallyDeclaredNames", "of", {
  "id": "body"
}, ",", "throw", "a", {
  "value": "SyntaxError"
}, "exception", ".", "If", {
  "id": "body"
}, "Contains", {
  "nt": "SuperCall"
}, "is", {
  "value": "true"
}, ",", "throw", "a", {
  "value": "SyntaxError"
}, "exception", ".", "If", {
  "id": "parameters"
}, "Contains", {
  "nt": "SuperCall"
}, "is", {
  "value": "true"
}, ",", "throw", "a", {
  "value": "SyntaxError"
}, "exception", ".", "If", {
  "id": "body"
}, "Contains", {
  "nt": "SuperProperty"
}, "is", {
  "value": "true"
}, ",", "throw", "a", {
  "value": "SyntaxError"
}, "exception", ".", "If", {
  "id": "parameters"
}, "Contains", {
  "nt": "SuperProperty"
}, "is", {
  "value": "true"
}, ",", "throw", "a", {
  "value": "SyntaxError"
}, "exception", ".", "If", {
  "id": "kind"
}, "is", {
  "const": "generator"
}, "or", {
  "const": "asyncGenerator"
}, ",", "then", {
  "in": null
}, "If", {
  "id": "parameters"
}, "Contains", {
  "nt": "YieldExpression"
}, "is", {
  "value": "true"
}, ",", "throw", "a", {
  "value": "SyntaxError"
}, "exception", ".", {
  "out": null
}, "If", {
  "id": "kind"
}, "is", {
  "const": "async"
}, "or", {
  "const": "asyncGenerator"
}, ",", "then", {
  "in": null
}, "If", {
  "id": "parameters"
}, "Contains", {
  "nt": "AwaitExpression"
}, "is", {
  "value": "true"
}, ",", "throw", "a", {
  "value": "SyntaxError"
}, "exception", ".", {
  "out": null
}, "If", {
  "id": "strict"
}, "is", {
  "value": "true"
}, ",", "then", {
  "in": null
}, "If", "BoundNames", "of", {
  "id": "parameters"
}, "contains", "any", "duplicate", "elements", ",", "throw", "a", {
  "value": "SyntaxError"
}, "exception", ".", {
  "out": null
}, {
  "out": null
}, {
  "k": 16
}, "Let", {
  "id": "proto"
}, "be", "?", "GetPrototypeFromConstructor", "(", {
  "id": "newTarget"
}, ",", {
  "id": "fallbackProto"
}, ")", ".", {
  "k": 17
}, "Let", {
  "id": "realmF"
}, "be", "the", "current", "Realm", "Record", ".", {
  "k": 18
}, "Let", {
  "id": "scope"
}, "be", {
  "id": "realmF"
}, ".", "[", "[", "GlobalEnv", "]", "]", ".", {
  "k": 19
}, "Let", {
  "id": "F"
}, "be", "!", "OrdinaryFunctionCreate", "(", {
  "id": "proto"
}, ",", {
  "id": "parameters"
}, ",", {
  "id": "body"
}, ",", {
  "const": "non-lexical-this"
}, ",", {
  "id": "scope"
}, ")", ".", {
  "k": 20
}, "If", {
  "id": "kind"
}, "is", {
  "const": "generator"
}, ",", "then", {
  "in": null
}, "Let", {
  "id": "prototype"
}, "be", "OrdinaryObjectCreate", "(", "%", "Generator", ".", "prototype", "%", ")", ".", "Perform", "DefinePropertyOrThrow", "(", {
  "id": "F"
}, ",", {
  "value": "\"prototype\""
}, ",", "PropertyDescriptor", "{", "[", "[", "Value", "]", "]", ":", {
  "id": "prototype"
}, ",", "[", "[", "Writable", "]", "]", ":", {
  "value": "true"
}, ",", "[", "[", "Enumerable", "]", "]", ":", {
  "value": "false"
}, ",", "[", "[", "Configurable", "]", "]", ":", {
  "value": "false"
}, "}", ")", ".", {
  "out": null
}, {
  "k": 21
}, "Else", "if", {
  "id": "kind"
}, "is", {
  "const": "asyncGenerator"
}, ",", "then", {
  "in": null
}, "Let", {
  "id": "prototype"
}, "be", "OrdinaryObjectCreate", "(", "%", "AsyncGenerator", ".", "prototype", "%", ")", ".", "Perform", "DefinePropertyOrThrow", "(", {
  "id": "F"
}, ",", {
  "value": "\"prototype\""
}, ",", "PropertyDescriptor", "{", "[", "[", "Value", "]", "]", ":", {
  "id": "prototype"
}, ",", "[", "[", "Writable", "]", "]", ":", {
  "value": "true"
}, ",", "[", "[", "Enumerable", "]", "]", ":", {
  "value": "false"
}, ",", "[", "[", "Configurable", "]", "]", ":", {
  "value": "false"
}, "}", ")", ".", {
  "out": null
}, {
  "k": 22
}, "Else", "if", {
  "id": "kind"
}, "is", {
  "const": "normal"
}, ",", "perform", "MakeConstructor", "(", {
  "id": "F"
}, ")", ".", {
  "k": 23
}, "NOTE", ":", "Async", "functions", "are", "not", "constructable", "and", "do", "not", "have", "a", "[", "[", "Construct", "]", "]", "internal", "method", "or", "a", {
  "value": "\"prototype\""
}, "property", ".", {
  "k": 24
}, "Perform", "SetFunctionName", "(", {
  "id": "F"
}, ",", {
  "value": "\"anonymous\""
}, ")", ".", {
  "k": 25
}, "Let", {
  "id": "prefix"
}, "be", "the", "prefix", "associated", "with", {
  "id": "kind"
}, "in", "Table", "48", ".", {
  "k": 26
}, "Let", {
  "id": "sourceString"
}, "be", "the", "string", "-", "concatenation", "of", {
  "id": "prefix"
}, ",", {
  "value": "\" anonymous(\""
}, ",", {
  "id": "P"
}, ",", "0x000A", "(", "LINE", "FEED", ")", ",", {
  "value": "\") {\""
}, ",", {
  "id": "bodyString"
}, ",", "and", {
  "value": "\"}\""
}, ".", {
  "k": 27
}, "Set", {
  "id": "F"
}, ".", "[", "[", "SourceText", "]", "]", "to", "!", "UTF16DecodeString", "(", {
  "id": "sourceString"
}, ")", ".", {
  "k": 28
}, "Return", {
  "id": "F"
}, ".", {
  "k": 29
}]