{
  app __x0__ = (IsDetachedBuffer arrayBuffer)
  assert (= __x0__ false)
  let block = arrayBuffer.ArrayBufferData
  ??? "Let id:{elementSize} be the Number value of the Element Size value specified in link:{unhandled: table-49} for Element Type id:{type} ."
  ??? "Let id:{rawValue} be a List of id:{elementSize} containing , in order , the id:{elementSize} sequence of bytes starting with id:{block} [ id:{byteIndex} ] ."
  ??? "If id:{isLittleEndian} is not present , set id:{isLittleEndian} to either value:{true} or value:{false} . The choice is implementation dependent and should be the alternative that is most efficient for the implementation . An implementation must use the same value each time this step is executed and the same value must be used for the corresponding step in the SetValueInBuffer abstract operation ."
  ??? "If id:{isLittleEndian} is value:{false} , reverse the order of the elements of id:{rawValue} ."
  if (= type "Float32") {
    ??? "Let id:{value} be the byte elements of id:{rawValue} concatenated and interpreted as a little - endian bit string encoding of an IEEE 754 - 2008 binary32 value ."
    ??? "If id:{value} is an IEEE 754 - 2008 binary32 NaN value , return the value:{NaN} Number value ."
    app __x1__ = (WrapCompletion value)
    return __x1__
  } else {}
  if (= type "Float64") {
    ??? "Let id:{value} be the byte elements of id:{rawValue} concatenated and interpreted as a little - endian bit string encoding of an IEEE 754 - 2008 binary64 value ."
    ??? "If id:{value} is an IEEE 754 - 2008 binary64 NaN value , return the value:{NaN} Number value ."
    app __x2__ = (WrapCompletion value)
    return __x2__
  } else {}
  ??? "If the first code unit of id:{type} is code:{\"U\"} , then in:{} out:{}"
  ??? "Else , in:{} out:{}"
  app __x3__ = (WrapCompletion intValue)
  return __x3__
}