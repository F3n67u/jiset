{
  app iteratorRecord = (GetArgument argumentsList 0i)
  app constructor = (GetArgument argumentsList 1i)
  app resultCapability = (GetArgument argumentsList 2i)
  [0] app __x0__ = (IsConstructor constructor)
  [0] if (is-completion __x0__) if (= __x0__.Type CONST_normal) __x0__ = __x0__.Value else return __x0__ else [1] {}
  [0] assert (= __x0__ true)
  [2] let values = (new [])
  [3] let remainingElementsCount = (new Record("Value" -> 1i))
  [4] let index = 0i
  [5] app __x1__ = (Get constructor "resolve")
  [5] if (is-completion __x1__) if (= __x1__.Type CONST_normal) __x1__ = __x1__.Value else return __x1__ else [1] {}
  [5] let promiseResolve = __x1__
  [6] app __x2__ = (IsCallable promiseResolve)
  [6] if (= __x2__ false) {
    app __x3__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_TypeError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
    return __x3__
  } else [1] {}
  [7] while true {
    [8] app __x4__ = (IteratorStep iteratorRecord)
    [8] let next = __x4__
    [9] app __x5__ = (IsAbruptCompletion next)
    [9] if __x5__ iteratorRecord.Done = true else [1] {}
    [10] if (is-completion next) if (= next.Type CONST_normal) next = next.Value else return next else [1] {}
    [10] next
    [11] if (= next false) {
      [12] iteratorRecord.Done = true
      [13] remainingElementsCount.Value = (- remainingElementsCount.Value 1i)
      [14] if (= remainingElementsCount.Value 0i) {
        [15] app __x6__ = (CreateArrayFromList values)
        [15] if (is-completion __x6__) if (= __x6__.Type CONST_normal) __x6__ = __x6__.Value else return __x6__ else [1] {}
        [15] let valuesArray = __x6__
        [16] app __x7__ = (Call resultCapability.Resolve undefined (new [valuesArray]))
        [16] if (is-completion __x7__) if (= __x7__.Type CONST_normal) __x7__ = __x7__.Value else return __x7__ else [1] {}
        [16] __x7__
      } else [1] {}
      [17] app __x8__ = (WrapCompletion resultCapability.Promise)
      [17] return __x8__
    } else [1] {}
    [18] app __x9__ = (IteratorValue next)
    [18] let nextValue = __x9__
    [19] app __x10__ = (IsAbruptCompletion nextValue)
    [19] if __x10__ iteratorRecord.Done = true else [1] {}
    [20] if (is-completion nextValue) if (= nextValue.Type CONST_normal) nextValue = nextValue.Value else return nextValue else [1] {}
    [20] nextValue
    [21] append undefined -> values
    [22] app __x11__ = (Call promiseResolve constructor (new [nextValue]))
    [22] if (is-completion __x11__) if (= __x11__.Type CONST_normal) __x11__ = __x11__.Value else return __x11__ else [1] {}
    [22] let nextPromise = __x11__
    [23] ??? "Let id:{steps} be the algorithm steps defined in link:{} ."
    [24] app __x12__ = (CreateBuiltinFunction steps (new ["AlreadyCalled", "Index", "Values", "Capability", "RemainingElements"]))
    [24] if (is-completion __x12__) if (= __x12__.Type CONST_normal) __x12__ = __x12__.Value else return __x12__ else [1] {}
    [24] let resolveElement = __x12__
    [25] let alreadyCalled = (new Record("Value" -> false))
    [26] resolveElement.AlreadyCalled = alreadyCalled
    [27] resolveElement.Index = index
    [28] resolveElement.Values = values
    [29] resolveElement.Capability = resultCapability
    [30] resolveElement.RemainingElements = remainingElementsCount
    [31] ??? "Let id:{rejectSteps} be the algorithm steps defined in link:{} ."
    [32] app __x13__ = (CreateBuiltinFunction rejectSteps (new ["AlreadyCalled", "Index", "Values", "Capability", "RemainingElements"]))
    [32] if (is-completion __x13__) if (= __x13__.Type CONST_normal) __x13__ = __x13__.Value else return __x13__ else [1] {}
    [32] let rejectElement = __x13__
    [33] rejectElement.AlreadyCalled = alreadyCalled
    [34] rejectElement.Index = index
    [35] rejectElement.Values = values
    [36] rejectElement.Capability = resultCapability
    [37] rejectElement.RemainingElements = remainingElementsCount
    [38] remainingElementsCount.Value = (+ remainingElementsCount.Value 1i)
    [39] app __x14__ = (Invoke nextPromise "then" (new [resolveElement, rejectElement]))
    [39] if (is-completion __x14__) if (= __x14__.Type CONST_normal) __x14__ = __x14__.Value else return __x14__ else [1] {}
    [39] __x14__
    [40] index = (+ index 1i)
  }
}