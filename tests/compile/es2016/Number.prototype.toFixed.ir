{
  app fractionDigits = (GetArgument argumentsList 0i)
  [0] app __x0__ = (thisNumberValue this)
  [0] if (is-completion __x0__) if (= __x0__.Type CONST_normal) __x0__ = __x0__.Value else return __x0__ else [2] {}
  [0] let x = __x0__
  [1] app __x1__ = (ToInteger fractionDigits)
  [1] if (is-completion __x1__) if (= __x1__.Type CONST_normal) __x1__ = __x1__.Value else return __x1__ else [2] {}
  [1] let f = __x1__
  [2] if (|| (< f 0i) (< 20i f)) {
    app __x2__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_RangeError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
    return __x2__
  } else [2] {}
  [3] if (= x NaN) {
    app __x3__ = (WrapCompletion "NaN")
    return __x3__
  } else [2] {}
  [4] let s = ""
  [5] if (< x 0i) {
    [6] let s = "-"
    [7] let x = (- x)
  } else [2] {}
  [10] if (! (< x 9223372036854775807i)) {
    [9] app __x4__ = (ToString x)
    [9] if (is-completion __x4__) if (= __x4__.Type CONST_normal) __x4__ = __x4__.Value else return __x4__ else [2] {}
    [9] let m = __x4__
  } else {
    [11] ??? "Let id:{n} be an integer for which the exact mathematical value of id:{n} รท 10 sup:{id:{f} } - id:{x} is as close to zero as possible . If there are two such id:{n} , pick the larger id:{n} ."
    [12] ??? "If id:{n} = 0 , let id:{m} be the String code:{\"0\"} . Otherwise , let id:{m} be the String consisting of the digits of the decimal representation of id:{n} ( in order , with no leading zeroes ) ."
    [13] if (! (== f 0i)) {
      [14] let k = m.length
      [15] if (! (< f k)) {
        [16] ??? "Let id:{z} be the String consisting of id:{f} + 1 - id:{k} occurrences of the code unit 0x0030 ( DIGIT ZERO ) ."
        [17] let m = (+ z m)
        [18] let k = (+ f 1i)
      } else [2] {}
      [19] ??? "Let id:{a} be the first id:{k} - id:{f} elements of id:{m} , and let id:{b} be the remaining id:{f} elements of id:{m} ."
      [20] ??? "Let id:{m} be the concatenation of the three Strings id:{a} , code:{\".\"} , and id:{b} ."
    } else [2] {}
  }
  [21] app __x5__ = (WrapCompletion (+ s m))
  [21] return __x5__
}