<algorithm>
  <param>DestructuringAssignmentTarget</param>
  <param>Initializer</param>
  <step-list>
    <step>If DestructuringAssignmentTarget is neither an ObjectLiteral nor an ArrayLiteral , then     <step-list>
      <step>Let <id>lref</id> be the result of evaluating DestructuringAssignmentTarget .</step>
      <step>ReturnIfAbrupt ( <id>lref</id> ).</step>
    </step-list></step>
    <step>Let <id>v</id> be ? GetV ( <id>value</id> , <id>propertyName</id> ).</step>
    <step>If Initializer is present and <id>v</id> is <value>undefined</value> , then     <step-list>
      <step>Let <id>defaultValue</id> be the result of evaluating Initializer .</step>
      <step>Let <id>rhsValue</id> be ? GetValue ( <id>defaultValue</id> ).</step>
    </step-list></step>
    <step>Else, let <id>rhsValue</id> be <id>v</id> .</step>
    <step>If DestructuringAssignmentTarget is an ObjectLiteral or an ArrayLiteral , then     <step-list>
      <step>Let <id>assignmentPattern</id> be the AssignmentPattern that is covered by DestructuringAssignmentTarget .</step>
      <step>Return the result of performing DestructuringAssignmentEvaluation of <id>assignmentPattern</id> with <id>rhsValue</id> as the argument.</step>
    </step-list></step>
    <step>If Initializer is present and <id>v</id> is <value>undefined</value> and IsAnonymousFunctionDefinition ( Initializer ) and IsIdentifierRef of DestructuringAssignmentTarget are both <value>true</value> , then     <step-list>
      <step>Let <id>hasNameProperty</id> be ? HasOwnProperty ( <id>rhsValue</id> , <value>"name"</value> ).</step>
      <step>If <id>hasNameProperty</id> is <value>false</value> , perform SetFunctionName ( <id>rhsValue</id> , GetReferencedName ( <id>lref</id> )).</step>
    </step-list></step>
    <step>Return ? PutValue ( <id>lref</id> , <id>rhsValue</id> ).</step>
  </step-list>
</algorithm>