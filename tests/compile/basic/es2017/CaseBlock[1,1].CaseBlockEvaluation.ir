{
  let V = undefined
  if (! (= CaseClauses0 absent)) ??? "Let id:{A} be the List of nt:{CaseClause} items in the first nt:{CaseClauses} , in source text order ." else let A = (new [])
  let found = false
  let __x0__ = A
  let __x1__ = 0i
  while (< __x1__ __x0__.length) {
    let C = __x0__[__x1__]
    if (= found false) {
      access __x2__ = (C "CaseSelectorEvaluation")
      let clauseSelector = __x2__
      [? clauseSelector]
      app __x3__ = (StrictEqualityComparison input clauseSelector)
      found = __x3__
    } else {}
    if (= found true) {
      access __x4__ = (C "Evaluation")
      let R = __x4__
      if (! (= R.Value CONST_empty)) V = R.Value else {}
      app __x5__ = (IsAbruptCompletion R)
      if __x5__ {
        app __x6__ = (UpdateEmpty R V)
        app __x7__ = (Completion __x6__)
        return __x7__
      } else {}
    } else {}
    __x1__ = (+ __x1__ 1i)
  }
  let foundInB = false
  if (! (= CaseClauses1 absent)) ??? "Let id:{B} be the List of nt:{CaseClause} items in the second nt:{CaseClauses} , in source text order ." else let B = (new [])
  if (= found false) {
    let __x8__ = B
    let __x9__ = 0i
    while (< __x9__ __x8__.length) {
      let C = __x8__[__x9__]
      if (= foundInB false) {
        access __x10__ = (C "CaseSelectorEvaluation")
        let clauseSelector = __x10__
        [? clauseSelector]
        app __x11__ = (StrictEqualityComparison input clauseSelector)
        foundInB = __x11__
      } else {}
      if (= foundInB true) {
        access __x12__ = (C "Evaluation")
        let R = __x12__
        if (! (= R.Value CONST_empty)) V = R.Value else {}
        app __x13__ = (IsAbruptCompletion R)
        if __x13__ {
          app __x14__ = (UpdateEmpty R V)
          app __x15__ = (Completion __x14__)
          return __x15__
        } else {}
      } else {}
      __x9__ = (+ __x9__ 1i)
    }
  } else {}
  if (= foundInB true) {
    app __x16__ = (NormalCompletion V)
    return __x16__
  } else {}
  access __x17__ = (DefaultClause "Evaluation")
  let R = __x17__
  if (! (= R.Value CONST_empty)) V = R.Value else {}
  app __x18__ = (IsAbruptCompletion R)
  if __x18__ {
    app __x19__ = (UpdateEmpty R V)
    app __x20__ = (Completion __x19__)
    return __x20__
  } else {}
  let __x21__ = B
  let __x22__ = 0i
  while (< __x22__ __x21__.length) {
    let C = __x21__[__x22__]
    access __x23__ = (C "Evaluation")
    let R = __x23__
    if (! (= R.Value CONST_empty)) V = R.Value else {}
    app __x24__ = (IsAbruptCompletion R)
    if __x24__ {
      app __x25__ = (UpdateEmpty R V)
      app __x26__ = (Completion __x25__)
      return __x26__
    } else {}
    __x22__ = (+ __x22__ 1i)
  }
  app __x27__ = (NormalCompletion V)
  return __x27__
}