{
  [1] app __x0__ = (Type S)
  [1] assert (= __x0__ String)
  [2] let length = S.length
  [3] app __x1__ = (Get R "lastIndex")
  [3] if (is-completion __x1__) if (= __x1__.Type CONST_normal) __x1__ = __x1__.Value else return __x1__ else [46] {}
  [3] app __x2__ = (ToLength __x1__)
  [3] if (is-completion __x2__) if (= __x2__.Type CONST_normal) __x2__ = __x2__.Value else return __x2__ else [46] {}
  [3] let lastIndex = __x2__
  [4] let flags = R.OriginalFlags
  [5] if (contains flags "g") let global = true else let global = false
  [6] if (contains flags "y") let sticky = true else let sticky = false
  [7] if (&& (= global false) (= sticky false)) lastIndex = 0i else [46] {}
  [8] let matcher = R.RegExpMatcher
  [9] if (contains flags "u") let fullUnicode = true else let fullUnicode = false
  [10] let matchSucceeded = false
  [11] while (= matchSucceeded false) {
    [12] if (< length lastIndex) {
      [13] if (|| (= global true) (= sticky true)) {
        [14] app __x3__ = (Set R "lastIndex" 0i true)
        [14] if (is-completion __x3__) if (= __x3__.Type CONST_normal) __x3__ = __x3__.Value else return __x3__ else [46] {}
        [14] __x3__
      } else [46] {}
      [15] app __x4__ = (WrapCompletion null)
      [15] return __x4__
    } else [46] {}
    [16] app __x5__ = (matcher S lastIndex)
    [16] let r = __x5__
    [22] if (= r CONST_failure) {
      [18] if (= sticky true) {
        [19] app __x6__ = (Set R "lastIndex" 0i true)
        [19] if (is-completion __x6__) if (= __x6__.Type CONST_normal) __x6__ = __x6__.Value else return __x6__ else [46] {}
        [19] __x6__
        [20] app __x7__ = (WrapCompletion null)
        [20] return __x7__
      } else [46] {}
      [21] app __x8__ = (AdvanceStringIndex S lastIndex fullUnicode)
      [21] lastIndex = __x8__
    } else matchSucceeded = true
  }
  [25] let e = r.endIndex
  [26] if (= fullUnicode true) {
    [27] ??? "id:{e} is an index into the id:{Input} character list , derived from id:{S} , matched by id:{matcher} . Let id:{eUTF} be the smallest index into id:{S} that corresponds to the character at element id:{e} of id:{Input} . If id:{e} is greater than or equal to the length of id:{Input} , then id:{eUTF} is the number of code units in id:{S} ."
    [28] e = eUTF
  } else [46] {}
  [29] if (|| (= global true) (= sticky true)) {
    [30] app __x9__ = (Set R "lastIndex" e true)
    [30] if (is-completion __x9__) if (= __x9__.Type CONST_normal) __x9__ = __x9__.Value else return __x9__ else [46] {}
    [30] __x9__
  } else [46] {}
  [31] ??? "Let id:{n} be the length of id:{r} ' s id:{captures} List . ( This is the same value as link:{} ' s id:{NcapturingParens} . )"
  [32] app __x10__ = (ArrayCreate (+ n 1i))
  [32] if (is-completion __x10__) if (= __x10__.Type CONST_normal) __x10__ = __x10__.Value else return __x10__ else [46] {}
  [32] let A = __x10__
  [34] let matchIndex = lastIndex
  [35] app __x11__ = (CreateDataProperty A "index" matchIndex)
  [35] if (is-completion __x11__) if (= __x11__.Type CONST_normal) __x11__ = __x11__.Value else return __x11__ else [46] {}
  [35] __x11__
  [36] app __x12__ = (CreateDataProperty A "input" S)
  [36] if (is-completion __x12__) if (= __x12__.Type CONST_normal) __x12__ = __x12__.Value else return __x12__ else [46] {}
  [36] __x12__
  [37] ??? "Let id:{matchedSubstr} be the matched substring ( i . e . the portion of id:{S} between offset id:{lastIndex} inclusive and offset id:{e} exclusive ) ."
  [38] app __x13__ = (CreateDataProperty A "0" matchedSubstr)
  [38] if (is-completion __x13__) if (= __x13__.Type CONST_normal) __x13__ = __x13__.Value else return __x13__ else [46] {}
  [38] __x13__
  [39] let i = (+ 0i 1i)
  [39] let __x14__ = (+ n 1i)
  [39] while (< i __x14__) {
    [40] ??? "Let id:{captureI} be id:{i} sup:{th } element of id:{r} ' s id:{captures} List ."
    [45] if (= captureI undefined) let capturedValue = undefined else if (= fullUnicode true) ??? "Let id:{capturedValue} be a String value whose code units are the UTF16Encoding of the code points of id:{captureI} ." else let capturedValue = captureI
    [48] app __x15__ = (ToString i)
    [48] if (is-completion __x15__) if (= __x15__.Type CONST_normal) __x15__ = __x15__.Value else return __x15__ else [46] {}
    [48] app __x16__ = (CreateDataProperty A __x15__ capturedValue)
    [48] if (is-completion __x16__) if (= __x16__.Type CONST_normal) __x16__ = __x16__.Value else return __x16__ else [46] {}
    [48] __x16__
  }
  [49] app __x17__ = (WrapCompletion A)
  [49] return __x17__
}