digraph {
  node10567 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let newTarget = constructor</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10594 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">__x3__ = (= __x5__ false)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10570 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">6:let goal = &quot;GeneratorBody&quot;</td></tr>
      <tr><td align="left">7:let parameterGoal = &quot;FormalParameters[Yield]&quot;</td></tr>
      <tr><td align="left">8:let fallbackProto = INTRINSIC_Generator</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10574 [shape=diamond, label=<<font color="black">(== argCount 1i)</font>> color="black" fillcolor="white" style=filled]
  node10612 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw SyntaxError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10566 [shape=diamond, label=<<font color="black">(= newTarget undefined)</font>> color="black" fillcolor="white" style=filled]
  node10620 [shape=cds, label=<<font color="black">35:access __x17__ = (__x17__ &quot;Contains&quot; &quot;YieldExpression&quot;)</font>> color="black" fillcolor="white" style=filled]
  node10582 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">19:let nextArgString = [? __x1__]</td></tr>
      <tr><td align="left">20:let P = (+ (+ P &quot;,&quot;) nextArgString)</td></tr>
      <tr><td align="left">21:k = (+ k 1i)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10576 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">14:let firstArg = args[0i]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10568 [shape=diamond, label=<<font color="black">(= kind &quot;normal&quot;)</font>> color="black" fillcolor="white" style=filled]
  node10600 [shape=diamond, label=<<font color="black">(&lt; __x10__ __x8__.length)</font>> color="black" fillcolor="white" style=filled]
  node10622 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw SyntaxError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10618 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw SyntaxError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10609 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw SyntaxError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10638 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">45:__x24__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10577 [shape=cds, label=<<font color="black">15:app __x0__ = (ToString firstArg)</font>> color="black" fillcolor="white" style=filled]
  node10616 [shape=cds, label=<<font color="black">33:access __x16__ = (__x16__ &quot;Contains&quot; &quot;SuperProperty&quot;)</font>> color="black" fillcolor="white" style=filled]
  node10599 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">29:let __x8__ = __x6__</td></tr>
      <tr><td align="left">29:let __x9__ = __x7__</td></tr>
      <tr><td align="left">29:let __x10__ = 0i</td></tr>
      <tr><td align="left">29:let __x11__ = 0i</td></tr>
      <tr><td align="left">29:let __x12__ = false</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10633 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">42:__x22__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10584 [shape=cds, label=<<font color="black">23:app __x2__ = (ToString bodyText)</font>> color="black" fillcolor="white" style=filled]
  node10619 [shape=diamond, label=<<font color="black">(= kind &quot;generator&quot;)</font>> color="black" fillcolor="white" style=filled]
  node10606 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw SyntaxError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10630 [shape=cds, label=<<font color="black">39:app __x21__ = (FunctionAllocate proto strict kind)</font>> color="black" fillcolor="white" style=filled]
  node10587 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let strict = true</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10641 [shape=cds, label=<<font color="black">47:app __x26__ = (SetFunctionName F &quot;anonymous&quot;)</font>> color="black" fillcolor="white" style=filled]
  node10626 [shape=diamond, label=<<font color="black">__x19__</font>> color="black" fillcolor="white" style=filled]
  node10602 [shape=diamond, label=<<font color="black">(&lt; __x11__ __x9__.length)</font>> color="black" fillcolor="white" style=filled]
  node10623 [shape=diamond, label=<<font color="black">(= strict true)</font>> color="black" fillcolor="white" style=filled]
  node10591 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">28:__x3__ = (= __x4__ true)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10593 [shape=cds, label=<<font color="black">access __x5__ = (parameters &quot;IsSimpleParameterList&quot;)</font>> color="black" fillcolor="white" style=filled]
  node10598 [shape=cds, label=<<font color="black">29:access __x7__ = (body &quot;LexicallyDeclaredNames&quot;)</font>> color="black" fillcolor="white" style=filled]
  node10639 [shape=cds, label=<<font color="black">app __x25__ = (MakeConstructor F)</font>> color="black" fillcolor="white" style=filled]
  node10634 [shape=diamond, label=<<font color="black">(= kind &quot;generator&quot;)</font>> color="black" fillcolor="white" style=filled]
  node10583 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">22:let bodyText = args[k]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10615 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw SyntaxError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10580 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">18:let nextArg = args[k]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10575 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let bodyText = args[0i]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10603 [shape=diamond, label=<<font color="black">(= __x8__[__x10__] __x9__[__x11__])</font>> color="black" fillcolor="white" style=filled]
  node10629 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">38:let proto = [? __x20__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10588 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let strict = false</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10597 [shape=cds, label=<<font color="black">29:access __x6__ = (parameters &quot;BoundNames&quot;)</font>> color="black" fillcolor="white" style=filled]
  node10614 [shape=diamond, label=<<font color="black">(= __x15__ true)</font>> color="black" fillcolor="white" style=filled]
  node10635 [shape=cds, label=<<font color="black">44:app __x23__ = (ObjectCreate INTRINSIC_GeneratorPrototype)</font>> color="black" fillcolor="white" style=filled]
  node10624 [shape=cds, label=<<font color="black">37:access __x18__ = (parameters &quot;BoundNames&quot;)</font>> color="black" fillcolor="white" style=filled]
  node10592 [shape=diamond, label=<<font color="black">__x3__</font>> color="black" fillcolor="white" style=filled]
  node10571 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">9:let argCount = args.length</td></tr>
      <tr><td align="left">10:let P = &quot;&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10607 [shape=cds, label=<<font color="black">30:access __x13__ = (__x13__ &quot;Contains&quot; &quot;SuperCall&quot;)</font>> color="black" fillcolor="white" style=filled]
  node10625 [shape=cds, label=<<font color="black">37:app __x19__ = (IsDuplicate __x18__)</font>> color="black" fillcolor="white" style=filled]
  node10611 [shape=diamond, label=<<font color="black">(= __x14__ true)</font>> color="black" fillcolor="white" style=filled]
  node10640 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">__x25__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10596 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw SyntaxError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10565 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node10564 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node10621 [shape=diamond, label=<<font color="black">(= __x17__ true)</font>> color="black" fillcolor="white" style=filled]
  node10628 [shape=cds, label=<<font color="black">38:app __x20__ = (GetPrototypeFromConstructor newTarget fallbackProto)</font>> color="black" fillcolor="white" style=filled]
  node10579 [shape=diamond, label=<<font color="black">(&lt; k (- argCount 1i))</font>> color="black" fillcolor="white" style=filled]
  node10617 [shape=diamond, label=<<font color="black">(= __x16__ true)</font>> color="black" fillcolor="white" style=filled]
  node10632 [shape=cds, label=<<font color="black">42:app __x22__ = (FunctionInitialize F CONST_Normal parameters body scope)</font>> color="black" fillcolor="white" style=filled]
  node10589 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">27:??? &quot;If any static semantics errors are detected for id:{parameters} or id:{body} , throw a value:{SyntaxError} or a value:{ReferenceError} exception , depending on the type of the error . If id:{strict} is value:{true} , the Early Error rules for grammar:{StrictFormalParameters0, [FormalParameters]} are applied . Parsing and early error detection may be interweaved in an implementation dependent manner .&quot;</td></tr>
      <tr><td align="left">28:let __x3__ = true</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10604 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">__x12__ = true</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10581 [shape=cds, label=<<font color="black">19:app __x1__ = (ToString nextArg)</font>> color="black" fillcolor="white" style=filled]
  node10572 [shape=diamond, label=<<font color="black">(== argCount 0i)</font>> color="black" fillcolor="white" style=filled]
  node10636 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">44:let prototype = __x23__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10585 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">23:let bodyText = [? __x2__]</td></tr>
      <tr><td align="left">24:??? &quot;Let id:{parameters} be the result of parsing id:{P} , interpreted as UTF - 16 encoded Unicode text as described in link:{unhandled: sec-ecmascript-language-types-string-type} , using id:{parameterGoal} as the goal symbol . Throw a value:{SyntaxError} exception if the parse fails .&quot;</td></tr>
      <tr><td align="left">25:??? &quot;Let id:{body} be the result of parsing id:{bodyText} , interpreted as UTF - 16 encoded Unicode text as described in link:{unhandled: sec-ecmascript-language-types-string-type} , using id:{goal} as the goal symbol . Throw a value:{SyntaxError} exception if the parse fails .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10613 [shape=cds, label=<<font color="black">32:access __x15__ = (__x15__ &quot;Contains&quot; &quot;SuperProperty&quot;)</font>> color="black" fillcolor="white" style=filled]
  node10608 [shape=diamond, label=<<font color="black">(= __x13__ true)</font>> color="black" fillcolor="white" style=filled]
  node10595 [shape=diamond, label=<<font color="black">__x3__</font>> color="black" fillcolor="white" style=filled]
  node10637 [shape=cds, label=<<font color="black">45:app __x24__ = (DefinePropertyOrThrow F &quot;prototype&quot; (new PropertyDescriptor(&quot;Value&quot; -&gt; prototype, &quot;Writable&quot; -&gt; true, &quot;Enumerable&quot; -&gt; false, &quot;Configurable&quot; -&gt; false)))</font>> color="black" fillcolor="white" style=filled]
  node10578 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">15:let P = [? __x0__]</td></tr>
      <tr><td align="left">16:let k = 1i</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10605 [shape=diamond, label=<<font color="black">__x12__</font>> color="black" fillcolor="white" style=filled]
  node10610 [shape=cds, label=<<font color="black">31:access __x14__ = (__x14__ &quot;Contains&quot; &quot;SuperCall&quot;)</font>> color="black" fillcolor="white" style=filled]
  node10627 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw SyntaxError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10569 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">2:let goal = &quot;FunctionBody&quot;</td></tr>
      <tr><td align="left">3:let parameterGoal = &quot;FormalParameters&quot;</td></tr>
      <tr><td align="left">4:let fallbackProto = INTRINSIC_FunctionPrototype</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10601 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">__x11__ = 0i</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10631 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">39:let F = __x21__</td></tr>
      <tr><td align="left">40:let realmF = F.Realm</td></tr>
      <tr><td align="left">41:let scope = realmF.GlobalEnv</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10590 [shape=cds, label=<<font color="black">28:access __x4__ = (body &quot;ContainsUseStrict&quot;)</font>> color="black" fillcolor="white" style=filled]
  node10573 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let bodyText = &quot;&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10642 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">47:__x26__</td></tr>
      <tr><td align="left">48:return F</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10586 [shape=diamond, label=<<font color="black">true</font>> color="black" fillcolor="white" style=filled]
  node10587 -> node10589 [ color="black"]
  node10588 -> node10589 [ color="black"]
  node10598 -> node10599 [ color="black"]
  node10635 -> node10636 [ color="black"]
  node10582 -> node10579 [ color="black"]
  node10571 -> node10572 [ color="black"]
  node10617 -> node10618 [label=<<font color="black">true</font>> color="black"]
  node10617 -> node10619 [label=<<font color="black">false</font>> color="black"]
  node10569 -> node10571 [ color="black"]
  node10606 -> node10607 [ color="black"]
  node10634 -> node10635 [label=<<font color="black">true</font>> color="black"]
  node10634 -> node10639 [label=<<font color="black">false</font>> color="black"]
  node10637 -> node10638 [ color="black"]
  node10578 -> node10579 [ color="black"]
  node10629 -> node10630 [ color="black"]
  node10603 -> node10604 [label=<<font color="black">true</font>> color="black"]
  node10603 -> node10602 [label=<<font color="black">false</font>> color="black"]
  node10594 -> node10595 [ color="black"]
  node10608 -> node10609 [label=<<font color="black">true</font>> color="black"]
  node10608 -> node10610 [label=<<font color="black">false</font>> color="black"]
  node10580 -> node10581 [ color="black"]
  node10585 -> node10586 [ color="black"]
  node10626 -> node10627 [label=<<font color="black">true</font>> color="black"]
  node10626 -> node10628 [label=<<font color="black">false</font>> color="black"]
  node10641 -> node10642 [ color="black"]
  node10584 -> node10585 [ color="black"]
  node10592 -> node10593 [label=<<font color="black">true</font>> color="black"]
  node10592 -> node10595 [label=<<font color="black">false</font>> color="black"]
  node10572 -> node10573 [label=<<font color="black">true</font>> color="black"]
  node10572 -> node10574 [label=<<font color="black">false</font>> color="black"]
  node10593 -> node10594 [ color="black"]
  node10591 -> node10592 [ color="black"]
  node10615 -> node10616 [ color="black"]
  node10619 -> node10620 [label=<<font color="black">true</font>> color="black"]
  node10619 -> node10623 [label=<<font color="black">false</font>> color="black"]
  node10589 -> node10590 [ color="black"]
  node10630 -> node10631 [ color="black"]
  node10586 -> node10587 [label=<<font color="black">true</font>> color="black"]
  node10586 -> node10588 [label=<<font color="black">false</font>> color="black"]
  node10597 -> node10598 [ color="black"]
  node10583 -> node10584 [ color="black"]
  node10577 -> node10578 [ color="black"]
  node10633 -> node10634 [ color="black"]
  node10607 -> node10608 [ color="black"]
  node10596 -> node10597 [ color="black"]
  node10595 -> node10596 [label=<<font color="black">true</font>> color="black"]
  node10595 -> node10597 [label=<<font color="black">false</font>> color="black"]
  node10632 -> node10633 [ color="black"]
  node10614 -> node10615 [label=<<font color="black">true</font>> color="black"]
  node10614 -> node10616 [label=<<font color="black">false</font>> color="black"]
  node10636 -> node10637 [ color="black"]
  node10581 -> node10582 [ color="black"]
  node10627 -> node10628 [ color="black"]
  node10639 -> node10640 [ color="black"]
  node10574 -> node10575 [label=<<font color="black">true</font>> color="black"]
  node10574 -> node10576 [label=<<font color="black">false</font>> color="black"]
  node10621 -> node10622 [label=<<font color="black">true</font>> color="black"]
  node10621 -> node10623 [label=<<font color="black">false</font>> color="black"]
  node10567 -> node10568 [ color="black"]
  node10566 -> node10567 [label=<<font color="black">true</font>> color="black"]
  node10566 -> node10568 [label=<<font color="black">false</font>> color="black"]
  node10618 -> node10619 [ color="black"]
  node10579 -> node10580 [label=<<font color="black">true</font>> color="black"]
  node10579 -> node10583 [label=<<font color="black">false</font>> color="black"]
  node10601 -> node10602 [ color="black"]
  node10623 -> node10624 [label=<<font color="black">true</font>> color="black"]
  node10623 -> node10628 [label=<<font color="black">false</font>> color="black"]
  node10568 -> node10569 [label=<<font color="black">true</font>> color="black"]
  node10568 -> node10570 [label=<<font color="black">false</font>> color="black"]
  node10573 -> node10584 [ color="black"]
  node10640 -> node10641 [ color="black"]
  node10609 -> node10610 [ color="black"]
  node10605 -> node10606 [label=<<font color="black">true</font>> color="black"]
  node10605 -> node10607 [label=<<font color="black">false</font>> color="black"]
  node10625 -> node10626 [ color="black"]
  node10620 -> node10621 [ color="black"]
  node10613 -> node10614 [ color="black"]
  node10599 -> node10600 [ color="black"]
  node10564 -> node10566 [ color="black"]
  node10590 -> node10591 [ color="black"]
  node10611 -> node10612 [label=<<font color="black">true</font>> color="black"]
  node10611 -> node10613 [label=<<font color="black">false</font>> color="black"]
  node10612 -> node10613 [ color="black"]
  node10576 -> node10577 [ color="black"]
  node10616 -> node10617 [ color="black"]
  node10575 -> node10584 [ color="black"]
  node10624 -> node10625 [ color="black"]
  node10631 -> node10632 [ color="black"]
  node10602 -> node10603 [label=<<font color="black">true</font>> color="black"]
  node10602 -> node10600 [label=<<font color="black">false</font>> color="black"]
  node10642 -> node10565 [ color="black"]
  node10570 -> node10571 [ color="black"]
  node10628 -> node10629 [ color="black"]
  node10610 -> node10611 [ color="black"]
  node10600 -> node10601 [label=<<font color="black">true</font>> color="black"]
  node10600 -> node10605 [label=<<font color="black">false</font>> color="black"]
  node10604 -> node10602 [ color="black"]
  node10622 -> node10623 [ color="black"]
  node10638 -> node10641 [ color="black"]
}
