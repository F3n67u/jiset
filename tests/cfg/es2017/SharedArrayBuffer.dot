digraph {
  node15563 [shape=cds, label=<<font color="black">2:app __x1__ = (AllocateSharedArrayBuffer NewTarget byteLength)</font>> color="black" fillcolor="white" style=filled]
  node15559 [shape=diamond, label=<<font color="black">(= NewTarget undefined)</font>> color="black" fillcolor="white" style=filled]
  node15560 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15562 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">1:let byteLength = [? __x0__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15556 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node15557 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node15561 [shape=cds, label=<<font color="black">1:app __x0__ = (ToIndex length)</font>> color="black" fillcolor="white" style=filled]
  node15564 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">2:return [? __x1__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15558 [shape=cds, label=<<font color="black">app length = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node15556 -> node15558 [ color="black"]
  node15564 -> node15557 [ color="black"]
  node15560 -> node15561 [ color="black"]
  node15558 -> node15559 [ color="black"]
  node15563 -> node15564 [ color="black"]
  node15559 -> node15560 [label=<<font color="black">true</font>> color="black"]
  node15559 -> node15561 [label=<<font color="black">false</font>> color="black"]
  node15561 -> node15562 [ color="black"]
  node15562 -> node15563 [ color="black"]
}
