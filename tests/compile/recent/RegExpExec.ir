{
  [0] app __x0__ = (Type R)
  [0] assert (= __x0__ Object)
  [1] app __x1__ = (Type S)
  [1] assert (= __x1__ String)
  [2] app __x2__ = (Get R "exec")
  [2] if (is-completion __x2__) if (= __x2__.Type CONST_normal) __x2__ = __x2__.Value else return __x2__ else [14] {}
  [2] let exec = __x2__
  [3] app __x3__ = (IsCallable exec)
  [3] if (= __x3__ true) {
    [4] app __x4__ = (Call exec R (new [S]))
    [4] if (is-completion __x4__) if (= __x4__.Type CONST_normal) __x4__ = __x4__.Value else return __x4__ else [14] {}
    [4] let result = __x4__
    [5] app __x5__ = (Type result)
    [5] if (! (|| (= __x5__ Object) (= __x5__ Null))) {
      app __x6__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_TypeError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
      return __x6__
    } else [14] {}
    [6] app __x7__ = (WrapCompletion result)
    [6] return __x7__
  } else [14] {}
  [7] app __x8__ = (RequireInternalSlot R "RegExpMatcher")
  [7] if (is-completion __x8__) if (= __x8__.Type CONST_normal) __x8__ = __x8__.Value else return __x8__ else [14] {}
  [7] __x8__
  [8] app __x9__ = (RegExpBuiltinExec R S)
  [8] if (is-completion __x9__) if (= __x9__.Type CONST_normal) __x9__ = __x9__.Value else return __x9__ else [14] {}
  [8] app __x10__ = (WrapCompletion __x9__)
  [8] return __x10__
}