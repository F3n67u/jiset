digraph {
  node6085 [shape=cds, label=<<font color="black">3:app __x1__ = (GetV value propertyName)</font>> color="black" fillcolor="white" style=filled]
  node6106 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">14:return [? __x11__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node6089 [shape=cds, label=<<font color="black">7:access __x3__ = (DestructuringAssignmentTarget &quot;IsIdentifierRef&quot;)</font>> color="black" fillcolor="white" style=filled]
  node6102 [shape=cds, label=<<font color="black">13:access __x9__ = (assignmentPattern &quot;DestructuringAssignmentEvaluation&quot;)</font>> color="black" fillcolor="white" style=filled]
  node6095 [shape=cds, label=<<font color="black">8:access __x7__ = (Initializer &quot;Evaluation&quot;)</font>> color="black" fillcolor="white" style=filled]
  node6098 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">9:let rhsValue = [? __x8__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node6081 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node6103 [shape=cds, label=<<font color="black">13:app __x10__ = (__x9__ rhsValue)</font>> color="black" fillcolor="white" style=filled]
  node6092 [shape=cds, label=<<font color="black">6:access __x5__ = (Initializer &quot;NamedEvaluation&quot;)</font>> color="black" fillcolor="white" style=filled]
  node6101 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">12:let assignmentPattern = (parse-syntax DestructuringAssignmentTarget &quot;AssignmentPattern&quot; (new []))</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node6097 [shape=cds, label=<<font color="black">9:app __x8__ = (GetValue defaultValue)</font>> color="black" fillcolor="white" style=filled]
  node6084 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">1:let lref = __x0__</td></tr>
      <tr><td align="left">2:[? lref]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node6091 [shape=cds, label=<<font color="black">6:app __x4__ = (GetReferencedName lref)</font>> color="black" fillcolor="white" style=filled]
  node6100 [shape=diamond, label=<<font color="black">(|| (is-instance-of DestructuringAssignmentTarget ObjectLiteral) (is-instance-of DestructuringAssignmentTarget ArrayLiteral))</font>> color="black" fillcolor="white" style=filled]
  node6093 [shape=cds, label=<<font color="black">6:app __x6__ = (__x5__ __x4__)</font>> color="black" fillcolor="white" style=filled]
  node6094 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">6:let rhsValue = __x6__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node6096 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">8:let defaultValue = __x7__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node6090 [shape=diamond, label=<<font color="black">(&amp;&amp; (= __x2__ true) (= __x3__ true))</font>> color="black" fillcolor="white" style=filled]
  node6087 [shape=diamond, label=<<font color="black">(&amp;&amp; (! (= Initializer absent)) (= v undefined))</font>> color="black" fillcolor="white" style=filled]
  node6080 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node6083 [shape=cds, label=<<font color="black">1:access __x0__ = (DestructuringAssignmentTarget &quot;Evaluation&quot;)</font>> color="black" fillcolor="white" style=filled]
  node6088 [shape=cds, label=<<font color="black">7:app __x2__ = (IsAnonymousFunctionDefinition Initializer)</font>> color="black" fillcolor="white" style=filled]
  node6086 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">3:let v = [? __x1__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node6105 [shape=cds, label=<<font color="black">14:app __x11__ = (PutValue lref rhsValue)</font>> color="black" fillcolor="white" style=filled]
  node6099 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let rhsValue = v</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node6082 [shape=diamond, label=<<font color="black">(! (|| (is-instance-of DestructuringAssignmentTarget ObjectLiteral) (is-instance-of DestructuringAssignmentTarget ArrayLiteral)))</font>> color="black" fillcolor="white" style=filled]
  node6104 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">13:return __x10__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node6084 -> node6085 [ color="black"]
  node6100 -> node6101 [label=<<font color="black">true</font>> color="black"]
  node6100 -> node6105 [label=<<font color="black">false</font>> color="black"]
  node6101 -> node6102 [ color="black"]
  node6103 -> node6104 [ color="black"]
  node6088 -> node6089 [ color="black"]
  node6093 -> node6094 [ color="black"]
  node6082 -> node6083 [label=<<font color="black">true</font>> color="black"]
  node6082 -> node6085 [label=<<font color="black">false</font>> color="black"]
  node6080 -> node6082 [ color="black"]
  node6102 -> node6103 [ color="black"]
  node6092 -> node6093 [ color="black"]
  node6094 -> node6100 [ color="black"]
  node6089 -> node6090 [ color="black"]
  node6099 -> node6100 [ color="black"]
  node6105 -> node6106 [ color="black"]
  node6086 -> node6087 [ color="black"]
  node6083 -> node6084 [ color="black"]
  node6096 -> node6097 [ color="black"]
  node6097 -> node6098 [ color="black"]
  node6095 -> node6096 [ color="black"]
  node6098 -> node6100 [ color="black"]
  node6104 -> node6105 [ color="black"]
  node6087 -> node6088 [label=<<font color="black">true</font>> color="black"]
  node6087 -> node6099 [label=<<font color="black">false</font>> color="black"]
  node6091 -> node6092 [ color="black"]
  node6085 -> node6086 [ color="black"]
  node6090 -> node6091 [label=<<font color="black">true</font>> color="black"]
  node6090 -> node6095 [label=<<font color="black">false</font>> color="black"]
  node6106 -> node6081 [ color="black"]
}
