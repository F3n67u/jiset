digraph {
  node16520 [shape=cds, label=<<font color="black">1:app __x0__ = (ToIndex length)</font>> color="black" fillcolor="white" style=filled]
  node16523 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">2:return [? __x1__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16516 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node16519 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16521 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">1:let byteLength = [? __x0__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16517 [shape=cds, label=<<font color="black">app length = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node16522 [shape=cds, label=<<font color="black">2:app __x1__ = (AllocateArrayBuffer NewTarget byteLength)</font>> color="black" fillcolor="white" style=filled]
  node16515 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node16518 [shape=diamond, label=<<font color="black">(= NewTarget undefined)</font>> color="black" fillcolor="white" style=filled]
  node16522 -> node16523 [ color="black"]
  node16517 -> node16518 [ color="black"]
  node16515 -> node16517 [ color="black"]
  node16523 -> node16516 [ color="black"]
  node16520 -> node16521 [ color="black"]
  node16521 -> node16522 [ color="black"]
  node16518 -> node16519 [label=<<font color="black">true</font>> color="black"]
  node16518 -> node16520 [label=<<font color="black">false</font>> color="black"]
  node16519 -> node16520 [ color="black"]
}
