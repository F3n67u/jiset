def [SYNTAX] NonemptyClassRanges[2,0].EarlyErrors<ClassAtom `-` ClassAtom ClassRanges>() = {
  0:let __x0__ = true
  0:access __x1__ = (ClassAtom0 "IsCharacterClass")
  0:__x0__ = (= __x1__ true)
  0:if __x0__ 2:{} else {
    access __x2__ = (ClassAtom1 "IsCharacterClass")
    __x0__ = (= __x2__ true)
  }
  0:if __x0__ throw SyntaxError else 2:{}
  1:let __x3__ = true
  1:access __x4__ = (ClassAtom0 "IsCharacterClass")
  1:__x3__ = (= __x4__ false)
  1:if __x3__ {
    let __x5__ = true
    access __x6__ = (ClassAtom1 "IsCharacterClass")
    __x5__ = (= __x6__ false)
    if __x5__ {
      access __x7__ = (ClassAtom0 "CharacterValue")
      access __x8__ = (ClassAtom1 "CharacterValue")
      __x5__ = (< __x8__ __x7__)
    } else 2:{}
    __x3__ = __x5__
  } else 2:{}
  1:if __x3__ throw SyntaxError else 2:{}
}
- id: "sec-patterns-static-semantics-early-errors"
- code:
          <li>
            It is a Syntax Error if IsCharacterClass of the first |ClassAtom| is *true* or IsCharacterClass of the second |ClassAtom| is *true*.
          </li>
          <li>
            It is a Syntax Error if IsCharacterClass of the first |ClassAtom| is *false* and IsCharacterClass of the second |ClassAtom| is *false* and the CharacterValue of the first |ClassAtom| is larger than the CharacterValue of the second |ClassAtom|.
          </li>