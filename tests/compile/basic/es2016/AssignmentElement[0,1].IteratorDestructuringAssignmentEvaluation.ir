{
  if (! (|| (is-instance-of DestructuringAssignmentTarget ObjectLiteral) (is-instance-of DestructuringAssignmentTarget ArrayLiteral))) {
    access __x0__ = (DestructuringAssignmentTarget "Evaluation")
    let lref = __x0__
    [? lref]
  } else {}
  if (= iteratorRecord.Done false) {
    app __x1__ = (IteratorStep iteratorRecord.Iterator)
    let next = __x1__
    app __x2__ = (IsAbruptCompletion next)
    if __x2__ iteratorRecord.Done = true else {}
    [? next]
    if (= next false) iteratorRecord.Done = true else {
      app __x3__ = (IteratorValue next)
      let value = __x3__
      app __x4__ = (IsAbruptCompletion value)
      if __x4__ iteratorRecord.Done = true else {}
      [? value]
    }
  } else {}
  if (= iteratorRecord.Done true) let value = undefined else {}
  if (&& (! (= Initializer absent)) (= value undefined)) {
    access __x5__ = (Initializer "Evaluation")
    let defaultValue = __x5__
    app __x6__ = (GetValue defaultValue)
    let v = [? __x6__]
  } else let v = value
  if (|| (is-instance-of DestructuringAssignmentTarget ObjectLiteral) (is-instance-of DestructuringAssignmentTarget ArrayLiteral)) {
    ??? "Let id:{nestedAssignmentPattern} be the parse of the source text corresponding to nt:{DestructuringAssignmentTarget} using either nt:{AssignmentPattern} or nt:{AssignmentPattern[Yield]} as the goal symbol depending upon whether this nt:{AssignmentElement} has the sub:{[ Yield ]} parameter ."
    access __x7__ = (nestedAssignmentPattern "DestructuringAssignmentEvaluation")
    app __x8__ = (__x7__ v)
    return __x8__
  } else {}
  let __x9__ = true
  __x9__ = (! (= Initializer absent))
  if __x9__ {
    let __x10__ = true
    __x10__ = (= value undefined)
    if __x10__ {
      app __x11__ = (IsAnonymousFunctionDefinition Initializer)
      access __x12__ = (DestructuringAssignmentTarget "IsIdentifierRef")
      __x10__ = (&& (= __x11__ true) (= __x12__ true))
    } else {}
    __x9__ = __x10__
  } else {}
  if __x9__ {
    app __x13__ = (HasOwnProperty v "name")
    let hasNameProperty = [? __x13__]
    if (= hasNameProperty false) {
      app __x14__ = (GetReferencedName lref)
      app __x15__ = (SetFunctionName v __x14__)
      __x15__
    } else {}
  } else {}
  app __x16__ = (PutValue lref v)
  return [? __x16__]
}