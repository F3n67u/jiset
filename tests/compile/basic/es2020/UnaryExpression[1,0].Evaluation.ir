{
  access __x0__ = (UnaryExpression "Evaluation")
  let ref = __x0__
  [? ref]
  app __x1__ = (Type ref)
  if (! (= __x1__ Reference)) return true else {}
  app __x2__ = (IsUnresolvableReference ref)
  if (= __x2__ true) {
    app __x3__ = (IsStrictReference ref)
    assert (= __x3__ false)
    return true
  } else {}
  app __x4__ = (IsPropertyReference ref)
  if (= __x4__ true) {
    app __x5__ = (IsSuperReference ref)
    if (= __x5__ true) throw INTRINSIC_ReferenceError else {}
    app __x6__ = (GetBase ref)
    app __x7__ = (ToObject __x6__)
    let baseObj = [! __x7__]
    app __x8__ = (GetReferencedName ref)
    app __x9__ = (baseObj.Delete baseObj __x8__)
    let deleteStatus = [? __x9__]
    let __x10__ = true
    __x10__ = (= deleteStatus false)
    if __x10__ {
      app __x11__ = (IsStrictReference ref)
      __x10__ = (= __x11__ true)
    } else {}
    if __x10__ throw INTRINSIC_TypeError else {}
    return deleteStatus
  } else {
    app __x12__ = (GetBase ref)
    let bindings = __x12__
    app __x13__ = (GetReferencedName ref)
    app __x14__ = (bindings.DeleteBinding bindings __x13__)
    return [? __x14__]
  }
}