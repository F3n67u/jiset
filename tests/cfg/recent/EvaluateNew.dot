digraph {
  node4564 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">3:let constructor = [? __x1__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node4562 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">2:let ref = __x0__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node4569 [shape=cds, label=<<font color="black">7:app __x3__ = (IsConstructor constructor)</font>> color="black" fillcolor="white" style=filled]
  node4566 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let argList = (new [])</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node4561 [shape=cds, label=<<font color="black">2:access __x0__ = (constructExpr &quot;Evaluation&quot;)</font>> color="black" fillcolor="white" style=filled]
  node4559 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node4570 [shape=diamond, label=<<font color="black">(= __x3__ false)</font>> color="black" fillcolor="white" style=filled]
  node4565 [shape=diamond, label=<<font color="black">(= arguments CONST_empty)</font>> color="black" fillcolor="white" style=filled]
  node4560 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:assert (|| (is-instance-of constructExpr NewExpression) (is-instance-of constructExpr MemberExpression))</td></tr>
      <tr><td align="left">1:assert (|| (= arguments CONST_empty) (is-instance-of arguments Arguments))</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node4571 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node4563 [shape=cds, label=<<font color="black">3:app __x1__ = (GetValue ref)</font>> color="black" fillcolor="white" style=filled]
  node4568 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">6:let argList = [? __x2__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node4567 [shape=cds, label=<<font color="black">6:access __x2__ = (arguments &quot;ArgumentListEvaluation&quot;)</font>> color="black" fillcolor="white" style=filled]
  node4572 [shape=cds, label=<<font color="black">8:app __x4__ = (Construct constructor argList)</font>> color="black" fillcolor="white" style=filled]
  node4558 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node4573 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">8:return [? __x4__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node4565 -> node4566 [label=<<font color="black">true</font>> color="black"]
  node4565 -> node4567 [label=<<font color="black">false</font>> color="black"]
  node4570 -> node4571 [label=<<font color="black">true</font>> color="black"]
  node4570 -> node4572 [label=<<font color="black">false</font>> color="black"]
  node4567 -> node4568 [ color="black"]
  node4571 -> node4572 [ color="black"]
  node4558 -> node4560 [ color="black"]
  node4561 -> node4562 [ color="black"]
  node4568 -> node4569 [ color="black"]
  node4566 -> node4569 [ color="black"]
  node4564 -> node4565 [ color="black"]
  node4573 -> node4559 [ color="black"]
  node4563 -> node4564 [ color="black"]
  node4572 -> node4573 [ color="black"]
  node4562 -> node4563 [ color="black"]
  node4569 -> node4570 [ color="black"]
  node4560 -> node4561 [ color="black"]
}
