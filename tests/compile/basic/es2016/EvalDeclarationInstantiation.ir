{
  access __x0__ = (body "VarDeclaredNames")
  let varNames = __x0__
  access __x1__ = (body "VarScopedDeclarations")
  let varDeclarations = __x1__
  let lexEnvRec = lexEnv.EnvironmentRecord
  let varEnvRec = varEnv.EnvironmentRecord
  if (= strict false) {
    if (= (typeof varEnvRec) "GlobalEnvironmentRecord") {
      let __x2__ = varNames
      let __x3__ = 0i
      while (< __x3__ __x2__.length) {
        let name = __x2__[__x3__]
        app __x4__ = (varEnvRec.HasLexicalDeclaration varEnvRec name)
        if (= __x4__ true) throw INTRINSIC_SyntaxError else {}
        __x3__ = (+ __x3__ 1i)
      }
    } else {}
    let thisLex = lexEnv
    while (! (= thisLex varEnv)) {
      let thisEnvRec = thisLex.EnvironmentRecord
      if (! (= (typeof thisEnvRec) "ObjectEnvironmentRecord")) {
        let __x5__ = varNames
        let __x6__ = 0i
        while (< __x6__ __x5__.length) {
          let name = __x5__[__x6__]
          app __x7__ = (thisEnvRec.HasBinding thisEnvRec name)
          if (= __x7__ true) throw INTRINSIC_SyntaxError else {}
          __x6__ = (+ __x6__ 1i)
        }
      } else {}
      let thisLex = thisLex.Outer
    }
  } else {}
  let functionsToInitialize = (new [])
  let declaredFunctionNames = (new [])
  let __x8__ = varDeclarations
  let __x9__ = __x8__.length
  while (< 0i __x9__) {
    __x9__ = (- __x9__ 1i)
    let d = __x8__[__x9__]
    if (! (|| (is-instance-of d VariableDeclaration) (is-instance-of d ForBinding))) {
      assert (|| (is-instance-of d FunctionDeclaration) (is-instance-of d GeneratorDeclaration))
      access __x10__ = (d "BoundNames")
      let fn = __x10__[0i]
      if (! (contains declaredFunctionNames fn)) {
        if (= (typeof varEnvRec) "GlobalEnvironmentRecord") {
          app __x11__ = (varEnvRec.CanDeclareGlobalFunction varEnvRec fn)
          if (is-completion __x11__) if (= __x11__.Type CONST_normal) __x11__ = __x11__.Value else return __x11__ else {}
          let fnDefinable = __x11__
          if (= fnDefinable false) throw INTRINSIC_TypeError else {}
        } else {}
        append fn -> declaredFunctionNames
        prepend d -> functionsToInitialize
      } else {}
    } else {}
  }
  let declaredVarNames = (new [])
  let __x12__ = varDeclarations
  let __x13__ = 0i
  while (< __x13__ __x12__.length) {
    let d = __x12__[__x13__]
    if (|| (is-instance-of d VariableDeclaration) (is-instance-of d ForBinding)) {
      access __x14__ = (d "BoundNames")
      let __x15__ = __x14__
      let __x16__ = 0i
      while (< __x16__ __x15__.length) {
        let vn = __x15__[__x16__]
        if (! (contains declaredFunctionNames vn)) {
          if (= (typeof varEnvRec) "GlobalEnvironmentRecord") {
            app __x17__ = (varEnvRec.CanDeclareGlobalVar varEnvRec vn)
            if (is-completion __x17__) if (= __x17__.Type CONST_normal) __x17__ = __x17__.Value else return __x17__ else {}
            let vnDefinable = __x17__
            if (= vnDefinable false) throw INTRINSIC_TypeError else {}
          } else {}
          if (! (contains declaredVarNames vn)) append vn -> declaredVarNames else {}
        } else {}
        __x16__ = (+ __x16__ 1i)
      }
    } else {}
    __x13__ = (+ __x13__ 1i)
  }
  access __x18__ = (body "LexicallyScopedDeclarations")
  let lexDeclarations = __x18__
  let __x19__ = lexDeclarations
  let __x20__ = 0i
  while (< __x20__ __x19__.length) {
    let d = __x19__[__x20__]
    access __x21__ = (d "BoundNames")
    let __x22__ = __x21__
    let __x23__ = 0i
    while (< __x23__ __x22__.length) {
      let dn = __x22__[__x23__]
      access __x24__ = (d "IsConstantDeclaration")
      if (= __x24__ true) {
        app __x25__ = (lexEnvRec.CreateImmutableBinding lexEnvRec dn true)
        if (is-completion __x25__) if (= __x25__.Type CONST_normal) __x25__ = __x25__.Value else return __x25__ else {}
        __x25__
      } else {
        app __x26__ = (lexEnvRec.CreateMutableBinding lexEnvRec dn false)
        if (is-completion __x26__) if (= __x26__.Type CONST_normal) __x26__ = __x26__.Value else return __x26__ else {}
        __x26__
      }
      __x23__ = (+ __x23__ 1i)
    }
    __x20__ = (+ __x20__ 1i)
  }
  let __x27__ = functionsToInitialize
  let __x28__ = 0i
  while (< __x28__ __x27__.length) {
    let f = __x27__[__x28__]
    access __x29__ = (f "BoundNames")
    let fn = __x29__[0i]
    access __x30__ = (f "InstantiateFunctionObject")
    app __x31__ = (__x30__ lexEnv)
    let fo = __x31__
    if (= (typeof varEnvRec) "GlobalEnvironmentRecord") {
      app __x32__ = (varEnvRec.CreateGlobalFunctionBinding varEnvRec fn fo true)
      if (is-completion __x32__) if (= __x32__.Type CONST_normal) __x32__ = __x32__.Value else return __x32__ else {}
      __x32__
    } else {
      app __x33__ = (varEnvRec.HasBinding varEnvRec fn)
      let bindingExists = __x33__
      if (= bindingExists false) {
        app __x34__ = (varEnvRec.CreateMutableBinding varEnvRec fn true)
        if (is-completion __x34__) if (= __x34__.Type CONST_normal) __x34__ = __x34__.Value else return __x34__ else {}
        let status = __x34__
        app __x35__ = (varEnvRec.InitializeBinding varEnvRec fn fo)
        if (is-completion __x35__) if (= __x35__.Type CONST_normal) __x35__ = __x35__.Value else return __x35__ else {}
        __x35__
      } else {
        app __x36__ = (varEnvRec.SetMutableBinding varEnvRec fn fo false)
        if (is-completion __x36__) if (= __x36__.Type CONST_normal) __x36__ = __x36__.Value else return __x36__ else {}
        __x36__
      }
    }
    __x28__ = (+ __x28__ 1i)
  }
  let __x37__ = declaredVarNames
  let __x38__ = 0i
  while (< __x38__ __x37__.length) {
    let vn = __x37__[__x38__]
    if (= (typeof varEnvRec) "GlobalEnvironmentRecord") {
      app __x39__ = (varEnvRec.CreateGlobalVarBinding varEnvRec vn true)
      if (is-completion __x39__) if (= __x39__.Type CONST_normal) __x39__ = __x39__.Value else return __x39__ else {}
      __x39__
    } else {
      app __x40__ = (varEnvRec.HasBinding varEnvRec vn)
      let bindingExists = __x40__
      if (= bindingExists false) {
        app __x41__ = (varEnvRec.CreateMutableBinding varEnvRec vn true)
        if (is-completion __x41__) if (= __x41__.Type CONST_normal) __x41__ = __x41__.Value else return __x41__ else {}
        let status = __x41__
        app __x42__ = (varEnvRec.InitializeBinding varEnvRec vn undefined)
        if (is-completion __x42__) if (= __x42__.Type CONST_normal) __x42__ = __x42__.Value else return __x42__ else {}
        __x42__
      } else {}
    }
    __x38__ = (+ __x38__ 1i)
  }
  app __x43__ = (NormalCompletion CONST_empty)
  app __x44__ = (WrapCompletion __x43__)
  return __x44__
}