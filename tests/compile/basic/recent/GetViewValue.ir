{
  app __x0__ = (RequireInternalSlot view "DataView")
  [? __x0__]
  assert (! (= view.ViewedArrayBuffer absent))
  app __x1__ = (ToIndex requestIndex)
  let getIndex = [? __x1__]
  app __x2__ = (ToBoolean isLittleEndian)
  isLittleEndian = [! __x2__]
  let buffer = view.ViewedArrayBuffer
  app __x3__ = (IsDetachedBuffer buffer)
  if (= __x3__ true) throw TypeError else {}
  let viewOffset = view.ByteOffset
  let viewSize = view.ByteLength
  ??? "Let id:{elementSize} be the Element Size value specified in link:{table-the-typedarray-constructors} for Element Type id:{type} ."
  if (< viewSize (+ getIndex elementSize)) throw RangeError else {}
  let bufferIndex = (+ getIndex viewOffset)
  app __x4__ = (GetValueFromBuffer buffer bufferIndex type false CONST_Unordered isLittleEndian)
  return __x4__
}