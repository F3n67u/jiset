digraph {
  node12896 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">12:obj.OriginalSource = P</td></tr>
      <tr><td align="left">13:obj.OriginalFlags = F</td></tr>
      <tr><td align="left">14:??? &quot;Set id:{obj} ' s [ [ RegExpMatcher ] ] internal slot to the internal procedure that evaluates the above parse of id:{P} by applying the semantics provided in link:{unhandled: sec-pattern-semantics} using id:{patternCharacters} as the pattern ' s List of nt:{SourceCharacter} values and id:{F} as the flag parameters .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12892 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let BMP = true</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12878 [shape=cds, label=<<font color="black">app obj = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node12881 [shape=diamond, label=<<font color="black">(= pattern undefined)</font>> color="black" fillcolor="white" style=filled]
  node12885 [shape=diamond, label=<<font color="black">(= flags undefined)</font>> color="black" fillcolor="white" style=filled]
  node12877 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node12890 [shape=diamond, label=<<font color="black">(contains F &quot;u&quot;)</font>> color="black" fillcolor="white" style=filled]
  node12886 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let F = &quot;&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12883 [shape=cds, label=<<font color="black">app __x0__ = (ToString pattern)</font>> color="black" fillcolor="white" style=filled]
  node12880 [shape=cds, label=<<font color="black">app flags = (GetArgument argumentsList 2i)</font>> color="black" fillcolor="white" style=filled]
  node12893 [shape=diamond, label=<<font color="black">(= BMP true)</font>> color="black" fillcolor="white" style=filled]
  node12876 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node12887 [shape=cds, label=<<font color="black">app __x1__ = (ToString flags)</font>> color="black" fillcolor="white" style=filled]
  node12879 [shape=cds, label=<<font color="black">app pattern = (GetArgument argumentsList 1i)</font>> color="black" fillcolor="white" style=filled]
  node12884 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let P = [? __x0__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12897 [shape=cds, label=<<font color="black">15:app __x2__ = (Set obj &quot;lastIndex&quot; 0i true)</font>> color="black" fillcolor="white" style=filled]
  node12888 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let F = [? __x1__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12898 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">15:[? __x2__]</td></tr>
      <tr><td align="left">16:return obj</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12895 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">10:??? &quot;Parse id:{P} using the grammars in link:{unhandled: sec-patterns} and interpreting id:{P} as UTF - 16 encoded Unicode code points ( link:{unhandled: sec-ecmascript-language-types-string-type} ) . The goal symbol for the parse is nt:{Pattern[U]} . Throw a value:{SyntaxError} exception if id:{P} did not conform to the grammar , if any elements of id:{P} were not matched by the parse , or if any Early Error conditions exist .&quot;</td></tr>
      <tr><td align="left">11:??? &quot;Let id:{patternCharacters} be a List whose elements are the code points resulting from applying UTF - 16 decoding to id:{P} ' s sequence of elements .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12889 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">4:??? &quot;If id:{F} contains any code unit other than code:{\&quot;g\&quot;} , code:{\&quot;i\&quot;} , code:{\&quot;m\&quot;} , code:{\&quot;u\&quot;} , or code:{\&quot;y\&quot;} or if it contains the same code unit more than once , throw a value:{SyntaxError} exception .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12891 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let BMP = false</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12894 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">7:??? &quot;Parse id:{P} using the grammars in link:{unhandled: sec-patterns} and interpreting each of its 16 - bit elements as a Unicode BMP code point . UTF - 16 decoding is not applied to the elements . The goal symbol for the parse is nt:{Pattern} . Throw a value:{SyntaxError} exception if id:{P} did not conform to the grammar , if any elements of id:{P} were not matched by the parse , or if any Early Error conditions exist .&quot;</td></tr>
      <tr><td align="left">8:??? &quot;Let id:{patternCharacters} be a List whose elements are the code unit elements of id:{P} .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12882 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let P = &quot;&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12896 -> node12897 [ color="black"]
  node12890 -> node12891 [label=<<font color="black">true</font>> color="black"]
  node12890 -> node12892 [label=<<font color="black">false</font>> color="black"]
  node12879 -> node12880 [ color="black"]
  node12893 -> node12894 [label=<<font color="black">true</font>> color="black"]
  node12893 -> node12895 [label=<<font color="black">false</font>> color="black"]
  node12880 -> node12881 [ color="black"]
  node12887 -> node12888 [ color="black"]
  node12886 -> node12889 [ color="black"]
  node12892 -> node12893 [ color="black"]
  node12895 -> node12896 [ color="black"]
  node12883 -> node12884 [ color="black"]
  node12882 -> node12885 [ color="black"]
  node12897 -> node12898 [ color="black"]
  node12876 -> node12878 [ color="black"]
  node12888 -> node12889 [ color="black"]
  node12878 -> node12879 [ color="black"]
  node12891 -> node12893 [ color="black"]
  node12881 -> node12882 [label=<<font color="black">true</font>> color="black"]
  node12881 -> node12883 [label=<<font color="black">false</font>> color="black"]
  node12898 -> node12877 [ color="black"]
  node12894 -> node12896 [ color="black"]
  node12889 -> node12890 [ color="black"]
  node12884 -> node12885 [ color="black"]
  node12885 -> node12886 [label=<<font color="black">true</font>> color="black"]
  node12885 -> node12887 [label=<<font color="black">false</font>> color="black"]
}
