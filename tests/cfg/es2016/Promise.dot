digraph {
  node15671 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15683 [shape=cds, label=<<font color="black">10:app __x5__ = (Call resolvingFunctions.Reject undefined (new [completion.Value]))</font>> color="black" fillcolor="white" style=filled]
  node15684 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">10:[? __x5__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15678 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">7:let resolvingFunctions = __x2__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15682 [shape=diamond, label=<<font color="black">__x4__</font>> color="black" fillcolor="white" style=filled]
  node15670 [shape=diamond, label=<<font color="black">(= NewTarget undefined)</font>> color="black" fillcolor="white" style=filled]
  node15669 [shape=cds, label=<<font color="black">app executor = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node15675 [shape=cds, label=<<font color="black">2:app __x1__ = (OrdinaryCreateFromConstructor NewTarget INTRINSIC_PromisePrototype (new [&quot;PromiseState&quot;, &quot;PromiseResult&quot;, &quot;PromiseFulfillReactions&quot;, &quot;PromiseRejectReactions&quot;, &quot;PromiseIsHandled&quot;]))</font>> color="black" fillcolor="white" style=filled]
  node15681 [shape=cds, label=<<font color="black">9:app __x4__ = (IsAbruptCompletion completion)</font>> color="black" fillcolor="white" style=filled]
  node15668 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node15676 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">2:let promise = [? __x1__]</td></tr>
      <tr><td align="left">3:promise.PromiseState = &quot;pending&quot;</td></tr>
      <tr><td align="left">4:promise.PromiseFulfillReactions = (new [])</td></tr>
      <tr><td align="left">5:promise.PromiseRejectReactions = (new [])</td></tr>
      <tr><td align="left">6:promise.PromiseIsHandled = false</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15677 [shape=cds, label=<<font color="black">7:app __x2__ = (CreateResolvingFunctions promise)</font>> color="black" fillcolor="white" style=filled]
  node15672 [shape=cds, label=<<font color="black">1:app __x0__ = (IsCallable executor)</font>> color="black" fillcolor="white" style=filled]
  node15685 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">11:return promise</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15667 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node15679 [shape=cds, label=<<font color="black">8:app __x3__ = (Call executor undefined (new [resolvingFunctions.Resolve, resolvingFunctions.Reject]))</font>> color="black" fillcolor="white" style=filled]
  node15673 [shape=diamond, label=<<font color="black">(= __x0__ false)</font>> color="black" fillcolor="white" style=filled]
  node15674 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15680 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">8:let completion = __x3__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15681 -> node15682 [ color="black"]
  node15676 -> node15677 [ color="black"]
  node15672 -> node15673 [ color="black"]
  node15669 -> node15670 [ color="black"]
  node15685 -> node15668 [ color="black"]
  node15667 -> node15669 [ color="black"]
  node15673 -> node15674 [label=<<font color="black">true</font>> color="black"]
  node15673 -> node15675 [label=<<font color="black">false</font>> color="black"]
  node15675 -> node15676 [ color="black"]
  node15680 -> node15681 [ color="black"]
  node15677 -> node15678 [ color="black"]
  node15679 -> node15680 [ color="black"]
  node15670 -> node15671 [label=<<font color="black">true</font>> color="black"]
  node15670 -> node15672 [label=<<font color="black">false</font>> color="black"]
  node15684 -> node15685 [ color="black"]
  node15671 -> node15672 [ color="black"]
  node15683 -> node15684 [ color="black"]
  node15678 -> node15679 [ color="black"]
  node15674 -> node15675 [ color="black"]
  node15682 -> node15683 [label=<<font color="black">true</font>> color="black"]
  node15682 -> node15685 [label=<<font color="black">false</font>> color="black"]
}
