{
  [0] let module = this
  [1] assert (! (|| (= module.Status CONST_linking) (= module.Status CONST_evaluating)))
  [2] let stack = (new [])
  [3] app __x0__ = (InnerModuleLinking module stack 0i)
  [3] let result = __x0__
  [4] app __x1__ = (IsAbruptCompletion result)
  [4] if __x1__ {
    [5] let __x2__ = stack
    [5] let __x3__ = 0i
    [5] while (< __x3__ __x2__.length) {
      let m = __x2__[__x3__]
      [6] assert (= m.Status CONST_linking)
      [7] m.Status = CONST_unlinked
      [8] m.Environment = undefined
      [9] m.DFSIndex = undefined
      [10] m.DFSAncestorIndex = undefined
      __x3__ = (+ __x3__ 1i)
    }
    [11] assert (= module.Status CONST_unlinked)
    [12] app __x4__ = (WrapCompletion result)
    [12] return __x4__
  } else [37] {}
  [13] assert (|| (= module.Status CONST_linked) (= module.Status CONST_evaluated))
  [14] assert (= stack.length 0i)
  [15] app __x5__ = (WrapCompletion undefined)
  [15] return __x5__
}