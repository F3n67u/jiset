{
  app __x0__ = (RequireObjectCoercible this)
  if (is-completion __x0__) if (= __x0__.Type CONST_normal) __x0__ = __x0__.Value else return __x0__ else {}
  let O = __x0__
  app __x1__ = (ToString O)
  if (is-completion __x1__) if (= __x1__.Type CONST_normal) __x1__ = __x1__.Value else return __x1__ else {}
  let S = __x1__
  app __x2__ = (IsRegExp searchString)
  if (is-completion __x2__) if (= __x2__.Type CONST_normal) __x2__ = __x2__.Value else return __x2__ else {}
  let isRegExp = __x2__
  if (= isRegExp true) {
    app __x3__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_TypeError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
    return __x3__
  } else {}
  app __x4__ = (ToString searchString)
  if (is-completion __x4__) if (= __x4__.Type CONST_normal) __x4__ = __x4__.Value else return __x4__ else {}
  let searchStr = __x4__
  app __x5__ = (ToIntegerOrInfinity position)
  if (is-completion __x5__) if (= __x5__.Type CONST_normal) __x5__ = __x5__.Value else return __x5__ else {}
  let pos = __x5__
  let len = S.length
  ??? "Let id:{start} be the result of clamping id:{pos} between 0 and id:{len} ."
  app __x6__ = (StringIndexOf S searchStr start)
  if (is-completion __x6__) if (= __x6__.Type CONST_normal) __x6__ = __x6__.Value else return __x6__ else {}
  let index = __x6__
  if (! (= index -1i)) {
    app __x7__ = (WrapCompletion true)
    return __x7__
  } else {}
  app __x8__ = (WrapCompletion false)
  return __x8__
}