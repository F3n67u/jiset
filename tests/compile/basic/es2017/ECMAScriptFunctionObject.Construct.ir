{
  app __x0__ = (Type newTarget)
  assert (= __x0__ Object)
  let callerContext = GLOBAL_context
  let kind = F.ConstructorKind
  if (= kind "base") {
    app __x1__ = (OrdinaryCreateFromConstructor newTarget INTRINSIC_ObjectPrototype)
    let thisArgument = [? __x1__]
  } else {}
  app __x2__ = (PrepareForOrdinaryCall F newTarget)
  let calleeContext = __x2__
  if (= kind "base") {
    app __x3__ = (OrdinaryCallBindThis F calleeContext thisArgument)
    __x3__
  } else {}
  access __x4__ = (calleeContext "LexicalEnvironment")
  let constructorEnv = __x4__
  let envRec = constructorEnv.EnvironmentRecord
  app __x5__ = (OrdinaryCallEvaluateBody F argumentsList)
  let result = __x5__
  if (= GLOBAL_executionStack[(- GLOBAL_executionStack.length 1i)] calleeContext) {
    let __x6__ = (- GLOBAL_executionStack.length 1i)
    (pop GLOBAL_executionStack __x6__)
  } else {}
  GLOBAL_context = GLOBAL_executionStack[(- GLOBAL_executionStack.length 1i)]
  if (= result.Type CONST_return) {
    app __x7__ = (Type result.Value)
    if (= __x7__ Object) {
      app __x8__ = (NormalCompletion result.Value)
      return __x8__
    } else {}
    if (= kind "base") {
      app __x9__ = (NormalCompletion thisArgument)
      return __x9__
    } else {}
    if (! (= result.Value undefined)) throw TypeError else {}
  } else [? result]
  app __x10__ = (envRec.GetThisBinding envRec)
  return [? __x10__]
}