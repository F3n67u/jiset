digraph {
  node17266 [shape=cds, label=<<font color="black">5:app __x0__ = (AllocateArrayBuffer INTRINSIC_ArrayBuffer byteLength)</font>> color="black" fillcolor="white" style=filled]
  node17264 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node17267 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">5:let data = [? __x0__]</td></tr>
      <tr><td align="left">6:O.ViewedArrayBuffer = data</td></tr>
      <tr><td align="left">7:O.ByteLength = byteLength</td></tr>
      <tr><td align="left">8:O.ByteOffset = 0i</td></tr>
      <tr><td align="left">9:O.ArrayLength = length</td></tr>
      <tr><td align="left">10:return O</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17263 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node17265 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">1:assert (= O.ViewedArrayBuffer undefined)</td></tr>
      <tr><td align="left">2:let constructorName = O.TypedArrayName</td></tr>
      <tr><td align="left">3:??? &quot;Let id:{elementSize} be the Element Size value specified in link:{unhandled: table-the-typedarray-constructors} for id:{constructorName} .&quot;</td></tr>
      <tr><td align="left">4:let byteLength = (* elementSize length)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17263 -> node17265 [ color="black"]
  node17265 -> node17266 [ color="black"]
  node17266 -> node17267 [ color="black"]
  node17267 -> node17264 [ color="black"]
}
