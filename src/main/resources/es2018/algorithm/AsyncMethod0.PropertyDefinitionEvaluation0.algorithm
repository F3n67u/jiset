<algorithm>
  <param>LineTerminator</param>
  <param>PropertyName</param>
  <param>UniqueFormalParameters</param>
  <param>AsyncFunctionBody</param>
  <step-list>
    <step>Let <id>propKey</id> be the result of evaluating PropertyName .</step>
    <step>ReturnIfAbrupt ( <id>propKey</id> ).</step>
    <step>If the function code for this AsyncMethod is strict mode code , let <id>strict</id> be <value>true</value> . Otherwise let <id>strict</id> be <value>false</value> .</step>
    <step>Let <id>scope</id> be the LexicalEnvironment of the running execution context .</step>
    <step>Let <id>closure</id> be ! AsyncFunctionCreate ( <value>Method</value> , UniqueFormalParameters , AsyncFunctionBody , <id>scope</id> , <id>strict</id> ).</step>
    <step>Perform ! MakeMethod ( <id>closure</id> , <id>object</id> ).</step>
    <step>Perform ! SetFunctionName ( <id>closure</id> , <id>propKey</id> ).</step>
    <step>Let <id>desc</id> be the PropertyDescriptor { [[Value]]: <id>closure</id> , [[Writable]]: <value>true</value> , [[Enumerable]]: <id>enumerable</id> , [[Configurable]]: <value>true</value> }.</step>
    <step>Return ? DefinePropertyOrThrow ( <id>object</id> , <id>propKey</id> , <id>desc</id> ).</step>
  </step-list>
</algorithm>