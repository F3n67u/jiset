{
  let handler = O.ProxyHandler
  if (= handler null) throw TypeError else {}
  assert (= (typeof handler) Object)
  let target = O.ProxyTarget
  app __x0__ = (GetMethod handler "isExtensible")
  let trap = [? __x0__]
  if (= trap undefined) {
    app __x1__ = (IsExtensible target)
    return [? __x1__]
  } else {}
  app __x2__ = (Call trap handler (new [target]))
  app __x3__ = (ToBoolean [? __x2__])
  let booleanTrapResult = [! __x3__]
  app __x4__ = (IsExtensible target)
  let targetResult = [? __x4__]
  app __x5__ = (SameValue booleanTrapResult targetResult)
  if (= __x5__ false) throw TypeError else {}
  return booleanTrapResult
}