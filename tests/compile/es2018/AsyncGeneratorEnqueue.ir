{
  app generator = (GetArgument argumentsList 0i)
  app completion = (GetArgument argumentsList 1i)
  [0] assert (is-completion completion)
  [1] app __x0__ = (NewPromiseCapability INTRINSIC_Promise)
  [1] if (is-completion __x0__) if (= __x0__.Type CONST_normal) __x0__ = __x0__.Value else return __x0__ else [41] {}
  [1] let promiseCapability = __x0__
  [2] app __x1__ = (Type generator)
  [2] if (|| (! (= __x1__ Object)) (= generator.AsyncGeneratorState absent)) {
    [3] let badGeneratorError = (new OrdinaryObject("Prototype" -> INTRINSIC_TypeError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap())))
    [4] app __x2__ = (Call promiseCapability.Reject undefined (new [badGeneratorError]))
    [4] if (is-completion __x2__) if (= __x2__.Type CONST_normal) __x2__ = __x2__.Value else return __x2__ else [41] {}
    [4] __x2__
    [5] app __x3__ = (WrapCompletion promiseCapability.Promise)
    [5] return __x3__
  } else [41] {}
  [6] let queue = generator.AsyncGeneratorQueue
  [7] let request = (new AsyncGeneratorRequest("Completion" -> completion, "Capability" -> promiseCapability))
  [8] append request -> queue
  [9] let state = generator.AsyncGeneratorState
  [10] if (! (= state "executing")) {
    [11] app __x4__ = (AsyncGeneratorResumeNext generator)
    [11] if (is-completion __x4__) if (= __x4__.Type CONST_normal) __x4__ = __x4__.Value else return __x4__ else [41] {}
    [11] __x4__
  } else [41] {}
  [12] app __x5__ = (WrapCompletion promiseCapability.Promise)
  [12] return __x5__
}