{
  if (= Desc.Value absent) {
    app __x0__ = (OrdinaryDefineOwnProperty A "length" Desc)
    return __x0__
  } else {}
  let newLenDesc = (copy-obj Desc)
  app __x1__ = (ToUint32 Desc.Value)
  let newLen = [? __x1__]
  app __x2__ = (ToNumber Desc.Value)
  let numberLen = [? __x2__]
  if (! (= newLen numberLen)) throw INTRINSIC_RangeError else {}
  newLenDesc.Value = newLen
  app __x3__ = (OrdinaryGetOwnProperty A "length")
  let oldLenDesc = __x3__
  app __x4__ = (IsDataDescriptor oldLenDesc)
  assert (= [! __x4__] true)
  assert (= oldLenDesc.Configurable false)
  let oldLen = oldLenDesc.Value
  if (! (< newLen oldLen)) {
    app __x5__ = (OrdinaryDefineOwnProperty A "length" newLenDesc)
    return __x5__
  } else {}
  if (= oldLenDesc.Writable false) return false else {}
  if (|| (= newLenDesc.Writable absent) (= newLenDesc.Writable true)) let newWritable = true else {
    let newWritable = false
    newLenDesc.Writable = true
  }
  app __x6__ = (OrdinaryDefineOwnProperty A "length" newLenDesc)
  let succeeded = [! __x6__]
  if (= succeeded false) return false else {}
  ??? "For each own property key id:{P} of id:{A} that is an array index , whose numeric value is greater than or equal to id:{newLen} , in descending numeric index order , do in:{} out:{}"
  if (= newWritable false) {
    app __x7__ = (OrdinaryDefineOwnProperty A "length" (new PropertyDescriptor("Writable" -> false)))
    let succeeded = [! __x7__]
    assert (= succeeded true)
  } else {}
  return true
}