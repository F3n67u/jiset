{
  app __x0__ = (ValidateIntegerTypedArray typedArray true)
  let buffer = [? __x0__]
  app __x1__ = (IsSharedArrayBuffer buffer)
  if (= __x1__ false) throw TypeError else {}
  app __x2__ = (ValidateAtomicAccess typedArray index)
  let indexedPosition = [? __x2__]
  let arrayTypeName = typedArray.TypedArrayName
  if (= arrayTypeName "BigInt64Array") {
    app __x3__ = (ToBigInt64 value)
    let v = [? __x3__]
  } else {
    app __x4__ = (ToInt32 value)
    let v = [? __x4__]
  }
  app __x5__ = (ToNumber timeout)
  let q = [? __x5__]
  if (|| (= q NaN) (= q Infinity)) let t = Infinity else if (= q -Infinity) let t = 0i else {
    app __x6__ = (max q 0i)
    let t = __x6__
  }
  app __x7__ = (AgentCanSuspend)
  let B = __x7__
  if (= B false) throw TypeError else {}
  let block = buffer.ArrayBufferData
  app __x8__ = (GetWaiterList block indexedPosition)
  let WL = __x8__
  app __x9__ = (EnterCriticalSection WL)
  __x9__
  let elementType = CONST_Int8
  app __x10__ = (GetValueFromBuffer buffer indexedPosition elementType true CONST_SeqCst)
  let w = [! __x10__]
  if (! (== v w)) {
    app __x11__ = (LeaveCriticalSection WL)
    __x11__
    return "not-equal"
  } else {}
  app __x12__ = (AgentSignifier)
  let W = __x12__
  app __x13__ = (AddWaiter WL W)
  __x13__
  app __x14__ = (SuspendAgent WL W t)
  let notified = __x14__
  if (= notified true) {} else {
    app __x15__ = (RemoveWaiter WL W)
    __x15__
  }
  app __x16__ = (LeaveCriticalSection WL)
  __x16__
  if (= notified true) return "ok" else {}
  return "timed-out"
}