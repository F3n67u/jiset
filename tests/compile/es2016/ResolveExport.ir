{
  [0] let module = this
  [1] ??? "For each Record { [ [ Module ] ] , [ [ ExportName ] ] } id:{r} in id:{resolveSet} , do : step-list:{...}"
  [5] append (new Record("Module" -> module, "ExportName" -> exportName)) -> resolveSet
  [6] let __x0__ = module.LocalExportEntries
  [6] let __x1__ = 0i
  [6] while (< __x1__ __x0__.length) {
    let e = __x0__[__x1__]
    [7] app __x2__ = (SameValue exportName e.ExportName)
    [7] if (= __x2__ true) {
      [9] app __x3__ = (WrapCompletion (new Record("Module" -> module, "BindingName" -> e.LocalName)))
      [9] return __x3__
    } else [30] {}
    __x1__ = (+ __x1__ 1i)
  }
  [10] let __x4__ = module.IndirectExportEntries
  [10] let __x5__ = 0i
  [10] while (< __x5__ __x4__.length) {
    let e = __x4__[__x5__]
    [11] app __x6__ = (SameValue exportName e.ExportName)
    [11] if (= __x6__ true) {
      [13] app __x7__ = (HostResolveImportedModule module e.ModuleRequest)
      [13] if (is-completion __x7__) if (= __x7__.Type CONST_normal) __x7__ = __x7__.Value else return __x7__ else [30] {}
      [13] let importedModule = __x7__
      [14] app __x8__ = (importedModule.ResolveExport importedModule e.ImportName resolveSet exportStarSet)
      [14] if (is-completion __x8__) if (= __x8__.Type CONST_normal) __x8__ = __x8__.Value else return __x8__ else [30] {}
      [14] let indirectResolution = __x8__
      [15] if (! (= indirectResolution null)) {
        app __x9__ = (WrapCompletion indirectResolution)
        return __x9__
      } else [30] {}
    } else [30] {}
    __x5__ = (+ __x5__ 1i)
  }
  [16] app __x10__ = (SameValue exportName "default")
  [16] if (= __x10__ true) {
    [18] app __x11__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_SyntaxError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
    [18] return __x11__
  } else [30] {}
  [20] if (contains exportStarSet module) {
    app __x12__ = (WrapCompletion null)
    return __x12__
  } else [30] {}
  [21] append module -> exportStarSet
  [22] let starResolution = null
  [23] let __x13__ = module.StarExportEntries
  [23] let __x14__ = 0i
  [23] while (< __x14__ __x13__.length) {
    let e = __x13__[__x14__]
    [24] app __x15__ = (HostResolveImportedModule module e.ModuleRequest)
    [24] if (is-completion __x15__) if (= __x15__.Type CONST_normal) __x15__ = __x15__.Value else return __x15__ else [30] {}
    [24] let importedModule = __x15__
    [25] app __x16__ = (importedModule.ResolveExport importedModule exportName resolveSet exportStarSet)
    [25] if (is-completion __x16__) if (= __x16__.Type CONST_normal) __x16__ = __x16__.Value else return __x16__ else [30] {}
    [25] let resolution = __x16__
    [26] if (= resolution "ambiguous") {
      app __x17__ = (WrapCompletion "ambiguous")
      return __x17__
    } else [30] {}
    [27] if (! (= resolution null)) if (= starResolution null) let starResolution = resolution else {
      [31] let __x18__ = (! (= resolution.Module starResolution.Module))
      [31] if __x18__ [30] {} else {
        app __x19__ = (SameValue resolution.BindingName starResolution.BindingName)
        __x18__ = (= __x19__ false)
      }
      [31] if __x18__ {
        app __x20__ = (WrapCompletion "ambiguous")
        return __x20__
      } else [30] {}
    } else [30] {}
    __x14__ = (+ __x14__ 1i)
  }
  [32] app __x21__ = (WrapCompletion starResolution)
  [32] return __x21__
}