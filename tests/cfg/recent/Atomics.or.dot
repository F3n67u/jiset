digraph {
  node17986 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node17988 [shape=cds, label=<<font color="black">app typedArray = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node17990 [shape=cds, label=<<font color="black">app value = (GetArgument argumentsList 2i)</font>> color="black" fillcolor="white" style=filled]
  node17991 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:??? &quot;Let id:{or} be a new read - modify - write modification function with parameters ( id:{xBytes} , id:{yBytes} ) that captures nothing and performs the following steps atomically when called : in:{} out:{}&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17989 [shape=cds, label=<<font color="black">app index = (GetArgument argumentsList 1i)</font>> color="black" fillcolor="white" style=filled]
  node17993 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">2:return [? __x0__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17992 [shape=cds, label=<<font color="black">2:app __x0__ = (AtomicReadModifyWrite typedArray index value or)</font>> color="black" fillcolor="white" style=filled]
  node17987 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node17993 -> node17987 [ color="black"]
  node17988 -> node17989 [ color="black"]
  node17986 -> node17988 [ color="black"]
  node17991 -> node17992 [ color="black"]
  node17990 -> node17991 [ color="black"]
  node17992 -> node17993 [ color="black"]
  node17989 -> node17990 [ color="black"]
}
