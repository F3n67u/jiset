{
  if (! (= (typeof target) Object)) throw TypeError else {}
  if (&& (is-instance-of target ProxyExoticObject) (= target.ProxyHandler null)) throw TypeError else {}
  if (! (= (typeof handler) Object)) throw TypeError else {}
  if (&& (is-instance-of handler ProxyExoticObject) (= handler.ProxyHandler null)) throw TypeError else {}
  let P = (new OrdinaryObject("SubMap" -> (new SubMap())))
  app __x0__ = (IsCallable target)
  if (= __x0__ true) {
    P.Call = ProxyObjectDOTCall
    if (! (= target.Construct absent)) P.Construct = ProxyObjectDOTConstruct else {}
  } else {}
  P.ProxyTarget = target
  P.ProxyHandler = handler
  return P
}