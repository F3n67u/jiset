{
  app __x0__ = (ToObject this)
  let O = [? __x0__]
  app __x1__ = (LengthOfArrayLike O)
  let len = [? __x1__]
  app __x2__ = (ToIntegerOrInfinity start)
  let relativeStart = [? __x2__]
  if (= relativeStart -Infinity) let actualStart = 0i else if (< relativeStart 0i) {
    app __x3__ = (max (+ len relativeStart) 0i)
    let actualStart = __x3__
  } else {
    app __x4__ = (min relativeStart len)
    let actualStart = __x4__
  }
  if (= start absent) {
    let insertCount = 0i
    let actualDeleteCount = 0i
  } else if (= deleteCount absent) {
    let insertCount = 0i
    let actualDeleteCount = (- len actualStart)
  } else {
    let insertCount = items.length
    app __x5__ = (ToIntegerOrInfinity deleteCount)
    let dc = [? __x5__]
    ??? "Let id:{actualDeleteCount} be the result of clamping id:{dc} between 0 and id:{len} - id:{actualStart} ."
  }
  if (< (- (** 2.0 53i) 1i) (- (+ len insertCount) actualDeleteCount)) throw INTRINSIC_TypeError else {}
  app __x6__ = (ArraySpeciesCreate O actualDeleteCount)
  let A = [? __x6__]
  let k = 0i
  while (< k actualDeleteCount) {
    app __x7__ = (ToString (+ actualStart k))
    let from = [! __x7__]
    app __x8__ = (HasProperty O from)
    let fromPresent = [? __x8__]
    if (= fromPresent true) {
      app __x9__ = (Get O from)
      let fromValue = [? __x9__]
      app __x10__ = (ToString k)
      app __x11__ = (CreateDataPropertyOrThrow A [! __x10__] fromValue)
      [? __x11__]
    } else {}
    k = (+ k 1i)
  }
  app __x12__ = (Set A "length" actualDeleteCount true)
  [? __x12__]
  let itemCount = items.length
  if (< itemCount actualDeleteCount) {
    k = actualStart
    while (< k (- len actualDeleteCount)) {
      app __x13__ = (ToString (+ k actualDeleteCount))
      let from = [! __x13__]
      app __x14__ = (ToString (+ k itemCount))
      let to = [! __x14__]
      app __x15__ = (HasProperty O from)
      let fromPresent = [? __x15__]
      if (= fromPresent true) {
        app __x16__ = (Get O from)
        let fromValue = [? __x16__]
        app __x17__ = (Set O to fromValue true)
        [? __x17__]
      } else {
        assert (= fromPresent false)
        app __x18__ = (DeletePropertyOrThrow O to)
        [? __x18__]
      }
      k = (+ k 1i)
    }
    k = len
    while (< (+ (- len actualDeleteCount) itemCount) k) {
      app __x19__ = (ToString (- k 1i))
      app __x20__ = (DeletePropertyOrThrow O [! __x19__])
      [? __x20__]
      k = (- k 1i)
    }
  } else if (< actualDeleteCount itemCount) {
    k = (- len actualDeleteCount)
    while (< actualStart k) {
      app __x21__ = (ToString (- (+ k actualDeleteCount) 1i))
      let from = [! __x21__]
      app __x22__ = (ToString (- (+ k itemCount) 1i))
      let to = [! __x22__]
      app __x23__ = (HasProperty O from)
      let fromPresent = [? __x23__]
      if (= fromPresent true) {
        app __x24__ = (Get O from)
        let fromValue = [? __x24__]
        app __x25__ = (Set O to fromValue true)
        [? __x25__]
      } else {
        assert (= fromPresent false)
        app __x26__ = (DeletePropertyOrThrow O to)
        [? __x26__]
      }
      k = (- k 1i)
    }
  } else {}
  k = actualStart
  let __x27__ = items
  let __x28__ = 0i
  while (< __x28__ __x27__.length) {
    let E = __x27__[__x28__]
    app __x29__ = (ToString k)
    app __x30__ = (Set O [! __x29__] E true)
    [? __x30__]
    k = (+ k 1i)
    __x28__ = (+ __x28__ 1i)
  }
  app __x31__ = (Set O "length" (+ (- len actualDeleteCount) itemCount) true)
  [? __x31__]
  return A
}