{
  app __x0__ = (Type view)
  if (! (= __x0__ Object)) throw INTRINSIC_TypeError else {}
  if (= view.DataView absent) throw INTRINSIC_TypeError else {}
  assert (! (= view.ViewedArrayBuffer absent))
  app __x1__ = (ToIndex requestIndex)
  let getIndex = [? __x1__]
  app __x2__ = (ToNumber value)
  let numberValue = [? __x2__]
  app __x3__ = (ToBoolean isLittleEndian)
  isLittleEndian = __x3__
  let buffer = view.ViewedArrayBuffer
  app __x4__ = (IsDetachedBuffer buffer)
  if (= __x4__ true) throw INTRINSIC_TypeError else {}
  let viewOffset = view.ByteOffset
  let viewSize = view.ByteLength
  ??? "Let id:{elementSize} be the Number value of the Element Size value specified in link:{unhandled: table-49} for Element Type id:{type} ."
  if (< viewSize (+ getIndex elementSize)) throw INTRINSIC_RangeError else {}
  let bufferIndex = (+ getIndex viewOffset)
  app __x5__ = (SetValueInBuffer buffer bufferIndex type numberValue false "Unordered" isLittleEndian)
  return __x5__
}