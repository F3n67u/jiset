{
  app iterable = (GetArgument argumentsList 0i)
  [0] let C = this
  [1] app __x0__ = (Type C)
  [1] if (! (= __x0__ Object)) {
    app __x1__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_TypeError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
    return __x1__
  } else [1] {}
  [2] app __x2__ = (NewPromiseCapability C)
  [2] if (is-completion __x2__) if (= __x2__.Type CONST_normal) __x2__ = __x2__.Value else return __x2__ else [1] {}
  [2] let promiseCapability = __x2__
  [3] app __x3__ = (GetIterator iterable)
  [3] let iterator = __x3__
  [4] if (is-completion iterator) if (= iterator.Type CONST_normal) iterator = iterator.Value else {
    app __x4__ = (Call promiseCapability.Reject undefined (new [iterator.Value]))
    if (&& (is-completion __x4__) (! (= __x4__.Type CONST_normal))) return __x4__ else [1] {}
    return promiseCapability.Promise
  } else [1] {}
  [4] iterator
  [5] let iteratorRecord = (new Record("Iterator" -> iterator, "Done" -> false))
  [6] app __x5__ = (PerformPromiseRace iteratorRecord C promiseCapability)
  [6] let result = __x5__
  [7] app __x6__ = (IsAbruptCompletion result)
  [7] if __x6__ {
    [8] if (= iteratorRecord.Done false) {
      app __x7__ = (IteratorClose iterator result)
      let result = __x7__
    } else [1] {}
    [9] if (is-completion result) if (= result.Type CONST_normal) result = result.Value else {
      app __x8__ = (Call promiseCapability.Reject undefined (new [result.Value]))
      if (&& (is-completion __x8__) (! (= __x8__.Type CONST_normal))) return __x8__ else [1] {}
      return promiseCapability.Promise
    } else [1] {}
    [9] result
  } else [1] {}
  [10] app __x9__ = (Completion result)
  [10] app __x10__ = (WrapCompletion __x9__)
  [10] return __x10__
}