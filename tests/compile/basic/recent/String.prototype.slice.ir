{
  app __x0__ = (RequireObjectCoercible this)
  if (is-completion __x0__) if (= __x0__.Type CONST_normal) __x0__ = __x0__.Value else return __x0__ else {}
  let O = __x0__
  app __x1__ = (ToString O)
  if (is-completion __x1__) if (= __x1__.Type CONST_normal) __x1__ = __x1__.Value else return __x1__ else {}
  let S = __x1__
  let len = S.length
  app __x2__ = (ToIntegerOrInfinity start)
  if (is-completion __x2__) if (= __x2__.Type CONST_normal) __x2__ = __x2__.Value else return __x2__ else {}
  let intStart = __x2__
  ??? "If id:{intStart} is - ∞ , let id:{from} be 0 ."
  ??? "Else if id:{intStart} < 0 , let id:{from} be max ( id:{len} + id:{intStart} , 0 ) ."
  ??? "Else , let id:{from} be min ( id:{intStart} , id:{len} ) ."
  if (= end undefined) let intEnd = len else {
    app __x3__ = (ToIntegerOrInfinity end)
    if (is-completion __x3__) if (= __x3__.Type CONST_normal) __x3__ = __x3__.Value else return __x3__ else {}
    let intEnd = __x3__
  }
  ??? "If id:{intEnd} is - ∞ , let id:{to} be 0 ."
  ??? "Else if id:{intEnd} < 0 , let id:{to} be max ( id:{len} + id:{intEnd} , 0 ) ."
  ??? "Else , let id:{to} be min ( id:{intEnd} , id:{len} ) ."
  if (! (< from to)) {
    app __x4__ = (WrapCompletion "")
    return __x4__
  } else {}
  let __x5__ = ""
  let __x6__ = from
  while (< __x6__ (+ to 1i)) {
    access __x7__ = (S __x6__)
    __x5__ = (+ __x5__ __x7__)
    __x6__ = (+ __x6__ 1i)
  }
  app __x8__ = (WrapCompletion __x5__)
  return __x8__
}