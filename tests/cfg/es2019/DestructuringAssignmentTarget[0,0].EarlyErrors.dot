digraph {
  node18629 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node18632 [shape=diamond, label=<<font color="black">__x0__</font>> color="black" fillcolor="white" style=filled]
  node18633 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let __x1__ = false</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18631 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let __x0__ = true</td></tr>
      <tr><td align="left">0:__x0__ = (|| (is-instance-of LeftHandSideExpression ObjectLiteral) (is-instance-of LeftHandSideExpression ArrayLiteral))</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18637 [shape=diamond, label=<<font color="black">__x0__</font>> color="black" fillcolor="white" style=filled]
  node18644 [shape=diamond, label=<<font color="black">__x2__</font>> color="black" fillcolor="white" style=filled]
  node18630 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node18634 [shape=diamond, label=<<font color="black">(= absent (parse-syntax LeftHandSideExpression &quot;AssignmentPattern&quot; (new [])))</font>> color="black" fillcolor="white" style=filled]
  node18646 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return undefined</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18635 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">__x1__ = true</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18642 [shape=cds, label=<<font color="black">app __x3__ = (AssignmentTargetType LeftHandSideExpression)</font>> color="black" fillcolor="white" style=filled]
  node18639 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return undefined</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18636 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">__x0__ = __x1__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18645 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw SyntaxError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18640 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">1:let __x2__ = true</td></tr>
      <tr><td align="left">1:__x2__ = (! (|| (is-instance-of LeftHandSideExpression ObjectLiteral) (is-instance-of LeftHandSideExpression ArrayLiteral)))</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18641 [shape=diamond, label=<<font color="black">__x2__</font>> color="black" fillcolor="white" style=filled]
  node18638 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw SyntaxError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18643 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">__x2__ = (! (= __x3__ CONST_simple))</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18646 -> node18630 [ color="black"]
  node18644 -> node18645 [label=<<font color="black">true</font>> color="black"]
  node18644 -> node18646 [label=<<font color="black">false</font>> color="black"]
  node18636 -> node18637 [ color="black"]
  node18638 -> node18640 [ color="black"]
  node18639 -> node18640 [ color="black"]
  node18635 -> node18636 [ color="black"]
  node18643 -> node18644 [ color="black"]
  node18631 -> node18632 [ color="black"]
  node18637 -> node18638 [label=<<font color="black">true</font>> color="black"]
  node18637 -> node18639 [label=<<font color="black">false</font>> color="black"]
  node18629 -> node18631 [ color="black"]
  node18640 -> node18641 [ color="black"]
  node18642 -> node18643 [ color="black"]
  node18634 -> node18635 [label=<<font color="black">true</font>> color="black"]
  node18634 -> node18636 [label=<<font color="black">false</font>> color="black"]
  node18632 -> node18633 [label=<<font color="black">true</font>> color="black"]
  node18632 -> node18637 [label=<<font color="black">false</font>> color="black"]
  node18633 -> node18634 [ color="black"]
  node18645 -> node18630 [ color="black"]
  node18641 -> node18642 [label=<<font color="black">true</font>> color="black"]
  node18641 -> node18644 [label=<<font color="black">false</font>> color="black"]
}
