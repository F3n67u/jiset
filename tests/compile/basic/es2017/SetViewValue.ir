{
  app __x0__ = (Type view)
  if (! (= __x0__ Object)) throw INTRINSIC_TypeError else {}
  if (= view.DataView absent) throw INTRINSIC_TypeError else {}
  assert (! (= view.ViewedArrayBuffer absent))
  app __x1__ = (ToIndex requestIndex)
  if (is-completion __x1__) if (= __x1__.Type CONST_normal) __x1__ = __x1__.Value else return __x1__ else {}
  let getIndex = __x1__
  app __x2__ = (ToNumber value)
  if (is-completion __x2__) if (= __x2__.Type CONST_normal) __x2__ = __x2__.Value else return __x2__ else {}
  let numberValue = __x2__
  app __x3__ = (ToBoolean isLittleEndian)
  isLittleEndian = __x3__
  let buffer = view.ViewedArrayBuffer
  app __x4__ = (IsDetachedBuffer buffer)
  if (= __x4__ true) throw INTRINSIC_TypeError else {}
  let viewOffset = view.ByteOffset
  let viewSize = view.ByteLength
  ??? "Let id:{elementSize} be the Number value of the Element Size value specified in link:{unhandled: table-49} for Element Type id:{type} ."
  if (< viewSize (+ getIndex elementSize)) throw INTRINSIC_RangeError else {}
  let bufferIndex = (+ getIndex viewOffset)
  app __x5__ = (SetValueInBuffer buffer bufferIndex type numberValue false "Unordered" isLittleEndian)
  app __x6__ = (WrapCompletion __x5__)
  return __x6__
}