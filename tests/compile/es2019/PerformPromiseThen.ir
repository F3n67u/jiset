{
  [0] app __x0__ = (IsPromise promise)
  [0] assert (= __x0__ true)
  [3] if (! (= resultCapability absent)) {} else resultCapability = undefined
  [5] app __x1__ = (IsCallable onFulfilled)
  [5] if (= __x1__ false) onFulfilled = undefined else [2] {}
  [7] app __x2__ = (IsCallable onRejected)
  [7] if (= __x2__ false) onRejected = undefined else [2] {}
  [9] let fulfillReaction = (new PromiseReaction("Capability" -> resultCapability, "Type" -> "Fulfill", "Handler" -> onFulfilled))
  [10] let rejectReaction = (new PromiseReaction("Capability" -> resultCapability, "Type" -> "Reject", "Handler" -> onRejected))
  [17] if (= promise.PromiseState "pending") {
    [12] append fulfillReaction -> promise.PromiseFulfillReactions
    [13] append rejectReaction -> promise.PromiseRejectReactions
  } else if (= promise.PromiseState "fulfilled") {
    [15] let value = promise.PromiseResult
    [16] app __x3__ = (EnqueueJob "PromiseJobs" PromiseReactionJob (new [fulfillReaction, value]))
    [16] __x3__
  } else {
    [18] assert (= promise.PromiseState "rejected")
    [19] let reason = promise.PromiseResult
    [20] if (= promise.PromiseIsHandled false) {
      app __x4__ = (HostPromiseRejectionTracker promise "handle")
      __x4__
    } else [2] {}
    [21] app __x5__ = (EnqueueJob "PromiseJobs" PromiseReactionJob (new [rejectReaction, reason]))
    [21] __x5__
  }
  [22] promise.PromiseIsHandled = true
  [25] if (= resultCapability undefined) {
    [24] app __x6__ = (WrapCompletion undefined)
    [24] return __x6__
  } else {
    [26] app __x7__ = (WrapCompletion resultCapability.Promise)
    [26] return __x7__
  }
}