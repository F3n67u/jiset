{
  app __x0__ = (Get holder name)
  let val = [? __x0__]
  if (= (typeof val) Object) {
    app __x1__ = (IsArray val)
    let isArray = [? __x1__]
    if (= isArray true) {
      let I = 0i
      app __x2__ = (Get val "length")
      app __x3__ = (ToLength [? __x2__])
      let len = [? __x3__]
      while (< I len) {
        app __x4__ = (ToString I)
        app __x5__ = (InternalizeJSONProperty val [! __x4__])
        let newElement = [? __x5__]
        if (= newElement undefined) {
          app __x6__ = (ToString I)
          app __x7__ = (val.Delete val [! __x6__])
          [? __x7__]
        } else {
          app __x8__ = (ToString I)
          app __x9__ = (CreateDataProperty val [! __x8__] newElement)
          [? __x9__]
        }
        append 1i -> I
      }
    } else {
      app __x10__ = (EnumerableOwnPropertyNames val "key")
      let keys = [? __x10__]
      let __x11__ = keys
      let __x12__ = 0i
      while (< __x12__ __x11__.length) {
        let P = __x11__[__x12__]
        app __x13__ = (InternalizeJSONProperty val P)
        let newElement = [? __x13__]
        if (= newElement undefined) {
          app __x14__ = (val.Delete val P)
          [? __x14__]
        } else {
          app __x15__ = (CreateDataProperty val P newElement)
          [? __x15__]
        }
        __x12__ = (+ __x12__ 1i)
      }
    }
  } else {}
  app __x16__ = (Call reviver holder (new [name, val]))
  return [? __x16__]
}