{
  app typedArray = (GetArgument argumentsList 0i)
  app index = (GetArgument argumentsList 1i)
  app expectedValue = (GetArgument argumentsList 2i)
  app replacementValue = (GetArgument argumentsList 3i)
  [0] app __x0__ = (ValidateIntegerTypedArray typedArray)
  [0] if (is-completion __x0__) if (= __x0__.Type CONST_normal) __x0__ = __x0__.Value else return __x0__ else [22] {}
  [0] let buffer = __x0__
  [1] let block = buffer.ArrayBufferData
  [2] app __x1__ = (ValidateAtomicAccess typedArray index)
  [2] if (is-completion __x1__) if (= __x1__.Type CONST_normal) __x1__ = __x1__.Value else return __x1__ else [22] {}
  [2] let indexedPosition = __x1__
  [3] let arrayTypeName = typedArray.TypedArrayName
  [7] if (= typedArray.ContentType CONST_BigInt) {
    [5] app __x2__ = (ToBigInt expectedValue)
    [5] if (is-completion __x2__) if (= __x2__.Type CONST_normal) __x2__ = __x2__.Value else return __x2__ else [22] {}
    [5] let expected = __x2__
    [6] app __x3__ = (ToBigInt replacementValue)
    [6] if (is-completion __x3__) if (= __x3__.Type CONST_normal) __x3__ = __x3__.Value else return __x3__ else [22] {}
    [6] let replacement = __x3__
  } else {
    [8] ??? "Let id:{expected} be 𝔽 ( ? ToIntegerOrInfinity ( id:{expectedValue} ) ) ."
    [9] ??? "Let id:{replacement} be 𝔽 ( ? ToIntegerOrInfinity ( id:{replacementValue} ) ) ."
  }
  [10] app __x4__ = (IsDetachedBuffer buffer)
  [10] if (= __x4__ true) {
    app __x5__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_TypeError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
    return __x5__
  } else [22] {}
  [12] ??? "Let id:{elementType} be the Element Type value in link:{} for id:{arrayTypeName} ."
  [13] ??? "Let id:{elementSize} be the Element Size value specified in link:{} for Element Type id:{elementType} ."
  [14] let isLittleEndian = GLOBAL_agent.LittleEndian
  [15] app __x6__ = (NumericToRawBytes elementType expected isLittleEndian)
  [15] let expectedBytes = __x6__
  [16] app __x7__ = (NumericToRawBytes elementType replacement isLittleEndian)
  [16] let replacementBytes = __x7__
  [31] app __x8__ = (IsSharedArrayBuffer buffer)
  [31] if (= __x8__ true) {
    [18] let execution = GLOBAL_agent.CandidateExecution
    [19] ??? "Let id:{eventList} be the [ [ EventList ] ] field of the element in id:{execution} . [ [ EventsRecords ] ] whose [ [ AgentSignifier ] ] is AgentSignifier ( ) ."
    [20] ??? "Let id:{rawBytesRead} be a List of length id:{elementSize} whose elements are nondeterministically chosen byte values ."
    [27] app __x9__ = (ByteListEqual rawBytesRead expectedBytes)
    [27] if (= __x9__ true) {
      [24] ??? "Let id:{second} be a new read - modify - write modification function with parameters ( id:{oldBytes} , id:{newBytes} ) that captures nothing and performs the following steps atomically when called : step-list:{...}"
      [26] ??? "Let id:{event} be ReadModifyWriteSharedMemory { [ [ Order ] ] : const:{SeqCst} , [ [ NoTear ] ] : value:{true} , [ [ Block ] ] : id:{block} , [ [ ByteIndex ] ] : id:{indexedPosition} , [ [ ElementSize ] ] : id:{elementSize} , [ [ Payload ] ] : id:{replacementBytes} , [ [ ModifyOp ] ] : id:{second} } ."
    } else let event = (new ReadSharedMemory("Order" -> CONST_SeqCst, "NoTear" -> true, "Block" -> block, "ByteIndex" -> indexedPosition, "ElementSize" -> elementSize))
    [29] append event -> eventList
    [30] append (new ChosenValueRecord("Event" -> event, "ChosenValue" -> rawBytesRead)) -> execution.ChosenValues
  } else {
    [32] ??? "Let id:{rawBytesRead} be a List of length id:{elementSize} whose elements are the sequence of id:{elementSize} bytes starting with id:{block} [ id:{indexedPosition} ] ."
    [33] app __x10__ = (ByteListEqual rawBytesRead expectedBytes)
    [33] if (= __x10__ true) ??? "Store the individual bytes of id:{replacementBytes} into id:{block} , starting at id:{block} [ id:{indexedPosition} ] ." else [22] {}
  }
  [35] app __x11__ = (RawBytesToNumeric elementType rawBytesRead isLittleEndian)
  [35] app __x12__ = (WrapCompletion __x11__)
  [35] return __x12__
}