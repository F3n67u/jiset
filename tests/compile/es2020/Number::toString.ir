{
  [0] ??? "If id:{x} is value:{NaN} , return the String value:{\"NaN\"} ."
  [1] ??? "If id:{x} is value:{+0} or value:{-0} , return the String value:{\"0\"} ."
  [2] ??? "If id:{x} is less than zero , return the string - concatenation of value:{\"-\"} and ! Number : : toString ( - id:{x} ) ."
  [3] ??? "If id:{x} is value:{+∞} , return the String value:{\"Infinity\"} ."
  [4] ??? "Otherwise , let id:{n} , id:{k} , and id:{s} be integers such that id:{k} ≥ 1 , 10 sup:{id:{k} - 1 } ≤ id:{s} < 10 sup:{id:{k} } , the Number value for ℝ ( id:{s} ) × 10 sub:{ℝ } sup:{ℝ ( id:{n} ) - ℝ ( id:{k} ) } is id:{x} , and id:{k} is as small as possible . Note that id:{k} is the number of digits in the decimal representation of id:{s} , that id:{s} is not divisible by 10 sub:{ℝ } , and that the least significant digit of id:{s} is not necessarily uniquely determined by these criteria ."
  [5] if (&& (! (< n k)) (! (< 21i n))) {
    app __x0__ = (WrapCompletion (+ ??? "StringOp" ??? "StringOp"))
    return __x0__
  } else [9] {}
  [8] if (&& (< 0i n) (! (< 21i n))) {
    app __x1__ = (WrapCompletion (+ (+ ??? "StringOp" ".") ??? "StringOp"))
    return __x1__
  } else [9] {}
  [17] if (&& (< -6i n) (! (< 0i n))) {
    app __x2__ = (WrapCompletion (+ (+ (+ "0" ".") ??? "StringOp") ??? "StringOp"))
    return __x2__
  } else if (== k 1i) {
    app __x3__ = (WrapCompletion (+ (+ (+ ??? "StringOp" "e") ??? "StringOp") ??? "StringOp"))
    return __x3__
  } else [9] {}
  [22] app __x4__ = (WrapCompletion (+ (+ (+ (+ (+ ??? "StringOp" ".") ??? "StringOp") "e") ??? "StringOp") ??? "StringOp"))
  [22] return __x4__
}