{
  app target = (GetArgument argumentsList 0i)
  app start = (GetArgument argumentsList 1i)
  app end = (GetArgument argumentsList 2i)
  [0] app __x0__ = (ToObject this)
  [0] if (is-completion __x0__) if (= __x0__.Type CONST_normal) __x0__ = __x0__.Value else return __x0__ else [32] {}
  [0] let O = __x0__
  [1] app __x1__ = (Get O "length")
  [1] if (is-completion __x1__) if (= __x1__.Type CONST_normal) __x1__ = __x1__.Value else return __x1__ else [32] {}
  [1] app __x2__ = (ToLength __x1__)
  [1] if (is-completion __x2__) if (= __x2__.Type CONST_normal) __x2__ = __x2__.Value else return __x2__ else [32] {}
  [1] let len = __x2__
  [2] app __x3__ = (ToInteger target)
  [2] if (is-completion __x3__) if (= __x3__.Type CONST_normal) __x3__ = __x3__.Value else return __x3__ else [32] {}
  [2] let relativeTarget = __x3__
  [3] if (< relativeTarget 0i) {
    app __x4__ = (max (+ len relativeTarget) 0i)
    let to = __x4__
  } else {
    app __x5__ = (min relativeTarget len)
    let to = __x5__
  }
  [4] app __x6__ = (ToInteger start)
  [4] if (is-completion __x6__) if (= __x6__.Type CONST_normal) __x6__ = __x6__.Value else return __x6__ else [32] {}
  [4] let relativeStart = __x6__
  [5] if (< relativeStart 0i) {
    app __x7__ = (max (+ len relativeStart) 0i)
    let from = __x7__
  } else {
    app __x8__ = (min relativeStart len)
    let from = __x8__
  }
  [6] if (= end undefined) let relativeEnd = len else {
    app __x9__ = (ToInteger end)
    if (is-completion __x9__) if (= __x9__.Type CONST_normal) __x9__ = __x9__.Value else return __x9__ else [32] {}
    let relativeEnd = __x9__
  }
  [7] if (< relativeEnd 0i) {
    app __x10__ = (max (+ len relativeEnd) 0i)
    let final = __x10__
  } else {
    app __x11__ = (min relativeEnd len)
    let final = __x11__
  }
  [8] app __x12__ = (min (- final from) (- len to))
  [8] let count = __x12__
  [13] if (&& (< from to) (< to (+ from count))) {
    [10] let direction = -1i
    [11] from = (- (+ from count) 1i)
    [12] to = (- (+ to count) 1i)
  } else let direction = 1i
  [15] while (< 0i count) {
    [16] app __x13__ = (ToString from)
    [16] if (is-completion __x13__) if (= __x13__.Type CONST_normal) __x13__ = __x13__.Value else return __x13__ else [32] {}
    [16] let fromKey = __x13__
    [17] app __x14__ = (ToString to)
    [17] if (is-completion __x14__) if (= __x14__.Type CONST_normal) __x14__ = __x14__.Value else return __x14__ else [32] {}
    [17] let toKey = __x14__
    [18] app __x15__ = (HasProperty O fromKey)
    [18] if (is-completion __x15__) if (= __x15__.Type CONST_normal) __x15__ = __x15__.Value else return __x15__ else [32] {}
    [18] let fromPresent = __x15__
    [22] if (= fromPresent true) {
      [20] app __x16__ = (Get O fromKey)
      [20] if (is-completion __x16__) if (= __x16__.Type CONST_normal) __x16__ = __x16__.Value else return __x16__ else [32] {}
      [20] let fromVal = __x16__
      [21] app __x17__ = (Set O toKey fromVal true)
      [21] if (is-completion __x17__) if (= __x17__.Type CONST_normal) __x17__ = __x17__.Value else return __x17__ else [32] {}
      [21] __x17__
    } else {
      [23] app __x18__ = (DeletePropertyOrThrow O toKey)
      [23] if (is-completion __x18__) if (= __x18__.Type CONST_normal) __x18__ = __x18__.Value else return __x18__ else [32] {}
      [23] __x18__
    }
    [24] from = (+ from direction)
    [25] to = (+ to direction)
    [26] count = (- count 1i)
  }
  [27] app __x19__ = (WrapCompletion O)
  [27] return __x19__
}