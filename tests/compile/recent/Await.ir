{
  [0] let asyncContext = GLOBAL_context
  [1] app __x0__ = (PromiseResolve INTRINSIC_Promise value)
  [1] if (is-completion __x0__) if (= __x0__.Type CONST_normal) __x0__ = __x0__.Value else return __x0__ else [12] {}
  [1] let promise = __x0__
  [2] ??? "Let id:{stepsFulfilled} be the algorithm steps defined in link:{} ."
  [3] app __x1__ = (CreateBuiltinFunction stepsFulfilled (new ["AsyncContext"]))
  [3] if (is-completion __x1__) if (= __x1__.Type CONST_normal) __x1__ = __x1__.Value else return __x1__ else [12] {}
  [3] let onFulfilled = __x1__
  [4] onFulfilled.AsyncContext = asyncContext
  [5] ??? "Let id:{stepsRejected} be the algorithm steps defined in link:{} ."
  [6] app __x2__ = (CreateBuiltinFunction stepsRejected (new ["AsyncContext"]))
  [6] if (is-completion __x2__) if (= __x2__.Type CONST_normal) __x2__ = __x2__.Value else return __x2__ else [12] {}
  [6] let onRejected = __x2__
  [7] onRejected.AsyncContext = asyncContext
  [8] app __x3__ = (PerformPromiseThen promise onFulfilled onRejected)
  [8] if (is-completion __x3__) if (= __x3__.Type CONST_normal) __x3__ = __x3__.Value else return __x3__ else [12] {}
  [8] __x3__
  [9] if (= GLOBAL_executionStack[(- GLOBAL_executionStack.length 1i)] asyncContext) {
    let __x4__ = (- GLOBAL_executionStack.length 1i)
    (pop GLOBAL_executionStack __x4__)
  } else {}
  [9] GLOBAL_context = GLOBAL_executionStack[(- GLOBAL_executionStack.length 1i)]
  [10] ??? "Set the code evaluation state of id:{asyncContext} such that when evaluation is resumed with a Completion id:{completion} , the following steps of the algorithm that invoked Await will be performed , with id:{completion} available ."
  [11] app __x5__ = (NormalCompletion undefined)
  [11] return __x5__
}