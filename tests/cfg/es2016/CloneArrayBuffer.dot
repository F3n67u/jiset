digraph {
  node14977 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node14981 [shape=cds, label=<<font color="black">3:app __x1__ = (IsDetachedBuffer srcBuffer)</font>> color="black" fillcolor="white" style=filled]
  node14987 [shape=cds, label=<<font color="black">9:app __x3__ = (AllocateArrayBuffer cloneConstructor cloneLength)</font>> color="black" fillcolor="white" style=filled]
  node14993 [shape=cds, label=<<font color="black">12:app __x5__ = (CopyDataBlockBytes targetBlock 0i srcBlock srcByteOffset cloneLength)</font>> color="black" fillcolor="white" style=filled]
  node14978 [shape=diamond, label=<<font color="black">(= cloneConstructor absent)</font>> color="black" fillcolor="white" style=filled]
  node14990 [shape=diamond, label=<<font color="black">(= __x4__ true)</font>> color="black" fillcolor="white" style=filled]
  node14986 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">5:let srcLength = srcBuffer.ArrayBufferByteLength</td></tr>
      <tr><td align="left">6:assert (! (&lt; srcLength srcByteOffset))</td></tr>
      <tr><td align="left">7:let cloneLength = (- srcLength srcByteOffset)</td></tr>
      <tr><td align="left">8:let srcBlock = srcBuffer.ArrayBufferData</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14982 [shape=diamond, label=<<font color="black">(= __x1__ true)</font>> color="black" fillcolor="white" style=filled]
  node14994 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">12:__x5__</td></tr>
      <tr><td align="left">13:return targetBuffer</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14989 [shape=cds, label=<<font color="black">10:app __x4__ = (IsDetachedBuffer srcBuffer)</font>> color="black" fillcolor="white" style=filled]
  node14979 [shape=cds, label=<<font color="black">2:app __x0__ = (SpeciesConstructor srcBuffer INTRINSIC_ArrayBuffer)</font>> color="black" fillcolor="white" style=filled]
  node14985 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">assert (= __x2__ true)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14983 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14992 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">11:let targetBlock = targetBuffer.ArrayBufferData</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14980 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">2:let cloneConstructor = [? __x0__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14984 [shape=cds, label=<<font color="black">app __x2__ = (IsConstructor cloneConstructor)</font>> color="black" fillcolor="white" style=filled]
  node14988 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">9:let targetBuffer = [? __x3__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14976 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node14991 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14988 -> node14989 [ color="black"]
  node14991 -> node14992 [ color="black"]
  node14989 -> node14990 [ color="black"]
  node14978 -> node14979 [label=<<font color="black">true</font>> color="black"]
  node14978 -> node14984 [label=<<font color="black">false</font>> color="black"]
  node14992 -> node14993 [ color="black"]
  node14984 -> node14985 [ color="black"]
  node14976 -> node14978 [ color="black"]
  node14990 -> node14991 [label=<<font color="black">true</font>> color="black"]
  node14990 -> node14992 [label=<<font color="black">false</font>> color="black"]
  node14983 -> node14986 [ color="black"]
  node14993 -> node14994 [ color="black"]
  node14987 -> node14988 [ color="black"]
  node14979 -> node14980 [ color="black"]
  node14982 -> node14983 [label=<<font color="black">true</font>> color="black"]
  node14982 -> node14986 [label=<<font color="black">false</font>> color="black"]
  node14980 -> node14981 [ color="black"]
  node14981 -> node14982 [ color="black"]
  node14985 -> node14986 [ color="black"]
  node14994 -> node14977 [ color="black"]
  node14986 -> node14987 [ color="black"]
}
