digraph {
  node17556 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">5:??? &quot;Let id:{elementSize} be the Element Size value specified in link:{unhandled: table-the-typedarray-constructors} for id:{arrayTypeName} .&quot;</td></tr>
      <tr><td align="left">6:??? &quot;Let id:{elementType} be the Element Type value in link:{unhandled: table-the-typedarray-constructors} for id:{arrayTypeName} .&quot;</td></tr>
      <tr><td align="left">7:let offset = typedArray.ByteOffset</td></tr>
      <tr><td align="left">8:let indexedPosition = (+ (* i elementSize) offset)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17549 [shape=cds, label=<<font color="black">1:app __x1__ = (ValidateAtomicAccess typedArray index)</font>> color="black" fillcolor="white" style=filled]
  node17545 [shape=cds, label=<<font color="black">app index = (GetArgument argumentsList 1i)</font>> color="black" fillcolor="white" style=filled]
  node17555 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let v = [? __x3__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17550 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">1:let i = [? __x1__]</td></tr>
      <tr><td align="left">2:let arrayTypeName = typedArray.TypedArrayName</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17546 [shape=cds, label=<<font color="black">app value = (GetArgument argumentsList 2i)</font>> color="black" fillcolor="white" style=filled]
  node17542 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node17554 [shape=cds, label=<<font color="black">app __x3__ = (ToInteger value)</font>> color="black" fillcolor="white" style=filled]
  node17547 [shape=cds, label=<<font color="black">0:app __x0__ = (ValidateSharedIntegerTypedArray typedArray)</font>> color="black" fillcolor="white" style=filled]
  node17551 [shape=diamond, label=<<font color="black">(|| (= arrayTypeName &quot;BigUint64Array&quot;) (= arrayTypeName &quot;BigInt64Array&quot;))</font>> color="black" fillcolor="white" style=filled]
  node17558 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">9:__x4__</td></tr>
      <tr><td align="left">10:return v</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17552 [shape=cds, label=<<font color="black">app __x2__ = (ToBigInt value)</font>> color="black" fillcolor="white" style=filled]
  node17553 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let v = [? __x2__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17543 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node17544 [shape=cds, label=<<font color="black">app typedArray = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node17548 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let buffer = [? __x0__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17557 [shape=cds, label=<<font color="black">9:app __x4__ = (SetValueInBuffer buffer indexedPosition elementType v true CONST_SeqCst)</font>> color="black" fillcolor="white" style=filled]
  node17546 -> node17547 [ color="black"]
  node17551 -> node17552 [label=<<font color="black">true</font>> color="black"]
  node17551 -> node17554 [label=<<font color="black">false</font>> color="black"]
  node17552 -> node17553 [ color="black"]
  node17547 -> node17548 [ color="black"]
  node17557 -> node17558 [ color="black"]
  node17554 -> node17555 [ color="black"]
  node17556 -> node17557 [ color="black"]
  node17542 -> node17544 [ color="black"]
  node17553 -> node17556 [ color="black"]
  node17549 -> node17550 [ color="black"]
  node17558 -> node17543 [ color="black"]
  node17544 -> node17545 [ color="black"]
  node17550 -> node17551 [ color="black"]
  node17548 -> node17549 [ color="black"]
  node17555 -> node17556 [ color="black"]
  node17545 -> node17546 [ color="black"]
}
