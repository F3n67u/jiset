digraph {
  node0 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node5 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">1:let min = __x1__[0i]</td></tr>
      <tr><td align="left">1:let max = __x1__[1i]</td></tr>
      <tr><td align="left">1:let greedy = __x1__[2i]</td></tr>
      <tr><td align="left">2:??? &quot;If id:{max} is finite and less than id:{min} , throw a value:{SyntaxError} exception .&quot;</td></tr>
      <tr><td align="left">3:??? &quot;Let id:{parenIndex} be the number of left - capturing parentheses in the entire regular expression that occur to the left of this nt:{Term} . This is the total number of grammar:{Atom4, [Disjunction]} Parse Nodes prior to or enclosing this nt:{Term} .&quot;</td></tr>
      <tr><td align="left">4:??? &quot;Let id:{parenCount} be the number of left - capturing parentheses in nt:{Atom} . This is the total number of grammar:{Atom4, [Disjunction]} Parse Nodes enclosed by nt:{Atom} .&quot;</td></tr>
      <tr><td align="left">5:??? &quot;Return an internal Matcher closure that takes two arguments , a State id:{x} and a Continuation id:{c} , and performs the following steps when evaluated : in:{} out:{}&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node1 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node2 [shape=cds, label=<<font color="black">0:access __x0__ = (Atom &quot;Evaluation&quot;)</font>> color="black" fillcolor="white" style=filled]
  node3 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let m = __x0__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node4 [shape=cds, label=<<font color="black">1:access __x1__ = (Quantifier &quot;Evaluation&quot;)</font>> color="black" fillcolor="white" style=filled]
  node3 -> node4 [ color="black"]
  node2 -> node3 [ color="black"]
  node0 -> node2 [ color="black"]
  node4 -> node5 [ color="black"]
  node5 -> node1 [ color="black"]
}
