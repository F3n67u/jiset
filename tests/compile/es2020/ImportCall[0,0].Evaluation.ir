{
  [0] app __x0__ = (GetActiveScriptOrModule )
  [0] if (is-completion __x0__) if (= __x0__.Type CONST_normal) __x0__ = __x0__.Value else return __x0__ else [3] {}
  [0] let referencingScriptOrModule = __x0__
  [1] access __x1__ = (AssignmentExpression "Evaluation")
  [1] let argRef = __x1__
  [2] app __x2__ = (GetValue argRef)
  [2] if (is-completion __x2__) if (= __x2__.Type CONST_normal) __x2__ = __x2__.Value else return __x2__ else [3] {}
  [2] let specifier = __x2__
  [3] app __x3__ = (NewPromiseCapability INTRINSIC_Promise)
  [3] if (is-completion __x3__) if (= __x3__.Type CONST_normal) __x3__ = __x3__.Value else return __x3__ else [3] {}
  [3] let promiseCapability = __x3__
  [4] app __x4__ = (ToString specifier)
  [4] let specifierString = __x4__
  [5] if (is-completion specifierString) if (= specifierString.Type CONST_normal) specifierString = specifierString.Value else {
    app __x5__ = (Call promiseCapability.Reject undefined (new [specifierString.Value]))
    if (&& (is-completion __x5__) (! (= __x5__.Type CONST_normal))) return __x5__ else [3] {}
    return promiseCapability.Promise
  } else [3] {}
  [5] specifierString
  [6] app __x6__ = (HostImportModuleDynamically referencingScriptOrModule specifierString promiseCapability)
  [6] if (is-completion __x6__) if (= __x6__.Type CONST_normal) __x6__ = __x6__.Value else return __x6__ else [3] {}
  [6] __x6__
  [7] app __x7__ = (WrapCompletion promiseCapability.Promise)
  [7] return __x7__
}