{
  app __x0__ = (GetArgument argumentsList 0i)
  let generator = __x0__
  app __x1__ = (GetArgument argumentsList 1i)
  let completion = __x1__
  assert (is-completion completion)
  app __x2__ = (NewPromiseCapability INTRINSIC_Promise)
  let promiseCapability = [! __x2__]
  app __x3__ = (Type generator)
  if (|| (! (= __x3__ Object)) (= generator.AsyncGeneratorState absent)) {
    let badGeneratorError = ??? "TypeError"
    app __x4__ = (Call promiseCapability.Reject undefined (new [badGeneratorError]))
    [! __x4__]
    return promiseCapability.Promise
  } else {}
  let queue = generator.AsyncGeneratorQueue
  let request = (new AsyncGeneratorRequest("Completion" -> completion, "Capability" -> promiseCapability))
  append request -> queue
  let state = generator.AsyncGeneratorState
  if (! (= state CONST_executing)) {
    app __x5__ = (AsyncGeneratorResumeNext generator)
    [! __x5__]
  } else {}
  return promiseCapability.Promise
}