{
  if (= LeftFirst true) {
    app __x0__ = (ToPrimitive x CONST_number)
    let px = [? __x0__]
    app __x1__ = (ToPrimitive y CONST_number)
    let py = [? __x1__]
  } else {
    app __x2__ = (ToPrimitive y CONST_number)
    let py = [? __x2__]
    app __x3__ = (ToPrimitive x CONST_number)
    let px = [? __x3__]
  }
  if (&& (= (typeof px) String) (= (typeof py) String)) {
    app __x4__ = (IsStringPrefix py px)
    if (= __x4__ true) return false else {}
    app __x5__ = (IsStringPrefix px py)
    if (= __x5__ true) return true else {}
    let k = AnyNum
    let m = AnyNum
    let n = AnyNum
    if (< m n) return true else return false
  } else {
    if (&& (= (typeof px) BigInt) (= (typeof py) String)) {
      app __x6__ = (StringToBigInt py)
      let ny = [! __x6__]
      if (= ny NaN) return undefined else {}
      app __x7__ = (PRIMITIVE[BigInt].lessThan px ny)
      return __x7__
    } else {}
    if (&& (= (typeof px) String) (= (typeof py) BigInt)) {
      app __x8__ = (StringToBigInt px)
      let nx = [! __x8__]
      if (= nx NaN) return undefined else {}
      app __x9__ = (PRIMITIVE[BigInt].lessThan nx py)
      return __x9__
    } else {}
    app __x10__ = (ToNumeric px)
    let nx = [! __x10__]
    app __x11__ = (ToNumeric py)
    let ny = [! __x11__]
    if (= (typeof nx) (typeof ny)) {
      app __x12__ = (PRIMITIVE[(typeof nx)].lessThan nx ny)
      return __x12__
    } else {}
    assert (|| (&& (= (typeof nx) BigInt) (= (typeof ny) Number)) (&& (= (typeof nx) Number) (= (typeof ny) BigInt)))
    if (|| (= nx NaN) (= ny NaN)) return undefined else {}
    if (|| (= nx -Infinity) (= ny Infinity)) return true else {}
    if (|| (= nx Infinity) (= ny -Infinity)) return false else {}
    if (< nx ny) return true else return false
  }
}