{
  [0] if (! (|| (is-instance-of LeftHandSideExpression ObjectLiteral) (is-instance-of LeftHandSideExpression ArrayLiteral))) {
    [1] access __x0__ = (LeftHandSideExpression "Evaluation")
    [1] let lref = __x0__
    [2] if (is-completion lref) if (= lref.Type CONST_normal) lref = lref.Value else return lref else [14] {}
    [2] lref
    [5] app __x1__ = (IsAnonymousFunctionDefinition AssignmentExpression)
    [5] access __x2__ = (LeftHandSideExpression "IsIdentifierRef")
    [5] if (&& (= __x1__ true) (= __x2__ true)) {
      [4] access __x3__ = (AssignmentExpression "NamedEvaluation")
      [4] app __x4__ = (__x3__ lref.ReferencedName)
      [4] let rval = __x4__
    } else {
      [6] access __x5__ = (AssignmentExpression "Evaluation")
      [6] let rref = __x5__
      [7] app __x6__ = (GetValue rref)
      [7] if (is-completion __x6__) if (= __x6__.Type CONST_normal) __x6__ = __x6__.Value else return __x6__ else [14] {}
      [7] let rval = __x6__
    }
    [8] app __x7__ = (PutValue lref rval)
    [8] if (is-completion __x7__) if (= __x7__.Type CONST_normal) __x7__ = __x7__.Value else return __x7__ else [14] {}
    [8] __x7__
    [9] app __x8__ = (WrapCompletion rval)
    [9] return __x8__
  } else [14] {}
  [10] let assignmentPattern = (parse-syntax LeftHandSideExpression "AssignmentPattern" (new []))
  [11] access __x9__ = (AssignmentExpression "Evaluation")
  [11] let rref = __x9__
  [12] app __x10__ = (GetValue rref)
  [12] if (is-completion __x10__) if (= __x10__.Type CONST_normal) __x10__ = __x10__.Value else return __x10__ else [14] {}
  [12] let rval = __x10__
  [13] access __x11__ = (assignmentPattern "DestructuringAssignmentEvaluation")
  [13] app __x12__ = (__x11__ rval)
  [13] if (is-completion __x12__) if (= __x12__.Type CONST_normal) __x12__ = __x12__.Value else return __x12__ else [14] {}
  [13] __x12__
  [14] app __x13__ = (WrapCompletion rval)
  [14] return __x13__
}