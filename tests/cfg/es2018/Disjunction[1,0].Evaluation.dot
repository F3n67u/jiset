digraph {
  node13679 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node13683 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let m1 = __x1__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node13682 [shape=cds, label=<<font color="black">0:app __x1__ = (__x0__ direction)</font>> color="black" fillcolor="white" style=filled]
  node13680 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node13685 [shape=cds, label=<<font color="black">1:app __x3__ = (__x2__ direction)</font>> color="black" fillcolor="white" style=filled]
  node13684 [shape=cds, label=<<font color="black">1:access __x2__ = (Disjunction &quot;Evaluation&quot;)</font>> color="black" fillcolor="white" style=filled]
  node13686 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">1:let m2 = __x3__</td></tr>
      <tr><td align="left">2:??? &quot;Return an internal Matcher closure that takes two arguments , a State id:{x} and a Continuation id:{c} , and performs the following steps when evaluated : in:{} out:{}&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node13681 [shape=cds, label=<<font color="black">0:access __x0__ = (Alternative &quot;Evaluation&quot;)</font>> color="black" fillcolor="white" style=filled]
  node13681 -> node13682 [ color="black"]
  node13679 -> node13681 [ color="black"]
  node13684 -> node13685 [ color="black"]
  node13685 -> node13686 [ color="black"]
  node13683 -> node13684 [ color="black"]
  node13682 -> node13683 [ color="black"]
  node13686 -> node13680 [ color="black"]
}
