{
  app __x0__ = (IteratorComplete result)
  let done = __x0__
  if (is-completion done) if (= done.Type CONST_normal) done = done.Value else {
    app __x1__ = (Call promiseCapability.Reject undefined (new [done.Value]))
    if (&& (is-completion __x1__) (! (= __x1__.Type CONST_normal))) return __x1__ else {}
    return promiseCapability.Promise
  } else {}
  done
  app __x2__ = (IteratorValue result)
  let value = __x2__
  if (is-completion value) if (= value.Type CONST_normal) value = value.Value else {
    app __x3__ = (Call promiseCapability.Reject undefined (new [value.Value]))
    if (&& (is-completion __x3__) (! (= __x3__.Type CONST_normal))) return __x3__ else {}
    return promiseCapability.Promise
  } else {}
  value
  app __x4__ = (PromiseResolve INTRINSIC_Promise value)
  let valueWrapper = __x4__
  if (is-completion valueWrapper) if (= valueWrapper.Type CONST_normal) valueWrapper = valueWrapper.Value else {
    app __x5__ = (Call promiseCapability.Reject undefined (new [valueWrapper.Value]))
    if (&& (is-completion __x5__) (! (= __x5__.Type CONST_normal))) return __x5__ else {}
    return promiseCapability.Promise
  } else {}
  valueWrapper
  ??? "Let id:{steps} be the algorithm steps defined in link:{unhandled: sec-async-from-sync-iterator-value-unwrap-functions} ."
  ??? "Let id:{length} be the number of non - optional parameters of the function definition in link:{unhandled: sec-async-from-sync-iterator-value-unwrap-functions} ."
  app __x6__ = (CreateBuiltinFunction steps length "" (new ["Done"]))
  let onFulfilled = [! __x6__]
  onFulfilled.Done = done
  app __x7__ = (PerformPromiseThen valueWrapper onFulfilled undefined promiseCapability)
  [! __x7__]
  return promiseCapability.Promise
}