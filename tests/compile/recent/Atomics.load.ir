{
  app typedArray = (GetArgument argumentsList 0i)
  app index = (GetArgument argumentsList 1i)
  [0] app __x0__ = (ValidateIntegerTypedArray typedArray)
  [0] if (is-completion __x0__) if (= __x0__.Type CONST_normal) __x0__ = __x0__.Value else return __x0__ else [3] {}
  [0] let buffer = __x0__
  [1] app __x1__ = (ValidateAtomicAccess typedArray index)
  [1] if (is-completion __x1__) if (= __x1__.Type CONST_normal) __x1__ = __x1__.Value else return __x1__ else [3] {}
  [1] let indexedPosition = __x1__
  [2] app __x2__ = (IsDetachedBuffer buffer)
  [2] if (= __x2__ true) {
    app __x3__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_TypeError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
    return __x3__
  } else [3] {}
  [4] let arrayTypeName = typedArray.TypedArrayName
  [5] ??? "Let id:{elementType} be the Element Type value in link:{} for id:{arrayTypeName} ."
  [6] app __x4__ = (GetValueFromBuffer buffer indexedPosition elementType true CONST_SeqCst)
  [6] app __x5__ = (WrapCompletion __x4__)
  [6] return __x5__
}