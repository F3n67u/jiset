{
  let strLen = string.length
  let R = ""
  let k = 0i
  while true {
    if (== k strLen) {
      app __x0__ = (WrapCompletion R)
      return __x0__
    } else {}
    let C = string[k]
    if (! (= C "%")) let S = C else {
      let start = k
      if (! (< (+ k 2i) strLen)) {
        app __x1__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_URIError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
        return __x1__
      } else {}
      ??? "If the code units at index ( id:{k} + 1 ) and ( id:{k} + 2 ) within id:{string} do not represent hexadecimal digits , throw a value:{URIError} exception ."
      ??? "Let id:{B} be the 8 - bit value represented by the two hexadecimal digits at index ( id:{k} + 1 ) and ( id:{k} + 2 ) ."
      k = (+ k 2i)
      ??? "Let id:{n} be the number of leading 1 bits in id:{B} ."
      if (== n 0i) {
        let C = B
        if (! (contains reservedSet C)) let S = C else {
          let __x2__ = ""
          let __x3__ = start
          while (< __x3__ (+ (+ k 1i) 1i)) {
            access __x4__ = (string __x3__)
            __x2__ = (+ __x2__ __x4__)
            __x3__ = (+ __x3__ 1i)
          }
          let S = __x2__
        }
      } else {
        if (|| (== n 1i) (< 4i n)) {
          app __x5__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_URIError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
          return __x5__
        } else {}
        if (! (< (+ k (* 3i (- n 1i))) strLen)) {
          app __x6__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_URIError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
          return __x6__
        } else {}
        let Octets = (new [B])
        let j = 1i
        while (< j n) {
          k = (+ k 1i)
          if (! (= string[k] "%")) {
            app __x7__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_URIError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
            return __x7__
          } else {}
          ??? "If the code units at index ( id:{k} + 1 ) and ( id:{k} + 2 ) within id:{string} do not represent hexadecimal digits , throw a value:{URIError} exception ."
          ??? "Let id:{B} be the 8 - bit value represented by the two hexadecimal digits at index ( id:{k} + 1 ) and ( id:{k} + 2 ) ."
          k = (+ k 2i)
          append B -> Octets
          j = (+ j 1i)
        }
        assert (= Octets.length n)
        ??? "If id:{Octets} does not contain a valid UTF - 8 encoding of a Unicode code point , throw a value:{URIError} exception ."
        ??? "Let id:{V} be the code point obtained by applying the UTF - 8 transformation to id:{Octets} , that is , from a List of octets into a 21 - bit value ."
        app __x8__ = (UTF16EncodeCodePoint V)
        let S = __x8__
      }
    }
    R = (+ R S)
    k = (+ k 1i)
  }
}