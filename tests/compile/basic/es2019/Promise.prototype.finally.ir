{
  let promise = this
  app __x0__ = (Type promise)
  if (! (= __x0__ Object)) throw INTRINSIC_TypeError else {}
  app __x1__ = (SpeciesConstructor promise INTRINSIC_Promise)
  if (is-completion __x1__) if (= __x1__.Type CONST_normal) __x1__ = __x1__.Value else return __x1__ else {}
  let C = __x1__
  app __x2__ = (IsConstructor C)
  assert (= __x2__ true)
  app __x3__ = (IsCallable onFinally)
  if (= __x3__ false) {
    let thenFinally = onFinally
    let catchFinally = onFinally
  } else {
    let stepsThenFinally = ThenFinallyFunctions
    app __x4__ = (CreateBuiltinFunction stepsThenFinally (new ["Constructor", "OnFinally"]))
    let thenFinally = __x4__
    thenFinally.Constructor = C
    thenFinally.OnFinally = onFinally
    let stepsCatchFinally = CatchFinallyFunctions
    app __x5__ = (CreateBuiltinFunction stepsCatchFinally (new ["Constructor", "OnFinally"]))
    let catchFinally = __x5__
    catchFinally.Constructor = C
    catchFinally.OnFinally = onFinally
  }
  app __x6__ = (Invoke promise "then" (new [thenFinally, catchFinally]))
  if (is-completion __x6__) if (= __x6__.Type CONST_normal) __x6__ = __x6__.Value else return __x6__ else {}
  app __x7__ = (WrapCompletion __x6__)
  return __x7__
}