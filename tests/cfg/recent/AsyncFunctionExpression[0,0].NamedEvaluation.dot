digraph {
  node10134 [shape=cds, label=<<font color="black">0:access __x0__ = (GLOBAL_context &quot;LexicalEnvironment&quot;)</font>> color="black" fillcolor="white" style=filled]
  node10138 [shape=cds, label=<<font color="black">3:app __x2__ = (SetFunctionName closure name)</font>> color="black" fillcolor="white" style=filled]
  node10139 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">3:__x2__</td></tr>
      <tr><td align="left">4:return closure</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10133 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node10136 [shape=cds, label=<<font color="black">2:app __x1__ = (OrdinaryFunctionCreate INTRINSIC_AsyncFunction_prototype sourceText FormalParameters AsyncFunctionBody CONST_nonDASHlexicalDASHthis scope)</font>> color="black" fillcolor="white" style=filled]
  node10132 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node10135 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let scope = __x0__</td></tr>
      <tr><td align="left">1:let sourceText = (get-syntax AsyncFunctionExpression)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10137 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">2:let closure = [! __x1__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10134 -> node10135 [ color="black"]
  node10132 -> node10134 [ color="black"]
  node10139 -> node10133 [ color="black"]
  node10137 -> node10138 [ color="black"]
  node10135 -> node10136 [ color="black"]
  node10138 -> node10139 [ color="black"]
  node10136 -> node10137 [ color="black"]
}
