digraph {
  node17766 [shape=cds, label=<<font color="black">app promise = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node17770 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">6:return __x0__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17767 [shape=cds, label=<<font color="black">app value = (GetArgument argumentsList 1i)</font>> color="black" fillcolor="white" style=filled]
  node17769 [shape=cds, label=<<font color="black">6:app __x0__ = (TriggerPromiseReactions reactions value)</font>> color="black" fillcolor="white" style=filled]
  node17764 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node17768 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:assert (= promise.PromiseState &quot;pending&quot;)</td></tr>
      <tr><td align="left">1:let reactions = promise.PromiseFulfillReactions</td></tr>
      <tr><td align="left">2:promise.PromiseResult = value</td></tr>
      <tr><td align="left">3:promise.PromiseFulfillReactions = undefined</td></tr>
      <tr><td align="left">4:promise.PromiseRejectReactions = undefined</td></tr>
      <tr><td align="left">5:promise.PromiseState = &quot;fulfilled&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17765 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node17769 -> node17770 [ color="black"]
  node17770 -> node17765 [ color="black"]
  node17764 -> node17766 [ color="black"]
  node17768 -> node17769 [ color="black"]
  node17766 -> node17767 [ color="black"]
  node17767 -> node17768 [ color="black"]
}
