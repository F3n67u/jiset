{
  if (= opText "+") {
    app __x0__ = (ToPrimitive lval)
    let lprim = [? __x0__]
    app __x1__ = (ToPrimitive rval)
    let rprim = [? __x1__]
    let __x2__ = true
    app __x3__ = (Type lprim)
    __x2__ = (= __x3__ String)
    if __x2__ {} else {
      app __x4__ = (Type rprim)
      __x2__ = (= __x4__ String)
    }
    if __x2__ {
      app __x5__ = (ToString lprim)
      let lstr = [? __x5__]
      app __x6__ = (ToString rprim)
      let rstr = [? __x6__]
      return (+ lstr rstr)
    } else {}
    lval = lprim
    rval = rprim
  } else {}
  app __x7__ = (ToNumeric lval)
  let lnum = [? __x7__]
  app __x8__ = (ToNumeric rval)
  let rnum = [? __x8__]
  app __x9__ = (Type lnum)
  app __x10__ = (Type rnum)
  if (! (= __x9__ __x10__)) throw TypeError else {}
  app __x11__ = (Type lnum)
  let T = __x11__
  ??? "Let id:{operation} be the abstract operation associated with id:{opText} in the following table : in:{} out:{}"
  app __x12__ = (operation lnum rnum)
  return [? __x12__]
}