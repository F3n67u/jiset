digraph {
  node6908 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node6907 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node6912 [shape=diamond, label=<<font color="black">(&lt; __x2__ __x1__.length)</font>> color="black" fillcolor="white" style=filled]
  node6911 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">1:let __x1__ = __x0__</td></tr>
      <tr><td align="left">1:let __x2__ = 0i</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node6914 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">2:return declarations</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node6909 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let declarations = (new [ForBinding])</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node6913 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let __x3__ = __x1__[__x2__]</td></tr>
      <tr><td align="left">append __x3__ -&gt; declarations</td></tr>
      <tr><td align="left">__x2__ = (+ __x2__ 1i)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node6910 [shape=cds, label=<<font color="black">1:access __x0__ = (Statement &quot;VarScopedDeclarations&quot;)</font>> color="black" fillcolor="white" style=filled]
  node6914 -> node6908 [ color="black"]
  node6912 -> node6913 [label=<<font color="black">true</font>> color="black"]
  node6912 -> node6914 [label=<<font color="black">false</font>> color="black"]
  node6909 -> node6910 [ color="black"]
  node6907 -> node6909 [ color="black"]
  node6913 -> node6912 [ color="black"]
  node6910 -> node6911 [ color="black"]
  node6911 -> node6912 [ color="black"]
}
