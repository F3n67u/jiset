digraph {
  node16501 [shape=cds, label=<<font color="black">10:app __x5__ = (Call resolvingFunctions.Reject undefined (new [completion.Value]))</font>> color="black" fillcolor="white" style=filled]
  node16498 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">8:let completion = __x3__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16495 [shape=cds, label=<<font color="black">7:app __x2__ = (CreateResolvingFunctions promise)</font>> color="black" fillcolor="white" style=filled]
  node16487 [shape=cds, label=<<font color="black">app executor = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node16497 [shape=cds, label=<<font color="black">8:app __x3__ = (Call executor undefined (new [resolvingFunctions.Resolve, resolvingFunctions.Reject]))</font>> color="black" fillcolor="white" style=filled]
  node16492 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16496 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">7:let resolvingFunctions = __x2__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16486 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node16493 [shape=cds, label=<<font color="black">2:app __x1__ = (OrdinaryCreateFromConstructor NewTarget INTRINSIC_PromisePrototype (new [&quot;PromiseState&quot;, &quot;PromiseResult&quot;, &quot;PromiseFulfillReactions&quot;, &quot;PromiseRejectReactions&quot;, &quot;PromiseIsHandled&quot;]))</font>> color="black" fillcolor="white" style=filled]
  node16489 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16499 [shape=cds, label=<<font color="black">9:app __x4__ = (IsAbruptCompletion completion)</font>> color="black" fillcolor="white" style=filled]
  node16494 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">2:let promise = [? __x1__]</td></tr>
      <tr><td align="left">3:promise.PromiseState = &quot;pending&quot;</td></tr>
      <tr><td align="left">4:promise.PromiseFulfillReactions = (new [])</td></tr>
      <tr><td align="left">5:promise.PromiseRejectReactions = (new [])</td></tr>
      <tr><td align="left">6:promise.PromiseIsHandled = false</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16490 [shape=cds, label=<<font color="black">1:app __x0__ = (IsCallable executor)</font>> color="black" fillcolor="white" style=filled]
  node16491 [shape=diamond, label=<<font color="black">(= __x0__ false)</font>> color="black" fillcolor="white" style=filled]
  node16488 [shape=diamond, label=<<font color="black">(= NewTarget undefined)</font>> color="black" fillcolor="white" style=filled]
  node16503 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">11:return promise</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16500 [shape=diamond, label=<<font color="black">__x4__</font>> color="black" fillcolor="white" style=filled]
  node16485 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node16502 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">10:[? __x5__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16490 -> node16491 [ color="black"]
  node16487 -> node16488 [ color="black"]
  node16485 -> node16487 [ color="black"]
  node16488 -> node16489 [label=<<font color="black">true</font>> color="black"]
  node16488 -> node16490 [label=<<font color="black">false</font>> color="black"]
  node16496 -> node16497 [ color="black"]
  node16503 -> node16486 [ color="black"]
  node16492 -> node16493 [ color="black"]
  node16495 -> node16496 [ color="black"]
  node16500 -> node16501 [label=<<font color="black">true</font>> color="black"]
  node16500 -> node16503 [label=<<font color="black">false</font>> color="black"]
  node16491 -> node16492 [label=<<font color="black">true</font>> color="black"]
  node16491 -> node16493 [label=<<font color="black">false</font>> color="black"]
  node16494 -> node16495 [ color="black"]
  node16499 -> node16500 [ color="black"]
  node16489 -> node16490 [ color="black"]
  node16502 -> node16503 [ color="black"]
  node16493 -> node16494 [ color="black"]
  node16498 -> node16499 [ color="black"]
  node16497 -> node16498 [ color="black"]
  node16501 -> node16502 [ color="black"]
}
