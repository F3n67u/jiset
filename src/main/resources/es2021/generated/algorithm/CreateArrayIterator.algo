def CreateArrayIterator(array, kind) = {
  0:assert (= (typeof array) Object)
  1:assert (|| (|| (= kind CONST_keyPLUSvalue) (= kind CONST_key)) (= kind CONST_value))
  2:let closure = ()[kind, array] => {
    3:let index = 0i
    4:while true 4:{
      5:if (! (= array.TypedArrayName absent)) 5:{
        6:app __x0__ = (IsDetachedBuffer array.ViewedArrayBuffer)
        6:if (= __x0__ true) 6:throw TypeError else 6:{}
        7:let len = array.ArrayLength
      } else 8:{
        9:app __x1__ = (LengthOfArrayLike array)
        9:let len = [? __x1__]
      }
      10:if (! (< index len)) 10:return undefined else 10:{}
      11:if (= kind CONST_key) 11:{
        11:app __x2__ = (Yield index)
        11:[? __x2__]
      } else 12:{
        13:app __x3__ = (ToString index)
        13:let elementKey = [! __x3__]
        14:app __x4__ = (Get array elementKey)
        14:let elementValue = [? __x4__]
        15:if (= kind CONST_value) 15:{
          15:app __x5__ = (Yield elementValue)
          15:[? __x5__]
        } else 16:{
          17:assert (= kind CONST_keyPLUSvalue)
          18:app __x6__ = (CreateArrayFromList (new [index, elementValue]))
          18:app __x7__ = (Yield [! __x6__])
          18:[? __x7__]
        }
      }
      19:index = (+ index 1i)
    }
  }
  20:app __x8__ = (CreateIteratorFromClosure closure "%ArrayIteratorPrototype%" INTRINSICS["%ArrayIteratorPrototype%"])
  20:return [! __x8__]
}
- id: "sec-createarrayiterator"
- code:
          1. Assert: Type(_array_) is Object.
          1. Assert: _kind_ is ~key+value~, ~key~, or ~value~.
          1. Let _closure_ be a new Abstract Closure with no parameters that captures _kind_ and _array_ and performs the following steps when called:
            1. Let _index_ be 0.
            1. Repeat,
              1. If _array_ has a [[TypedArrayName]] internal slot, then
                1. If IsDetachedBuffer(_array_.[[ViewedArrayBuffer]]) is *true*, throw a *TypeError* exception.
                1. Let _len_ be _array_.[[ArrayLength]].
              1. Else,
                1. Let _len_ be ? LengthOfArrayLike(_array_).
              1. If _index_ ≥ _len_, return *undefined*.
              1. If _kind_ is ~key~, perform ? Yield(𝔽(_index_)).
              1. Else,
                1. Let _elementKey_ be ! ToString(𝔽(_index_)).
                1. Let _elementValue_ be ? Get(_array_, _elementKey_).
                1. If _kind_ is ~value~, perform ? Yield(_elementValue_).
                1. Else,
                  1. Assert: _kind_ is ~key+value~.
                  1. Perform ? Yield(! CreateArrayFromList(« 𝔽(_index_), _elementValue_ »)).
              1. Set _index_ to _index_ + 1.
          1. Return ! CreateIteratorFromClosure(_closure_, *"%ArrayIteratorPrototype%"*, %ArrayIteratorPrototype%).