{
  access __x0__ = (Disjunction "Evaluation" 1i)
  let m = __x0__
  return (str, index)[m] => {
    assert (= (typeof str) String)
    ??? "If id:{Unicode} is value:{true} , let id:{Input} be ! StringToCodePoints ( id:{str} ) . Otherwise , let id:{Input} be a List whose elements are the code units that are the elements of id:{str} . id:{Input} will be used throughout the algorithms in link:{sec-pattern-semantics} . Each element of id:{Input} is considered to be a character ."
    ??? "Let id:{InputLength} be the number of characters contained in id:{Input} . This alias will be used throughout the algorithms in link:{sec-pattern-semantics} ."
    ??? "Let id:{listIndex} be the index into id:{Input} of the character that was obtained from element id:{index} of id:{str} ."
    ??? "Let id:{c} be a new Continuation with parameters ( id:{y} ) that captures nothing and performs the following steps when called : in:{} out:{}"
    ??? "Let id:{cap} be a List of id:{NcapturingParens} value:{undefined} values , indexed 1 through id:{NcapturingParens} ."
    let x = (new [listIndex, cap])
    app __x1__ = (m x c)
    return __x1__
  }
}