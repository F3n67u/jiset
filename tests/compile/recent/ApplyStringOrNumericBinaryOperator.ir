{
  [0] if (= opText ??? "+") {
    [1] app __x0__ = (ToPrimitive lval)
    [1] if (is-completion __x0__) if (= __x0__.Type CONST_normal) __x0__ = __x0__.Value else return __x0__ else [9] {}
    [1] let lprim = __x0__
    [2] app __x1__ = (ToPrimitive rval)
    [2] if (is-completion __x1__) if (= __x1__.Type CONST_normal) __x1__ = __x1__.Value else return __x1__ else [9] {}
    [2] let rprim = __x1__
    [3] app __x2__ = (Type lprim)
    [3] let __x3__ = (= __x2__ String)
    [3] if __x3__ [9] {} else {
      app __x4__ = (Type rprim)
      __x3__ = (= __x4__ String)
    }
    [3] if __x3__ {
      [4] app __x5__ = (ToString lprim)
      [4] if (is-completion __x5__) if (= __x5__.Type CONST_normal) __x5__ = __x5__.Value else return __x5__ else [9] {}
      [4] let lstr = __x5__
      [5] app __x6__ = (ToString rprim)
      [5] if (is-completion __x6__) if (= __x6__.Type CONST_normal) __x6__ = __x6__.Value else return __x6__ else [9] {}
      [5] let rstr = __x6__
      [6] app __x7__ = (WrapCompletion (+ lstr rstr))
      [6] return __x7__
    } else [9] {}
    [7] lval = lprim
    [8] rval = rprim
  } else [9] {}
  [10] app __x8__ = (ToNumeric lval)
  [10] if (is-completion __x8__) if (= __x8__.Type CONST_normal) __x8__ = __x8__.Value else return __x8__ else [9] {}
  [10] let lnum = __x8__
  [11] app __x9__ = (ToNumeric rval)
  [11] if (is-completion __x9__) if (= __x9__.Type CONST_normal) __x9__ = __x9__.Value else return __x9__ else [9] {}
  [11] let rnum = __x9__
  [12] app __x10__ = (Type lnum)
  [12] app __x11__ = (Type rnum)
  [12] if (! (= __x10__ __x11__)) {
    app __x12__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_TypeError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
    return __x12__
  } else [9] {}
  [13] app __x13__ = (Type lnum)
  [13] let T = __x13__
  [14] ??? "Let id:{operation} be the abstract operation associated with id:{opText} in the following table : step-list:{...}"
  [34] app __x14__ = (operation lnum rnum)
  [34] if (is-completion __x14__) if (= __x14__.Type CONST_normal) __x14__ = __x14__.Value else return __x14__ else [9] {}
  [34] app __x15__ = (WrapCompletion __x14__)
  [34] return __x15__
}