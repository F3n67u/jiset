digraph {
  node16662 [shape=diamond, label=<<font color="black">(= typedArray.TypedArrayName absent)</font>> color="black" fillcolor="white" style=filled]
  node16658 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">onlyInt32 = false</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16668 [shape=diamond, label=<<font color="black">(! (|| (|| (|| (|| (|| (= typeName &quot;Int8Array&quot;) (= typeName &quot;Uint8Array&quot;)) (= typeName &quot;Int16Array&quot;)) (= typeName &quot;Uint16Array&quot;)) (= typeName &quot;Int32Array&quot;)) (= typeName &quot;Uint32Array&quot;)))</font>> color="black" fillcolor="white" style=filled]
  node16665 [shape=diamond, label=<<font color="black">(= onlyInt32 true)</font>> color="black" fillcolor="white" style=filled]
  node16661 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16673 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16664 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">3:let typeName = typedArray.TypedArrayName</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16670 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">8:assert (! (= typedArray.ViewedArrayBuffer absent))</td></tr>
      <tr><td align="left">9:let buffer = typedArray.ViewedArrayBuffer</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16674 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">11:return buffer</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16660 [shape=diamond, label=<<font color="black">(! (= __x0__ Object))</font>> color="black" fillcolor="white" style=filled]
  node16663 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16667 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16671 [shape=cds, label=<<font color="black">10:app __x1__ = (IsSharedArrayBuffer buffer)</font>> color="black" fillcolor="white" style=filled]
  node16659 [shape=cds, label=<<font color="black">1:app __x0__ = (Type typedArray)</font>> color="black" fillcolor="white" style=filled]
  node16672 [shape=diamond, label=<<font color="black">(= __x1__ false)</font>> color="black" fillcolor="white" style=filled]
  node16655 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node16657 [shape=diamond, label=<<font color="black">(= onlyInt32 absent)</font>> color="black" fillcolor="white" style=filled]
  node16656 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node16666 [shape=diamond, label=<<font color="black">(! (= typeName &quot;Int32Array&quot;))</font>> color="black" fillcolor="white" style=filled]
  node16669 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16672 -> node16673 [label=<<font color="black">true</font>> color="black"]
  node16672 -> node16674 [label=<<font color="black">false</font>> color="black"]
  node16665 -> node16666 [label=<<font color="black">true</font>> color="black"]
  node16665 -> node16668 [label=<<font color="black">false</font>> color="black"]
  node16661 -> node16662 [ color="black"]
  node16659 -> node16660 [ color="black"]
  node16667 -> node16670 [ color="black"]
  node16658 -> node16659 [ color="black"]
  node16663 -> node16664 [ color="black"]
  node16657 -> node16658 [label=<<font color="black">true</font>> color="black"]
  node16657 -> node16659 [label=<<font color="black">false</font>> color="black"]
  node16669 -> node16670 [ color="black"]
  node16673 -> node16674 [ color="black"]
  node16670 -> node16671 [ color="black"]
  node16668 -> node16669 [label=<<font color="black">true</font>> color="black"]
  node16668 -> node16670 [label=<<font color="black">false</font>> color="black"]
  node16664 -> node16665 [ color="black"]
  node16655 -> node16657 [ color="black"]
  node16662 -> node16663 [label=<<font color="black">true</font>> color="black"]
  node16662 -> node16664 [label=<<font color="black">false</font>> color="black"]
  node16660 -> node16661 [label=<<font color="black">true</font>> color="black"]
  node16660 -> node16662 [label=<<font color="black">false</font>> color="black"]
  node16674 -> node16656 [ color="black"]
  node16671 -> node16672 [ color="black"]
  node16666 -> node16667 [label=<<font color="black">true</font>> color="black"]
  node16666 -> node16670 [label=<<font color="black">false</font>> color="black"]
}
