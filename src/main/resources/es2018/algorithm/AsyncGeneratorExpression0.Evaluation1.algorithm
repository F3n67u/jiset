<algorithm>
  <step-list>
    <step>If the function code for this AsyncGeneratorExpression is strict mode code , let <id>strict</id> be <value>true</value> . Otherwise let <id>strict</id> be <value>false</value> .</step>
    <step>Let <id>scope</id> be the running execution context 's LexicalEnvironment.</step>
    <step>Let <id>funcEnv</id> be ! NewDeclarativeEnvironment ( <id>scope</id> ).</step>
    <step>Let <id>envRec</id> be <id>funcEnv</id> 's EnvironmentRecord .</step>
    <step>Let <id>name</id> be StringValue of BindingIdentifier .</step>
    <step>Perform ! <id>envRec</id> .CreateImmutableBinding( <id>name</id> ).</step>
    <step>Let <id>closure</id> be ! AsyncGeneratorFunctionCreate ( <value>Normal</value> , FormalParameters , AsyncGeneratorBody , <id>funcEnv</id> , <id>strict</id> ).</step>
    <step>Let <id>prototype</id> be ! ObjectCreate ( %AsyncGeneratorPrototype% ).</step>
    <step>Perform ! DefinePropertyOrThrow ( <id>closure</id> , <value>"prototype"</value> , PropertyDescriptor { [[Value]]: <id>prototype</id> , [[Writable]]: <value>true</value> , [[Enumerable]]: <value>false</value> , [[Configurable]]: <value>false</value> }).</step>
    <step>Perform ! SetFunctionName ( <id>closure</id> , <id>name</id> ).</step>
    <step>Perform ! <id>envRec</id> .InitializeBinding( <id>name</id> , <id>closure</id> ).</step>
    <step>Return <id>closure</id> .</step>
  </step-list>
</algorithm>