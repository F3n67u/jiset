digraph {
  node0 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node2 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let capability = (new PromiseCapabilityRecord(&quot;Resolve&quot; -&gt; undefined, &quot;Reject&quot; -&gt; undefined))</td></tr>
      <tr><td align="left">let F = (new OrdinaryObject(&quot;Capability&quot; -&gt; capability))</td></tr>
      <tr><td align="left">let promiseCapability = F.Capability</td></tr>
      <tr><td align="left">if</td></tr>
      <tr><td align="left">(! (= promiseCapability.Resolve undefined))</td></tr>
      <tr><td align="left">throw TypeError</td></tr>
      <tr><td align="left">if</td></tr>
      <tr><td align="left">(! (= promiseCapability.Reject undefined))</td></tr>
      <tr><td align="left">throw TypeError</td></tr>
      <tr><td align="left">promiseCapability.Resolve = resolve</td></tr>
      <tr><td align="left">promiseCapability.Reject = reject</td></tr>
      <tr><td align="left">return undefined</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node1 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node0 -> node2 [ color="black"]
  node2 -> node1 [ color="black"]
}
