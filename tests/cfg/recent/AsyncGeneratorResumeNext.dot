digraph {
  node0 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node5 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">4:let queue = generator.AsyncGeneratorQueue</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10 [shape=diamond, label=<<font color="black">__x0__</font>> color="black" fillcolor="white" style=filled]
  node14 [shape=diamond, label=<<font color="black">(= completion.Type CONST_return)</font>> color="black" fillcolor="white" style=filled]
  node1 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node6 [shape=diamond, label=<<font color="black">(= queue.length 0i)</font>> color="black" fillcolor="white" style=filled]
  node9 [shape=cds, label=<<font color="black">31:app __x0__ = (IsAbruptCompletion completion)</font>> color="black" fillcolor="white" style=filled]
  node13 [shape=diamond, label=<<font color="black">(= state CONST_completed)</font>> color="black" fillcolor="white" style=filled]
  node2 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">1:let state = generator.AsyncGeneratorState</td></tr>
      <tr><td align="left">2:assert (! (= state CONST_executing))</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">16:let promise = [? __x1__]</td></tr>
      <tr><td align="left">17:let stepsFulfilled = AsyncGeneratorResumeNextReturnProcessorFulfilledFunctions</td></tr>
      <tr><td align="left">18:??? &quot;Let id:{lengthFulfilled} be the number of non - optional parameters of the function definition in AsyncGeneratorResumeNextReturnProcessorFulfilledFunctions .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">11:generator.AsyncGeneratorState = CONST_completed</td></tr>
      <tr><td align="left">12:state = CONST_completed</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node7 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return undefined</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node3 [shape=diamond, label=<<font color="black">(= state CONST_awaitingDASHreturn)</font>> color="black" fillcolor="white" style=filled]
  node18 [shape=cds, label=<<font color="black">19:app __x2__ = (CreateBuiltinFunction stepsFulfilled lengthFulfilled &quot;&quot; (new [&quot;Generator&quot;]))</font>> color="black" fillcolor="white" style=filled]
  node16 [shape=cds, label=<<font color="black">16:app __x1__ = (PromiseResolve INTRINSIC_Promise completion.Value)</font>> color="black" fillcolor="white" style=filled]
  node11 [shape=diamond, label=<<font color="black">(= state CONST_suspendedStart)</font>> color="black" fillcolor="white" style=filled]
  node8 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">6:let next = queue[0i]</td></tr>
      <tr><td align="left">8:let completion = next.Completion</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node4 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return undefined</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">15:generator.AsyncGeneratorState = CONST_awaitingDASHreturn</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node24 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">28:assert (= completion.Type CONST_throw)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node25 [shape=cds, label=<<font color="black">29:app __x5__ = (AsyncGeneratorReject generator completion.Value)</font>> color="black" fillcolor="white" style=filled]
  node20 [shape=cds, label=<<font color="black">23:app __x3__ = (CreateBuiltinFunction stepsRejected lengthRejected &quot;&quot; (new [&quot;Generator&quot;]))</font>> color="black" fillcolor="white" style=filled]
  node29 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return [! __x6__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node28 [shape=cds, label=<<font color="black">app __x6__ = (AsyncGeneratorResolve generator undefined true)</font>> color="black" fillcolor="white" style=filled]
  node21 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">23:let onRejected = [! __x3__]</td></tr>
      <tr><td align="left">24:onRejected.Generator = generator</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node22 [shape=cds, label=<<font color="black">25:app __x4__ = (PerformPromiseThen promise onFulfilled onRejected)</font>> color="black" fillcolor="white" style=filled]
  node27 [shape=diamond, label=<<font color="black">(= state CONST_completed)</font>> color="black" fillcolor="white" style=filled]
  node26 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">29:[! __x5__]</td></tr>
      <tr><td align="left">30:return undefined</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node23 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">25:[! __x4__]</td></tr>
      <tr><td align="left">26:return undefined</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node30 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">32:assert (|| (= state CONST_suspendedStart) (= state CONST_suspendedYield))</td></tr>
      <tr><td align="left">33:let genContext = generator.AsyncGeneratorContext</td></tr>
      <tr><td align="left">34:let callerContext = CONTEXT</td></tr>
      <tr><td align="left">35:CONTEXT = null</td></tr>
      <tr><td align="left">36:generator.AsyncGeneratorState = CONST_executing</td></tr>
      <tr><td align="left">37:append genContext -&gt; EXECUTION_STACK</td></tr>
      <tr><td align="left">37:CONTEXT = EXECUTION_STACK[(- EXECUTION_STACK.length 1i)]</td></tr>
      <tr><td align="left">38:??? &quot;Resume the suspended evaluation of id:{genContext} using id:{completion} as the result of the operation that suspended it . Let id:{result} be the completion record returned by the resumed computation .&quot;</td></tr>
      <tr><td align="left">41:return undefined</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node19 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">19:let onFulfilled = [! __x2__]</td></tr>
      <tr><td align="left">20:onFulfilled.Generator = generator</td></tr>
      <tr><td align="left">21:let stepsRejected = AsyncGeneratorResumeNextReturnProcessorRejectedFunctions</td></tr>
      <tr><td align="left">22:??? &quot;Let id:{lengthRejected} be the number of non - optional parameters of the function definition in AsyncGeneratorResumeNextReturnProcessorRejectedFunctions .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node5 -> node6 [ color="black"]
  node10 -> node11 [label=<<font color="black">true</font>> color="black"]
  node10 -> node27 [label=<<font color="black">false</font>> color="black"]
  node11 -> node12 [label=<<font color="black">true</font>> color="black"]
  node11 -> node13 [label=<<font color="black">false</font>> color="black"]
  node12 -> node13 [ color="black"]
  node0 -> node2 [ color="black"]
  node22 -> node23 [ color="black"]
  node13 -> node14 [label=<<font color="black">true</font>> color="black"]
  node13 -> node30 [label=<<font color="black">false</font>> color="black"]
  node26 -> node30 [ color="black"]
  node25 -> node26 [ color="black"]
  node16 -> node17 [ color="black"]
  node17 -> node18 [ color="black"]
  node28 -> node29 [ color="black"]
  node29 -> node30 [ color="black"]
  node6 -> node7 [label=<<font color="black">true</font>> color="black"]
  node6 -> node8 [label=<<font color="black">false</font>> color="black"]
  node7 -> node8 [ color="black"]
  node18 -> node19 [ color="black"]
  node2 -> node3 [ color="black"]
  node3 -> node4 [label=<<font color="black">true</font>> color="black"]
  node3 -> node5 [label=<<font color="black">false</font>> color="black"]
  node15 -> node16 [ color="black"]
  node19 -> node20 [ color="black"]
  node23 -> node30 [ color="black"]
  node9 -> node10 [ color="black"]
  node14 -> node15 [label=<<font color="black">true</font>> color="black"]
  node14 -> node24 [label=<<font color="black">false</font>> color="black"]
  node27 -> node28 [label=<<font color="black">true</font>> color="black"]
  node27 -> node30 [label=<<font color="black">false</font>> color="black"]
  node4 -> node5 [ color="black"]
  node30 -> node1 [ color="black"]
  node8 -> node9 [ color="black"]
  node21 -> node22 [ color="black"]
  node20 -> node21 [ color="black"]
  node24 -> node25 [ color="black"]
}
