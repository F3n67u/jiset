{
  access __x0__ = (CoverCallExpressionAndAsyncArrowHead "Contains")
  app __x1__ = (__x0__ "YieldExpression")
  if (= __x1__ true) throw INTRINSIC_SyntaxError else return undefined
  access __x2__ = (CoverCallExpressionAndAsyncArrowHead "Contains")
  app __x3__ = (__x2__ "AwaitExpression")
  if (= __x3__ true) throw INTRINSIC_SyntaxError else return undefined
  let __x4__ = false
  if (= absent (parse-syntax CoverCallExpressionAndAsyncArrowHead "AsyncArrowHead" (new []))) __x4__ = true else {}
  if __x4__ throw INTRINSIC_SyntaxError else return undefined
  access __x5__ = (CoverCallExpressionAndAsyncArrowHead "BoundNames")
  access __x6__ = (AsyncConciseBody "LexicallyDeclaredNames")
  let __x7__ = __x5__
  let __x8__ = __x6__
  let __x9__ = 0i
  let __x10__ = 0i
  let __x11__ = false
  while (< __x9__ __x7__.length) {
    __x10__ = 0i
    while (< __x10__ __x8__.length) if (= __x7__[__x9__] __x8__[__x10__]) __x11__ = true else {}
  }
  if __x11__ throw INTRINSIC_SyntaxError else return undefined
  let __x12__ = true
  access __x13__ = (AsyncConciseBody "ContainsUseStrict")
  __x12__ = (= __x13__ true)
  if __x12__ {
    access __x14__ = (CoverCallExpressionAndAsyncArrowHead "IsSimpleParameterList")
    __x12__ = (= __x14__ false)
  } else {}
  if __x12__ throw INTRINSIC_SyntaxError else return undefined
  ??? "All Early Error rules for nt:{AsyncArrowHead} and its derived productions apply to CoveredAsyncArrowHead of nt:{CoverCallExpressionAndAsyncArrowHead} ."
}