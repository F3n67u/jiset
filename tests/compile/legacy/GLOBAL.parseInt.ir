{
  app __x0__ = (GetArgument argumentsList 0i)
  let string = __x0__
  app __x1__ = (GetArgument argumentsList 1i)
  let radix = __x1__
  app __x2__ = (ToString string)
  if (is-completion __x2__) if (= __x2__.Type CONST_normal) __x2__ = __x2__.Value else return __x2__ else {}
  let inputString = __x2__
  app __x3__ = (TrimString inputString CONST_start)
  if (is-completion __x3__) if (= __x3__.Type CONST_normal) __x3__ = __x3__.Value else return __x3__ else {}
  let S = __x3__
  let sign = 1i
  ??? "If id:{S} is not empty and the first code unit of id:{S} is the code unit 0x002D ( HYPHEN - MINUS ) , set id:{sign} to - 1 ."
  ??? "If id:{S} is not empty and the first code unit of id:{S} is the code unit 0x002B ( PLUS SIGN ) or the code unit 0x002D ( HYPHEN - MINUS ) , remove the first code unit from id:{S} ."
  app __x4__ = (ToInt32 radix)
  if (is-completion __x4__) if (= __x4__.Type CONST_normal) __x4__ = __x4__.Value else return __x4__ else {}
  let R = __x4__
  let stripPrefix = true
  if (! (== R 0i)) {
    if (|| (< R 2i) (< 36i R)) {
      app __x5__ = (WrapCompletion NaN)
      return __x5__
    } else {}
    if (! (== R 16i)) stripPrefix = false else {}
  } else R = 10i
  if (= stripPrefix true) ??? "If the length of id:{S} is at least 2 and the first two code units of id:{S} are either value:{\"0x\"} or value:{\"0X\"} , then in:{} out:{}" else {}
  ??? "If id:{S} contains a code unit that is not a radix - id:{R} digit , let id:{Z} be the substring of id:{S} consisting of all code units before the first such code unit ; otherwise , let id:{Z} be id:{S} ."
  if (= Z.length 0i) {
    app __x6__ = (WrapCompletion NaN)
    return __x6__
  } else {}
  ??? "Let id:{mathInt} be the mathematical integer value that is represented by id:{Z} in radix - id:{R} notation , using the letters A - Z and a - z for digits with values 10 through 35 . ( However , if id:{R} is 10 and id:{Z} contains more than 20 significant digits , every significant digit after the 20th may be replaced by a 0 digit , at the option of the implementation ; and if id:{R} is not 2 , 4 , 8 , 10 , 16 , or 32 , then id:{mathInt} may be an implementation - dependent approximation to the mathematical integer value that is represented by id:{Z} in radix - id:{R} notation . )"
  ??? "If id:{mathInt} = 0 ℝ , then in:{} out:{}"
  let number = mathInt
  app __x7__ = (WrapCompletion (* sign number))
  return __x7__
}