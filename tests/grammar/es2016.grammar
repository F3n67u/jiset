[Lexical Productions]
BinaryDigit:
  `0`
  `1`

BinaryDigits:
  BinaryDigit
  BinaryDigits BinaryDigit

BinaryIntegerLiteral:
  `0b` BinaryDigits
  `0B` BinaryDigits

BooleanLiteral:
  `true`
  `false`

CharacterEscapeSequence:
  SingleEscapeCharacter
  NonEscapeCharacter

Comment:
  MultiLineComment
  SingleLineComment

CommonToken:
  IdentifierName
  Punctuator
  NumericLiteral
  StringLiteral
  Template

DecimalDigit:
  `0`
  `1`
  `2`
  `3`
  `4`
  `5`
  `6`
  `7`
  `8`
  `9`

DecimalDigits:
  DecimalDigit
  DecimalDigits DecimalDigit

DecimalIntegerLiteral:
  `0`
  NonZeroDigit DecimalDigits?

DecimalLiteral:
  DecimalIntegerLiteral `.` DecimalDigits? ExponentPart?
  `.` DecimalDigits ExponentPart?
  DecimalIntegerLiteral ExponentPart?

DivPunctuator:
  `/`
  `/=`

DoubleStringCharacter:
  SourceCharacter but not `"` or `\` or LineTerminator
  `\` EscapeSequence
  LineContinuation

DoubleStringCharacters:
  DoubleStringCharacter DoubleStringCharacters?

EscapeCharacter:
  SingleEscapeCharacter
  DecimalDigit
  `x`
  `u`

EscapeSequence:
  CharacterEscapeSequence
  `0` [lookahead <! {DecimalDigit}]
  HexEscapeSequence
  UnicodeEscapeSequence

ExponentIndicator:
  `e`
  `E`

ExponentPart:
  ExponentIndicator SignedInteger

FutureReservedWord:
  `enum`
  `await`

Hex4Digits:
  HexDigit HexDigit HexDigit HexDigit

HexDigit:
  `0`
  `1`
  `2`
  `3`
  `4`
  `5`
  `6`
  `7`
  `8`
  `9`
  `a`
  `b`
  `c`
  `d`
  `e`
  `f`
  `A`
  `B`
  `C`
  `D`
  `E`
  `F`

HexDigits:
  HexDigit
  HexDigits HexDigit

HexEscapeSequence:
  `x` HexDigit HexDigit

HexIntegerLiteral:
  `0x` HexDigits
  `0X` HexDigits

IdentifierName:
  IdentifierStart
  IdentifierName IdentifierPart

IdentifierPart:
  UnicodeIDContinue
  `$`
  `_`
  `\` UnicodeEscapeSequence
  <ZWNJ>
  <ZWJ>

IdentifierStart:
  UnicodeIDStart
  `$`
  `_`
  `\` UnicodeEscapeSequence

InputElementDiv:
  WhiteSpace
  LineTerminator
  Comment
  CommonToken
  DivPunctuator
  RightBracePunctuator

InputElementRegExp:
  WhiteSpace
  LineTerminator
  Comment
  CommonToken
  RightBracePunctuator
  RegularExpressionLiteral

InputElementRegExpOrTemplateTail:
  WhiteSpace
  LineTerminator
  Comment
  CommonToken
  RegularExpressionLiteral
  TemplateSubstitutionTail

InputElementTemplateTail:
  WhiteSpace
  LineTerminator
  Comment
  CommonToken
  DivPunctuator
  TemplateSubstitutionTail

Keyword:
  `break`
  `do`
  `in`
  `typeof`
  `case`
  `else`
  `instanceof`
  `var`
  `catch`
  `export`
  `new`
  `void`
  `class`
  `extends`
  `return`
  `while`
  `const`
  `finally`
  `super`
  `with`
  `continue`
  `for`
  `switch`
  `yield`
  `debugger`
  `function`
  `this`
  `default`
  `if`
  `throw`
  `delete`
  `import`
  `try`

LineContinuation:
  `\` LineTerminatorSequence

LineTerminator:
  <LF>
  <CR>
  <LS>
  <PS>

LineTerminatorSequence:
  <LF>
  <CR> [lookahead <! {<LF>}]
  <LS>
  <PS>
  <CR> <LF>

MultiLineComment:
  `/*` MultiLineCommentChars? `*/`

MultiLineCommentChars:
  MultiLineNotAsteriskChar MultiLineCommentChars?
  `*` PostAsteriskCommentChars?

MultiLineNotAsteriskChar:
  SourceCharacter but not `*`

MultiLineNotForwardSlashOrAsteriskChar:
  SourceCharacter but not `/` or `*`

NoSubstitutionTemplate:
  ``` TemplateCharacters? ```

NonEscapeCharacter:
  SourceCharacter but not EscapeCharacter or LineTerminator

NonZeroDigit:
  `1`
  `2`
  `3`
  `4`
  `5`
  `6`
  `7`
  `8`
  `9`

NullLiteral:
  `null`

NumericLiteral:
  DecimalLiteral
  BinaryIntegerLiteral
  OctalIntegerLiteral
  HexIntegerLiteral

OctalDigit:
  `0`
  `1`
  `2`
  `3`
  `4`
  `5`
  `6`
  `7`

OctalDigits:
  OctalDigit
  OctalDigits OctalDigit

OctalIntegerLiteral:
  `0o` OctalDigits
  `0O` OctalDigits

PostAsteriskCommentChars:
  MultiLineNotForwardSlashOrAsteriskChar MultiLineCommentChars?
  `*` PostAsteriskCommentChars?

Punctuator:
  `{`
  `(`
  `)`
  `[`
  `]`
  `.`
  `...`
  `;`
  `,`
  `<`
  `>`
  `<=`
  `>=`
  `==`
  `!=`
  `===`
  `!==`
  `+`
  `-`
  `*`
  `%`
  `++`
  `--`
  `<<`
  `>>`
  `>>>`
  `&`
  `|`
  `^`
  `!`
  `~`
  `&&`
  `||`
  `?`
  `:`
  `=`
  `+=`
  `-=`
  `*=`
  `%=`
  `<<=`
  `>>=`
  `>>>=`
  `&=`
  `|=`
  `^=`
  `=>`
  `**`
  `**=`

RegularExpressionBackslashSequence:
  `\` RegularExpressionNonTerminator

RegularExpressionBody:
  RegularExpressionFirstChar RegularExpressionChars

RegularExpressionChar:
  RegularExpressionNonTerminator but not `\` or `/` or `[`
  RegularExpressionBackslashSequence
  RegularExpressionClass

RegularExpressionChars:
  [empty]
  RegularExpressionChars RegularExpressionChar

RegularExpressionClass:
  `[` RegularExpressionClassChars `]`

RegularExpressionClassChar:
  RegularExpressionNonTerminator but not `]` or `\`
  RegularExpressionBackslashSequence

RegularExpressionClassChars:
  [empty]
  RegularExpressionClassChars RegularExpressionClassChar

RegularExpressionFirstChar:
  RegularExpressionNonTerminator but not `*` or `\` or `/` or `[`
  RegularExpressionBackslashSequence
  RegularExpressionClass

RegularExpressionFlags:
  [empty]
  RegularExpressionFlags IdentifierPart

RegularExpressionLiteral:
  `/` RegularExpressionBody `/` RegularExpressionFlags

RegularExpressionNonTerminator:
  SourceCharacter but not LineTerminator

ReservedWord:
  Keyword
  FutureReservedWord
  NullLiteral
  BooleanLiteral

RightBracePunctuator:
  `}`

SignedInteger:
  DecimalDigits
  `+` DecimalDigits
  `-` DecimalDigits

SingleEscapeCharacter:
  `'`
  `"`
  `\`
  `b`
  `f`
  `n`
  `r`
  `t`
  `v`

SingleLineComment:
  `//` SingleLineCommentChars?

SingleLineCommentChar:
  SourceCharacter but not LineTerminator

SingleLineCommentChars:
  SingleLineCommentChar SingleLineCommentChars?

SingleStringCharacter:
  SourceCharacter but not `'` or `\` or LineTerminator
  `\` EscapeSequence
  LineContinuation

SingleStringCharacters:
  SingleStringCharacter SingleStringCharacters?

SourceCharacter:
  <UnicodeAny>

StringLiteral:
  `"` DoubleStringCharacters? `"`
  `'` SingleStringCharacters? `'`

Template:
  NoSubstitutionTemplate
  TemplateHead

TemplateCharacter:
  `$` [lookahead <! {`{`}]
  `\` EscapeSequence
  LineContinuation
  LineTerminatorSequence
  SourceCharacter but not ``` or `\` or `$` or LineTerminator

TemplateCharacters:
  TemplateCharacter TemplateCharacters?

TemplateHead:
  ``` TemplateCharacters? `${`

TemplateMiddle:
  `}` TemplateCharacters? `${`

TemplateSubstitutionTail:
  TemplateMiddle
  TemplateTail

TemplateTail:
  `}` TemplateCharacters? ```

UnicodeEscapeSequence:
  `u` Hex4Digits
  `u{` HexDigits `}`

UnicodeIDContinue:
  <UnicodeAny>

UnicodeIDStart:
  <UnicodeAny>

WhiteSpace:
  <TAB>
  <VT>
  <FF>
  <SP>
  <NBSP>
  <ZWNBSP>
  <USP>
[Syntactic Productions]
AdditiveExpression[Yield]:
  MultiplicativeExpression[?Yield]
  AdditiveExpression[?Yield] `+` MultiplicativeExpression[?Yield]
  AdditiveExpression[?Yield] `-` MultiplicativeExpression[?Yield]

Alternative[U]:
  [empty]
  Alternative[?U] Term[?U]

ArgumentList[Yield]:
  AssignmentExpression[In, ?Yield]
  `...` AssignmentExpression[In, ?Yield]
  ArgumentList[?Yield] `,` AssignmentExpression[In, ?Yield]
  ArgumentList[?Yield] `,` `...` AssignmentExpression[In, ?Yield]

Arguments[Yield]:
  `(` `)`
  `(` ArgumentList[?Yield] `)`

ArrayAssignmentPattern[Yield]:
  `[` Elision? AssignmentRestElement[?Yield]? `]`
  `[` AssignmentElementList[?Yield] `]`
  `[` AssignmentElementList[?Yield] `,` Elision? AssignmentRestElement[?Yield]? `]`

ArrayBindingPattern[Yield]:
  `[` Elision? BindingRestElement[?Yield]? `]`
  `[` BindingElementList[?Yield] `]`
  `[` BindingElementList[?Yield] `,` Elision? BindingRestElement[?Yield]? `]`

ArrayLiteral[Yield]:
  `[` Elision? `]`
  `[` ElementList[?Yield] `]`
  `[` ElementList[?Yield] `,` Elision? `]`

ArrowFormalParameters[Yield]:
  `(` StrictFormalParameters[?Yield] `)`

ArrowFunction[In, Yield]:
  ArrowParameters[?Yield] [no LineTerminator here] `=>` ConciseBody[?In]

ArrowParameters[Yield]:
  BindingIdentifier[?Yield]
  CoverParenthesizedExpressionAndArrowParameterList[?Yield]

Assertion[U]:
  `^`
  `$`
  `\` `b`
  `\` `B`
  `(` `?` `=` Disjunction[?U] `)`
  `(` `?` `!` Disjunction[?U] `)`

AssignmentElement[Yield]:
  DestructuringAssignmentTarget[?Yield] Initializer[In, ?Yield]?

AssignmentElementList[Yield]:
  AssignmentElisionElement[?Yield]
  AssignmentElementList[?Yield] `,` AssignmentElisionElement[?Yield]

AssignmentElisionElement[Yield]:
  Elision? AssignmentElement[?Yield]

AssignmentExpression[In, Yield]:
  ConditionalExpression[?In, ?Yield]
  [+Yield] YieldExpression[?In]
  ArrowFunction[?In, ?Yield]
  LeftHandSideExpression[?Yield] `=` AssignmentExpression[?In, ?Yield]
  LeftHandSideExpression[?Yield] AssignmentOperator AssignmentExpression[?In, ?Yield]

AssignmentOperator:
  `*=`
  `/=`
  `%=`
  `+=`
  `-=`
  `<<=`
  `>>=`
  `>>>=`
  `&=`
  `^=`
  `|=`
  `**=`

AssignmentPattern[Yield]:
  ObjectAssignmentPattern[?Yield]
  ArrayAssignmentPattern[?Yield]

AssignmentProperty[Yield]:
  IdentifierReference[?Yield] Initializer[In, ?Yield]?
  PropertyName[?Yield] `:` AssignmentElement[?Yield]

AssignmentPropertyList[Yield]:
  AssignmentProperty[?Yield]
  AssignmentPropertyList[?Yield] `,` AssignmentProperty[?Yield]

AssignmentRestElement[Yield]:
  `...` DestructuringAssignmentTarget[?Yield]

Atom[U]:
  PatternCharacter
  `.`
  `\` AtomEscape[?U]
  CharacterClass[?U]
  `(` Disjunction[?U] `)`
  `(` `?` `:` Disjunction[?U] `)`

AtomEscape[U]:
  DecimalEscape
  CharacterEscape[?U]
  CharacterClassEscape

BindingElement[Yield]:
  SingleNameBinding[?Yield]
  BindingPattern[?Yield] Initializer[In, ?Yield]?

BindingElementList[Yield]:
  BindingElisionElement[?Yield]
  BindingElementList[?Yield] `,` BindingElisionElement[?Yield]

BindingElisionElement[Yield]:
  Elision? BindingElement[?Yield]

BindingIdentifier[Yield]:
  Identifier
  [~Yield] `yield`

BindingList[In, Yield]:
  LexicalBinding[?In, ?Yield]
  BindingList[?In, ?Yield] `,` LexicalBinding[?In, ?Yield]

BindingPattern[Yield]:
  ObjectBindingPattern[?Yield]
  ArrayBindingPattern[?Yield]

BindingProperty[Yield]:
  SingleNameBinding[?Yield]
  PropertyName[?Yield] `:` BindingElement[?Yield]

BindingPropertyList[Yield]:
  BindingProperty[?Yield]
  BindingPropertyList[?Yield] `,` BindingProperty[?Yield]

BindingRestElement[Yield]:
  `...` BindingIdentifier[?Yield]
  `...` BindingPattern[?Yield]

BitwiseANDExpression[In, Yield]:
  EqualityExpression[?In, ?Yield]
  BitwiseANDExpression[?In, ?Yield] `&` EqualityExpression[?In, ?Yield]

BitwiseORExpression[In, Yield]:
  BitwiseXORExpression[?In, ?Yield]
  BitwiseORExpression[?In, ?Yield] `|` BitwiseXORExpression[?In, ?Yield]

BitwiseXORExpression[In, Yield]:
  BitwiseANDExpression[?In, ?Yield]
  BitwiseXORExpression[?In, ?Yield] `^` BitwiseANDExpression[?In, ?Yield]

Block[Yield, Return]:
  `{` StatementList[?Yield, ?Return]? `}`

BlockStatement[Yield, Return]:
  Block[?Yield, ?Return]

BreakStatement[Yield]:
  `break` `;`
  `break` [no LineTerminator here] LabelIdentifier[?Yield] `;`

BreakableStatement[Yield, Return]:
  IterationStatement[?Yield, ?Return]
  SwitchStatement[?Yield, ?Return]

CallExpression[Yield]:
  MemberExpression[?Yield] Arguments[?Yield]
  SuperCall[?Yield]
  CallExpression[?Yield] Arguments[?Yield]
  CallExpression[?Yield] `[` Expression[In, ?Yield] `]`
  CallExpression[?Yield] `.` IdentifierName
  CallExpression[?Yield] TemplateLiteral[?Yield]

CaseBlock[Yield, Return]:
  `{` CaseClauses[?Yield, ?Return]? `}`
  `{` CaseClauses[?Yield, ?Return]? DefaultClause[?Yield, ?Return] CaseClauses[?Yield, ?Return]? `}`

CaseClause[Yield, Return]:
  `case` Expression[In, ?Yield] `:` StatementList[?Yield, ?Return]?

CaseClauses[Yield, Return]:
  CaseClause[?Yield, ?Return]
  CaseClauses[?Yield, ?Return] CaseClause[?Yield, ?Return]

Catch[Yield, Return]:
  `catch` `(` CatchParameter[?Yield] `)` Block[?Yield, ?Return]

CatchParameter[Yield]:
  BindingIdentifier[?Yield]
  BindingPattern[?Yield]

CharacterClass[U]:
  `[` [lookahead <! {`^`}] ClassRanges[?U] `]`
  `[` `^` ClassRanges[?U] `]`

CharacterClassEscape:
  `d`
  `D`
  `s`
  `S`
  `w`
  `W`

CharacterEscape[U]:
  ControlEscape
  `c` ControlLetter
  HexEscapeSequence
  RegExpUnicodeEscapeSequence[?U]
  IdentityEscape[?U]

ClassAtom[U]:
  `-`
  ClassAtomNoDash[?U]

ClassAtomNoDash[U]:
  SourceCharacter but not `\` or `]` or `-`
  `\` ClassEscape[?U]

ClassBody[Yield]:
  ClassElementList[?Yield]

ClassDeclaration[Yield, Default]:
  `class` BindingIdentifier[?Yield] ClassTail[?Yield]
  [+Default] `class` ClassTail[?Yield]

ClassElement[Yield]:
  MethodDefinition[?Yield]
  `static` MethodDefinition[?Yield]
  `;`

ClassElementList[Yield]:
  ClassElement[?Yield]
  ClassElementList[?Yield] ClassElement[?Yield]

ClassEscape[U]:
  DecimalEscape
  `b`
  [+U] `-`
  CharacterEscape[?U]
  CharacterClassEscape

ClassExpression[Yield]:
  `class` BindingIdentifier[?Yield]? ClassTail[?Yield]

ClassHeritage[Yield]:
  `extends` LeftHandSideExpression[?Yield]

ClassRanges[U]:
  [empty]
  NonemptyClassRanges[?U]

ClassTail[Yield]:
  ClassHeritage[?Yield]? `{` ClassBody[?Yield]? `}`

ComputedPropertyName[Yield]:
  `[` AssignmentExpression[In, ?Yield] `]`

ConciseBody[In]:
  [lookahead <! {`{`}] AssignmentExpression[?In]
  `{` FunctionBody `}`

ConditionalExpression[In, Yield]:
  LogicalORExpression[?In, ?Yield]
  LogicalORExpression[?In, ?Yield] `?` AssignmentExpression[In, ?Yield] `:` AssignmentExpression[?In, ?Yield]

ContinueStatement[Yield]:
  `continue` `;`
  `continue` [no LineTerminator here] LabelIdentifier[?Yield] `;`

ControlEscape:
  `f`
  `n`
  `r`
  `t`
  `v`

ControlLetter:
  `a`
  `b`
  `c`
  `d`
  `e`
  `f`
  `g`
  `h`
  `i`
  `j`
  `k`
  `l`
  `m`
  `n`
  `o`
  `p`
  `q`
  `r`
  `s`
  `t`
  `u`
  `v`
  `w`
  `x`
  `y`
  `z`
  `A`
  `B`
  `C`
  `D`
  `E`
  `F`
  `G`
  `H`
  `I`
  `J`
  `K`
  `L`
  `M`
  `N`
  `O`
  `P`
  `Q`
  `R`
  `S`
  `T`
  `U`
  `V`
  `W`
  `X`
  `Y`
  `Z`

CoverInitializedName[Yield]:
  IdentifierReference[?Yield] Initializer[In, ?Yield]

CoverParenthesizedExpressionAndArrowParameterList[Yield]:
  `(` Expression[In, ?Yield] `)`
  `(` `)`
  `(` `...` BindingIdentifier[?Yield] `)`
  `(` `...` BindingPattern[?Yield] `)`
  `(` Expression[In, ?Yield] `,` `...` BindingIdentifier[?Yield] `)`
  `(` Expression[In, ?Yield] `,` `...` BindingPattern[?Yield] `)`

DebuggerStatement:
  `debugger` `;`

DecimalEscape:
  DecimalIntegerLiteral [lookahead <! {DecimalDigit}]

Declaration[Yield]:
  HoistableDeclaration[?Yield]
  ClassDeclaration[?Yield]
  LexicalDeclaration[In, ?Yield]

DefaultClause[Yield, Return]:
  `default` `:` StatementList[?Yield, ?Return]?

DestructuringAssignmentTarget[Yield]:
  LeftHandSideExpression[?Yield]

Disjunction[U]:
  Alternative[?U]
  Alternative[?U] `|` Disjunction[?U]

ElementList[Yield]:
  Elision? AssignmentExpression[In, ?Yield]
  Elision? SpreadElement[?Yield]
  ElementList[?Yield] `,` Elision? AssignmentExpression[In, ?Yield]
  ElementList[?Yield] `,` Elision? SpreadElement[?Yield]

Elision:
  `,`
  Elision `,`

EmptyStatement:
  `;`

EqualityExpression[In, Yield]:
  RelationalExpression[?In, ?Yield]
  EqualityExpression[?In, ?Yield] `==` RelationalExpression[?In, ?Yield]
  EqualityExpression[?In, ?Yield] `!=` RelationalExpression[?In, ?Yield]
  EqualityExpression[?In, ?Yield] `===` RelationalExpression[?In, ?Yield]
  EqualityExpression[?In, ?Yield] `!==` RelationalExpression[?In, ?Yield]

ExponentiationExpression[Yield]:
  UnaryExpression[?Yield]
  UpdateExpression[?Yield] `**` ExponentiationExpression[?Yield]

ExportClause:
  `{` `}`
  `{` ExportsList `}`
  `{` ExportsList `,` `}`

ExportDeclaration:
  `export` `*` FromClause `;`
  `export` ExportClause FromClause `;`
  `export` ExportClause `;`
  `export` VariableStatement
  `export` Declaration
  `export` `default` HoistableDeclaration[Default]
  `export` `default` ClassDeclaration[Default]
  `export` `default` [lookahead <! {`function`, `class`}] AssignmentExpression[In] `;`

ExportSpecifier:
  IdentifierName
  IdentifierName `as` IdentifierName

ExportsList:
  ExportSpecifier
  ExportsList `,` ExportSpecifier

Expression[In, Yield]:
  AssignmentExpression[?In, ?Yield]
  Expression[?In, ?Yield] `,` AssignmentExpression[?In, ?Yield]

ExpressionStatement[Yield]:
  [lookahead <! {`{`, `function`, `class`, `let [`}] Expression[In, ?Yield] `;`

Finally[Yield, Return]:
  `finally` Block[?Yield, ?Return]

ForBinding[Yield]:
  BindingIdentifier[?Yield]
  BindingPattern[?Yield]

ForDeclaration[Yield]:
  LetOrConst ForBinding[?Yield]

FormalParameter[Yield]:
  BindingElement[?Yield]

FormalParameterList[Yield]:
  FunctionRestParameter[?Yield]
  FormalsList[?Yield]
  FormalsList[?Yield] `,` FunctionRestParameter[?Yield]

FormalParameters[Yield]:
  [empty]
  FormalParameterList[?Yield]

FormalsList[Yield]:
  FormalParameter[?Yield]
  FormalsList[?Yield] `,` FormalParameter[?Yield]

FromClause:
  `from` ModuleSpecifier

FunctionBody[Yield]:
  FunctionStatementList[?Yield]

FunctionDeclaration[Yield, Default]:
  `function` BindingIdentifier[?Yield] `(` FormalParameters `)` `{` FunctionBody `}`
  [+Default] `function` `(` FormalParameters `)` `{` FunctionBody `}`

FunctionExpression:
  `function` BindingIdentifier? `(` FormalParameters `)` `{` FunctionBody `}`

FunctionRestParameter[Yield]:
  BindingRestElement[?Yield]

FunctionStatementList[Yield]:
  StatementList[?Yield, Return]?

GeneratorBody:
  FunctionBody[Yield]

GeneratorDeclaration[Yield, Default]:
  `function` `*` BindingIdentifier[?Yield] `(` FormalParameters[Yield] `)` `{` GeneratorBody `}`
  [+Default] `function` `*` `(` FormalParameters[Yield] `)` `{` GeneratorBody `}`

GeneratorExpression:
  `function` `*` BindingIdentifier[Yield]? `(` FormalParameters[Yield] `)` `{` GeneratorBody `}`

GeneratorMethod[Yield]:
  `*` PropertyName[?Yield] `(` StrictFormalParameters[Yield] `)` `{` GeneratorBody `}`

HoistableDeclaration[Yield, Default]:
  FunctionDeclaration[?Yield, ?Default]
  GeneratorDeclaration[?Yield, ?Default]

Identifier:
  IdentifierName but not ReservedWord

IdentifierReference[Yield]:
  Identifier
  [~Yield] `yield`

IdentityEscape[U]:
  [+U] SyntaxCharacter
  [+U] `/`
  [~U] SourceCharacter but not UnicodeIDContinue

IfStatement[Yield, Return]:
  `if` `(` Expression[In, ?Yield] `)` Statement[?Yield, ?Return] `else` Statement[?Yield, ?Return]
  `if` `(` Expression[In, ?Yield] `)` Statement[?Yield, ?Return]

ImportClause:
  ImportedDefaultBinding
  NameSpaceImport
  NamedImports
  ImportedDefaultBinding `,` NameSpaceImport
  ImportedDefaultBinding `,` NamedImports

ImportDeclaration:
  `import` ImportClause FromClause `;`
  `import` ModuleSpecifier `;`

ImportSpecifier:
  ImportedBinding
  IdentifierName `as` ImportedBinding

ImportedBinding:
  BindingIdentifier

ImportedDefaultBinding:
  ImportedBinding

ImportsList:
  ImportSpecifier
  ImportsList `,` ImportSpecifier

Initializer[In, Yield]:
  `=` AssignmentExpression[?In, ?Yield]

IterationStatement[Yield, Return]:
  `do` Statement[?Yield, ?Return] `while` `(` Expression[In, ?Yield] `)` `;`
  `while` `(` Expression[In, ?Yield] `)` Statement[?Yield, ?Return]
  `for` `(` [lookahead <! {`let [`}] Expression[?Yield]? `;` Expression[In, ?Yield]? `;` Expression[In, ?Yield]? `)` Statement[?Yield, ?Return]
  `for` `(` `var` VariableDeclarationList[?Yield] `;` Expression[In, ?Yield]? `;` Expression[In, ?Yield]? `)` Statement[?Yield, ?Return]
  `for` `(` LexicalDeclaration[?Yield] Expression[In, ?Yield]? `;` Expression[In, ?Yield]? `)` Statement[?Yield, ?Return]
  `for` `(` [lookahead <! {`let [`}] LeftHandSideExpression[?Yield] `in` Expression[In, ?Yield] `)` Statement[?Yield, ?Return]
  `for` `(` `var` ForBinding[?Yield] `in` Expression[In, ?Yield] `)` Statement[?Yield, ?Return]
  `for` `(` ForDeclaration[?Yield] `in` Expression[In, ?Yield] `)` Statement[?Yield, ?Return]
  `for` `(` [lookahead <! {`let`}] LeftHandSideExpression[?Yield] `of` AssignmentExpression[In, ?Yield] `)` Statement[?Yield, ?Return]
  `for` `(` `var` ForBinding[?Yield] `of` AssignmentExpression[In, ?Yield] `)` Statement[?Yield, ?Return]
  `for` `(` ForDeclaration[?Yield] `of` AssignmentExpression[In, ?Yield] `)` Statement[?Yield, ?Return]

LabelIdentifier[Yield]:
  Identifier
  [~Yield] `yield`

LabelledItem[Yield, Return]:
  Statement[?Yield, ?Return]
  FunctionDeclaration[?Yield]

LabelledStatement[Yield, Return]:
  LabelIdentifier[?Yield] `:` LabelledItem[?Yield, ?Return]

LeadSurrogate:
  <HexLeadSurrogate>

LeftHandSideExpression[Yield]:
  NewExpression[?Yield]
  CallExpression[?Yield]

LetOrConst:
  `let`
  `const`

LexicalBinding[In, Yield]:
  BindingIdentifier[?Yield] Initializer[?In, ?Yield]?
  BindingPattern[?Yield] Initializer[?In, ?Yield]

LexicalDeclaration[In, Yield]:
  LetOrConst BindingList[?In, ?Yield] `;`

Literal:
  NullLiteral
  BooleanLiteral
  NumericLiteral
  StringLiteral

LiteralPropertyName:
  IdentifierName
  StringLiteral
  NumericLiteral

LogicalANDExpression[In, Yield]:
  BitwiseORExpression[?In, ?Yield]
  LogicalANDExpression[?In, ?Yield] `&&` BitwiseORExpression[?In, ?Yield]

LogicalORExpression[In, Yield]:
  LogicalANDExpression[?In, ?Yield]
  LogicalORExpression[?In, ?Yield] `||` LogicalANDExpression[?In, ?Yield]

MemberExpression[Yield]:
  PrimaryExpression[?Yield]
  MemberExpression[?Yield] `[` Expression[In, ?Yield] `]`
  MemberExpression[?Yield] `.` IdentifierName
  MemberExpression[?Yield] TemplateLiteral[?Yield]
  SuperProperty[?Yield]
  MetaProperty
  `new` MemberExpression[?Yield] Arguments[?Yield]

MetaProperty:
  NewTarget

MethodDefinition[Yield]:
  PropertyName[?Yield] `(` StrictFormalParameters `)` `{` FunctionBody `}`
  GeneratorMethod[?Yield]
  `get` PropertyName[?Yield] `(` `)` `{` FunctionBody `}`
  `set` PropertyName[?Yield] `(` PropertySetParameterList `)` `{` FunctionBody `}`

Module:
  ModuleBody?

ModuleBody:
  ModuleItemList

ModuleItem:
  ImportDeclaration
  ExportDeclaration
  StatementListItem

ModuleItemList:
  ModuleItem
  ModuleItemList ModuleItem

ModuleSpecifier:
  StringLiteral

MultiplicativeExpression[Yield]:
  ExponentiationExpression[?Yield]
  MultiplicativeExpression[?Yield] MultiplicativeOperator ExponentiationExpression[?Yield]

MultiplicativeOperator:
  `*`
  `/`
  `%`

NameSpaceImport:
  `*` `as` ImportedBinding

NamedImports:
  `{` `}`
  `{` ImportsList `}`
  `{` ImportsList `,` `}`

NewExpression[Yield]:
  MemberExpression[?Yield]
  `new` NewExpression[?Yield]

NewTarget:
  `new` `.` `target`

NonSurrogate:
  <HexNonSurrogate>

NonemptyClassRanges[U]:
  ClassAtom[?U]
  ClassAtom[?U] NonemptyClassRangesNoDash[?U]
  ClassAtom[?U] `-` ClassAtom[?U] ClassRanges[?U]

NonemptyClassRangesNoDash[U]:
  ClassAtom[?U]
  ClassAtomNoDash[?U] NonemptyClassRangesNoDash[?U]
  ClassAtomNoDash[?U] `-` ClassAtom[?U] ClassRanges[?U]

ObjectAssignmentPattern[Yield]:
  `{` `}`
  `{` AssignmentPropertyList[?Yield] `}`
  `{` AssignmentPropertyList[?Yield] `,` `}`

ObjectBindingPattern[Yield]:
  `{` `}`
  `{` BindingPropertyList[?Yield] `}`
  `{` BindingPropertyList[?Yield] `,` `}`

ObjectLiteral[Yield]:
  `{` `}`
  `{` PropertyDefinitionList[?Yield] `}`
  `{` PropertyDefinitionList[?Yield] `,` `}`

ParenthesizedExpression[Yield]:
  `(` Expression[In, ?Yield] `)`

Pattern[U]:
  Disjunction[?U]

PatternCharacter:
  SourceCharacter but not SyntaxCharacter

PrimaryExpression[Yield]:
  `this`
  IdentifierReference[?Yield]
  Literal
  ArrayLiteral[?Yield]
  ObjectLiteral[?Yield]
  FunctionExpression
  ClassExpression[?Yield]
  GeneratorExpression
  RegularExpressionLiteral
  TemplateLiteral[?Yield]
  CoverParenthesizedExpressionAndArrowParameterList[?Yield]

PropertyDefinition[Yield]:
  IdentifierReference[?Yield]
  CoverInitializedName[?Yield]
  PropertyName[?Yield] `:` AssignmentExpression[In, ?Yield]
  MethodDefinition[?Yield]

PropertyDefinitionList[Yield]:
  PropertyDefinition[?Yield]
  PropertyDefinitionList[?Yield] `,` PropertyDefinition[?Yield]

PropertyName[Yield]:
  LiteralPropertyName
  ComputedPropertyName[?Yield]

PropertySetParameterList:
  FormalParameter

Quantifier:
  QuantifierPrefix
  QuantifierPrefix `?`

QuantifierPrefix:
  `*`
  `+`
  `?`
  `{` DecimalDigits `}`
  `{` DecimalDigits `,` `}`
  `{` DecimalDigits `,` DecimalDigits `}`

RegExpUnicodeEscapeSequence[U]:
  [+U] `u` LeadSurrogate `\u` TrailSurrogate
  [+U] `u` LeadSurrogate
  [+U] `u` TrailSurrogate
  [+U] `u` NonSurrogate
  [~U] `u` Hex4Digits
  [+U] `u{` HexDigits `}`

RelationalExpression[In, Yield]:
  ShiftExpression[?Yield]
  RelationalExpression[?In, ?Yield] `<` ShiftExpression[?Yield]
  RelationalExpression[?In, ?Yield] `>` ShiftExpression[?Yield]
  RelationalExpression[?In, ?Yield] `<=` ShiftExpression[?Yield]
  RelationalExpression[?In, ?Yield] `>=` ShiftExpression[?Yield]
  RelationalExpression[?In, ?Yield] `instanceof` ShiftExpression[?Yield]
  [+In] RelationalExpression[In, ?Yield] `in` ShiftExpression[?Yield]

ReturnStatement[Yield]:
  `return` `;`
  `return` [no LineTerminator here] Expression[In, ?Yield] `;`

Script:
  ScriptBody?

ScriptBody:
  StatementList

ShiftExpression[Yield]:
  AdditiveExpression[?Yield]
  ShiftExpression[?Yield] `<<` AdditiveExpression[?Yield]
  ShiftExpression[?Yield] `>>` AdditiveExpression[?Yield]
  ShiftExpression[?Yield] `>>>` AdditiveExpression[?Yield]

SingleNameBinding[Yield]:
  BindingIdentifier[?Yield] Initializer[In, ?Yield]?

SpreadElement[Yield]:
  `...` AssignmentExpression[In, ?Yield]

Statement[Yield, Return]:
  BlockStatement[?Yield, ?Return]
  VariableStatement[?Yield]
  EmptyStatement
  ExpressionStatement[?Yield]
  IfStatement[?Yield, ?Return]
  BreakableStatement[?Yield, ?Return]
  ContinueStatement[?Yield]
  BreakStatement[?Yield]
  [+Return] ReturnStatement[?Yield]
  WithStatement[?Yield, ?Return]
  LabelledStatement[?Yield, ?Return]
  ThrowStatement[?Yield]
  TryStatement[?Yield, ?Return]
  DebuggerStatement

StatementList[Yield, Return]:
  StatementListItem[?Yield, ?Return]
  StatementList[?Yield, ?Return] StatementListItem[?Yield, ?Return]

StatementListItem[Yield, Return]:
  Statement[?Yield, ?Return]
  Declaration[?Yield]

StrDecimalLiteral:
  StrUnsignedDecimalLiteral
  `+` StrUnsignedDecimalLiteral
  `-` StrUnsignedDecimalLiteral

StrNumericLiteral:
  StrDecimalLiteral
  BinaryIntegerLiteral
  OctalIntegerLiteral
  HexIntegerLiteral

StrUnsignedDecimalLiteral:
  `Infinity`
  DecimalDigits `.` DecimalDigits? ExponentPart?
  `.` DecimalDigits ExponentPart?
  DecimalDigits ExponentPart?

StrWhiteSpace:
  StrWhiteSpaceChar StrWhiteSpace?

StrWhiteSpaceChar:
  WhiteSpace
  LineTerminator

StrictFormalParameters[Yield]:
  FormalParameters[?Yield]

StringNumericLiteral:
  StrWhiteSpace?
  StrWhiteSpace? StrNumericLiteral StrWhiteSpace?

SuperCall[Yield]:
  `super` Arguments[?Yield]

SuperProperty[Yield]:
  `super` `[` Expression[In, ?Yield] `]`
  `super` `.` IdentifierName

SwitchStatement[Yield, Return]:
  `switch` `(` Expression[In, ?Yield] `)` CaseBlock[?Yield, ?Return]

SyntaxCharacter:
  `^`
  `$`
  `\`
  `.`
  `*`
  `+`
  `?`
  `(`
  `)`
  `[`
  `]`
  `{`
  `}`
  `|`

TemplateLiteral[Yield]:
  NoSubstitutionTemplate
  TemplateHead Expression[In, ?Yield] TemplateSpans[?Yield]

TemplateMiddleList[Yield]:
  TemplateMiddle Expression[In, ?Yield]
  TemplateMiddleList[?Yield] TemplateMiddle Expression[In, ?Yield]

TemplateSpans[Yield]:
  TemplateTail
  TemplateMiddleList[?Yield] TemplateTail

Term[U]:
  Assertion[?U]
  Atom[?U]
  Atom[?U] Quantifier

ThrowStatement[Yield]:
  `throw` [no LineTerminator here] Expression[In, ?Yield] `;`

TrailSurrogate:
  <HexTrailSurrogate>

TryStatement[Yield, Return]:
  `try` Block[?Yield, ?Return] Catch[?Yield, ?Return]
  `try` Block[?Yield, ?Return] Finally[?Yield, ?Return]
  `try` Block[?Yield, ?Return] Catch[?Yield, ?Return] Finally[?Yield, ?Return]

UnaryExpression[Yield]:
  UpdateExpression[?Yield]
  `delete` UnaryExpression[?Yield]
  `void` UnaryExpression[?Yield]
  `typeof` UnaryExpression[?Yield]
  `+` UnaryExpression[?Yield]
  `-` UnaryExpression[?Yield]
  `~` UnaryExpression[?Yield]
  `!` UnaryExpression[?Yield]

UpdateExpression[Yield]:
  LeftHandSideExpression[?Yield]
  LeftHandSideExpression[?Yield] [no LineTerminator here] `++`
  LeftHandSideExpression[?Yield] [no LineTerminator here] `--`
  `++` UnaryExpression[?Yield]
  `--` UnaryExpression[?Yield]

VariableDeclaration[In, Yield]:
  BindingIdentifier[?Yield] Initializer[?In, ?Yield]?
  BindingPattern[?Yield] Initializer[?In, ?Yield]

VariableDeclarationList[In, Yield]:
  VariableDeclaration[?In, ?Yield]
  VariableDeclarationList[?In, ?Yield] `,` VariableDeclaration[?In, ?Yield]

VariableStatement[Yield]:
  `var` VariableDeclarationList[In, ?Yield] `;`

WithStatement[Yield, Return]:
  `with` `(` Expression[In, ?Yield] `)` Statement[?Yield, ?Return]

YieldExpression[In]:
  `yield`
  `yield` [no LineTerminator here] AssignmentExpression[?In, Yield]
  `yield` [no LineTerminator here] `*` AssignmentExpression[?In, Yield]

uri:
  uriCharacters?

uriAlpha:
  `a`
  `b`
  `c`
  `d`
  `e`
  `f`
  `g`
  `h`
  `i`
  `j`
  `k`
  `l`
  `m`
  `n`
  `o`
  `p`
  `q`
  `r`
  `s`
  `t`
  `u`
  `v`
  `w`
  `x`
  `y`
  `z`
  `A`
  `B`
  `C`
  `D`
  `E`
  `F`
  `G`
  `H`
  `I`
  `J`
  `K`
  `L`
  `M`
  `N`
  `O`
  `P`
  `Q`
  `R`
  `S`
  `T`
  `U`
  `V`
  `W`
  `X`
  `Y`
  `Z`

uriCharacter:
  uriReserved
  uriUnescaped
  uriEscaped

uriCharacters:
  uriCharacter uriCharacters?

uriEscaped:
  `%` HexDigit HexDigit

uriMark:
  `-`
  `_`
  `.`
  `!`
  `~`
  `*`
  `'`
  `(`
  `)`

uriReserved:
  `;`
  `/`
  `?`
  `:`
  `@`
  `&`
  `=`
  `+`
  `$`
  `,`

uriUnescaped:
  uriAlpha
  DecimalDigit
  uriMark