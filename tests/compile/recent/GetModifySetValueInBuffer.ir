{
  [0] app __x0__ = (IsDetachedBuffer arrayBuffer)
  [0] assert (= __x0__ false)
  [3] let block = arrayBuffer.ArrayBufferData
  [4] ??? "Let id:{elementSize} be the Element Size value specified in link:{} for Element Type id:{type} ."
  [5] if (= isLittleEndian absent) isLittleEndian = GLOBAL_agent.LittleEndian else [11] {}
  [6] app __x1__ = (NumericToRawBytes type value isLittleEndian)
  [6] let rawBytes = __x1__
  [15] app __x2__ = (IsSharedArrayBuffer arrayBuffer)
  [15] if (= __x2__ true) {
    [8] let execution = GLOBAL_agent.CandidateExecution
    [9] ??? "Let id:{eventList} be the [ [ EventList ] ] field of the element in id:{execution} . [ [ EventsRecords ] ] whose [ [ AgentSignifier ] ] is AgentSignifier ( ) ."
    [10] ??? "Let id:{rawBytesRead} be a List of length id:{elementSize} whose elements are nondeterministically chosen byte values ."
    [12] ??? "Let id:{rmwEvent} be ReadModifyWriteSharedMemory { [ [ Order ] ] : const:{SeqCst} , [ [ NoTear ] ] : value:{true} , [ [ Block ] ] : id:{block} , [ [ ByteIndex ] ] : id:{byteIndex} , [ [ ElementSize ] ] : id:{elementSize} , [ [ Payload ] ] : id:{rawBytes} , [ [ ModifyOp ] ] : id:{op} } ."
    [13] append rmwEvent -> eventList
    [14] append (new ChosenValueRecord("Event" -> rmwEvent, "ChosenValue" -> rawBytesRead)) -> execution.ChosenValues
  } else {
    [16] ??? "Let id:{rawBytesRead} be a List of length id:{elementSize} whose elements are the sequence of id:{elementSize} bytes starting with id:{block} [ id:{byteIndex} ] ."
    [17] app __x3__ = (op rawBytesRead rawBytes)
    [17] let rawBytesModified = __x3__
    [18] ??? "Store the individual bytes of id:{rawBytesModified} into id:{block} , starting at id:{block} [ id:{byteIndex} ] ."
  }
  [19] app __x4__ = (RawBytesToNumeric type rawBytesRead isLittleEndian)
  [19] app __x5__ = (WrapCompletion __x4__)
  [19] return __x5__
}