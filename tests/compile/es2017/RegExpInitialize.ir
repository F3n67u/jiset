{
  app obj = (GetArgument argumentsList 0i)
  app pattern = (GetArgument argumentsList 1i)
  app flags = (GetArgument argumentsList 2i)
  [1] if (= pattern undefined) let P = "" else {
    app __x0__ = (ToString pattern)
    if (is-completion __x0__) if (= __x0__.Type CONST_normal) __x0__ = __x0__.Value else return __x0__ else [8] {}
    let P = __x0__
  }
  [3] if (= flags undefined) let F = "" else {
    app __x1__ = (ToString flags)
    if (is-completion __x1__) if (= __x1__.Type CONST_normal) __x1__ = __x1__.Value else return __x1__ else [8] {}
    let F = __x1__
  }
  [4] ??? "If id:{F} contains any code unit other than code:{\"g\"} , code:{\"i\"} , code:{\"m\"} , code:{\"u\"} , or code:{\"y\"} or if it contains the same code unit more than once , throw a value:{SyntaxError} exception ."
  [5] if (contains F "u") let BMP = false else let BMP = true
  [9] if (= BMP true) {
    [7] ??? "Parse id:{P} using the grammars in link:{} and interpreting each of its 16 - bit elements as a Unicode BMP code point . UTF - 16 decoding is not applied to the elements . The goal symbol for the parse is nt:{Pattern[~U]} . Throw a value:{SyntaxError} exception if id:{P} did not conform to the grammar , if any elements of id:{P} were not matched by the parse , or if any Early Error conditions exist ."
    [8] ??? "Let id:{patternCharacters} be a List whose elements are the code unit elements of id:{P} ."
  } else {
    [10] ??? "Parse id:{P} using the grammars in link:{} and interpreting id:{P} as UTF - 16 encoded Unicode code points ( link:{} ) . The goal symbol for the parse is nt:{Pattern[+U]} . Throw a value:{SyntaxError} exception if id:{P} did not conform to the grammar , if any elements of id:{P} were not matched by the parse , or if any Early Error conditions exist ."
    [11] ??? "Let id:{patternCharacters} be a List whose elements are the code points resulting from applying UTF - 16 decoding to id:{P} ' s sequence of elements ."
  }
  [12] obj.OriginalSource = P
  [13] obj.OriginalFlags = F
  [14] ??? "Set id:{obj} . [ [ RegExpMatcher ] ] to the internal procedure that evaluates the above parse of id:{P} by applying the semantics provided in link:{} using id:{patternCharacters} as the pattern ' s List of nt:{SourceCharacter} values and id:{F} as the flag parameters ."
  [15] app __x2__ = (Set obj "lastIndex" 0i true)
  [15] if (is-completion __x2__) if (= __x2__.Type CONST_normal) __x2__ = __x2__.Value else return __x2__ else [8] {}
  [15] __x2__
  [16] app __x3__ = (WrapCompletion obj)
  [16] return __x3__
}