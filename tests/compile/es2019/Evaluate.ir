{
  [0] let module = this
  [1] assert (|| (= module.Status "instantiated") (= module.Status "evaluated"))
  [2] let stack = (new [])
  [3] app __x0__ = (InnerModuleEvaluation module stack 0i)
  [3] let result = __x0__
  [4] app __x1__ = (IsAbruptCompletion result)
  [4] if __x1__ {
    [5] let __x2__ = stack
    [5] let __x3__ = 0i
    [5] while (< __x3__ __x2__.length) {
      let m = __x2__[__x3__]
      [6] assert (= m.Status "evaluating")
      [7] m.Status = "evaluated"
      [8] m.EvaluationError = result
      __x3__ = (+ __x3__ 1i)
    }
    [9] assert (&& (= module.Status "evaluated") (= module.EvaluationError result))
    [10] app __x4__ = (WrapCompletion result)
    [10] return __x4__
  } else [20] {}
  [11] assert (&& (= module.Status "evaluated") (= module.EvaluationError undefined))
  [12] assert (= stack.length 0i)
  [13] app __x5__ = (WrapCompletion undefined)
  [13] return __x5__
}