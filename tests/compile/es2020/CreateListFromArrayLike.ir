{
  [0] if (= elementTypes absent) elementTypes = (new [Undefined, Null, Boolean, String, Symbol, Number, BigInt, Object]) else [0] {}
  [1] app __x0__ = (Type obj)
  [1] if (! (= __x0__ Object)) {
    app __x1__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_TypeError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
    return __x1__
  } else [0] {}
  [2] app __x2__ = (LengthOfArrayLike obj)
  [2] if (is-completion __x2__) if (= __x2__.Type CONST_normal) __x2__ = __x2__.Value else return __x2__ else [0] {}
  [2] let len = __x2__
  [3] let list = (new [])
  [4] let index = 0i
  [5] while (< index len) {
    [6] app __x3__ = (ToString index)
    [6] if (is-completion __x3__) if (= __x3__.Type CONST_normal) __x3__ = __x3__.Value else return __x3__ else [0] {}
    [6] let indexName = __x3__
    [7] app __x4__ = (Get obj indexName)
    [7] if (is-completion __x4__) if (= __x4__.Type CONST_normal) __x4__ = __x4__.Value else return __x4__ else [0] {}
    [7] let next = __x4__
    [8] app __x5__ = (Type next)
    [8] if (! (contains elementTypes __x5__)) {
      app __x6__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_TypeError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
      return __x6__
    } else [0] {}
    [9] append next -> list
    [10] index = (+ index 1i)
  }
  [11] app __x7__ = (WrapCompletion list)
  [11] return __x7__
}