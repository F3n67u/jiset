{
  access __x0__ = (body "VarDeclaredNames")
  let varNames = __x0__
  access __x1__ = (body "VarScopedDeclarations")
  let varDeclarations = __x1__
  if (= strict false) {
    if (= (typeof varEnv) "GlobalEnvironmentRecord") {
      let __x2__ = varNames
      let __x3__ = 0i
      while (< __x3__ __x2__.length) {
        let name = __x2__[__x3__]
        app __x4__ = (varEnv.HasLexicalDeclaration varEnv name)
        if (= __x4__ true) throw INTRINSIC_SyntaxError else {}
        __x3__ = (+ __x3__ 1i)
      }
    } else {}
    let thisEnv = lexEnv
    while (! (= thisEnv varEnv)) {
      if (! (= (typeof thisEnv) "ObjectEnvironmentRecord")) {
        let __x5__ = varNames
        let __x6__ = 0i
        while (< __x6__ __x5__.length) {
          let name = __x5__[__x6__]
          app __x7__ = (thisEnv.HasBinding thisEnv name)
          if (= __x7__ true) throw INTRINSIC_SyntaxError else {}
          __x6__ = (+ __x6__ 1i)
        }
      } else {}
      thisEnv = thisEnv.OuterEnv
    }
  } else {}
  let functionsToInitialize = (new [])
  let declaredFunctionNames = (new [])
  let __x8__ = varDeclarations
  let __x9__ = __x8__.length
  while (< 0i __x9__) {
    __x9__ = (- __x9__ 1i)
    let d = __x8__[__x9__]
    if (! (|| (|| (is-instance-of d VariableDeclaration) (is-instance-of d ForBinding)) (is-instance-of d BindingIdentifier))) {
      assert (|| (|| (|| (is-instance-of d FunctionDeclaration) (is-instance-of d GeneratorDeclaration)) (is-instance-of d AsyncFunctionDeclaration)) (is-instance-of d AsyncGeneratorDeclaration))
      access __x10__ = (d "BoundNames")
      let fn = __x10__[0i]
      if (! (contains declaredFunctionNames fn)) {
        if (= (typeof varEnv) "GlobalEnvironmentRecord") {
          app __x11__ = (varEnv.CanDeclareGlobalFunction varEnv fn)
          let fnDefinable = [? __x11__]
          if (= fnDefinable false) throw INTRINSIC_TypeError else {}
        } else {}
        append fn -> declaredFunctionNames
        prepend d -> functionsToInitialize
      } else {}
    } else {}
  }
  let declaredVarNames = (new [])
  let __x12__ = varDeclarations
  let __x13__ = 0i
  while (< __x13__ __x12__.length) {
    let d = __x12__[__x13__]
    if (|| (|| (is-instance-of d VariableDeclaration) (is-instance-of d ForBinding)) (is-instance-of d BindingIdentifier)) {
      access __x14__ = (d "BoundNames")
      let __x15__ = __x14__
      let __x16__ = 0i
      while (< __x16__ __x15__.length) {
        let vn = __x15__[__x16__]
        if (! (contains declaredFunctionNames vn)) {
          if (= (typeof varEnv) "GlobalEnvironmentRecord") {
            app __x17__ = (varEnv.CanDeclareGlobalVar varEnv vn)
            let vnDefinable = [? __x17__]
            if (= vnDefinable false) throw INTRINSIC_TypeError else {}
          } else {}
          if (! (contains declaredVarNames vn)) append vn -> declaredVarNames else {}
        } else {}
        __x16__ = (+ __x16__ 1i)
      }
    } else {}
    __x13__ = (+ __x13__ 1i)
  }
  access __x18__ = (body "LexicallyScopedDeclarations")
  let lexDeclarations = __x18__
  let __x19__ = lexDeclarations
  let __x20__ = 0i
  while (< __x20__ __x19__.length) {
    let d = __x19__[__x20__]
    access __x21__ = (d "BoundNames")
    let __x22__ = __x21__
    let __x23__ = 0i
    while (< __x23__ __x22__.length) {
      let dn = __x22__[__x23__]
      access __x24__ = (d "IsConstantDeclaration")
      if (= __x24__ true) {
        app __x25__ = (lexEnv.CreateImmutableBinding lexEnv dn true)
        [? __x25__]
      } else {
        app __x26__ = (lexEnv.CreateMutableBinding lexEnv dn false)
        [? __x26__]
      }
      __x23__ = (+ __x23__ 1i)
    }
    __x20__ = (+ __x20__ 1i)
  }
  let __x27__ = functionsToInitialize
  let __x28__ = 0i
  while (< __x28__ __x27__.length) {
    let f = __x27__[__x28__]
    access __x29__ = (f "BoundNames")
    let fn = __x29__[0i]
    access __x30__ = (f "InstantiateFunctionObject")
    app __x31__ = (__x30__ lexEnv)
    let fo = __x31__
    if (= (typeof varEnv) "GlobalEnvironmentRecord") {
      app __x32__ = (varEnv.CreateGlobalFunctionBinding varEnv fn fo true)
      [? __x32__]
    } else {
      app __x33__ = (varEnv.HasBinding varEnv fn)
      let bindingExists = __x33__
      if (= bindingExists false) {
        app __x34__ = (varEnv.CreateMutableBinding varEnv fn true)
        let status = [! __x34__]
        app __x35__ = (varEnv.InitializeBinding varEnv fn fo)
        [! __x35__]
      } else {
        app __x36__ = (varEnv.SetMutableBinding varEnv fn fo false)
        [! __x36__]
      }
    }
    __x28__ = (+ __x28__ 1i)
  }
  let __x37__ = declaredVarNames
  let __x38__ = 0i
  while (< __x38__ __x37__.length) {
    let vn = __x37__[__x38__]
    if (= (typeof varEnv) "GlobalEnvironmentRecord") {
      app __x39__ = (varEnv.CreateGlobalVarBinding varEnv vn true)
      [? __x39__]
    } else {
      app __x40__ = (varEnv.HasBinding varEnv vn)
      let bindingExists = __x40__
      if (= bindingExists false) {
        app __x41__ = (varEnv.CreateMutableBinding varEnv vn true)
        let status = [! __x41__]
        app __x42__ = (varEnv.InitializeBinding varEnv vn undefined)
        [! __x42__]
      } else {}
    }
    __x38__ = (+ __x38__ 1i)
  }
  app __x43__ = (NormalCompletion CONST_empty)
  return __x43__
}