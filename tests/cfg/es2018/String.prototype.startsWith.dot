digraph {
  node13266 [shape=cds, label=<<font color="black">7:app __x6__ = (min __x5__ len)</font>> color="black" fillcolor="white" style=filled]
  node13255 [shape=cds, label=<<font color="black">1:app __x1__ = (ToString O)</font>> color="black" fillcolor="white" style=filled]
  node13270 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">10:??? &quot;If the sequence of elements of id:{S} starting at id:{start} of length id:{searchLength} is the same as the full element sequence of id:{searchStr} , return value:{true} .&quot;</td></tr>
      <tr><td align="left">11:??? &quot;Otherwise , return value:{false} .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node13251 [shape=cds, label=<<font color="black">app searchString = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node13258 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">2:let isRegExp = [? __x2__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node13263 [shape=cds, label=<<font color="black">5:app __x4__ = (ToInteger position)</font>> color="black" fillcolor="white" style=filled]
  node13265 [shape=cds, label=<<font color="black">7:app __x5__ = (max pos 0i)</font>> color="black" fillcolor="white" style=filled]
  node13249 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node13253 [shape=cds, label=<<font color="black">0:app __x0__ = (RequireObjectCoercible this)</font>> color="black" fillcolor="white" style=filled]
  node13268 [shape=diamond, label=<<font color="black">(&lt; len (+ searchLength start))</font>> color="black" fillcolor="white" style=filled]
  node13261 [shape=cds, label=<<font color="black">4:app __x3__ = (ToString searchString)</font>> color="black" fillcolor="white" style=filled]
  node13256 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">1:let S = [? __x1__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node13252 [shape=cds, label=<<font color="black">app position = (GetArgument argumentsList 1i)</font>> color="black" fillcolor="white" style=filled]
  node13267 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">7:let start = __x6__</td></tr>
      <tr><td align="left">8:let searchLength = searchStr.length</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node13257 [shape=cds, label=<<font color="black">2:app __x2__ = (IsRegExp searchString)</font>> color="black" fillcolor="white" style=filled]
  node13262 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">4:let searchStr = [? __x3__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node13260 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node13250 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node13254 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let O = [? __x0__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node13269 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return false</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node13264 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">5:let pos = [? __x4__]</td></tr>
      <tr><td align="left">6:let len = S.length</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node13259 [shape=diamond, label=<<font color="black">(= isRegExp true)</font>> color="black" fillcolor="white" style=filled]
  node13256 -> node13257 [ color="black"]
  node13264 -> node13265 [ color="black"]
  node13257 -> node13258 [ color="black"]
  node13262 -> node13263 [ color="black"]
  node13255 -> node13256 [ color="black"]
  node13261 -> node13262 [ color="black"]
  node13260 -> node13261 [ color="black"]
  node13259 -> node13260 [label=<<font color="black">true</font>> color="black"]
  node13259 -> node13261 [label=<<font color="black">false</font>> color="black"]
  node13251 -> node13252 [ color="black"]
  node13267 -> node13268 [ color="black"]
  node13270 -> node13250 [ color="black"]
  node13269 -> node13270 [ color="black"]
  node13253 -> node13254 [ color="black"]
  node13265 -> node13266 [ color="black"]
  node13268 -> node13269 [label=<<font color="black">true</font>> color="black"]
  node13268 -> node13270 [label=<<font color="black">false</font>> color="black"]
  node13252 -> node13253 [ color="black"]
  node13266 -> node13267 [ color="black"]
  node13258 -> node13259 [ color="black"]
  node13254 -> node13255 [ color="black"]
  node13263 -> node13264 [ color="black"]
  node13249 -> node13251 [ color="black"]
}
