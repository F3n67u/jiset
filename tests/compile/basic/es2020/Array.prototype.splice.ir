{
  app __x0__ = (ToObject this)
  let O = [? __x0__]
  app __x1__ = (LengthOfArrayLike O)
  let len = [? __x1__]
  app __x2__ = (ToInteger start)
  let relativeStart = [? __x2__]
  if (< relativeStart 0i) {
    app __x3__ = (max (+ len relativeStart) 0i)
    let actualStart = __x3__
  } else {
    app __x4__ = (min relativeStart len)
    let actualStart = __x4__
  }
  if (= argumentsList.length 0i) {
    let insertCount = 0i
    let actualDeleteCount = 0i
  } else if (= argumentsList.length 1i) {
    let insertCount = 0i
    let actualDeleteCount = (- len actualStart)
  } else {
    let insertCount = (- argumentsList.length 2i)
    app __x5__ = (ToInteger deleteCount)
    let dc = [? __x5__]
    app __x6__ = (max dc 0i)
    app __x7__ = (min __x6__ (- len actualStart))
    let actualDeleteCount = __x7__
  }
  if (< (- (** 2.0 53i) 1i) (- (+ len insertCount) actualDeleteCount)) throw INTRINSIC_TypeError else {}
  app __x8__ = (ArraySpeciesCreate O actualDeleteCount)
  let A = [? __x8__]
  let k = 0i
  while (< k actualDeleteCount) {
    app __x9__ = (ToString (+ actualStart k))
    let from = [! __x9__]
    app __x10__ = (HasProperty O from)
    let fromPresent = [? __x10__]
    if (= fromPresent true) {
      app __x11__ = (Get O from)
      let fromValue = [? __x11__]
      app __x12__ = (ToString k)
      app __x13__ = (CreateDataPropertyOrThrow A [! __x12__] fromValue)
      [? __x13__]
    } else {}
    k = (+ k 1i)
  }
  app __x14__ = (Set A "length" actualDeleteCount true)
  [? __x14__]
  ??? "Let id:{items} be a List whose elements are , in left to right order , the portion of the actual argument list starting with the third argument . The list is empty if fewer than three arguments were passed ."
  let itemCount = items.length
  if (< itemCount actualDeleteCount) {
    k = actualStart
    while (< k (- len actualDeleteCount)) {
      app __x15__ = (ToString (+ k actualDeleteCount))
      let from = [! __x15__]
      app __x16__ = (ToString (+ k itemCount))
      let to = [! __x16__]
      app __x17__ = (HasProperty O from)
      let fromPresent = [? __x17__]
      if (= fromPresent true) {
        app __x18__ = (Get O from)
        let fromValue = [? __x18__]
        app __x19__ = (Set O to fromValue true)
        [? __x19__]
      } else {
        assert (= fromPresent false)
        app __x20__ = (DeletePropertyOrThrow O to)
        [? __x20__]
      }
      k = (+ k 1i)
    }
    k = len
    while (< (+ (- len actualDeleteCount) itemCount) k) {
      app __x21__ = (ToString (- k 1i))
      app __x22__ = (DeletePropertyOrThrow O [! __x21__])
      [? __x22__]
      k = (- k 1i)
    }
  } else if (< actualDeleteCount itemCount) {
    k = (- len actualDeleteCount)
    while (< actualStart k) {
      app __x23__ = (ToString (- (+ k actualDeleteCount) 1i))
      let from = [! __x23__]
      app __x24__ = (ToString (- (+ k itemCount) 1i))
      let to = [! __x24__]
      app __x25__ = (HasProperty O from)
      let fromPresent = [? __x25__]
      if (= fromPresent true) {
        app __x26__ = (Get O from)
        let fromValue = [? __x26__]
        app __x27__ = (Set O to fromValue true)
        [? __x27__]
      } else {
        assert (= fromPresent false)
        app __x28__ = (DeletePropertyOrThrow O to)
        [? __x28__]
      }
      k = (- k 1i)
    }
  } else {}
  k = actualStart
  while (< 0i items.length) {
    let E = (pop items 0i)
    app __x29__ = (ToString k)
    app __x30__ = (Set O [! __x29__] E true)
    [? __x30__]
    k = (+ k 1i)
  }
  app __x31__ = (Set O "length" (+ (- len actualDeleteCount) itemCount) true)
  [? __x31__]
  return A
}