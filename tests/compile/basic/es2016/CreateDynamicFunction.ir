{
  if (= newTarget undefined) let newTarget = constructor else {}
  if (= kind "normal") {
    let goal = "FunctionBody"
    let parameterGoal = "FormalParameters"
    let fallbackProto = INTRINSIC_FunctionPrototype
  } else {
    let goal = "GeneratorBody"
    let parameterGoal = "FormalParameters[Yield]"
    let fallbackProto = INTRINSIC_Generator
  }
  let argCount = args.length
  let P = ""
  if (== argCount 0i) let bodyText = "" else if (== argCount 1i) let bodyText = args[0i] else {
    let firstArg = args[0i]
    app __x0__ = (ToString firstArg)
    if (is-completion __x0__) if (= __x0__.Type CONST_normal) __x0__ = __x0__.Value else return __x0__ else {}
    let P = __x0__
    let k = 1i
    while (< k (- argCount 1i)) {
      let nextArg = args[k]
      app __x1__ = (ToString nextArg)
      if (is-completion __x1__) if (= __x1__.Type CONST_normal) __x1__ = __x1__.Value else return __x1__ else {}
      let nextArgString = __x1__
      let P = (+ (+ P ",") nextArgString)
      k = (+ k 1i)
    }
    let bodyText = args[k]
  }
  app __x2__ = (ToString bodyText)
  if (is-completion __x2__) if (= __x2__.Type CONST_normal) __x2__ = __x2__.Value else return __x2__ else {}
  let bodyText = __x2__
  ??? "Let id:{parameters} be the result of parsing id:{P} , interpreted as UTF - 16 encoded Unicode text as described in link:{} , using id:{parameterGoal} as the goal symbol . Throw a value:{SyntaxError} exception if the parse fails ."
  ??? "Let id:{body} be the result of parsing id:{bodyText} , interpreted as UTF - 16 encoded Unicode text as described in link:{} , using id:{goal} as the goal symbol . Throw a value:{SyntaxError} exception if the parse fails ."
  if true let strict = true else let strict = false
  ??? "If any static semantics errors are detected for id:{parameters} or id:{body} , throw a value:{SyntaxError} or a value:{ReferenceError} exception , depending on the type of the error . If id:{strict} is value:{true} , the Early Error rules for grammar:{StrictFormalParameters0, [FormalParameters]} are applied . Parsing and early error detection may be interweaved in an implementation dependent manner ."
  access __x3__ = (body "ContainsUseStrict")
  let __x4__ = (= __x3__ true)
  if __x4__ {
    access __x5__ = (parameters "IsSimpleParameterList")
    __x4__ = (= __x5__ false)
  } else {}
  if __x4__ {
    app __x6__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_SyntaxError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
    return __x6__
  } else {}
  access __x7__ = (parameters "BoundNames")
  access __x8__ = (body "LexicallyDeclaredNames")
  let __x9__ = __x7__
  let __x10__ = __x8__
  let __x11__ = 0i
  let __x12__ = 0i
  let __x13__ = false
  while (< __x11__ __x9__.length) {
    __x12__ = 0i
    while (< __x12__ __x10__.length) if (= __x9__[__x11__] __x10__[__x12__]) __x13__ = true else {}
  }
  if __x13__ {
    app __x14__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_SyntaxError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
    return __x14__
  } else {}
  access __x15__ = (body "Contains")
  app __x16__ = (__x15__ "SuperCall")
  if (= __x16__ true) {
    app __x17__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_SyntaxError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
    return __x17__
  } else {}
  access __x18__ = (parameters "Contains")
  app __x19__ = (__x18__ "SuperCall")
  if (= __x19__ true) {
    app __x20__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_SyntaxError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
    return __x20__
  } else {}
  access __x21__ = (body "Contains")
  app __x22__ = (__x21__ "SuperProperty")
  if (= __x22__ true) {
    app __x23__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_SyntaxError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
    return __x23__
  } else {}
  access __x24__ = (parameters "Contains")
  app __x25__ = (__x24__ "SuperProperty")
  if (= __x25__ true) {
    app __x26__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_SyntaxError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
    return __x26__
  } else {}
  if (= kind "generator") {
    access __x27__ = (parameters "Contains")
    app __x28__ = (__x27__ "YieldExpression")
    if (= __x28__ true) {
      app __x29__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_SyntaxError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
      return __x29__
    } else {}
  } else {}
  if (= strict true) {
    access __x30__ = (parameters "BoundNames")
    let __x31__ = __x30__
    let __x32__ = 0i
    let __x33__ = 0i
    let __x34__ = true
    while (< __x32__ __x31__.length) {
      __x33__ = (+ __x32__ 1i)
      while (< __x33__ __x31__.length) if (= __x31__[__x32__] __x31__[__x33__]) __x34__ = true else {}
    }
    if __x34__ {
      app __x35__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_SyntaxError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
      return __x35__
    } else {}
  } else {}
  app __x36__ = (GetPrototypeFromConstructor newTarget fallbackProto)
  if (is-completion __x36__) if (= __x36__.Type CONST_normal) __x36__ = __x36__.Value else return __x36__ else {}
  let proto = __x36__
  app __x37__ = (FunctionAllocate proto strict kind)
  let F = __x37__
  let realmF = F.Realm
  let scope = realmF.GlobalEnv
  app __x38__ = (FunctionInitialize F CONST_Normal parameters body scope)
  __x38__
  if (= kind "generator") {
    app __x39__ = (ObjectCreate INTRINSIC_GeneratorPrototype)
    let prototype = __x39__
    app __x40__ = (DefinePropertyOrThrow F "prototype" (new PropertyDescriptor("Value" -> prototype, "Writable" -> true, "Enumerable" -> false, "Configurable" -> false)))
    __x40__
  } else {
    app __x41__ = (MakeConstructor F)
    __x41__
  }
  app __x42__ = (SetFunctionName F "anonymous")
  __x42__
  app __x43__ = (WrapCompletion F)
  return __x43__
}