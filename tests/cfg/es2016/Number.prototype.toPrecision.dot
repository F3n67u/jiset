digraph {
  node11043 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">??? &quot;Let id:{m} be the String formed by the concatenation of code unit 0x0030 ( DIGIT ZERO ) , code unit 0x002E ( FULL STOP ) , - ( id:{e} + 1 ) occurrences of code unit 0x0030 ( DIGIT ZERO ) , and the String id:{m} .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11024 [shape=diamond, label=<<font color="black">(&lt; x 0i)</font>> color="black" fillcolor="white" style=filled]
  node11036 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let c = &quot;+&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11032 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">15:??? &quot;Let id:{e} and id:{n} be integers such that 10 sup:{id:{p} - 1} &le; id:{n} &lt; 10 sup:{id:{p}} and for which the exact mathematical value of id:{n} &times; 10 sup:{id:{e} - id:{p} + 1} - id:{x} is as close to zero as possible . If there are two such sets of id:{e} and id:{n} , pick the id:{e} and id:{n} for which id:{n} &times; 10 sup:{id:{e} - id:{p} + 1} is larger .&quot;</td></tr>
      <tr><td align="left">16:??? &quot;Let id:{m} be the String consisting of the digits of the decimal representation of id:{n} ( in order , with no leading zeroes ) .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11042 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">??? &quot;Let id:{m} be the concatenation of the first id:{e} + 1 elements of id:{m} , the code unit 0x002E ( FULL STOP ) , and the remaining id:{p} - ( id:{e} + 1 ) elements of id:{m} .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11019 [shape=cds, label=<<font color="black">2:app __x2__ = (ToInteger precision)</font>> color="black" fillcolor="white" style=filled]
  node11026 [shape=diamond, label=<<font color="black">(== x Infinity)</font>> color="black" fillcolor="white" style=filled]
  node11023 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">4:let s = &quot;&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11031 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">12:??? &quot;Let id:{m} be the String consisting of id:{p} occurrences of the code unit 0x0030 ( DIGIT ZERO ) .&quot;</td></tr>
      <tr><td align="left">13:let e = 0i</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11041 [shape=diamond, label=<<font color="black">(! (&lt; e 0i))</font>> color="black" fillcolor="white" style=filled]
  node11017 [shape=cds, label=<<font color="black">app __x1__ = (ToString x)</font>> color="black" fillcolor="white" style=filled]
  node11044 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">33:return (+ s m)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11035 [shape=diamond, label=<<font color="black">(&lt; 0i e)</font>> color="black" fillcolor="white" style=filled]
  node11028 [shape=diamond, label=<<font color="black">(|| (&lt; p 1i) (&lt; 21i p))</font>> color="black" fillcolor="white" style=filled]
  node11021 [shape=diamond, label=<<font color="black">(= x NaN)</font>> color="black" fillcolor="white" style=filled]
  node11029 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw RangeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11014 [shape=cds, label=<<font color="black">0:app __x0__ = (thisNumberValue this)</font>> color="black" fillcolor="white" style=filled]
  node11020 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">2:let p = [? __x2__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11025 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">6:let s = &quot;-&quot;</td></tr>
      <tr><td align="left">7:let x = (- x)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11040 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return (+ s m)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11015 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let x = [? __x0__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11037 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">24:let c = &quot;-&quot;</td></tr>
      <tr><td align="left">25:let e = (- e)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11033 [shape=diamond, label=<<font color="black">(|| (&lt; e -6i) (! (&lt; e p)))</font>> color="black" fillcolor="white" style=filled]
  node11016 [shape=diamond, label=<<font color="black">(= precision undefined)</font>> color="black" fillcolor="white" style=filled]
  node11011 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node11018 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return [! __x1__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11038 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">26:??? &quot;Let id:{d} be the String consisting of the digits of the decimal representation of id:{e} ( in order , with no leading zeroes ) .&quot;</td></tr>
      <tr><td align="left">27:return (+ (+ (+ (+ s m) &quot;e&quot;) c) d)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11012 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node11030 [shape=diamond, label=<<font color="black">(== x 0i)</font>> color="black" fillcolor="white" style=filled]
  node11027 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return (+ s &quot;Infinity&quot;)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11022 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return &quot;NaN&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11034 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">18:assert (! (== e 0i))</td></tr>
      <tr><td align="left">19:??? &quot;Let id:{a} be the first element of id:{m} , and let id:{b} be the remaining id:{p} - 1 elements of id:{m} .&quot;</td></tr>
      <tr><td align="left">20:let m = (+ (+ a &quot;.&quot;) b)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11039 [shape=diamond, label=<<font color="black">(== e (- p 1i))</font>> color="black" fillcolor="white" style=filled]
  node11013 [shape=cds, label=<<font color="black">app precision = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node11044 -> node11012 [ color="black"]
  node11041 -> node11042 [label=<<font color="black">true</font>> color="black"]
  node11041 -> node11043 [label=<<font color="black">false</font>> color="black"]
  node11042 -> node11044 [ color="black"]
  node11028 -> node11029 [label=<<font color="black">true</font>> color="black"]
  node11028 -> node11030 [label=<<font color="black">false</font>> color="black"]
  node11019 -> node11020 [ color="black"]
  node11023 -> node11024 [ color="black"]
  node11017 -> node11018 [ color="black"]
  node11031 -> node11039 [ color="black"]
  node11016 -> node11017 [label=<<font color="black">true</font>> color="black"]
  node11016 -> node11019 [label=<<font color="black">false</font>> color="black"]
  node11022 -> node11023 [ color="black"]
  node11036 -> node11038 [ color="black"]
  node11034 -> node11035 [ color="black"]
  node11035 -> node11036 [label=<<font color="black">true</font>> color="black"]
  node11035 -> node11037 [label=<<font color="black">false</font>> color="black"]
  node11038 -> node11039 [ color="black"]
  node11024 -> node11025 [label=<<font color="black">true</font>> color="black"]
  node11024 -> node11026 [label=<<font color="black">false</font>> color="black"]
  node11030 -> node11031 [label=<<font color="black">true</font>> color="black"]
  node11030 -> node11032 [label=<<font color="black">false</font>> color="black"]
  node11032 -> node11033 [ color="black"]
  node11015 -> node11016 [ color="black"]
  node11021 -> node11022 [label=<<font color="black">true</font>> color="black"]
  node11021 -> node11023 [label=<<font color="black">false</font>> color="black"]
  node11025 -> node11026 [ color="black"]
  node11039 -> node11040 [label=<<font color="black">true</font>> color="black"]
  node11039 -> node11041 [label=<<font color="black">false</font>> color="black"]
  node11011 -> node11013 [ color="black"]
  node11029 -> node11030 [ color="black"]
  node11018 -> node11019 [ color="black"]
  node11013 -> node11014 [ color="black"]
  node11020 -> node11021 [ color="black"]
  node11027 -> node11028 [ color="black"]
  node11043 -> node11044 [ color="black"]
  node11026 -> node11027 [label=<<font color="black">true</font>> color="black"]
  node11026 -> node11028 [label=<<font color="black">false</font>> color="black"]
  node11040 -> node11041 [ color="black"]
  node11033 -> node11034 [label=<<font color="black">true</font>> color="black"]
  node11033 -> node11039 [label=<<font color="black">false</font>> color="black"]
  node11037 -> node11038 [ color="black"]
  node11014 -> node11015 [ color="black"]
}
