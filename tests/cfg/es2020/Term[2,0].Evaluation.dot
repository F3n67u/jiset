digraph {
  node14248 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node14249 [shape=cds, label=<<font color="black">0:access __x0__ = (Atom &quot;Evaluation&quot; direction)</font>> color="black" fillcolor="white" style=filled]
  node14247 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node14250 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let m = __x0__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14252 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">1:let min = __x1__[0i]</td></tr>
      <tr><td align="left">1:let max = __x1__[1i]</td></tr>
      <tr><td align="left">1:let greedy = __x1__[2i]</td></tr>
      <tr><td align="left">3:??? &quot;Let id:{parenIndex} be the number of left - capturing parentheses in the entire regular expression that occur to the left of this nt:{Term} . This is the total number of grammar:{Atom4, [GroupSpecifier, Disjunction]} Parse Nodes prior to or enclosing this nt:{Term} .&quot;</td></tr>
      <tr><td align="left">4:??? &quot;Let id:{parenCount} be the number of left - capturing parentheses in nt:{Atom} . This is the total number of grammar:{Atom4, [GroupSpecifier, Disjunction]} Parse Nodes enclosed by nt:{Atom} .&quot;</td></tr>
      <tr><td align="left">5:??? &quot;Return a new Matcher with parameters ( id:{x} , id:{c} ) that captures id:{m} , id:{min} , id:{max} , id:{greedy} , id:{parenIndex} , and id:{parenCount} and performs the following steps when called : in:{} out:{}&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14251 [shape=cds, label=<<font color="black">1:access __x1__ = (Quantifier &quot;Evaluation&quot;)</font>> color="black" fillcolor="white" style=filled]
  node14252 -> node14248 [ color="black"]
  node14250 -> node14251 [ color="black"]
  node14249 -> node14250 [ color="black"]
  node14247 -> node14249 [ color="black"]
  node14251 -> node14252 [ color="black"]
}
