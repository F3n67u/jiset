{
  app thisArg = (GetArgument argumentsList 0i)
  app args = (GetArgument argumentsList 1i)
  [0] let Target = this
  [1] app __x0__ = (IsCallable Target)
  [1] if (= __x0__ false) {
    app __x1__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_TypeError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
    return __x1__
  } else [67] {}
  [2] ??? "Let id:{args} be a new ( possibly empty ) List consisting of all of the argument values provided after id:{thisArg} in order ."
  [3] app __x2__ = (BoundFunctionCreate Target thisArg args)
  [3] if (is-completion __x2__) if (= __x2__.Type CONST_normal) __x2__ = __x2__.Value else return __x2__ else [67] {}
  [3] let F = __x2__
  [4] app __x3__ = (HasOwnProperty Target "length")
  [4] if (is-completion __x3__) if (= __x3__.Type CONST_normal) __x3__ = __x3__.Value else return __x3__ else [67] {}
  [4] let targetHasLength = __x3__
  [11] if (= targetHasLength true) {
    [6] app __x4__ = (Get Target "length")
    [6] if (is-completion __x4__) if (= __x4__.Type CONST_normal) __x4__ = __x4__.Value else return __x4__ else [67] {}
    [6] let targetLen = __x4__
    [8] app __x5__ = (Type targetLen)
    [8] if (! (= __x5__ Number)) let L = 0i else {
      [9] app __x6__ = (ToInteger targetLen)
      [9] let targetLen = __x6__
      [10] ??? "Let id:{L} be the larger of 0 and the result of id:{targetLen} minus the number of elements of id:{args} ."
    }
  } else let L = 0i
  [12] app __x7__ = (SetFunctionLength F L)
  [12] if (is-completion __x7__) if (= __x7__.Type CONST_normal) __x7__ = __x7__.Value else return __x7__ else [67] {}
  [12] __x7__
  [13] app __x8__ = (Get Target "name")
  [13] if (is-completion __x8__) if (= __x8__.Type CONST_normal) __x8__ = __x8__.Value else return __x8__ else [67] {}
  [13] let targetName = __x8__
  [14] app __x9__ = (Type targetName)
  [14] if (! (= __x9__ String)) let targetName = "" else [67] {}
  [15] app __x10__ = (SetFunctionName F targetName "bound")
  [15] __x10__
  [16] app __x11__ = (WrapCompletion F)
  [16] return __x11__
}