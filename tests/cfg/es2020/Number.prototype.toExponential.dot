digraph {
  node12943 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">33:m = (+ (+ (+ m &quot;e&quot;) c) d)</td></tr>
      <tr><td align="left">34:return (+ s m)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12920 [shape=diamond, label=<<font color="black">(= x NaN)</font>> color="black" fillcolor="white" style=filled]
  node12924 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">6:s = &quot;-&quot;</td></tr>
      <tr><td align="left">7:x = (- x)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12930 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">12:??? &quot;Let id:{m} be the String value consisting of id:{f} + 1 occurrences of the code unit 0x0030 ( DIGIT ZERO ) .&quot;</td></tr>
      <tr><td align="left">13:let e = 0i</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12914 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node12936 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">21:??? &quot;Let id:{a} be the first code unit of id:{m} , and let id:{b} be the remaining id:{f} code units of id:{m} .&quot;</td></tr>
      <tr><td align="left">22:m = (+ (+ a &quot;.&quot;) b)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12926 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return (+ s &quot;Infinity&quot;)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12918 [shape=cds, label=<<font color="black">1:app __x1__ = (ToInteger fractionDigits)</font>> color="black" fillcolor="white" style=filled]
  node12915 [shape=cds, label=<<font color="black">app fractionDigits = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node12940 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let c = &quot;+&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12919 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">1:let f = [? __x1__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12928 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw RangeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12934 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">19:??? &quot;Let id:{m} be the String value consisting of the digits of the decimal representation of id:{n} ( in order , with no leading zeroes ) .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12939 [shape=diamond, label=<<font color="black">(&lt; 0i e)</font>> color="black" fillcolor="white" style=filled]
  node12921 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return &quot;NaN&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12929 [shape=diamond, label=<<font color="black">(== x 0i)</font>> color="black" fillcolor="white" style=filled]
  node12916 [shape=cds, label=<<font color="black">0:app __x0__ = (thisNumberValue this)</font>> color="black" fillcolor="white" style=filled]
  node12935 [shape=diamond, label=<<font color="black">(! (== f 0i))</font>> color="black" fillcolor="white" style=filled]
  node12927 [shape=diamond, label=<<font color="black">(|| (&lt; f 0i) (&lt; 100i f))</font>> color="black" fillcolor="white" style=filled]
  node12917 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let x = [? __x0__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12942 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">32:??? &quot;Let id:{d} be the String value consisting of the digits of the decimal representation of id:{e} ( in order , with no leading zeroes ) .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12931 [shape=diamond, label=<<font color="black">(! (= fractionDigits undefined))</font>> color="black" fillcolor="white" style=filled]
  node12923 [shape=diamond, label=<<font color="black">(&lt; x 0i)</font>> color="black" fillcolor="white" style=filled]
  node12938 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">24:let c = &quot;+&quot;</td></tr>
      <tr><td align="left">25:let d = &quot;0&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12913 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node12922 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">4:let s = &quot;&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12941 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">29:assert (&lt; e 0i)</td></tr>
      <tr><td align="left">30:let c = &quot;-&quot;</td></tr>
      <tr><td align="left">31:e = (- e)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12937 [shape=diamond, label=<<font color="black">(== e 0i)</font>> color="black" fillcolor="white" style=filled]
  node12932 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">??? &quot;Let id:{e} and id:{n} be integers such that 10 sup:{id:{f}} &le; id:{n} &lt; 10 sup:{id:{f} + 1} and for which ℝ ( id:{n} ) &times; 10 sub:{ℝ} sup:{ℝ ( id:{e} ) - ℝ ( id:{n} )} - ℝ ( id:{x} ) is as close to zero as possible . If there are two such sets of id:{e} and id:{n} , pick the id:{e} and id:{n} for which ℝ ( id:{n} ) &times; 10 sub:{ℝ} sup:{ℝ ( id:{e} ) - ℝ ( id:{f} )} is larger .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12933 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">??? &quot;Let id:{e} , id:{n} , and id:{f} be integers such that id:{f} &ge; 0 , 10 sup:{id:{f}} &le; id:{n} &lt; 10 sup:{id:{f} + 1} , the Number value for ℝ ( id:{n} ) &times; 10 sub:{ℝ} sup:{ℝ ( id:{e} ) - ℝ ( id:{f} )} is id:{x} , and id:{f} is as small as possible . Note that the decimal representation of id:{n} has id:{f} + 1 sub:{ℝ} digits , id:{n} is not divisible by 10 , and the least significant digit of id:{n} is not necessarily uniquely determined by these criteria .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12925 [shape=diamond, label=<<font color="black">(== x Infinity)</font>> color="black" fillcolor="white" style=filled]
  node12917 -> node12918 [ color="black"]
  node12921 -> node12922 [ color="black"]
  node12933 -> node12934 [ color="black"]
  node12926 -> node12927 [ color="black"]
  node12923 -> node12924 [label=<<font color="black">true</font>> color="black"]
  node12923 -> node12925 [label=<<font color="black">false</font>> color="black"]
  node12927 -> node12928 [label=<<font color="black">true</font>> color="black"]
  node12927 -> node12929 [label=<<font color="black">false</font>> color="black"]
  node12937 -> node12938 [label=<<font color="black">true</font>> color="black"]
  node12937 -> node12939 [label=<<font color="black">false</font>> color="black"]
  node12928 -> node12929 [ color="black"]
  node12920 -> node12921 [label=<<font color="black">true</font>> color="black"]
  node12920 -> node12922 [label=<<font color="black">false</font>> color="black"]
  node12915 -> node12916 [ color="black"]
  node12916 -> node12917 [ color="black"]
  node12942 -> node12943 [ color="black"]
  node12939 -> node12940 [label=<<font color="black">true</font>> color="black"]
  node12939 -> node12941 [label=<<font color="black">false</font>> color="black"]
  node12913 -> node12915 [ color="black"]
  node12940 -> node12942 [ color="black"]
  node12931 -> node12932 [label=<<font color="black">true</font>> color="black"]
  node12931 -> node12933 [label=<<font color="black">false</font>> color="black"]
  node12924 -> node12925 [ color="black"]
  node12929 -> node12930 [label=<<font color="black">true</font>> color="black"]
  node12929 -> node12931 [label=<<font color="black">false</font>> color="black"]
  node12935 -> node12936 [label=<<font color="black">true</font>> color="black"]
  node12935 -> node12937 [label=<<font color="black">false</font>> color="black"]
  node12936 -> node12937 [ color="black"]
  node12925 -> node12926 [label=<<font color="black">true</font>> color="black"]
  node12925 -> node12927 [label=<<font color="black">false</font>> color="black"]
  node12943 -> node12914 [ color="black"]
  node12918 -> node12919 [ color="black"]
  node12932 -> node12934 [ color="black"]
  node12941 -> node12942 [ color="black"]
  node12934 -> node12935 [ color="black"]
  node12922 -> node12923 [ color="black"]
  node12938 -> node12943 [ color="black"]
  node12930 -> node12935 [ color="black"]
  node12919 -> node12920 [ color="black"]
}
