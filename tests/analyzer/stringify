AdditiveExpression[1,0].AssignmentTargetType:[☊(AdditiveExpression), ☊(AdditiveExpression), ☊(MultiplicativeExpression)]: {
  env: {
    AdditiveExpression -> ! ☊(AdditiveExpression)
    MultiplicativeExpression -> ! ☊(MultiplicativeExpression)
    this -> ! ☊(AdditiveExpression)
  }
} ---> N(~invalid~)
AdditiveExpression[1,0].IsFunctionDefinition:[☊(AdditiveExpression), ☊(AdditiveExpression), ☊(MultiplicativeExpression)]: {
  env: {
    AdditiveExpression -> ! ☊(AdditiveExpression)
    MultiplicativeExpression -> ! ☊(MultiplicativeExpression)
    this -> ! ☊(AdditiveExpression)
  }
} ---> N(false)
AdditiveExpression[2,0].AssignmentTargetType:[☊(AdditiveExpression), ☊(AdditiveExpression), ☊(MultiplicativeExpression)]: {
  env: {
    AdditiveExpression -> ! ☊(AdditiveExpression)
    MultiplicativeExpression -> ! ☊(MultiplicativeExpression)
    this -> ! ☊(AdditiveExpression)
  }
} ---> N(~invalid~)
AdditiveExpression[2,0].IsFunctionDefinition:[☊(AdditiveExpression), ☊(AdditiveExpression), ☊(MultiplicativeExpression)]: {
  env: {
    AdditiveExpression -> ! ☊(AdditiveExpression)
    MultiplicativeExpression -> ! ☊(MultiplicativeExpression)
    this -> ! ☊(AdditiveExpression)
  }
} ---> N(false)
ArrayBindingPattern[0,2].BoundNames:[☊(ArrayBindingPattern), ?]: {
  env: {
    Elision -> ! ?
    this -> ! ☊(ArrayBindingPattern)
  }
} ---> N(#0:139) @ {
  #0:139 -> []
}
ArrayBindingPattern[0,2].BoundNames:[☊(ArrayBindingPattern), ☊(Elision)]: {
  env: {
    Elision -> ! ☊(Elision)
    this -> ! ☊(ArrayBindingPattern)
  }
} ---> N(#0:139) @ {
  #0:139 -> []
}
ArrayBindingPattern[0,2].ContainsExpression:[☊(ArrayBindingPattern), ?]: {
  env: {
    Elision -> ! ?
    this -> ! ☊(ArrayBindingPattern)
  }
} ---> N(false)
ArrayBindingPattern[0,2].ContainsExpression:[☊(ArrayBindingPattern), ☊(Elision)]: {
  env: {
    Elision -> ! ☊(Elision)
    this -> ! ☊(ArrayBindingPattern)
  }
} ---> N(false)
ArrayBindingPattern[0,3].BoundNames:[☊(ArrayBindingPattern), ?, ☊(BindingRestElement)]: {
  env: {
    BindingRestElement -> ! ☊(BindingRestElement)
    Elision -> ! ?
    this -> ! ☊(ArrayBindingPattern)
  }
} ---> N((#0:127 | #0:128 | #0:129 | #0:137 | #0:139)) @ {
  #0:127 -> [str | N(str)]
  #0:128 -> [str]
  #0:129 -> [str]
  #0:137 -> [str]
  #0:139 -> [str]
}
ArrayBindingPattern[0,3].BoundNames:[☊(ArrayBindingPattern), ☊(Elision), ☊(BindingRestElement)]: {
  env: {
    BindingRestElement -> ! ☊(BindingRestElement)
    Elision -> ! ☊(Elision)
    this -> ! ☊(ArrayBindingPattern)
  }
} ---> N((#0:127 | #0:128 | #0:129 | #0:137 | #0:139)) @ {
  #0:127 -> [str | N(str)]
  #0:128 -> [str]
  #0:129 -> [str]
  #0:137 -> [str]
  #0:139 -> [str]
}
ArrayBindingPattern[2,2].BoundNames:[☊(ArrayBindingPattern), ☊(BindingElementList), ?]: {
  env: {
    BindingElementList -> ! ☊(BindingElementList)
    Elision -> ! ?
    this -> ! ☊(ArrayBindingPattern)
  }
} ---> N((#0:127 | #0:128 | #0:129 | #0:137 | #0:139)) @ {
  #0:127 -> [str | N(str)]
  #0:128 -> [str]
  #0:129 -> [str]
  #0:137 -> [str]
  #0:139 -> [str]
}
ArrayBindingPattern[2,2].BoundNames:[☊(ArrayBindingPattern), ☊(BindingElementList), ☊(Elision)]: {
  env: {
    BindingElementList -> ! ☊(BindingElementList)
    Elision -> ! ☊(Elision)
    this -> ! ☊(ArrayBindingPattern)
  }
} ---> N((#0:127 | #0:128 | #0:129 | #0:137 | #0:139)) @ {
  #0:127 -> [str | N(str)]
  #0:128 -> [str]
  #0:129 -> [str]
  #0:137 -> [str]
  #0:139 -> [str]
}
ArrayBindingPattern[2,3].BoundNames:[☊(ArrayBindingPattern), ☊(BindingElementList), ?, ☊(BindingRestElement)]: {
  env: {
    BindingElementList -> ! ☊(BindingElementList)
    BindingRestElement -> ! ☊(BindingRestElement)
    Elision -> ! ?
    this -> ! ☊(ArrayBindingPattern)
  }
} ---> N((#0:127 | #0:128 | #0:129 | #0:137 | #0:139)) @ {
  #0:127 -> [str | N(str)]
  #0:128 -> [str]
  #0:129 -> [str]
  #0:137 -> [str]
  #0:139 -> [str]
}
ArrayBindingPattern[2,3].BoundNames:[☊(ArrayBindingPattern), ☊(BindingElementList), ☊(Elision), ☊(BindingRestElement)]: {
  env: {
    BindingElementList -> ! ☊(BindingElementList)
    BindingRestElement -> ! ☊(BindingRestElement)
    Elision -> ! ☊(Elision)
    this -> ! ☊(ArrayBindingPattern)
  }
} ---> N((#0:127 | #0:128 | #0:129 | #0:137 | #0:139)) @ {
  #0:127 -> [str | N(str)]
  #0:128 -> [str]
  #0:129 -> [str]
  #0:137 -> [str]
  #0:139 -> [str]
}
ArrowFunction[0,0].HasName:[☊(ArrowFunction), ☊(ArrowParameters), ☊(ConciseBody)]: {
  env: {
    ArrowParameters -> ! ☊(ArrowParameters)
    ConciseBody -> ! ☊(ConciseBody)
    this -> ! ☊(ArrowFunction)
  }
} ---> N(false)
ArrowParameters[0,0].ContainsExpression:[☊(ArrowParameters), ☊(BindingIdentifier)]: {
  env: {
    BindingIdentifier -> ! ☊(BindingIdentifier)
    this -> ! ☊(ArrowParameters)
  }
} ---> N(false)
ArrowParameters[0,0].CoveredFormalsList:[☊(ArrowParameters), ☊(BindingIdentifier)]: {
  env: {
    BindingIdentifier -> ! ☊(BindingIdentifier)
    this -> ! ☊(ArrowParameters)
  }
} ---> N(☊(ArrowParameters))
ArrowParameters[0,0].IsSimpleParameterList:[☊(ArrowParameters), ☊(BindingIdentifier)]: {
  env: {
    BindingIdentifier -> ! ☊(BindingIdentifier)
    this -> ! ☊(ArrowParameters)
  }
} ---> N(true)
ArrowParameters[1,0].BoundNames:[☊(ArrowParameters), ☊(CoverParenthesizedExpressionAndArrowParameterList)]: {
  env: {
    CoverParenthesizedExpressionAndArrowParameterList -> ! ☊(CoverParenthesizedExpressionAndArrowParameterList)
    this -> ! ☊(ArrowParameters)
  }
} ---> N((#0:127 | #0:128 | #0:129 | #0:137 | #0:139 | #0:152)) @ {
  #0:127 -> [str | N(str)]
  #0:128 -> [str]
  #0:129 -> [str]
  #0:137 -> [str]
  #0:139 -> [str]
  #0:152 -> []
}
ArrowParameters[1,0].IsSimpleParameterList:[☊(ArrowParameters), ☊(CoverParenthesizedExpressionAndArrowParameterList)]: {
  env: {
    CoverParenthesizedExpressionAndArrowParameterList -> ! ☊(CoverParenthesizedExpressionAndArrowParameterList)
    this -> ! ☊(ArrowParameters)
  }
} ---> N(bool)
AssignmentExpression[1,0].AssignmentTargetType:[☊(AssignmentExpression), ☊(YieldExpression)]: {
  env: {
    YieldExpression -> ! ☊(YieldExpression)
    this -> ! ☊(AssignmentExpression)
  }
} ---> N(~invalid~)
AssignmentExpression[1,0].IsFunctionDefinition:[☊(AssignmentExpression), ☊(YieldExpression)]: {
  env: {
    YieldExpression -> ! ☊(YieldExpression)
    this -> ! ☊(AssignmentExpression)
  }
} ---> N(false)
AssignmentExpression[2,0].AssignmentTargetType:[☊(AssignmentExpression), ☊(ArrowFunction)]: {
  env: {
    ArrowFunction -> ! ☊(ArrowFunction)
    this -> ! ☊(AssignmentExpression)
  }
} ---> N(~invalid~)
AssignmentExpression[2,0].IsFunctionDefinition:[☊(AssignmentExpression), ☊(ArrowFunction)]: {
  env: {
    ArrowFunction -> ! ☊(ArrowFunction)
    this -> ! ☊(AssignmentExpression)
  }
} ---> N(true)
AssignmentExpression[3,0].AssignmentTargetType:[☊(AssignmentExpression), ☊(AsyncArrowFunction)]: {
  env: {
    AsyncArrowFunction -> ! ☊(AsyncArrowFunction)
    this -> ! ☊(AssignmentExpression)
  }
} ---> N(~invalid~)
AssignmentExpression[3,0].IsFunctionDefinition:[☊(AssignmentExpression), ☊(AsyncArrowFunction)]: {
  env: {
    AsyncArrowFunction -> ! ☊(AsyncArrowFunction)
    this -> ! ☊(AssignmentExpression)
  }
} ---> N(true)
AssignmentExpression[4,0].AssignmentTargetType:[☊(AssignmentExpression), ☊(LeftHandSideExpression), ☊(AssignmentExpression)]: {
  env: {
    AssignmentExpression -> ! ☊(AssignmentExpression)
    LeftHandSideExpression -> ! ☊(LeftHandSideExpression)
    this -> ! ☊(AssignmentExpression)
  }
} ---> N(~invalid~)
AssignmentExpression[4,0].IsFunctionDefinition:[☊(AssignmentExpression), ☊(LeftHandSideExpression), ☊(AssignmentExpression)]: {
  env: {
    AssignmentExpression -> ! ☊(AssignmentExpression)
    LeftHandSideExpression -> ! ☊(LeftHandSideExpression)
    this -> ! ☊(AssignmentExpression)
  }
} ---> N(false)
AssignmentExpression[5,0].AssignmentTargetType:[☊(AssignmentExpression), ☊(LeftHandSideExpression), ☊(AssignmentOperator), ☊(AssignmentExpression)]: {
  env: {
    AssignmentExpression -> ! ☊(AssignmentExpression)
    AssignmentOperator -> ! ☊(AssignmentOperator)
    LeftHandSideExpression -> ! ☊(LeftHandSideExpression)
    this -> ! ☊(AssignmentExpression)
  }
} ---> N(~invalid~)
AssignmentExpression[5,0].IsFunctionDefinition:[☊(AssignmentExpression), ☊(LeftHandSideExpression), ☊(AssignmentOperator), ☊(AssignmentExpression)]: {
  env: {
    AssignmentExpression -> ! ☊(AssignmentExpression)
    AssignmentOperator -> ! ☊(AssignmentOperator)
    LeftHandSideExpression -> ! ☊(LeftHandSideExpression)
    this -> ! ☊(AssignmentExpression)
  }
} ---> N(false)
AssignmentExpression[6,0].AssignmentTargetType:[☊(AssignmentExpression), ☊(LeftHandSideExpression), ☊(AssignmentExpression)]: {
  env: {
    AssignmentExpression -> ! ☊(AssignmentExpression)
    LeftHandSideExpression -> ! ☊(LeftHandSideExpression)
    this -> ! ☊(AssignmentExpression)
  }
} ---> N(~invalid~)
AssignmentExpression[6,0].IsFunctionDefinition:[☊(AssignmentExpression), ☊(LeftHandSideExpression), ☊(AssignmentExpression)]: {
  env: {
    AssignmentExpression -> ! ☊(AssignmentExpression)
    LeftHandSideExpression -> ! ☊(LeftHandSideExpression)
    this -> ! ☊(AssignmentExpression)
  }
} ---> N(false)
AssignmentExpression[7,0].AssignmentTargetType:[☊(AssignmentExpression), ☊(LeftHandSideExpression), ☊(AssignmentExpression)]: {
  env: {
    AssignmentExpression -> ! ☊(AssignmentExpression)
    LeftHandSideExpression -> ! ☊(LeftHandSideExpression)
    this -> ! ☊(AssignmentExpression)
  }
} ---> N(~invalid~)
AssignmentExpression[7,0].IsFunctionDefinition:[☊(AssignmentExpression), ☊(LeftHandSideExpression), ☊(AssignmentExpression)]: {
  env: {
    AssignmentExpression -> ! ☊(AssignmentExpression)
    LeftHandSideExpression -> ! ☊(LeftHandSideExpression)
    this -> ! ☊(AssignmentExpression)
  }
} ---> N(false)
AssignmentExpression[8,0].AssignmentTargetType:[☊(AssignmentExpression), ☊(LeftHandSideExpression), ☊(AssignmentExpression)]: {
  env: {
    AssignmentExpression -> ! ☊(AssignmentExpression)
    LeftHandSideExpression -> ! ☊(LeftHandSideExpression)
    this -> ! ☊(AssignmentExpression)
  }
} ---> N(~invalid~)
AssignmentExpression[8,0].IsFunctionDefinition:[☊(AssignmentExpression), ☊(LeftHandSideExpression), ☊(AssignmentExpression)]: {
  env: {
    AssignmentExpression -> ! ☊(AssignmentExpression)
    LeftHandSideExpression -> ! ☊(LeftHandSideExpression)
    this -> ! ☊(AssignmentExpression)
  }
} ---> N(false)
AsyncArrowBindingIdentifier[0,0].ContainsExpression:[☊(AsyncArrowBindingIdentifier), ☊(BindingIdentifier)]: {
  env: {
    BindingIdentifier -> ! ☊(BindingIdentifier)
    this -> ! ☊(AsyncArrowBindingIdentifier)
  }
} ---> N(false)
AsyncArrowBindingIdentifier[0,0].IsSimpleParameterList:[☊(AsyncArrowBindingIdentifier), ☊(BindingIdentifier)]: {
  env: {
    BindingIdentifier -> ! ☊(BindingIdentifier)
    this -> ! ☊(AsyncArrowBindingIdentifier)
  }
} ---> N(true)
AsyncArrowFunction[0,0].HasName:[☊(AsyncArrowFunction), ☊(AsyncArrowBindingIdentifier), ☊(AsyncConciseBody)]: {
  env: {
    AsyncArrowBindingIdentifier -> ! ☊(AsyncArrowBindingIdentifier)
    AsyncConciseBody -> ! ☊(AsyncConciseBody)
    this -> ! ☊(AsyncArrowFunction)
  }
} ---> N(false)
AsyncArrowFunction[1,0].HasName:[☊(AsyncArrowFunction), ☊(CoverCallExpressionAndAsyncArrowHead), ☊(AsyncConciseBody)]: {
  env: {
    AsyncConciseBody -> ! ☊(AsyncConciseBody)
    CoverCallExpressionAndAsyncArrowHead -> ! ☊(CoverCallExpressionAndAsyncArrowHead)
    this -> ! ☊(AsyncArrowFunction)
  }
} ---> N(false)
AsyncConciseBody[0,0].AsyncConciseBodyContainsUseStrict:[☊(AsyncConciseBody), ☊(ExpressionBody)]: {
  env: {
    ExpressionBody -> ! ☊(ExpressionBody)
    this -> ! ☊(AsyncConciseBody)
  }
} ---> N(false)
AsyncFunctionDeclaration[0,0].BoundNames:[☊(AsyncFunctionDeclaration), ☊(BindingIdentifier), ☊(FormalParameters), ☊(AsyncFunctionBody)]: {
  env: {
    AsyncFunctionBody -> ! ☊(AsyncFunctionBody)
    BindingIdentifier -> ! ☊(BindingIdentifier)
    FormalParameters -> ! ☊(FormalParameters)
    this -> ! ☊(AsyncFunctionDeclaration)
  }
} ---> N((#0:127 | #0:128 | #0:129)) @ {
  #0:127 -> [N(str)]
  #0:128 -> ["yield"]
  #0:129 -> ["await"]
}
AsyncFunctionDeclaration[0,0].IsConstantDeclaration:[☊(AsyncFunctionDeclaration), ☊(BindingIdentifier), ☊(FormalParameters), ☊(AsyncFunctionBody)]: {
  env: {
    AsyncFunctionBody -> ! ☊(AsyncFunctionBody)
    BindingIdentifier -> ! ☊(BindingIdentifier)
    FormalParameters -> ! ☊(FormalParameters)
    this -> ! ☊(AsyncFunctionDeclaration)
  }
} ---> N(false)
AsyncFunctionDeclaration[1,0].BoundNames:[☊(AsyncFunctionDeclaration), ☊(FormalParameters), ☊(AsyncFunctionBody)]: {
  env: {
    AsyncFunctionBody -> ! ☊(AsyncFunctionBody)
    FormalParameters -> ! ☊(FormalParameters)
    this -> ! ☊(AsyncFunctionDeclaration)
  }
} ---> N(#0:163) @ {
  #0:163 -> ["*default*"]
}
AsyncFunctionDeclaration[1,0].IsConstantDeclaration:[☊(AsyncFunctionDeclaration), ☊(FormalParameters), ☊(AsyncFunctionBody)]: {
  env: {
    AsyncFunctionBody -> ! ☊(AsyncFunctionBody)
    FormalParameters -> ! ☊(FormalParameters)
    this -> ! ☊(AsyncFunctionDeclaration)
  }
} ---> N(false)
AsyncFunctionExpression[0,0].HasName:[☊(AsyncFunctionExpression), ☊(FormalParameters), ☊(AsyncFunctionBody)]: {
  env: {
    AsyncFunctionBody -> ! ☊(AsyncFunctionBody)
    FormalParameters -> ! ☊(FormalParameters)
    this -> ! ☊(AsyncFunctionExpression)
  }
} ---> N(false)
AsyncFunctionExpression[0,1].HasName:[☊(AsyncFunctionExpression), ☊(BindingIdentifier), ☊(FormalParameters), ☊(AsyncFunctionBody)]: {
  env: {
    AsyncFunctionBody -> ! ☊(AsyncFunctionBody)
    BindingIdentifier -> ! ☊(BindingIdentifier)
    FormalParameters -> ! ☊(FormalParameters)
    this -> ! ☊(AsyncFunctionExpression)
  }
} ---> N(true)
AsyncFunctionExpression[0,1].IsFunctionDefinition:[☊(AsyncFunctionExpression), ?, ☊(FormalParameters), ☊(AsyncFunctionBody)]: {
  env: {
    AsyncFunctionBody -> ! ☊(AsyncFunctionBody)
    BindingIdentifier -> ! ?
    FormalParameters -> ! ☊(FormalParameters)
    this -> ! ☊(AsyncFunctionExpression)
  }
} ---> N(true)
AsyncFunctionExpression[0,1].IsFunctionDefinition:[☊(AsyncFunctionExpression), ☊(BindingIdentifier), ☊(FormalParameters), ☊(AsyncFunctionBody)]: {
  env: {
    AsyncFunctionBody -> ! ☊(AsyncFunctionBody)
    BindingIdentifier -> ! ☊(BindingIdentifier)
    FormalParameters -> ! ☊(FormalParameters)
    this -> ! ☊(AsyncFunctionExpression)
  }
} ---> N(true)
AsyncGeneratorDeclaration[0,0].BoundNames:[☊(AsyncGeneratorDeclaration), ☊(BindingIdentifier), ☊(FormalParameters), ☊(AsyncGeneratorBody)]: {
  env: {
    AsyncGeneratorBody -> ! ☊(AsyncGeneratorBody)
    BindingIdentifier -> ! ☊(BindingIdentifier)
    FormalParameters -> ! ☊(FormalParameters)
    this -> ! ☊(AsyncGeneratorDeclaration)
  }
} ---> N((#0:127 | #0:128 | #0:129)) @ {
  #0:127 -> [N(str)]
  #0:128 -> ["yield"]
  #0:129 -> ["await"]
}
AsyncGeneratorDeclaration[0,0].IsConstantDeclaration:[☊(AsyncGeneratorDeclaration), ☊(BindingIdentifier), ☊(FormalParameters), ☊(AsyncGeneratorBody)]: {
  env: {
    AsyncGeneratorBody -> ! ☊(AsyncGeneratorBody)
    BindingIdentifier -> ! ☊(BindingIdentifier)
    FormalParameters -> ! ☊(FormalParameters)
    this -> ! ☊(AsyncGeneratorDeclaration)
  }
} ---> N(false)
AsyncGeneratorDeclaration[1,0].BoundNames:[☊(AsyncGeneratorDeclaration), ☊(FormalParameters), ☊(AsyncGeneratorBody)]: {
  env: {
    AsyncGeneratorBody -> ! ☊(AsyncGeneratorBody)
    FormalParameters -> ! ☊(FormalParameters)
    this -> ! ☊(AsyncGeneratorDeclaration)
  }
} ---> N(#0:159) @ {
  #0:159 -> ["*default*"]
}
AsyncGeneratorDeclaration[1,0].IsConstantDeclaration:[☊(AsyncGeneratorDeclaration), ☊(FormalParameters), ☊(AsyncGeneratorBody)]: {
  env: {
    AsyncGeneratorBody -> ! ☊(AsyncGeneratorBody)
    FormalParameters -> ! ☊(FormalParameters)
    this -> ! ☊(AsyncGeneratorDeclaration)
  }
} ---> N(false)
AsyncGeneratorExpression[0,0].HasName:[☊(AsyncGeneratorExpression), ☊(FormalParameters), ☊(AsyncGeneratorBody)]: {
  env: {
    AsyncGeneratorBody -> ! ☊(AsyncGeneratorBody)
    FormalParameters -> ! ☊(FormalParameters)
    this -> ! ☊(AsyncGeneratorExpression)
  }
} ---> N(false)
AsyncGeneratorExpression[0,1].HasName:[☊(AsyncGeneratorExpression), ☊(BindingIdentifier), ☊(FormalParameters), ☊(AsyncGeneratorBody)]: {
  env: {
    AsyncGeneratorBody -> ! ☊(AsyncGeneratorBody)
    BindingIdentifier -> ! ☊(BindingIdentifier)
    FormalParameters -> ! ☊(FormalParameters)
    this -> ! ☊(AsyncGeneratorExpression)
  }
} ---> N(true)
AsyncGeneratorExpression[0,1].IsFunctionDefinition:[☊(AsyncGeneratorExpression), ?, ☊(FormalParameters), ☊(AsyncGeneratorBody)]: {
  env: {
    AsyncGeneratorBody -> ! ☊(AsyncGeneratorBody)
    BindingIdentifier -> ! ?
    FormalParameters -> ! ☊(FormalParameters)
    this -> ! ☊(AsyncGeneratorExpression)
  }
} ---> N(true)
AsyncGeneratorExpression[0,1].IsFunctionDefinition:[☊(AsyncGeneratorExpression), ☊(BindingIdentifier), ☊(FormalParameters), ☊(AsyncGeneratorBody)]: {
  env: {
    AsyncGeneratorBody -> ! ☊(AsyncGeneratorBody)
    BindingIdentifier -> ! ☊(BindingIdentifier)
    FormalParameters -> ! ☊(FormalParameters)
    this -> ! ☊(AsyncGeneratorExpression)
  }
} ---> N(true)
AsyncGeneratorMethod[0,0].PropName:[☊(AsyncGeneratorMethod), ☊(PropertyName), ☊(UniqueFormalParameters), ☊(AsyncGeneratorBody)]: {
  env: {
    AsyncGeneratorBody -> ! ☊(AsyncGeneratorBody)
    PropertyName -> ! ☊(PropertyName)
    UniqueFormalParameters -> ! ☊(UniqueFormalParameters)
    this -> ! ☊(AsyncGeneratorMethod)
  }
} ---> N(~empty~ | str)
AsyncMethod[0,0].PropName:[☊(AsyncMethod), ☊(PropertyName), ☊(UniqueFormalParameters), ☊(AsyncFunctionBody)]: {
  env: {
    AsyncFunctionBody -> ! ☊(AsyncFunctionBody)
    PropertyName -> ! ☊(PropertyName)
    UniqueFormalParameters -> ! ☊(UniqueFormalParameters)
    this -> ! ☊(AsyncMethod)
  }
} ---> N(~empty~ | str)
BindingElementList[1,0].BoundNames:[☊(BindingElementList), ☊(BindingElementList), ☊(BindingElisionElement)]: {
  env: {
    BindingElementList -> ! ☊(BindingElementList)
    BindingElisionElement -> ! ☊(BindingElisionElement)
    this -> ! ☊(BindingElementList)
  }
} ---> N((#0:127 | #0:128 | #0:129 | #0:137 | #0:139)) @ {
  #0:127 -> [str | N(str)]
  #0:128 -> [str]
  #0:129 -> [str]
  #0:137 -> [str]
  #0:139 -> [str]
}
BindingElement[1,0].HasInitializer:[☊(BindingElement), ☊(BindingPattern)]: {
  env: {
    BindingPattern -> ! ☊(BindingPattern)
    this -> ! ☊(BindingElement)
  }
} ---> N(false)
BindingElement[1,0].IsSimpleParameterList:[☊(BindingElement), ☊(BindingPattern)]: {
  env: {
    BindingPattern -> ! ☊(BindingPattern)
    this -> ! ☊(BindingElement)
  }
} ---> N(false)
BindingElement[1,1].BoundNames:[☊(BindingElement), ☊(BindingPattern), ?]: {
  env: {
    BindingPattern -> ! ☊(BindingPattern)
    Initializer -> ! ?
    this -> ! ☊(BindingElement)
  }
} ---> N((#0:127 | #0:128 | #0:129 | #0:137 | #0:139)) @ {
  #0:127 -> [str | N(str)]
  #0:128 -> [str]
  #0:129 -> [str]
  #0:137 -> [str]
  #0:139 -> [str]
}
BindingElement[1,1].BoundNames:[☊(BindingElement), ☊(BindingPattern), ☊(Initializer)]: {
  env: {
    BindingPattern -> ! ☊(BindingPattern)
    Initializer -> ! ☊(Initializer)
    this -> ! ☊(BindingElement)
  }
} ---> N((#0:127 | #0:128 | #0:129 | #0:137 | #0:139)) @ {
  #0:127 -> [str | N(str)]
  #0:128 -> [str]
  #0:129 -> [str]
  #0:137 -> [str]
  #0:139 -> [str]
}
BindingElement[1,1].ContainsExpression:[☊(BindingElement), ☊(BindingPattern), ☊(Initializer)]: {
  env: {
    BindingPattern -> ! ☊(BindingPattern)
    Initializer -> ! ☊(Initializer)
    this -> ! ☊(BindingElement)
  }
} ---> N(true)
BindingElement[1,1].HasInitializer:[☊(BindingElement), ☊(BindingPattern), ☊(Initializer)]: {
  env: {
    BindingPattern -> ! ☊(BindingPattern)
    Initializer -> ! ☊(Initializer)
    this -> ! ☊(BindingElement)
  }
} ---> N(true)
BindingElement[1,1].IsSimpleParameterList:[☊(BindingElement), ☊(BindingPattern), ☊(Initializer)]: {
  env: {
    BindingPattern -> ! ☊(BindingPattern)
    Initializer -> ! ☊(Initializer)
    this -> ! ☊(BindingElement)
  }
} ---> N(false)
BindingElisionElement[0,1].BoundNames:[☊(BindingElisionElement), ?, ☊(BindingElement)]: {
  env: {
    BindingElement -> ! ☊(BindingElement)
    Elision -> ! ?
    this -> ! ☊(BindingElisionElement)
  }
} ---> N((#0:127 | #0:128 | #0:129 | #0:137 | #0:139)) @ {
  #0:127 -> [str | N(str)]
  #0:128 -> [str]
  #0:129 -> [str]
  #0:137 -> [str]
  #0:139 -> [str]
}
BindingElisionElement[0,1].BoundNames:[☊(BindingElisionElement), ☊(Elision), ☊(BindingElement)]: {
  env: {
    BindingElement -> ! ☊(BindingElement)
    Elision -> ! ☊(Elision)
    this -> ! ☊(BindingElisionElement)
  }
} ---> N((#0:127 | #0:128 | #0:129 | #0:137 | #0:139)) @ {
  #0:127 -> [str | N(str)]
  #0:128 -> [str]
  #0:129 -> [str]
  #0:137 -> [str]
  #0:139 -> [str]
}
BindingIdentifier[0,0].BoundNames:[☊(BindingIdentifier), ☊(Identifier)]: {
  env: {
    Identifier -> ! ☊(Identifier)
    this -> ! ☊(BindingIdentifier)
  }
} ---> N(#0:127) @ {
  #0:127 -> [N(str)]
}
BindingIdentifier[1,0].BoundNames:[☊(BindingIdentifier)]: {
  env: {
    this -> ! ☊(BindingIdentifier)
  }
} ---> N(#0:128) @ {
  #0:128 -> ["yield"]
}
BindingIdentifier[1,0].StringValue:[☊(BindingIdentifier)]: {
  env: {
    this -> ! ☊(BindingIdentifier)
  }
} ---> N("yield")
BindingIdentifier[2,0].BoundNames:[☊(BindingIdentifier)]: {
  env: {
    this -> ! ☊(BindingIdentifier)
  }
} ---> N(#0:129) @ {
  #0:129 -> ["await"]
}
BindingIdentifier[2,0].StringValue:[☊(BindingIdentifier)]: {
  env: {
    this -> ! ☊(BindingIdentifier)
  }
} ---> N("await")
BindingList[1,0].BoundNames:[☊(BindingList), ☊(BindingList), ☊(LexicalBinding)]: {
  env: {
    BindingList -> ! ☊(BindingList)
    LexicalBinding -> ! ☊(LexicalBinding)
    this -> ! ☊(BindingList)
  }
} ---> N((#0:127 | #0:128 | #0:129 | #0:137 | #0:139)) @ {
  #0:127 -> [str | N(str)]
  #0:128 -> [str]
  #0:129 -> [str]
  #0:137 -> [str]
  #0:139 -> [str]
}
BindingPropertyList[1,0].BoundNames:[☊(BindingPropertyList), ☊(BindingPropertyList), ☊(BindingProperty)]: {
  env: {
    BindingProperty -> ! ☊(BindingProperty)
    BindingPropertyList -> ! ☊(BindingPropertyList)
    this -> ! ☊(BindingPropertyList)
  }
} ---> N((#0:127 | #0:128 | #0:129 | #0:137 | #0:139)) @ {
  #0:127 -> [str | N(str)]
  #0:128 -> [str]
  #0:129 -> [str]
  #0:137 -> [str]
  #0:139 -> [str]
}
BindingProperty[1,0].BoundNames:[☊(BindingProperty), ☊(PropertyName), ☊(BindingElement)]: {
  env: {
    BindingElement -> ! ☊(BindingElement)
    PropertyName -> ! ☊(PropertyName)
    this -> ! ☊(BindingProperty)
  }
} ---> N((#0:127 | #0:128 | #0:129 | #0:137 | #0:139)) @ {
  #0:127 -> [str | N(str)]
  #0:128 -> [str]
  #0:129 -> [str]
  #0:137 -> [str]
  #0:139 -> [str]
}
BindingRestElement[0,0].ContainsExpression:[☊(BindingRestElement), ☊(BindingIdentifier)]: {
  env: {
    BindingIdentifier -> ! ☊(BindingIdentifier)
    this -> ! ☊(BindingRestElement)
  }
} ---> N(false)
BitwiseANDExpression[1,0].AssignmentTargetType:[☊(BitwiseANDExpression), ☊(BitwiseANDExpression), ☊(EqualityExpression)]: {
  env: {
    BitwiseANDExpression -> ! ☊(BitwiseANDExpression)
    EqualityExpression -> ! ☊(EqualityExpression)
    this -> ! ☊(BitwiseANDExpression)
  }
} ---> N(~invalid~)
BitwiseANDExpression[1,0].IsFunctionDefinition:[☊(BitwiseANDExpression), ☊(BitwiseANDExpression), ☊(EqualityExpression)]: {
  env: {
    BitwiseANDExpression -> ! ☊(BitwiseANDExpression)
    EqualityExpression -> ! ☊(EqualityExpression)
    this -> ! ☊(BitwiseANDExpression)
  }
} ---> N(false)
BitwiseORExpression[1,0].AssignmentTargetType:[☊(BitwiseORExpression), ☊(BitwiseORExpression), ☊(BitwiseXORExpression)]: {
  env: {
    BitwiseORExpression -> ! ☊(BitwiseORExpression)
    BitwiseXORExpression -> ! ☊(BitwiseXORExpression)
    this -> ! ☊(BitwiseORExpression)
  }
} ---> N(~invalid~)
BitwiseORExpression[1,0].IsFunctionDefinition:[☊(BitwiseORExpression), ☊(BitwiseORExpression), ☊(BitwiseXORExpression)]: {
  env: {
    BitwiseORExpression -> ! ☊(BitwiseORExpression)
    BitwiseXORExpression -> ! ☊(BitwiseXORExpression)
    this -> ! ☊(BitwiseORExpression)
  }
} ---> N(false)
BitwiseXORExpression[1,0].AssignmentTargetType:[☊(BitwiseXORExpression), ☊(BitwiseXORExpression), ☊(BitwiseANDExpression)]: {
  env: {
    BitwiseANDExpression -> ! ☊(BitwiseANDExpression)
    BitwiseXORExpression -> ! ☊(BitwiseXORExpression)
    this -> ! ☊(BitwiseXORExpression)
  }
} ---> N(~invalid~)
BitwiseXORExpression[1,0].IsFunctionDefinition:[☊(BitwiseXORExpression), ☊(BitwiseXORExpression), ☊(BitwiseANDExpression)]: {
  env: {
    BitwiseANDExpression -> ! ☊(BitwiseANDExpression)
    BitwiseXORExpression -> ! ☊(BitwiseXORExpression)
    this -> ! ☊(BitwiseXORExpression)
  }
} ---> N(false)
CallExpression[0,0].AssignmentTargetType:[☊(CallExpression), ☊(CoverCallExpressionAndAsyncArrowHead)]: {
  env: {
    CoverCallExpressionAndAsyncArrowHead -> ! ☊(CoverCallExpressionAndAsyncArrowHead)
    this -> ! ☊(CallExpression)
  }
} ---> N(~invalid~)
CallExpression[1,0].AssignmentTargetType:[☊(CallExpression), ☊(SuperCall)]: {
  env: {
    SuperCall -> ! ☊(SuperCall)
    this -> ! ☊(CallExpression)
  }
} ---> N(~invalid~)
CallExpression[2,0].AssignmentTargetType:[☊(CallExpression), ☊(ImportCall)]: {
  env: {
    ImportCall -> ! ☊(ImportCall)
    this -> ! ☊(CallExpression)
  }
} ---> N(~invalid~)
CallExpression[3,0].AssignmentTargetType:[☊(CallExpression), ☊(CallExpression), ☊(Arguments)]: {
  env: {
    Arguments -> ! ☊(Arguments)
    CallExpression -> ! ☊(CallExpression)
    this -> ! ☊(CallExpression)
  }
} ---> N(~invalid~)
CallExpression[4,0].AssignmentTargetType:[☊(CallExpression), ☊(CallExpression), ☊(Expression)]: {
  env: {
    CallExpression -> ! ☊(CallExpression)
    Expression -> ! ☊(Expression)
    this -> ! ☊(CallExpression)
  }
} ---> N(~simple~)
CallExpression[5,0].AssignmentTargetType:[☊(CallExpression), ☊(CallExpression), ☊(IdentifierName)]: {
  env: {
    CallExpression -> ! ☊(CallExpression)
    IdentifierName -> ! ☊(IdentifierName)
    this -> ! ☊(CallExpression)
  }
} ---> N(~simple~)
CallExpression[6,0].AssignmentTargetType:[☊(CallExpression), ☊(CallExpression), ☊(TemplateLiteral)]: {
  env: {
    CallExpression -> ! ☊(CallExpression)
    TemplateLiteral -> ! ☊(TemplateLiteral)
    this -> ! ☊(CallExpression)
  }
} ---> N(~invalid~)
ClassAtomNoDash[0,0].IsCharacterClass:[☊(ClassAtomNoDash), ☊(SourceCharacter)]: {
  env: {
    SourceCharacter -> ! ☊(SourceCharacter)
    this -> ! ☊(ClassAtomNoDash)
  }
} ---> N(false)
ClassAtom[0,0].IsCharacterClass:[☊(ClassAtom)]: {
  env: {
    this -> ! ☊(ClassAtom)
  }
} ---> N(false)
ClassDeclaration[0,0].BoundNames:[☊(ClassDeclaration), ☊(BindingIdentifier), ☊(ClassTail)]: {
  env: {
    BindingIdentifier -> ! ☊(BindingIdentifier)
    ClassTail -> ! ☊(ClassTail)
    this -> ! ☊(ClassDeclaration)
  }
} ---> N((#0:127 | #0:128 | #0:129)) @ {
  #0:127 -> [N(str)]
  #0:128 -> ["yield"]
  #0:129 -> ["await"]
}
ClassDeclaration[0,0].IsConstantDeclaration:[☊(ClassDeclaration), ☊(BindingIdentifier), ☊(ClassTail)]: {
  env: {
    BindingIdentifier -> ! ☊(BindingIdentifier)
    ClassTail -> ! ☊(ClassTail)
    this -> ! ☊(ClassDeclaration)
  }
} ---> N(false)
ClassDeclaration[1,0].BoundNames:[☊(ClassDeclaration), ☊(ClassTail)]: {
  env: {
    ClassTail -> ! ☊(ClassTail)
    this -> ! ☊(ClassDeclaration)
  }
} ---> N(#0:161) @ {
  #0:161 -> ["*default*"]
}
ClassDeclaration[1,0].IsConstantDeclaration:[☊(ClassDeclaration), ☊(ClassTail)]: {
  env: {
    ClassTail -> ! ☊(ClassTail)
    this -> ! ☊(ClassDeclaration)
  }
} ---> N(false)
ClassElement[0,0].IsStatic:[☊(ClassElement), ☊(MethodDefinition)]: {
  env: {
    MethodDefinition -> ! ☊(MethodDefinition)
    this -> ! ☊(ClassElement)
  }
} ---> N(false)
ClassElement[1,0].IsStatic:[☊(ClassElement), ☊(MethodDefinition)]: {
  env: {
    MethodDefinition -> ! ☊(MethodDefinition)
    this -> ! ☊(ClassElement)
  }
} ---> N(true)
ClassElement[2,0].IsStatic:[☊(ClassElement)]: {
  env: {
    this -> ! ☊(ClassElement)
  }
} ---> N(false)
ClassElement[2,0].PropName:[☊(ClassElement)]: {
  env: {
    this -> ! ☊(ClassElement)
  }
} ---> N(~empty~)
ClassEscape[0,0].IsCharacterClass:[☊(ClassEscape)]: {
  env: {
    this -> ! ☊(ClassEscape)
  }
} ---> N(false)
ClassEscape[1,0].IsCharacterClass:[☊(ClassEscape)]: {
  env: {
    this -> ! ☊(ClassEscape)
  }
} ---> N(false)
ClassEscape[2,0].IsCharacterClass:[☊(ClassEscape), ☊(CharacterClassEscape)]: {
  env: {
    CharacterClassEscape -> ! ☊(CharacterClassEscape)
    this -> ! ☊(ClassEscape)
  }
} ---> N(true)
ClassEscape[3,0].IsCharacterClass:[☊(ClassEscape), ☊(CharacterEscape)]: {
  env: {
    CharacterEscape -> ! ☊(CharacterEscape)
    this -> ! ☊(ClassEscape)
  }
} ---> N(false)
ClassExpression[0,0].HasName:[☊(ClassExpression), ☊(ClassTail)]: {
  env: {
    ClassTail -> ! ☊(ClassTail)
    this -> ! ☊(ClassExpression)
  }
} ---> N(false)
ClassExpression[0,1].HasName:[☊(ClassExpression), ☊(BindingIdentifier), ☊(ClassTail)]: {
  env: {
    BindingIdentifier -> ! ☊(BindingIdentifier)
    ClassTail -> ! ☊(ClassTail)
    this -> ! ☊(ClassExpression)
  }
} ---> N(true)
ClassExpression[0,1].IsFunctionDefinition:[☊(ClassExpression), ?, ☊(ClassTail)]: {
  env: {
    BindingIdentifier -> ! ?
    ClassTail -> ! ☊(ClassTail)
    this -> ! ☊(ClassExpression)
  }
} ---> N(true)
ClassExpression[0,1].IsFunctionDefinition:[☊(ClassExpression), ☊(BindingIdentifier), ☊(ClassTail)]: {
  env: {
    BindingIdentifier -> ! ☊(BindingIdentifier)
    ClassTail -> ! ☊(ClassTail)
    this -> ! ☊(ClassExpression)
  }
} ---> N(true)
CoalesceExpression[0,0].AssignmentTargetType:[☊(CoalesceExpression), ☊(CoalesceExpressionHead), ☊(BitwiseORExpression)]: {
  env: {
    BitwiseORExpression -> ! ☊(BitwiseORExpression)
    CoalesceExpressionHead -> ! ☊(CoalesceExpressionHead)
    this -> ! ☊(CoalesceExpression)
  }
} ---> N(~invalid~)
CoalesceExpression[0,0].IsFunctionDefinition:[☊(CoalesceExpression), ☊(CoalesceExpressionHead), ☊(BitwiseORExpression)]: {
  env: {
    BitwiseORExpression -> ! ☊(BitwiseORExpression)
    CoalesceExpressionHead -> ! ☊(CoalesceExpressionHead)
    this -> ! ☊(CoalesceExpression)
  }
} ---> N(false)
CodePointsToString:[str]: {
  env: {
    x -> ! str
  }
} ---> N(str)
ComputedPropertyName[0,0].PropName:[☊(ComputedPropertyName), ☊(AssignmentExpression)]: {
  env: {
    AssignmentExpression -> ! ☊(AssignmentExpression)
    this -> ! ☊(ComputedPropertyName)
  }
} ---> N(~empty~)
ConciseBody[0,0].ConciseBodyContainsUseStrict:[☊(ConciseBody), ☊(ExpressionBody)]: {
  env: {
    ExpressionBody -> ! ☊(ExpressionBody)
    this -> ! ☊(ConciseBody)
  }
} ---> N(false)
ConditionalExpression[1,0].AssignmentTargetType:[☊(ConditionalExpression), ☊(ShortCircuitExpression), ☊(AssignmentExpression), ☊(AssignmentExpression)]: {
  env: {
    AssignmentExpression0 -> ! ☊(AssignmentExpression)
    AssignmentExpression1 -> ! ☊(AssignmentExpression)
    ShortCircuitExpression -> ! ☊(ShortCircuitExpression)
    this -> ! ☊(ConditionalExpression)
  }
} ---> N(~invalid~)
ConditionalExpression[1,0].IsFunctionDefinition:[☊(ConditionalExpression), ☊(ShortCircuitExpression), ☊(AssignmentExpression), ☊(AssignmentExpression)]: {
  env: {
    AssignmentExpression0 -> ! ☊(AssignmentExpression)
    AssignmentExpression1 -> ! ☊(AssignmentExpression)
    ShortCircuitExpression -> ! ☊(ShortCircuitExpression)
    this -> ! ☊(ConditionalExpression)
  }
} ---> N(false)
CoverCallExpressionAndAsyncArrowHead[0,0].BoundNames:[☊(CoverCallExpressionAndAsyncArrowHead), ☊(MemberExpression), ☊(Arguments)]: {
  env: {
    Arguments -> ! ☊(Arguments)
    MemberExpression -> ! ☊(MemberExpression)
    this -> ! ☊(CoverCallExpressionAndAsyncArrowHead)
  }
} ---> N((#0:127 | #0:128 | #0:129 | #0:137 | #0:139 | #0:152)) @ {
  #0:127 -> [str | N(str)]
  #0:128 -> [str]
  #0:129 -> [str]
  #0:137 -> [str]
  #0:139 -> [str]
  #0:152 -> []
}
CoverCallExpressionAndAsyncArrowHead[0,0].CoveredAsyncArrowHead:[☊(CoverCallExpressionAndAsyncArrowHead), ☊(MemberExpression), ☊(Arguments)]: {
  env: {
    Arguments -> ! ☊(Arguments)
    MemberExpression -> ! ☊(MemberExpression)
    this -> ! ☊(CoverCallExpressionAndAsyncArrowHead)
  }
} ---> N(☊(AsyncArrowHead))
CoverCallExpressionAndAsyncArrowHead[0,0].IsSimpleParameterList:[☊(CoverCallExpressionAndAsyncArrowHead), ☊(MemberExpression), ☊(Arguments)]: {
  env: {
    Arguments -> ! ☊(Arguments)
    MemberExpression -> ! ☊(MemberExpression)
    this -> ! ☊(CoverCallExpressionAndAsyncArrowHead)
  }
} ---> N(bool)
CoverParenthesizedExpressionAndArrowParameterList[0,0].CoveredFormalsList:[☊(CoverParenthesizedExpressionAndArrowParameterList), ☊(Expression)]: {
  env: {
    Expression -> ! ☊(Expression)
    this -> ! ☊(CoverParenthesizedExpressionAndArrowParameterList)
  }
} ---> N(☊(ArrowFormalParameters))
CoverParenthesizedExpressionAndArrowParameterList[0,0].CoveredParenthesizedExpression:[☊(CoverParenthesizedExpressionAndArrowParameterList), ☊(Expression)]: {
  env: {
    Expression -> ! ☊(Expression)
    this -> ! ☊(CoverParenthesizedExpressionAndArrowParameterList)
  }
} ---> N(☊(ParenthesizedExpression))
CoverParenthesizedExpressionAndArrowParameterList[1,0].CoveredFormalsList:[☊(CoverParenthesizedExpressionAndArrowParameterList), ☊(Expression)]: {
  env: {
    Expression -> ! ☊(Expression)
    this -> ! ☊(CoverParenthesizedExpressionAndArrowParameterList)
  }
} ---> N(☊(ArrowFormalParameters))
CoverParenthesizedExpressionAndArrowParameterList[2,0].CoveredFormalsList:[☊(CoverParenthesizedExpressionAndArrowParameterList)]: {
  env: {
    this -> ! ☊(CoverParenthesizedExpressionAndArrowParameterList)
  }
} ---> N(☊(ArrowFormalParameters))
CoverParenthesizedExpressionAndArrowParameterList[3,0].CoveredFormalsList:[☊(CoverParenthesizedExpressionAndArrowParameterList), ☊(BindingIdentifier)]: {
  env: {
    BindingIdentifier -> ! ☊(BindingIdentifier)
    this -> ! ☊(CoverParenthesizedExpressionAndArrowParameterList)
  }
} ---> N(☊(ArrowFormalParameters))
CoverParenthesizedExpressionAndArrowParameterList[4,0].CoveredFormalsList:[☊(CoverParenthesizedExpressionAndArrowParameterList), ☊(BindingPattern)]: {
  env: {
    BindingPattern -> ! ☊(BindingPattern)
    this -> ! ☊(CoverParenthesizedExpressionAndArrowParameterList)
  }
} ---> N(☊(ArrowFormalParameters))
CoverParenthesizedExpressionAndArrowParameterList[5,0].CoveredFormalsList:[☊(CoverParenthesizedExpressionAndArrowParameterList), ☊(Expression), ☊(BindingIdentifier)]: {
  env: {
    BindingIdentifier -> ! ☊(BindingIdentifier)
    Expression -> ! ☊(Expression)
    this -> ! ☊(CoverParenthesizedExpressionAndArrowParameterList)
  }
} ---> N(☊(ArrowFormalParameters))
CoverParenthesizedExpressionAndArrowParameterList[6,0].CoveredFormalsList:[☊(CoverParenthesizedExpressionAndArrowParameterList), ☊(Expression), ☊(BindingPattern)]: {
  env: {
    BindingPattern -> ! ☊(BindingPattern)
    Expression -> ! ☊(Expression)
    this -> ! ☊(CoverParenthesizedExpressionAndArrowParameterList)
  }
} ---> N(☊(ArrowFormalParameters))
Declaration[1,0].DeclarationPart:[☊(Declaration), ☊(ClassDeclaration)]: {
  env: {
    ClassDeclaration -> ! ☊(ClassDeclaration)
    this -> ! ☊(Declaration)
  }
} ---> N(☊(ClassDeclaration))
Declaration[2,0].DeclarationPart:[☊(Declaration), ☊(LexicalDeclaration)]: {
  env: {
    LexicalDeclaration -> ! ☊(LexicalDeclaration)
    this -> ! ☊(Declaration)
  }
} ---> N(☊(LexicalDeclaration))
DeclarativeEnvironmentRecord.HasThisBinding:[EnvironmentRecord]: {
  env: {
    envRec -> ! EnvironmentRecord
  }
} ---> N(false)
EqualityExpression[1,0].AssignmentTargetType:[☊(EqualityExpression), ☊(EqualityExpression), ☊(RelationalExpression)]: {
  env: {
    EqualityExpression -> ! ☊(EqualityExpression)
    RelationalExpression -> ! ☊(RelationalExpression)
    this -> ! ☊(EqualityExpression)
  }
} ---> N(~invalid~)
EqualityExpression[1,0].IsFunctionDefinition:[☊(EqualityExpression), ☊(EqualityExpression), ☊(RelationalExpression)]: {
  env: {
    EqualityExpression -> ! ☊(EqualityExpression)
    RelationalExpression -> ! ☊(RelationalExpression)
    this -> ! ☊(EqualityExpression)
  }
} ---> N(false)
EqualityExpression[2,0].AssignmentTargetType:[☊(EqualityExpression), ☊(EqualityExpression), ☊(RelationalExpression)]: {
  env: {
    EqualityExpression -> ! ☊(EqualityExpression)
    RelationalExpression -> ! ☊(RelationalExpression)
    this -> ! ☊(EqualityExpression)
  }
} ---> N(~invalid~)
EqualityExpression[2,0].IsFunctionDefinition:[☊(EqualityExpression), ☊(EqualityExpression), ☊(RelationalExpression)]: {
  env: {
    EqualityExpression -> ! ☊(EqualityExpression)
    RelationalExpression -> ! ☊(RelationalExpression)
    this -> ! ☊(EqualityExpression)
  }
} ---> N(false)
EqualityExpression[3,0].AssignmentTargetType:[☊(EqualityExpression), ☊(EqualityExpression), ☊(RelationalExpression)]: {
  env: {
    EqualityExpression -> ! ☊(EqualityExpression)
    RelationalExpression -> ! ☊(RelationalExpression)
    this -> ! ☊(EqualityExpression)
  }
} ---> N(~invalid~)
EqualityExpression[3,0].IsFunctionDefinition:[☊(EqualityExpression), ☊(EqualityExpression), ☊(RelationalExpression)]: {
  env: {
    EqualityExpression -> ! ☊(EqualityExpression)
    RelationalExpression -> ! ☊(RelationalExpression)
    this -> ! ☊(EqualityExpression)
  }
} ---> N(false)
EqualityExpression[4,0].AssignmentTargetType:[☊(EqualityExpression), ☊(EqualityExpression), ☊(RelationalExpression)]: {
  env: {
    EqualityExpression -> ! ☊(EqualityExpression)
    RelationalExpression -> ! ☊(RelationalExpression)
    this -> ! ☊(EqualityExpression)
  }
} ---> N(~invalid~)
EqualityExpression[4,0].IsFunctionDefinition:[☊(EqualityExpression), ☊(EqualityExpression), ☊(RelationalExpression)]: {
  env: {
    EqualityExpression -> ! ☊(EqualityExpression)
    RelationalExpression -> ! ☊(RelationalExpression)
    this -> ! ☊(EqualityExpression)
  }
} ---> N(false)
ExponentiationExpression[1,0].AssignmentTargetType:[☊(ExponentiationExpression), ☊(UpdateExpression), ☊(ExponentiationExpression)]: {
  env: {
    ExponentiationExpression -> ! ☊(ExponentiationExpression)
    UpdateExpression -> ! ☊(UpdateExpression)
    this -> ! ☊(ExponentiationExpression)
  }
} ---> N(~invalid~)
ExponentiationExpression[1,0].IsFunctionDefinition:[☊(ExponentiationExpression), ☊(UpdateExpression), ☊(ExponentiationExpression)]: {
  env: {
    ExponentiationExpression -> ! ☊(ExponentiationExpression)
    UpdateExpression -> ! ☊(UpdateExpression)
    this -> ! ☊(ExponentiationExpression)
  }
} ---> N(false)
ExportDeclaration[0,0].BoundNames:[☊(ExportDeclaration), ☊(ExportFromClause), ☊(FromClause)]: {
  env: {
    ExportFromClause -> ! ☊(ExportFromClause)
    FromClause -> ! ☊(FromClause)
    this -> ! ☊(ExportDeclaration)
  }
} ---> N(#0:172) @ {
  #0:172 -> []
}
ExportDeclaration[0,0].ExportEntries:[☊(ExportDeclaration), ☊(ExportFromClause), ☊(FromClause)]: {
  env: {
    ExportFromClause -> ! ☊(ExportFromClause)
    FromClause -> ! ☊(FromClause)
    this -> ! ☊(ExportDeclaration)
  }
} ---> N((#0:1547 | #0:1549 | #0:1550 | #1:1545 | #1:1546)) @ {
  #0:1545 -> ExportEntryRecord {
    ExportName -> ! null
    ImportName -> ! "*"
    LocalName -> ! null
    ModuleRequest -> ! str
  }
  #0:1546 -> ExportEntryRecord {
    ExportName -> ! str
    ImportName -> ! "*"
    LocalName -> ! null
    ModuleRequest -> ! str
  }
  #0:1547 -> []
  #0:1549 -> [(#1:1549 | #1:1550)]
  #0:1550 -> [(#1:1549 | #1:1550)]
  #1:1545 -> [#0:1545]
  #1:1546 -> [#0:1546]
  #1:1549 -> ExportEntryRecord {
    ExportName -> ! str
    ImportName -> ! str
    LocalName -> ! null
    ModuleRequest -> ! str
  }
  #1:1550 -> ExportEntryRecord {
    ExportName -> ! str
    ImportName -> ! str
    LocalName -> ! null
    ModuleRequest -> ! str
  }
}
ExportDeclaration[0,0].ExportedBindings:[☊(ExportDeclaration), ☊(ExportFromClause), ☊(FromClause)]: {
  env: {
    ExportFromClause -> ! ☊(ExportFromClause)
    FromClause -> ! ☊(FromClause)
    this -> ! ☊(ExportDeclaration)
  }
} ---> N(#0:1506) @ {
  #0:1506 -> []
}
ExportDeclaration[0,0].ExportedNames:[☊(ExportDeclaration), ☊(ExportFromClause), ☊(FromClause)]: {
  env: {
    ExportFromClause -> ! ☊(ExportFromClause)
    FromClause -> ! ☊(FromClause)
    this -> ! ☊(ExportDeclaration)
  }
} ---> N((#0:1522 | #0:1523 | #0:1530 | #0:1532 | #0:1533)) @ {
  #0:1522 -> []
  #0:1523 -> [str]
  #0:1530 -> []
  #0:1532 -> [str]
  #0:1533 -> [str]
}
ExportDeclaration[0,0].IsConstantDeclaration:[☊(ExportDeclaration), ☊(ExportFromClause), ☊(FromClause)]: {
  env: {
    ExportFromClause -> ! ☊(ExportFromClause)
    FromClause -> ! ☊(FromClause)
    this -> ! ☊(ExportDeclaration)
  }
} ---> N(false)
ExportDeclaration[0,0].ModuleRequests:[☊(ExportDeclaration), ☊(ExportFromClause), ☊(FromClause)]: {
  env: {
    ExportFromClause -> ! ☊(ExportFromClause)
    FromClause -> ! ☊(FromClause)
    this -> ! ☊(ExportDeclaration)
  }
} ---> N(#0:1466) @ {
  #0:1466 -> [str]
}
ExportDeclaration[1,0].BoundNames:[☊(ExportDeclaration), ☊(NamedExports)]: {
  env: {
    NamedExports -> ! ☊(NamedExports)
    this -> ! ☊(ExportDeclaration)
  }
} ---> N(#0:173) @ {
  #0:173 -> []
}
ExportDeclaration[1,0].ExportEntries:[☊(ExportDeclaration), ☊(NamedExports)]: {
  env: {
    NamedExports -> ! ☊(NamedExports)
    this -> ! ☊(ExportDeclaration)
  }
} ---> N((#0:1547 | #0:1549 | #0:1550)) @ {
  #0:1547 -> []
  #0:1549 -> [(#1:1549 | #1:1550)]
  #0:1550 -> [(#1:1549 | #1:1550)]
  #1:1549 -> ExportEntryRecord {
    ExportName -> ! str
    ImportName -> ! null
    LocalName -> ! str
    ModuleRequest -> ! null
  }
  #1:1550 -> ExportEntryRecord {
    ExportName -> ! str
    ImportName -> ! null
    LocalName -> ! str
    ModuleRequest -> ! null
  }
}
ExportDeclaration[1,0].ExportedBindings:[☊(ExportDeclaration), ☊(NamedExports)]: {
  env: {
    NamedExports -> ! ☊(NamedExports)
    this -> ! ☊(ExportDeclaration)
  }
} ---> N((#0:1513 | #0:1515 | #0:1516)) @ {
  #0:1513 -> []
  #0:1515 -> [str]
  #0:1516 -> [str]
}
ExportDeclaration[1,0].IsConstantDeclaration:[☊(ExportDeclaration), ☊(NamedExports)]: {
  env: {
    NamedExports -> ! ☊(NamedExports)
    this -> ! ☊(ExportDeclaration)
  }
} ---> N(false)
ExportDeclaration[1,0].ModuleRequests:[☊(ExportDeclaration), ☊(NamedExports)]: {
  env: {
    NamedExports -> ! ☊(NamedExports)
    this -> ! ☊(ExportDeclaration)
  }
} ---> N(#0:1468) @ {
  #0:1468 -> []
}
ExportDeclaration[2,0].BoundNames:[☊(ExportDeclaration), ☊(VariableStatement)]: {
  env: {
    VariableStatement -> ! ☊(VariableStatement)
    this -> ! ☊(ExportDeclaration)
  }
} ---> N((#0:127 | #0:128 | #0:129 | #0:137 | #0:139)) @ {
  #0:127 -> [str | N(str)]
  #0:128 -> [str]
  #0:129 -> [str]
  #0:137 -> [str]
  #0:139 -> [str]
}
ExportDeclaration[2,0].ExportEntries:[☊(ExportDeclaration), ☊(VariableStatement)]: {
  env: {
    VariableStatement -> ! ☊(VariableStatement)
    this -> ! ☊(ExportDeclaration)
  }
} ---> N(#0:1540) @ {
  #0:1540 -> [#1:1540]
  #1:1540 -> ExportEntryRecord {
    ExportName -> ! str | N(str)
    ImportName -> ! null
    LocalName -> ! str | N(str)
    ModuleRequest -> ! null
  }
}
ExportDeclaration[2,0].ExportedBindings:[☊(ExportDeclaration), ☊(VariableStatement)]: {
  env: {
    VariableStatement -> ! ☊(VariableStatement)
    this -> ! ☊(ExportDeclaration)
  }
} ---> N((#0:127 | #0:128 | #0:129 | #0:137 | #0:139)) @ {
  #0:127 -> [str | N(str)]
  #0:128 -> [str]
  #0:129 -> [str]
  #0:137 -> [str]
  #0:139 -> [str]
}
ExportDeclaration[2,0].ExportedNames:[☊(ExportDeclaration), ☊(VariableStatement)]: {
  env: {
    VariableStatement -> ! ☊(VariableStatement)
    this -> ! ☊(ExportDeclaration)
  }
} ---> N((#0:127 | #0:128 | #0:129 | #0:137 | #0:139)) @ {
  #0:127 -> [str | N(str)]
  #0:128 -> [str]
  #0:129 -> [str]
  #0:137 -> [str]
  #0:139 -> [str]
}
ExportDeclaration[2,0].ModuleRequests:[☊(ExportDeclaration), ☊(VariableStatement)]: {
  env: {
    VariableStatement -> ! ☊(VariableStatement)
    this -> ! ☊(ExportDeclaration)
  }
} ---> N(#0:1469) @ {
  #0:1469 -> []
}
ExportDeclaration[3,0].BoundNames:[☊(ExportDeclaration), ☊(Declaration)]: {
  env: {
    Declaration -> ! ☊(Declaration)
    this -> ! ☊(ExportDeclaration)
  }
} ---> N((#0:127 | #0:128 | #0:129 | #0:137 | #0:139 | #0:151 | #0:157 | #0:159 | #0:161 | #0:163)) @ {
  #0:127 -> [str | N(str)]
  #0:128 -> [str]
  #0:129 -> [str]
  #0:137 -> [str]
  #0:139 -> [str]
  #0:151 -> ["*default*"]
  #0:157 -> ["*default*"]
  #0:159 -> ["*default*"]
  #0:161 -> ["*default*"]
  #0:163 -> ["*default*"]
}
ExportDeclaration[3,0].ExportEntries:[☊(ExportDeclaration), ☊(Declaration)]: {
  env: {
    Declaration -> ! ☊(Declaration)
    this -> ! ☊(ExportDeclaration)
  }
} ---> N(#0:1541) @ {
  #0:1541 -> [#1:1541]
  #1:1541 -> ExportEntryRecord {
    ExportName -> ! str | N(str)
    ImportName -> ! null
    LocalName -> ! str | N(str)
    ModuleRequest -> ! null
  }
}
ExportDeclaration[3,0].ExportedBindings:[☊(ExportDeclaration), ☊(Declaration)]: {
  env: {
    Declaration -> ! ☊(Declaration)
    this -> ! ☊(ExportDeclaration)
  }
} ---> N((#0:127 | #0:128 | #0:129 | #0:137 | #0:139 | #0:151 | #0:157 | #0:159 | #0:161 | #0:163)) @ {
  #0:127 -> [str | N(str)]
  #0:128 -> [str]
  #0:129 -> [str]
  #0:137 -> [str]
  #0:139 -> [str]
  #0:151 -> ["*default*"]
  #0:157 -> ["*default*"]
  #0:159 -> ["*default*"]
  #0:161 -> ["*default*"]
  #0:163 -> ["*default*"]
}
ExportDeclaration[3,0].ExportedNames:[☊(ExportDeclaration), ☊(Declaration)]: {
  env: {
    Declaration -> ! ☊(Declaration)
    this -> ! ☊(ExportDeclaration)
  }
} ---> N((#0:127 | #0:128 | #0:129 | #0:137 | #0:139 | #0:151 | #0:157 | #0:159 | #0:161 | #0:163)) @ {
  #0:127 -> [str | N(str)]
  #0:128 -> [str]
  #0:129 -> [str]
  #0:137 -> [str]
  #0:139 -> [str]
  #0:151 -> ["*default*"]
  #0:157 -> ["*default*"]
  #0:159 -> ["*default*"]
  #0:161 -> ["*default*"]
  #0:163 -> ["*default*"]
}
ExportDeclaration[3,0].ModuleRequests:[☊(ExportDeclaration), ☊(Declaration)]: {
  env: {
    Declaration -> ! ☊(Declaration)
    this -> ! ☊(ExportDeclaration)
  }
} ---> N(#0:1470) @ {
  #0:1470 -> []
}
ExportDeclaration[4,0].BoundNames:[☊(ExportDeclaration), ☊(HoistableDeclaration)]: {
  env: {
    HoistableDeclaration -> ! ☊(HoistableDeclaration)
    this -> ! ☊(ExportDeclaration)
  }
} ---> N((#0:127 | #0:128 | #0:129 | #0:151 | #0:157 | #0:159 | #0:163)) @ {
  #0:127 -> ["*default*" | N(str)]
  #0:128 -> [str]
  #0:129 -> [str]
  #0:151 -> ["*default*"]
  #0:157 -> ["*default*"]
  #0:159 -> ["*default*"]
  #0:163 -> ["*default*"]
}
ExportDeclaration[4,0].ExportEntries:[☊(ExportDeclaration), ☊(HoistableDeclaration)]: {
  env: {
    HoistableDeclaration -> ! ☊(HoistableDeclaration)
    this -> ! ☊(ExportDeclaration)
  }
} ---> N(#0:1542) @ {
  #0:1542 -> [#1:1542]
  #1:1542 -> ExportEntryRecord {
    ExportName -> ! "default"
    ImportName -> ! null
    LocalName -> ! str | N(str)
    ModuleRequest -> ! null
  }
}
ExportDeclaration[4,0].ExportedBindings:[☊(ExportDeclaration), ☊(HoistableDeclaration)]: {
  env: {
    HoistableDeclaration -> ! ☊(HoistableDeclaration)
    this -> ! ☊(ExportDeclaration)
  }
} ---> N((#0:127 | #0:128 | #0:129 | #0:137 | #0:139 | #0:151 | #0:157 | #0:159 | #0:161 | #0:163 | #0:172 | #0:173 | #0:178)) @ {
  #0:127 -> [str | N(str)]
  #0:128 -> [str]
  #0:129 -> [str]
  #0:137 -> [str]
  #0:139 -> [str]
  #0:151 -> ["*default*"]
  #0:157 -> ["*default*"]
  #0:159 -> ["*default*"]
  #0:161 -> ["*default*"]
  #0:163 -> ["*default*"]
  #0:172 -> []
  #0:173 -> []
  #0:178 -> ["*default*"]
}
ExportDeclaration[4,0].ExportedNames:[☊(ExportDeclaration), ☊(HoistableDeclaration)]: {
  env: {
    HoistableDeclaration -> ! ☊(HoistableDeclaration)
    this -> ! ☊(ExportDeclaration)
  }
} ---> N(#0:1527) @ {
  #0:1527 -> ["default"]
}
ExportDeclaration[4,0].ModuleRequests:[☊(ExportDeclaration), ☊(HoistableDeclaration)]: {
  env: {
    HoistableDeclaration -> ! ☊(HoistableDeclaration)
    this -> ! ☊(ExportDeclaration)
  }
} ---> N(#0:1471) @ {
  #0:1471 -> []
}
ExportDeclaration[5,0].BoundNames:[☊(ExportDeclaration), ☊(ClassDeclaration)]: {
  env: {
    ClassDeclaration -> ! ☊(ClassDeclaration)
    this -> ! ☊(ExportDeclaration)
  }
} ---> N((#0:127 | #0:128 | #0:129 | #0:161)) @ {
  #0:127 -> ["*default*" | N(str)]
  #0:128 -> [str]
  #0:129 -> [str]
  #0:161 -> ["*default*"]
}
ExportDeclaration[5,0].ExportEntries:[☊(ExportDeclaration), ☊(ClassDeclaration)]: {
  env: {
    ClassDeclaration -> ! ☊(ClassDeclaration)
    this -> ! ☊(ExportDeclaration)
  }
} ---> N(#0:1543) @ {
  #0:1543 -> [#1:1543]
  #1:1543 -> ExportEntryRecord {
    ExportName -> ! "default"
    ImportName -> ! null
    LocalName -> ! str | N(str)
    ModuleRequest -> ! null
  }
}
ExportDeclaration[5,0].ExportedBindings:[☊(ExportDeclaration), ☊(ClassDeclaration)]: {
  env: {
    ClassDeclaration -> ! ☊(ClassDeclaration)
    this -> ! ☊(ExportDeclaration)
  }
} ---> N((#0:127 | #0:128 | #0:129 | #0:137 | #0:139 | #0:151 | #0:157 | #0:159 | #0:161 | #0:163 | #0:172 | #0:173 | #0:178)) @ {
  #0:127 -> [str | N(str)]
  #0:128 -> [str]
  #0:129 -> [str]
  #0:137 -> [str]
  #0:139 -> [str]
  #0:151 -> ["*default*"]
  #0:157 -> ["*default*"]
  #0:159 -> ["*default*"]
  #0:161 -> ["*default*"]
  #0:163 -> ["*default*"]
  #0:172 -> []
  #0:173 -> []
  #0:178 -> ["*default*"]
}
ExportDeclaration[5,0].ExportedNames:[☊(ExportDeclaration), ☊(ClassDeclaration)]: {
  env: {
    ClassDeclaration -> ! ☊(ClassDeclaration)
    this -> ! ☊(ExportDeclaration)
  }
} ---> N(#0:1528) @ {
  #0:1528 -> ["default"]
}
ExportDeclaration[5,0].ModuleRequests:[☊(ExportDeclaration), ☊(ClassDeclaration)]: {
  env: {
    ClassDeclaration -> ! ☊(ClassDeclaration)
    this -> ! ☊(ExportDeclaration)
  }
} ---> N(#0:1472) @ {
  #0:1472 -> []
}
ExportDeclaration[6,0].BoundNames:[☊(ExportDeclaration), ☊(AssignmentExpression)]: {
  env: {
    AssignmentExpression -> ! ☊(AssignmentExpression)
    this -> ! ☊(ExportDeclaration)
  }
} ---> N(#0:178) @ {
  #0:178 -> ["*default*"]
}
ExportDeclaration[6,0].ExportEntries:[☊(ExportDeclaration), ☊(AssignmentExpression)]: {
  env: {
    AssignmentExpression -> ! ☊(AssignmentExpression)
    this -> ! ☊(ExportDeclaration)
  }
} ---> N(#1:1544) @ {
  #0:1544 -> ExportEntryRecord {
    ExportName -> ! "default"
    ImportName -> ! null
    LocalName -> ! "*default*"
    ModuleRequest -> ! null
  }
  #1:1544 -> [#0:1544]
}
ExportDeclaration[6,0].ExportedBindings:[☊(ExportDeclaration), ☊(AssignmentExpression)]: {
  env: {
    AssignmentExpression -> ! ☊(AssignmentExpression)
    this -> ! ☊(ExportDeclaration)
  }
} ---> N((#0:127 | #0:128 | #0:129 | #0:137 | #0:139 | #0:151 | #0:157 | #0:159 | #0:161 | #0:163 | #0:172 | #0:173 | #0:178)) @ {
  #0:127 -> [str | N(str)]
  #0:128 -> [str]
  #0:129 -> [str]
  #0:137 -> [str]
  #0:139 -> [str]
  #0:151 -> ["*default*"]
  #0:157 -> ["*default*"]
  #0:159 -> ["*default*"]
  #0:161 -> ["*default*"]
  #0:163 -> ["*default*"]
  #0:172 -> []
  #0:173 -> []
  #0:178 -> ["*default*"]
}
ExportDeclaration[6,0].ExportedNames:[☊(ExportDeclaration), ☊(AssignmentExpression)]: {
  env: {
    AssignmentExpression -> ! ☊(AssignmentExpression)
    this -> ! ☊(ExportDeclaration)
  }
} ---> N(#0:1529) @ {
  #0:1529 -> ["default"]
}
ExportDeclaration[6,0].IsConstantDeclaration:[☊(ExportDeclaration), ☊(AssignmentExpression)]: {
  env: {
    AssignmentExpression -> ! ☊(AssignmentExpression)
    this -> ! ☊(ExportDeclaration)
  }
} ---> N(false)
ExportDeclaration[6,0].ModuleRequests:[☊(ExportDeclaration), ☊(AssignmentExpression)]: {
  env: {
    AssignmentExpression -> ! ☊(AssignmentExpression)
    this -> ! ☊(ExportDeclaration)
  }
} ---> N(#0:1473) @ {
  #0:1473 -> []
}
ExportFromClause[0,0].ExportEntriesForModule:[☊(ExportFromClause), str]: {
  env: {
    module -> ! str
    this -> ! ☊(ExportFromClause)
  }
} ---> N(#1:1545) @ {
  #0:1545 -> ExportEntryRecord {
    ExportName -> ! null
    ImportName -> ! "*"
    LocalName -> ! null
    ModuleRequest -> ! str
  }
  #1:1545 -> [#0:1545]
}
ExportFromClause[0,0].ExportedNames:[☊(ExportFromClause)]: {
  env: {
    this -> ! ☊(ExportFromClause)
  }
} ---> N(#0:1522) @ {
  #0:1522 -> []
}
ExportFromClause[1,0].ExportEntriesForModule:[☊(ExportFromClause), ☊(IdentifierName), str]: {
  env: {
    IdentifierName -> ! ☊(IdentifierName)
    module -> ! str
    this -> ! ☊(ExportFromClause)
  }
} ---> N(#1:1546) @ {
  #0:1546 -> ExportEntryRecord {
    ExportName -> ! str
    ImportName -> ! "*"
    LocalName -> ! null
    ModuleRequest -> ! str
  }
  #1:1546 -> [#0:1546]
}
ExportFromClause[1,0].ExportedNames:[☊(ExportFromClause), ☊(IdentifierName)]: {
  env: {
    IdentifierName -> ! ☊(IdentifierName)
    this -> ! ☊(ExportFromClause)
  }
} ---> N(#0:1523) @ {
  #0:1523 -> [str]
}
ExportFromClause[2,0].ExportedNames:[☊(ExportFromClause), ☊(NamedExports)]: {
  env: {
    NamedExports -> ! ☊(NamedExports)
    this -> ! ☊(ExportFromClause)
  }
} ---> N((#0:1530 | #0:1532 | #0:1533)) @ {
  #0:1530 -> []
  #0:1532 -> [str]
  #0:1533 -> [str]
}
ExportSpecifier[0,0].ExportEntriesForModule:[☊(ExportSpecifier), ☊(IdentifierName), null]: {
  env: {
    IdentifierName -> ! ☊(IdentifierName)
    module -> ! null
    this -> ! ☊(ExportSpecifier)
  }
} ---> N(#0:1549) @ {
  #0:1549 -> [#1:1549]
  #1:1549 -> ExportEntryRecord {
    ExportName -> ! str
    ImportName -> ! null
    LocalName -> ! str
    ModuleRequest -> ! null
  }
}
ExportSpecifier[0,0].ExportEntriesForModule:[☊(ExportSpecifier), ☊(IdentifierName), str]: {
  env: {
    IdentifierName -> ! ☊(IdentifierName)
    module -> ! str
    this -> ! ☊(ExportSpecifier)
  }
} ---> N(#0:1549) @ {
  #0:1549 -> [#1:1549]
  #1:1549 -> ExportEntryRecord {
    ExportName -> ! str
    ImportName -> ! str
    LocalName -> ! null
    ModuleRequest -> ! str
  }
}
ExportSpecifier[0,0].ExportedBindings:[☊(ExportSpecifier), ☊(IdentifierName)]: {
  env: {
    IdentifierName -> ! ☊(IdentifierName)
    this -> ! ☊(ExportSpecifier)
  }
} ---> N(#0:1515) @ {
  #0:1515 -> [str]
}
ExportSpecifier[0,0].ExportedNames:[☊(ExportSpecifier), ☊(IdentifierName)]: {
  env: {
    IdentifierName -> ! ☊(IdentifierName)
    this -> ! ☊(ExportSpecifier)
  }
} ---> N(#0:1532) @ {
  #0:1532 -> [str]
}
ExportSpecifier[1,0].ExportEntriesForModule:[☊(ExportSpecifier), ☊(IdentifierName), ☊(IdentifierName), null]: {
  env: {
    IdentifierName0 -> ! ☊(IdentifierName)
    IdentifierName1 -> ! ☊(IdentifierName)
    module -> ! null
    this -> ! ☊(ExportSpecifier)
  }
} ---> N(#0:1550) @ {
  #0:1550 -> [#1:1550]
  #1:1550 -> ExportEntryRecord {
    ExportName -> ! str
    ImportName -> ! null
    LocalName -> ! str
    ModuleRequest -> ! null
  }
}
ExportSpecifier[1,0].ExportEntriesForModule:[☊(ExportSpecifier), ☊(IdentifierName), ☊(IdentifierName), str]: {
  env: {
    IdentifierName0 -> ! ☊(IdentifierName)
    IdentifierName1 -> ! ☊(IdentifierName)
    module -> ! str
    this -> ! ☊(ExportSpecifier)
  }
} ---> N(#0:1550) @ {
  #0:1550 -> [#1:1550]
  #1:1550 -> ExportEntryRecord {
    ExportName -> ! str
    ImportName -> ! str
    LocalName -> ! null
    ModuleRequest -> ! str
  }
}
ExportSpecifier[1,0].ExportedBindings:[☊(ExportSpecifier), ☊(IdentifierName), ☊(IdentifierName)]: {
  env: {
    IdentifierName0 -> ! ☊(IdentifierName)
    IdentifierName1 -> ! ☊(IdentifierName)
    this -> ! ☊(ExportSpecifier)
  }
} ---> N(#0:1516) @ {
  #0:1516 -> [str]
}
ExportSpecifier[1,0].ExportedNames:[☊(ExportSpecifier), ☊(IdentifierName), ☊(IdentifierName)]: {
  env: {
    IdentifierName0 -> ! ☊(IdentifierName)
    IdentifierName1 -> ! ☊(IdentifierName)
    this -> ! ☊(ExportSpecifier)
  }
} ---> N(#0:1533) @ {
  #0:1533 -> [str]
}
ExportsList[1,0].ExportEntriesForModule:[☊(ExportsList), ☊(ExportsList), ☊(ExportSpecifier), null]: {
  env: {
    ExportSpecifier -> ! ☊(ExportSpecifier)
    ExportsList -> ! ☊(ExportsList)
    module -> ! null
    this -> ! ☊(ExportsList)
  }
} ---> N((#0:1549 | #0:1550)) @ {
  #0:1549 -> [(#1:1549 | #1:1550)]
  #0:1550 -> [(#1:1549 | #1:1550)]
  #1:1549 -> ExportEntryRecord {
    ExportName -> ! str
    ImportName -> ! null
    LocalName -> ! str
    ModuleRequest -> ! null
  }
  #1:1550 -> ExportEntryRecord {
    ExportName -> ! str
    ImportName -> ! null
    LocalName -> ! str
    ModuleRequest -> ! null
  }
}
ExportsList[1,0].ExportEntriesForModule:[☊(ExportsList), ☊(ExportsList), ☊(ExportSpecifier), str]: {
  env: {
    ExportSpecifier -> ! ☊(ExportSpecifier)
    ExportsList -> ! ☊(ExportsList)
    module -> ! str
    this -> ! ☊(ExportsList)
  }
} ---> N((#0:1549 | #0:1550)) @ {
  #0:1549 -> [(#1:1549 | #1:1550)]
  #0:1550 -> [(#1:1549 | #1:1550)]
  #1:1549 -> ExportEntryRecord {
    ExportName -> ! str
    ImportName -> ! str
    LocalName -> ! null
    ModuleRequest -> ! str
  }
  #1:1550 -> ExportEntryRecord {
    ExportName -> ! str
    ImportName -> ! str
    LocalName -> ! null
    ModuleRequest -> ! str
  }
}
ExportsList[1,0].ExportedBindings:[☊(ExportsList), ☊(ExportsList), ☊(ExportSpecifier)]: {
  env: {
    ExportSpecifier -> ! ☊(ExportSpecifier)
    ExportsList -> ! ☊(ExportsList)
    this -> ! ☊(ExportsList)
  }
} ---> N((#0:1515 | #0:1516)) @ {
  #0:1515 -> [str]
  #0:1516 -> [str]
}
ExportsList[1,0].ExportedNames:[☊(ExportsList), ☊(ExportsList), ☊(ExportSpecifier)]: {
  env: {
    ExportSpecifier -> ! ☊(ExportSpecifier)
    ExportsList -> ! ☊(ExportsList)
    this -> ! ☊(ExportsList)
  }
} ---> N((#0:1532 | #0:1533)) @ {
  #0:1532 -> [str]
  #0:1533 -> [str]
}
Expression[1,0].AssignmentTargetType:[☊(Expression), ☊(Expression), ☊(AssignmentExpression)]: {
  env: {
    AssignmentExpression -> ! ☊(AssignmentExpression)
    Expression -> ! ☊(Expression)
    this -> ! ☊(Expression)
  }
} ---> N(~invalid~)
Expression[1,0].IsFunctionDefinition:[☊(Expression), ☊(Expression), ☊(AssignmentExpression)]: {
  env: {
    AssignmentExpression -> ! ☊(AssignmentExpression)
    Expression -> ! ☊(Expression)
    this -> ! ☊(Expression)
  }
} ---> N(false)
ForBinding[0,0].IsDestructuring:[☊(ForBinding), ☊(BindingIdentifier)]: {
  env: {
    BindingIdentifier -> ! ☊(BindingIdentifier)
    this -> ! ☊(ForBinding)
  }
} ---> N(false)
ForBinding[1,0].IsDestructuring:[☊(ForBinding), ☊(BindingPattern)]: {
  env: {
    BindingPattern -> ! ☊(BindingPattern)
    this -> ! ☊(ForBinding)
  }
} ---> N(true)
ForDeclaration[0,0].BoundNames:[☊(ForDeclaration), ☊(LetOrConst), ☊(ForBinding)]: {
  env: {
    ForBinding -> ! ☊(ForBinding)
    LetOrConst -> ! ☊(LetOrConst)
    this -> ! ☊(ForDeclaration)
  }
} ---> N((#0:127 | #0:128 | #0:129 | #0:137 | #0:139)) @ {
  #0:127 -> [str | N(str)]
  #0:128 -> [str]
  #0:129 -> [str]
  #0:137 -> [str]
  #0:139 -> [str]
}
ForDeclaration[0,0].IsDestructuring:[☊(ForDeclaration), ☊(LetOrConst), ☊(ForBinding)]: {
  env: {
    ForBinding -> ! ☊(ForBinding)
    LetOrConst -> ! ☊(LetOrConst)
    this -> ! ☊(ForDeclaration)
  }
} ---> N(bool)
FormalParameterList[1,0].BoundNames:[☊(FormalParameterList), ☊(FormalParameterList), ☊(FormalParameter)]: {
  env: {
    FormalParameter -> ! ☊(FormalParameter)
    FormalParameterList -> ! ☊(FormalParameterList)
    this -> ! ☊(FormalParameterList)
  }
} ---> N((#0:127 | #0:128 | #0:129 | #0:137 | #0:139)) @ {
  #0:127 -> [str | N(str)]
  #0:128 -> [str]
  #0:129 -> [str]
  #0:137 -> [str]
  #0:139 -> [str]
}
FormalParameterList[1,0].IsSimpleParameterList:[☊(FormalParameterList), ☊(FormalParameterList), ☊(FormalParameter)]: {
  env: {
    FormalParameter -> ! ☊(FormalParameter)
    FormalParameterList -> ! ☊(FormalParameterList)
    this -> ! ☊(FormalParameterList)
  }
} ---> N(bool)
FormalParameter[0,0].IsSimpleParameterList:[☊(FormalParameter), ☊(BindingElement)]: {
  env: {
    BindingElement -> ! ☊(BindingElement)
    this -> ! ☊(FormalParameter)
  }
} ---> N(bool)
FormalParameters[0,0].BoundNames:[☊(FormalParameters)]: {
  env: {
    this -> ! ☊(FormalParameters)
  }
} ---> N(#0:152) @ {
  #0:152 -> []
}
FormalParameters[0,0].ContainsExpression:[☊(FormalParameters)]: {
  env: {
    this -> ! ☊(FormalParameters)
  }
} ---> N(false)
FormalParameters[0,0].IsSimpleParameterList:[☊(FormalParameters)]: {
  env: {
    this -> ! ☊(FormalParameters)
  }
} ---> N(true)
FormalParameters[1,0].IsSimpleParameterList:[☊(FormalParameters), ☊(FunctionRestParameter)]: {
  env: {
    FunctionRestParameter -> ! ☊(FunctionRestParameter)
    this -> ! ☊(FormalParameters)
  }
} ---> N(false)
FormalParameters[4,0].BoundNames:[☊(FormalParameters), ☊(FormalParameterList), ☊(FunctionRestParameter)]: {
  env: {
    FormalParameterList -> ! ☊(FormalParameterList)
    FunctionRestParameter -> ! ☊(FunctionRestParameter)
    this -> ! ☊(FormalParameters)
  }
} ---> N((#0:127 | #0:128 | #0:129 | #0:137 | #0:139)) @ {
  #0:127 -> [str | N(str)]
  #0:128 -> [str]
  #0:129 -> [str]
  #0:137 -> [str]
  #0:139 -> [str]
}
FormalParameters[4,0].IsSimpleParameterList:[☊(FormalParameters), ☊(FormalParameterList), ☊(FunctionRestParameter)]: {
  env: {
    FormalParameterList -> ! ☊(FormalParameterList)
    FunctionRestParameter -> ! ☊(FunctionRestParameter)
    this -> ! ☊(FormalParameters)
  }
} ---> N(false)
FunctionDeclaration[0,0].BoundNames:[☊(FunctionDeclaration), ☊(BindingIdentifier), ☊(FormalParameters), ☊(FunctionBody)]: {
  env: {
    BindingIdentifier -> ! ☊(BindingIdentifier)
    FormalParameters -> ! ☊(FormalParameters)
    FunctionBody -> ! ☊(FunctionBody)
    this -> ! ☊(FunctionDeclaration)
  }
} ---> N((#0:127 | #0:128 | #0:129)) @ {
  #0:127 -> [N(str)]
  #0:128 -> ["yield"]
  #0:129 -> ["await"]
}
FunctionDeclaration[0,0].IsConstantDeclaration:[☊(FunctionDeclaration), ☊(BindingIdentifier), ☊(FormalParameters), ☊(FunctionBody)]: {
  env: {
    BindingIdentifier -> ! ☊(BindingIdentifier)
    FormalParameters -> ! ☊(FormalParameters)
    FunctionBody -> ! ☊(FunctionBody)
    this -> ! ☊(FunctionDeclaration)
  }
} ---> N(false)
FunctionDeclaration[1,0].BoundNames:[☊(FunctionDeclaration), ☊(FormalParameters), ☊(FunctionBody)]: {
  env: {
    FormalParameters -> ! ☊(FormalParameters)
    FunctionBody -> ! ☊(FunctionBody)
    this -> ! ☊(FunctionDeclaration)
  }
} ---> N(#0:151) @ {
  #0:151 -> ["*default*"]
}
FunctionDeclaration[1,0].IsConstantDeclaration:[☊(FunctionDeclaration), ☊(FormalParameters), ☊(FunctionBody)]: {
  env: {
    FormalParameters -> ! ☊(FormalParameters)
    FunctionBody -> ! ☊(FunctionBody)
    this -> ! ☊(FunctionDeclaration)
  }
} ---> N(false)
FunctionEnvironmentRecord.GetThisBinding:[Normal(EnvironmentRecord)]: {
  env: {
    envRec -> ! N(EnvironmentRecord)
  }
} ---> N(Object | num | bigint | str | bool | undef | null) | T(#0:757) @ {
  #0:757 -> OrdinaryObject {
    ErrorData -> ! undef
    Prototype -> ! #%ReferenceError.prototype%
  }
}
FunctionEnvironmentRecord.HasThisBinding:[EnvironmentRecord]: {
  env: {
    envRec -> ! EnvironmentRecord
  }
} ---> N(bool)
FunctionExpression[0,0].HasName:[☊(FunctionExpression), ☊(FormalParameters), ☊(FunctionBody)]: {
  env: {
    FormalParameters -> ! ☊(FormalParameters)
    FunctionBody -> ! ☊(FunctionBody)
    this -> ! ☊(FunctionExpression)
  }
} ---> N(false)
FunctionExpression[0,1].HasName:[☊(FunctionExpression), ☊(BindingIdentifier), ☊(FormalParameters), ☊(FunctionBody)]: {
  env: {
    BindingIdentifier -> ! ☊(BindingIdentifier)
    FormalParameters -> ! ☊(FormalParameters)
    FunctionBody -> ! ☊(FunctionBody)
    this -> ! ☊(FunctionExpression)
  }
} ---> N(true)
FunctionExpression[0,1].IsFunctionDefinition:[☊(FunctionExpression), ?, ☊(FormalParameters), ☊(FunctionBody)]: {
  env: {
    BindingIdentifier -> ! ?
    FormalParameters -> ! ☊(FormalParameters)
    FunctionBody -> ! ☊(FunctionBody)
    this -> ! ☊(FunctionExpression)
  }
} ---> N(true)
FunctionExpression[0,1].IsFunctionDefinition:[☊(FunctionExpression), ☊(BindingIdentifier), ☊(FormalParameters), ☊(FunctionBody)]: {
  env: {
    BindingIdentifier -> ! ☊(BindingIdentifier)
    FormalParameters -> ! ☊(FormalParameters)
    FunctionBody -> ! ☊(FunctionBody)
    this -> ! ☊(FunctionExpression)
  }
} ---> N(true)
GeneratorDeclaration[0,0].BoundNames:[☊(GeneratorDeclaration), ☊(BindingIdentifier), ☊(FormalParameters), ☊(GeneratorBody)]: {
  env: {
    BindingIdentifier -> ! ☊(BindingIdentifier)
    FormalParameters -> ! ☊(FormalParameters)
    GeneratorBody -> ! ☊(GeneratorBody)
    this -> ! ☊(GeneratorDeclaration)
  }
} ---> N((#0:127 | #0:128 | #0:129)) @ {
  #0:127 -> [N(str)]
  #0:128 -> ["yield"]
  #0:129 -> ["await"]
}
GeneratorDeclaration[0,0].IsConstantDeclaration:[☊(GeneratorDeclaration), ☊(BindingIdentifier), ☊(FormalParameters), ☊(GeneratorBody)]: {
  env: {
    BindingIdentifier -> ! ☊(BindingIdentifier)
    FormalParameters -> ! ☊(FormalParameters)
    GeneratorBody -> ! ☊(GeneratorBody)
    this -> ! ☊(GeneratorDeclaration)
  }
} ---> N(false)
GeneratorDeclaration[1,0].BoundNames:[☊(GeneratorDeclaration), ☊(FormalParameters), ☊(GeneratorBody)]: {
  env: {
    FormalParameters -> ! ☊(FormalParameters)
    GeneratorBody -> ! ☊(GeneratorBody)
    this -> ! ☊(GeneratorDeclaration)
  }
} ---> N(#0:157) @ {
  #0:157 -> ["*default*"]
}
GeneratorDeclaration[1,0].IsConstantDeclaration:[☊(GeneratorDeclaration), ☊(FormalParameters), ☊(GeneratorBody)]: {
  env: {
    FormalParameters -> ! ☊(FormalParameters)
    GeneratorBody -> ! ☊(GeneratorBody)
    this -> ! ☊(GeneratorDeclaration)
  }
} ---> N(false)
GeneratorExpression[0,0].HasName:[☊(GeneratorExpression), ☊(FormalParameters), ☊(GeneratorBody)]: {
  env: {
    FormalParameters -> ! ☊(FormalParameters)
    GeneratorBody -> ! ☊(GeneratorBody)
    this -> ! ☊(GeneratorExpression)
  }
} ---> N(false)
GeneratorExpression[0,1].HasName:[☊(GeneratorExpression), ☊(BindingIdentifier), ☊(FormalParameters), ☊(GeneratorBody)]: {
  env: {
    BindingIdentifier -> ! ☊(BindingIdentifier)
    FormalParameters -> ! ☊(FormalParameters)
    GeneratorBody -> ! ☊(GeneratorBody)
    this -> ! ☊(GeneratorExpression)
  }
} ---> N(true)
GeneratorExpression[0,1].IsFunctionDefinition:[☊(GeneratorExpression), ?, ☊(FormalParameters), ☊(GeneratorBody)]: {
  env: {
    BindingIdentifier -> ! ?
    FormalParameters -> ! ☊(FormalParameters)
    GeneratorBody -> ! ☊(GeneratorBody)
    this -> ! ☊(GeneratorExpression)
  }
} ---> N(true)
GeneratorExpression[0,1].IsFunctionDefinition:[☊(GeneratorExpression), ☊(BindingIdentifier), ☊(FormalParameters), ☊(GeneratorBody)]: {
  env: {
    BindingIdentifier -> ! ☊(BindingIdentifier)
    FormalParameters -> ! ☊(FormalParameters)
    GeneratorBody -> ! ☊(GeneratorBody)
    this -> ! ☊(GeneratorExpression)
  }
} ---> N(true)
GeneratorMethod[0,0].PropName:[☊(GeneratorMethod), ☊(PropertyName), ☊(UniqueFormalParameters), ☊(GeneratorBody)]: {
  env: {
    GeneratorBody -> ! ☊(GeneratorBody)
    PropertyName -> ! ☊(PropertyName)
    UniqueFormalParameters -> ! ☊(UniqueFormalParameters)
    this -> ! ☊(GeneratorMethod)
  }
} ---> N(~empty~ | str)
GetActiveScriptOrModule:[]: ɛ ---> N((ModuleRecord | ScriptRecord) | null)
GetIdentifierReference:[EnvironmentRecord, Normal(str), bool]: {
  env: {
    env -> ! EnvironmentRecord
    name -> ! N(str)
    strict -> ! true
  }
} ---> N(#0:781) @ {
  #0:781 -> ReferenceRecord {
    Base -> ! ~unresolvable~
    ReferencedName -> ! N(str)
    Strict -> ! true
    ThisValue -> ! ~empty~
  }
}
GetIdentifierReference:[EnvironmentRecord, str, bool]: {
  env: {
    env -> ! EnvironmentRecord
    name -> ! str
    strict -> ! true
  }
} ---> N(#0:781) @ {
  #0:781 -> ReferenceRecord {
    Base -> ! ~unresolvable~
    ReferencedName -> ! str
    Strict -> ! true
    ThisValue -> ! ~empty~
  }
}
GetIdentifierReference:[null, Normal(str), bool]: {
  env: {
    env -> ! null
    name -> ! N(str)
    strict -> ! true
  }
} ---> N(#0:781) @ {
  #0:781 -> ReferenceRecord {
    Base -> ! ~unresolvable~
    ReferencedName -> ! N(str)
    Strict -> ! true
    ThisValue -> ! ~empty~
  }
}
GetIdentifierReference:[null, str, bool]: {
  env: {
    env -> ! null
    name -> ! str
    strict -> ! true
  }
} ---> N(#0:781) @ {
  #0:781 -> ReferenceRecord {
    Base -> ! ~unresolvable~
    ReferencedName -> ! str
    Strict -> ! true
    ThisValue -> ! ~empty~
  }
}
GetThisEnvironment:[]: ɛ ---> N(EnvironmentRecord)
GlobalEnvironmentRecord.GetThisBinding:[Normal(EnvironmentRecord)]: {
  env: {
    envRec -> ! N(EnvironmentRecord)
  }
} ---> N(#Global)
GlobalEnvironmentRecord.HasBinding:[EnvironmentRecord, Normal(str)]: {
  env: {
    N -> ! N(str)
    envRec -> ! EnvironmentRecord
  }
} ---> N(false)
GlobalEnvironmentRecord.HasBinding:[EnvironmentRecord, str]: {
  env: {
    N -> ! str
    envRec -> ! EnvironmentRecord
  }
} ---> N(false)
GlobalEnvironmentRecord.HasThisBinding:[EnvironmentRecord]: {
  env: {
    envRec -> ! EnvironmentRecord
  }
} ---> N(true)
HasProperty:[OrdinaryObject, Normal(str)]: {
  env: {
    O -> ! OrdinaryObject
    P -> ! N(str)
  }
} ---> N(false)
HasProperty:[OrdinaryObject, str]: {
  env: {
    O -> ! OrdinaryObject
    P -> ! str
  }
} ---> N(false)
HoistableDeclaration[0,0].DeclarationPart:[☊(HoistableDeclaration), ☊(FunctionDeclaration)]: {
  env: {
    FunctionDeclaration -> ! ☊(FunctionDeclaration)
    this -> ! ☊(HoistableDeclaration)
  }
} ---> N(☊(FunctionDeclaration))
HoistableDeclaration[1,0].DeclarationPart:[☊(HoistableDeclaration), ☊(GeneratorDeclaration)]: {
  env: {
    GeneratorDeclaration -> ! ☊(GeneratorDeclaration)
    this -> ! ☊(HoistableDeclaration)
  }
} ---> N(☊(GeneratorDeclaration))
HoistableDeclaration[2,0].DeclarationPart:[☊(HoistableDeclaration), ☊(AsyncFunctionDeclaration)]: {
  env: {
    AsyncFunctionDeclaration -> ! ☊(AsyncFunctionDeclaration)
    this -> ! ☊(HoistableDeclaration)
  }
} ---> N(☊(AsyncFunctionDeclaration))
HoistableDeclaration[3,0].DeclarationPart:[☊(HoistableDeclaration), ☊(AsyncGeneratorDeclaration)]: {
  env: {
    AsyncGeneratorDeclaration -> ! ☊(AsyncGeneratorDeclaration)
    this -> ! ☊(HoistableDeclaration)
  }
} ---> N(☊(AsyncGeneratorDeclaration))
HostFinalizeImportMeta:[OrdinaryObject, SourceTextModuleRecord]: {
  env: {
    importMeta -> ! #0:92
    moduleRecord -> ! SourceTextModuleRecord
  }
  heap: {
    #0:92 -> OrdinaryObject {
      Extensible -> ? true
      Prototype -> ! null
      SubMap -> ! #1:92
    }
    #1:92 -> SubMap {}
  }
} ---> N(~empty~) @ {
  #0:92 -> OrdinaryObject {
    Extensible -> ? true
    Prototype -> ! null
    SubMap -> ! #1:92
  }
  #1:92 -> SubMap {}
}
HostGetImportMetaProperties:[SourceTextModuleRecord]: {
  env: {
    moduleRecord -> ! SourceTextModuleRecord
  }
} ---> N(#-1:2284) @ {
  #-1:2284 -> []
}
IdentifierName[0,0].StringValue:[☊(IdentifierName), ☊(IdentifierStart)]: {
  env: {
    IdentifierStart -> ! ☊(IdentifierStart)
    this -> ! ☊(IdentifierName)
  }
} ---> N(str)
IdentifierName[1,0].StringValue:[☊(IdentifierName), ☊(IdentifierName), ☊(IdentifierPart)]: {
  env: {
    IdentifierName -> ! ☊(IdentifierName)
    IdentifierPart -> ! ☊(IdentifierPart)
    this -> ! ☊(IdentifierName)
  }
} ---> N(str)
IdentifierReference[0,0].AssignmentTargetType:[☊(IdentifierReference), ☊(Identifier)]: {
  env: {
    Identifier -> ! ☊(Identifier)
    this -> ! ☊(IdentifierReference)
  }
} ---> N((~invalid~ | ~simple~))
IdentifierReference[0,0].Evaluation:[☊(IdentifierReference), ☊(Identifier)]: {
  env: {
    Identifier -> ! ☊(Identifier)
    this -> ! ☊(IdentifierReference)
  }
} ---> N(#0:781) @ {
  #0:781 -> ReferenceRecord {
    Base -> ! ~unresolvable~
    ReferencedName -> ! N(str)
    Strict -> ! true
    ThisValue -> ! ~empty~
  }
}
IdentifierReference[1,0].AssignmentTargetType:[☊(IdentifierReference)]: {
  env: {
    this -> ! ☊(IdentifierReference)
  }
} ---> N(~simple~)
IdentifierReference[1,0].EarlyErrors:[☊(IdentifierReference)]: {
  env: {
    this -> ! ☊(IdentifierReference)
  }
} ---> T(#0:2143) @ {
  #0:2143 -> OrdinaryObject {
    ErrorData -> ! undef
    Prototype -> ! #%SyntaxError.prototype%
  }
}
IdentifierReference[1,0].Evaluation:[☊(IdentifierReference)]: {
  env: {
    this -> ! ☊(IdentifierReference)
  }
} ---> N(#0:781) @ {
  #0:781 -> ReferenceRecord {
    Base -> ! ~unresolvable~
    ReferencedName -> ! str
    Strict -> ! true
    ThisValue -> ! ~empty~
  }
}
IdentifierReference[1,0].StringValue:[☊(IdentifierReference)]: {
  env: {
    this -> ! ☊(IdentifierReference)
  }
} ---> N("yield")
IdentifierReference[2,0].AssignmentTargetType:[☊(IdentifierReference)]: {
  env: {
    this -> ! ☊(IdentifierReference)
  }
} ---> N(~simple~)
IdentifierReference[2,0].Evaluation:[☊(IdentifierReference)]: {
  env: {
    this -> ! ☊(IdentifierReference)
  }
} ---> N(#0:781) @ {
  #0:781 -> ReferenceRecord {
    Base -> ! ~unresolvable~
    ReferencedName -> ! str
    Strict -> ! true
    ThisValue -> ! ~empty~
  }
}
IdentifierReference[2,0].StringValue:[☊(IdentifierReference)]: {
  env: {
    this -> ! ☊(IdentifierReference)
  }
} ---> N("await")
Identifier[0,0].StringValue:[☊(Identifier), ☊(IdentifierName)]: {
  env: {
    IdentifierName -> ! ☊(IdentifierName)
    this -> ! ☊(Identifier)
  }
} ---> N(str)
ImportClause[3,0].BoundNames:[☊(ImportClause), ☊(ImportedDefaultBinding), ☊(NameSpaceImport)]: {
  env: {
    ImportedDefaultBinding -> ! ☊(ImportedDefaultBinding)
    NameSpaceImport -> ! ☊(NameSpaceImport)
    this -> ! ☊(ImportClause)
  }
} ---> N((#0:127 | #0:128 | #0:129)) @ {
  #0:127 -> [str | N(str)]
  #0:128 -> [str]
  #0:129 -> [str]
}
ImportClause[3,0].ImportEntriesForModule:[☊(ImportClause), ☊(ImportedDefaultBinding), ☊(NameSpaceImport), str]: {
  env: {
    ImportedDefaultBinding -> ! ☊(ImportedDefaultBinding)
    NameSpaceImport -> ! ☊(NameSpaceImport)
    module -> ! str
    this -> ! ☊(ImportClause)
  }
} ---> N(#1:1497) @ {
  #0:1497 -> ImportEntryRecord {
    ImportName -> ! "default"
    LocalName -> ! str | N(str)
    ModuleRequest -> ! str
  }
  #0:1498 -> ImportEntryRecord {
    ImportName -> ! "*"
    LocalName -> ! N(str)
    ModuleRequest -> ! str
  }
  #1:1497 -> [(#0:1497 | #0:1498)]
}
ImportClause[4,0].BoundNames:[☊(ImportClause), ☊(ImportedDefaultBinding), ☊(NamedImports)]: {
  env: {
    ImportedDefaultBinding -> ! ☊(ImportedDefaultBinding)
    NamedImports -> ! ☊(NamedImports)
    this -> ! ☊(ImportClause)
  }
} ---> N((#0:127 | #0:128 | #0:129)) @ {
  #0:127 -> [str | N(str)]
  #0:128 -> [str]
  #0:129 -> [str]
}
ImportClause[4,0].ImportEntriesForModule:[☊(ImportClause), ☊(ImportedDefaultBinding), ☊(NamedImports), str]: {
  env: {
    ImportedDefaultBinding -> ! ☊(ImportedDefaultBinding)
    NamedImports -> ! ☊(NamedImports)
    module -> ! str
    this -> ! ☊(ImportClause)
  }
} ---> N(#1:1497) @ {
  #0:1497 -> ImportEntryRecord {
    ImportName -> ! "default"
    LocalName -> ! str | N(str)
    ModuleRequest -> ! str
  }
  #0:1501 -> ImportEntryRecord {
    ImportName -> ! str | N(str)
    LocalName -> ! str | N(str)
    ModuleRequest -> ! str
  }
  #0:1502 -> ImportEntryRecord {
    ImportName -> ! str
    LocalName -> ! N(str)
    ModuleRequest -> ! str
  }
  #1:1497 -> [(#0:1497 | #0:1501 | #0:1502)]
}
ImportDeclaration[0,0].BoundNames:[☊(ImportDeclaration), ☊(ImportClause), ☊(FromClause)]: {
  env: {
    FromClause -> ! ☊(FromClause)
    ImportClause -> ! ☊(ImportClause)
    this -> ! ☊(ImportDeclaration)
  }
} ---> N((#0:127 | #0:128 | #0:129 | #0:169)) @ {
  #0:127 -> [str | N(str)]
  #0:128 -> [str]
  #0:129 -> [str]
  #0:169 -> []
}
ImportDeclaration[0,0].ImportEntries:[☊(ImportDeclaration), ☊(ImportClause), ☊(FromClause)]: {
  env: {
    FromClause -> ! ☊(FromClause)
    ImportClause -> ! ☊(ImportClause)
    this -> ! ☊(ImportDeclaration)
  }
} ---> N((#0:1499 | #1:1497 | #1:1498 | #1:1501 | #1:1502)) @ {
  #0:1497 -> ImportEntryRecord {
    ImportName -> ! "default"
    LocalName -> ! str | N(str)
    ModuleRequest -> ! str
  }
  #0:1498 -> ImportEntryRecord {
    ImportName -> ! "*"
    LocalName -> ! N(str)
    ModuleRequest -> ! str
  }
  #0:1499 -> []
  #0:1501 -> ImportEntryRecord {
    ImportName -> ! str | N(str)
    LocalName -> ! str | N(str)
    ModuleRequest -> ! str
  }
  #0:1502 -> ImportEntryRecord {
    ImportName -> ! str
    LocalName -> ! N(str)
    ModuleRequest -> ! str
  }
  #1:1497 -> [(#0:1497 | #0:1498 | #0:1501 | #0:1502)]
  #1:1498 -> [#0:1498]
  #1:1501 -> [(#0:1501 | #0:1502)]
  #1:1502 -> [(#0:1501 | #0:1502)]
}
ImportDeclaration[0,0].ModuleRequests:[☊(ImportDeclaration), ☊(ImportClause), ☊(FromClause)]: {
  env: {
    FromClause -> ! ☊(FromClause)
    ImportClause -> ! ☊(ImportClause)
    this -> ! ☊(ImportDeclaration)
  }
} ---> N(#0:1466) @ {
  #0:1466 -> [str]
}
ImportDeclaration[1,0].BoundNames:[☊(ImportDeclaration), ☊(ModuleSpecifier)]: {
  env: {
    ModuleSpecifier -> ! ☊(ModuleSpecifier)
    this -> ! ☊(ImportDeclaration)
  }
} ---> N(#0:166) @ {
  #0:166 -> []
}
ImportDeclaration[1,0].ImportEntries:[☊(ImportDeclaration), ☊(ModuleSpecifier)]: {
  env: {
    ModuleSpecifier -> ! ☊(ModuleSpecifier)
    this -> ! ☊(ImportDeclaration)
  }
} ---> N(#0:1494) @ {
  #0:1494 -> []
}
ImportMeta[0,0].AssignmentTargetType:[☊(ImportMeta)]: {
  env: {
    this -> ! ☊(ImportMeta)
  }
} ---> N(~invalid~)
ImportMeta[0,0].EarlyErrors:[☊(ImportMeta)]: {
  env: {
    this -> ! ☊(ImportMeta)
  }
} ---> N(undef)
ImportMeta[0,0].Evaluation:[☊(ImportMeta)]: {
  env: {
    this -> ! ☊(ImportMeta)
  }
} ---> N(#0:92 | Object) @ {
  #0:92 -> OrdinaryObject {
    Extensible -> ? true
    Prototype -> ! null
    SubMap -> ! #1:92
  }
  #1:92 -> SubMap {}
}
ImportSpecifier[0,0].ImportEntriesForModule:[☊(ImportSpecifier), ☊(ImportedBinding), str]: {
  env: {
    ImportedBinding -> ! ☊(ImportedBinding)
    module -> ! str
    this -> ! ☊(ImportSpecifier)
  }
} ---> N(#1:1501) @ {
  #0:1501 -> ImportEntryRecord {
    ImportName -> ! str | N(str)
    LocalName -> ! str | N(str)
    ModuleRequest -> ! str
  }
  #1:1501 -> [#0:1501]
}
ImportSpecifier[1,0].BoundNames:[☊(ImportSpecifier), ☊(IdentifierName), ☊(ImportedBinding)]: {
  env: {
    IdentifierName -> ! ☊(IdentifierName)
    ImportedBinding -> ! ☊(ImportedBinding)
    this -> ! ☊(ImportSpecifier)
  }
} ---> N((#0:127 | #0:128 | #0:129)) @ {
  #0:127 -> [N(str)]
  #0:128 -> ["yield"]
  #0:129 -> ["await"]
}
ImportSpecifier[1,0].ImportEntriesForModule:[☊(ImportSpecifier), ☊(IdentifierName), ☊(ImportedBinding), str]: {
  env: {
    IdentifierName -> ! ☊(IdentifierName)
    ImportedBinding -> ! ☊(ImportedBinding)
    module -> ! str
    this -> ! ☊(ImportSpecifier)
  }
} ---> N(#1:1502) @ {
  #0:1502 -> ImportEntryRecord {
    ImportName -> ! str
    LocalName -> ! N(str)
    ModuleRequest -> ! str
  }
  #1:1502 -> [#0:1502]
}
ImportedDefaultBinding[0,0].ImportEntriesForModule:[☊(ImportedDefaultBinding), ☊(ImportedBinding), str]: {
  env: {
    ImportedBinding -> ! ☊(ImportedBinding)
    module -> ! str
    this -> ! ☊(ImportedDefaultBinding)
  }
} ---> N(#1:1497) @ {
  #0:1497 -> ImportEntryRecord {
    ImportName -> ! "default"
    LocalName -> ! str | N(str)
    ModuleRequest -> ! str
  }
  #1:1497 -> [#0:1497]
}
ImportsList[1,0].BoundNames:[☊(ImportsList), ☊(ImportsList), ☊(ImportSpecifier)]: {
  env: {
    ImportSpecifier -> ! ☊(ImportSpecifier)
    ImportsList -> ! ☊(ImportsList)
    this -> ! ☊(ImportsList)
  }
} ---> N((#0:127 | #0:128 | #0:129)) @ {
  #0:127 -> [str | N(str)]
  #0:128 -> [str]
  #0:129 -> [str]
}
ImportsList[1,0].ImportEntriesForModule:[☊(ImportsList), ☊(ImportsList), ☊(ImportSpecifier), str]: {
  env: {
    ImportSpecifier -> ! ☊(ImportSpecifier)
    ImportsList -> ! ☊(ImportsList)
    module -> ! str
    this -> ! ☊(ImportsList)
  }
} ---> N((#1:1501 | #1:1502)) @ {
  #0:1501 -> ImportEntryRecord {
    ImportName -> ! str | N(str)
    LocalName -> ! str | N(str)
    ModuleRequest -> ! str
  }
  #0:1502 -> ImportEntryRecord {
    ImportName -> ! str
    LocalName -> ! N(str)
    ModuleRequest -> ! str
  }
  #1:1501 -> [(#0:1501 | #0:1502)]
  #1:1502 -> [(#0:1501 | #0:1502)]
}
IsPropertyKey:[Normal(str)]: {
  env: {
    argument -> ! N(str)
  }
} ---> N(true)
IsPropertyKey:[str]: {
  env: {
    argument -> ! str
  }
} ---> N(true)
LabelIdentifier[1,0].StringValue:[☊(LabelIdentifier)]: {
  env: {
    this -> ! ☊(LabelIdentifier)
  }
} ---> N("yield")
LabelIdentifier[2,0].StringValue:[☊(LabelIdentifier)]: {
  env: {
    this -> ! ☊(LabelIdentifier)
  }
} ---> N("await")
LeftHandSideExpression[1,0].IsDestructuring:[☊(LeftHandSideExpression), ☊(CallExpression)]: {
  env: {
    CallExpression -> ! ☊(CallExpression)
    this -> ! ☊(LeftHandSideExpression)
  }
} ---> N(false)
LeftHandSideExpression[1,0].IsFunctionDefinition:[☊(LeftHandSideExpression), ☊(CallExpression)]: {
  env: {
    CallExpression -> ! ☊(CallExpression)
    this -> ! ☊(LeftHandSideExpression)
  }
} ---> N(false)
LeftHandSideExpression[1,0].IsIdentifierRef:[☊(LeftHandSideExpression), ☊(CallExpression)]: {
  env: {
    CallExpression -> ! ☊(CallExpression)
    this -> ! ☊(LeftHandSideExpression)
  }
} ---> N(false)
LeftHandSideExpression[2,0].AssignmentTargetType:[☊(LeftHandSideExpression), ☊(OptionalExpression)]: {
  env: {
    OptionalExpression -> ! ☊(OptionalExpression)
    this -> ! ☊(LeftHandSideExpression)
  }
} ---> N(~invalid~)
LeftHandSideExpression[2,0].IsDestructuring:[☊(LeftHandSideExpression), ☊(OptionalExpression)]: {
  env: {
    OptionalExpression -> ! ☊(OptionalExpression)
    this -> ! ☊(LeftHandSideExpression)
  }
} ---> N(false)
LeftHandSideExpression[2,0].IsFunctionDefinition:[☊(LeftHandSideExpression), ☊(OptionalExpression)]: {
  env: {
    OptionalExpression -> ! ☊(OptionalExpression)
    this -> ! ☊(LeftHandSideExpression)
  }
} ---> N(false)
LeftHandSideExpression[2,0].IsIdentifierRef:[☊(LeftHandSideExpression), ☊(OptionalExpression)]: {
  env: {
    OptionalExpression -> ! ☊(OptionalExpression)
    this -> ! ☊(LeftHandSideExpression)
  }
} ---> N(false)
LetOrConst[0,0].IsConstantDeclaration:[☊(LetOrConst)]: {
  env: {
    this -> ! ☊(LetOrConst)
  }
} ---> N(false)
LetOrConst[1,0].IsConstantDeclaration:[☊(LetOrConst)]: {
  env: {
    this -> ! ☊(LetOrConst)
  }
} ---> N(true)
LexicalBinding[0,1].BoundNames:[☊(LexicalBinding), ☊(BindingIdentifier), ?]: {
  env: {
    BindingIdentifier -> ! ☊(BindingIdentifier)
    Initializer -> ! ?
    this -> ! ☊(LexicalBinding)
  }
} ---> N((#0:127 | #0:128 | #0:129)) @ {
  #0:127 -> [N(str)]
  #0:128 -> ["yield"]
  #0:129 -> ["await"]
}
LexicalBinding[0,1].BoundNames:[☊(LexicalBinding), ☊(BindingIdentifier), ☊(Initializer)]: {
  env: {
    BindingIdentifier -> ! ☊(BindingIdentifier)
    Initializer -> ! ☊(Initializer)
    this -> ! ☊(LexicalBinding)
  }
} ---> N((#0:127 | #0:128 | #0:129)) @ {
  #0:127 -> [N(str)]
  #0:128 -> ["yield"]
  #0:129 -> ["await"]
}
LexicalBinding[1,0].BoundNames:[☊(LexicalBinding), ☊(BindingPattern), ☊(Initializer)]: {
  env: {
    BindingPattern -> ! ☊(BindingPattern)
    Initializer -> ! ☊(Initializer)
    this -> ! ☊(LexicalBinding)
  }
} ---> N((#0:127 | #0:128 | #0:129 | #0:137 | #0:139)) @ {
  #0:127 -> [str | N(str)]
  #0:128 -> [str]
  #0:129 -> [str]
  #0:137 -> [str]
  #0:139 -> [str]
}
LexicalDeclaration[0,0].BoundNames:[☊(LexicalDeclaration), ☊(LetOrConst), ☊(BindingList)]: {
  env: {
    BindingList -> ! ☊(BindingList)
    LetOrConst -> ! ☊(LetOrConst)
    this -> ! ☊(LexicalDeclaration)
  }
} ---> N((#0:127 | #0:128 | #0:129 | #0:137 | #0:139)) @ {
  #0:127 -> [str | N(str)]
  #0:128 -> [str]
  #0:129 -> [str]
  #0:137 -> [str]
  #0:139 -> [str]
}
LexicalDeclaration[0,0].IsConstantDeclaration:[☊(LexicalDeclaration), ☊(LetOrConst), ☊(BindingList)]: {
  env: {
    BindingList -> ! ☊(BindingList)
    LetOrConst -> ! ☊(LetOrConst)
    this -> ! ☊(LexicalDeclaration)
  }
} ---> N(bool)
LiteralPropertyName[0,0].Evaluation:[☊(LiteralPropertyName), ☊(IdentifierName)]: {
  env: {
    IdentifierName -> ! ☊(IdentifierName)
    this -> ! ☊(LiteralPropertyName)
  }
} ---> N(str)
LiteralPropertyName[0,0].PropName:[☊(LiteralPropertyName), ☊(IdentifierName)]: {
  env: {
    IdentifierName -> ! ☊(IdentifierName)
    this -> ! ☊(LiteralPropertyName)
  }
} ---> N(str)
LiteralPropertyName[1,0].Evaluation:[☊(LiteralPropertyName), ☊(StringLiteral)]: {
  env: {
    StringLiteral -> ! ☊(StringLiteral)
    this -> ! ☊(LiteralPropertyName)
  }
} ---> N(str)
LiteralPropertyName[1,0].PropName:[☊(LiteralPropertyName), ☊(StringLiteral)]: {
  env: {
    StringLiteral -> ! ☊(StringLiteral)
    this -> ! ☊(LiteralPropertyName)
  }
} ---> N(str)
LiteralPropertyName[2,0].Evaluation:[☊(LiteralPropertyName), ☊(NumericLiteral)]: {
  env: {
    NumericLiteral -> ! ☊(NumericLiteral)
    this -> ! ☊(LiteralPropertyName)
  }
} ---> N(str)
LiteralPropertyName[2,0].PropName:[☊(LiteralPropertyName), ☊(NumericLiteral)]: {
  env: {
    NumericLiteral -> ! ☊(NumericLiteral)
    this -> ! ☊(LiteralPropertyName)
  }
} ---> N(str)
Literal[0,0].Evaluation:[☊(Literal), ☊(NullLiteral)]: {
  env: {
    NullLiteral -> ! ☊(NullLiteral)
    this -> ! ☊(Literal)
  }
} ---> N(null)
Literal[1,0].Evaluation:[☊(Literal), ☊(BooleanLiteral)]: {
  env: {
    BooleanLiteral -> ! ☊(BooleanLiteral)
    this -> ! ☊(Literal)
  }
} ---> N(bool)
Literal[2,0].Evaluation:[☊(Literal), ☊(NumericLiteral)]: {
  env: {
    NumericLiteral -> ! ☊(NumericLiteral)
    this -> ! ☊(Literal)
  }
} ---> N(num)
Literal[3,0].Evaluation:[☊(Literal), ☊(StringLiteral)]: {
  env: {
    StringLiteral -> ! ☊(StringLiteral)
    this -> ! ☊(Literal)
  }
} ---> N(str)
LogicalANDExpression[1,0].AssignmentTargetType:[☊(LogicalANDExpression), ☊(LogicalANDExpression), ☊(BitwiseORExpression)]: {
  env: {
    BitwiseORExpression -> ! ☊(BitwiseORExpression)
    LogicalANDExpression -> ! ☊(LogicalANDExpression)
    this -> ! ☊(LogicalANDExpression)
  }
} ---> N(~invalid~)
LogicalANDExpression[1,0].IsFunctionDefinition:[☊(LogicalANDExpression), ☊(LogicalANDExpression), ☊(BitwiseORExpression)]: {
  env: {
    BitwiseORExpression -> ! ☊(BitwiseORExpression)
    LogicalANDExpression -> ! ☊(LogicalANDExpression)
    this -> ! ☊(LogicalANDExpression)
  }
} ---> N(false)
LogicalORExpression[1,0].AssignmentTargetType:[☊(LogicalORExpression), ☊(LogicalORExpression), ☊(LogicalANDExpression)]: {
  env: {
    LogicalANDExpression -> ! ☊(LogicalANDExpression)
    LogicalORExpression -> ! ☊(LogicalORExpression)
    this -> ! ☊(LogicalORExpression)
  }
} ---> N(~invalid~)
LogicalORExpression[1,0].IsFunctionDefinition:[☊(LogicalORExpression), ☊(LogicalORExpression), ☊(LogicalANDExpression)]: {
  env: {
    LogicalANDExpression -> ! ☊(LogicalANDExpression)
    LogicalORExpression -> ! ☊(LogicalORExpression)
    this -> ! ☊(LogicalORExpression)
  }
} ---> N(false)
MakeBasicObject:[list]: {
  env: {
    internalSlotsList -> ! #0:831
  }
  heap: {
    #0:831 -> [str]
  }
} ---> N(#0:92) @ {
  #0:92 -> OrdinaryObject {
    Extensible -> ? true
    SubMap -> ! #1:92
  }
  #0:831 -> [str]
  #1:92 -> SubMap {}
}
MemberExpression[0,0].IsDestructuring:[☊(MemberExpression), ☊(PrimaryExpression)]: {
  env: {
    PrimaryExpression -> ! ☊(PrimaryExpression)
    this -> ! ☊(MemberExpression)
  }
} ---> N(bool)
MemberExpression[1,0].AssignmentTargetType:[☊(MemberExpression), ☊(MemberExpression), ☊(Expression)]: {
  env: {
    Expression -> ! ☊(Expression)
    MemberExpression -> ! ☊(MemberExpression)
    this -> ! ☊(MemberExpression)
  }
} ---> N(~simple~)
MemberExpression[1,0].IsDestructuring:[☊(MemberExpression), ☊(MemberExpression), ☊(Expression)]: {
  env: {
    Expression -> ! ☊(Expression)
    MemberExpression -> ! ☊(MemberExpression)
    this -> ! ☊(MemberExpression)
  }
} ---> N(false)
MemberExpression[1,0].IsFunctionDefinition:[☊(MemberExpression), ☊(MemberExpression), ☊(Expression)]: {
  env: {
    Expression -> ! ☊(Expression)
    MemberExpression -> ! ☊(MemberExpression)
    this -> ! ☊(MemberExpression)
  }
} ---> N(false)
MemberExpression[1,0].IsIdentifierRef:[☊(MemberExpression), ☊(MemberExpression), ☊(Expression)]: {
  env: {
    Expression -> ! ☊(Expression)
    MemberExpression -> ! ☊(MemberExpression)
    this -> ! ☊(MemberExpression)
  }
} ---> N(false)
MemberExpression[2,0].AssignmentTargetType:[☊(MemberExpression), ☊(MemberExpression), ☊(IdentifierName)]: {
  env: {
    IdentifierName -> ! ☊(IdentifierName)
    MemberExpression -> ! ☊(MemberExpression)
    this -> ! ☊(MemberExpression)
  }
} ---> N(~simple~)
MemberExpression[2,0].IsDestructuring:[☊(MemberExpression), ☊(MemberExpression), ☊(IdentifierName)]: {
  env: {
    IdentifierName -> ! ☊(IdentifierName)
    MemberExpression -> ! ☊(MemberExpression)
    this -> ! ☊(MemberExpression)
  }
} ---> N(false)
MemberExpression[2,0].IsFunctionDefinition:[☊(MemberExpression), ☊(MemberExpression), ☊(IdentifierName)]: {
  env: {
    IdentifierName -> ! ☊(IdentifierName)
    MemberExpression -> ! ☊(MemberExpression)
    this -> ! ☊(MemberExpression)
  }
} ---> N(false)
MemberExpression[2,0].IsIdentifierRef:[☊(MemberExpression), ☊(MemberExpression), ☊(IdentifierName)]: {
  env: {
    IdentifierName -> ! ☊(IdentifierName)
    MemberExpression -> ! ☊(MemberExpression)
    this -> ! ☊(MemberExpression)
  }
} ---> N(false)
MemberExpression[3,0].AssignmentTargetType:[☊(MemberExpression), ☊(MemberExpression), ☊(TemplateLiteral)]: {
  env: {
    MemberExpression -> ! ☊(MemberExpression)
    TemplateLiteral -> ! ☊(TemplateLiteral)
    this -> ! ☊(MemberExpression)
  }
} ---> N(~invalid~)
MemberExpression[3,0].IsDestructuring:[☊(MemberExpression), ☊(MemberExpression), ☊(TemplateLiteral)]: {
  env: {
    MemberExpression -> ! ☊(MemberExpression)
    TemplateLiteral -> ! ☊(TemplateLiteral)
    this -> ! ☊(MemberExpression)
  }
} ---> N(false)
MemberExpression[3,0].IsFunctionDefinition:[☊(MemberExpression), ☊(MemberExpression), ☊(TemplateLiteral)]: {
  env: {
    MemberExpression -> ! ☊(MemberExpression)
    TemplateLiteral -> ! ☊(TemplateLiteral)
    this -> ! ☊(MemberExpression)
  }
} ---> N(false)
MemberExpression[3,0].IsIdentifierRef:[☊(MemberExpression), ☊(MemberExpression), ☊(TemplateLiteral)]: {
  env: {
    MemberExpression -> ! ☊(MemberExpression)
    TemplateLiteral -> ! ☊(TemplateLiteral)
    this -> ! ☊(MemberExpression)
  }
} ---> N(false)
MemberExpression[4,0].AssignmentTargetType:[☊(MemberExpression), ☊(SuperProperty)]: {
  env: {
    SuperProperty -> ! ☊(SuperProperty)
    this -> ! ☊(MemberExpression)
  }
} ---> N(~simple~)
MemberExpression[4,0].IsDestructuring:[☊(MemberExpression), ☊(SuperProperty)]: {
  env: {
    SuperProperty -> ! ☊(SuperProperty)
    this -> ! ☊(MemberExpression)
  }
} ---> N(false)
MemberExpression[4,0].IsFunctionDefinition:[☊(MemberExpression), ☊(SuperProperty)]: {
  env: {
    SuperProperty -> ! ☊(SuperProperty)
    this -> ! ☊(MemberExpression)
  }
} ---> N(false)
MemberExpression[4,0].IsIdentifierRef:[☊(MemberExpression), ☊(SuperProperty)]: {
  env: {
    SuperProperty -> ! ☊(SuperProperty)
    this -> ! ☊(MemberExpression)
  }
} ---> N(false)
MemberExpression[5,0].IsDestructuring:[☊(MemberExpression), ☊(MetaProperty)]: {
  env: {
    MetaProperty -> ! ☊(MetaProperty)
    this -> ! ☊(MemberExpression)
  }
} ---> N(false)
MemberExpression[5,0].IsFunctionDefinition:[☊(MemberExpression), ☊(MetaProperty)]: {
  env: {
    MetaProperty -> ! ☊(MetaProperty)
    this -> ! ☊(MemberExpression)
  }
} ---> N(false)
MemberExpression[5,0].IsIdentifierRef:[☊(MemberExpression), ☊(MetaProperty)]: {
  env: {
    MetaProperty -> ! ☊(MetaProperty)
    this -> ! ☊(MemberExpression)
  }
} ---> N(false)
MemberExpression[6,0].AssignmentTargetType:[☊(MemberExpression), ☊(MemberExpression), ☊(Arguments)]: {
  env: {
    Arguments -> ! ☊(Arguments)
    MemberExpression -> ! ☊(MemberExpression)
    this -> ! ☊(MemberExpression)
  }
} ---> N(~invalid~)
MemberExpression[6,0].IsDestructuring:[☊(MemberExpression), ☊(MemberExpression), ☊(Arguments)]: {
  env: {
    Arguments -> ! ☊(Arguments)
    MemberExpression -> ! ☊(MemberExpression)
    this -> ! ☊(MemberExpression)
  }
} ---> N(false)
MemberExpression[6,0].IsFunctionDefinition:[☊(MemberExpression), ☊(MemberExpression), ☊(Arguments)]: {
  env: {
    Arguments -> ! ☊(Arguments)
    MemberExpression -> ! ☊(MemberExpression)
    this -> ! ☊(MemberExpression)
  }
} ---> N(false)
MemberExpression[6,0].IsIdentifierRef:[☊(MemberExpression), ☊(MemberExpression), ☊(Arguments)]: {
  env: {
    Arguments -> ! ☊(Arguments)
    MemberExpression -> ! ☊(MemberExpression)
    this -> ! ☊(MemberExpression)
  }
} ---> N(false)
MethodDefinition[0,0].PropName:[☊(MethodDefinition), ☊(PropertyName), ☊(UniqueFormalParameters), ☊(FunctionBody)]: {
  env: {
    FunctionBody -> ! ☊(FunctionBody)
    PropertyName -> ! ☊(PropertyName)
    UniqueFormalParameters -> ! ☊(UniqueFormalParameters)
    this -> ! ☊(MethodDefinition)
  }
} ---> N(~empty~ | str)
MethodDefinition[0,0].SpecialMethod:[☊(MethodDefinition), ☊(PropertyName), ☊(UniqueFormalParameters), ☊(FunctionBody)]: {
  env: {
    FunctionBody -> ! ☊(FunctionBody)
    PropertyName -> ! ☊(PropertyName)
    UniqueFormalParameters -> ! ☊(UniqueFormalParameters)
    this -> ! ☊(MethodDefinition)
  }
} ---> N(false)
MethodDefinition[1,0].SpecialMethod:[☊(MethodDefinition), ☊(GeneratorMethod)]: {
  env: {
    GeneratorMethod -> ! ☊(GeneratorMethod)
    this -> ! ☊(MethodDefinition)
  }
} ---> N(true)
MethodDefinition[2,0].SpecialMethod:[☊(MethodDefinition), ☊(AsyncMethod)]: {
  env: {
    AsyncMethod -> ! ☊(AsyncMethod)
    this -> ! ☊(MethodDefinition)
  }
} ---> N(true)
MethodDefinition[3,0].SpecialMethod:[☊(MethodDefinition), ☊(AsyncGeneratorMethod)]: {
  env: {
    AsyncGeneratorMethod -> ! ☊(AsyncGeneratorMethod)
    this -> ! ☊(MethodDefinition)
  }
} ---> N(true)
MethodDefinition[4,0].PropName:[☊(MethodDefinition), ☊(PropertyName), ☊(FunctionBody)]: {
  env: {
    FunctionBody -> ! ☊(FunctionBody)
    PropertyName -> ! ☊(PropertyName)
    this -> ! ☊(MethodDefinition)
  }
} ---> N(~empty~ | str)
MethodDefinition[4,0].SpecialMethod:[☊(MethodDefinition), ☊(PropertyName), ☊(FunctionBody)]: {
  env: {
    FunctionBody -> ! ☊(FunctionBody)
    PropertyName -> ! ☊(PropertyName)
    this -> ! ☊(MethodDefinition)
  }
} ---> N(true)
MethodDefinition[5,0].PropName:[☊(MethodDefinition), ☊(PropertyName), ☊(PropertySetParameterList), ☊(FunctionBody)]: {
  env: {
    FunctionBody -> ! ☊(FunctionBody)
    PropertyName -> ! ☊(PropertyName)
    PropertySetParameterList -> ! ☊(PropertySetParameterList)
    this -> ! ☊(MethodDefinition)
  }
} ---> N(~empty~ | str)
MethodDefinition[5,0].SpecialMethod:[☊(MethodDefinition), ☊(PropertyName), ☊(PropertySetParameterList), ☊(FunctionBody)]: {
  env: {
    FunctionBody -> ! ☊(FunctionBody)
    PropertyName -> ! ☊(PropertyName)
    PropertySetParameterList -> ! ☊(PropertySetParameterList)
    this -> ! ☊(MethodDefinition)
  }
} ---> N(true)
ModuleEnvironmentRecord.GetThisBinding:[Normal(EnvironmentRecord)]: {
  env: {
    envRec -> ! N(EnvironmentRecord)
  }
} ---> N(undef)
ModuleEnvironmentRecord.HasThisBinding:[EnvironmentRecord]: {
  env: {
    envRec -> ! EnvironmentRecord
  }
} ---> N(true)
ModuleItemList[0,0].ModuleRequests:[☊(ModuleItemList), ☊(ModuleItem)]: {
  env: {
    ModuleItem -> ! ☊(ModuleItem)
    this -> ! ☊(ModuleItemList)
  }
} ---> N((#0:1464 | #0:1466 | #0:1468 | #0:1469 | #0:1470 | #0:1471 | #0:1472 | #0:1473)) @ {
  #0:1464 -> []
  #0:1466 -> [str]
  #0:1468 -> []
  #0:1469 -> []
  #0:1470 -> []
  #0:1471 -> []
  #0:1472 -> []
  #0:1473 -> []
}
ModuleItemList[1,0].ExportEntries:[☊(ModuleItemList), ☊(ModuleItemList), ☊(ModuleItem)]: {
  env: {
    ModuleItem -> ! ☊(ModuleItem)
    ModuleItemList -> ! ☊(ModuleItemList)
    this -> ! ☊(ModuleItemList)
  }
} ---> N((#0:1536 | #0:1537 | #0:1540 | #0:1541 | #0:1542 | #0:1543 | #0:1547 | #0:1549 | #0:1550 | #1:1544 | #1:1545 | #1:1546)) @ {
  #0:1536 -> [(#0:1544 | #0:1545 | #0:1546 | #1:1540 | #1:1541 | #1:1542 | #1:1543 | #1:1549 | #1:1550)]
  #0:1537 -> [(#0:1544 | #0:1545 | #0:1546 | #1:1540 | #1:1541 | #1:1542 | #1:1543 | #1:1549 | #1:1550)]
  #0:1540 -> [(#0:1544 | #0:1545 | #0:1546 | #1:1540 | #1:1541 | #1:1542 | #1:1543 | #1:1549 | #1:1550)]
  #0:1541 -> [(#0:1544 | #0:1545 | #0:1546 | #1:1540 | #1:1541 | #1:1542 | #1:1543 | #1:1549 | #1:1550)]
  #0:1542 -> [(#0:1544 | #0:1545 | #0:1546 | #1:1540 | #1:1541 | #1:1542 | #1:1543 | #1:1549 | #1:1550)]
  #0:1543 -> [(#0:1544 | #0:1545 | #0:1546 | #1:1540 | #1:1541 | #1:1542 | #1:1543 | #1:1549 | #1:1550)]
  #0:1544 -> ExportEntryRecord {
    ExportName -> ! "default"
    ImportName -> ! null
    LocalName -> ! "*default*"
    ModuleRequest -> ! null
  }
  #0:1545 -> ExportEntryRecord {
    ExportName -> ! null
    ImportName -> ! "*"
    LocalName -> ! null
    ModuleRequest -> ! str
  }
  #0:1546 -> ExportEntryRecord {
    ExportName -> ! str
    ImportName -> ! "*"
    LocalName -> ! null
    ModuleRequest -> ! str
  }
  #0:1547 -> [(#0:1544 | #0:1545 | #0:1546 | #1:1540 | #1:1541 | #1:1542 | #1:1543 | #1:1549 | #1:1550)]
  #0:1549 -> [(#0:1544 | #0:1545 | #0:1546 | #1:1540 | #1:1541 | #1:1542 | #1:1543 | #1:1549 | #1:1550)]
  #0:1550 -> [(#0:1544 | #0:1545 | #0:1546 | #1:1540 | #1:1541 | #1:1542 | #1:1543 | #1:1549 | #1:1550)]
  #1:1540 -> ExportEntryRecord {
    ExportName -> ! str | N(str)
    ImportName -> ! null
    LocalName -> ! str | N(str)
    ModuleRequest -> ! null
  }
  #1:1541 -> ExportEntryRecord {
    ExportName -> ! str | N(str)
    ImportName -> ! null
    LocalName -> ! str | N(str)
    ModuleRequest -> ! null
  }
  #1:1542 -> ExportEntryRecord {
    ExportName -> ! "default"
    ImportName -> ! null
    LocalName -> ! str | N(str)
    ModuleRequest -> ! null
  }
  #1:1543 -> ExportEntryRecord {
    ExportName -> ! "default"
    ImportName -> ! null
    LocalName -> ! str | N(str)
    ModuleRequest -> ! null
  }
  #1:1544 -> [(#0:1544 | #0:1545 | #0:1546 | #1:1540 | #1:1541 | #1:1542 | #1:1543 | #1:1549 | #1:1550)]
  #1:1545 -> [(#0:1544 | #0:1545 | #0:1546 | #1:1540 | #1:1541 | #1:1542 | #1:1543 | #1:1549 | #1:1550)]
  #1:1546 -> [(#0:1544 | #0:1545 | #0:1546 | #1:1540 | #1:1541 | #1:1542 | #1:1543 | #1:1549 | #1:1550)]
  #1:1549 -> ExportEntryRecord {
    ExportName -> ! str
    ImportName -> ! str | null
    LocalName -> ! str | null
    ModuleRequest -> ! str | null
  }
  #1:1550 -> ExportEntryRecord {
    ExportName -> ! str
    ImportName -> ! str | null
    LocalName -> ! str | null
    ModuleRequest -> ! str | null
  }
}
ModuleItemList[1,0].ExportedBindings:[☊(ModuleItemList), ☊(ModuleItemList), ☊(ModuleItem)]: {
  env: {
    ModuleItem -> ! ☊(ModuleItem)
    ModuleItemList -> ! ☊(ModuleItemList)
    this -> ! ☊(ModuleItemList)
  }
} ---> N((#0:127 | #0:128 | #0:129 | #0:137 | #0:139 | #0:151 | #0:157 | #0:159 | #0:161 | #0:163 | #0:172 | #0:173 | #0:178 | #0:1504 | #0:1505 | #0:1506 | #0:1513 | #0:1515 | #0:1516)) @ {
  #0:127 -> [str | N(str)]
  #0:128 -> [str]
  #0:129 -> [str]
  #0:137 -> [str]
  #0:139 -> [str]
  #0:151 -> [str]
  #0:157 -> [str]
  #0:159 -> [str]
  #0:161 -> [str]
  #0:163 -> [str]
  #0:172 -> [str]
  #0:173 -> [str]
  #0:178 -> [str]
  #0:1504 -> [str]
  #0:1505 -> [str]
  #0:1506 -> [str]
  #0:1513 -> [str]
  #0:1515 -> [str]
  #0:1516 -> [str]
}
ModuleItemList[1,0].ExportedNames:[☊(ModuleItemList), ☊(ModuleItemList), ☊(ModuleItem)]: {
  env: {
    ModuleItem -> ! ☊(ModuleItem)
    ModuleItemList -> ! ☊(ModuleItemList)
    this -> ! ☊(ModuleItemList)
  }
} ---> N((#0:127 | #0:128 | #0:129 | #0:137 | #0:139 | #0:151 | #0:157 | #0:159 | #0:161 | #0:163 | #0:1519 | #0:1520 | #0:1522 | #0:1523 | #0:1527 | #0:1528 | #0:1529 | #0:1530 | #0:1532 | #0:1533)) @ {
  #0:127 -> [str | N(str)]
  #0:128 -> [str]
  #0:129 -> [str]
  #0:137 -> [str]
  #0:139 -> [str]
  #0:151 -> [str]
  #0:157 -> [str]
  #0:159 -> [str]
  #0:161 -> [str]
  #0:163 -> [str]
  #0:1519 -> [str]
  #0:1520 -> [str]
  #0:1522 -> [str]
  #0:1523 -> [str]
  #0:1527 -> [str]
  #0:1528 -> [str]
  #0:1529 -> [str]
  #0:1530 -> [str]
  #0:1532 -> [str]
  #0:1533 -> [str]
}
ModuleItemList[1,0].ImportEntries:[☊(ModuleItemList), ☊(ModuleItemList), ☊(ModuleItem)]: {
  env: {
    ModuleItem -> ! ☊(ModuleItem)
    ModuleItemList -> ! ☊(ModuleItemList)
    this -> ! ☊(ModuleItemList)
  }
} ---> N((#0:1491 | #0:1492 | #0:1494 | #0:1499 | #1:1497 | #1:1498 | #1:1501 | #1:1502)) @ {
  #0:1491 -> [(#0:1497 | #0:1498 | #0:1501 | #0:1502)]
  #0:1492 -> [(#0:1497 | #0:1498 | #0:1501 | #0:1502)]
  #0:1494 -> [(#0:1497 | #0:1498 | #0:1501 | #0:1502)]
  #0:1497 -> ImportEntryRecord {
    ImportName -> ! "default"
    LocalName -> ! str | N(str)
    ModuleRequest -> ! str
  }
  #0:1498 -> ImportEntryRecord {
    ImportName -> ! "*"
    LocalName -> ! N(str)
    ModuleRequest -> ! str
  }
  #0:1499 -> [(#0:1497 | #0:1498 | #0:1501 | #0:1502)]
  #0:1501 -> ImportEntryRecord {
    ImportName -> ! str | N(str)
    LocalName -> ! str | N(str)
    ModuleRequest -> ! str
  }
  #0:1502 -> ImportEntryRecord {
    ImportName -> ! str
    LocalName -> ! N(str)
    ModuleRequest -> ! str
  }
  #1:1497 -> [(#0:1497 | #0:1498 | #0:1501 | #0:1502)]
  #1:1498 -> [(#0:1497 | #0:1498 | #0:1501 | #0:1502)]
  #1:1501 -> [(#0:1497 | #0:1498 | #0:1501 | #0:1502)]
  #1:1502 -> [(#0:1497 | #0:1498 | #0:1501 | #0:1502)]
}
ModuleItemList[1,0].ModuleRequests:[☊(ModuleItemList), ☊(ModuleItemList), ☊(ModuleItem)]: {
  env: {
    ModuleItem -> ! ☊(ModuleItem)
    ModuleItemList -> ! ☊(ModuleItemList)
    this -> ! ☊(ModuleItemList)
  }
} ---> N((#0:1464 | #0:1466 | #0:1468 | #0:1469 | #0:1470 | #0:1471 | #0:1472 | #0:1473)) @ {
  #0:1464 -> [str]
  #0:1466 -> [str]
  #0:1468 -> [str]
  #0:1469 -> [str]
  #0:1470 -> [str]
  #0:1471 -> [str]
  #0:1472 -> [str]
  #0:1473 -> [str]
}
ModuleItem[0,0].ExportEntries:[☊(ModuleItem), ☊(ImportDeclaration)]: {
  env: {
    ImportDeclaration -> ! ☊(ImportDeclaration)
    this -> ! ☊(ModuleItem)
  }
} ---> N(#0:1536) @ {
  #0:1536 -> []
}
ModuleItem[0,0].ExportedBindings:[☊(ModuleItem), ☊(ImportDeclaration)]: {
  env: {
    ImportDeclaration -> ! ☊(ImportDeclaration)
    this -> ! ☊(ModuleItem)
  }
} ---> N(#0:1504) @ {
  #0:1504 -> []
}
ModuleItem[0,0].ExportedNames:[☊(ModuleItem), ☊(ImportDeclaration)]: {
  env: {
    ImportDeclaration -> ! ☊(ImportDeclaration)
    this -> ! ☊(ModuleItem)
  }
} ---> N(#0:1519) @ {
  #0:1519 -> []
}
ModuleItem[1,0].ExportedNames:[☊(ModuleItem), ☊(ExportDeclaration)]: {
  env: {
    ExportDeclaration -> ! ☊(ExportDeclaration)
    this -> ! ☊(ModuleItem)
  }
} ---> N((#0:127 | #0:128 | #0:129 | #0:137 | #0:139 | #0:151 | #0:157 | #0:159 | #0:161 | #0:163 | #0:1522 | #0:1523 | #0:1527 | #0:1528 | #0:1529 | #0:1530 | #0:1532 | #0:1533)) @ {
  #0:127 -> [str | N(str)]
  #0:128 -> [str]
  #0:129 -> [str]
  #0:137 -> [str]
  #0:139 -> [str]
  #0:151 -> ["*default*"]
  #0:157 -> ["*default*"]
  #0:159 -> ["*default*"]
  #0:161 -> ["*default*"]
  #0:163 -> ["*default*"]
  #0:1522 -> []
  #0:1523 -> [str]
  #0:1527 -> ["default"]
  #0:1528 -> ["default"]
  #0:1529 -> ["default"]
  #0:1530 -> []
  #0:1532 -> [str]
  #0:1533 -> [str]
}
ModuleItem[1,0].ImportEntries:[☊(ModuleItem), ☊(ExportDeclaration)]: {
  env: {
    ExportDeclaration -> ! ☊(ExportDeclaration)
    this -> ! ☊(ModuleItem)
  }
} ---> N(#0:1491) @ {
  #0:1491 -> []
}
ModuleItem[2,0].ExportEntries:[☊(ModuleItem), ☊(StatementListItem)]: {
  env: {
    StatementListItem -> ! ☊(StatementListItem)
    this -> ! ☊(ModuleItem)
  }
} ---> N(#0:1537) @ {
  #0:1537 -> []
}
ModuleItem[2,0].ExportedBindings:[☊(ModuleItem), ☊(StatementListItem)]: {
  env: {
    StatementListItem -> ! ☊(StatementListItem)
    this -> ! ☊(ModuleItem)
  }
} ---> N(#0:1505) @ {
  #0:1505 -> []
}
ModuleItem[2,0].ExportedNames:[☊(ModuleItem), ☊(StatementListItem)]: {
  env: {
    StatementListItem -> ! ☊(StatementListItem)
    this -> ! ☊(ModuleItem)
  }
} ---> N(#0:1520) @ {
  #0:1520 -> []
}
ModuleItem[2,0].ImportEntries:[☊(ModuleItem), ☊(StatementListItem)]: {
  env: {
    StatementListItem -> ! ☊(StatementListItem)
    this -> ! ☊(ModuleItem)
  }
} ---> N(#0:1492) @ {
  #0:1492 -> []
}
ModuleItem[2,0].ModuleRequests:[☊(ModuleItem), ☊(StatementListItem)]: {
  env: {
    StatementListItem -> ! ☊(StatementListItem)
    this -> ! ☊(ModuleItem)
  }
} ---> N(#0:1464) @ {
  #0:1464 -> []
}
ModuleSpecifier[0,0].ModuleRequests:[☊(ModuleSpecifier), ☊(StringLiteral)]: {
  env: {
    StringLiteral -> ! ☊(StringLiteral)
    this -> ! ☊(ModuleSpecifier)
  }
} ---> N(#0:1466) @ {
  #0:1466 -> [str]
}
Module[0,0].ExportEntries:[☊(Module)]: {
  env: {
    this -> ! ☊(Module)
  }
} ---> N(#0:1534) @ {
  #0:1534 -> []
}
Module[0,0].ImportEntries:[☊(Module)]: {
  env: {
    this -> ! ☊(Module)
  }
} ---> N(#0:1489) @ {
  #0:1489 -> []
}
Module[0,0].ModuleRequests:[☊(Module)]: {
  env: {
    this -> ! ☊(Module)
  }
} ---> N(#0:1461) @ {
  #0:1461 -> []
}
MultiplicativeExpression[1,0].AssignmentTargetType:[☊(MultiplicativeExpression), ☊(MultiplicativeExpression), ☊(MultiplicativeOperator), ☊(ExponentiationExpression)]: {
  env: {
    ExponentiationExpression -> ! ☊(ExponentiationExpression)
    MultiplicativeExpression -> ! ☊(MultiplicativeExpression)
    MultiplicativeOperator -> ! ☊(MultiplicativeOperator)
    this -> ! ☊(MultiplicativeExpression)
  }
} ---> N(~invalid~)
MultiplicativeExpression[1,0].IsFunctionDefinition:[☊(MultiplicativeExpression), ☊(MultiplicativeExpression), ☊(MultiplicativeOperator), ☊(ExponentiationExpression)]: {
  env: {
    ExponentiationExpression -> ! ☊(ExponentiationExpression)
    MultiplicativeExpression -> ! ☊(MultiplicativeExpression)
    MultiplicativeOperator -> ! ☊(MultiplicativeOperator)
    this -> ! ☊(MultiplicativeExpression)
  }
} ---> N(false)
NameSpaceImport[0,0].ImportEntriesForModule:[☊(NameSpaceImport), ☊(ImportedBinding), str]: {
  env: {
    ImportedBinding -> ! ☊(ImportedBinding)
    module -> ! str
    this -> ! ☊(NameSpaceImport)
  }
} ---> N(#1:1498) @ {
  #0:1498 -> ImportEntryRecord {
    ImportName -> ! "*"
    LocalName -> ! N(str)
    ModuleRequest -> ! str
  }
  #1:1498 -> [#0:1498]
}
NamedExports[0,0].ExportEntriesForModule:[☊(NamedExports), null]: {
  env: {
    module -> ! null
    this -> ! ☊(NamedExports)
  }
} ---> N(#0:1547) @ {
  #0:1547 -> []
}
NamedExports[0,0].ExportEntriesForModule:[☊(NamedExports), str]: {
  env: {
    module -> ! str
    this -> ! ☊(NamedExports)
  }
} ---> N(#0:1547) @ {
  #0:1547 -> []
}
NamedExports[0,0].ExportedBindings:[☊(NamedExports)]: {
  env: {
    this -> ! ☊(NamedExports)
  }
} ---> N(#0:1513) @ {
  #0:1513 -> []
}
NamedExports[0,0].ExportedNames:[☊(NamedExports)]: {
  env: {
    this -> ! ☊(NamedExports)
  }
} ---> N(#0:1530) @ {
  #0:1530 -> []
}
NamedImports[0,0].BoundNames:[☊(NamedImports)]: {
  env: {
    this -> ! ☊(NamedImports)
  }
} ---> N(#0:169) @ {
  #0:169 -> []
}
NamedImports[0,0].ImportEntriesForModule:[☊(NamedImports), str]: {
  env: {
    module -> ! str
    this -> ! ☊(NamedImports)
  }
} ---> N(#0:1499) @ {
  #0:1499 -> []
}
NewExpression[1,0].AssignmentTargetType:[☊(NewExpression), ☊(NewExpression)]: {
  env: {
    NewExpression -> ! ☊(NewExpression)
    this -> ! ☊(NewExpression)
  }
} ---> N(~invalid~)
NewExpression[1,0].IsDestructuring:[☊(NewExpression), ☊(NewExpression)]: {
  env: {
    NewExpression -> ! ☊(NewExpression)
    this -> ! ☊(NewExpression)
  }
} ---> N(false)
NewExpression[1,0].IsFunctionDefinition:[☊(NewExpression), ☊(NewExpression)]: {
  env: {
    NewExpression -> ! ☊(NewExpression)
    this -> ! ☊(NewExpression)
  }
} ---> N(false)
NewExpression[1,0].IsIdentifierRef:[☊(NewExpression), ☊(NewExpression)]: {
  env: {
    NewExpression -> ! ☊(NewExpression)
    this -> ! ☊(NewExpression)
  }
} ---> N(false)
NewTarget[0,0].AssignmentTargetType:[☊(NewTarget)]: {
  env: {
    this -> ! ☊(NewTarget)
  }
} ---> N(~invalid~)
Number::toString:[num]: {
  env: {
    x -> ! num
  }
} ---> N(str)
ObjectBindingPattern[0,0].BoundNames:[☊(ObjectBindingPattern)]: {
  env: {
    this -> ! ☊(ObjectBindingPattern)
  }
} ---> N(#0:137) @ {
  #0:137 -> []
}
ObjectBindingPattern[0,0].ContainsExpression:[☊(ObjectBindingPattern)]: {
  env: {
    this -> ! ☊(ObjectBindingPattern)
  }
} ---> N(false)
ObjectBindingPattern[1,0].ContainsExpression:[☊(ObjectBindingPattern), ☊(BindingRestProperty)]: {
  env: {
    BindingRestProperty -> ! ☊(BindingRestProperty)
    this -> ! ☊(ObjectBindingPattern)
  }
} ---> N(false)
ObjectBindingPattern[3,1].BoundNames:[☊(ObjectBindingPattern), ☊(BindingPropertyList), ☊(BindingRestProperty)]: {
  env: {
    BindingPropertyList -> ! ☊(BindingPropertyList)
    BindingRestProperty -> ! ☊(BindingRestProperty)
    this -> ! ☊(ObjectBindingPattern)
  }
} ---> N((#0:127 | #0:128 | #0:129 | #0:137 | #0:139)) @ {
  #0:127 -> [str | N(str)]
  #0:128 -> [str]
  #0:129 -> [str]
  #0:137 -> [str]
  #0:139 -> [str]
}
ObjectEnvironmentRecord.HasBinding:[EnvironmentRecord, Normal(str)]: {
  env: {
    N -> ! N(str)
    envRec -> ! EnvironmentRecord
  }
} ---> N(false)
ObjectEnvironmentRecord.HasBinding:[EnvironmentRecord, str]: {
  env: {
    N -> ! str
    envRec -> ! EnvironmentRecord
  }
} ---> N(false)
ObjectEnvironmentRecord.HasThisBinding:[EnvironmentRecord]: {
  env: {
    envRec -> ! EnvironmentRecord
  }
} ---> N(false)
OrdinaryGetOwnProperty:[OrdinaryObject, Normal(str)]: {
  env: {
    O -> ! OrdinaryObject
    P -> ! N(str)
  }
} ---> N(undef)
OrdinaryGetOwnProperty:[OrdinaryObject, str]: {
  env: {
    O -> ! OrdinaryObject
    P -> ! str
  }
} ---> N(undef)
OrdinaryGetPrototypeOf:[OrdinaryObject]: {
  env: {
    O -> ! OrdinaryObject
  }
} ---> N(Object | null)
OrdinaryHasProperty:[OrdinaryObject, Normal(str)]: {
  env: {
    O -> ! OrdinaryObject
    P -> ! N(str)
  }
} ---> N(false)
OrdinaryHasProperty:[OrdinaryObject, str]: {
  env: {
    O -> ! OrdinaryObject
    P -> ! str
  }
} ---> N(false)
OrdinaryObject.GetOwnProperty:[OrdinaryObject, Normal(str)]: {
  env: {
    O -> ! OrdinaryObject
    P -> ! N(str)
  }
} ---> N(undef)
OrdinaryObject.GetOwnProperty:[OrdinaryObject, str]: {
  env: {
    O -> ! OrdinaryObject
    P -> ! str
  }
} ---> N(undef)
OrdinaryObject.GetPrototypeOf:[OrdinaryObject]: {
  env: {
    O -> ! OrdinaryObject
  }
} ---> N(Object | null)
OrdinaryObject.HasProperty:[OrdinaryObject, Normal(str)]: {
  env: {
    O -> ! OrdinaryObject
    P -> ! N(str)
  }
} ---> N(false)
OrdinaryObject.HasProperty:[OrdinaryObject, str]: {
  env: {
    O -> ! OrdinaryObject
    P -> ! str
  }
} ---> N(false)
OrdinaryObjectCreate:[null]: {
  env: {
    additionalInternalSlotsList -> ! ?
    proto -> ! null
  }
} ---> N(#0:92) @ {
  #0:92 -> OrdinaryObject {
    Extensible -> ? true
    Prototype -> ! null
    SubMap -> ! #1:92
  }
  #1:92 -> SubMap {}
}
PrimaryExpression[0,0].AssignmentTargetType:[☊(PrimaryExpression)]: {
  env: {
    this -> ! ☊(PrimaryExpression)
  }
} ---> N(~invalid~)
PrimaryExpression[0,0].Evaluation:[☊(PrimaryExpression)]: {
  env: {
    this -> ! ☊(PrimaryExpression)
  }
} ---> N(#Global | Object | num | bigint | str | bool | undef | null) | T(#0:757) @ {
  #0:757 -> OrdinaryObject {
    ErrorData -> ! undef
    Prototype -> ! #%ReferenceError.prototype%
  }
}
PrimaryExpression[0,0].IsFunctionDefinition:[☊(PrimaryExpression)]: {
  env: {
    this -> ! ☊(PrimaryExpression)
  }
} ---> N(false)
PrimaryExpression[0,0].IsIdentifierRef:[☊(PrimaryExpression)]: {
  env: {
    this -> ! ☊(PrimaryExpression)
  }
} ---> N(false)
PrimaryExpression[1,0].IsFunctionDefinition:[☊(PrimaryExpression), ☊(IdentifierReference)]: {
  env: {
    IdentifierReference -> ! ☊(IdentifierReference)
    this -> ! ☊(PrimaryExpression)
  }
} ---> N(false)
PrimaryExpression[1,0].IsIdentifierRef:[☊(PrimaryExpression), ☊(IdentifierReference)]: {
  env: {
    IdentifierReference -> ! ☊(IdentifierReference)
    this -> ! ☊(PrimaryExpression)
  }
} ---> N(true)
PrimaryExpression[10,0].AssignmentTargetType:[☊(PrimaryExpression), ☊(RegularExpressionLiteral)]: {
  env: {
    RegularExpressionLiteral -> ! ☊(RegularExpressionLiteral)
    this -> ! ☊(PrimaryExpression)
  }
} ---> N(~invalid~)
PrimaryExpression[10,0].IsFunctionDefinition:[☊(PrimaryExpression), ☊(RegularExpressionLiteral)]: {
  env: {
    RegularExpressionLiteral -> ! ☊(RegularExpressionLiteral)
    this -> ! ☊(PrimaryExpression)
  }
} ---> N(false)
PrimaryExpression[10,0].IsIdentifierRef:[☊(PrimaryExpression), ☊(RegularExpressionLiteral)]: {
  env: {
    RegularExpressionLiteral -> ! ☊(RegularExpressionLiteral)
    this -> ! ☊(PrimaryExpression)
  }
} ---> N(false)
PrimaryExpression[11,0].AssignmentTargetType:[☊(PrimaryExpression), ☊(TemplateLiteral)]: {
  env: {
    TemplateLiteral -> ! ☊(TemplateLiteral)
    this -> ! ☊(PrimaryExpression)
  }
} ---> N(~invalid~)
PrimaryExpression[11,0].IsFunctionDefinition:[☊(PrimaryExpression), ☊(TemplateLiteral)]: {
  env: {
    TemplateLiteral -> ! ☊(TemplateLiteral)
    this -> ! ☊(PrimaryExpression)
  }
} ---> N(false)
PrimaryExpression[11,0].IsIdentifierRef:[☊(PrimaryExpression), ☊(TemplateLiteral)]: {
  env: {
    TemplateLiteral -> ! ☊(TemplateLiteral)
    this -> ! ☊(PrimaryExpression)
  }
} ---> N(false)
PrimaryExpression[12,0].AssignmentTargetType:[☊(PrimaryExpression), ☊(CoverParenthesizedExpressionAndArrowParameterList)]: {
  env: {
    CoverParenthesizedExpressionAndArrowParameterList -> ! ☊(CoverParenthesizedExpressionAndArrowParameterList)
    this -> ! ☊(PrimaryExpression)
  }
} ---> N((~invalid~ | ~simple~))
PrimaryExpression[12,0].HasName:[☊(PrimaryExpression), ☊(CoverParenthesizedExpressionAndArrowParameterList)]: {
  env: {
    CoverParenthesizedExpressionAndArrowParameterList -> ! ☊(CoverParenthesizedExpressionAndArrowParameterList)
    this -> ! ☊(PrimaryExpression)
  }
} ---> N(bool)
PrimaryExpression[12,0].IsFunctionDefinition:[☊(PrimaryExpression), ☊(CoverParenthesizedExpressionAndArrowParameterList)]: {
  env: {
    CoverParenthesizedExpressionAndArrowParameterList -> ! ☊(CoverParenthesizedExpressionAndArrowParameterList)
    this -> ! ☊(PrimaryExpression)
  }
} ---> N(bool)
PrimaryExpression[12,0].IsIdentifierRef:[☊(PrimaryExpression), ☊(CoverParenthesizedExpressionAndArrowParameterList)]: {
  env: {
    CoverParenthesizedExpressionAndArrowParameterList -> ! ☊(CoverParenthesizedExpressionAndArrowParameterList)
    this -> ! ☊(PrimaryExpression)
  }
} ---> N(false)
PrimaryExpression[2,0].AssignmentTargetType:[☊(PrimaryExpression), ☊(Literal)]: {
  env: {
    Literal -> ! ☊(Literal)
    this -> ! ☊(PrimaryExpression)
  }
} ---> N(~invalid~)
PrimaryExpression[2,0].IsFunctionDefinition:[☊(PrimaryExpression), ☊(Literal)]: {
  env: {
    Literal -> ! ☊(Literal)
    this -> ! ☊(PrimaryExpression)
  }
} ---> N(false)
PrimaryExpression[2,0].IsIdentifierRef:[☊(PrimaryExpression), ☊(Literal)]: {
  env: {
    Literal -> ! ☊(Literal)
    this -> ! ☊(PrimaryExpression)
  }
} ---> N(false)
PrimaryExpression[3,0].AssignmentTargetType:[☊(PrimaryExpression), ☊(ArrayLiteral)]: {
  env: {
    ArrayLiteral -> ! ☊(ArrayLiteral)
    this -> ! ☊(PrimaryExpression)
  }
} ---> N(~invalid~)
PrimaryExpression[3,0].IsFunctionDefinition:[☊(PrimaryExpression), ☊(ArrayLiteral)]: {
  env: {
    ArrayLiteral -> ! ☊(ArrayLiteral)
    this -> ! ☊(PrimaryExpression)
  }
} ---> N(false)
PrimaryExpression[3,0].IsIdentifierRef:[☊(PrimaryExpression), ☊(ArrayLiteral)]: {
  env: {
    ArrayLiteral -> ! ☊(ArrayLiteral)
    this -> ! ☊(PrimaryExpression)
  }
} ---> N(false)
PrimaryExpression[4,0].AssignmentTargetType:[☊(PrimaryExpression), ☊(ObjectLiteral)]: {
  env: {
    ObjectLiteral -> ! ☊(ObjectLiteral)
    this -> ! ☊(PrimaryExpression)
  }
} ---> N(~invalid~)
PrimaryExpression[4,0].IsFunctionDefinition:[☊(PrimaryExpression), ☊(ObjectLiteral)]: {
  env: {
    ObjectLiteral -> ! ☊(ObjectLiteral)
    this -> ! ☊(PrimaryExpression)
  }
} ---> N(false)
PrimaryExpression[4,0].IsIdentifierRef:[☊(PrimaryExpression), ☊(ObjectLiteral)]: {
  env: {
    ObjectLiteral -> ! ☊(ObjectLiteral)
    this -> ! ☊(PrimaryExpression)
  }
} ---> N(false)
PrimaryExpression[5,0].AssignmentTargetType:[☊(PrimaryExpression), ☊(FunctionExpression)]: {
  env: {
    FunctionExpression -> ! ☊(FunctionExpression)
    this -> ! ☊(PrimaryExpression)
  }
} ---> N(~invalid~)
PrimaryExpression[5,0].IsIdentifierRef:[☊(PrimaryExpression), ☊(FunctionExpression)]: {
  env: {
    FunctionExpression -> ! ☊(FunctionExpression)
    this -> ! ☊(PrimaryExpression)
  }
} ---> N(false)
PrimaryExpression[6,0].AssignmentTargetType:[☊(PrimaryExpression), ☊(ClassExpression)]: {
  env: {
    ClassExpression -> ! ☊(ClassExpression)
    this -> ! ☊(PrimaryExpression)
  }
} ---> N(~invalid~)
PrimaryExpression[6,0].IsIdentifierRef:[☊(PrimaryExpression), ☊(ClassExpression)]: {
  env: {
    ClassExpression -> ! ☊(ClassExpression)
    this -> ! ☊(PrimaryExpression)
  }
} ---> N(false)
PrimaryExpression[7,0].AssignmentTargetType:[☊(PrimaryExpression), ☊(GeneratorExpression)]: {
  env: {
    GeneratorExpression -> ! ☊(GeneratorExpression)
    this -> ! ☊(PrimaryExpression)
  }
} ---> N(~invalid~)
PrimaryExpression[7,0].IsIdentifierRef:[☊(PrimaryExpression), ☊(GeneratorExpression)]: {
  env: {
    GeneratorExpression -> ! ☊(GeneratorExpression)
    this -> ! ☊(PrimaryExpression)
  }
} ---> N(false)
PrimaryExpression[8,0].AssignmentTargetType:[☊(PrimaryExpression), ☊(AsyncFunctionExpression)]: {
  env: {
    AsyncFunctionExpression -> ! ☊(AsyncFunctionExpression)
    this -> ! ☊(PrimaryExpression)
  }
} ---> N(~invalid~)
PrimaryExpression[8,0].IsIdentifierRef:[☊(PrimaryExpression), ☊(AsyncFunctionExpression)]: {
  env: {
    AsyncFunctionExpression -> ! ☊(AsyncFunctionExpression)
    this -> ! ☊(PrimaryExpression)
  }
} ---> N(false)
PrimaryExpression[9,0].AssignmentTargetType:[☊(PrimaryExpression), ☊(AsyncGeneratorExpression)]: {
  env: {
    AsyncGeneratorExpression -> ! ☊(AsyncGeneratorExpression)
    this -> ! ☊(PrimaryExpression)
  }
} ---> N(~invalid~)
PrimaryExpression[9,0].IsIdentifierRef:[☊(PrimaryExpression), ☊(AsyncGeneratorExpression)]: {
  env: {
    AsyncGeneratorExpression -> ! ☊(AsyncGeneratorExpression)
    this -> ! ☊(PrimaryExpression)
  }
} ---> N(false)
PropertyDefinition[0,0].PropName:[☊(PropertyDefinition), ☊(IdentifierReference)]: {
  env: {
    IdentifierReference -> ! ☊(IdentifierReference)
    this -> ! ☊(PropertyDefinition)
  }
} ---> N(str)
PropertyDefinition[1,0].EarlyErrors:[☊(PropertyDefinition), ☊(CoverInitializedName)]: {
  env: {
    CoverInitializedName -> ! ☊(CoverInitializedName)
    this -> ! ☊(PropertyDefinition)
  }
} ---> T(#0:2156) @ {
  #0:2156 -> OrdinaryObject {
    ErrorData -> ! undef
    Prototype -> ! #%SyntaxError.prototype%
  }
}
PropertyDefinition[2,0].PropName:[☊(PropertyDefinition), ☊(PropertyName), ☊(AssignmentExpression)]: {
  env: {
    AssignmentExpression -> ! ☊(AssignmentExpression)
    PropertyName -> ! ☊(PropertyName)
    this -> ! ☊(PropertyDefinition)
  }
} ---> N(~empty~ | str)
PropertyDefinition[4,0].PropName:[☊(PropertyDefinition), ☊(AssignmentExpression)]: {
  env: {
    AssignmentExpression -> ! ☊(AssignmentExpression)
    this -> ! ☊(PropertyDefinition)
  }
} ---> N(~empty~)
PropertyName[0,0].IsComputedPropertyKey:[☊(PropertyName), ☊(LiteralPropertyName)]: {
  env: {
    LiteralPropertyName -> ! ☊(LiteralPropertyName)
    this -> ! ☊(PropertyName)
  }
} ---> N(false)
PropertyName[1,0].IsComputedPropertyKey:[☊(PropertyName), ☊(ComputedPropertyName)]: {
  env: {
    ComputedPropertyName -> ! ☊(ComputedPropertyName)
    this -> ! ☊(PropertyName)
  }
} ---> N(true)
RelationalExpression[1,0].AssignmentTargetType:[☊(RelationalExpression), ☊(RelationalExpression), ☊(ShiftExpression)]: {
  env: {
    RelationalExpression -> ! ☊(RelationalExpression)
    ShiftExpression -> ! ☊(ShiftExpression)
    this -> ! ☊(RelationalExpression)
  }
} ---> N(~invalid~)
RelationalExpression[1,0].IsFunctionDefinition:[☊(RelationalExpression), ☊(RelationalExpression), ☊(ShiftExpression)]: {
  env: {
    RelationalExpression -> ! ☊(RelationalExpression)
    ShiftExpression -> ! ☊(ShiftExpression)
    this -> ! ☊(RelationalExpression)
  }
} ---> N(false)
RelationalExpression[2,0].AssignmentTargetType:[☊(RelationalExpression), ☊(RelationalExpression), ☊(ShiftExpression)]: {
  env: {
    RelationalExpression -> ! ☊(RelationalExpression)
    ShiftExpression -> ! ☊(ShiftExpression)
    this -> ! ☊(RelationalExpression)
  }
} ---> N(~invalid~)
RelationalExpression[2,0].IsFunctionDefinition:[☊(RelationalExpression), ☊(RelationalExpression), ☊(ShiftExpression)]: {
  env: {
    RelationalExpression -> ! ☊(RelationalExpression)
    ShiftExpression -> ! ☊(ShiftExpression)
    this -> ! ☊(RelationalExpression)
  }
} ---> N(false)
RelationalExpression[3,0].AssignmentTargetType:[☊(RelationalExpression), ☊(RelationalExpression), ☊(ShiftExpression)]: {
  env: {
    RelationalExpression -> ! ☊(RelationalExpression)
    ShiftExpression -> ! ☊(ShiftExpression)
    this -> ! ☊(RelationalExpression)
  }
} ---> N(~invalid~)
RelationalExpression[3,0].IsFunctionDefinition:[☊(RelationalExpression), ☊(RelationalExpression), ☊(ShiftExpression)]: {
  env: {
    RelationalExpression -> ! ☊(RelationalExpression)
    ShiftExpression -> ! ☊(ShiftExpression)
    this -> ! ☊(RelationalExpression)
  }
} ---> N(false)
RelationalExpression[4,0].AssignmentTargetType:[☊(RelationalExpression), ☊(RelationalExpression), ☊(ShiftExpression)]: {
  env: {
    RelationalExpression -> ! ☊(RelationalExpression)
    ShiftExpression -> ! ☊(ShiftExpression)
    this -> ! ☊(RelationalExpression)
  }
} ---> N(~invalid~)
RelationalExpression[4,0].IsFunctionDefinition:[☊(RelationalExpression), ☊(RelationalExpression), ☊(ShiftExpression)]: {
  env: {
    RelationalExpression -> ! ☊(RelationalExpression)
    ShiftExpression -> ! ☊(ShiftExpression)
    this -> ! ☊(RelationalExpression)
  }
} ---> N(false)
RelationalExpression[5,0].AssignmentTargetType:[☊(RelationalExpression), ☊(RelationalExpression), ☊(ShiftExpression)]: {
  env: {
    RelationalExpression -> ! ☊(RelationalExpression)
    ShiftExpression -> ! ☊(ShiftExpression)
    this -> ! ☊(RelationalExpression)
  }
} ---> N(~invalid~)
RelationalExpression[5,0].IsFunctionDefinition:[☊(RelationalExpression), ☊(RelationalExpression), ☊(ShiftExpression)]: {
  env: {
    RelationalExpression -> ! ☊(RelationalExpression)
    ShiftExpression -> ! ☊(ShiftExpression)
    this -> ! ☊(RelationalExpression)
  }
} ---> N(false)
RelationalExpression[6,0].AssignmentTargetType:[☊(RelationalExpression), ☊(RelationalExpression), ☊(ShiftExpression)]: {
  env: {
    RelationalExpression -> ! ☊(RelationalExpression)
    ShiftExpression -> ! ☊(ShiftExpression)
    this -> ! ☊(RelationalExpression)
  }
} ---> N(~invalid~)
RelationalExpression[6,0].IsFunctionDefinition:[☊(RelationalExpression), ☊(RelationalExpression), ☊(ShiftExpression)]: {
  env: {
    RelationalExpression -> ! ☊(RelationalExpression)
    ShiftExpression -> ! ☊(ShiftExpression)
    this -> ! ☊(RelationalExpression)
  }
} ---> N(false)
ResolveBinding:[Normal(str)]: {
  env: {
    env -> ! ?
    name -> ! N(str)
  }
} ---> N(#0:781) @ {
  #0:781 -> ReferenceRecord {
    Base -> ! ~unresolvable~
    ReferencedName -> ! N(str)
    Strict -> ! true
    ThisValue -> ! ~empty~
  }
}
ResolveBinding:[str]: {
  env: {
    env -> ! ?
    name -> ! str
  }
} ---> N(#0:781) @ {
  #0:781 -> ReferenceRecord {
    Base -> ! ~unresolvable~
    ReferencedName -> ! str
    Strict -> ! true
    ThisValue -> ! ~empty~
  }
}
ResolveThisBinding:[]: ɛ ---> N(#Global | Object | num | bigint | str | bool | undef | null) | T(#0:757) @ {
  #0:757 -> OrdinaryObject {
    ErrorData -> ! undef
    Prototype -> ! #%ReferenceError.prototype%
  }
}
ShiftExpression[1,0].AssignmentTargetType:[☊(ShiftExpression), ☊(ShiftExpression), ☊(AdditiveExpression)]: {
  env: {
    AdditiveExpression -> ! ☊(AdditiveExpression)
    ShiftExpression -> ! ☊(ShiftExpression)
    this -> ! ☊(ShiftExpression)
  }
} ---> N(~invalid~)
ShiftExpression[1,0].IsFunctionDefinition:[☊(ShiftExpression), ☊(ShiftExpression), ☊(AdditiveExpression)]: {
  env: {
    AdditiveExpression -> ! ☊(AdditiveExpression)
    ShiftExpression -> ! ☊(ShiftExpression)
    this -> ! ☊(ShiftExpression)
  }
} ---> N(false)
ShiftExpression[2,0].AssignmentTargetType:[☊(ShiftExpression), ☊(ShiftExpression), ☊(AdditiveExpression)]: {
  env: {
    AdditiveExpression -> ! ☊(AdditiveExpression)
    ShiftExpression -> ! ☊(ShiftExpression)
    this -> ! ☊(ShiftExpression)
  }
} ---> N(~invalid~)
ShiftExpression[2,0].IsFunctionDefinition:[☊(ShiftExpression), ☊(ShiftExpression), ☊(AdditiveExpression)]: {
  env: {
    AdditiveExpression -> ! ☊(AdditiveExpression)
    ShiftExpression -> ! ☊(ShiftExpression)
    this -> ! ☊(ShiftExpression)
  }
} ---> N(false)
ShiftExpression[3,0].AssignmentTargetType:[☊(ShiftExpression), ☊(ShiftExpression), ☊(AdditiveExpression)]: {
  env: {
    AdditiveExpression -> ! ☊(AdditiveExpression)
    ShiftExpression -> ! ☊(ShiftExpression)
    this -> ! ☊(ShiftExpression)
  }
} ---> N(~invalid~)
ShiftExpression[3,0].IsFunctionDefinition:[☊(ShiftExpression), ☊(ShiftExpression), ☊(AdditiveExpression)]: {
  env: {
    AdditiveExpression -> ! ☊(AdditiveExpression)
    ShiftExpression -> ! ☊(ShiftExpression)
    this -> ! ☊(ShiftExpression)
  }
} ---> N(false)
SingleNameBinding[0,0].ContainsExpression:[☊(SingleNameBinding), ☊(BindingIdentifier)]: {
  env: {
    BindingIdentifier -> ! ☊(BindingIdentifier)
    this -> ! ☊(SingleNameBinding)
  }
} ---> N(false)
SingleNameBinding[0,0].HasInitializer:[☊(SingleNameBinding), ☊(BindingIdentifier)]: {
  env: {
    BindingIdentifier -> ! ☊(BindingIdentifier)
    this -> ! ☊(SingleNameBinding)
  }
} ---> N(false)
SingleNameBinding[0,0].IsSimpleParameterList:[☊(SingleNameBinding), ☊(BindingIdentifier)]: {
  env: {
    BindingIdentifier -> ! ☊(BindingIdentifier)
    this -> ! ☊(SingleNameBinding)
  }
} ---> N(true)
SingleNameBinding[0,1].BoundNames:[☊(SingleNameBinding), ☊(BindingIdentifier), ?]: {
  env: {
    BindingIdentifier -> ! ☊(BindingIdentifier)
    Initializer -> ! ?
    this -> ! ☊(SingleNameBinding)
  }
} ---> N((#0:127 | #0:128 | #0:129)) @ {
  #0:127 -> [N(str)]
  #0:128 -> ["yield"]
  #0:129 -> ["await"]
}
SingleNameBinding[0,1].BoundNames:[☊(SingleNameBinding), ☊(BindingIdentifier), ☊(Initializer)]: {
  env: {
    BindingIdentifier -> ! ☊(BindingIdentifier)
    Initializer -> ! ☊(Initializer)
    this -> ! ☊(SingleNameBinding)
  }
} ---> N((#0:127 | #0:128 | #0:129)) @ {
  #0:127 -> [N(str)]
  #0:128 -> ["yield"]
  #0:129 -> ["await"]
}
SingleNameBinding[0,1].ContainsExpression:[☊(SingleNameBinding), ☊(BindingIdentifier), ☊(Initializer)]: {
  env: {
    BindingIdentifier -> ! ☊(BindingIdentifier)
    Initializer -> ! ☊(Initializer)
    this -> ! ☊(SingleNameBinding)
  }
} ---> N(true)
SingleNameBinding[0,1].HasInitializer:[☊(SingleNameBinding), ☊(BindingIdentifier), ☊(Initializer)]: {
  env: {
    BindingIdentifier -> ! ☊(BindingIdentifier)
    Initializer -> ! ☊(Initializer)
    this -> ! ☊(SingleNameBinding)
  }
} ---> N(true)
SingleNameBinding[0,1].IsSimpleParameterList:[☊(SingleNameBinding), ☊(BindingIdentifier), ☊(Initializer)]: {
  env: {
    BindingIdentifier -> ! ☊(BindingIdentifier)
    Initializer -> ! ☊(Initializer)
    this -> ! ☊(SingleNameBinding)
  }
} ---> N(false)
ToString:[num]: {
  env: {
    argument -> ! num
  }
} ---> N(str)
UnaryExpression[1,0].AssignmentTargetType:[☊(UnaryExpression), ☊(UnaryExpression)]: {
  env: {
    UnaryExpression -> ! ☊(UnaryExpression)
    this -> ! ☊(UnaryExpression)
  }
} ---> N(~invalid~)
UnaryExpression[1,0].IsFunctionDefinition:[☊(UnaryExpression), ☊(UnaryExpression)]: {
  env: {
    UnaryExpression -> ! ☊(UnaryExpression)
    this -> ! ☊(UnaryExpression)
  }
} ---> N(false)
UnaryExpression[2,0].AssignmentTargetType:[☊(UnaryExpression), ☊(UnaryExpression)]: {
  env: {
    UnaryExpression -> ! ☊(UnaryExpression)
    this -> ! ☊(UnaryExpression)
  }
} ---> N(~invalid~)
UnaryExpression[2,0].IsFunctionDefinition:[☊(UnaryExpression), ☊(UnaryExpression)]: {
  env: {
    UnaryExpression -> ! ☊(UnaryExpression)
    this -> ! ☊(UnaryExpression)
  }
} ---> N(false)
UnaryExpression[3,0].AssignmentTargetType:[☊(UnaryExpression), ☊(UnaryExpression)]: {
  env: {
    UnaryExpression -> ! ☊(UnaryExpression)
    this -> ! ☊(UnaryExpression)
  }
} ---> N(~invalid~)
UnaryExpression[3,0].IsFunctionDefinition:[☊(UnaryExpression), ☊(UnaryExpression)]: {
  env: {
    UnaryExpression -> ! ☊(UnaryExpression)
    this -> ! ☊(UnaryExpression)
  }
} ---> N(false)
UnaryExpression[4,0].AssignmentTargetType:[☊(UnaryExpression), ☊(UnaryExpression)]: {
  env: {
    UnaryExpression -> ! ☊(UnaryExpression)
    this -> ! ☊(UnaryExpression)
  }
} ---> N(~invalid~)
UnaryExpression[4,0].IsFunctionDefinition:[☊(UnaryExpression), ☊(UnaryExpression)]: {
  env: {
    UnaryExpression -> ! ☊(UnaryExpression)
    this -> ! ☊(UnaryExpression)
  }
} ---> N(false)
UnaryExpression[5,0].AssignmentTargetType:[☊(UnaryExpression), ☊(UnaryExpression)]: {
  env: {
    UnaryExpression -> ! ☊(UnaryExpression)
    this -> ! ☊(UnaryExpression)
  }
} ---> N(~invalid~)
UnaryExpression[5,0].IsFunctionDefinition:[☊(UnaryExpression), ☊(UnaryExpression)]: {
  env: {
    UnaryExpression -> ! ☊(UnaryExpression)
    this -> ! ☊(UnaryExpression)
  }
} ---> N(false)
UnaryExpression[6,0].AssignmentTargetType:[☊(UnaryExpression), ☊(UnaryExpression)]: {
  env: {
    UnaryExpression -> ! ☊(UnaryExpression)
    this -> ! ☊(UnaryExpression)
  }
} ---> N(~invalid~)
UnaryExpression[6,0].IsFunctionDefinition:[☊(UnaryExpression), ☊(UnaryExpression)]: {
  env: {
    UnaryExpression -> ! ☊(UnaryExpression)
    this -> ! ☊(UnaryExpression)
  }
} ---> N(false)
UnaryExpression[7,0].AssignmentTargetType:[☊(UnaryExpression), ☊(UnaryExpression)]: {
  env: {
    UnaryExpression -> ! ☊(UnaryExpression)
    this -> ! ☊(UnaryExpression)
  }
} ---> N(~invalid~)
UnaryExpression[7,0].IsFunctionDefinition:[☊(UnaryExpression), ☊(UnaryExpression)]: {
  env: {
    UnaryExpression -> ! ☊(UnaryExpression)
    this -> ! ☊(UnaryExpression)
  }
} ---> N(false)
UnaryExpression[8,0].AssignmentTargetType:[☊(UnaryExpression), ☊(AwaitExpression)]: {
  env: {
    AwaitExpression -> ! ☊(AwaitExpression)
    this -> ! ☊(UnaryExpression)
  }
} ---> N(~invalid~)
UnaryExpression[8,0].IsFunctionDefinition:[☊(UnaryExpression), ☊(AwaitExpression)]: {
  env: {
    AwaitExpression -> ! ☊(AwaitExpression)
    this -> ! ☊(UnaryExpression)
  }
} ---> N(false)
UpdateExpression[1,0].AssignmentTargetType:[☊(UpdateExpression), ☊(LeftHandSideExpression)]: {
  env: {
    LeftHandSideExpression -> ! ☊(LeftHandSideExpression)
    this -> ! ☊(UpdateExpression)
  }
} ---> N(~invalid~)
UpdateExpression[1,0].IsFunctionDefinition:[☊(UpdateExpression), ☊(LeftHandSideExpression)]: {
  env: {
    LeftHandSideExpression -> ! ☊(LeftHandSideExpression)
    this -> ! ☊(UpdateExpression)
  }
} ---> N(false)
UpdateExpression[2,0].AssignmentTargetType:[☊(UpdateExpression), ☊(LeftHandSideExpression)]: {
  env: {
    LeftHandSideExpression -> ! ☊(LeftHandSideExpression)
    this -> ! ☊(UpdateExpression)
  }
} ---> N(~invalid~)
UpdateExpression[2,0].IsFunctionDefinition:[☊(UpdateExpression), ☊(LeftHandSideExpression)]: {
  env: {
    LeftHandSideExpression -> ! ☊(LeftHandSideExpression)
    this -> ! ☊(UpdateExpression)
  }
} ---> N(false)
UpdateExpression[3,0].AssignmentTargetType:[☊(UpdateExpression), ☊(UnaryExpression)]: {
  env: {
    UnaryExpression -> ! ☊(UnaryExpression)
    this -> ! ☊(UpdateExpression)
  }
} ---> N(~invalid~)
UpdateExpression[3,0].IsFunctionDefinition:[☊(UpdateExpression), ☊(UnaryExpression)]: {
  env: {
    UnaryExpression -> ! ☊(UnaryExpression)
    this -> ! ☊(UpdateExpression)
  }
} ---> N(false)
UpdateExpression[4,0].AssignmentTargetType:[☊(UpdateExpression), ☊(UnaryExpression)]: {
  env: {
    UnaryExpression -> ! ☊(UnaryExpression)
    this -> ! ☊(UpdateExpression)
  }
} ---> N(~invalid~)
UpdateExpression[4,0].IsFunctionDefinition:[☊(UpdateExpression), ☊(UnaryExpression)]: {
  env: {
    UnaryExpression -> ! ☊(UnaryExpression)
    this -> ! ☊(UpdateExpression)
  }
} ---> N(false)
VariableDeclarationList[1,0].BoundNames:[☊(VariableDeclarationList), ☊(VariableDeclarationList), ☊(VariableDeclaration)]: {
  env: {
    VariableDeclaration -> ! ☊(VariableDeclaration)
    VariableDeclarationList -> ! ☊(VariableDeclarationList)
    this -> ! ☊(VariableDeclarationList)
  }
} ---> N((#0:127 | #0:128 | #0:129 | #0:137 | #0:139)) @ {
  #0:127 -> [str | N(str)]
  #0:128 -> [str]
  #0:129 -> [str]
  #0:137 -> [str]
  #0:139 -> [str]
}
VariableDeclaration[0,1].BoundNames:[☊(VariableDeclaration), ☊(BindingIdentifier), ?]: {
  env: {
    BindingIdentifier -> ! ☊(BindingIdentifier)
    Initializer -> ! ?
    this -> ! ☊(VariableDeclaration)
  }
} ---> N((#0:127 | #0:128 | #0:129)) @ {
  #0:127 -> [N(str)]
  #0:128 -> ["yield"]
  #0:129 -> ["await"]
}
VariableDeclaration[0,1].BoundNames:[☊(VariableDeclaration), ☊(BindingIdentifier), ☊(Initializer)]: {
  env: {
    BindingIdentifier -> ! ☊(BindingIdentifier)
    Initializer -> ! ☊(Initializer)
    this -> ! ☊(VariableDeclaration)
  }
} ---> N((#0:127 | #0:128 | #0:129)) @ {
  #0:127 -> [N(str)]
  #0:128 -> ["yield"]
  #0:129 -> ["await"]
}
VariableDeclaration[1,0].BoundNames:[☊(VariableDeclaration), ☊(BindingPattern), ☊(Initializer)]: {
  env: {
    BindingPattern -> ! ☊(BindingPattern)
    Initializer -> ! ☊(Initializer)
    this -> ! ☊(VariableDeclaration)
  }
} ---> N((#0:127 | #0:128 | #0:129 | #0:137 | #0:139)) @ {
  #0:127 -> [str | N(str)]
  #0:128 -> [str]
  #0:129 -> [str]
  #0:137 -> [str]
  #0:139 -> [str]
}