{
  let F = GLOBAL_context.Function
  let promise = F.Promise
  let alreadyResolved = F.AlreadyResolved
  if (= alreadyResolved.Value true) return undefined else {}
  alreadyResolved.Value = true
  app __x0__ = (SameValue resolution promise)
  if (= __x0__ true) {
    let selfResolutionError = ??? "TypeError"
    app __x1__ = (RejectPromise promise selfResolutionError)
    return __x1__
  } else {}
  app __x2__ = (Type resolution)
  if (! (= __x2__ Object)) {
    app __x3__ = (FulfillPromise promise resolution)
    return __x3__
  } else {}
  app __x4__ = (Get resolution "then")
  let then = __x4__
  app __x5__ = (IsAbruptCompletion then)
  if __x5__ {
    app __x6__ = (RejectPromise promise then.Value)
    return __x6__
  } else {}
  let thenAction = then.Value
  app __x7__ = (IsCallable thenAction)
  if (= __x7__ false) {
    app __x8__ = (FulfillPromise promise resolution)
    return __x8__
  } else {}
  app __x9__ = (HostMakeJobCallback thenAction)
  let thenJobCallback = __x9__
  app __x10__ = (NewPromiseResolveThenableJob promise resolution thenJobCallback)
  let job = __x10__
  app __x11__ = (HostEnqueuePromiseJob job.Job job.Realm)
  __x11__
  return undefined
}