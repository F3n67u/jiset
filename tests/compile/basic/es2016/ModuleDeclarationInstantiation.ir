{
  let module = this
  let realm = module.Realm
  assert (! (= realm undefined))
  let code = module.ECMAScriptCode
  if (! (= module.Environment undefined)) {
    app __x0__ = (NormalCompletion CONST_empty)
    return __x0__
  } else {}
  app __x1__ = (NewModuleEnvironment realm.GlobalEnv)
  let env = __x1__
  module.Environment = env
  let __x2__ = module.RequestedModules
  let __x3__ = 0i
  while (< __x3__ __x2__.length) {
    let required = __x2__[__x3__]
    app __x4__ = (HostResolveImportedModule module required)
    let requiredModule = [? __x4__]
    app __x5__ = (requiredModule.ModuleDeclarationInstantiation requiredModule)
    [? __x5__]
    __x3__ = (+ __x3__ 1i)
  }
  let __x6__ = module.IndirectExportEntries
  let __x7__ = 0i
  while (< __x7__ __x6__.length) {
    let e = __x6__[__x7__]
    app __x8__ = (module.ResolveExport module e.ExportName (new []) (new []))
    let resolution = [? __x8__]
    if (|| (= resolution null) (= resolution "ambiguous")) throw INTRINSIC_SyntaxError else {}
    __x7__ = (+ __x7__ 1i)
  }
  let envRec = env.EnvironmentRecord
  let __x9__ = module.ImportEntries
  let __x10__ = 0i
  while (< __x10__ __x9__.length) {
    let in = __x9__[__x10__]
    app __x11__ = (HostResolveImportedModule module in.ModuleRequest)
    let importedModule = [? __x11__]
    if (= in.ImportName "*") {
      app __x12__ = (GetModuleNamespace importedModule)
      let namespace = [? __x12__]
      app __x13__ = (envRec.CreateImmutableBinding envRec in.LocalName true)
      [! __x13__]
      app __x14__ = (envRec.InitializeBinding envRec in.LocalName namespace)
      __x14__
    } else {
      app __x15__ = (importedModule.ResolveExport importedModule in.ImportName (new []) (new []))
      let resolution = [? __x15__]
      if (|| (= resolution null) (= resolution "ambiguous")) throw INTRINSIC_SyntaxError else {}
      app __x16__ = (envRec.CreateImportBinding envRec in.LocalName resolution.Module resolution.BindingName)
      __x16__
    }
    __x10__ = (+ __x10__ 1i)
  }
  access __x17__ = (code "VarScopedDeclarations")
  let varDeclarations = __x17__
  let declaredVarNames = (new [])
  let __x18__ = varDeclarations
  let __x19__ = 0i
  while (< __x19__ __x18__.length) {
    let d = __x18__[__x19__]
    access __x20__ = (d "BoundNames")
    let __x21__ = __x20__
    let __x22__ = 0i
    while (< __x22__ __x21__.length) {
      let dn = __x21__[__x22__]
      if (! (contains declaredVarNames dn)) {
        app __x23__ = (envRec.CreateMutableBinding envRec dn false)
        [! __x23__]
        app __x24__ = (envRec.InitializeBinding envRec dn undefined)
        __x24__
        append dn -> declaredVarNames
      } else {}
      __x22__ = (+ __x22__ 1i)
    }
    __x19__ = (+ __x19__ 1i)
  }
  access __x25__ = (code "LexicallyScopedDeclarations")
  let lexDeclarations = __x25__
  let __x26__ = lexDeclarations
  let __x27__ = 0i
  while (< __x27__ __x26__.length) {
    let d = __x26__[__x27__]
    access __x28__ = (d "BoundNames")
    let __x29__ = __x28__
    let __x30__ = 0i
    while (< __x30__ __x29__.length) {
      let dn = __x29__[__x30__]
      access __x31__ = (d "IsConstantDeclaration")
      if (= __x31__ true) {
        app __x32__ = (envRec.CreateImmutableBinding envRec dn true)
        [! __x32__]
      } else {
        app __x33__ = (envRec.CreateMutableBinding envRec dn false)
        [! __x33__]
      }
      ??? "If id:{d} is a nt:{GeneratorDeclaration} production or a nt:{FunctionDeclaration} production , then in:{} out:{}"
      __x30__ = (+ __x30__ 1i)
    }
    __x27__ = (+ __x27__ 1i)
  }
  app __x34__ = (NormalCompletion CONST_empty)
  return __x34__
}