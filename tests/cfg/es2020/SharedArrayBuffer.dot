digraph {
  node17149 [shape=cds, label=<<font color="black">app length = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node17154 [shape=cds, label=<<font color="black">2:app __x1__ = (AllocateSharedArrayBuffer NewTarget byteLength)</font>> color="black" fillcolor="white" style=filled]
  node17150 [shape=diamond, label=<<font color="black">(= NewTarget undefined)</font>> color="black" fillcolor="white" style=filled]
  node17147 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node17151 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17148 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node17155 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">2:return [? __x1__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17152 [shape=cds, label=<<font color="black">1:app __x0__ = (ToIndex length)</font>> color="black" fillcolor="white" style=filled]
  node17153 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">1:let byteLength = [? __x0__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17147 -> node17149 [ color="black"]
  node17150 -> node17151 [label=<<font color="black">true</font>> color="black"]
  node17150 -> node17152 [label=<<font color="black">false</font>> color="black"]
  node17153 -> node17154 [ color="black"]
  node17151 -> node17152 [ color="black"]
  node17149 -> node17150 [ color="black"]
  node17155 -> node17148 [ color="black"]
  node17154 -> node17155 [ color="black"]
  node17152 -> node17153 [ color="black"]
}
