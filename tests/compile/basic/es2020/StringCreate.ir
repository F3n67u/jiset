{
  app __x0__ = (Type value)
  assert (= __x0__ String)
  app __x1__ = (MakeBasicObject (new ["Prototype", "Extensible", "StringData"]))
  if (is-completion __x1__) if (= __x1__.Type CONST_normal) __x1__ = __x1__.Value else return __x1__ else {}
  let S = __x1__
  S.Prototype = prototype
  S.StringData = value
  ??? "Set id:{S} . [ [ GetOwnProperty ] ] as specified in link:{} ."
  ??? "Set id:{S} . [ [ DefineOwnProperty ] ] as specified in link:{} ."
  ??? "Set id:{S} . [ [ OwnPropertyKeys ] ] as specified in link:{} ."
  let length = value.length
  app __x2__ = (DefinePropertyOrThrow S "length" (new PropertyDescriptor("Value" -> length, "Writable" -> false, "Enumerable" -> false, "Configurable" -> false)))
  if (is-completion __x2__) if (= __x2__.Type CONST_normal) __x2__ = __x2__.Value else return __x2__ else {}
  __x2__
  app __x3__ = (WrapCompletion S)
  return __x3__
}