{
  access __x0__ = (CoverCallExpressionAndAsyncArrowHead "Contains")
  app __x1__ = (__x0__ "YieldExpression")
  if (= __x1__ true) throw INTRINSIC_SyntaxError else {
    app __x2__ = (NormalCompletion undefined)
    return __x2__
  }
  access __x3__ = (CoverCallExpressionAndAsyncArrowHead "Contains")
  app __x4__ = (__x3__ "AwaitExpression")
  if (= __x4__ true) throw INTRINSIC_SyntaxError else {
    app __x5__ = (NormalCompletion undefined)
    return __x5__
  }
  let __x6__ = false
  if (= absent (parse-syntax CoverCallExpressionAndAsyncArrowHead "AsyncArrowHead" (new []))) __x6__ = true else {}
  if __x6__ throw INTRINSIC_SyntaxError else {
    app __x7__ = (NormalCompletion undefined)
    return __x7__
  }
  access __x8__ = (CoverCallExpressionAndAsyncArrowHead "BoundNames")
  access __x9__ = (AsyncConciseBody "LexicallyDeclaredNames")
  let __x10__ = __x8__
  let __x11__ = __x9__
  let __x12__ = 0i
  let __x13__ = 0i
  let __x14__ = false
  while (< __x12__ __x10__.length) {
    __x13__ = 0i
    while (< __x13__ __x11__.length) if (= __x10__[__x12__] __x11__[__x13__]) __x14__ = true else {}
  }
  if __x14__ throw INTRINSIC_SyntaxError else {
    app __x15__ = (NormalCompletion undefined)
    return __x15__
  }
  let __x16__ = true
  access __x17__ = (AsyncConciseBody "ContainsUseStrict")
  __x16__ = (= __x17__ true)
  if __x16__ {
    access __x18__ = (CoverCallExpressionAndAsyncArrowHead "IsSimpleParameterList")
    __x16__ = (= __x18__ false)
  } else {}
  if __x16__ throw INTRINSIC_SyntaxError else {
    app __x19__ = (NormalCompletion undefined)
    return __x19__
  }
  ??? "All Early Error rules for nt:{AsyncArrowHead} and its derived productions apply to CoveredAsyncArrowHead of nt:{CoverCallExpressionAndAsyncArrowHead} ."
}