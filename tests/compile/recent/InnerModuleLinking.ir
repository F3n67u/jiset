{
  [0] if (! (= (typeof module) "CyclicModuleRecord")) {
    [1] app __x0__ = (module.Link module)
    [1] if (is-completion __x0__) if (= __x0__.Type CONST_normal) __x0__ = __x0__.Value else return __x0__ else [20] {}
    [1] __x0__
    [2] app __x1__ = (WrapCompletion index)
    [2] return __x1__
  } else [20] {}
  [3] if (|| (|| (= module.Status CONST_linking) (= module.Status CONST_linked)) (= module.Status CONST_evaluated)) {
    [4] app __x2__ = (WrapCompletion index)
    [4] return __x2__
  } else [20] {}
  [5] assert (= module.Status CONST_unlinked)
  [6] module.Status = CONST_linking
  [7] module.DFSIndex = index
  [8] module.DFSAncestorIndex = index
  [9] index = (+ index 1i)
  [10] append module -> stack
  [11] let __x3__ = module.RequestedModules
  [11] let __x4__ = 0i
  [11] while (< __x4__ __x3__.length) {
    let required = __x3__[__x4__]
    [12] app __x5__ = (HostResolveImportedModule module required)
    [12] if (is-completion __x5__) if (= __x5__.Type CONST_normal) __x5__ = __x5__.Value else return __x5__ else [20] {}
    [12] let requiredModule = __x5__
    [13] app __x6__ = (InnerModuleLinking requiredModule stack index)
    [13] if (is-completion __x6__) if (= __x6__.Type CONST_normal) __x6__ = __x6__.Value else return __x6__ else [20] {}
    [13] index = __x6__
    [14] if (= (typeof requiredModule) "CyclicModuleRecord") {
      [15] assert (|| (|| (= requiredModule.Status CONST_linking) (= requiredModule.Status CONST_linked)) (= requiredModule.Status CONST_evaluated))
      [17] if (= requiredModule.Status CONST_linking) {
        [18] app __x7__ = (min module.DFSAncestorIndex requiredModule.DFSAncestorIndex)
        [18] module.DFSAncestorIndex = __x7__
      } else [20] {}
    } else [20] {}
    __x4__ = (+ __x4__ 1i)
  }
  [19] app __x8__ = (module.InitializeEnvironment module)
  [19] if (is-completion __x8__) if (= __x8__.Type CONST_normal) __x8__ = __x8__.Value else return __x8__ else [20] {}
  [19] __x8__
  [21] assert (! (< module.DFSIndex module.DFSAncestorIndex))
  [22] if (== module.DFSAncestorIndex module.DFSIndex) {
    [23] let done = false
    [24] while (= done false) {
      [25] let requiredModule = stack[(- stack.length 1i)]
      [26] (pop stack (- stack.length 1i))
      [27] assert (= (typeof requiredModule) "CyclicModuleRecord")
      [28] requiredModule.Status = CONST_linked
      [29] if (= requiredModule module) done = true else [20] {}
    }
  } else [20] {}
  [30] app __x9__ = (WrapCompletion index)
  [30] return __x9__
}