digraph {
  node15720 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">4:let numberValue = [? __x2__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15727 [shape=diamond, label=<<font color="black">(&lt; viewSize (+ getIndex elementSize))</font>> color="black" fillcolor="white" style=filled]
  node15716 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">2:assert (! (= view.ViewedArrayBuffer absent))</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15719 [shape=cds, label=<<font color="black">4:app __x2__ = (ToNumber value)</font>> color="black" fillcolor="white" style=filled]
  node15724 [shape=diamond, label=<<font color="black">(= __x4__ true)</font>> color="black" fillcolor="white" style=filled]
  node15728 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw RangeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15715 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15718 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">3:let getIndex = [? __x1__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15713 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15725 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15721 [shape=cds, label=<<font color="black">5:app __x3__ = (ToBoolean isLittleEndian)</font>> color="black" fillcolor="white" style=filled]
  node15726 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">8:let viewOffset = view.ByteOffset</td></tr>
      <tr><td align="left">9:let viewSize = view.ByteLength</td></tr>
      <tr><td align="left">10:??? &quot;Let id:{elementSize} be the Number value of the Element Size value specified in link:{unhandled: table-49} for Element Type id:{type} .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15722 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">5:isLittleEndian = __x3__</td></tr>
      <tr><td align="left">6:let buffer = view.ViewedArrayBuffer</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15723 [shape=cds, label=<<font color="black">7:app __x4__ = (IsDetachedBuffer buffer)</font>> color="black" fillcolor="white" style=filled]
  node15730 [shape=cds, label=<<font color="black">13:app __x5__ = (SetValueInBuffer buffer bufferIndex type numberValue false &quot;Unordered&quot; isLittleEndian)</font>> color="black" fillcolor="white" style=filled]
  node15712 [shape=diamond, label=<<font color="black">(! (= __x0__ Object))</font>> color="black" fillcolor="white" style=filled]
  node15710 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node15714 [shape=diamond, label=<<font color="black">(= view.DataView absent)</font>> color="black" fillcolor="white" style=filled]
  node15729 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">12:let bufferIndex = (+ getIndex viewOffset)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15717 [shape=cds, label=<<font color="black">3:app __x1__ = (ToIndex requestIndex)</font>> color="black" fillcolor="white" style=filled]
  node15731 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">13:return __x5__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15711 [shape=cds, label=<<font color="black">0:app __x0__ = (Type view)</font>> color="black" fillcolor="white" style=filled]
  node15709 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node15728 -> node15729 [ color="black"]
  node15720 -> node15721 [ color="black"]
  node15721 -> node15722 [ color="black"]
  node15725 -> node15726 [ color="black"]
  node15716 -> node15717 [ color="black"]
  node15724 -> node15725 [label=<<font color="black">true</font>> color="black"]
  node15724 -> node15726 [label=<<font color="black">false</font>> color="black"]
  node15714 -> node15715 [label=<<font color="black">true</font>> color="black"]
  node15714 -> node15716 [label=<<font color="black">false</font>> color="black"]
  node15727 -> node15728 [label=<<font color="black">true</font>> color="black"]
  node15727 -> node15729 [label=<<font color="black">false</font>> color="black"]
  node15711 -> node15712 [ color="black"]
  node15715 -> node15716 [ color="black"]
  node15726 -> node15727 [ color="black"]
  node15712 -> node15713 [label=<<font color="black">true</font>> color="black"]
  node15712 -> node15714 [label=<<font color="black">false</font>> color="black"]
  node15731 -> node15710 [ color="black"]
  node15709 -> node15711 [ color="black"]
  node15730 -> node15731 [ color="black"]
  node15722 -> node15723 [ color="black"]
  node15719 -> node15720 [ color="black"]
  node15723 -> node15724 [ color="black"]
  node15713 -> node15714 [ color="black"]
  node15729 -> node15730 [ color="black"]
  node15718 -> node15719 [ color="black"]
  node15717 -> node15718 [ color="black"]
}
