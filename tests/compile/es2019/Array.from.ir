{
  app items = (GetArgument argumentsList 0i)
  app mapfn = (GetArgument argumentsList 1i)
  app thisArg = (GetArgument argumentsList 2i)
  [0] let C = this
  [2] if (= mapfn undefined) let mapping = false else {
    [3] app __x0__ = (IsCallable mapfn)
    [3] if (= __x0__ false) {
      app __x1__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_TypeError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
      return __x1__
    } else [32] {}
    [4] if (! (= thisArg absent)) let T = thisArg else let T = undefined
    [5] let mapping = true
  }
  [6] app __x2__ = (GetMethod items SYMBOL_iterator)
  [6] if (is-completion __x2__) if (= __x2__.Type CONST_normal) __x2__ = __x2__.Value else return __x2__ else [32] {}
  [6] let usingIterator = __x2__
  [7] if (! (= usingIterator undefined)) {
    [10] app __x3__ = (IsConstructor C)
    [10] if (= __x3__ true) {
      [9] app __x4__ = (Construct C)
      [9] if (is-completion __x4__) if (= __x4__.Type CONST_normal) __x4__ = __x4__.Value else return __x4__ else [32] {}
      [9] let A = __x4__
    } else {
      [11] app __x5__ = (ArrayCreate 0i)
      [11] if (is-completion __x5__) if (= __x5__.Type CONST_normal) __x5__ = __x5__.Value else return __x5__ else [32] {}
      [11] let A = __x5__
    }
    [12] app __x6__ = (GetIterator items CONST_sync usingIterator)
    [12] if (is-completion __x6__) if (= __x6__.Type CONST_normal) __x6__ = __x6__.Value else return __x6__ else [32] {}
    [12] let iteratorRecord = __x6__
    [13] let k = 0i
    [14] while true {
      [15] if (! (< k (- 9007199254740992i 1i))) {
        [16] app __x7__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_TypeError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
        [16] let error = __x7__
        [17] app __x8__ = (IteratorClose iteratorRecord error)
        [17] if (is-completion __x8__) if (= __x8__.Type CONST_normal) __x8__ = __x8__.Value else return __x8__ else [32] {}
        [17] app __x9__ = (WrapCompletion __x8__)
        [17] return __x9__
      } else [32] {}
      [18] app __x10__ = (ToString k)
      [18] if (is-completion __x10__) if (= __x10__.Type CONST_normal) __x10__ = __x10__.Value else return __x10__ else [32] {}
      [18] let Pk = __x10__
      [19] app __x11__ = (IteratorStep iteratorRecord)
      [19] if (is-completion __x11__) if (= __x11__.Type CONST_normal) __x11__ = __x11__.Value else return __x11__ else [32] {}
      [19] let next = __x11__
      [20] if (= next false) {
        [21] app __x12__ = (Set A "length" k true)
        [21] if (is-completion __x12__) if (= __x12__.Type CONST_normal) __x12__ = __x12__.Value else return __x12__ else [32] {}
        [21] __x12__
        [22] app __x13__ = (WrapCompletion A)
        [22] return __x13__
      } else [32] {}
      [23] app __x14__ = (IteratorValue next)
      [23] if (is-completion __x14__) if (= __x14__.Type CONST_normal) __x14__ = __x14__.Value else return __x14__ else [32] {}
      [23] let nextValue = __x14__
      [28] if (= mapping true) {
        [25] app __x15__ = (Call mapfn T (new [nextValue, k]))
        [25] let mappedValue = __x15__
        [26] app __x16__ = (IsAbruptCompletion mappedValue)
        [26] if __x16__ {
          app __x17__ = (IteratorClose iteratorRecord mappedValue)
          if (is-completion __x17__) if (= __x17__.Type CONST_normal) __x17__ = __x17__.Value else return __x17__ else [32] {}
          app __x18__ = (WrapCompletion __x17__)
          return __x18__
        } else [32] {}
        [27] mappedValue = mappedValue.Value
      } else let mappedValue = nextValue
      [29] app __x19__ = (CreateDataPropertyOrThrow A Pk mappedValue)
      [29] let defineStatus = __x19__
      [30] app __x20__ = (IsAbruptCompletion defineStatus)
      [30] if __x20__ {
        app __x21__ = (IteratorClose iteratorRecord defineStatus)
        if (is-completion __x21__) if (= __x21__.Type CONST_normal) __x21__ = __x21__.Value else return __x21__ else [32] {}
        app __x22__ = (WrapCompletion __x21__)
        return __x22__
      } else [32] {}
      [31] k = (+ k 1i)
    }
  } else [32] {}
  [33] app __x23__ = (ToObject items)
  [33] if (is-completion __x23__) if (= __x23__.Type CONST_normal) __x23__ = __x23__.Value else return __x23__ else [32] {}
  [33] let arrayLike = __x23__
  [34] app __x24__ = (Get arrayLike "length")
  [34] if (is-completion __x24__) if (= __x24__.Type CONST_normal) __x24__ = __x24__.Value else return __x24__ else [32] {}
  [34] app __x25__ = (ToLength __x24__)
  [34] if (is-completion __x25__) if (= __x25__.Type CONST_normal) __x25__ = __x25__.Value else return __x25__ else [32] {}
  [34] let len = __x25__
  [37] app __x26__ = (IsConstructor C)
  [37] if (= __x26__ true) {
    [36] app __x27__ = (Construct C (new [len]))
    [36] if (is-completion __x27__) if (= __x27__.Type CONST_normal) __x27__ = __x27__.Value else return __x27__ else [32] {}
    [36] let A = __x27__
  } else {
    [38] app __x28__ = (ArrayCreate len)
    [38] if (is-completion __x28__) if (= __x28__.Type CONST_normal) __x28__ = __x28__.Value else return __x28__ else [32] {}
    [38] let A = __x28__
  }
  [39] let k = 0i
  [40] while (< k len) {
    [41] app __x29__ = (ToString k)
    [41] if (is-completion __x29__) if (= __x29__.Type CONST_normal) __x29__ = __x29__.Value else return __x29__ else [32] {}
    [41] let Pk = __x29__
    [42] app __x30__ = (Get arrayLike Pk)
    [42] if (is-completion __x30__) if (= __x30__.Type CONST_normal) __x30__ = __x30__.Value else return __x30__ else [32] {}
    [42] let kValue = __x30__
    [45] if (= mapping true) {
      [44] app __x31__ = (Call mapfn T (new [kValue, k]))
      [44] if (is-completion __x31__) if (= __x31__.Type CONST_normal) __x31__ = __x31__.Value else return __x31__ else [32] {}
      [44] let mappedValue = __x31__
    } else let mappedValue = kValue
    [46] app __x32__ = (CreateDataPropertyOrThrow A Pk mappedValue)
    [46] if (is-completion __x32__) if (= __x32__.Type CONST_normal) __x32__ = __x32__.Value else return __x32__ else [32] {}
    [46] __x32__
    [47] k = (+ k 1i)
  }
  [48] app __x33__ = (Set A "length" len true)
  [48] if (is-completion __x33__) if (= __x33__.Type CONST_normal) __x33__ = __x33__.Value else return __x33__ else [32] {}
  [48] __x33__
  [49] app __x34__ = (WrapCompletion A)
  [49] return __x34__
}