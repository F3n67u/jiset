{
  app text = (GetArgument argumentsList 0i)
  app reviver = (GetArgument argumentsList 1i)
  [0] app __x0__ = (ToString text)
  [0] if (is-completion __x0__) if (= __x0__.Type CONST_normal) __x0__ = __x0__.Value else return __x0__ else [5] {}
  [0] let JText = __x0__
  [1] ??? "Parse id:{JText} interpreted as UTF - 16 encoded Unicode points ( link:{} ) as a JSON text as specified in ECMA - 404 . Throw a value:{SyntaxError} exception if id:{JText} is not a valid JSON text as defined in that specification ."
  [2] let scriptText = (+ (+ "(" JText) ");")
  [3] ??? "Let id:{completion} be the result of parsing and evaluating id:{scriptText} as if it was the source text of an ECMAScript nt:{Script} , but using the alternative definition of nt:{DoubleStringCharacter} provided below . The extended PropertyDefinitionEvaluation semantics defined in link:{} must not be used during the evaluation ."
  [4] let unfiltered = completion.Value
  [12] app __x1__ = (IsCallable reviver)
  [12] if (= __x1__ true) {
    [7] app __x2__ = (ObjectCreate INTRINSIC_ObjectPrototype)
    [7] let root = __x2__
    [8] let rootName = ""
    [9] app __x3__ = (CreateDataProperty root rootName unfiltered)
    [9] let status = __x3__
    [10] assert (= status true)
    [11] app __x4__ = (InternalizeJSONProperty root rootName)
    [11] if (is-completion __x4__) if (= __x4__.Type CONST_normal) __x4__ = __x4__.Value else return __x4__ else [5] {}
    [11] app __x5__ = (WrapCompletion __x4__)
    [11] return __x5__
  } else {
    [13] app __x6__ = (WrapCompletion unfiltered)
    [13] return __x6__
  }
}