digraph {
  node2940 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">8:let targetResult = [? __x5__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node2933 [shape=diamond, label=<<font color="black">(= trap undefined)</font>> color="black" fillcolor="white" style=filled]
  node2929 [shape=cds, label=<<font color="black">2:app __x0__ = (Type handler)</font>> color="black" fillcolor="white" style=filled]
  node2925 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node2937 [shape=cds, label=<<font color="black">7:app __x4__ = (ToBoolean [? __x3__])</font>> color="black" fillcolor="white" style=filled]
  node2932 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">4:let trap = [? __x1__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node2926 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let handler = O.ProxyHandler</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node2938 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">7:let booleanTrapResult = __x4__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node2935 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">6:return [? __x2__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node2943 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node2928 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node2931 [shape=cds, label=<<font color="black">4:app __x1__ = (GetMethod handler &quot;isExtensible&quot;)</font>> color="black" fillcolor="white" style=filled]
  node2927 [shape=diamond, label=<<font color="black">(= handler null)</font>> color="black" fillcolor="white" style=filled]
  node2942 [shape=diamond, label=<<font color="black">(= __x6__ false)</font>> color="black" fillcolor="white" style=filled]
  node2939 [shape=cds, label=<<font color="black">8:app __x5__ = (target.IsExtensible target)</font>> color="black" fillcolor="white" style=filled]
  node2924 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node2934 [shape=cds, label=<<font color="black">6:app __x2__ = (target.IsExtensible target)</font>> color="black" fillcolor="white" style=filled]
  node2944 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">10:return booleanTrapResult</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node2930 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">2:assert (= __x0__ Object)</td></tr>
      <tr><td align="left">3:let target = O.ProxyTarget</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node2936 [shape=cds, label=<<font color="black">7:app __x3__ = (Call trap handler (new [target]))</font>> color="black" fillcolor="white" style=filled]
  node2941 [shape=cds, label=<<font color="black">9:app __x6__ = (SameValue booleanTrapResult targetResult)</font>> color="black" fillcolor="white" style=filled]
  node2929 -> node2930 [ color="black"]
  node2932 -> node2933 [ color="black"]
  node2941 -> node2942 [ color="black"]
  node2939 -> node2940 [ color="black"]
  node2931 -> node2932 [ color="black"]
  node2940 -> node2941 [ color="black"]
  node2934 -> node2935 [ color="black"]
  node2928 -> node2929 [ color="black"]
  node2935 -> node2936 [ color="black"]
  node2933 -> node2934 [label=<<font color="black">true</font>> color="black"]
  node2933 -> node2936 [label=<<font color="black">false</font>> color="black"]
  node2926 -> node2927 [ color="black"]
  node2944 -> node2925 [ color="black"]
  node2924 -> node2926 [ color="black"]
  node2943 -> node2944 [ color="black"]
  node2942 -> node2943 [label=<<font color="black">true</font>> color="black"]
  node2942 -> node2944 [label=<<font color="black">false</font>> color="black"]
  node2927 -> node2928 [label=<<font color="black">true</font>> color="black"]
  node2927 -> node2929 [label=<<font color="black">false</font>> color="black"]
  node2937 -> node2938 [ color="black"]
  node2936 -> node2937 [ color="black"]
  node2930 -> node2931 [ color="black"]
  node2938 -> node2939 [ color="black"]
}
