digraph {
  node8490 [shape=cds, label=<<font color="black">10:app __x1__ = (FunctionCreate kind UniqueFormalParameters FunctionBody scope strict prototype)</font>> color="black" fillcolor="white" style=filled]
  node8487 [shape=diamond, label=<<font color="black">(! (= functionPrototype absent))</font>> color="black" fillcolor="white" style=filled]
  node8483 [shape=diamond, label=<<font color="black">true</font>> color="black" fillcolor="white" style=filled]
  node8479 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node8491 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">10:let closure = __x1__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node8482 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let propKey = __x0__</td></tr>
      <tr><td align="left">1:[? propKey]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node8480 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node8492 [shape=cds, label=<<font color="black">11:app __x2__ = (MakeMethod closure object)</font>> color="black" fillcolor="white" style=filled]
  node8485 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let strict = false</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node8488 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">5:let kind = CONST_Normal</td></tr>
      <tr><td align="left">6:let prototype = functionPrototype</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node8489 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">8:let kind = CONST_Method</td></tr>
      <tr><td align="left">9:let prototype = INTRINSIC_FunctionPrototype</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node8484 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let strict = true</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node8493 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">11:__x2__</td></tr>
      <tr><td align="left">12:closure.SourceText = (get-syntax MethodDefinition)</td></tr>
      <tr><td align="left">13:return (new Record(&quot;Key&quot; -&gt; propKey, &quot;Closure&quot; -&gt; closure))</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node8486 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">3:let scope = GLOBAL_context.LexicalEnvironment</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node8481 [shape=cds, label=<<font color="black">0:access __x0__ = (PropertyName &quot;Evaluation&quot;)</font>> color="black" fillcolor="white" style=filled]
  node8483 -> node8484 [label=<<font color="black">true</font>> color="black"]
  node8483 -> node8485 [label=<<font color="black">false</font>> color="black"]
  node8488 -> node8490 [ color="black"]
  node8484 -> node8486 [ color="black"]
  node8487 -> node8488 [label=<<font color="black">true</font>> color="black"]
  node8487 -> node8489 [label=<<font color="black">false</font>> color="black"]
  node8485 -> node8486 [ color="black"]
  node8492 -> node8493 [ color="black"]
  node8481 -> node8482 [ color="black"]
  node8491 -> node8492 [ color="black"]
  node8479 -> node8481 [ color="black"]
  node8486 -> node8487 [ color="black"]
  node8489 -> node8490 [ color="black"]
  node8490 -> node8491 [ color="black"]
  node8482 -> node8483 [ color="black"]
  node8493 -> node8480 [ color="black"]
}
