digraph {
  node19655 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node19658 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">2:let generator = [! __x0__]</td></tr>
      <tr><td align="left">3:generator.GeneratorBrand = generatorBrand</td></tr>
      <tr><td align="left">4:generator.AsyncGeneratorState = undefined</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node19659 [shape=cds, label=<<font color="black">5:app __x1__ = (AsyncGeneratorStart generator closure)</font>> color="black" fillcolor="white" style=filled]
  node19660 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">5:[! __x1__]</td></tr>
      <tr><td align="left">6:return generator</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node19656 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">1:let internalSlotsList = (new [&quot;AsyncGeneratorState&quot;, &quot;AsyncGeneratorContext&quot;, &quot;AsyncGeneratorQueue&quot;, &quot;GeneratorBrand&quot;])</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node19654 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node19657 [shape=cds, label=<<font color="black">2:app __x0__ = (OrdinaryObjectCreate generatorPrototype internalSlotsList)</font>> color="black" fillcolor="white" style=filled]
  node19660 -> node19655 [ color="black"]
  node19654 -> node19656 [ color="black"]
  node19659 -> node19660 [ color="black"]
  node19656 -> node19657 [ color="black"]
  node19658 -> node19659 [ color="black"]
  node19657 -> node19658 [ color="black"]
}
