digraph {
  node17950 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node17955 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:??? &quot;Let id:{second} be a new read - modify - write modification function with parameters ( id:{oldBytes} , id:{newBytes} ) that captures nothing and performs the following steps atomically when called : in:{} out:{}&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17952 [shape=cds, label=<<font color="black">app typedArray = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node17957 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">2:return [? __x0__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17953 [shape=cds, label=<<font color="black">app index = (GetArgument argumentsList 1i)</font>> color="black" fillcolor="white" style=filled]
  node17951 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node17956 [shape=cds, label=<<font color="black">2:app __x0__ = (AtomicReadModifyWrite typedArray index value second)</font>> color="black" fillcolor="white" style=filled]
  node17954 [shape=cds, label=<<font color="black">app value = (GetArgument argumentsList 2i)</font>> color="black" fillcolor="white" style=filled]
  node17950 -> node17952 [ color="black"]
  node17955 -> node17956 [ color="black"]
  node17952 -> node17953 [ color="black"]
  node17953 -> node17954 [ color="black"]
  node17954 -> node17955 [ color="black"]
  node17956 -> node17957 [ color="black"]
  node17957 -> node17951 [ color="black"]
}
