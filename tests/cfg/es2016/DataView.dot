digraph {
  node15115 [shape=cds, label=<<font color="black">4:app __x2__ = (ToInteger numberOffset)</font>> color="black" fillcolor="white" style=filled]
  node15130 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw RangeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15125 [shape=diamond, label=<<font color="black">(= byteLength undefined)</font>> color="black" fillcolor="white" style=filled]
  node15110 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15105 [shape=cds, label=<<font color="black">app byteLength = (GetArgument argumentsList 2i)</font>> color="black" fillcolor="white" style=filled]
  node15118 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw RangeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15114 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">3:let numberOffset = [? __x1__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15126 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let viewByteLength = (- bufferByteLength offset)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15117 [shape=diamond, label=<<font color="black">(|| (! (== numberOffset offset)) (&lt; offset 0i))</font>> color="black" fillcolor="white" style=filled]
  node15113 [shape=cds, label=<<font color="black">3:app __x1__ = (ToNumber byteOffset)</font>> color="black" fillcolor="white" style=filled]
  node15116 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">4:let offset = __x2__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15131 [shape=cds, label=<<font color="black">14:app __x5__ = (OrdinaryCreateFromConstructor NewTarget INTRINSIC_DataViewPrototype (new [&quot;DataView&quot;, &quot;ViewedArrayBuffer&quot;, &quot;ByteLength&quot;, &quot;ByteOffset&quot;]))</font>> color="black" fillcolor="white" style=filled]
  node15120 [shape=diamond, label=<<font color="black">(= __x3__ true)</font>> color="black" fillcolor="white" style=filled]
  node15124 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw RangeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15119 [shape=cds, label=<<font color="black">6:app __x3__ = (IsDetachedBuffer buffer)</font>> color="black" fillcolor="white" style=filled]
  node15104 [shape=cds, label=<<font color="black">app byteOffset = (GetArgument argumentsList 1i)</font>> color="black" fillcolor="white" style=filled]
  node15129 [shape=diamond, label=<<font color="black">(&lt; bufferByteLength (+ offset viewByteLength))</font>> color="black" fillcolor="white" style=filled]
  node15103 [shape=cds, label=<<font color="black">app buffer = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node15121 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15101 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node15106 [shape=diamond, label=<<font color="black">(= NewTarget undefined)</font>> color="black" fillcolor="white" style=filled]
  node15111 [shape=diamond, label=<<font color="black">(= buffer.ArrayBufferData absent)</font>> color="black" fillcolor="white" style=filled]
  node15107 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15112 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15122 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">7:let bufferByteLength = buffer.ArrayBufferByteLength</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15102 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node15127 [shape=cds, label=<<font color="black">12:app __x4__ = (ToLength byteLength)</font>> color="black" fillcolor="white" style=filled]
  node15132 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">14:let O = [? __x5__]</td></tr>
      <tr><td align="left">15:O.DataView = true</td></tr>
      <tr><td align="left">16:O.ViewedArrayBuffer = buffer</td></tr>
      <tr><td align="left">17:O.ByteLength = viewByteLength</td></tr>
      <tr><td align="left">18:O.ByteOffset = offset</td></tr>
      <tr><td align="left">19:return O</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15109 [shape=diamond, label=<<font color="black">(! (= __x0__ Object))</font>> color="black" fillcolor="white" style=filled]
  node15108 [shape=cds, label=<<font color="black">1:app __x0__ = (Type buffer)</font>> color="black" fillcolor="white" style=filled]
  node15123 [shape=diamond, label=<<font color="black">(&lt; bufferByteLength offset)</font>> color="black" fillcolor="white" style=filled]
  node15128 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">12:let viewByteLength = [? __x4__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15121 -> node15122 [ color="black"]
  node15132 -> node15102 [ color="black"]
  node15124 -> node15125 [ color="black"]
  node15109 -> node15110 [label=<<font color="black">true</font>> color="black"]
  node15109 -> node15111 [label=<<font color="black">false</font>> color="black"]
  node15130 -> node15131 [ color="black"]
  node15113 -> node15114 [ color="black"]
  node15125 -> node15126 [label=<<font color="black">true</font>> color="black"]
  node15125 -> node15127 [label=<<font color="black">false</font>> color="black"]
  node15119 -> node15120 [ color="black"]
  node15107 -> node15108 [ color="black"]
  node15118 -> node15119 [ color="black"]
  node15115 -> node15116 [ color="black"]
  node15114 -> node15115 [ color="black"]
  node15116 -> node15117 [ color="black"]
  node15126 -> node15131 [ color="black"]
  node15103 -> node15104 [ color="black"]
  node15127 -> node15128 [ color="black"]
  node15128 -> node15129 [ color="black"]
  node15120 -> node15121 [label=<<font color="black">true</font>> color="black"]
  node15120 -> node15122 [label=<<font color="black">false</font>> color="black"]
  node15111 -> node15112 [label=<<font color="black">true</font>> color="black"]
  node15111 -> node15113 [label=<<font color="black">false</font>> color="black"]
  node15131 -> node15132 [ color="black"]
  node15117 -> node15118 [label=<<font color="black">true</font>> color="black"]
  node15117 -> node15119 [label=<<font color="black">false</font>> color="black"]
  node15108 -> node15109 [ color="black"]
  node15112 -> node15113 [ color="black"]
  node15104 -> node15105 [ color="black"]
  node15106 -> node15107 [label=<<font color="black">true</font>> color="black"]
  node15106 -> node15108 [label=<<font color="black">false</font>> color="black"]
  node15122 -> node15123 [ color="black"]
  node15105 -> node15106 [ color="black"]
  node15123 -> node15124 [label=<<font color="black">true</font>> color="black"]
  node15123 -> node15125 [label=<<font color="black">false</font>> color="black"]
  node15129 -> node15130 [label=<<font color="black">true</font>> color="black"]
  node15129 -> node15131 [label=<<font color="black">false</font>> color="black"]
  node15110 -> node15111 [ color="black"]
  node15101 -> node15103 [ color="black"]
}
