digraph {
  node15995 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let viewByteLength = (- bufferByteLength offset)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15990 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15975 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node15986 [shape=cds, label=<<font color="black">3:app __x1__ = (ToIndex byteOffset)</font>> color="black" fillcolor="white" style=filled]
  node15979 [shape=diamond, label=<<font color="black">(= NewTarget undefined)</font>> color="black" fillcolor="white" style=filled]
  node15984 [shape=diamond, label=<<font color="black">(= buffer.ArrayBufferData absent)</font>> color="black" fillcolor="white" style=filled]
  node15987 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">3:let offset = [? __x1__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15991 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">5:let bufferByteLength = buffer.ArrayBufferByteLength</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15976 [shape=cds, label=<<font color="black">app buffer = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node15998 [shape=diamond, label=<<font color="black">(&lt; bufferByteLength (+ offset viewByteLength))</font>> color="black" fillcolor="white" style=filled]
  node15993 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw RangeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15992 [shape=diamond, label=<<font color="black">(&lt; bufferByteLength offset)</font>> color="black" fillcolor="white" style=filled]
  node16001 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">12:let O = [? __x4__]</td></tr>
      <tr><td align="left">13:O.ViewedArrayBuffer = buffer</td></tr>
      <tr><td align="left">14:O.ByteLength = viewByteLength</td></tr>
      <tr><td align="left">15:O.ByteOffset = offset</td></tr>
      <tr><td align="left">16:return O</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15982 [shape=diamond, label=<<font color="black">(! (= __x0__ Object))</font>> color="black" fillcolor="white" style=filled]
  node15977 [shape=cds, label=<<font color="black">app byteOffset = (GetArgument argumentsList 1i)</font>> color="black" fillcolor="white" style=filled]
  node15974 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node15989 [shape=diamond, label=<<font color="black">(= __x2__ true)</font>> color="black" fillcolor="white" style=filled]
  node15985 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15980 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15981 [shape=cds, label=<<font color="black">1:app __x0__ = (Type buffer)</font>> color="black" fillcolor="white" style=filled]
  node15994 [shape=diamond, label=<<font color="black">(|| (= byteLength absent) (= byteLength undefined))</font>> color="black" fillcolor="white" style=filled]
  node15999 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw RangeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16000 [shape=cds, label=<<font color="black">12:app __x4__ = (OrdinaryCreateFromConstructor NewTarget INTRINSIC_DataViewPrototype (new [&quot;DataView&quot;, &quot;ViewedArrayBuffer&quot;, &quot;ByteLength&quot;, &quot;ByteOffset&quot;]))</font>> color="black" fillcolor="white" style=filled]
  node15978 [shape=cds, label=<<font color="black">app byteLength = (GetArgument argumentsList 2i)</font>> color="black" fillcolor="white" style=filled]
  node15983 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15988 [shape=cds, label=<<font color="black">4:app __x2__ = (IsDetachedBuffer buffer)</font>> color="black" fillcolor="white" style=filled]
  node15996 [shape=cds, label=<<font color="black">10:app __x3__ = (ToIndex byteLength)</font>> color="black" fillcolor="white" style=filled]
  node15997 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">10:let viewByteLength = [? __x3__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15990 -> node15991 [ color="black"]
  node15995 -> node16000 [ color="black"]
  node15998 -> node15999 [label=<<font color="black">true</font>> color="black"]
  node15998 -> node16000 [label=<<font color="black">false</font>> color="black"]
  node15979 -> node15980 [label=<<font color="black">true</font>> color="black"]
  node15979 -> node15981 [label=<<font color="black">false</font>> color="black"]
  node15976 -> node15977 [ color="black"]
  node15993 -> node15994 [ color="black"]
  node15983 -> node15984 [ color="black"]
  node15991 -> node15992 [ color="black"]
  node15988 -> node15989 [ color="black"]
  node15977 -> node15978 [ color="black"]
  node15996 -> node15997 [ color="black"]
  node15980 -> node15981 [ color="black"]
  node15989 -> node15990 [label=<<font color="black">true</font>> color="black"]
  node15989 -> node15991 [label=<<font color="black">false</font>> color="black"]
  node15992 -> node15993 [label=<<font color="black">true</font>> color="black"]
  node15992 -> node15994 [label=<<font color="black">false</font>> color="black"]
  node15997 -> node15998 [ color="black"]
  node16000 -> node16001 [ color="black"]
  node15987 -> node15988 [ color="black"]
  node15985 -> node15986 [ color="black"]
  node16001 -> node15975 [ color="black"]
  node15999 -> node16000 [ color="black"]
  node15994 -> node15995 [label=<<font color="black">true</font>> color="black"]
  node15994 -> node15996 [label=<<font color="black">false</font>> color="black"]
  node15982 -> node15983 [label=<<font color="black">true</font>> color="black"]
  node15982 -> node15984 [label=<<font color="black">false</font>> color="black"]
  node15986 -> node15987 [ color="black"]
  node15978 -> node15979 [ color="black"]
  node15974 -> node15976 [ color="black"]
  node15981 -> node15982 [ color="black"]
  node15984 -> node15985 [label=<<font color="black">true</font>> color="black"]
  node15984 -> node15986 [label=<<font color="black">false</font>> color="black"]
}
