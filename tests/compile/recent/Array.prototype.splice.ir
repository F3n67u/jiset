{
  app start = (GetArgument argumentsList 0i)
  app deleteCount = (GetArgument argumentsList 1i)
  app items = (GetArgument argumentsList 2i)
  [0] app __x0__ = (ToObject this)
  [0] if (is-completion __x0__) if (= __x0__.Type CONST_normal) __x0__ = __x0__.Value else return __x0__ else [4] {}
  [0] let O = __x0__
  [1] app __x1__ = (LengthOfArrayLike O)
  [1] if (is-completion __x1__) if (= __x1__.Type CONST_normal) __x1__ = __x1__.Value else return __x1__ else [4] {}
  [1] let len = __x1__
  [2] app __x2__ = (ToIntegerOrInfinity start)
  [2] if (is-completion __x2__) if (= __x2__.Type CONST_normal) __x2__ = __x2__.Value else return __x2__ else [4] {}
  [2] let relativeStart = __x2__
  [3] ??? "If id:{relativeStart} is - ∞ , let id:{actualStart} be 0 ."
  [4] ??? "Else if id:{relativeStart} < 0 , let id:{actualStart} be max ( id:{len} + id:{relativeStart} , 0 ) ."
  [5] ??? "Else , let id:{actualStart} be min ( id:{relativeStart} , id:{len} ) ."
  [12] if (= start absent) {
    [7] let insertCount = 0i
    [8] let actualDeleteCount = 0i
  } else if (= deleteCount absent) {
    [10] let insertCount = 0i
    [11] let actualDeleteCount = (- len actualStart)
  } else {
    [13] let insertCount = items.length
    [14] app __x3__ = (ToIntegerOrInfinity deleteCount)
    [14] if (is-completion __x3__) if (= __x3__.Type CONST_normal) __x3__ = __x3__.Value else return __x3__ else [4] {}
    [14] let dc = __x3__
    [15] ??? "Let id:{actualDeleteCount} be the result of clamping id:{dc} between 0 and id:{len} - id:{actualStart} ."
  }
  [16] if (< (- 9007199254740992i 1i) (- (+ len insertCount) actualDeleteCount)) {
    app __x4__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_TypeError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
    return __x4__
  } else [4] {}
  [17] app __x5__ = (ArraySpeciesCreate O actualDeleteCount)
  [17] if (is-completion __x5__) if (= __x5__.Type CONST_normal) __x5__ = __x5__.Value else return __x5__ else [4] {}
  [17] let A = __x5__
  [18] let k = 0i
  [19] while (< k actualDeleteCount) {
    [20] ??? "Let id:{from} be ! ToString ( 𝔽 ( id:{actualStart} + id:{k} ) ) ."
    [21] app __x6__ = (HasProperty O from)
    [21] if (is-completion __x6__) if (= __x6__.Type CONST_normal) __x6__ = __x6__.Value else return __x6__ else [4] {}
    [21] let fromPresent = __x6__
    [22] if (= fromPresent true) {
      [23] app __x7__ = (Get O from)
      [23] if (is-completion __x7__) if (= __x7__.Type CONST_normal) __x7__ = __x7__.Value else return __x7__ else [4] {}
      [23] let fromValue = __x7__
      [24] ??? "Perform ? CreateDataPropertyOrThrow ( id:{A} , ! ToString ( 𝔽 ( id:{k} ) ) , id:{fromValue} ) ."
    } else [4] {}
    [25] k = (+ k 1i)
  }
  [26] ??? "Perform ? Set ( id:{A} , value:{\"length\"} , 𝔽 ( id:{actualDeleteCount} ) , value:{true} ) ."
  [27] let itemCount = items.length
  [45] if (< itemCount actualDeleteCount) {
    [29] k = actualStart
    [30] while (< k (- len actualDeleteCount)) {
      [31] ??? "Let id:{from} be ! ToString ( 𝔽 ( id:{k} + id:{actualDeleteCount} ) ) ."
      [32] ??? "Let id:{to} be ! ToString ( 𝔽 ( id:{k} + id:{itemCount} ) ) ."
      [33] app __x8__ = (HasProperty O from)
      [33] if (is-completion __x8__) if (= __x8__.Type CONST_normal) __x8__ = __x8__.Value else return __x8__ else [4] {}
      [33] let fromPresent = __x8__
      [37] if (= fromPresent true) {
        [35] app __x9__ = (Get O from)
        [35] if (is-completion __x9__) if (= __x9__.Type CONST_normal) __x9__ = __x9__.Value else return __x9__ else [4] {}
        [35] let fromValue = __x9__
        [36] app __x10__ = (Set O to fromValue true)
        [36] if (is-completion __x10__) if (= __x10__.Type CONST_normal) __x10__ = __x10__.Value else return __x10__ else [4] {}
        [36] __x10__
      } else {
        [38] assert (= fromPresent false)
        [39] app __x11__ = (DeletePropertyOrThrow O to)
        [39] if (is-completion __x11__) if (= __x11__.Type CONST_normal) __x11__ = __x11__.Value else return __x11__ else [4] {}
        [39] __x11__
      }
      [40] k = (+ k 1i)
    }
    [41] k = len
    [42] while (< (+ (- len actualDeleteCount) itemCount) k) {
      [43] ??? "Perform ? DeletePropertyOrThrow ( id:{O} , ! ToString ( 𝔽 ( id:{k} - 1 ) ) ) ."
      [44] k = (- k 1i)
    }
  } else if (< actualDeleteCount itemCount) {
    [46] k = (- len actualDeleteCount)
    [47] while (< actualStart k) {
      [48] ??? "Let id:{from} be ! ToString ( 𝔽 ( id:{k} + id:{actualDeleteCount} - 1 ) ) ."
      [49] ??? "Let id:{to} be ! ToString ( 𝔽 ( id:{k} + id:{itemCount} - 1 ) ) ."
      [50] app __x12__ = (HasProperty O from)
      [50] if (is-completion __x12__) if (= __x12__.Type CONST_normal) __x12__ = __x12__.Value else return __x12__ else [4] {}
      [50] let fromPresent = __x12__
      [54] if (= fromPresent true) {
        [52] app __x13__ = (Get O from)
        [52] if (is-completion __x13__) if (= __x13__.Type CONST_normal) __x13__ = __x13__.Value else return __x13__ else [4] {}
        [52] let fromValue = __x13__
        [53] app __x14__ = (Set O to fromValue true)
        [53] if (is-completion __x14__) if (= __x14__.Type CONST_normal) __x14__ = __x14__.Value else return __x14__ else [4] {}
        [53] __x14__
      } else {
        [55] assert (= fromPresent false)
        [56] app __x15__ = (DeletePropertyOrThrow O to)
        [56] if (is-completion __x15__) if (= __x15__.Type CONST_normal) __x15__ = __x15__.Value else return __x15__ else [4] {}
        [56] __x15__
      }
      [57] k = (- k 1i)
    }
  } else [4] {}
  [58] k = actualStart
  [59] let __x16__ = items
  [59] let __x17__ = 0i
  [59] while (< __x17__ __x16__.length) {
    let E = __x16__[__x17__]
    [60] ??? "Perform ? Set ( id:{O} , ! ToString ( 𝔽 ( id:{k} ) ) , id:{E} , value:{true} ) ."
    [61] k = (+ k 1i)
    __x17__ = (+ __x17__ 1i)
  }
  [62] ??? "Perform ? Set ( id:{O} , value:{\"length\"} , 𝔽 ( id:{len} - id:{actualDeleteCount} + id:{itemCount} ) , value:{true} ) ."
  [63] app __x18__ = (WrapCompletion A)
  [63] return __x18__
}