{
  app __x0__ = (GetArgument argumentsList 0i)
  let target = __x0__
  app __x1__ = (GetArgument argumentsList 1i)
  let iterable = __x1__
  app __x2__ = (GetArgument argumentsList 2i)
  let adder = __x2__
  app __x3__ = (IsCallable adder)
  if (= __x3__ false) throw TypeError else {}
  app __x4__ = (GetIterator iterable)
  let iteratorRecord = [? __x4__]
  while true {
    app __x5__ = (IteratorStep iteratorRecord)
    let next = [? __x5__]
    if (= next false) return target else {}
    app __x6__ = (IteratorValue next)
    let nextItem = [? __x6__]
    if (! (= (typeof nextItem) Object)) {
      app __x7__ = (ThrowCompletion ??? "TypeError")
      let error = __x7__
      app __x8__ = (IteratorClose iteratorRecord error)
      return [? __x8__]
    } else {}
    app __x9__ = (Get nextItem "0")
    let k = __x9__
    app __x10__ = (IsAbruptCompletion k)
    if __x10__ {
      app __x11__ = (IteratorClose iteratorRecord k)
      return [? __x11__]
    } else {}
    app __x12__ = (Get nextItem "1")
    let v = __x12__
    app __x13__ = (IsAbruptCompletion v)
    if __x13__ {
      app __x14__ = (IteratorClose iteratorRecord v)
      return [? __x14__]
    } else {}
    app __x15__ = (Call adder target (new [k.Value, v.Value]))
    let status = __x15__
    app __x16__ = (IsAbruptCompletion status)
    if __x16__ {
      app __x17__ = (IteratorClose iteratorRecord status)
      return [? __x17__]
    } else {}
  }
}