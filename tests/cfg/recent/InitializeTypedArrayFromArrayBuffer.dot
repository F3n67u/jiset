digraph {
  node17226 [shape=cds, label=<<font color="black">8:app __x2__ = (IsDetachedBuffer buffer)</font>> color="black" fillcolor="white" style=filled]
  node17221 [shape=diamond, label=<<font color="black">(! (== (%% offset elementSize) 0i))</font>> color="black" fillcolor="white" style=filled]
  node17234 [shape=diamond, label=<<font color="black">(&lt; newByteLength 0i)</font>> color="black" fillcolor="white" style=filled]
  node17238 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw RangeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17231 [shape=diamond, label=<<font color="black">(! (== (%% bufferByteLength elementSize) 0i))</font>> color="black" fillcolor="white" style=filled]
  node17236 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">15:let newByteLength = (* newLength elementSize)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17216 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node17223 [shape=diamond, label=<<font color="black">(! (= length undefined))</font>> color="black" fillcolor="white" style=filled]
  node17233 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">12:let newByteLength = (- bufferByteLength offset)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17224 [shape=cds, label=<<font color="black">7:app __x1__ = (ToIndex length)</font>> color="black" fillcolor="white" style=filled]
  node17225 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">7:let newLength = [? __x1__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17232 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw RangeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17218 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">2:let constructorName = O.TypedArrayName</td></tr>
      <tr><td align="left">3:??? &quot;Let id:{elementSize} be the Element Size value specified in link:{unhandled: table-the-typedarray-constructors} for id:{constructorName} .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17239 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">17:O.ViewedArrayBuffer = buffer</td></tr>
      <tr><td align="left">18:O.ByteLength = newByteLength</td></tr>
      <tr><td align="left">19:O.ByteOffset = offset</td></tr>
      <tr><td align="left">20:O.ArrayLength = (/ newByteLength elementSize)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17229 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">9:let bufferByteLength = buffer.ArrayBufferByteLength</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17228 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17222 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw RangeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17235 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw RangeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17217 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node17219 [shape=cds, label=<<font color="black">4:app __x0__ = (ToIndex byteOffset)</font>> color="black" fillcolor="white" style=filled]
  node17220 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">4:let offset = [? __x0__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17237 [shape=diamond, label=<<font color="black">(&lt; bufferByteLength (+ offset newByteLength))</font>> color="black" fillcolor="white" style=filled]
  node17227 [shape=diamond, label=<<font color="black">(= __x2__ true)</font>> color="black" fillcolor="white" style=filled]
  node17230 [shape=diamond, label=<<font color="black">(= length undefined)</font>> color="black" fillcolor="white" style=filled]
  node17222 -> node17223 [ color="black"]
  node17221 -> node17222 [label=<<font color="black">true</font>> color="black"]
  node17221 -> node17223 [label=<<font color="black">false</font>> color="black"]
  node17230 -> node17231 [label=<<font color="black">true</font>> color="black"]
  node17230 -> node17236 [label=<<font color="black">false</font>> color="black"]
  node17231 -> node17232 [label=<<font color="black">true</font>> color="black"]
  node17231 -> node17233 [label=<<font color="black">false</font>> color="black"]
  node17218 -> node17219 [ color="black"]
  node17224 -> node17225 [ color="black"]
  node17238 -> node17239 [ color="black"]
  node17235 -> node17239 [ color="black"]
  node17233 -> node17234 [ color="black"]
  node17237 -> node17238 [label=<<font color="black">true</font>> color="black"]
  node17237 -> node17239 [label=<<font color="black">false</font>> color="black"]
  node17225 -> node17226 [ color="black"]
  node17239 -> node17217 [ color="black"]
  node17229 -> node17230 [ color="black"]
  node17232 -> node17233 [ color="black"]
  node17236 -> node17237 [ color="black"]
  node17234 -> node17235 [label=<<font color="black">true</font>> color="black"]
  node17234 -> node17239 [label=<<font color="black">false</font>> color="black"]
  node17223 -> node17224 [label=<<font color="black">true</font>> color="black"]
  node17223 -> node17226 [label=<<font color="black">false</font>> color="black"]
  node17220 -> node17221 [ color="black"]
  node17219 -> node17220 [ color="black"]
  node17226 -> node17227 [ color="black"]
  node17227 -> node17228 [label=<<font color="black">true</font>> color="black"]
  node17227 -> node17229 [label=<<font color="black">false</font>> color="black"]
  node17228 -> node17229 [ color="black"]
  node17216 -> node17218 [ color="black"]
}
