{
  app __x0__ = (IsPropertyKey P)
  assert (= __x0__ true)
  app __x1__ = (Type P)
  if (! (= __x1__ String)) {
    app __x2__ = (WrapCompletion undefined)
    return __x2__
  } else {}
  app __x3__ = (CanonicalNumericIndexString P)
  if (is-completion __x3__) if (= __x3__.Type CONST_normal) __x3__ = __x3__.Value else return __x3__ else {}
  let index = __x3__
  if (= index undefined) {
    app __x4__ = (WrapCompletion undefined)
    return __x4__
  } else {}
  app __x5__ = (IsInteger index)
  if (= __x5__ false) {
    app __x6__ = (WrapCompletion undefined)
    return __x6__
  } else {}
  if (== index -0.0) {
    app __x7__ = (WrapCompletion undefined)
    return __x7__
  } else {}
  let str = S.StringData
  let len = str.length
  if (|| (< index 0i) (! (< index len))) {
    app __x8__ = (WrapCompletion undefined)
    return __x8__
  } else {}
  ??? "Let id:{resultStr} be a String value of length 1 , containing one code unit from id:{str} , specifically the code unit at index id:{index} ."
  app __x9__ = (WrapCompletion (new PropertyDescriptor("Value" -> resultStr, "Writable" -> false, "Enumerable" -> true, "Configurable" -> false)))
  return __x9__
}