{
  let Target = this
  app __x0__ = (IsCallable Target)
  if (= __x0__ false) {
    app __x1__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_TypeError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
    return __x1__
  } else {}
  ??? "Let id:{args} be a new ( possibly empty ) List consisting of all of the argument values provided after id:{thisArg} in order ."
  app __x2__ = (BoundFunctionCreate Target thisArg args)
  if (is-completion __x2__) if (= __x2__.Type CONST_normal) __x2__ = __x2__.Value else return __x2__ else {}
  let F = __x2__
  app __x3__ = (HasOwnProperty Target "length")
  if (is-completion __x3__) if (= __x3__.Type CONST_normal) __x3__ = __x3__.Value else return __x3__ else {}
  let targetHasLength = __x3__
  if (= targetHasLength true) {
    app __x4__ = (Get Target "length")
    if (is-completion __x4__) if (= __x4__.Type CONST_normal) __x4__ = __x4__.Value else return __x4__ else {}
    let targetLen = __x4__
    app __x5__ = (Type targetLen)
    if (! (= __x5__ Number)) let L = 0i else {
      app __x6__ = (ToInteger targetLen)
      let targetLen = __x6__
      ??? "Let id:{L} be the larger of 0 and the result of id:{targetLen} minus the number of elements of id:{args} ."
    }
  } else let L = 0i
  app __x7__ = (SetFunctionLength F L)
  if (is-completion __x7__) if (= __x7__.Type CONST_normal) __x7__ = __x7__.Value else return __x7__ else {}
  __x7__
  app __x8__ = (Get Target "name")
  if (is-completion __x8__) if (= __x8__.Type CONST_normal) __x8__ = __x8__.Value else return __x8__ else {}
  let targetName = __x8__
  app __x9__ = (Type targetName)
  if (! (= __x9__ String)) let targetName = "" else {}
  app __x10__ = (SetFunctionName F targetName "bound")
  __x10__
  app __x11__ = (WrapCompletion F)
  return __x11__
}