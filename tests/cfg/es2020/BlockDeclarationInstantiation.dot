digraph {
  node6474 [shape=cds, label=<<font color="black">7:access __x6__ = (d &quot;IsConstantDeclaration&quot;)</font>> color="black" fillcolor="white" style=filled]
  node6477 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">6:[! __x7__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node6486 [shape=cds, label=<<font color="black">12:app __x11__ = (envRec.InitializeBinding envRec fn fo)</font>> color="black" fillcolor="white" style=filled]
  node6469 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let d = __x1__[__x2__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node6468 [shape=diamond, label=<<font color="black">(&lt; __x2__ __x1__.length)</font>> color="black" fillcolor="white" style=filled]
  node6478 [shape=cds, label=<<font color="black">8:app __x8__ = (envRec.CreateMutableBinding envRec dn false)</font>> color="black" fillcolor="white" style=filled]
  node6484 [shape=cds, label=<<font color="black">11:access __x10__ = (d &quot;InstantiateFunctionObject&quot; env)</font>> color="black" fillcolor="white" style=filled]
  node6488 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">__x2__ = (+ __x2__ 1i)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node6463 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node6480 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">__x5__ = (+ __x5__ 1i)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node6466 [shape=cds, label=<<font color="black">2:access __x0__ = (code &quot;LexicallyScopedDeclarations&quot;)</font>> color="black" fillcolor="white" style=filled]
  node6483 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">10:let fn = __x9__[0i]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node6470 [shape=cds, label=<<font color="black">4:access __x3__ = (d &quot;BoundNames&quot;)</font>> color="black" fillcolor="white" style=filled]
  node6487 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">12:__x11__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node6482 [shape=cds, label=<<font color="black">10:access __x9__ = (d &quot;BoundNames&quot;)</font>> color="black" fillcolor="white" style=filled]
  node6464 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node6475 [shape=diamond, label=<<font color="black">(= __x6__ true)</font>> color="black" fillcolor="white" style=filled]
  node6465 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let envRec = env.EnvironmentRecord</td></tr>
      <tr><td align="left">1:assert (= (typeof envRec) &quot;DeclarativeEnvironmentRecord&quot;)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node6485 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">11:let fo = __x10__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node6476 [shape=cds, label=<<font color="black">6:app __x7__ = (envRec.CreateImmutableBinding envRec dn true)</font>> color="black" fillcolor="white" style=filled]
  node6472 [shape=diamond, label=<<font color="black">(&lt; __x5__ __x4__.length)</font>> color="black" fillcolor="white" style=filled]
  node6481 [shape=diamond, label=<<font color="black">(|| (|| (|| (is-instance-of d FunctionDeclaration) (is-instance-of d GeneratorDeclaration)) (is-instance-of d AsyncFunctionDeclaration)) (is-instance-of d AsyncGeneratorDeclaration))</font>> color="black" fillcolor="white" style=filled]
  node6479 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">8:[! __x8__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node6467 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">2:let declarations = __x0__</td></tr>
      <tr><td align="left">3:let __x1__ = declarations</td></tr>
      <tr><td align="left">3:let __x2__ = 0i</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node6473 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let dn = __x4__[__x5__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node6471 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">4:let __x4__ = __x3__</td></tr>
      <tr><td align="left">4:let __x5__ = 0i</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node6465 -> node6466 [ color="black"]
  node6463 -> node6465 [ color="black"]
  node6487 -> node6488 [ color="black"]
  node6467 -> node6468 [ color="black"]
  node6483 -> node6484 [ color="black"]
  node6486 -> node6487 [ color="black"]
  node6485 -> node6486 [ color="black"]
  node6474 -> node6475 [ color="black"]
  node6471 -> node6472 [ color="black"]
  node6479 -> node6480 [ color="black"]
  node6481 -> node6482 [label=<<font color="black">true</font>> color="black"]
  node6481 -> node6488 [label=<<font color="black">false</font>> color="black"]
  node6488 -> node6468 [ color="black"]
  node6468 -> node6469 [label=<<font color="black">true</font>> color="black"]
  node6468 -> node6464 [label=<<font color="black">false</font>> color="black"]
  node6480 -> node6472 [ color="black"]
  node6475 -> node6476 [label=<<font color="black">true</font>> color="black"]
  node6475 -> node6478 [label=<<font color="black">false</font>> color="black"]
  node6482 -> node6483 [ color="black"]
  node6472 -> node6473 [label=<<font color="black">true</font>> color="black"]
  node6472 -> node6481 [label=<<font color="black">false</font>> color="black"]
  node6478 -> node6479 [ color="black"]
  node6484 -> node6485 [ color="black"]
  node6466 -> node6467 [ color="black"]
  node6469 -> node6470 [ color="black"]
  node6470 -> node6471 [ color="black"]
  node6476 -> node6477 [ color="black"]
  node6473 -> node6474 [ color="black"]
  node6477 -> node6480 [ color="black"]
}
