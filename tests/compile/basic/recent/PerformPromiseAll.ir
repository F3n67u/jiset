{
  app __x0__ = (IsConstructor constructor)
  assert (= __x0__ true)
  app __x1__ = (IsCallable promiseResolve)
  assert (= __x1__ true)
  let values = (new [])
  let remainingElementsCount = (new Record("Value" -> 1i))
  let index = 0i
  while true {
    app __x2__ = (IteratorStep iteratorRecord)
    let next = __x2__
    app __x3__ = (IsAbruptCompletion next)
    if __x3__ iteratorRecord.Done = true else {}
    [? next]
    if (= next false) {
      iteratorRecord.Done = true
      remainingElementsCount.Value = (- remainingElementsCount.Value 1i)
      if (= remainingElementsCount.Value 0i) {
        app __x4__ = (CreateArrayFromList values)
        let valuesArray = [! __x4__]
        app __x5__ = (Call resultCapability.Resolve undefined (new [valuesArray]))
        [? __x5__]
      } else {}
      return resultCapability.Promise
    } else {}
    app __x6__ = (IteratorValue next)
    let nextValue = __x6__
    app __x7__ = (IsAbruptCompletion nextValue)
    if __x7__ iteratorRecord.Done = true else {}
    [? nextValue]
    append undefined -> values
    app __x8__ = (Call promiseResolve constructor (new [nextValue]))
    let nextPromise = [? __x8__]
    ??? "Let id:{steps} be the algorithm steps defined in link:{sec-promise.all-resolve-element-functions} ."
    ??? "Let id:{length} be the number of non - optional parameters of the function definition in link:{sec-promise.all-resolve-element-functions} ."
    app __x9__ = (CreateBuiltinFunction steps length "" (new ["AlreadyCalled", "Index", "Values", "Capability", "RemainingElements"]))
    let onFulfilled = [! __x9__]
    onFulfilled.AlreadyCalled = false
    onFulfilled.Index = index
    onFulfilled.Values = values
    onFulfilled.Capability = resultCapability
    onFulfilled.RemainingElements = remainingElementsCount
    remainingElementsCount.Value = (+ remainingElementsCount.Value 1i)
    app __x10__ = (Invoke nextPromise "then" (new [onFulfilled, resultCapability.Reject]))
    [? __x10__]
    index = (+ index 1i)
  }
}