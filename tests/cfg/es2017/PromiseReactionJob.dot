digraph {
  node16452 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node16463 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let handlerResult = __x1__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16455 [shape=cds, label=<<font color="black">app argument = (GetArgument argumentsList 1i)</font>> color="black" fillcolor="white" style=filled]
  node16468 [shape=cds, label=<<font color="black">13:app __x4__ = (Call promiseCapability.Resolve undefined (new [handlerResult.Value]))</font>> color="black" fillcolor="white" style=filled]
  node16464 [shape=cds, label=<<font color="black">12:app __x2__ = (IsAbruptCompletion handlerResult)</font>> color="black" fillcolor="white" style=filled]
  node16454 [shape=cds, label=<<font color="black">app reaction = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node16467 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">11:let status = __x3__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16457 [shape=diamond, label=<<font color="black">(= handler undefined)</font>> color="black" fillcolor="white" style=filled]
  node16461 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">7:assert (= type &quot;Reject&quot;)</td></tr>
      <tr><td align="left">8:let handlerResult = (new Completion(&quot;Type&quot; -&gt; CONST_throw, &quot;Value&quot; -&gt; argument, &quot;Target&quot; -&gt; CONST_empty))</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16470 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">14:return status</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16453 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node16458 [shape=diamond, label=<<font color="black">(= type &quot;Fulfill&quot;)</font>> color="black" fillcolor="white" style=filled]
  node16462 [shape=cds, label=<<font color="black">app __x1__ = (Call handler undefined (new [argument]))</font>> color="black" fillcolor="white" style=filled]
  node16466 [shape=cds, label=<<font color="black">11:app __x3__ = (Call promiseCapability.Reject undefined (new [handlerResult.Value]))</font>> color="black" fillcolor="white" style=filled]
  node16459 [shape=cds, label=<<font color="black">app __x0__ = (NormalCompletion argument)</font>> color="black" fillcolor="white" style=filled]
  node16456 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">1:let promiseCapability = reaction.Capability</td></tr>
      <tr><td align="left">2:let type = reaction.Type</td></tr>
      <tr><td align="left">3:let handler = reaction.Handler</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16469 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">13:let status = __x4__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16460 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let handlerResult = __x0__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16465 [shape=diamond, label=<<font color="black">__x2__</font>> color="black" fillcolor="white" style=filled]
  node16466 -> node16467 [ color="black"]
  node16456 -> node16457 [ color="black"]
  node16462 -> node16463 [ color="black"]
  node16469 -> node16470 [ color="black"]
  node16467 -> node16470 [ color="black"]
  node16454 -> node16455 [ color="black"]
  node16461 -> node16464 [ color="black"]
  node16457 -> node16458 [label=<<font color="black">true</font>> color="black"]
  node16457 -> node16462 [label=<<font color="black">false</font>> color="black"]
  node16465 -> node16466 [label=<<font color="black">true</font>> color="black"]
  node16465 -> node16468 [label=<<font color="black">false</font>> color="black"]
  node16464 -> node16465 [ color="black"]
  node16459 -> node16460 [ color="black"]
  node16468 -> node16469 [ color="black"]
  node16452 -> node16454 [ color="black"]
  node16460 -> node16464 [ color="black"]
  node16463 -> node16464 [ color="black"]
  node16455 -> node16456 [ color="black"]
  node16470 -> node16453 [ color="black"]
  node16458 -> node16459 [label=<<font color="black">true</font>> color="black"]
  node16458 -> node16461 [label=<<font color="black">false</font>> color="black"]
}
