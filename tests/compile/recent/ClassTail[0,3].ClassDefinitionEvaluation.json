[{
  "tokens": ["Let", {
    "id": "env"
  }, "be", "the", "LexicalEnvironment", "of", "the", "running", "execution", "context", "."]
}, {
  "tokens": ["Let", {
    "id": "classScope"
  }, "be", "NewDeclarativeEnvironment", "(", {
    "id": "env"
  }, ")", "."]
}, {
  "tokens": ["If", {
    "id": "classBinding"
  }, "is", "not", {
    "value": "undefined"
  }, ",", "then"]
}, {
  "tokens": ["Perform", {
    "id": "classScope"
  }, ".", "CreateImmutableBinding", "(", {
    "id": "classBinding"
  }, ",", {
    "value": "true"
  }, ")", "."]
}, {
  "tokens": ["If", {
    "nt": "ClassHeritage"
  }, "is", "not", "present", ",", "then"]
}, {
  "tokens": ["Let", {
    "id": "protoParent"
  }, "be", "%", "Object", ".", "prototype", "%", "."]
}, {
  "tokens": ["Let", {
    "id": "constructorParent"
  }, "be", "%", "Function", ".", "prototype", "%", "."]
}, {
  "tokens": ["Else", ","]
}, {
  "tokens": ["Set", "the", "running", "execution", "context", "'", "s", "LexicalEnvironment", "to", {
    "id": "classScope"
  }, "."]
}, {
  "tokens": ["Let", {
    "id": "superclassRef"
  }, "be", "the", "result", "of", "evaluating", {
    "nt": "ClassHeritage"
  }, "."]
}, {
  "tokens": ["Set", "the", "running", "execution", "context", "'", "s", "LexicalEnvironment", "to", {
    "id": "env"
  }, "."]
}, {
  "tokens": ["Let", {
    "id": "superclass"
  }, "be", "?", "GetValue", "(", {
    "id": "superclassRef"
  }, ")", "."]
}, {
  "tokens": ["If", {
    "id": "superclass"
  }, "is", {
    "value": "null"
  }, ",", "then"]
}, {
  "tokens": ["Let", {
    "id": "protoParent"
  }, "be", {
    "value": "null"
  }, "."]
}, {
  "tokens": ["Let", {
    "id": "constructorParent"
  }, "be", "%", "Function", ".", "prototype", "%", "."]
}, {
  "tokens": ["Else", "if", "IsConstructor", "(", {
    "id": "superclass"
  }, ")", "is", {
    "value": "false"
  }, ",", "throw", "a", {
    "value": "TypeError"
  }, "exception", "."]
}, {
  "tokens": ["Else", ","]
}, {
  "tokens": ["Let", {
    "id": "protoParent"
  }, "be", "?", "Get", "(", {
    "id": "superclass"
  }, ",", {
    "value": "\"prototype\""
  }, ")", "."]
}, {
  "tokens": ["If", "Type", "(", {
    "id": "protoParent"
  }, ")", "is", "neither", "Object", "nor", "Null", ",", "throw", "a", {
    "value": "TypeError"
  }, "exception", "."]
}, {
  "tokens": ["Let", {
    "id": "constructorParent"
  }, "be", {
    "id": "superclass"
  }, "."]
}, {
  "tokens": ["Let", {
    "id": "proto"
  }, "be", "!", "OrdinaryObjectCreate", "(", {
    "id": "protoParent"
  }, ")", "."]
}, {
  "tokens": ["If", {
    "nt": "ClassBody"
  }, "is", "not", "present", ",", "let", {
    "id": "constructor"
  }, "be", {
    "const": "empty"
  }, "."]
}, {
  "tokens": ["Else", ",", "let", {
    "id": "constructor"
  }, "be", "ConstructorMethod", "of", {
    "nt": "ClassBody"
  }, "."]
}, {
  "tokens": ["If", {
    "id": "constructor"
  }, "is", {
    "const": "empty"
  }, ",", "then"]
}, {
  "tokens": ["If", {
    "nt": "ClassHeritage"
  }, "is", "present", ",", "then"]
}, {
  "tokens": ["Let", {
    "id": "constructorText"
  }, "be", "the", "source", "text"]
}, {
  "tokens": []
}, {
  "tokens": ["Else", ","]
}, {
  "tokens": ["Let", {
    "id": "constructorText"
  }, "be", "the", "source", "text"]
}, {
  "tokens": []
}, {
  "tokens": ["Set", {
    "id": "constructor"
  }, "to", "ParseText", "(", {
    "id": "constructorText"
  }, ",", "|", "MethodDefinition", "[", "~", "Yield", ",", "~", "Await", "]", "|", ")", "."]
}, {
  "tokens": ["Assert", ":", {
    "id": "constructor"
  }, "is", "a", "Parse", "Node", "."]
}, {
  "tokens": ["Set", "the", "running", "execution", "context", "'", "s", "LexicalEnvironment", "to", {
    "id": "classScope"
  }, "."]
}, {
  "tokens": ["Let", {
    "id": "constructorInfo"
  }, "be", "!", "DefineMethod", "of", {
    "id": "constructor"
  }, "with", "arguments", {
    "id": "proto"
  }, "and", {
    "id": "constructorParent"
  }, "."]
}, {
  "tokens": ["Let", {
    "id": "F"
  }, "be", {
    "id": "constructorInfo"
  }, ".", "[", "[", "Closure", "]", "]", "."]
}, {
  "tokens": ["Perform", "SetFunctionName", "(", {
    "id": "F"
  }, ",", {
    "id": "className"
  }, ")", "."]
}, {
  "tokens": ["Perform", "MakeConstructor", "(", {
    "id": "F"
  }, ",", {
    "value": "false"
  }, ",", {
    "id": "proto"
  }, ")", "."]
}, {
  "tokens": ["If", {
    "nt": "ClassHeritage"
  }, "is", "present", ",", "set", {
    "id": "F"
  }, ".", "[", "[", "ConstructorKind", "]", "]", "to", {
    "const": "derived"
  }, "."]
}, {
  "tokens": ["Perform", "MakeClassConstructor", "(", {
    "id": "F"
  }, ")", "."]
}, {
  "tokens": ["Perform", "CreateMethodProperty", "(", {
    "id": "proto"
  }, ",", {
    "value": "\"constructor\""
  }, ",", {
    "id": "F"
  }, ")", "."]
}, {
  "tokens": ["If", {
    "nt": "ClassBody"
  }, "is", "not", "present", ",", "let", {
    "id": "methods"
  }, "be", "a", "new", "empty", "List", "."]
}, {
  "tokens": ["Else", ",", "let", {
    "id": "methods"
  }, "be", "NonConstructorMethodDefinitions", "of", {
    "nt": "ClassBody"
  }, "."]
}, {
  "tokens": ["For", "each", {
    "nt": "ClassElement"
  }, {
    "id": "m"
  }, "of", {
    "id": "methods"
  }, ",", "do"]
}, {
  "tokens": ["If", "IsStatic", "of", {
    "id": "m"
  }, "is", {
    "value": "false"
  }, ",", "then"]
}, {
  "tokens": ["Let", {
    "id": "status"
  }, "be", "PropertyDefinitionEvaluation", "of", {
    "id": "m"
  }, "with", "arguments", {
    "id": "proto"
  }, "and", {
    "value": "false"
  }, "."]
}, {
  "tokens": ["Else", ","]
}, {
  "tokens": ["Let", {
    "id": "status"
  }, "be", "PropertyDefinitionEvaluation", "of", {
    "id": "m"
  }, "with", "arguments", {
    "id": "F"
  }, "and", {
    "value": "false"
  }, "."]
}, {
  "tokens": ["If", {
    "id": "status"
  }, "is", "an", "abrupt", "completion", ",", "then"]
}, {
  "tokens": ["Set", "the", "running", "execution", "context", "'", "s", "LexicalEnvironment", "to", {
    "id": "env"
  }, "."]
}, {
  "tokens": ["Return", "Completion", "(", {
    "id": "status"
  }, ")", "."]
}, {
  "tokens": ["Set", "the", "running", "execution", "context", "'", "s", "LexicalEnvironment", "to", {
    "id": "env"
  }, "."]
}, {
  "tokens": ["If", {
    "id": "classBinding"
  }, "is", "not", {
    "value": "undefined"
  }, ",", "then"]
}, {
  "tokens": ["Perform", {
    "id": "classScope"
  }, ".", "InitializeBinding", "(", {
    "id": "classBinding"
  }, ",", {
    "id": "F"
  }, ")", "."]
}, {
  "tokens": ["Return", {
    "id": "F"
  }, "."]
}]