digraph {
  node5778 [shape=cds, label=<<font color="black">access HoistableDeclaration = (Declaration &quot;HoistableDeclaration&quot;)</font>> color="black" fillcolor="white" style=filled]
  node5779 [shape=cds, label=<<font color="black">1:access __x0__ = (HoistableDeclaration &quot;DeclarationPart&quot;)</font>> color="black" fillcolor="white" style=filled]
  node5776 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node5780 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">1:let declaration = __x0__</td></tr>
      <tr><td align="left">2:return (new [declaration])</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node5775 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node5777 [shape=diamond, label=<<font color="black">(is-instance-of Declaration Declaration0)</font>> color="black" fillcolor="white" style=filled]
  node5781 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">3:return (new [])</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node5780 -> node5781 [ color="black"]
  node5777 -> node5778 [label=<<font color="black">true</font>> color="black"]
  node5777 -> node5781 [label=<<font color="black">false</font>> color="black"]
  node5775 -> node5777 [ color="black"]
  node5778 -> node5779 [ color="black"]
  node5781 -> node5776 [ color="black"]
  node5779 -> node5780 [ color="black"]
}
