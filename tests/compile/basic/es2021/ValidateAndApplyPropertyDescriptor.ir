{
  if (= current undefined) {
    if (= extensible false) return false else {}
    assert (= extensible true)
    let __x0__ = true
    app __x1__ = (IsGenericDescriptor Desc)
    __x0__ = (= __x1__ true)
    if __x0__ {} else {
      app __x2__ = (IsDataDescriptor Desc)
      __x0__ = (= __x2__ true)
    }
    if __x0__ if (! (= O undefined)) {
      let dp = (new DataProperty())
      if (! (= absent Desc.Value)) dp.Value = Desc.Value else dp.Value = undefined
      if (! (= absent Desc.Writable)) dp.Writable = Desc.Writable else dp.Writable = false
      if (! (= absent Desc.Enumerable)) dp.Enumerable = Desc.Enumerable else dp.Enumerable = false
      if (! (= absent Desc.Configurable)) dp.Configurable = Desc.Configurable else dp.Configurable = false
      O.SubMap[P] = dp
    } else {} else {
      app __x3__ = (IsAccessorDescriptor Desc)
      assert (= [! __x3__] true)
      if (= O undefined) {} else {}
    }
    return true
  } else {}
  if (&& (= absent Desc.Value) (&& (= absent Desc.Writable) (&& (= absent Desc.Get) (&& (= absent Desc.Set) (&& (= absent Desc.Enumerable) (= absent Desc.Configurable)))))) return true else {}
  if (= current.Configurable false) {
    if (= Desc.Configurable true) return false else {}
    let __x4__ = true
    __x4__ = (! (= Desc.Enumerable absent))
    if __x4__ {
      app __x5__ = (SameValue Desc.Enumerable current.Enumerable)
      __x4__ = (= [! __x5__] false)
    } else {}
    if __x4__ return false else {}
  } else {}
  app __x6__ = (IsGenericDescriptor Desc)
  if (= [! __x6__] true) {} else {
    app __x7__ = (IsDataDescriptor current)
    app __x8__ = (IsDataDescriptor Desc)
    app __x9__ = (SameValue [! __x7__] [! __x8__])
    if (= [! __x9__] false) {
      if (= current.Configurable false) return false else {}
      app __x10__ = (IsDataDescriptor current)
      if (= __x10__ true) if (= O undefined) {} else {} else if (= O undefined) {} else {}
    } else {
      app __x11__ = (IsDataDescriptor current)
      app __x12__ = (IsDataDescriptor Desc)
      if (&& (= __x11__ true) (= __x12__ true)) if (&& (= current.Configurable false) (= current.Writable false)) {
        if (&& (! (= Desc.Writable absent)) (= Desc.Writable true)) return false else {}
        let __x13__ = true
        __x13__ = (! (= Desc.Value absent))
        if __x13__ {
          app __x14__ = (SameValue Desc.Value current.Value)
          __x13__ = (= __x14__ false)
        } else {}
        if __x13__ return false else {}
        return true
      } else {} else {
        app __x15__ = (IsAccessorDescriptor current)
        app __x16__ = (IsAccessorDescriptor Desc)
        assert (&& (= [! __x15__] true) (= [! __x16__] true))
        if (= current.Configurable false) {
          let __x17__ = true
          __x17__ = (! (= Desc.Set absent))
          if __x17__ {
            app __x18__ = (SameValue Desc.Set current.Set)
            __x17__ = (= __x18__ false)
          } else {}
          if __x17__ return false else {}
          let __x19__ = true
          __x19__ = (! (= Desc.Get absent))
          if __x19__ {
            app __x20__ = (SameValue Desc.Get current.Get)
            __x19__ = (= __x20__ false)
          } else {}
          if __x19__ return false else {}
          return true
        } else {}
      }
    }
  }
  if (! (= O undefined)) {
    let __keys__ = (map-keys Desc)
    let __i__ = 0i
    while (< __i__ __keys__.length) {
      let __key__ = __keys__[__i__]
      O.SubMap[P][__key__] = Desc[__key__]
      __i__ = (+ __i__ 1i)
    }
  } else {}
  return true
}