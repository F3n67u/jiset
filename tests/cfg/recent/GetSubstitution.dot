digraph {
  node0 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node2 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:assert (= (typeof matched) String)</td></tr>
      <tr><td align="left">1:let matchLength = matched.length</td></tr>
      <tr><td align="left">2:assert (= (typeof str) String)</td></tr>
      <tr><td align="left">3:let stringLength = str.length</td></tr>
      <tr><td align="left">4:assert (! (&lt; stringLength position))</td></tr>
      <tr><td align="left">6:assert (= (typeof replacement) String)</td></tr>
      <tr><td align="left">7:let tailPos = (+ position matchLength)</td></tr>
      <tr><td align="left">8:let m = captures.length</td></tr>
      <tr><td align="left">9:??? &quot;Let id:{result} be the String value derived from id:{replacement} by copying code unit elements from id:{replacement} to id:{result} while performing replacements as specified in link:{unhandled: table-replacement-text-symbol-substitutions} . These code:{$} replacements are done left - to - right , and , once such a replacement is performed , the new replacement text is not subject to further replacements .&quot;</td></tr>
      <tr><td align="left">10:return result</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node1 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node0 -> node2 [ color="black"]
  node2 -> node1 [ color="black"]
}
