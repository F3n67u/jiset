{
  app __x0__ = (Type targetFunction)
  assert (= __x0__ Object)
  app __x1__ = (targetFunction.GetPrototypeOf targetFunction)
  let proto = [? __x1__]
  let obj = (new OrdinaryObject("SubMap" -> (new SubMap())))
  obj.Call = BoundFunctionExoticObjectDOTCall
  app __x2__ = (IsConstructor targetFunction)
  if (= __x2__ true) obj.Construct = BoundFunctionExoticObjectDOTConstruct else {}
  obj.Prototype = proto
  obj.Extensible = true
  obj.BoundTargetFunction = targetFunction
  obj.BoundThis = boundThis
  obj.BoundArguments = boundArgs
  return obj
}