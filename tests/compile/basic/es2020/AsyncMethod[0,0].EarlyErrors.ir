{
  access __x0__ = (AsyncFunctionBody "ContainsUseStrict")
  let __x1__ = (= __x0__ true)
  if __x1__ {
    access __x2__ = (UniqueFormalParameters "IsSimpleParameterList")
    __x1__ = (= __x2__ false)
  } else {}
  if __x1__ {
    app __x3__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_SyntaxError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
    return __x3__
  } else {}
  access __x4__ = (AsyncMethod "HasDirectSuper")
  if (= __x4__ true) {
    app __x3__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_SyntaxError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
    return __x3__
  } else {}
  access __x5__ = (UniqueFormalParameters "Contains")
  app __x6__ = (__x5__ "AwaitExpression")
  if (= __x6__ true) {
    app __x3__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_SyntaxError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
    return __x3__
  } else {}
  access __x7__ = (UniqueFormalParameters "BoundNames")
  access __x8__ = (AsyncFunctionBody "LexicallyDeclaredNames")
  let __x9__ = __x7__
  let __x10__ = __x8__
  let __x11__ = 0i
  let __x12__ = 0i
  let __x13__ = false
  while (< __x11__ __x9__.length) {
    __x12__ = 0i
    while (< __x12__ __x10__.length) if (= __x9__[__x11__] __x10__[__x12__]) __x13__ = true else {}
  }
  if __x13__ {
    app __x3__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_SyntaxError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
    return __x3__
  } else {}
}