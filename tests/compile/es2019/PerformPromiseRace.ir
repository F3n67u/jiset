{
  app iteratorRecord = (GetArgument argumentsList 0i)
  app constructor = (GetArgument argumentsList 1i)
  app resultCapability = (GetArgument argumentsList 2i)
  [0] app __x0__ = (IsConstructor constructor)
  [0] assert (= __x0__ true)
  [2] while true {
    [3] app __x1__ = (IteratorStep iteratorRecord)
    [3] let next = __x1__
    [4] app __x2__ = (IsAbruptCompletion next)
    [4] if __x2__ iteratorRecord.Done = true else [1] {}
    [5] if (is-completion next) if (= next.Type CONST_normal) next = next.Value else return next else [1] {}
    [5] next
    [6] if (= next false) {
      [7] iteratorRecord.Done = true
      [8] app __x3__ = (WrapCompletion resultCapability.Promise)
      [8] return __x3__
    } else [1] {}
    [9] app __x4__ = (IteratorValue next)
    [9] let nextValue = __x4__
    [10] app __x5__ = (IsAbruptCompletion nextValue)
    [10] if __x5__ iteratorRecord.Done = true else [1] {}
    [11] if (is-completion nextValue) if (= nextValue.Type CONST_normal) nextValue = nextValue.Value else return nextValue else [1] {}
    [11] nextValue
    [12] app __x6__ = (Invoke constructor "resolve" (new [nextValue]))
    [12] if (is-completion __x6__) if (= __x6__.Type CONST_normal) __x6__ = __x6__.Value else return __x6__ else [1] {}
    [12] let nextPromise = __x6__
    [13] app __x7__ = (Invoke nextPromise "then" (new [resultCapability.Resolve, resultCapability.Reject]))
    [13] if (is-completion __x7__) if (= __x7__.Type CONST_normal) __x7__ = __x7__.Value else return __x7__ else [1] {}
    [13] __x7__
  }
}