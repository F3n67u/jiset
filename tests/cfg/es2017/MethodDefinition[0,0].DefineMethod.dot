digraph {
  node8114 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let strict = false</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node8118 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">8:let kind = CONST_Method</td></tr>
      <tr><td align="left">9:let prototype = INTRINSIC_FunctionPrototype</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node8122 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">11:__x2__</td></tr>
      <tr><td align="left">12:return (new Record(&quot;Key&quot; -&gt; propKey, &quot;Closure&quot; -&gt; closure))</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node8121 [shape=cds, label=<<font color="black">11:app __x2__ = (MakeMethod closure object)</font>> color="black" fillcolor="white" style=filled]
  node8109 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node8113 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let strict = true</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node8117 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">5:let kind = CONST_Normal</td></tr>
      <tr><td align="left">6:let prototype = functionPrototype</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node8120 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">10:let closure = __x1__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node8116 [shape=diamond, label=<<font color="black">(! (= functionPrototype absent))</font>> color="black" fillcolor="white" style=filled]
  node8111 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let propKey = __x0__</td></tr>
      <tr><td align="left">1:[? propKey]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node8108 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node8119 [shape=cds, label=<<font color="black">10:app __x1__ = (FunctionCreate kind UniqueFormalParameters FunctionBody scope strict prototype)</font>> color="black" fillcolor="white" style=filled]
  node8115 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">3:let scope = GLOBAL_context.LexicalEnvironment</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node8110 [shape=cds, label=<<font color="black">0:access __x0__ = (PropertyName &quot;Evaluation&quot;)</font>> color="black" fillcolor="white" style=filled]
  node8112 [shape=diamond, label=<<font color="black">true</font>> color="black" fillcolor="white" style=filled]
  node8121 -> node8122 [ color="black"]
  node8122 -> node8109 [ color="black"]
  node8114 -> node8115 [ color="black"]
  node8113 -> node8115 [ color="black"]
  node8118 -> node8119 [ color="black"]
  node8110 -> node8111 [ color="black"]
  node8112 -> node8113 [label=<<font color="black">true</font>> color="black"]
  node8112 -> node8114 [label=<<font color="black">false</font>> color="black"]
  node8117 -> node8119 [ color="black"]
  node8119 -> node8120 [ color="black"]
  node8111 -> node8112 [ color="black"]
  node8120 -> node8121 [ color="black"]
  node8116 -> node8117 [label=<<font color="black">true</font>> color="black"]
  node8116 -> node8118 [label=<<font color="black">false</font>> color="black"]
  node8108 -> node8110 [ color="black"]
  node8115 -> node8116 [ color="black"]
}
