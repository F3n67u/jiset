digraph {
  node18154 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">8:let strP = [? __x2__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18152 [shape=cds, label=<<font color="black">8:app __x1__ = (ToString index)</font>> color="black" fillcolor="white" style=filled]
  node18161 [shape=diamond, label=<<font color="black">(= state.Gap &quot;&quot;)</font>> color="black" fillcolor="white" style=filled]
  node18155 [shape=diamond, label=<<font color="black">(= strP undefined)</font>> color="black" fillcolor="white" style=filled]
  node18158 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">13:index = (+ index 1i)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18145 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node18151 [shape=diamond, label=<<font color="black">(&lt; index len)</font>> color="black" fillcolor="white" style=filled]
  node18164 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">24:??? &quot;Remove the last element of id:{state} . [ [ Stack ] ] .&quot;</td></tr>
      <tr><td align="left">25:state.Indent = stepback</td></tr>
      <tr><td align="left">26:return final</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18150 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">5:let len = [? __x0__]</td></tr>
      <tr><td align="left">6:let index = 0i</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18156 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">append &quot;null&quot; -&gt; partial</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18160 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let final = &quot;[]&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18149 [shape=cds, label=<<font color="black">5:app __x0__ = (LengthOfArrayLike value)</font>> color="black" fillcolor="white" style=filled]
  node18147 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18162 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">18:??? &quot;Let id:{properties} be the String value formed by concatenating all the element Strings of id:{partial} with each adjacent pair of Strings separated with the code unit 0x002C ( COMMA ) . A comma is not inserted either before the first String or after the last String .&quot;</td></tr>
      <tr><td align="left">19:let final = (+ (+ &quot;[&quot; properties) &quot;]&quot;)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18157 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">append strP -&gt; partial</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18146 [shape=diamond, label=<<font color="black">(contains state.Stack value)</font>> color="black" fillcolor="white" style=filled]
  node18148 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">1:append value -&gt; state.Stack</td></tr>
      <tr><td align="left">2:let stepback = state.Indent</td></tr>
      <tr><td align="left">3:state.Indent = (+ state.Indent state.Gap)</td></tr>
      <tr><td align="left">4:let partial = (new [])</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18159 [shape=diamond, label=<<font color="black">(= partial.length 0i)</font>> color="black" fillcolor="white" style=filled]
  node18144 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node18153 [shape=cds, label=<<font color="black">8:app __x2__ = (SerializeJSONProperty state [! __x1__] value)</font>> color="black" fillcolor="white" style=filled]
  node18163 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">21:let separator = (+ (+ &quot;,&quot; &quot;\n&quot;) state.Indent)</td></tr>
      <tr><td align="left">22:??? &quot;Let id:{properties} be the String value formed by concatenating all the element Strings of id:{partial} with each adjacent pair of Strings separated with id:{separator} . The id:{separator} String is not inserted either before the first String or after the last String .&quot;</td></tr>
      <tr><td align="left">23:let final = (+ (+ (+ (+ (+ (+ &quot;[&quot; &quot;\n&quot;) state.Indent) properties) &quot;\n&quot;) stepback) &quot;]&quot;)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18149 -> node18150 [ color="black"]
  node18164 -> node18145 [ color="black"]
  node18150 -> node18151 [ color="black"]
  node18151 -> node18152 [label=<<font color="black">true</font>> color="black"]
  node18151 -> node18159 [label=<<font color="black">false</font>> color="black"]
  node18163 -> node18164 [ color="black"]
  node18161 -> node18162 [label=<<font color="black">true</font>> color="black"]
  node18161 -> node18163 [label=<<font color="black">false</font>> color="black"]
  node18159 -> node18160 [label=<<font color="black">true</font>> color="black"]
  node18159 -> node18161 [label=<<font color="black">false</font>> color="black"]
  node18158 -> node18151 [ color="black"]
  node18162 -> node18164 [ color="black"]
  node18155 -> node18156 [label=<<font color="black">true</font>> color="black"]
  node18155 -> node18157 [label=<<font color="black">false</font>> color="black"]
  node18144 -> node18146 [ color="black"]
  node18157 -> node18158 [ color="black"]
  node18153 -> node18154 [ color="black"]
  node18148 -> node18149 [ color="black"]
  node18147 -> node18148 [ color="black"]
  node18154 -> node18155 [ color="black"]
  node18160 -> node18164 [ color="black"]
  node18156 -> node18158 [ color="black"]
  node18146 -> node18147 [label=<<font color="black">true</font>> color="black"]
  node18146 -> node18148 [label=<<font color="black">false</font>> color="black"]
  node18152 -> node18153 [ color="black"]
}
