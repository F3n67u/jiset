{
  let asyncContext = GLOBAL_context
  app __x0__ = (PromiseResolve INTRINSIC_Promise (new [value]))
  if (is-completion __x0__) if (= __x0__.Type CONST_normal) __x0__ = __x0__.Value else return __x0__ else {}
  let promise = __x0__
  ??? "Let id:{stepsFulfilled} be the algorithm steps defined in link:{} ."
  app __x1__ = (CreateBuiltinFunction stepsFulfilled (new ["AsyncContext"]))
  let onFulfilled = __x1__
  onFulfilled.AsyncContext = asyncContext
  ??? "Let id:{stepsRejected} be the algorithm steps defined in link:{} ."
  app __x2__ = (CreateBuiltinFunction stepsRejected (new ["AsyncContext"]))
  let onRejected = __x2__
  onRejected.AsyncContext = asyncContext
  app __x3__ = (PerformPromiseThen promise onFulfilled onRejected)
  if (is-completion __x3__) if (= __x3__.Type CONST_normal) __x3__ = __x3__.Value else return __x3__ else {}
  __x3__
  if (= GLOBAL_executionStack[(- GLOBAL_executionStack.length 1i)] asyncContext) {
    let __x4__ = (- GLOBAL_executionStack.length 1i)
    (pop GLOBAL_executionStack __x4__)
  } else {}
  GLOBAL_context = GLOBAL_executionStack[(- GLOBAL_executionStack.length 1i)]
  ??? "Set the code evaluation state of id:{asyncContext} such that when evaluation is resumed with a Completion id:{completion} , the following steps of the algorithm that invoked Await will be performed , with id:{completion} available ."
  app __x5__ = (NormalCompletion undefined)
  return __x5__
}