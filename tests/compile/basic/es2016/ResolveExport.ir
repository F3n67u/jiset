{
  let module = this
  ??? "For each Record { [ [ Module ] ] , [ [ ExportName ] ] } id:{r} in id:{resolveSet} , do : in:{} out:{}"
  append (new Record("Module" -> module, "ExportName" -> exportName)) -> resolveSet
  let __x0__ = module.LocalExportEntries
  let __x1__ = 0i
  while (< __x1__ __x0__.length) {
    let e = __x0__[__x1__]
    app __x2__ = (SameValue exportName e.ExportName)
    if (= __x2__ true) return (new Record("Module" -> module, "BindingName" -> e.LocalName)) else {}
    __x1__ = (+ __x1__ 1i)
  }
  let __x3__ = module.IndirectExportEntries
  let __x4__ = 0i
  while (< __x4__ __x3__.length) {
    let e = __x3__[__x4__]
    app __x5__ = (SameValue exportName e.ExportName)
    if (= __x5__ true) {
      app __x6__ = (HostResolveImportedModule module e.ModuleRequest)
      let importedModule = [? __x6__]
      app __x7__ = (importedModule.ResolveExport importedModule e.ImportName resolveSet exportStarSet)
      let indirectResolution = [? __x7__]
      if (! (= indirectResolution null)) return indirectResolution else {}
    } else {}
    __x4__ = (+ __x4__ 1i)
  }
  app __x8__ = (SameValue exportName "default")
  if (= __x8__ true) throw SyntaxError else {}
  if (contains exportStarSet module) return null else {}
  append module -> exportStarSet
  let starResolution = null
  let __x9__ = module.StarExportEntries
  let __x10__ = 0i
  while (< __x10__ __x9__.length) {
    let e = __x9__[__x10__]
    app __x11__ = (HostResolveImportedModule module e.ModuleRequest)
    let importedModule = [? __x11__]
    app __x12__ = (importedModule.ResolveExport importedModule exportName resolveSet exportStarSet)
    let resolution = [? __x12__]
    if (= resolution "ambiguous") return "ambiguous" else {}
    if (! (= resolution null)) if (= starResolution null) let starResolution = resolution else {
      let __x13__ = true
      __x13__ = (! (= resolution.Module starResolution.Module))
      if __x13__ {} else {
        app __x14__ = (SameValue resolution.BindingName starResolution.BindingName)
        __x13__ = (= __x14__ false)
      }
      if __x13__ return "ambiguous" else {}
    } else {}
    __x10__ = (+ __x10__ 1i)
  }
  return starResolution
}