digraph {
  node6551 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">4:let __x4__ = __x3__</td></tr>
      <tr><td align="left">4:let __x5__ = 0i</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node6560 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">__x5__ = (+ __x5__ 1i)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node6556 [shape=cds, label=<<font color="black">6:app __x7__ = (envRec.CreateImmutableBinding envRec dn true)</font>> color="black" fillcolor="white" style=filled]
  node6549 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let d = __x1__[__x2__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node6545 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let envRec = env.EnvironmentRecord</td></tr>
      <tr><td align="left">1:assert (= (typeof envRec) &quot;DeclarativeEnvironmentRecord&quot;)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node6543 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node6567 [shape=cds, label=<<font color="black">12:app __x12__ = (envRec.InitializeBinding envRec fn fo)</font>> color="black" fillcolor="white" style=filled]
  node6563 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">10:let fn = __x9__[0i]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node6558 [shape=cds, label=<<font color="black">8:app __x8__ = (envRec.CreateMutableBinding envRec dn false)</font>> color="black" fillcolor="white" style=filled]
  node6548 [shape=diamond, label=<<font color="black">(&lt; __x2__ __x1__.length)</font>> color="black" fillcolor="white" style=filled]
  node6544 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node6555 [shape=diamond, label=<<font color="black">(= __x6__ true)</font>> color="black" fillcolor="white" style=filled]
  node6566 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">11:let fo = __x11__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node6552 [shape=diamond, label=<<font color="black">(&lt; __x5__ __x4__.length)</font>> color="black" fillcolor="white" style=filled]
  node6547 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">2:let declarations = __x0__</td></tr>
      <tr><td align="left">3:let __x1__ = declarations</td></tr>
      <tr><td align="left">3:let __x2__ = 0i</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node6559 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">8:[! __x8__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node6562 [shape=cds, label=<<font color="black">10:access __x9__ = (d &quot;BoundNames&quot;)</font>> color="black" fillcolor="white" style=filled]
  node6550 [shape=cds, label=<<font color="black">4:access __x3__ = (d &quot;BoundNames&quot;)</font>> color="black" fillcolor="white" style=filled]
  node6565 [shape=cds, label=<<font color="black">11:app __x11__ = (__x10__ env)</font>> color="black" fillcolor="white" style=filled]
  node6561 [shape=diamond, label=<<font color="black">(|| (|| (|| (is-instance-of d FunctionDeclaration) (is-instance-of d GeneratorDeclaration)) (is-instance-of d AsyncFunctionDeclaration)) (is-instance-of d AsyncGeneratorDeclaration))</font>> color="black" fillcolor="white" style=filled]
  node6546 [shape=cds, label=<<font color="black">2:access __x0__ = (code &quot;LexicallyScopedDeclarations&quot;)</font>> color="black" fillcolor="white" style=filled]
  node6553 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let dn = __x4__[__x5__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node6568 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">12:__x12__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node6564 [shape=cds, label=<<font color="black">11:access __x10__ = (d &quot;InstantiateFunctionObject&quot;)</font>> color="black" fillcolor="white" style=filled]
  node6557 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">6:[! __x7__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node6554 [shape=cds, label=<<font color="black">7:access __x6__ = (d &quot;IsConstantDeclaration&quot;)</font>> color="black" fillcolor="white" style=filled]
  node6569 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">__x2__ = (+ __x2__ 1i)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node6557 -> node6560 [ color="black"]
  node6559 -> node6560 [ color="black"]
  node6563 -> node6564 [ color="black"]
  node6552 -> node6553 [label=<<font color="black">true</font>> color="black"]
  node6552 -> node6561 [label=<<font color="black">false</font>> color="black"]
  node6561 -> node6562 [label=<<font color="black">true</font>> color="black"]
  node6561 -> node6569 [label=<<font color="black">false</font>> color="black"]
  node6549 -> node6550 [ color="black"]
  node6569 -> node6548 [ color="black"]
  node6553 -> node6554 [ color="black"]
  node6550 -> node6551 [ color="black"]
  node6543 -> node6545 [ color="black"]
  node6555 -> node6556 [label=<<font color="black">true</font>> color="black"]
  node6555 -> node6558 [label=<<font color="black">false</font>> color="black"]
  node6551 -> node6552 [ color="black"]
  node6546 -> node6547 [ color="black"]
  node6548 -> node6549 [label=<<font color="black">true</font>> color="black"]
  node6548 -> node6544 [label=<<font color="black">false</font>> color="black"]
  node6565 -> node6566 [ color="black"]
  node6566 -> node6567 [ color="black"]
  node6556 -> node6557 [ color="black"]
  node6554 -> node6555 [ color="black"]
  node6562 -> node6563 [ color="black"]
  node6568 -> node6569 [ color="black"]
  node6560 -> node6552 [ color="black"]
  node6545 -> node6546 [ color="black"]
  node6567 -> node6568 [ color="black"]
  node6558 -> node6559 [ color="black"]
  node6564 -> node6565 [ color="black"]
  node6547 -> node6548 [ color="black"]
}
