digraph {
  node10221 [shape=diamond, label=<<font color="black">__x1__</font>> color="black" fillcolor="white" style=filled]
  node10216 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node10222 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">5:let __x2__ = stack</td></tr>
      <tr><td align="left">5:let __x3__ = 0i</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10217 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let module = this</td></tr>
      <tr><td align="left">1:assert (! (|| (= module.Status &quot;instantiating&quot;) (= module.Status &quot;evaluating&quot;)))</td></tr>
      <tr><td align="left">2:let stack = (new [])</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10215 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node10219 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">3:let result = __x0__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10226 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">13:assert (|| (= module.Status &quot;instantiated&quot;) (= module.Status &quot;evaluated&quot;))</td></tr>
      <tr><td align="left">14:assert (= stack.length 0i)</td></tr>
      <tr><td align="left">15:return undefined</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10223 [shape=diamond, label=<<font color="black">(&lt; __x3__ __x2__.length)</font>> color="black" fillcolor="white" style=filled]
  node10218 [shape=cds, label=<<font color="black">3:app __x0__ = (InnerModuleInstantiation module stack 0i)</font>> color="black" fillcolor="white" style=filled]
  node10224 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let m = __x2__[__x3__]</td></tr>
      <tr><td align="left">6:assert (= m.Status &quot;instantiating&quot;)</td></tr>
      <tr><td align="left">7:m.Status = &quot;uninstantiated&quot;</td></tr>
      <tr><td align="left">8:m.Environment = undefined</td></tr>
      <tr><td align="left">9:m.DFSIndex = undefined</td></tr>
      <tr><td align="left">10:m.DFSAncestorIndex = undefined</td></tr>
      <tr><td align="left">__x3__ = (+ __x3__ 1i)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10220 [shape=cds, label=<<font color="black">4:app __x1__ = (IsAbruptCompletion result)</font>> color="black" fillcolor="white" style=filled]
  node10225 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">11:assert (= module.Status &quot;uninstantiated&quot;)</td></tr>
      <tr><td align="left">12:return result</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10220 -> node10221 [ color="black"]
  node10218 -> node10219 [ color="black"]
  node10217 -> node10218 [ color="black"]
  node10223 -> node10224 [label=<<font color="black">true</font>> color="black"]
  node10223 -> node10225 [label=<<font color="black">false</font>> color="black"]
  node10226 -> node10216 [ color="black"]
  node10221 -> node10222 [label=<<font color="black">true</font>> color="black"]
  node10221 -> node10226 [label=<<font color="black">false</font>> color="black"]
  node10215 -> node10217 [ color="black"]
  node10222 -> node10223 [ color="black"]
  node10225 -> node10226 [ color="black"]
  node10219 -> node10220 [ color="black"]
  node10224 -> node10223 [ color="black"]
}
