{
  let O = this
  assert (&& (= (typeof O) Object) (! (= O.SyncIteratorRecord absent)))
  app __x0__ = (NewPromiseCapability INTRINSIC_Promise)
  let promiseCapability = [! __x0__]
  let syncIterator = O.SyncIteratorRecord.Iterator
  app __x1__ = (GetMethod syncIterator "throw")
  let throw = __x1__
  if (is-completion throw) if (= throw.Type CONST_normal) throw = throw.Value else {
    app __x2__ = (Call promiseCapability.Reject undefined (new [throw.Value]))
    if (&& (is-completion __x2__) (! (= __x2__.Type CONST_normal))) return __x2__ else {}
    return promiseCapability.Promise
  } else {}
  throw
  if (= throw undefined) {
    app __x3__ = (Call promiseCapability.Reject undefined (new [value]))
    [! __x3__]
    return promiseCapability.Promise
  } else {}
  app __x4__ = (Call throw syncIterator (new [value]))
  let result = __x4__
  if (is-completion result) if (= result.Type CONST_normal) result = result.Value else {
    app __x5__ = (Call promiseCapability.Reject undefined (new [result.Value]))
    if (&& (is-completion __x5__) (! (= __x5__.Type CONST_normal))) return __x5__ else {}
    return promiseCapability.Promise
  } else {}
  result
  if (! (= (typeof result) Object)) {
    app __x6__ = (Call promiseCapability.Reject undefined (new [(new OrdinaryObject())]))
    [! __x6__]
    return promiseCapability.Promise
  } else {}
  app __x7__ = (AsyncFromSyncIteratorContinuation result promiseCapability)
  return [! __x7__]
}