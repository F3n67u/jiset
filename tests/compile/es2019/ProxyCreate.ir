{
  [0] app __x0__ = (Type target)
  [0] if (! (= __x0__ Object)) {
    app __x1__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_TypeError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
    return __x1__
  } else [13] {}
  [1] if (&& (= (typeof target) "ProxyExoticObject") (= target.ProxyHandler null)) {
    app __x2__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_TypeError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
    return __x2__
  } else [13] {}
  [2] app __x3__ = (Type handler)
  [2] if (! (= __x3__ Object)) {
    app __x4__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_TypeError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
    return __x4__
  } else [13] {}
  [3] if (&& (= (typeof handler) "ProxyExoticObject") (= handler.ProxyHandler null)) {
    app __x5__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_TypeError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
    return __x5__
  } else [13] {}
  [4] let P = (new OrdinaryObject("SubMap" -> (new SubMap())))
  [6] app __x6__ = (IsCallable target)
  [6] if (= __x6__ true) {
    [7] ??? "Set id:{P} . [ [ Call ] ] as specified in link:{} ."
    [8] app __x7__ = (IsConstructor target)
    [8] if (= __x7__ true) ??? "Set id:{P} . [ [ Construct ] ] as specified in link:{} ." else [13] {}
  } else [13] {}
  [10] P.ProxyTarget = target
  [11] P.ProxyHandler = handler
  [12] app __x8__ = (WrapCompletion P)
  [12] return __x8__
}