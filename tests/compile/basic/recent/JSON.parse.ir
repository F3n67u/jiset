{
  app __x0__ = (ToString text)
  if (is-completion __x0__) if (= __x0__.Type CONST_normal) __x0__ = __x0__.Value else return __x0__ else {}
  let jsonString = __x0__
  ??? "Parse ! StringToCodePoints ( id:{jsonString} ) as a JSON text as specified in ECMA - 404 . Throw a value:{SyntaxError} exception if it is not a valid JSON text as defined in that specification ."
  let scriptString = (+ (+ "(" jsonString) ");")
  app __x1__ = (StringToCodePoints scriptString)
  if (is-completion __x1__) if (= __x1__.Type CONST_normal) __x1__ = __x1__.Value else return __x1__ else {}
  app __x2__ = (ParseText __x1__ Script)
  let script = __x2__
  ??? "Let id:{completion} be the result of evaluating id:{script} . The extended PropertyDefinitionEvaluation semantics defined in link:{} must not be used during the evaluation ."
  let unfiltered = completion.Value
  app __x3__ = (IsCallable reviver)
  if (= __x3__ true) {
    ??? "Let id:{root} be ! OrdinaryObjectCreate ( % Object . prototype % ) ."
    let rootName = ""
    app __x4__ = (CreateDataPropertyOrThrow root rootName unfiltered)
    if (is-completion __x4__) if (= __x4__.Type CONST_normal) __x4__ = __x4__.Value else return __x4__ else {}
    __x4__
    app __x5__ = (InternalizeJSONProperty root rootName reviver)
    if (is-completion __x5__) if (= __x5__.Type CONST_normal) __x5__ = __x5__.Value else return __x5__ else {}
    app __x6__ = (WrapCompletion __x5__)
    return __x6__
  } else {
    app __x7__ = (WrapCompletion unfiltered)
    return __x7__
  }
}