<algorithm>
  <param>test</param>
  <param>increment</param>
  <param>stmt</param>
  <param>perIterationBindings</param>
  <param>labelSet</param>
  <step-list>
    <step>Let <id>V</id> be <value>undefined</value> .</step>
    <step>Perform ? CreatePerIterationEnvironment ( <id>perIterationBindings</id> ).</step>
    <step>Repeat,     <step-list>
      <step>If <id>test</id> is not <value>[empty]</value> , then       <step-list>
        <step>Let <id>testRef</id> be the result of evaluating <id>test</id> .</step>
        <step>Let <id>testValue</id> be ? GetValue ( <id>testRef</id> ).</step>
        <step>If ToBoolean ( <id>testValue</id> ) is <value>false</value> , return NormalCompletion ( <id>V</id> ).</step>
      </step-list></step>
      <step>Let <id>result</id> be the result of evaluating <id>stmt</id> .</step>
      <step>If LoopContinues ( <id>result</id> , <id>labelSet</id> ) is <value>false</value> , return Completion ( UpdateEmpty ( <id>result</id> , <id>V</id> )).</step>
      <step>If <id>result</id> .[[Value]] is not <value>empty</value> , set <id>V</id> to <id>result</id> .[[Value]].</step>
      <step>Perform ? CreatePerIterationEnvironment ( <id>perIterationBindings</id> ).</step>
      <step>If <id>increment</id> is not <value>[empty]</value> , then       <step-list>
        <step>Let <id>incRef</id> be the result of evaluating <id>increment</id> .</step>
        <step>Perform ? GetValue ( <id>incRef</id> ).</step>
      </step-list></step>
    </step-list></step>
  </step-list>
</algorithm>