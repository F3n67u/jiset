digraph {
  node15055 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let sticky = true</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15073 [shape=diamond, label=<<font color="black">(= sticky true)</font>> color="black" fillcolor="white" style=filled]
  node15046 [shape=cds, label=<<font color="black">1:app __x0__ = (Type S)</font>> color="black" fillcolor="white" style=filled]
  node15101 [shape=cds, label=<<font color="black">app __x14__ = (UTF16Encode captureI)</font>> color="black" fillcolor="white" style=filled]
  node15081 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">27:??? &quot;id:{e} is an index into the id:{Input} character list , derived from id:{S} , matched by id:{matcher} . Let id:{eUTF} be the smallest index into id:{S} that corresponds to the character at element id:{e} of id:{Input} . If id:{e} is greater than or equal to the number of elements in id:{Input} , then id:{eUTF} is the number of code units in id:{S} .&quot;</td></tr>
      <tr><td align="left">28:e = eUTF</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15068 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">14:[? __x3__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15063 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">10:let matchSucceeded = false</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15084 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">30:[? __x7__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15052 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let global = true</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15091 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">36:[! __x10__]</td></tr>
      <tr><td align="left">37:??? &quot;Let id:{matchedSubstr} be the matched substring ( i . e . the portion of id:{S} between offset id:{lastIndex} inclusive and offset id:{e} exclusive ) .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15044 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node15066 [shape=diamond, label=<<font color="black">(|| (= global true) (= sticky true))</font>> color="black" fillcolor="white" style=filled]
  node15098 [shape=diamond, label=<<font color="black">(= captureI undefined)</font>> color="black" fillcolor="white" style=filled]
  node15045 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node15083 [shape=cds, label=<<font color="black">30:app __x7__ = (Set R &quot;lastIndex&quot; e true)</font>> color="black" fillcolor="white" style=filled]
  node15051 [shape=diamond, label=<<font color="black">(contains flags &quot;g&quot;)</font>> color="black" fillcolor="white" style=filled]
  node15072 [shape=diamond, label=<<font color="black">(= r CONST_failure)</font>> color="black" fillcolor="white" style=filled]
  node15077 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">21:lastIndex = __x6__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15104 [shape=cds, label=<<font color="black">app __x15__ = (ToString i)</font>> color="black" fillcolor="white" style=filled]
  node15092 [shape=cds, label=<<font color="black">38:app __x11__ = (CreateDataPropertyOrThrow A &quot;0&quot; matchedSubstr)</font>> color="black" fillcolor="white" style=filled]
  node15087 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">33:let A = [! __x8__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15105 [shape=cds, label=<<font color="black">app __x16__ = (CreateDataPropertyOrThrow A [! __x15__] capturedValue)</font>> color="black" fillcolor="white" style=filled]
  node15060 [shape=diamond, label=<<font color="black">(contains flags &quot;u&quot;)</font>> color="black" fillcolor="white" style=filled]
  node15082 [shape=diamond, label=<<font color="black">(|| (= global true) (= sticky true))</font>> color="black" fillcolor="white" style=filled]
  node15097 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">??? &quot;Let id:{captureI} be id:{i} sup:{th} element of id:{r} ' s id:{captures} List .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15061 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let fullUnicode = true</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15050 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">3:let lastIndex = [? __x2__]</td></tr>
      <tr><td align="left">4:let flags = R.OriginalFlags</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15103 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">assert (= fullUnicode false)</td></tr>
      <tr><td align="left">let capturedValue = captureI</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15093 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">38:[! __x11__]</td></tr>
      <tr><td align="left">39:??? &quot;If id:{R} contains any nt:{GroupName} , then in:{} out:{}&quot;</td></tr>
      <tr><td align="left">41:??? &quot;Else , in:{} out:{}&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15078 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">matchSucceeded = true</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15071 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">16:let r = __x4__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15065 [shape=diamond, label=<<font color="black">(&lt; length lastIndex)</font>> color="black" fillcolor="white" style=filled]
  node15054 [shape=diamond, label=<<font color="black">(contains flags &quot;y&quot;)</font>> color="black" fillcolor="white" style=filled]
  node15089 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">35:[! __x9__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15047 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">1:assert (= __x0__ String)</td></tr>
      <tr><td align="left">2:let length = S.length</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15074 [shape=cds, label=<<font color="black">19:app __x5__ = (Set R &quot;lastIndex&quot; 0i true)</font>> color="black" fillcolor="white" style=filled]
  node15069 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">15:return null</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15062 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let fullUnicode = false</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15057 [shape=diamond, label=<<font color="black">(&amp;&amp; (= global false) (= sticky false))</font>> color="black" fillcolor="white" style=filled]
  node15086 [shape=cds, label=<<font color="black">33:app __x8__ = (ArrayCreate (+ n 1i))</font>> color="black" fillcolor="white" style=filled]
  node15106 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">[! __x16__]</td></tr>
      <tr><td align="left">??? &quot;If the id:{i} sup:{th} capture of id:{R} was defined with a nt:{GroupName} , then in:{} out:{}&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15070 [shape=cds, label=<<font color="black">16:app __x4__ = (matcher S lastIndex)</font>> color="black" fillcolor="white" style=filled]
  node15100 [shape=diamond, label=<<font color="black">(= fullUnicode true)</font>> color="black" fillcolor="white" style=filled]
  node15079 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">25:let e = r.endIndex</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15049 [shape=cds, label=<<font color="black">3:app __x2__ = (ToLength [? __x1__])</font>> color="black" fillcolor="white" style=filled]
  node15094 [shape=cds, label=<<font color="black">43:app __x12__ = (CreateDataPropertyOrThrow A &quot;groups&quot; groups)</font>> color="black" fillcolor="white" style=filled]
  node15048 [shape=cds, label=<<font color="black">3:app __x1__ = (Get R &quot;lastIndex&quot;)</font>> color="black" fillcolor="white" style=filled]
  node15107 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">58:return A</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15053 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let global = false</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15090 [shape=cds, label=<<font color="black">36:app __x10__ = (CreateDataPropertyOrThrow A &quot;input&quot; S)</font>> color="black" fillcolor="white" style=filled]
  node15058 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">lastIndex = 0i</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15080 [shape=diamond, label=<<font color="black">(= fullUnicode true)</font>> color="black" fillcolor="white" style=filled]
  node15102 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let capturedValue = [! __x14__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15075 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">19:[? __x5__]</td></tr>
      <tr><td align="left">20:return null</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15095 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">43:[! __x12__]</td></tr>
      <tr><td align="left">44:let i = (+ 0i 1i)</td></tr>
      <tr><td align="left">44:let __x13__ = (+ n 1i)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15085 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">31:??? &quot;Let id:{n} be the number of elements in id:{r} ' s id:{captures} List . ( This is the same value as link:{unhandled: sec-notation} ' s id:{NcapturingParens} . )&quot;</td></tr>
      <tr><td align="left">32:assert (&lt; n (- (** 2.0 32i) 1i))</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15056 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let sticky = false</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15099 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let capturedValue = undefined</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15067 [shape=cds, label=<<font color="black">14:app __x3__ = (Set R &quot;lastIndex&quot; 0i true)</font>> color="black" fillcolor="white" style=filled]
  node15088 [shape=cds, label=<<font color="black">35:app __x9__ = (CreateDataPropertyOrThrow A &quot;index&quot; lastIndex)</font>> color="black" fillcolor="white" style=filled]
  node15064 [shape=diamond, label=<<font color="black">(= matchSucceeded false)</font>> color="black" fillcolor="white" style=filled]
  node15076 [shape=cds, label=<<font color="black">21:app __x6__ = (AdvanceStringIndex S lastIndex fullUnicode)</font>> color="black" fillcolor="white" style=filled]
  node15059 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">8:let matcher = R.RegExpMatcher</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15096 [shape=diamond, label=<<font color="black">(&lt; i __x13__)</font>> color="black" fillcolor="white" style=filled]
  node15075 -> node15076 [ color="black"]
  node15083 -> node15084 [ color="black"]
  node15078 -> node15064 [ color="black"]
  node15092 -> node15093 [ color="black"]
  node15056 -> node15057 [ color="black"]
  node15061 -> node15063 [ color="black"]
  node15057 -> node15058 [label=<<font color="black">true</font>> color="black"]
  node15057 -> node15059 [label=<<font color="black">false</font>> color="black"]
  node15073 -> node15074 [label=<<font color="black">true</font>> color="black"]
  node15073 -> node15076 [label=<<font color="black">false</font>> color="black"]
  node15084 -> node15085 [ color="black"]
  node15081 -> node15082 [ color="black"]
  node15071 -> node15072 [ color="black"]
  node15094 -> node15095 [ color="black"]
  node15067 -> node15068 [ color="black"]
  node15077 -> node15064 [ color="black"]
  node15065 -> node15066 [label=<<font color="black">true</font>> color="black"]
  node15065 -> node15070 [label=<<font color="black">false</font>> color="black"]
  node15102 -> node15104 [ color="black"]
  node15051 -> node15052 [label=<<font color="black">true</font>> color="black"]
  node15051 -> node15053 [label=<<font color="black">false</font>> color="black"]
  node15064 -> node15065 [label=<<font color="black">true</font>> color="black"]
  node15064 -> node15079 [label=<<font color="black">false</font>> color="black"]
  node15069 -> node15070 [ color="black"]
  node15048 -> node15049 [ color="black"]
  node15097 -> node15098 [ color="black"]
  node15058 -> node15059 [ color="black"]
  node15072 -> node15073 [label=<<font color="black">true</font>> color="black"]
  node15072 -> node15078 [label=<<font color="black">false</font>> color="black"]
  node15060 -> node15061 [label=<<font color="black">true</font>> color="black"]
  node15060 -> node15062 [label=<<font color="black">false</font>> color="black"]
  node15055 -> node15057 [ color="black"]
  node15091 -> node15092 [ color="black"]
  node15050 -> node15051 [ color="black"]
  node15093 -> node15094 [ color="black"]
  node15079 -> node15080 [ color="black"]
  node15090 -> node15091 [ color="black"]
  node15074 -> node15075 [ color="black"]
  node15106 -> node15096 [ color="black"]
  node15080 -> node15081 [label=<<font color="black">true</font>> color="black"]
  node15080 -> node15082 [label=<<font color="black">false</font>> color="black"]
  node15103 -> node15104 [ color="black"]
  node15066 -> node15067 [label=<<font color="black">true</font>> color="black"]
  node15066 -> node15069 [label=<<font color="black">false</font>> color="black"]
  node15046 -> node15047 [ color="black"]
  node15085 -> node15086 [ color="black"]
  node15049 -> node15050 [ color="black"]
  node15095 -> node15096 [ color="black"]
  node15099 -> node15104 [ color="black"]
  node15098 -> node15099 [label=<<font color="black">true</font>> color="black"]
  node15098 -> node15100 [label=<<font color="black">false</font>> color="black"]
  node15053 -> node15054 [ color="black"]
  node15047 -> node15048 [ color="black"]
  node15086 -> node15087 [ color="black"]
  node15088 -> node15089 [ color="black"]
  node15100 -> node15101 [label=<<font color="black">true</font>> color="black"]
  node15100 -> node15103 [label=<<font color="black">false</font>> color="black"]
  node15096 -> node15097 [label=<<font color="black">true</font>> color="black"]
  node15096 -> node15107 [label=<<font color="black">false</font>> color="black"]
  node15104 -> node15105 [ color="black"]
  node15059 -> node15060 [ color="black"]
  node15107 -> node15045 [ color="black"]
  node15054 -> node15055 [label=<<font color="black">true</font>> color="black"]
  node15054 -> node15056 [label=<<font color="black">false</font>> color="black"]
  node15063 -> node15064 [ color="black"]
  node15082 -> node15083 [label=<<font color="black">true</font>> color="black"]
  node15082 -> node15085 [label=<<font color="black">false</font>> color="black"]
  node15105 -> node15106 [ color="black"]
  node15070 -> node15071 [ color="black"]
  node15076 -> node15077 [ color="black"]
  node15101 -> node15102 [ color="black"]
  node15089 -> node15090 [ color="black"]
  node15052 -> node15054 [ color="black"]
  node15044 -> node15046 [ color="black"]
  node15087 -> node15088 [ color="black"]
  node15062 -> node15063 [ color="black"]
  node15068 -> node15069 [ color="black"]
}
