digraph {
  node15509 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node15536 [shape=cds, label=<<font color="black">app __x9__ = (ToString v)</font>> color="black" fillcolor="white" style=filled]
  node15517 [shape=cds, label=<<font color="black">6:app __x1__ = (IsCallable replacer)</font>> color="black" fillcolor="white" style=filled]
  node15557 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">??? &quot;If the number of elements in id:{space} is 10 or less , set id:{gap} to id:{space} ; otherwise set id:{gap} to a String consisting of the first 10 elements of id:{space} .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15561 [shape=cds, label=<<font color="black">35:app __x19__ = (CreateDataProperty wrapper &quot;&quot; value)</font>> color="black" fillcolor="white" style=filled]
  node15544 [shape=diamond, label=<<font color="black">(! (= space.NumberData absent))</font>> color="black" fillcolor="white" style=filled]
  node15553 [shape=cds, label=<<font color="black">28:app __x16__ = (min 10i __x15__)</font>> color="black" fillcolor="white" style=filled]
  node15564 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">37:return [? __x20__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15558 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">gap = &quot;&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15537 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let item = [! __x9__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15526 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">10:let len = [? __x4__]</td></tr>
      <tr><td align="left">11:let k = 0i</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15532 [shape=diamond, label=<<font color="black">(= __x7__ String)</font>> color="black" fillcolor="white" style=filled]
  node15547 [shape=diamond, label=<<font color="black">(! (= space.StringData absent))</font>> color="black" fillcolor="white" style=filled]
  node15541 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">19:??? &quot;If id:{item} is not value:{undefined} and id:{item} is not currently an element of id:{PropertyList} , then in:{} out:{}&quot;</td></tr>
      <tr><td align="left">21:let k = (+ k 1i)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15514 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let stack = (new [])</td></tr>
      <tr><td align="left">1:let indent = &quot;&quot;</td></tr>
      <tr><td align="left">2:let PropertyList = undefined</td></tr>
      <tr><td align="left">2:let ReplacerFunction = undefined</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15515 [shape=cds, label=<<font color="black">3:app __x0__ = (Type replacer)</font>> color="black" fillcolor="white" style=filled]
  node15554 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">28:let space = __x16__</td></tr>
      <tr><td align="left">29:??? &quot;Set id:{gap} to a String containing id:{space} occurrences of code unit 0x0020 ( SPACE ) . This will be the empty String if id:{space} is less than 1 .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15522 [shape=diamond, label=<<font color="black">(= isArray true)</font>> color="black" fillcolor="white" style=filled]
  node15542 [shape=cds, label=<<font color="black">22:app __x11__ = (Type space)</font>> color="black" fillcolor="white" style=filled]
  node15518 [shape=diamond, label=<<font color="black">(= __x1__ true)</font>> color="black" fillcolor="white" style=filled]
  node15531 [shape=cds, label=<<font color="black">17:app __x7__ = (Type v)</font>> color="black" fillcolor="white" style=filled]
  node15563 [shape=cds, label=<<font color="black">37:app __x20__ = (SerializeJSONProperty &quot;&quot; wrapper)</font>> color="black" fillcolor="white" style=filled]
  node15527 [shape=diamond, label=<<font color="black">(&lt; k len)</font>> color="black" fillcolor="white" style=filled]
  node15546 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">24:let space = [? __x12__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15559 [shape=cds, label=<<font color="black">34:app __x18__ = (ObjectCreate INTRINSIC_ObjectPrototype)</font>> color="black" fillcolor="white" style=filled]
  node15513 [shape=cds, label=<<font color="black">app space = (GetArgument argumentsList 2i)</font>> color="black" fillcolor="white" style=filled]
  node15545 [shape=cds, label=<<font color="black">24:app __x12__ = (ToNumber space)</font>> color="black" fillcolor="white" style=filled]
  node15523 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">9:let PropertyList = (new [])</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15550 [shape=cds, label=<<font color="black">32:app __x14__ = (Type space)</font>> color="black" fillcolor="white" style=filled]
  node15510 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node15555 [shape=cds, label=<<font color="black">app __x17__ = (Type space)</font>> color="black" fillcolor="white" style=filled]
  node15560 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">34:let wrapper = __x18__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15538 [shape=cds, label=<<font color="black">app __x10__ = (Type v)</font>> color="black" fillcolor="white" style=filled]
  node15535 [shape=diamond, label=<<font color="black">(= __x8__ Number)</font>> color="black" fillcolor="white" style=filled]
  node15552 [shape=cds, label=<<font color="black">28:app __x15__ = (ToInteger space)</font>> color="black" fillcolor="white" style=filled]
  node15520 [shape=cds, label=<<font color="black">7:app __x2__ = (IsArray replacer)</font>> color="black" fillcolor="white" style=filled]
  node15530 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">13:let v = [? __x6__]</td></tr>
      <tr><td align="left">14:let item = undefined</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15562 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">35:let status = __x19__</td></tr>
      <tr><td align="left">36:assert (= status true)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15543 [shape=diamond, label=<<font color="black">(= __x11__ Object)</font>> color="black" fillcolor="white" style=filled]
  node15528 [shape=cds, label=<<font color="black">13:app __x5__ = (ToString k)</font>> color="black" fillcolor="white" style=filled]
  node15511 [shape=cds, label=<<font color="black">app value = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node15529 [shape=cds, label=<<font color="black">13:app __x6__ = (Get replacer [! __x5__])</font>> color="black" fillcolor="white" style=filled]
  node15534 [shape=cds, label=<<font color="black">app __x8__ = (Type v)</font>> color="black" fillcolor="white" style=filled]
  node15539 [shape=diamond, label=<<font color="black">(= __x10__ Object)</font>> color="black" fillcolor="white" style=filled]
  node15524 [shape=cds, label=<<font color="black">10:app __x3__ = (Get replacer &quot;length&quot;)</font>> color="black" fillcolor="white" style=filled]
  node15551 [shape=diamond, label=<<font color="black">(= __x14__ Number)</font>> color="black" fillcolor="white" style=filled]
  node15549 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">26:let space = [? __x13__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15519 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let ReplacerFunction = replacer</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15556 [shape=diamond, label=<<font color="black">(= __x17__ String)</font>> color="black" fillcolor="white" style=filled]
  node15525 [shape=cds, label=<<font color="black">10:app __x4__ = (ToLength [? __x3__])</font>> color="black" fillcolor="white" style=filled]
  node15548 [shape=cds, label=<<font color="black">26:app __x13__ = (ToString space)</font>> color="black" fillcolor="white" style=filled]
  node15540 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">??? &quot;If id:{v} has a [ [ StringData ] ] or [ [ NumberData ] ] internal slot , let id:{item} be ? ToString ( id:{v} ) .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15533 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let item = v</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15512 [shape=cds, label=<<font color="black">app replacer = (GetArgument argumentsList 1i)</font>> color="black" fillcolor="white" style=filled]
  node15521 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">7:let isArray = [? __x2__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15516 [shape=diamond, label=<<font color="black">(= __x0__ Object)</font>> color="black" fillcolor="white" style=filled]
  node15557 -> node15559 [ color="black"]
  node15531 -> node15532 [ color="black"]
  node15525 -> node15526 [ color="black"]
  node15538 -> node15539 [ color="black"]
  node15550 -> node15551 [ color="black"]
  node15512 -> node15513 [ color="black"]
  node15509 -> node15511 [ color="black"]
  node15556 -> node15557 [label=<<font color="black">true</font>> color="black"]
  node15556 -> node15558 [label=<<font color="black">false</font>> color="black"]
  node15534 -> node15535 [ color="black"]
  node15513 -> node15514 [ color="black"]
  node15554 -> node15559 [ color="black"]
  node15514 -> node15515 [ color="black"]
  node15544 -> node15545 [label=<<font color="black">true</font>> color="black"]
  node15544 -> node15547 [label=<<font color="black">false</font>> color="black"]
  node15529 -> node15530 [ color="black"]
  node15545 -> node15546 [ color="black"]
  node15558 -> node15559 [ color="black"]
  node15560 -> node15561 [ color="black"]
  node15524 -> node15525 [ color="black"]
  node15530 -> node15531 [ color="black"]
  node15526 -> node15527 [ color="black"]
  node15540 -> node15541 [ color="black"]
  node15511 -> node15512 [ color="black"]
  node15541 -> node15527 [ color="black"]
  node15563 -> node15564 [ color="black"]
  node15537 -> node15541 [ color="black"]
  node15521 -> node15522 [ color="black"]
  node15547 -> node15548 [label=<<font color="black">true</font>> color="black"]
  node15547 -> node15550 [label=<<font color="black">false</font>> color="black"]
  node15527 -> node15528 [label=<<font color="black">true</font>> color="black"]
  node15527 -> node15542 [label=<<font color="black">false</font>> color="black"]
  node15520 -> node15521 [ color="black"]
  node15516 -> node15517 [label=<<font color="black">true</font>> color="black"]
  node15516 -> node15542 [label=<<font color="black">false</font>> color="black"]
  node15536 -> node15537 [ color="black"]
  node15523 -> node15524 [ color="black"]
  node15515 -> node15516 [ color="black"]
  node15518 -> node15519 [label=<<font color="black">true</font>> color="black"]
  node15518 -> node15520 [label=<<font color="black">false</font>> color="black"]
  node15533 -> node15541 [ color="black"]
  node15519 -> node15542 [ color="black"]
  node15517 -> node15518 [ color="black"]
  node15539 -> node15540 [label=<<font color="black">true</font>> color="black"]
  node15539 -> node15541 [label=<<font color="black">false</font>> color="black"]
  node15528 -> node15529 [ color="black"]
  node15548 -> node15549 [ color="black"]
  node15555 -> node15556 [ color="black"]
  node15543 -> node15544 [label=<<font color="black">true</font>> color="black"]
  node15543 -> node15550 [label=<<font color="black">false</font>> color="black"]
  node15553 -> node15554 [ color="black"]
  node15564 -> node15510 [ color="black"]
  node15535 -> node15536 [label=<<font color="black">true</font>> color="black"]
  node15535 -> node15538 [label=<<font color="black">false</font>> color="black"]
  node15561 -> node15562 [ color="black"]
  node15532 -> node15533 [label=<<font color="black">true</font>> color="black"]
  node15532 -> node15534 [label=<<font color="black">false</font>> color="black"]
  node15562 -> node15563 [ color="black"]
  node15551 -> node15552 [label=<<font color="black">true</font>> color="black"]
  node15551 -> node15555 [label=<<font color="black">false</font>> color="black"]
  node15559 -> node15560 [ color="black"]
  node15546 -> node15550 [ color="black"]
  node15522 -> node15523 [label=<<font color="black">true</font>> color="black"]
  node15522 -> node15542 [label=<<font color="black">false</font>> color="black"]
  node15542 -> node15543 [ color="black"]
  node15552 -> node15553 [ color="black"]
  node15549 -> node15550 [ color="black"]
}
