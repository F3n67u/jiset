{
  let module = this
  assert (|| (= module.Status "instantiated") (= module.Status "evaluated"))
  let stack = (new [])
  app __x0__ = (InnerModuleEvaluation module stack 0i)
  let result = __x0__
  app __x1__ = (IsAbruptCompletion result)
  if __x1__ {
    let __x2__ = stack
    let __x3__ = 0i
    while (< __x3__ __x2__.length) {
      let m = __x2__[__x3__]
      assert (= m.Status "evaluating")
      m.Status = "evaluated"
      m.EvaluationError = result
      __x3__ = (+ __x3__ 1i)
    }
    assert (&& (= module.Status "evaluated") (= module.EvaluationError result))
    app __x4__ = (WrapCompletion result)
    return __x4__
  } else {}
  assert (&& (= module.Status "evaluated") (= module.EvaluationError undefined))
  assert (= stack.length 0i)
  app __x5__ = (WrapCompletion undefined)
  return __x5__
}