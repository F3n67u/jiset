digraph {
  node11962 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let pos = len</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11959 [shape=cds, label=<<font color="black">4:app __x3__ = (ToString searchString)</font>> color="black" fillcolor="white" style=filled]
  node11954 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">1:let S = [? __x1__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11952 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let O = [? __x0__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11948 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node11961 [shape=diamond, label=<<font color="black">(= endPosition undefined)</font>> color="black" fillcolor="white" style=filled]
  node11965 [shape=cds, label=<<font color="black">7:app __x5__ = (max pos 0i)</font>> color="black" fillcolor="white" style=filled]
  node11955 [shape=cds, label=<<font color="black">2:app __x2__ = (IsRegExp searchString)</font>> color="black" fillcolor="white" style=filled]
  node11956 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">2:let isRegExp = [? __x2__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11969 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return false</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11963 [shape=cds, label=<<font color="black">app __x4__ = (ToInteger endPosition)</font>> color="black" fillcolor="white" style=filled]
  node11960 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">4:let searchStr = [? __x3__]</td></tr>
      <tr><td align="left">5:let len = S.length</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11949 [shape=cds, label=<<font color="black">app searchString = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node11966 [shape=cds, label=<<font color="black">7:app __x6__ = (min __x5__ len)</font>> color="black" fillcolor="white" style=filled]
  node11951 [shape=cds, label=<<font color="black">0:app __x0__ = (RequireObjectCoercible this)</font>> color="black" fillcolor="white" style=filled]
  node11968 [shape=diamond, label=<<font color="black">(&lt; start 0i)</font>> color="black" fillcolor="white" style=filled]
  node11947 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node11964 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let pos = [? __x4__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11967 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">7:let end = __x6__</td></tr>
      <tr><td align="left">8:let searchLength = searchStr.length</td></tr>
      <tr><td align="left">9:let start = (- end searchLength)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11957 [shape=diamond, label=<<font color="black">(= isRegExp true)</font>> color="black" fillcolor="white" style=filled]
  node11970 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">11:??? &quot;If the sequence of elements of id:{S} starting at id:{start} of length id:{searchLength} is the same as the full element sequence of id:{searchStr} , return value:{true} .&quot;</td></tr>
      <tr><td align="left">12:??? &quot;Otherwise , return value:{false} .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11950 [shape=cds, label=<<font color="black">app endPosition = (GetArgument argumentsList 1i)</font>> color="black" fillcolor="white" style=filled]
  node11953 [shape=cds, label=<<font color="black">1:app __x1__ = (ToString O)</font>> color="black" fillcolor="white" style=filled]
  node11958 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11961 -> node11962 [label=<<font color="black">true</font>> color="black"]
  node11961 -> node11963 [label=<<font color="black">false</font>> color="black"]
  node11966 -> node11967 [ color="black"]
  node11962 -> node11965 [ color="black"]
  node11957 -> node11958 [label=<<font color="black">true</font>> color="black"]
  node11957 -> node11959 [label=<<font color="black">false</font>> color="black"]
  node11951 -> node11952 [ color="black"]
  node11955 -> node11956 [ color="black"]
  node11970 -> node11948 [ color="black"]
  node11953 -> node11954 [ color="black"]
  node11952 -> node11953 [ color="black"]
  node11954 -> node11955 [ color="black"]
  node11967 -> node11968 [ color="black"]
  node11947 -> node11949 [ color="black"]
  node11949 -> node11950 [ color="black"]
  node11960 -> node11961 [ color="black"]
  node11964 -> node11965 [ color="black"]
  node11969 -> node11970 [ color="black"]
  node11959 -> node11960 [ color="black"]
  node11963 -> node11964 [ color="black"]
  node11950 -> node11951 [ color="black"]
  node11956 -> node11957 [ color="black"]
  node11968 -> node11969 [label=<<font color="black">true</font>> color="black"]
  node11968 -> node11970 [label=<<font color="black">false</font>> color="black"]
  node11958 -> node11959 [ color="black"]
  node11965 -> node11966 [ color="black"]
}
