{
  app __x0__ = (IsPropertyKey P)
  assert (= __x0__ true)
  let handler = O.ProxyHandler
  if (= handler null) throw INTRINSIC_TypeError else {}
  app __x1__ = (Type handler)
  assert (= __x1__ Object)
  let target = O.ProxyTarget
  app __x2__ = (GetMethod handler "getOwnPropertyDescriptor")
  let trap = [? __x2__]
  if (= trap undefined) {
    app __x3__ = (target.GetOwnProperty target P)
    return [? __x3__]
  } else {}
  app __x4__ = (Call trap handler (new [target, P]))
  let trapResultObj = [? __x4__]
  app __x5__ = (Type trapResultObj)
  if (! (|| (= __x5__ Object) (= __x5__ Undefined))) throw INTRINSIC_TypeError else {}
  app __x6__ = (target.GetOwnProperty target P)
  let targetDesc = [? __x6__]
  if (= trapResultObj undefined) {
    if (= targetDesc undefined) return undefined else {}
    if (= targetDesc.Configurable false) throw INTRINSIC_TypeError else {}
    app __x7__ = (IsExtensible target)
    let extensibleTarget = [? __x7__]
    if (= extensibleTarget false) throw INTRINSIC_TypeError else {}
    return undefined
  } else {}
  app __x8__ = (IsExtensible target)
  let extensibleTarget = [? __x8__]
  app __x9__ = (ToPropertyDescriptor trapResultObj)
  let resultDesc = [? __x9__]
  app __x10__ = (CompletePropertyDescriptor resultDesc)
  __x10__
  app __x11__ = (IsCompatiblePropertyDescriptor extensibleTarget resultDesc targetDesc)
  let valid = __x11__
  if (= valid false) throw INTRINSIC_TypeError else {}
  if (= resultDesc.Configurable false) if (|| (= targetDesc undefined) (= targetDesc.Configurable true)) throw INTRINSIC_TypeError else {} else {}
  return resultDesc
}