digraph {
  node9833 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">6:[! __x4__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node9828 [shape=cds, label=<<font color="black">4:app __x2__ = (MakeMethod closure object)</font>> color="black" fillcolor="white" style=filled]
  node9822 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node9836 [shape=cds, label=<<font color="black">10:app __x6__ = (DefinePropertyOrThrow object propKey desc)</font>> color="black" fillcolor="white" style=filled]
  node9829 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">4:[! __x2__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node9825 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let propKey = __x0__</td></tr>
      <tr><td align="left">1:[? propKey]</td></tr>
      <tr><td align="left">2:let scope = GLOBAL_context.LexicalEnvironment</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node9835 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">7:[! __x5__]</td></tr>
      <tr><td align="left">8:closure.SourceText = (get-syntax AsyncGeneratorMethod)</td></tr>
      <tr><td align="left">9:let desc = (new PropertyDescriptor(&quot;Value&quot; -&gt; closure, &quot;Writable&quot; -&gt; true, &quot;Enumerable&quot; -&gt; enumerable, &quot;Configurable&quot; -&gt; true))</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node9830 [shape=cds, label=<<font color="black">5:app __x3__ = (OrdinaryObjectCreate INTRINSIC_AsyncGenerator_prototype)</font>> color="black" fillcolor="white" style=filled]
  node9826 [shape=cds, label=<<font color="black">3:app __x1__ = (OrdinaryFunctionCreate INTRINSIC_AsyncGenerator UniqueFormalParameters AsyncGeneratorBody CONST_nonDASHlexicalDASHthis scope)</font>> color="black" fillcolor="white" style=filled]
  node9834 [shape=cds, label=<<font color="black">7:app __x5__ = (SetFunctionName closure propKey)</font>> color="black" fillcolor="white" style=filled]
  node9824 [shape=cds, label=<<font color="black">0:access __x0__ = (PropertyName &quot;Evaluation&quot;)</font>> color="black" fillcolor="white" style=filled]
  node9823 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node9827 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">3:let closure = [! __x1__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node9831 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">5:let prototype = [! __x3__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node9832 [shape=cds, label=<<font color="black">6:app __x4__ = (DefinePropertyOrThrow closure &quot;prototype&quot; (new PropertyDescriptor(&quot;Value&quot; -&gt; prototype, &quot;Writable&quot; -&gt; true, &quot;Enumerable&quot; -&gt; false, &quot;Configurable&quot; -&gt; false)))</font>> color="black" fillcolor="white" style=filled]
  node9837 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">10:return [? __x6__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node9832 -> node9833 [ color="black"]
  node9835 -> node9836 [ color="black"]
  node9828 -> node9829 [ color="black"]
  node9830 -> node9831 [ color="black"]
  node9826 -> node9827 [ color="black"]
  node9831 -> node9832 [ color="black"]
  node9833 -> node9834 [ color="black"]
  node9824 -> node9825 [ color="black"]
  node9829 -> node9830 [ color="black"]
  node9834 -> node9835 [ color="black"]
  node9837 -> node9823 [ color="black"]
  node9825 -> node9826 [ color="black"]
  node9822 -> node9824 [ color="black"]
  node9827 -> node9828 [ color="black"]
  node9836 -> node9837 [ color="black"]
}
