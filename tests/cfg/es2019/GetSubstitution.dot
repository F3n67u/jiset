digraph {
  node13244 [shape=cds, label=<<font color="black">0:app __x0__ = (Type matched)</font>> color="black" fillcolor="white" style=filled]
  node13251 [shape=cds, label=<<font color="black">11:app __x3__ = (ToObject namedCaptures)</font>> color="black" fillcolor="white" style=filled]
  node13248 [shape=cds, label=<<font color="black">7:app __x2__ = (Type replacement)</font>> color="black" fillcolor="white" style=filled]
  node13250 [shape=diamond, label=<<font color="black">(! (= namedCaptures undefined))</font>> color="black" fillcolor="white" style=filled]
  node13245 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:assert (= __x0__ String)</td></tr>
      <tr><td align="left">1:let matchLength = matched.length</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node13249 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">7:assert (= __x2__ String)</td></tr>
      <tr><td align="left">8:let tailPos = (+ position matchLength)</td></tr>
      <tr><td align="left">9:let m = captures.length</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node13253 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">12:??? &quot;Let id:{result} be the String value derived from id:{replacement} by copying code unit elements from id:{replacement} to id:{result} while performing replacements as specified in link:{unhandled: table-45} . These code:{$} replacements are done left - to - right , and , once such a replacement is performed , the new replacement text is not subject to further replacements .&quot;</td></tr>
      <tr><td align="left">13:return result</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node13246 [shape=cds, label=<<font color="black">2:app __x1__ = (Type str)</font>> color="black" fillcolor="white" style=filled]
  node13243 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node13252 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">11:namedCaptures = [? __x3__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node13242 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node13247 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">2:assert (= __x1__ String)</td></tr>
      <tr><td align="left">3:let stringLength = str.length</td></tr>
      <tr><td align="left">5:assert (! (&lt; stringLength position))</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node13248 -> node13249 [ color="black"]
  node13246 -> node13247 [ color="black"]
  node13245 -> node13246 [ color="black"]
  node13252 -> node13253 [ color="black"]
  node13250 -> node13251 [label=<<font color="black">true</font>> color="black"]
  node13250 -> node13253 [label=<<font color="black">false</font>> color="black"]
  node13249 -> node13250 [ color="black"]
  node13253 -> node13243 [ color="black"]
  node13244 -> node13245 [ color="black"]
  node13247 -> node13248 [ color="black"]
  node13251 -> node13252 [ color="black"]
  node13242 -> node13244 [ color="black"]
}
