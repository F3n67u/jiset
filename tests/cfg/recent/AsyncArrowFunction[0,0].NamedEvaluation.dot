digraph {
  node10277 [shape=cds, label=<<font color="black">0:access __x0__ = (GLOBAL_context &quot;LexicalEnvironment&quot;)</font>> color="black" fillcolor="white" style=filled]
  node10282 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">4:__x2__</td></tr>
      <tr><td align="left">5:return closure</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10278 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let scope = __x0__</td></tr>
      <tr><td align="left">1:let sourceText = (get-syntax AsyncArrowFunction)</td></tr>
      <tr><td align="left">2:let parameters = AsyncArrowBindingIdentifier</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10281 [shape=cds, label=<<font color="black">4:app __x2__ = (SetFunctionName closure name)</font>> color="black" fillcolor="white" style=filled]
  node10279 [shape=cds, label=<<font color="black">3:app __x1__ = (OrdinaryFunctionCreate INTRINSIC_AsyncFunction_prototype sourceText parameters AsyncConciseBody CONST_lexicalDASHthis scope)</font>> color="black" fillcolor="white" style=filled]
  node10275 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node10280 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">3:let closure = [! __x1__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10276 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node10275 -> node10277 [ color="black"]
  node10279 -> node10280 [ color="black"]
  node10277 -> node10278 [ color="black"]
  node10278 -> node10279 [ color="black"]
  node10282 -> node10276 [ color="black"]
  node10280 -> node10281 [ color="black"]
  node10281 -> node10282 [ color="black"]
}
