{
  app string = (GetArgument argumentsList 0i)
  [0] let rx = this
  [1] app __x0__ = (Type rx)
  [1] if (! (= __x0__ Object)) {
    app __x1__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_TypeError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
    return __x1__
  } else [1] {}
  [2] app __x2__ = (ToString string)
  [2] if (is-completion __x2__) if (= __x2__.Type CONST_normal) __x2__ = __x2__.Value else return __x2__ else [1] {}
  [2] let S = __x2__
  [3] app __x3__ = (Get rx "global")
  [3] if (is-completion __x3__) if (= __x3__.Type CONST_normal) __x3__ = __x3__.Value else return __x3__ else [1] {}
  [3] app __x4__ = (ToBoolean __x3__)
  [3] let global = __x4__
  [6] if (= global false) {
    [5] app __x5__ = (RegExpExec rx S)
    [5] if (is-completion __x5__) if (= __x5__.Type CONST_normal) __x5__ = __x5__.Value else return __x5__ else [1] {}
    [5] app __x6__ = (WrapCompletion __x5__)
    [5] return __x6__
  } else {
    [7] app __x7__ = (Get rx "unicode")
    [7] if (is-completion __x7__) if (= __x7__.Type CONST_normal) __x7__ = __x7__.Value else return __x7__ else [1] {}
    [7] app __x8__ = (ToBoolean __x7__)
    [7] let fullUnicode = __x8__
    [8] app __x9__ = (Set rx "lastIndex" 0i true)
    [8] if (is-completion __x9__) if (= __x9__.Type CONST_normal) __x9__ = __x9__.Value else return __x9__ else [1] {}
    [8] __x9__
    [9] app __x10__ = (ArrayCreate 0i)
    [9] let A = __x10__
    [10] let n = 0i
    [11] while true {
      [12] app __x11__ = (RegExpExec rx S)
      [12] if (is-completion __x11__) if (= __x11__.Type CONST_normal) __x11__ = __x11__.Value else return __x11__ else [1] {}
      [12] let result = __x11__
      [16] if (= result null) if (== n 0i) {
        app __x12__ = (WrapCompletion null)
        return __x12__
      } else {
        app __x13__ = (WrapCompletion A)
        return __x13__
      } else {
        [17] app __x14__ = (Get result "0")
        [17] if (is-completion __x14__) if (= __x14__.Type CONST_normal) __x14__ = __x14__.Value else return __x14__ else [1] {}
        [17] app __x15__ = (ToString __x14__)
        [17] if (is-completion __x15__) if (= __x15__.Type CONST_normal) __x15__ = __x15__.Value else return __x15__ else [1] {}
        [17] let matchStr = __x15__
        [18] app __x16__ = (ToString n)
        [18] if (is-completion __x16__) if (= __x16__.Type CONST_normal) __x16__ = __x16__.Value else return __x16__ else [1] {}
        [18] app __x17__ = (CreateDataProperty A __x16__ matchStr)
        [18] let status = __x17__
        [19] assert (= status true)
        [20] if (= matchStr "") {
          [21] app __x18__ = (Get rx "lastIndex")
          [21] if (is-completion __x18__) if (= __x18__.Type CONST_normal) __x18__ = __x18__.Value else return __x18__ else [1] {}
          [21] app __x19__ = (ToLength __x18__)
          [21] if (is-completion __x19__) if (= __x19__.Type CONST_normal) __x19__ = __x19__.Value else return __x19__ else [1] {}
          [21] let thisIndex = __x19__
          [22] app __x20__ = (AdvanceStringIndex S thisIndex fullUnicode)
          [22] let nextIndex = __x20__
          [23] app __x21__ = (Set rx "lastIndex" nextIndex true)
          [23] if (is-completion __x21__) if (= __x21__.Type CONST_normal) __x21__ = __x21__.Value else return __x21__ else [1] {}
          [23] __x21__
        } else [1] {}
        [24] n = (+ n 1i)
      }
    }
  }
}