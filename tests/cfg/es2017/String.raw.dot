digraph {
  node12475 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">4:let literalSegments = [? __x4__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12472 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">3:let raw = [? __x2__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12485 [shape=diamond, label=<<font color="black">(&lt; __x9__ __x8__.length)</font>> color="black" fillcolor="white" style=filled]
  node12478 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">6:let stringElements = (new [])</td></tr>
      <tr><td align="left">7:let nextIndex = 0i</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12493 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">16:let nextSub = [? __x11__]</td></tr>
      <tr><td align="left">17:let __x12__ = nextSub</td></tr>
      <tr><td align="left">17:let __x13__ = 0i</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12481 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">9:let nextKey = [! __x5__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12483 [shape=cds, label=<<font color="black">10:app __x7__ = (ToString [? __x6__])</font>> color="black" fillcolor="white" style=filled]
  node12473 [shape=cds, label=<<font color="black">4:app __x3__ = (Get raw &quot;length&quot;)</font>> color="black" fillcolor="white" style=filled]
  node12492 [shape=cds, label=<<font color="black">16:app __x11__ = (ToString next)</font>> color="black" fillcolor="white" style=filled]
  node12487 [shape=diamond, label=<<font color="black">(== (+ nextIndex 1i) literalSegments)</font>> color="black" fillcolor="white" style=filled]
  node12470 [shape=cds, label=<<font color="black">3:app __x1__ = (Get cooked &quot;raw&quot;)</font>> color="black" fillcolor="white" style=filled]
  node12490 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let next = substitutions[nextIndex]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12468 [shape=cds, label=<<font color="black">2:app __x0__ = (ToObject template)</font>> color="black" fillcolor="white" style=filled]
  node12479 [shape=diamond, label=<<font color="black">true</font>> color="black" fillcolor="white" style=filled]
  node12494 [shape=diamond, label=<<font color="black">(&lt; __x13__ __x12__.length)</font>> color="black" fillcolor="white" style=filled]
  node12474 [shape=cds, label=<<font color="black">4:app __x4__ = (ToLength [? __x3__])</font>> color="black" fillcolor="white" style=filled]
  node12489 [shape=diamond, label=<<font color="black">(&lt; nextIndex numberOfSubstitutions)</font>> color="black" fillcolor="white" style=filled]
  node12469 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">2:let cooked = [? __x0__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12486 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let __x10__ = __x8__[__x9__]</td></tr>
      <tr><td align="left">append __x10__ -&gt; stringElements</td></tr>
      <tr><td align="left">__x9__ = (+ __x9__ 1i)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12464 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node12477 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return &quot;&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12496 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">18:let nextIndex = (+ nextIndex 1i)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12465 [shape=cds, label=<<font color="black">app template = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node12482 [shape=cds, label=<<font color="black">10:app __x6__ = (Get raw nextKey)</font>> color="black" fillcolor="white" style=filled]
  node12467 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:??? &quot;Let id:{substitutions} be a List consisting of all of the arguments passed to this function , starting with the second argument . If fewer than two arguments were passed , the List is empty .&quot;</td></tr>
      <tr><td align="left">1:let numberOfSubstitutions = substitutions.length</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12484 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">10:let nextSeg = [? __x7__]</td></tr>
      <tr><td align="left">11:let __x8__ = nextSeg</td></tr>
      <tr><td align="left">11:let __x9__ = 0i</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12495 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let __x14__ = __x12__[__x13__]</td></tr>
      <tr><td align="left">append __x14__ -&gt; stringElements</td></tr>
      <tr><td align="left">__x13__ = (+ __x13__ 1i)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12463 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node12491 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let next = &quot;&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12480 [shape=cds, label=<<font color="black">9:app __x5__ = (ToString nextIndex)</font>> color="black" fillcolor="white" style=filled]
  node12476 [shape=diamond, label=<<font color="black">(! (&lt; 0i literalSegments))</font>> color="black" fillcolor="white" style=filled]
  node12466 [shape=cds, label=<<font color="black">app substitutions = (GetArgument argumentsList 1i)</font>> color="black" fillcolor="white" style=filled]
  node12471 [shape=cds, label=<<font color="black">3:app __x2__ = (ToObject [? __x1__])</font>> color="black" fillcolor="white" style=filled]
  node12488 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">??? &quot;Return the String value whose code units are , in order , the elements in the List id:{stringElements} . If id:{stringElements} has no elements , the empty string is returned .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12494 -> node12495 [label=<<font color="black">true</font>> color="black"]
  node12494 -> node12496 [label=<<font color="black">false</font>> color="black"]
  node12492 -> node12493 [ color="black"]
  node12478 -> node12479 [ color="black"]
  node12468 -> node12469 [ color="black"]
  node12481 -> node12482 [ color="black"]
  node12467 -> node12468 [ color="black"]
  node12470 -> node12471 [ color="black"]
  node12474 -> node12475 [ color="black"]
  node12471 -> node12472 [ color="black"]
  node12480 -> node12481 [ color="black"]
  node12495 -> node12494 [ color="black"]
  node12482 -> node12483 [ color="black"]
  node12477 -> node12478 [ color="black"]
  node12486 -> node12485 [ color="black"]
  node12489 -> node12490 [label=<<font color="black">true</font>> color="black"]
  node12489 -> node12491 [label=<<font color="black">false</font>> color="black"]
  node12466 -> node12467 [ color="black"]
  node12473 -> node12474 [ color="black"]
  node12488 -> node12489 [ color="black"]
  node12476 -> node12477 [label=<<font color="black">true</font>> color="black"]
  node12476 -> node12478 [label=<<font color="black">false</font>> color="black"]
  node12485 -> node12486 [label=<<font color="black">true</font>> color="black"]
  node12485 -> node12487 [label=<<font color="black">false</font>> color="black"]
  node12491 -> node12492 [ color="black"]
  node12469 -> node12470 [ color="black"]
  node12484 -> node12485 [ color="black"]
  node12490 -> node12492 [ color="black"]
  node12487 -> node12488 [label=<<font color="black">true</font>> color="black"]
  node12487 -> node12489 [label=<<font color="black">false</font>> color="black"]
  node12493 -> node12494 [ color="black"]
  node12463 -> node12465 [ color="black"]
  node12465 -> node12466 [ color="black"]
  node12472 -> node12473 [ color="black"]
  node12483 -> node12484 [ color="black"]
  node12496 -> node12479 [ color="black"]
  node12479 -> node12480 [label=<<font color="black">true</font>> color="black"]
  node12479 -> node12464 [label=<<font color="black">false</font>> color="black"]
  node12475 -> node12476 [ color="black"]
}
