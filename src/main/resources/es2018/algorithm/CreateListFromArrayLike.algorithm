<algorithm>
  <param>obj</param>
  <param>elementTypes</param>
  <step-list>
    <step>If <id>elementTypes</id> is not present, set <id>elementTypes</id> to « Undefined, Null, Boolean, String, Symbol, Number, Object ».</step>
    <step>If Type ( <id>obj</id> ) is not Object, throw a <value>TypeError</value> exception.</step>
    <step>Let <id>len</id> be ? ToLength (? Get ( <id>obj</id> , <value>"length"</value> )).</step>
    <step>Let <id>list</id> be a new empty List .</step>
    <step>Let <id>index</id> be 0.</step>
    <step>Repeat, while <id>index</id> < <id>len</id>     <step-list>
      <step>Let <id>indexName</id> be ! ToString ( <id>index</id> ).</step>
      <step>Let <id>next</id> be ? Get ( <id>obj</id> , <id>indexName</id> ).</step>
      <step>If Type ( <id>next</id> ) is not an element of <id>elementTypes</id> , throw a <value>TypeError</value> exception.</step>
      <step>Append <id>next</id> as the last element of <id>list</id> .</step>
      <step>Set <id>index</id> to <id>index</id> + 1.</step>
    </step-list></step>
    <step>Return <id>list</id> .</step>
  </step-list>
</algorithm>