digraph {
  node16086 [shape=diamond, label=<<font color="black">(= __x17__ String)</font>> color="black" fillcolor="white" style=filled]
  node16071 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">19:??? &quot;If id:{item} is not value:{undefined} and id:{item} is not currently an element of id:{PropertyList} , then in:{} out:{}&quot;</td></tr>
      <tr><td align="left">21:let k = (+ k 1i)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16039 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node16067 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let item = [! __x9__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16059 [shape=cds, label=<<font color="black">13:app __x6__ = (Get replacer [! __x5__])</font>> color="black" fillcolor="white" style=filled]
  node16068 [shape=cds, label=<<font color="black">app __x10__ = (Type v)</font>> color="black" fillcolor="white" style=filled]
  node16063 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let item = v</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16075 [shape=cds, label=<<font color="black">24:app __x12__ = (ToNumber space)</font>> color="black" fillcolor="white" style=filled]
  node16088 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">gap = &quot;&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16047 [shape=cds, label=<<font color="black">6:app __x1__ = (IsCallable replacer)</font>> color="black" fillcolor="white" style=filled]
  node16070 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">??? &quot;If id:{v} has a [ [ StringData ] ] or [ [ NumberData ] ] internal slot , let id:{item} be ? ToString ( id:{v} ) .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16053 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">9:let PropertyList = (new [])</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16074 [shape=diamond, label=<<font color="black">(! (= space.NumberData absent))</font>> color="black" fillcolor="white" style=filled]
  node16054 [shape=cds, label=<<font color="black">10:app __x3__ = (Get replacer &quot;length&quot;)</font>> color="black" fillcolor="white" style=filled]
  node16060 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">13:let v = [? __x6__]</td></tr>
      <tr><td align="left">14:let item = undefined</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16092 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">35:let status = __x19__</td></tr>
      <tr><td align="left">36:assert (= status true)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16050 [shape=cds, label=<<font color="black">7:app __x2__ = (IsArray replacer)</font>> color="black" fillcolor="white" style=filled]
  node16045 [shape=cds, label=<<font color="black">3:app __x0__ = (Type replacer)</font>> color="black" fillcolor="white" style=filled]
  node16077 [shape=diamond, label=<<font color="black">(! (= space.StringData absent))</font>> color="black" fillcolor="white" style=filled]
  node16082 [shape=cds, label=<<font color="black">28:app __x15__ = (ToInteger space)</font>> color="black" fillcolor="white" style=filled]
  node16076 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">24:let space = [? __x12__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16091 [shape=cds, label=<<font color="black">35:app __x19__ = (CreateDataProperty wrapper &quot;&quot; value)</font>> color="black" fillcolor="white" style=filled]
  node16044 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let stack = (new [])</td></tr>
      <tr><td align="left">1:let indent = &quot;&quot;</td></tr>
      <tr><td align="left">2:let PropertyList = undefined</td></tr>
      <tr><td align="left">2:let ReplacerFunction = undefined</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16072 [shape=cds, label=<<font color="black">22:app __x11__ = (Type space)</font>> color="black" fillcolor="white" style=filled]
  node16040 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node16087 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">??? &quot;If the number of elements in id:{space} is 10 or less , set id:{gap} to id:{space} ; otherwise set id:{gap} to a String consisting of the first 10 elements of id:{space} .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16055 [shape=cds, label=<<font color="black">10:app __x4__ = (ToLength [? __x3__])</font>> color="black" fillcolor="white" style=filled]
  node16083 [shape=cds, label=<<font color="black">28:app __x16__ = (min 10i __x15__)</font>> color="black" fillcolor="white" style=filled]
  node16051 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">7:let isArray = [? __x2__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16058 [shape=cds, label=<<font color="black">13:app __x5__ = (ToString k)</font>> color="black" fillcolor="white" style=filled]
  node16080 [shape=cds, label=<<font color="black">32:app __x14__ = (Type space)</font>> color="black" fillcolor="white" style=filled]
  node16048 [shape=diamond, label=<<font color="black">(= __x1__ true)</font>> color="black" fillcolor="white" style=filled]
  node16043 [shape=cds, label=<<font color="black">app space = (GetArgument argumentsList 2i)</font>> color="black" fillcolor="white" style=filled]
  node16065 [shape=diamond, label=<<font color="black">(= __x8__ Number)</font>> color="black" fillcolor="white" style=filled]
  node16090 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">34:let wrapper = __x18__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16056 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">10:let len = [? __x4__]</td></tr>
      <tr><td align="left">11:let k = 0i</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16069 [shape=diamond, label=<<font color="black">(= __x10__ Object)</font>> color="black" fillcolor="white" style=filled]
  node16057 [shape=diamond, label=<<font color="black">(&lt; k len)</font>> color="black" fillcolor="white" style=filled]
  node16062 [shape=diamond, label=<<font color="black">(= __x7__ String)</font>> color="black" fillcolor="white" style=filled]
  node16084 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">28:let space = __x16__</td></tr>
      <tr><td align="left">29:??? &quot;Set id:{gap} to a String containing id:{space} occurrences of code unit 0x0020 ( SPACE ) . This will be the empty String if id:{space} is less than 1 .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16094 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">37:return [? __x20__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16052 [shape=diamond, label=<<font color="black">(= isArray true)</font>> color="black" fillcolor="white" style=filled]
  node16089 [shape=cds, label=<<font color="black">34:app __x18__ = (ObjectCreate INTRINSIC_ObjectPrototype)</font>> color="black" fillcolor="white" style=filled]
  node16042 [shape=cds, label=<<font color="black">app replacer = (GetArgument argumentsList 1i)</font>> color="black" fillcolor="white" style=filled]
  node16064 [shape=cds, label=<<font color="black">app __x8__ = (Type v)</font>> color="black" fillcolor="white" style=filled]
  node16079 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">26:let space = [? __x13__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16049 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let ReplacerFunction = replacer</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16085 [shape=cds, label=<<font color="black">app __x17__ = (Type space)</font>> color="black" fillcolor="white" style=filled]
  node16041 [shape=cds, label=<<font color="black">app value = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node16093 [shape=cds, label=<<font color="black">37:app __x20__ = (SerializeJSONProperty &quot;&quot; wrapper)</font>> color="black" fillcolor="white" style=filled]
  node16078 [shape=cds, label=<<font color="black">26:app __x13__ = (ToString space)</font>> color="black" fillcolor="white" style=filled]
  node16073 [shape=diamond, label=<<font color="black">(= __x11__ Object)</font>> color="black" fillcolor="white" style=filled]
  node16081 [shape=diamond, label=<<font color="black">(= __x14__ Number)</font>> color="black" fillcolor="white" style=filled]
  node16061 [shape=cds, label=<<font color="black">17:app __x7__ = (Type v)</font>> color="black" fillcolor="white" style=filled]
  node16066 [shape=cds, label=<<font color="black">app __x9__ = (ToString v)</font>> color="black" fillcolor="white" style=filled]
  node16046 [shape=diamond, label=<<font color="black">(= __x0__ Object)</font>> color="black" fillcolor="white" style=filled]
  node16052 -> node16053 [label=<<font color="black">true</font>> color="black"]
  node16052 -> node16072 [label=<<font color="black">false</font>> color="black"]
  node16056 -> node16057 [ color="black"]
  node16074 -> node16075 [label=<<font color="black">true</font>> color="black"]
  node16074 -> node16077 [label=<<font color="black">false</font>> color="black"]
  node16079 -> node16080 [ color="black"]
  node16059 -> node16060 [ color="black"]
  node16082 -> node16083 [ color="black"]
  node16093 -> node16094 [ color="black"]
  node16053 -> node16054 [ color="black"]
  node16090 -> node16091 [ color="black"]
  node16064 -> node16065 [ color="black"]
  node16094 -> node16040 [ color="black"]
  node16072 -> node16073 [ color="black"]
  node16080 -> node16081 [ color="black"]
  node16088 -> node16089 [ color="black"]
  node16065 -> node16066 [label=<<font color="black">true</font>> color="black"]
  node16065 -> node16068 [label=<<font color="black">false</font>> color="black"]
  node16042 -> node16043 [ color="black"]
  node16049 -> node16072 [ color="black"]
  node16084 -> node16089 [ color="black"]
  node16043 -> node16044 [ color="black"]
  node16051 -> node16052 [ color="black"]
  node16073 -> node16074 [label=<<font color="black">true</font>> color="black"]
  node16073 -> node16080 [label=<<font color="black">false</font>> color="black"]
  node16061 -> node16062 [ color="black"]
  node16066 -> node16067 [ color="black"]
  node16044 -> node16045 [ color="black"]
  node16045 -> node16046 [ color="black"]
  node16091 -> node16092 [ color="black"]
  node16071 -> node16057 [ color="black"]
  node16069 -> node16070 [label=<<font color="black">true</font>> color="black"]
  node16069 -> node16071 [label=<<font color="black">false</font>> color="black"]
  node16085 -> node16086 [ color="black"]
  node16041 -> node16042 [ color="black"]
  node16075 -> node16076 [ color="black"]
  node16050 -> node16051 [ color="black"]
  node16070 -> node16071 [ color="black"]
  node16047 -> node16048 [ color="black"]
  node16083 -> node16084 [ color="black"]
  node16068 -> node16069 [ color="black"]
  node16058 -> node16059 [ color="black"]
  node16067 -> node16071 [ color="black"]
  node16092 -> node16093 [ color="black"]
  node16046 -> node16047 [label=<<font color="black">true</font>> color="black"]
  node16046 -> node16072 [label=<<font color="black">false</font>> color="black"]
  node16057 -> node16058 [label=<<font color="black">true</font>> color="black"]
  node16057 -> node16072 [label=<<font color="black">false</font>> color="black"]
  node16063 -> node16071 [ color="black"]
  node16060 -> node16061 [ color="black"]
  node16039 -> node16041 [ color="black"]
  node16081 -> node16082 [label=<<font color="black">true</font>> color="black"]
  node16081 -> node16085 [label=<<font color="black">false</font>> color="black"]
  node16076 -> node16080 [ color="black"]
  node16055 -> node16056 [ color="black"]
  node16086 -> node16087 [label=<<font color="black">true</font>> color="black"]
  node16086 -> node16088 [label=<<font color="black">false</font>> color="black"]
  node16048 -> node16049 [label=<<font color="black">true</font>> color="black"]
  node16048 -> node16050 [label=<<font color="black">false</font>> color="black"]
  node16077 -> node16078 [label=<<font color="black">true</font>> color="black"]
  node16077 -> node16080 [label=<<font color="black">false</font>> color="black"]
  node16054 -> node16055 [ color="black"]
  node16089 -> node16090 [ color="black"]
  node16062 -> node16063 [label=<<font color="black">true</font>> color="black"]
  node16062 -> node16064 [label=<<font color="black">false</font>> color="black"]
  node16087 -> node16089 [ color="black"]
  node16078 -> node16079 [ color="black"]
}
