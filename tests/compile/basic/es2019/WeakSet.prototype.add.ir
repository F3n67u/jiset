{
  let S = this
  app __x0__ = (Type S)
  if (! (= __x0__ Object)) throw INTRINSIC_TypeError else {}
  if (= S.WeakSetData absent) throw INTRINSIC_TypeError else {}
  app __x1__ = (Type value)
  if (! (= __x1__ Object)) throw INTRINSIC_TypeError else {}
  let entries = S.WeakSetData
  let __x2__ = entries
  let __x3__ = 0i
  while (< __x3__ __x2__.length) {
    let e = __x2__[__x3__]
    let __x4__ = true
    __x4__ = (! (= e CONST_empty))
    if __x4__ {
      app __x5__ = (SameValue e value)
      __x4__ = (= __x5__ true)
    } else {}
    if __x4__ return S else {}
    __x3__ = (+ __x3__ 1i)
  }
  append value -> entries
  return S
}