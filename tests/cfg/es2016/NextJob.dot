digraph {
  node0 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node5 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">__x1__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node1 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node6 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">1:GLOBAL_context = null</td></tr>
      <tr><td align="left">3:??? &quot;Let id:{nextQueue} be a non - empty Job Queue chosen in an implementation defined manner . If all Job Queues are empty , the result is implementation defined .&quot;</td></tr>
      <tr><td align="left">4:??? &quot;Let id:{nextPending} be the PendingJob record at the front of id:{nextQueue} . Remove that record from id:{nextQueue} .&quot;</td></tr>
      <tr><td align="left">5:let newContext = (new ExecutionContext(&quot;SubMap&quot; -&gt; (new SubMap())))</td></tr>
      <tr><td align="left">6:newContext.Function = null</td></tr>
      <tr><td align="left">7:newContext.Realm = nextPending.Realm</td></tr>
      <tr><td align="left">8:newContext.ScriptOrModule = nextPending.ScriptOrModule</td></tr>
      <tr><td align="left">9:append newContext -&gt; GLOBAL_executionStack</td></tr>
      <tr><td align="left">9:GLOBAL_context = GLOBAL_executionStack[(- GLOBAL_executionStack.length 1i)]</td></tr>
      <tr><td align="left">11:??? &quot;Perform the abstract operation named by id:{nextPending} . [ [ Job ] ] using the elements of id:{nextPending} . [ [ Arguments ] ] as its arguments .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node2 [shape=cds, label=<<font color="black">0:app __x0__ = (IsAbruptCompletion result)</font>> color="black" fillcolor="white" style=filled]
  node3 [shape=diamond, label=<<font color="black">__x0__</font>> color="black" fillcolor="white" style=filled]
  node4 [shape=cds, label=<<font color="black">app __x1__ = (HostReportErrors (new [result.Value]))</font>> color="black" fillcolor="white" style=filled]
  node5 -> node6 [ color="black"]
  node3 -> node4 [label=<<font color="black">true</font>> color="black"]
  node3 -> node6 [label=<<font color="black">false</font>> color="black"]
  node2 -> node3 [ color="black"]
  node0 -> node2 [ color="black"]
  node4 -> node5 [ color="black"]
  node6 -> node1 [ color="black"]
}
