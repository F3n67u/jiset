{
  access __x0__ = (PropertyName "Evaluation")
  let propKey = __x0__
  [? propKey]
  if true let strict = true else let strict = false
  let scope = GLOBAL_context.LexicalEnvironment
  if (! (= functionPrototype absent)) {
    let kind = CONST_Normal
    let prototype = functionPrototype
  } else {
    let kind = CONST_Method
    let prototype = INTRINSIC_FunctionPrototype
  }
  app __x1__ = (FunctionCreate kind UniqueFormalParameters FunctionBody scope strict prototype)
  let closure = __x1__
  app __x2__ = (MakeMethod closure object)
  __x2__
  closure.SourceText = (get-syntax MethodDefinition)
  return (new Record("Key" -> propKey, "Closure" -> closure))
}