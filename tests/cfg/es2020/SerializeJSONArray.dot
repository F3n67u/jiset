digraph {
  node17875 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">13:index = (+ index 1i)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17871 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">8:let strP = [? __x2__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17867 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">5:let len = [? __x0__]</td></tr>
      <tr><td align="left">6:let index = 0i</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17866 [shape=cds, label=<<font color="black">5:app __x0__ = (LengthOfArrayLike value)</font>> color="black" fillcolor="white" style=filled]
  node17876 [shape=diamond, label=<<font color="black">(= partial.length 0i)</font>> color="black" fillcolor="white" style=filled]
  node17870 [shape=cds, label=<<font color="black">8:app __x2__ = (SerializeJSONProperty state [! __x1__] value)</font>> color="black" fillcolor="white" style=filled]
  node17873 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">append &quot;null&quot; -&gt; partial</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17863 [shape=diamond, label=<<font color="black">(contains state.Stack value)</font>> color="black" fillcolor="white" style=filled]
  node17880 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">21:let separator = (+ (+ &quot;,&quot; &quot;\n&quot;) state.Indent)</td></tr>
      <tr><td align="left">22:??? &quot;Let id:{properties} be the String value formed by concatenating all the element Strings of id:{partial} with each adjacent pair of Strings separated with id:{separator} . The id:{separator} String is not inserted either before the first String or after the last String .&quot;</td></tr>
      <tr><td align="left">23:let final = (+ (+ (+ (+ (+ (+ &quot;[&quot; &quot;\n&quot;) state.Indent) properties) &quot;\n&quot;) stepback) &quot;]&quot;)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17865 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">1:append value -&gt; state.Stack</td></tr>
      <tr><td align="left">2:let stepback = state.Indent</td></tr>
      <tr><td align="left">3:state.Indent = (+ state.Indent state.Gap)</td></tr>
      <tr><td align="left">4:let partial = (new [])</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17869 [shape=cds, label=<<font color="black">8:app __x1__ = (ToString index)</font>> color="black" fillcolor="white" style=filled]
  node17874 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">append strP -&gt; partial</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17881 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">24:??? &quot;Remove the last element of id:{state} . [ [ Stack ] ] .&quot;</td></tr>
      <tr><td align="left">25:state.Indent = stepback</td></tr>
      <tr><td align="left">26:return final</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17872 [shape=diamond, label=<<font color="black">(= strP undefined)</font>> color="black" fillcolor="white" style=filled]
  node17868 [shape=diamond, label=<<font color="black">(&lt; index len)</font>> color="black" fillcolor="white" style=filled]
  node17878 [shape=diamond, label=<<font color="black">(= state.Gap &quot;&quot;)</font>> color="black" fillcolor="white" style=filled]
  node17861 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node17879 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">18:??? &quot;Let id:{properties} be the String value formed by concatenating all the element Strings of id:{partial} with each adjacent pair of Strings separated with the code unit 0x002C ( COMMA ) . A comma is not inserted either before the first String or after the last String .&quot;</td></tr>
      <tr><td align="left">19:let final = (+ (+ &quot;[&quot; properties) &quot;]&quot;)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17862 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node17877 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let final = &quot;[]&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17864 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17870 -> node17871 [ color="black"]
  node17861 -> node17863 [ color="black"]
  node17863 -> node17864 [label=<<font color="black">true</font>> color="black"]
  node17863 -> node17865 [label=<<font color="black">false</font>> color="black"]
  node17880 -> node17881 [ color="black"]
  node17868 -> node17869 [label=<<font color="black">true</font>> color="black"]
  node17868 -> node17876 [label=<<font color="black">false</font>> color="black"]
  node17876 -> node17877 [label=<<font color="black">true</font>> color="black"]
  node17876 -> node17878 [label=<<font color="black">false</font>> color="black"]
  node17877 -> node17881 [ color="black"]
  node17879 -> node17881 [ color="black"]
  node17866 -> node17867 [ color="black"]
  node17878 -> node17879 [label=<<font color="black">true</font>> color="black"]
  node17878 -> node17880 [label=<<font color="black">false</font>> color="black"]
  node17871 -> node17872 [ color="black"]
  node17867 -> node17868 [ color="black"]
  node17869 -> node17870 [ color="black"]
  node17875 -> node17868 [ color="black"]
  node17872 -> node17873 [label=<<font color="black">true</font>> color="black"]
  node17872 -> node17874 [label=<<font color="black">false</font>> color="black"]
  node17865 -> node17866 [ color="black"]
  node17873 -> node17875 [ color="black"]
  node17881 -> node17862 [ color="black"]
  node17874 -> node17875 [ color="black"]
  node17864 -> node17865 [ color="black"]
}
