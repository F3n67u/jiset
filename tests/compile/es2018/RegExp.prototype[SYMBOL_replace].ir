{
  app string = (GetArgument argumentsList 0i)
  app replaceValue = (GetArgument argumentsList 1i)
  [0] let rx = this
  [1] app __x0__ = (Type rx)
  [1] if (! (= __x0__ Object)) {
    app __x1__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_TypeError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
    return __x1__
  } else [54] {}
  [2] app __x2__ = (ToString string)
  [2] if (is-completion __x2__) if (= __x2__.Type CONST_normal) __x2__ = __x2__.Value else return __x2__ else [54] {}
  [2] let S = __x2__
  [3] let lengthS = S.length
  [4] app __x3__ = (IsCallable replaceValue)
  [4] let functionalReplace = __x3__
  [5] if (= functionalReplace false) {
    [6] app __x4__ = (ToString replaceValue)
    [6] if (is-completion __x4__) if (= __x4__.Type CONST_normal) __x4__ = __x4__.Value else return __x4__ else [54] {}
    [6] let replaceValue = __x4__
  } else [54] {}
  [7] app __x5__ = (Get rx "global")
  [7] if (is-completion __x5__) if (= __x5__.Type CONST_normal) __x5__ = __x5__.Value else return __x5__ else [54] {}
  [7] app __x6__ = (ToBoolean __x5__)
  [7] let global = __x6__
  [8] if (= global true) {
    [9] app __x7__ = (Get rx "unicode")
    [9] if (is-completion __x7__) if (= __x7__.Type CONST_normal) __x7__ = __x7__.Value else return __x7__ else [54] {}
    [9] app __x8__ = (ToBoolean __x7__)
    [9] let fullUnicode = __x8__
    [10] app __x9__ = (Set rx "lastIndex" 0i true)
    [10] if (is-completion __x9__) if (= __x9__.Type CONST_normal) __x9__ = __x9__.Value else return __x9__ else [54] {}
    [10] __x9__
  } else [54] {}
  [11] let results = (new [])
  [12] let done = false
  [13] while (= done false) {
    [14] app __x10__ = (RegExpExec rx S)
    [14] if (is-completion __x10__) if (= __x10__.Type CONST_normal) __x10__ = __x10__.Value else return __x10__ else [54] {}
    [14] let result = __x10__
    [16] if (= result null) done = true else {
      [17] append result -> results
      [19] if (= global false) done = true else {
        [20] app __x11__ = (Get result "0")
        [20] if (is-completion __x11__) if (= __x11__.Type CONST_normal) __x11__ = __x11__.Value else return __x11__ else [54] {}
        [20] app __x12__ = (ToString __x11__)
        [20] if (is-completion __x12__) if (= __x12__.Type CONST_normal) __x12__ = __x12__.Value else return __x12__ else [54] {}
        [20] let matchStr = __x12__
        [21] if (= matchStr "") {
          [22] app __x13__ = (Get rx "lastIndex")
          [22] if (is-completion __x13__) if (= __x13__.Type CONST_normal) __x13__ = __x13__.Value else return __x13__ else [54] {}
          [22] app __x14__ = (ToLength __x13__)
          [22] if (is-completion __x14__) if (= __x14__.Type CONST_normal) __x14__ = __x14__.Value else return __x14__ else [54] {}
          [22] let thisIndex = __x14__
          [23] app __x15__ = (AdvanceStringIndex S thisIndex fullUnicode)
          [23] let nextIndex = __x15__
          [24] app __x16__ = (Set rx "lastIndex" nextIndex true)
          [24] if (is-completion __x16__) if (= __x16__.Type CONST_normal) __x16__ = __x16__.Value else return __x16__ else [54] {}
          [24] __x16__
        } else [54] {}
      }
    }
  }
  [25] let accumulatedResult = ""
  [26] let nextSourcePosition = 0i
  [27] let __x17__ = results
  [27] let __x18__ = 0i
  [27] while (< __x18__ __x17__.length) {
    let result = __x17__[__x18__]
    [28] app __x19__ = (Get result "length")
    [28] if (is-completion __x19__) if (= __x19__.Type CONST_normal) __x19__ = __x19__.Value else return __x19__ else [54] {}
    [28] app __x20__ = (ToLength __x19__)
    [28] if (is-completion __x20__) if (= __x20__.Type CONST_normal) __x20__ = __x20__.Value else return __x20__ else [54] {}
    [28] let nCaptures = __x20__
    [29] app __x21__ = (max (- nCaptures 1i) 0i)
    [29] let nCaptures = __x21__
    [30] app __x22__ = (Get result "0")
    [30] if (is-completion __x22__) if (= __x22__.Type CONST_normal) __x22__ = __x22__.Value else return __x22__ else [54] {}
    [30] app __x23__ = (ToString __x22__)
    [30] if (is-completion __x23__) if (= __x23__.Type CONST_normal) __x23__ = __x23__.Value else return __x23__ else [54] {}
    [30] let matched = __x23__
    [31] let matchLength = matched.length
    [32] app __x24__ = (Get result "index")
    [32] if (is-completion __x24__) if (= __x24__.Type CONST_normal) __x24__ = __x24__.Value else return __x24__ else [54] {}
    [32] app __x25__ = (ToInteger __x24__)
    [32] if (is-completion __x25__) if (= __x25__.Type CONST_normal) __x25__ = __x25__.Value else return __x25__ else [54] {}
    [32] let position = __x25__
    [33] app __x26__ = (min position lengthS)
    [33] app __x27__ = (max __x26__ 0i)
    [33] let position = __x27__
    [34] let n = 1i
    [35] let captures = (new [])
    [36] while (! (< nCaptures n)) {
      [37] app __x28__ = (ToString n)
      [37] if (is-completion __x28__) if (= __x28__.Type CONST_normal) __x28__ = __x28__.Value else return __x28__ else [54] {}
      [37] app __x29__ = (Get result __x28__)
      [37] if (is-completion __x29__) if (= __x29__.Type CONST_normal) __x29__ = __x29__.Value else return __x29__ else [54] {}
      [37] let capN = __x29__
      [38] if (! (= capN undefined)) {
        [39] app __x30__ = (ToString capN)
        [39] if (is-completion __x30__) if (= __x30__.Type CONST_normal) __x30__ = __x30__.Value else return __x30__ else [54] {}
        [39] let capN = __x30__
      } else [54] {}
      [40] append capN -> captures
      [41] let n = (+ n 1i)
    }
    [42] app __x31__ = (Get result "groups")
    [42] if (is-completion __x31__) if (= __x31__.Type CONST_normal) __x31__ = __x31__.Value else return __x31__ else [54] {}
    [42] let namedCaptures = __x31__
    [51] if (= functionalReplace true) {
      [44] let replacerArgs = (new [matched])
      [45] let __x32__ = captures
      [45] let __x33__ = 0i
      [45] while (< __x33__ __x32__.length) {
        let __x34__ = __x32__[__x33__]
        append __x34__ -> replacerArgs
        __x33__ = (+ __x33__ 1i)
      }
      [46] append position -> replacerArgs
      [46] append S -> replacerArgs
      [47] if (! (= namedCaptures undefined)) append namedCaptures -> replacerArgs else [54] {}
      [49] app __x35__ = (Call replaceValue undefined replacerArgs)
      [49] if (is-completion __x35__) if (= __x35__.Type CONST_normal) __x35__ = __x35__.Value else return __x35__ else [54] {}
      [49] let replValue = __x35__
      [50] app __x36__ = (ToString replValue)
      [50] if (is-completion __x36__) if (= __x36__.Type CONST_normal) __x36__ = __x36__.Value else return __x36__ else [54] {}
      [50] let replacement = __x36__
    } else {
      [52] app __x37__ = (GetSubstitution matched S position captures namedCaptures replaceValue)
      [52] let replacement = __x37__
    }
    [53] if (! (< position nextSourcePosition)) {
      [55] ??? "Let id:{accumulatedResult} be the string - concatenation of the current value of id:{accumulatedResult} , the substring of id:{S} consisting of the code units from id:{nextSourcePosition} ( inclusive ) up to id:{position} ( exclusive ) , and id:{replacement} ."
      [56] let nextSourcePosition = (+ position matchLength)
    } else [54] {}
    __x18__ = (+ __x18__ 1i)
  }
  [57] if (! (< nextSourcePosition lengthS)) {
    app __x38__ = (WrapCompletion accumulatedResult)
    return __x38__
  } else [54] {}
  [58] ??? "Return the string - concatenation of id:{accumulatedResult} and the substring of id:{S} consisting of the code units from id:{nextSourcePosition} ( inclusive ) up through the final code unit of id:{S} ( inclusive ) ."
}