{
  [2] let constructorName = O.TypedArrayName
  [3] ??? "Let id:{elementSize} be the Element Size value specified in link:{} for id:{constructorName} ."
  [4] app __x0__ = (ToIndex byteOffset)
  [4] if (is-completion __x0__) if (= __x0__.Type CONST_normal) __x0__ = __x0__.Value else return __x0__ else [1] {}
  [4] let offset = __x0__
  [5] if (! (== (%% offset elementSize) 0i)) {
    app __x1__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_RangeError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
    return __x1__
  } else [1] {}
  [6] if (! (= length undefined)) {
    [7] app __x2__ = (ToIndex length)
    [7] if (is-completion __x2__) if (= __x2__.Type CONST_normal) __x2__ = __x2__.Value else return __x2__ else [1] {}
    [7] let newLength = __x2__
  } else [1] {}
  [8] app __x3__ = (IsDetachedBuffer buffer)
  [8] if (= __x3__ true) {
    app __x4__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_TypeError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
    return __x4__
  } else [1] {}
  [9] let bufferByteLength = buffer.ArrayBufferByteLength
  [14] if (= length undefined) {
    [11] if (! (== (%% bufferByteLength elementSize) 0i)) {
      app __x5__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_RangeError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
      return __x5__
    } else [1] {}
    [12] let newByteLength = (- bufferByteLength offset)
    [13] if (< newByteLength 0i) {
      app __x6__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_RangeError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
      return __x6__
    } else [1] {}
  } else {
    [15] let newByteLength = (* newLength elementSize)
    [16] if (< bufferByteLength (+ offset newByteLength)) {
      app __x7__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_RangeError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
      return __x7__
    } else [1] {}
  }
  [17] O.ViewedArrayBuffer = buffer
  [18] O.ByteLength = newByteLength
  [19] O.ByteOffset = offset
  [20] O.ArrayLength = (/ newByteLength elementSize)
}