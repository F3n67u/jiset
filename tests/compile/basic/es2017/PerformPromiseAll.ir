{
  assert (is-instance-of resultCapability PromiseCapabilityRecord)
  let values = (new [])
  let remainingElementsCount = (new Record("Value" -> 1i))
  let index = 0i
  while true {
    app __x0__ = (IteratorStep iteratorRecord.Iterator)
    let next = __x0__
    app __x1__ = (IsAbruptCompletion next)
    if __x1__ iteratorRecord.Done = true else {}
    [? next]
    if (= next false) {
      iteratorRecord.Done = true
      remainingElementsCount.Value = (- remainingElementsCount.Value 1i)
      if (= remainingElementsCount.Value 0i) {
        app __x2__ = (CreateArrayFromList values)
        let valuesArray = __x2__
        app __x3__ = (Call resultCapability.Resolve undefined (new [valuesArray]))
        [? __x3__]
      } else {}
      return resultCapability.Promise
    } else {}
    app __x4__ = (IteratorValue next)
    let nextValue = __x4__
    app __x5__ = (IsAbruptCompletion nextValue)
    if __x5__ iteratorRecord.Done = true else {}
    [? nextValue]
    append undefined -> values
    app __x6__ = (Invoke constructor "resolve" (new [nextValue]))
    let nextPromise = [? __x6__]
    let resolveElement = (new BuiltinFunctionObject("SubMap" -> (new SubMap())))
    resolveElement.AlreadyCalled = (new Record("Value" -> false))
    resolveElement.Index = index
    resolveElement.Values = values
    resolveElement.Capability = resultCapability
    resolveElement.RemainingElements = remainingElementsCount
    remainingElementsCount.Value = (+ remainingElementsCount.Value 1i)
    app __x7__ = (Invoke nextPromise "then" (new [resolveElement, resultCapability.Reject]))
    [? __x7__]
    index = (+ index 1i)
  }
}