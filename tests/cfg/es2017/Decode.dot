digraph {
  node10871 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">45:R = (+ R S)</td></tr>
      <tr><td align="left">46:k = (+ k 1i)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10858 [shape=cds, label=<<font color="black">app string = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node10866 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let S = C</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10862 [shape=diamond, label=<<font color="black">(= k strLen)</font>> color="black" fillcolor="white" style=filled]
  node10857 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node10867 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">9:let start = k</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10856 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node10861 [shape=diamond, label=<<font color="black">true</font>> color="black" fillcolor="white" style=filled]
  node10860 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let strLen = string.length</td></tr>
      <tr><td align="left">1:let R = &quot;&quot;</td></tr>
      <tr><td align="left">2:let k = 0i</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10870 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">11:??? &quot;If the code units at index ( id:{k} + 1 ) and ( id:{k} + 2 ) within id:{string} do not represent hexadecimal digits , throw a value:{URIError} exception .&quot;</td></tr>
      <tr><td align="left">12:??? &quot;Let id:{B} be the 8 - bit value represented by the two hexadecimal digits at index ( id:{k} + 1 ) and ( id:{k} + 2 ) .&quot;</td></tr>
      <tr><td align="left">13:k = (+ k 2i)</td></tr>
      <tr><td align="left">14:??? &quot;If the most significant bit in id:{B} is 0 , then in:{} out:{}&quot;</td></tr>
      <tr><td align="left">20:??? &quot;Else the most significant bit in id:{B} is 1 , in:{} out:{}&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10868 [shape=diamond, label=<<font color="black">(! (&lt; (+ k 2i) strLen))</font>> color="black" fillcolor="white" style=filled]
  node10869 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw URIError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10864 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">5:let C = string[k]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10859 [shape=cds, label=<<font color="black">app reservedSet = (GetArgument argumentsList 1i)</font>> color="black" fillcolor="white" style=filled]
  node10865 [shape=diamond, label=<<font color="black">(! (= C INTRINSIC_))</font>> color="black" fillcolor="white" style=filled]
  node10863 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return R</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10856 -> node10858 [ color="black"]
  node10868 -> node10869 [label=<<font color="black">true</font>> color="black"]
  node10868 -> node10870 [label=<<font color="black">false</font>> color="black"]
  node10869 -> node10870 [ color="black"]
  node10860 -> node10861 [ color="black"]
  node10871 -> node10861 [ color="black"]
  node10859 -> node10860 [ color="black"]
  node10863 -> node10864 [ color="black"]
  node10870 -> node10871 [ color="black"]
  node10866 -> node10871 [ color="black"]
  node10858 -> node10859 [ color="black"]
  node10861 -> node10862 [label=<<font color="black">true</font>> color="black"]
  node10861 -> node10857 [label=<<font color="black">false</font>> color="black"]
  node10862 -> node10863 [label=<<font color="black">true</font>> color="black"]
  node10862 -> node10864 [label=<<font color="black">false</font>> color="black"]
  node10865 -> node10866 [label=<<font color="black">true</font>> color="black"]
  node10865 -> node10867 [label=<<font color="black">false</font>> color="black"]
  node10864 -> node10865 [ color="black"]
  node10867 -> node10868 [ color="black"]
}
