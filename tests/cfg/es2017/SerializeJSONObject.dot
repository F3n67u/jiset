digraph {
  node16236 [shape=diamond, label=<<font color="black">(! (= strP undefined))</font>> color="black" fillcolor="white" style=filled]
  node16240 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">member = (+ member &quot; &quot;)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16223 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node16244 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let final = &quot;{}&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16227 [shape=diamond, label=<<font color="black">(! (= PropertyList undefined))</font>> color="black" fillcolor="white" style=filled]
  node16247 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">25:let separator = (+ (+ &quot;,&quot; &quot;\n&quot;) indent)</td></tr>
      <tr><td align="left">26:??? &quot;Let id:{properties} be a String formed by concatenating all the element Strings of id:{partial} with each adjacent pair of Strings separated with id:{separator} . The id:{separator} String is not inserted either before the first String or after the last String .&quot;</td></tr>
      <tr><td align="left">27:let final = (+ (+ (+ (+ (+ (+ &quot;{&quot; &quot;\n&quot;) indent) properties) &quot;\n&quot;) stepback) &quot;}&quot;)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16237 [shape=cds, label=<<font color="black">12:app __x4__ = (QuoteJSONString P)</font>> color="black" fillcolor="white" style=filled]
  node16233 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let P = __x1__[__x2__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16246 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">22:??? &quot;Let id:{properties} be a String formed by concatenating all the element Strings of id:{partial} with each adjacent pair of Strings separated with code unit 0x002C ( COMMA ) . A comma is not inserted either before the first String or after the last String .&quot;</td></tr>
      <tr><td align="left">23:let final = (+ (+ &quot;{&quot; properties) &quot;}&quot;)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16241 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">16:member = (+ member strP)</td></tr>
      <tr><td align="left">17:append member -&gt; partial</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16238 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">12:let member = __x4__</td></tr>
      <tr><td align="left">13:member = (+ member &quot;:&quot;)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16234 [shape=cds, label=<<font color="black">10:app __x3__ = (SerializeJSONProperty P value)</font>> color="black" fillcolor="white" style=filled]
  node16230 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">7:let K = [? __x0__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16245 [shape=diamond, label=<<font color="black">(= gap &quot;&quot;)</font>> color="black" fillcolor="white" style=filled]
  node16225 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16235 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">10:let strP = [? __x3__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16239 [shape=diamond, label=<<font color="black">(! (= gap &quot;&quot;))</font>> color="black" fillcolor="white" style=filled]
  node16243 [shape=diamond, label=<<font color="black">(= partial.length 0i)</font>> color="black" fillcolor="white" style=filled]
  node16248 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">28:(pop stack (- stack.length 1i))</td></tr>
      <tr><td align="left">29:indent = stepback</td></tr>
      <tr><td align="left">30:return final</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16228 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let K = PropertyList</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16229 [shape=cds, label=<<font color="black">7:app __x0__ = (EnumerableOwnProperties value &quot;key&quot;)</font>> color="black" fillcolor="white" style=filled]
  node16232 [shape=diamond, label=<<font color="black">(&lt; __x2__ __x1__.length)</font>> color="black" fillcolor="white" style=filled]
  node16242 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">__x2__ = (+ __x2__ 1i)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16226 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">1:append value -&gt; stack</td></tr>
      <tr><td align="left">2:let stepback = indent</td></tr>
      <tr><td align="left">3:indent = (+ indent gap)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16231 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">8:let partial = (new [])</td></tr>
      <tr><td align="left">9:let __x1__ = K</td></tr>
      <tr><td align="left">9:let __x2__ = 0i</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16224 [shape=diamond, label=<<font color="black">(contains stack value)</font>> color="black" fillcolor="white" style=filled]
  node16222 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node16228 -> node16231 [ color="black"]
  node16229 -> node16230 [ color="black"]
  node16226 -> node16227 [ color="black"]
  node16232 -> node16233 [label=<<font color="black">true</font>> color="black"]
  node16232 -> node16243 [label=<<font color="black">false</font>> color="black"]
  node16243 -> node16244 [label=<<font color="black">true</font>> color="black"]
  node16243 -> node16245 [label=<<font color="black">false</font>> color="black"]
  node16222 -> node16224 [ color="black"]
  node16244 -> node16248 [ color="black"]
  node16234 -> node16235 [ color="black"]
  node16241 -> node16242 [ color="black"]
  node16242 -> node16232 [ color="black"]
  node16246 -> node16248 [ color="black"]
  node16225 -> node16226 [ color="black"]
  node16237 -> node16238 [ color="black"]
  node16236 -> node16237 [label=<<font color="black">true</font>> color="black"]
  node16236 -> node16242 [label=<<font color="black">false</font>> color="black"]
  node16248 -> node16223 [ color="black"]
  node16227 -> node16228 [label=<<font color="black">true</font>> color="black"]
  node16227 -> node16229 [label=<<font color="black">false</font>> color="black"]
  node16239 -> node16240 [label=<<font color="black">true</font>> color="black"]
  node16239 -> node16241 [label=<<font color="black">false</font>> color="black"]
  node16238 -> node16239 [ color="black"]
  node16233 -> node16234 [ color="black"]
  node16247 -> node16248 [ color="black"]
  node16245 -> node16246 [label=<<font color="black">true</font>> color="black"]
  node16245 -> node16247 [label=<<font color="black">false</font>> color="black"]
  node16230 -> node16231 [ color="black"]
  node16235 -> node16236 [ color="black"]
  node16224 -> node16225 [label=<<font color="black">true</font>> color="black"]
  node16224 -> node16226 [label=<<font color="black">false</font>> color="black"]
  node16231 -> node16232 [ color="black"]
  node16240 -> node16241 [ color="black"]
}
