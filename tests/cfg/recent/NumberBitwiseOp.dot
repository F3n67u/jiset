digraph {
  node0 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node5 [shape=cds, label=<<font color="black">2:app __x1__ = (ToInt32 y)</font>> color="black" fillcolor="white" style=filled]
  node10 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let result = (^ lbits rbits)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node1 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node6 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">2:let rnum = [! __x1__]</td></tr>
      <tr><td align="left">3:??? &quot;Let id:{lbits} be the 32 - bit two ' s complement bit string representing ℝ ( id:{lnum} ) .&quot;</td></tr>
      <tr><td align="left">4:??? &quot;Let id:{rbits} be the 32 - bit two ' s complement bit string representing ℝ ( id:{rnum} ) .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node9 [shape=diamond, label=<<font color="black">(= op &quot;^&quot;)</font>> color="black" fillcolor="white" style=filled]
  node2 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:assert (|| (|| (= op &quot;&amp;&quot;) (= op &quot;^&quot;)) (= op &quot;|&quot;))</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node7 [shape=diamond, label=<<font color="black">(= op &quot;&amp;&quot;)</font>> color="black" fillcolor="white" style=filled]
  node3 [shape=cds, label=<<font color="black">1:app __x0__ = (ToInt32 x)</font>> color="black" fillcolor="white" style=filled]
  node11 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">7:??? &quot;Else , id:{op} is code:{|} . Let id:{result} be the result of applying the bitwise inclusive OR operation to id:{lbits} and id:{rbits} .&quot;</td></tr>
      <tr><td align="left">8:??? &quot;Return the Number value for the integer represented by the 32 - bit two ' s complement bit string id:{result} .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node8 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let result = (&amp; lbits rbits)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node4 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">1:let lnum = [! __x0__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node2 -> node3 [ color="black"]
  node9 -> node10 [label=<<font color="black">true</font>> color="black"]
  node9 -> node11 [label=<<font color="black">false</font>> color="black"]
  node7 -> node8 [label=<<font color="black">true</font>> color="black"]
  node7 -> node9 [label=<<font color="black">false</font>> color="black"]
  node0 -> node2 [ color="black"]
  node6 -> node7 [ color="black"]
  node11 -> node1 [ color="black"]
  node10 -> node11 [ color="black"]
  node4 -> node5 [ color="black"]
  node8 -> node11 [ color="black"]
  node5 -> node6 [ color="black"]
  node3 -> node4 [ color="black"]
}
