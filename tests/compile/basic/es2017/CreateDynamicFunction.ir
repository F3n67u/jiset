{
  let callerContext = GLOBAL_executionStack[(- GLOBAL_executionStack.length 2i)]
  let callerRealm = callerContext.Realm
  let calleeRealm = REALM
  app __x0__ = (HostEnsureCanCompileStrings callerRealm calleeRealm)
  [? __x0__]
  if (= newTarget undefined) newTarget = constructor else {}
  if (= kind "normal") {
    ??? "Let id:{goal} be the grammar symbol | FunctionBody [ ~ Yield , ~ Await ] | ."
    ??? "Let id:{parameterGoal} be the grammar symbol | FormalParameters [ ~ Yield , ~ Await ] | ."
    let fallbackProto = INTRINSIC_FunctionPrototype
  } else if (= kind "generator") {
    let goal = "GeneratorBody"
    ??? "Let id:{parameterGoal} be the grammar symbol | FormalParameters [ + Yield , ~ Await ] | ."
    let fallbackProto = INTRINSIC_Generator
  } else {
    assert (= kind "async")
    let goal = "AsyncFunctionBody"
    ??? "Let id:{parameterGoal} be the grammar symbol | FormalParameters [ ~ Yield , + Await ] | ."
    let fallbackProto = INTRINSIC_AsyncFunctionPrototype
  }
  let argCount = args.length
  let P = ""
  if (== argCount 0i) let bodyText = "" else if (== argCount 1i) let bodyText = args[0i] else {
    let firstArg = args[0i]
    app __x1__ = (ToString firstArg)
    P = [? __x1__]
    let k = 1i
    while (< k (- argCount 1i)) {
      let nextArg = args[k]
      app __x2__ = (ToString nextArg)
      let nextArgString = [? __x2__]
      P = (+ (+ P ",") nextArgString)
      k = (+ k 1i)
    }
    let bodyText = args[k]
  }
  app __x3__ = (ToString bodyText)
  bodyText = [? __x3__]
  ??? "Let id:{parameters} be the result of parsing id:{P} , interpreted as UTF - 16 encoded Unicode text as described in link:{unhandled: sec-ecmascript-language-types-string-type} , using id:{parameterGoal} as the goal symbol . Throw a value:{SyntaxError} exception if the parse fails ."
  ??? "Let id:{body} be the result of parsing id:{bodyText} , interpreted as UTF - 16 encoded Unicode text as described in link:{unhandled: sec-ecmascript-language-types-string-type} , using id:{goal} as the goal symbol . Throw a value:{SyntaxError} exception if the parse fails ."
  access __x4__ = (body "ContainsUseStrict")
  let strict = __x4__
  ??? "If any static semantics errors are detected for id:{parameters} or id:{body} , throw a value:{SyntaxError} or a value:{ReferenceError} exception , depending on the type of the error . If id:{strict} is value:{true} , the Early Error rules for grammar:{UniqueFormalParameters0, [FormalParameters]} are applied . Parsing and early error detection may be interweaved in an implementation - dependent manner ."
  let __x5__ = true
  __x5__ = (= strict true)
  if __x5__ {
    access __x6__ = (parameters "IsSimpleParameterList")
    __x5__ = (= __x6__ false)
  } else {}
  if __x5__ throw SyntaxError else {}
  access __x7__ = (parameters "BoundNames")
  access __x8__ = (body "LexicallyDeclaredNames")
  let __x9__ = __x7__
  let __x10__ = __x8__
  let __x11__ = 0i
  let __x12__ = 0i
  let __x13__ = false
  while (< __x11__ __x9__.length) {
    __x12__ = 0i
    while (< __x12__ __x10__.length) if (= __x9__[__x11__] __x10__[__x12__]) __x13__ = true else {}
  }
  if __x13__ throw SyntaxError else {}
  access __x14__ = (__x14__ "Contains" "SuperCall")
  if (= __x14__ true) throw SyntaxError else {}
  access __x15__ = (__x15__ "Contains" "SuperCall")
  if (= __x15__ true) throw SyntaxError else {}
  access __x16__ = (__x16__ "Contains" "SuperProperty")
  if (= __x16__ true) throw SyntaxError else {}
  access __x17__ = (__x17__ "Contains" "SuperProperty")
  if (= __x17__ true) throw SyntaxError else {}
  if (= kind "generator") {
    access __x18__ = (__x18__ "Contains" "YieldExpression")
    if (= __x18__ true) throw SyntaxError else {}
  } else {}
  if (= kind "async") {
    access __x19__ = (__x19__ "Contains" "AwaitExpression")
    if (= __x19__ true) throw SyntaxError else {}
  } else {}
  if (= strict true) {
    access __x20__ = (parameters "BoundNames")
    app __x21__ = (IsDuplicate __x20__)
    if __x21__ throw SyntaxError else {}
  } else {}
  app __x22__ = (GetPrototypeFromConstructor newTarget fallbackProto)
  let proto = [? __x22__]
  app __x23__ = (FunctionAllocate proto strict kind)
  let F = __x23__
  let realmF = F.Realm
  let scope = realmF.GlobalEnv
  app __x24__ = (FunctionInitialize F CONST_Normal parameters body scope)
  __x24__
  if (= kind "generator") {
    app __x25__ = (ObjectCreate INTRINSIC_GeneratorPrototype)
    let prototype = __x25__
    app __x26__ = (DefinePropertyOrThrow F "prototype" (new PropertyDescriptor("Value" -> prototype, "Writable" -> true, "Enumerable" -> false, "Configurable" -> false)))
    __x26__
  } else if (= kind "normal") {
    app __x27__ = (MakeConstructor F)
    __x27__
  } else {}
  app __x28__ = (SetFunctionName F "anonymous")
  __x28__
  return F
}