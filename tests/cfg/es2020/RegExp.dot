digraph {
  node14662 [shape=cds, label=<<font color="black">5:app __x2__ = (SameValue newTarget patternConstructor)</font>> color="black" fillcolor="white" style=filled]
  node14665 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let newTarget = NewTarget</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14677 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">14:let F = [? __x5__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14669 [shape=diamond, label=<<font color="black">(= flags undefined)</font>> color="black" fillcolor="white" style=filled]
  node14661 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">4:let patternConstructor = [? __x1__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14666 [shape=cds, label=<<font color="black">16:app __x3__ = (Type pattern)</font>> color="black" fillcolor="white" style=filled]
  node14676 [shape=cds, label=<<font color="black">14:app __x5__ = (Get pattern &quot;flags&quot;)</font>> color="black" fillcolor="white" style=filled]
  node14657 [shape=diamond, label=<<font color="black">(= NewTarget undefined)</font>> color="black" fillcolor="white" style=filled]
  node14667 [shape=diamond, label=<<font color="black">(&amp;&amp; (= __x3__ Object) (! (= pattern.RegExpMatcher absent)))</font>> color="black" fillcolor="white" style=filled]
  node14682 [shape=cds, label=<<font color="black">20:app __x7__ = (RegExpInitialize O P F)</font>> color="black" fillcolor="white" style=filled]
  node14671 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let F = flags</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14668 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">8:let P = pattern.OriginalSource</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14663 [shape=diamond, label=<<font color="black">(= __x2__ true)</font>> color="black" fillcolor="white" style=filled]
  node14659 [shape=diamond, label=<<font color="black">(&amp;&amp; (= patternIsRegExp true) (= flags undefined))</font>> color="black" fillcolor="white" style=filled]
  node14674 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">12:let P = [? __x4__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14658 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">2:let newTarget = GLOBAL_context.Function</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14654 [shape=cds, label=<<font color="black">app flags = (GetArgument argumentsList 1i)</font>> color="black" fillcolor="white" style=filled]
  node14652 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node14680 [shape=cds, label=<<font color="black">19:app __x6__ = (RegExpAlloc newTarget)</font>> color="black" fillcolor="white" style=filled]
  node14681 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">19:let O = [? __x6__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14655 [shape=cds, label=<<font color="black">0:app __x0__ = (IsRegExp pattern)</font>> color="black" fillcolor="white" style=filled]
  node14670 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let F = pattern.OriginalFlags</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14679 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">17:let P = pattern</td></tr>
      <tr><td align="left">18:let F = flags</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14664 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return pattern</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14660 [shape=cds, label=<<font color="black">4:app __x1__ = (Get pattern &quot;constructor&quot;)</font>> color="black" fillcolor="white" style=filled]
  node14675 [shape=diamond, label=<<font color="black">(= flags undefined)</font>> color="black" fillcolor="white" style=filled]
  node14656 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let patternIsRegExp = [? __x0__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14678 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let F = flags</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14683 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">20:return [? __x7__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14673 [shape=cds, label=<<font color="black">12:app __x4__ = (Get pattern &quot;source&quot;)</font>> color="black" fillcolor="white" style=filled]
  node14653 [shape=cds, label=<<font color="black">app pattern = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node14651 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node14672 [shape=diamond, label=<<font color="black">(= patternIsRegExp true)</font>> color="black" fillcolor="white" style=filled]
  node14668 -> node14669 [ color="black"]
  node14666 -> node14667 [ color="black"]
  node14654 -> node14655 [ color="black"]
  node14673 -> node14674 [ color="black"]
  node14677 -> node14680 [ color="black"]
  node14676 -> node14677 [ color="black"]
  node14653 -> node14654 [ color="black"]
  node14658 -> node14659 [ color="black"]
  node14678 -> node14680 [ color="black"]
  node14672 -> node14673 [label=<<font color="black">true</font>> color="black"]
  node14672 -> node14679 [label=<<font color="black">false</font>> color="black"]
  node14659 -> node14660 [label=<<font color="black">true</font>> color="black"]
  node14659 -> node14666 [label=<<font color="black">false</font>> color="black"]
  node14655 -> node14656 [ color="black"]
  node14683 -> node14652 [ color="black"]
  node14651 -> node14653 [ color="black"]
  node14681 -> node14682 [ color="black"]
  node14679 -> node14680 [ color="black"]
  node14674 -> node14675 [ color="black"]
  node14671 -> node14680 [ color="black"]
  node14680 -> node14681 [ color="black"]
  node14682 -> node14683 [ color="black"]
  node14662 -> node14663 [ color="black"]
  node14661 -> node14662 [ color="black"]
  node14675 -> node14676 [label=<<font color="black">true</font>> color="black"]
  node14675 -> node14678 [label=<<font color="black">false</font>> color="black"]
  node14664 -> node14666 [ color="black"]
  node14656 -> node14657 [ color="black"]
  node14670 -> node14680 [ color="black"]
  node14663 -> node14664 [label=<<font color="black">true</font>> color="black"]
  node14663 -> node14666 [label=<<font color="black">false</font>> color="black"]
  node14669 -> node14670 [label=<<font color="black">true</font>> color="black"]
  node14669 -> node14671 [label=<<font color="black">false</font>> color="black"]
  node14665 -> node14666 [ color="black"]
  node14657 -> node14658 [label=<<font color="black">true</font>> color="black"]
  node14657 -> node14665 [label=<<font color="black">false</font>> color="black"]
  node14667 -> node14668 [label=<<font color="black">true</font>> color="black"]
  node14667 -> node14672 [label=<<font color="black">false</font>> color="black"]
  node14660 -> node14661 [ color="black"]
}
