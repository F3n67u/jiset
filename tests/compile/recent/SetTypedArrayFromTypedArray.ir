{
  [1] let targetBuffer = target.ViewedArrayBuffer
  [2] app __x0__ = (IsDetachedBuffer targetBuffer)
  [2] if (= __x0__ true) {
    app __x1__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_TypeError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
    return __x1__
  } else [30] {}
  [3] let targetLength = target.ArrayLength
  [4] let srcBuffer = source.ViewedArrayBuffer
  [5] app __x2__ = (IsDetachedBuffer srcBuffer)
  [5] if (= __x2__ true) {
    app __x3__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_TypeError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
    return __x3__
  } else [30] {}
  [6] let targetName = target.TypedArrayName
  [7] ??? "Let id:{targetType} be the Element Type value in link:{} for id:{targetName} ."
  [8] ??? "Let id:{targetElementSize} be the Element Size value specified in link:{} for id:{targetName} ."
  [9] let targetByteOffset = target.ByteOffset
  [10] let srcName = source.TypedArrayName
  [11] ??? "Let id:{srcType} be the Element Type value in link:{} for id:{srcName} ."
  [12] ??? "Let id:{srcElementSize} be the Element Size value specified in link:{} for id:{srcName} ."
  [13] let srcLength = source.ArrayLength
  [14] let srcByteOffset = source.ByteOffset
  [15] ??? "If id:{targetOffset} is + âˆž , throw a value:{RangeError} exception ."
  [16] if (< targetLength (+ srcLength targetOffset)) {
    app __x4__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_RangeError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
    return __x4__
  } else [30] {}
  [17] if (! (== target.ContentType source.ContentType)) {
    app __x5__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_TypeError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
    return __x5__
  } else [30] {}
  [20] app __x6__ = (IsSharedArrayBuffer srcBuffer)
  [20] app __x7__ = (IsSharedArrayBuffer targetBuffer)
  [20] if (&& (= __x6__ true) (= __x7__ true)) if (= srcBuffer.ArrayBufferData targetBuffer.ArrayBufferData) let same = true else let same = false else {
    app __x8__ = (SameValue srcBuffer targetBuffer)
    let same = __x8__
  }
  [26] if (= same true) {
    [22] let srcByteLength = source.ByteLength
    [23] app __x9__ = (CloneArrayBuffer srcBuffer srcByteOffset srcByteLength INTRINSIC_ArrayBuffer)
    [23] if (is-completion __x9__) if (= __x9__.Type CONST_normal) __x9__ = __x9__.Value else return __x9__ else [30] {}
    [23] srcBuffer = __x9__
    [25] let srcByteIndex = 0i
  } else let srcByteIndex = srcByteOffset
  [27] let targetByteIndex = (+ (* targetOffset targetElementSize) targetByteOffset)
  [28] let limit = (* (+ targetByteIndex targetElementSize) srcLength)
  [36] if (= srcType targetType) while (< targetByteIndex limit) {
    [32] app __x10__ = (GetValueFromBuffer srcBuffer srcByteIndex CONST_Uint8 true CONST_Unordered)
    [32] let value = __x10__
    [33] app __x11__ = (SetValueInBuffer targetBuffer targetByteIndex CONST_Uint8 value true CONST_Unordered)
    [33] __x11__
    [34] srcByteIndex = (+ srcByteIndex 1i)
    [35] targetByteIndex = (+ targetByteIndex 1i)
  } else while (< targetByteIndex limit) {
    [38] app __x12__ = (GetValueFromBuffer srcBuffer srcByteIndex srcType true CONST_Unordered)
    [38] let value = __x12__
    [39] app __x13__ = (SetValueInBuffer targetBuffer targetByteIndex targetType value true CONST_Unordered)
    [39] __x13__
    [40] srcByteIndex = (+ srcByteIndex srcElementSize)
    [41] targetByteIndex = (+ targetByteIndex targetElementSize)
  }
}