digraph {
  node18486 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node18485 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node18489 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw SyntaxError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18487 [shape=cds, label=<<font color="black">0:access __x0__ = (LeftHandSideExpression &quot;AssignmentTargetType&quot;)</font>> color="black" fillcolor="white" style=filled]
  node18490 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return undefined</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18488 [shape=diamond, label=<<font color="black">(! (= __x0__ CONST_simple))</font>> color="black" fillcolor="white" style=filled]
  node18491 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">1:??? &quot;It is a Syntax Error if the nt:{LeftHandSideExpression} is grammar:{CoverParenthesizedExpressionAndArrowParameterList0, [Expression]} and nt:{Expression} derives a phrase that would produce a Syntax Error according to these rules if that phrase were substituted for nt:{LeftHandSideExpression} . This rule is recursively applied .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18489 -> node18491 [ color="black"]
  node18487 -> node18488 [ color="black"]
  node18488 -> node18489 [label=<<font color="black">true</font>> color="black"]
  node18488 -> node18490 [label=<<font color="black">false</font>> color="black"]
  node18485 -> node18487 [ color="black"]
  node18490 -> node18491 [ color="black"]
  node18491 -> node18486 [ color="black"]
}
