{
  app __x0__ = (ValidateSharedIntegerTypedArray typedArray true)
  if (is-completion __x0__) if (= __x0__.Type CONST_normal) __x0__ = __x0__.Value else return __x0__ else {}
  let buffer = __x0__
  app __x1__ = (ValidateAtomicAccess typedArray index)
  if (is-completion __x1__) if (= __x1__.Type CONST_normal) __x1__ = __x1__.Value else return __x1__ else {}
  let i = __x1__
  app __x2__ = (ToInt32 value)
  if (is-completion __x2__) if (= __x2__.Type CONST_normal) __x2__ = __x2__.Value else return __x2__ else {}
  let v = __x2__
  app __x3__ = (ToNumber timeout)
  if (is-completion __x3__) if (= __x3__.Type CONST_normal) __x3__ = __x3__.Value else return __x3__ else {}
  let q = __x3__
  if (= q NaN) let t = Infinity else {
    app __x4__ = (max q 0i)
    let t = __x4__
  }
  app __x5__ = (AgentCanSuspend )
  let B = __x5__
  if (= B false) {
    app __x6__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_TypeError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
    return __x6__
  } else {}
  let block = buffer.ArrayBufferData
  let offset = typedArray.ByteOffset
  let indexedPosition = (+ (* i 4i) offset)
  app __x7__ = (GetWaiterList block indexedPosition)
  let WL = __x7__
  app __x8__ = (EnterCriticalSection WL)
  __x8__
  app __x9__ = (AtomicLoad typedArray i)
  if (is-completion __x9__) if (= __x9__.Type CONST_normal) __x9__ = __x9__.Value else return __x9__ else {}
  let w = __x9__
  if (! (= v w)) {
    app __x10__ = (LeaveCriticalSection WL)
    __x10__
    app __x11__ = (WrapCompletion "not-equal")
    return __x11__
  } else {}
  app __x12__ = (AgentSignifier )
  let W = __x12__
  app __x13__ = (AddWaiter WL W)
  __x13__
  app __x14__ = (Suspend WL W t)
  let awoken = __x14__
  if (= awoken true) {} else {
    app __x15__ = (RemoveWaiter WL W)
    __x15__
  }
  app __x16__ = (LeaveCriticalSection WL)
  __x16__
  if (= awoken true) {
    app __x17__ = (WrapCompletion "ok")
    return __x17__
  } else {}
  app __x18__ = (WrapCompletion "timed-out")
  return __x18__
}