{
  [1] let promise = F.Promise
  [2] let alreadyResolved = F.AlreadyResolved
  [3] if (= alreadyResolved.Value true) {
    app __x0__ = (WrapCompletion undefined)
    return __x0__
  } else [0] {}
  [4] alreadyResolved.Value = true
  [5] app __x1__ = (SameValue resolution promise)
  [5] if (= __x1__ true) {
    [6] let selfResolutionError = (new OrdinaryObject("Prototype" -> INTRINSIC_TypeError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap())))
    [7] app __x2__ = (RejectPromise promise selfResolutionError)
    [7] app __x3__ = (WrapCompletion __x2__)
    [7] return __x3__
  } else [0] {}
  [8] app __x4__ = (Type resolution)
  [8] if (! (= __x4__ Object)) {
    [9] app __x5__ = (FulfillPromise promise resolution)
    [9] app __x6__ = (WrapCompletion __x5__)
    [9] return __x6__
  } else [0] {}
  [10] app __x7__ = (Get resolution "then")
  [10] let then = __x7__
  [11] app __x8__ = (IsAbruptCompletion then)
  [11] if __x8__ {
    [12] app __x9__ = (RejectPromise promise then.Value)
    [12] app __x10__ = (WrapCompletion __x9__)
    [12] return __x10__
  } else [0] {}
  [13] let thenAction = then.Value
  [14] app __x11__ = (IsCallable thenAction)
  [14] if (= __x11__ false) {
    [15] app __x12__ = (FulfillPromise promise resolution)
    [15] app __x13__ = (WrapCompletion __x12__)
    [15] return __x13__
  } else [0] {}
  [16] app __x14__ = (EnqueueJob "PromiseJobs" PromiseResolveThenableJob (new [promise, resolution, thenAction]))
  [16] __x14__
  [17] app __x15__ = (WrapCompletion undefined)
  [17] return __x15__
}