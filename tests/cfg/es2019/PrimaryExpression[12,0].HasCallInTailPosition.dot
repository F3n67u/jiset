digraph {
  node10153 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node10157 [shape=cds, label=<<font color="black">1:access __x1__ = (expr &quot;HasCallInTailPosition&quot;)</font>> color="black" fillcolor="white" style=filled]
  node10154 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node10158 [shape=cds, label=<<font color="black">1:app __x2__ = (__x1__ call)</font>> color="black" fillcolor="white" style=filled]
  node10155 [shape=cds, label=<<font color="black">0:access __x0__ = (CoverParenthesizedExpressionAndArrowParameterList &quot;CoveredParenthesizedExpression&quot;)</font>> color="black" fillcolor="white" style=filled]
  node10159 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">1:return __x2__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10156 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let expr = __x0__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10153 -> node10155 [ color="black"]
  node10159 -> node10154 [ color="black"]
  node10155 -> node10156 [ color="black"]
  node10157 -> node10158 [ color="black"]
  node10156 -> node10157 [ color="black"]
  node10158 -> node10159 [ color="black"]
}
