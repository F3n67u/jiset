digraph {
  node3930 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:assert (|| (is-instance-of constructProduction NewExpression) (is-instance-of constructProduction MemberExpression))</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node3942 [shape=cds, label=<<font color="black">9:app __x4__ = (Construct constructor argList)</font>> color="black" fillcolor="white" style=filled]
  node3938 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">6:let argList = __x2__</td></tr>
      <tr><td align="left">7:[? argList]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node3934 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">3:let constructor = [? __x1__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node3931 [shape=cds, label=<<font color="black">2:access __x0__ = (constructProduction &quot;Evaluation&quot;)</font>> color="black" fillcolor="white" style=filled]
  node3941 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node3935 [shape=diamond, label=<<font color="black">(= arguments CONST_empty)</font>> color="black" fillcolor="white" style=filled]
  node3937 [shape=cds, label=<<font color="black">6:access __x2__ = (arguments &quot;ArgumentListEvaluation&quot;)</font>> color="black" fillcolor="white" style=filled]
  node3932 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">2:let ref = __x0__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node3936 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let argList = (new [])</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node3940 [shape=diamond, label=<<font color="black">(= __x3__ false)</font>> color="black" fillcolor="white" style=filled]
  node3943 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">9:return [? __x4__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node3939 [shape=cds, label=<<font color="black">8:app __x3__ = (IsConstructor constructor)</font>> color="black" fillcolor="white" style=filled]
  node3933 [shape=cds, label=<<font color="black">3:app __x1__ = (GetValue ref)</font>> color="black" fillcolor="white" style=filled]
  node3928 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node3929 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node3934 -> node3935 [ color="black"]
  node3941 -> node3942 [ color="black"]
  node3938 -> node3939 [ color="black"]
  node3943 -> node3929 [ color="black"]
  node3940 -> node3941 [label=<<font color="black">true</font>> color="black"]
  node3940 -> node3942 [label=<<font color="black">false</font>> color="black"]
  node3936 -> node3939 [ color="black"]
  node3939 -> node3940 [ color="black"]
  node3931 -> node3932 [ color="black"]
  node3937 -> node3938 [ color="black"]
  node3942 -> node3943 [ color="black"]
  node3933 -> node3934 [ color="black"]
  node3935 -> node3936 [label=<<font color="black">true</font>> color="black"]
  node3935 -> node3937 [label=<<font color="black">false</font>> color="black"]
  node3928 -> node3930 [ color="black"]
  node3932 -> node3933 [ color="black"]
  node3930 -> node3931 [ color="black"]
}
