digraph {
  node9998 [shape=cds, label=<<font color="black">3:app __x1__ = (OrdinaryFunctionCreate INTRINSIC_AsyncFunction_prototype sourceText parameters AsyncConciseBody CONST_lexicalDASHthis scope)</font>> color="black" fillcolor="white" style=filled]
  node9994 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node9997 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let scope = __x0__</td></tr>
      <tr><td align="left">1:let sourceText = (get-syntax AsyncArrowFunction)</td></tr>
      <tr><td align="left">2:let parameters = AsyncArrowBindingIdentifier</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node9996 [shape=cds, label=<<font color="black">0:access __x0__ = (GLOBAL_context &quot;LexicalEnvironment&quot;)</font>> color="black" fillcolor="white" style=filled]
  node10000 [shape=cds, label=<<font color="black">4:app __x2__ = (SetFunctionName closure name)</font>> color="black" fillcolor="white" style=filled]
  node10001 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">4:__x2__</td></tr>
      <tr><td align="left">5:return closure</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node9995 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node9999 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">3:let closure = [! __x1__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10001 -> node9995 [ color="black"]
  node9996 -> node9997 [ color="black"]
  node9994 -> node9996 [ color="black"]
  node10000 -> node10001 [ color="black"]
  node9998 -> node9999 [ color="black"]
  node9999 -> node10000 [ color="black"]
  node9997 -> node9998 [ color="black"]
}
