{
  [0] assert (is-instance-of literal RegularExpressionLiteral)
  [1] ??? "If FlagText of id:{literal} contains any code points other than code:{g} , code:{i} , code:{m} , code:{s} , code:{u} , or code:{y} , or if it contains the same code point more than once , return value:{false} ."
  [2] access __x0__ = (literal "BodyText")
  [2] let P = __x0__
  [3] access __x1__ = (literal "FlagText")
  [3] if (contains __x1__ ??? "u") ??? "Parse id:{P} using the grammars in link:{} . The goal symbol for the parse is | Pattern [ + U , + N ] | . If id:{P} did not conform to the grammar , if any elements of id:{P} were not matched by the parse , or if any Early Error conditions exist , return value:{false} . Otherwise , return value:{true} ." else [8] {}
  [5] app __x2__ = (UTF16Encode P)
  [5] let stringValue = __x2__
  [6] ??? "Let id:{pText} be the sequence of code points resulting from interpreting each of the 16 - bit elements of id:{stringValue} as a Unicode BMP code point . UTF - 16 decoding is not applied to the elements ."
  [7] ??? "Parse id:{pText} using the grammars in link:{} . The goal symbol for the parse is | Pattern [ ~ U , ~ N ] | . If the result of parsing contains a nt:{GroupName} , reparse with the goal symbol | Pattern [ ~ U , + N ] | . If id:{P} did not conform to the grammar , if any elements of id:{P} were not matched by the parse , or if any Early Error conditions exist , return value:{false} . Otherwise , return value:{true} ."
}