digraph {
  node12077 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw RangeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12069 [shape=cds, label=<<font color="black">app count = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node12067 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node12079 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw RangeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12075 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">2:let n = [? __x2__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12071 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let O = [? __x0__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12080 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">5:??? &quot;Let id:{T} be a String value that is made from id:{n} copies of id:{S} appended together . If id:{n} is 0 , id:{T} is the empty String .&quot;</td></tr>
      <tr><td align="left">6:return T</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12076 [shape=diamond, label=<<font color="black">(&lt; n 0i)</font>> color="black" fillcolor="white" style=filled]
  node12070 [shape=cds, label=<<font color="black">0:app __x0__ = (RequireObjectCoercible this)</font>> color="black" fillcolor="white" style=filled]
  node12078 [shape=diamond, label=<<font color="black">(= n Infinity)</font>> color="black" fillcolor="white" style=filled]
  node12068 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node12073 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">1:let S = [? __x1__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12074 [shape=cds, label=<<font color="black">2:app __x2__ = (ToInteger count)</font>> color="black" fillcolor="white" style=filled]
  node12072 [shape=cds, label=<<font color="black">1:app __x1__ = (ToString O)</font>> color="black" fillcolor="white" style=filled]
  node12076 -> node12077 [label=<<font color="black">true</font>> color="black"]
  node12076 -> node12078 [label=<<font color="black">false</font>> color="black"]
  node12077 -> node12078 [ color="black"]
  node12070 -> node12071 [ color="black"]
  node12079 -> node12080 [ color="black"]
  node12078 -> node12079 [label=<<font color="black">true</font>> color="black"]
  node12078 -> node12080 [label=<<font color="black">false</font>> color="black"]
  node12075 -> node12076 [ color="black"]
  node12080 -> node12068 [ color="black"]
  node12072 -> node12073 [ color="black"]
  node12069 -> node12070 [ color="black"]
  node12067 -> node12069 [ color="black"]
  node12073 -> node12074 [ color="black"]
  node12071 -> node12072 [ color="black"]
  node12074 -> node12075 [ color="black"]
}
