{
  assert (= (typeof O) Object)
  app __x0__ = (O.OwnPropertyKeys O)
  let ownKeys = [? __x0__]
  let properties = (new [])
  let __x1__ = ownKeys
  let __x2__ = 0i
  while (< __x2__ __x1__.length) {
    let key = __x1__[__x2__]
    if (= (typeof key) String) {
      app __x3__ = (O.GetOwnProperty O key)
      let desc = [? __x3__]
      if (&& (! (= desc undefined)) (= desc.Enumerable true)) if (= kind CONST_key) append key -> properties else {
        app __x4__ = (Get O key)
        let value = [? __x4__]
        if (= kind CONST_value) append value -> properties else {
          assert (= kind CONST_keyPLUSvalue)
          app __x5__ = (CreateArrayFromList (new [key, value]))
          let entry = [! __x5__]
          append entry -> properties
        }
      } else {}
    } else {}
    __x2__ = (+ __x2__ 1i)
  }
  return properties
}