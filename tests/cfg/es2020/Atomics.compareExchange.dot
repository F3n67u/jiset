digraph {
  node17779 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">4:let expected = [? __x2__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17783 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">7:let expected = [? __x4__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17787 [shape=cds, label=<<font color="black">11:app __x6__ = (NumericToRawBytes elementType expected isLittleEndian)</font>> color="black" fillcolor="white" style=filled]
  node17773 [shape=cds, label=<<font color="black">0:app __x0__ = (ValidateSharedIntegerTypedArray typedArray)</font>> color="black" fillcolor="white" style=filled]
  node17770 [shape=cds, label=<<font color="black">app index = (GetArgument argumentsList 1i)</font>> color="black" fillcolor="white" style=filled]
  node17780 [shape=cds, label=<<font color="black">5:app __x3__ = (ToBigInt replacementValue)</font>> color="black" fillcolor="white" style=filled]
  node17781 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">5:let replacement = [? __x3__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17768 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node17772 [shape=cds, label=<<font color="black">app replacementValue = (GetArgument argumentsList 3i)</font>> color="black" fillcolor="white" style=filled]
  node17775 [shape=cds, label=<<font color="black">1:app __x1__ = (ValidateAtomicAccess typedArray index)</font>> color="black" fillcolor="white" style=filled]
  node17778 [shape=cds, label=<<font color="black">4:app __x2__ = (ToBigInt expectedValue)</font>> color="black" fillcolor="white" style=filled]
  node17771 [shape=cds, label=<<font color="black">app expectedValue = (GetArgument argumentsList 2i)</font>> color="black" fillcolor="white" style=filled]
  node17774 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let buffer = [? __x0__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17788 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">11:let expectedBytes = __x6__</td></tr>
      <tr><td align="left">12:??? &quot;Let id:{elementSize} be the Element Size value specified in link:{unhandled: table-the-typedarray-constructors} for id:{arrayTypeName} .&quot;</td></tr>
      <tr><td align="left">13:let offset = typedArray.ByteOffset</td></tr>
      <tr><td align="left">14:let indexedPosition = (+ (* i elementSize) offset)</td></tr>
      <tr><td align="left">15:??? &quot;Let code:{compareExchange} denote a semantic function of two List of byte values arguments that returns the second argument if the first argument is element - wise equal to id:{expectedBytes} .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17767 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node17784 [shape=cds, label=<<font color="black">8:app __x5__ = (ToInteger replacementValue)</font>> color="black" fillcolor="white" style=filled]
  node17789 [shape=cds, label=<<font color="black">16:app __x7__ = (GetModifySetValueInBuffer buffer indexedPosition elementType replacement ??? &quot;compareExchange&quot;)</font>> color="black" fillcolor="white" style=filled]
  node17786 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">9:??? &quot;Let id:{elementType} be the Element Type value in link:{unhandled: table-the-typedarray-constructors} for id:{arrayTypeName} .&quot;</td></tr>
      <tr><td align="left">10:let isLittleEndian = GLOBAL_agent.LittleEndian</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17776 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">1:let i = [? __x1__]</td></tr>
      <tr><td align="left">2:let arrayTypeName = typedArray.TypedArrayName</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17769 [shape=cds, label=<<font color="black">app typedArray = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node17777 [shape=diamond, label=<<font color="black">(= typedArray.ContentType CONST_BigInt)</font>> color="black" fillcolor="white" style=filled]
  node17790 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">16:return __x7__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17785 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">8:let replacement = [? __x5__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17782 [shape=cds, label=<<font color="black">7:app __x4__ = (ToInteger expectedValue)</font>> color="black" fillcolor="white" style=filled]
  node17788 -> node17789 [ color="black"]
  node17767 -> node17769 [ color="black"]
  node17774 -> node17775 [ color="black"]
  node17790 -> node17768 [ color="black"]
  node17776 -> node17777 [ color="black"]
  node17772 -> node17773 [ color="black"]
  node17778 -> node17779 [ color="black"]
  node17786 -> node17787 [ color="black"]
  node17770 -> node17771 [ color="black"]
  node17775 -> node17776 [ color="black"]
  node17783 -> node17784 [ color="black"]
  node17789 -> node17790 [ color="black"]
  node17787 -> node17788 [ color="black"]
  node17779 -> node17780 [ color="black"]
  node17784 -> node17785 [ color="black"]
  node17782 -> node17783 [ color="black"]
  node17781 -> node17786 [ color="black"]
  node17769 -> node17770 [ color="black"]
  node17785 -> node17786 [ color="black"]
  node17771 -> node17772 [ color="black"]
  node17777 -> node17778 [label=<<font color="black">true</font>> color="black"]
  node17777 -> node17782 [label=<<font color="black">false</font>> color="black"]
  node17773 -> node17774 [ color="black"]
  node17780 -> node17781 [ color="black"]
}
