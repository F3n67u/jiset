digraph {
  node10103 [shape=diamond, label=<<font color="black">(&lt; __x1__ __x0__.length)</font>> color="black" fillcolor="white" style=filled]
  node10110 [shape=cds, label=<<font color="black">18:access __x4__ = (module.ECMAScriptCode &quot;Evaluation&quot;)</font>> color="black" fillcolor="white" style=filled]
  node10107 [shape=cds, label=<<font color="black">8:app __x3__ = (requiredModule.ModuleEvaluation requiredModule)</font>> color="black" fillcolor="white" style=filled]
  node10111 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">18:let result = __x4__</td></tr>
      <tr><td align="left">19:GLOBAL_context = null</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10101 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return undefined</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10100 [shape=diamond, label=<<font color="black">(= module.Evaluated true)</font>> color="black" fillcolor="white" style=filled]
  node10098 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node10108 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">8:[? __x3__]</td></tr>
      <tr><td align="left">__x1__ = (+ __x1__ 1i)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10112 [shape=diamond, label=<<font color="black">(= GLOBAL_executionStack[(- GLOBAL_executionStack.length 1i)] moduleCxt)</font>> color="black" fillcolor="white" style=filled]
  node10097 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node10114 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">20:GLOBAL_context = GLOBAL_executionStack[(- GLOBAL_executionStack.length 1i)]</td></tr>
      <tr><td align="left">21:return result</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10104 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let required = __x0__[__x1__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10109 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">9:let moduleCxt = (new ExecutionContext(&quot;SubMap&quot; -&gt; (new SubMap())))</td></tr>
      <tr><td align="left">10:moduleCxt.Function = null</td></tr>
      <tr><td align="left">11:moduleCxt.Realm = module.Realm</td></tr>
      <tr><td align="left">12:moduleCxt.ScriptOrModule = module</td></tr>
      <tr><td align="left">14:moduleCxt.VariableEnvironment = module.Environment</td></tr>
      <tr><td align="left">15:moduleCxt.LexicalEnvironment = module.Environment</td></tr>
      <tr><td align="left">16:GLOBAL_context = null</td></tr>
      <tr><td align="left">17:append moduleCxt -&gt; GLOBAL_executionStack</td></tr>
      <tr><td align="left">17:GLOBAL_context = GLOBAL_executionStack[(- GLOBAL_executionStack.length 1i)]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10105 [shape=cds, label=<<font color="black">6:app __x2__ = (HostResolveImportedModule module required)</font>> color="black" fillcolor="white" style=filled]
  node10106 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">6:let requiredModule = [! __x2__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10113 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">(pop GLOBAL_executionStack (- GLOBAL_executionStack.length 1i))</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10099 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let module = this</td></tr>
      <tr><td align="left">2:assert (! (= module.Realm undefined))</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10102 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">4:module.Evaluated = true</td></tr>
      <tr><td align="left">5:let __x0__ = module.RequestedModules</td></tr>
      <tr><td align="left">5:let __x1__ = 0i</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10109 -> node10110 [ color="black"]
  node10110 -> node10111 [ color="black"]
  node10103 -> node10104 [label=<<font color="black">true</font>> color="black"]
  node10103 -> node10109 [label=<<font color="black">false</font>> color="black"]
  node10113 -> node10114 [ color="black"]
  node10099 -> node10100 [ color="black"]
  node10097 -> node10099 [ color="black"]
  node10108 -> node10103 [ color="black"]
  node10112 -> node10113 [label=<<font color="black">true</font>> color="black"]
  node10112 -> node10114 [label=<<font color="black">false</font>> color="black"]
  node10104 -> node10105 [ color="black"]
  node10105 -> node10106 [ color="black"]
  node10111 -> node10112 [ color="black"]
  node10102 -> node10103 [ color="black"]
  node10100 -> node10101 [label=<<font color="black">true</font>> color="black"]
  node10100 -> node10102 [label=<<font color="black">false</font>> color="black"]
  node10106 -> node10107 [ color="black"]
  node10101 -> node10102 [ color="black"]
  node10107 -> node10108 [ color="black"]
  node10114 -> node10098 [ color="black"]
}
