{
  if (= waitable absent) waitable = false else {}
  app __x0__ = (RequireInternalSlot typedArray "TypedArrayName")
  [? __x0__]
  let typeName = typedArray.TypedArrayName
  ??? "Let id:{type} be the Element Type value in link:{unhandled: table-the-typedarray-constructors} for id:{typeName} ."
  if (= waitable true) if (! (|| (= typeName "Int32Array") (= typeName "BigInt64Array"))) throw INTRINSIC_TypeError else {} else {
    let __x1__ = true
    app __x2__ = (IsUnclampedIntegerElementType type)
    __x1__ = (= [! __x2__] false)
    if __x1__ {
      app __x3__ = (IsBigIntElementType type)
      __x1__ = (= [! __x3__] false)
    } else {}
    if __x1__ throw INTRINSIC_TypeError else {}
  }
  assert (! (= typedArray.ViewedArrayBuffer absent))
  let buffer = typedArray.ViewedArrayBuffer
  app __x4__ = (IsSharedArrayBuffer buffer)
  if (= __x4__ false) throw INTRINSIC_TypeError else {}
  return buffer
}