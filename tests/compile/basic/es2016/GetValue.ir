{
  [? V]
  app __x0__ = (Type V)
  if (! (= __x0__ Reference)) return V else {}
  app __x1__ = (GetBase V)
  let base = __x1__
  app __x2__ = (IsUnresolvableReference V)
  if (= __x2__ true) throw ReferenceError else {}
  app __x3__ = (IsPropertyReference V)
  if (= __x3__ true) {
    app __x4__ = (HasPrimitiveBase V)
    if (= __x4__ true) {
      app __x5__ = (ToObject base)
      let base = __x5__
    } else {}
    app __x6__ = (GetReferencedName V)
    app __x7__ = (GetThisValue V)
    app __x8__ = (base.Get base __x6__ __x7__)
    return [? __x8__]
  } else {
    app __x9__ = (GetReferencedName V)
    app __x10__ = (IsStrictReference V)
    app __x11__ = (base.GetBindingValue base __x9__ __x10__)
    return [? __x11__]
  }
}