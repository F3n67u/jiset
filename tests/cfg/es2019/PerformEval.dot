digraph {
  node11308 [shape=cds, label=<<font color="black">14:access __x5__ = (script &quot;ScriptBody&quot;)</font>> color="black" fillcolor="white" style=filled]
  node11335 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">(pop GLOBAL_executionStack (- GLOBAL_executionStack.length 1i))</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11304 [shape=cds, label=<<font color="black">13:access __x3__ = (script &quot;Contains&quot;)</font>> color="black" fillcolor="white" style=filled]
  node11306 [shape=diamond, label=<<font color="black">(= __x4__ false)</font>> color="black" fillcolor="white" style=filled]
  node11310 [shape=diamond, label=<<font color="black">(= strictCaller true)</font>> color="black" fillcolor="white" style=filled]
  node11316 [shape=cds, label=<<font color="black">20:app __x7__ = (NewDeclarativeEnvironment ctx.LexicalEnvironment)</font>> color="black" fillcolor="white" style=filled]
  node11294 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">2:let thisEnvRec = [! __x1__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11313 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let strictEval = __x6__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11318 [shape=cds, label=<<font color="black">23:app __x8__ = (NewDeclarativeEnvironment evalRealm.GlobalEnv)</font>> color="black" fillcolor="white" style=filled]
  node11303 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">12:??? &quot;Let id:{script} be the ECMAScript code that is the result of parsing id:{x} , interpreted as UTF - 16 encoded Unicode text as described in link:{unhandled: sec-ecmascript-language-types-string-type} , for the goal symbol nt:{Script} . If id:{inFunction} is value:{false} , additional early error rules from link:{unhandled: sec-performeval-rules-outside-functions} are applied . If id:{inMethod} is value:{false} , additional early error rules from link:{unhandled: sec-performeval-rules-outside-methods} are applied . If id:{inDerivedConstructor} is value:{false} , additional early error rules from link:{unhandled: sec-performeval-rules-outside-constructors} are applied . If the parse fails , throw a value:{SyntaxError} exception . If any early errors are detected , throw a value:{SyntaxError} or a value:{ReferenceError} exception , depending on the type of the error ( but see also clause link:{unhandled: sec-error-handling-and-language-extensions} ) . Parsing and early error detection may be interweaved in an implementation - dependent manner .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11288 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node11320 [shape=diamond, label=<<font color="black">(= strictEval true)</font>> color="black" fillcolor="white" style=filled]
  node11289 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node11299 [shape=diamond, label=<<font color="black">(= F.ConstructorKind &quot;derived&quot;)</font>> color="black" fillcolor="white" style=filled]
  node11331 [shape=cds, label=<<font color="black">38:app __x11__ = (NormalCompletion undefined)</font>> color="black" fillcolor="white" style=filled]
  node11321 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">varEnv = lexEnv</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11314 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">17:let ctx = GLOBAL_context</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11293 [shape=cds, label=<<font color="black">2:app __x1__ = (GetThisEnvironment )</font>> color="black" fillcolor="white" style=filled]
  node11312 [shape=cds, label=<<font color="black">access __x6__ = (script &quot;IsStrict&quot;)</font>> color="black" fillcolor="white" style=filled]
  node11325 [shape=cds, label=<<font color="black">34:app __x9__ = (EvalDeclarationInstantiation body varEnv lexEnv strictEval)</font>> color="black" fillcolor="white" style=filled]
  node11307 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return undefined</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11324 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">27:let evalCxt = (new ExecutionContext(&quot;SubMap&quot; -&gt; (new SubMap())))</td></tr>
      <tr><td align="left">28:evalCxt.Function = null</td></tr>
      <tr><td align="left">29:evalCxt.Realm = evalRealm</td></tr>
      <tr><td align="left">30:evalCxt.ScriptOrModule = ctx.ScriptOrModule</td></tr>
      <tr><td align="left">31:evalCxt.VariableEnvironment = varEnv</td></tr>
      <tr><td align="left">32:evalCxt.LexicalEnvironment = lexEnv</td></tr>
      <tr><td align="left">33:append evalCxt -&gt; GLOBAL_executionStack</td></tr>
      <tr><td align="left">33:GLOBAL_context = GLOBAL_executionStack[(- GLOBAL_executionStack.length 1i)]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11292 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return x</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11315 [shape=diamond, label=<<font color="black">(= direct true)</font>> color="black" fillcolor="white" style=filled]
  node11336 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">40:GLOBAL_context = GLOBAL_executionStack[(- GLOBAL_executionStack.length 1i)]</td></tr>
      <tr><td align="left">41:return result</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11300 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let inDerivedConstructor = true</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11328 [shape=cds, label=<<font color="black">36:access __x10__ = (body &quot;Evaluation&quot;)</font>> color="black" fillcolor="white" style=filled]
  node11296 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">4:let F = thisEnvRec.FunctionObject</td></tr>
      <tr><td align="left">5:let inFunction = true</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11311 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let strictEval = true</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11332 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">38:result = __x11__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11323 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">GLOBAL_context = null</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11333 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">39:GLOBAL_context = null</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11301 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let inDerivedConstructor = false</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11291 [shape=diamond, label=<<font color="black">(! (= __x0__ String))</font>> color="black" fillcolor="white" style=filled]
  node11329 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">36:result = __x10__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11327 [shape=diamond, label=<<font color="black">(= result.Type CONST_normal)</font>> color="black" fillcolor="white" style=filled]
  node11295 [shape=diamond, label=<<font color="black">(= (typeof thisEnvRec) &quot;FunctionEnvironmentRecord&quot;)</font>> color="black" fillcolor="white" style=filled]
  node11297 [shape=cds, label=<<font color="black">6:app __x2__ = (thisEnvRec.HasSuperBinding thisEnvRec)</font>> color="black" fillcolor="white" style=filled]
  node11334 [shape=diamond, label=<<font color="black">(= GLOBAL_executionStack[(- GLOBAL_executionStack.length 1i)] evalCxt)</font>> color="black" fillcolor="white" style=filled]
  node11302 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">9:let inFunction = false</td></tr>
      <tr><td align="left">10:let inMethod = false</td></tr>
      <tr><td align="left">11:let inDerivedConstructor = false</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11319 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">23:let lexEnv = __x8__</td></tr>
      <tr><td align="left">24:let varEnv = evalRealm.GlobalEnv</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11317 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">20:let lexEnv = __x7__</td></tr>
      <tr><td align="left">21:let varEnv = ctx.VariableEnvironment</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11305 [shape=cds, label=<<font color="black">13:app __x4__ = (__x3__ &quot;ScriptBody&quot;)</font>> color="black" fillcolor="white" style=filled]
  node11322 [shape=diamond, label=<<font color="black">(= ctx null)</font>> color="black" fillcolor="white" style=filled]
  node11326 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">34:let result = __x9__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11290 [shape=cds, label=<<font color="black">1:app __x0__ = (Type x)</font>> color="black" fillcolor="white" style=filled]
  node11309 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">14:let body = __x5__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11330 [shape=diamond, label=<<font color="black">(&amp;&amp; (= result.Type CONST_normal) (= result.Value CONST_empty))</font>> color="black" fillcolor="white" style=filled]
  node11298 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">6:let inMethod = __x2__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11324 -> node11325 [ color="black"]
  node11325 -> node11326 [ color="black"]
  node11331 -> node11332 [ color="black"]
  node11290 -> node11291 [ color="black"]
  node11298 -> node11299 [ color="black"]
  node11322 -> node11323 [label=<<font color="black">true</font>> color="black"]
  node11322 -> node11324 [label=<<font color="black">false</font>> color="black"]
  node11308 -> node11309 [ color="black"]
  node11318 -> node11319 [ color="black"]
  node11291 -> node11292 [label=<<font color="black">true</font>> color="black"]
  node11291 -> node11293 [label=<<font color="black">false</font>> color="black"]
  node11305 -> node11306 [ color="black"]
  node11295 -> node11296 [label=<<font color="black">true</font>> color="black"]
  node11295 -> node11302 [label=<<font color="black">false</font>> color="black"]
  node11304 -> node11305 [ color="black"]
  node11297 -> node11298 [ color="black"]
  node11294 -> node11295 [ color="black"]
  node11288 -> node11290 [ color="black"]
  node11328 -> node11329 [ color="black"]
  node11307 -> node11308 [ color="black"]
  node11313 -> node11314 [ color="black"]
  node11312 -> node11313 [ color="black"]
  node11302 -> node11303 [ color="black"]
  node11296 -> node11297 [ color="black"]
  node11310 -> node11311 [label=<<font color="black">true</font>> color="black"]
  node11310 -> node11312 [label=<<font color="black">false</font>> color="black"]
  node11316 -> node11317 [ color="black"]
  node11300 -> node11303 [ color="black"]
  node11320 -> node11321 [label=<<font color="black">true</font>> color="black"]
  node11320 -> node11322 [label=<<font color="black">false</font>> color="black"]
  node11306 -> node11307 [label=<<font color="black">true</font>> color="black"]
  node11306 -> node11308 [label=<<font color="black">false</font>> color="black"]
  node11309 -> node11310 [ color="black"]
  node11323 -> node11324 [ color="black"]
  node11329 -> node11330 [ color="black"]
  node11326 -> node11327 [ color="black"]
  node11303 -> node11304 [ color="black"]
  node11293 -> node11294 [ color="black"]
  node11321 -> node11322 [ color="black"]
  node11333 -> node11334 [ color="black"]
  node11335 -> node11336 [ color="black"]
  node11311 -> node11314 [ color="black"]
  node11317 -> node11320 [ color="black"]
  node11292 -> node11293 [ color="black"]
  node11332 -> node11333 [ color="black"]
  node11301 -> node11303 [ color="black"]
  node11314 -> node11315 [ color="black"]
  node11330 -> node11331 [label=<<font color="black">true</font>> color="black"]
  node11330 -> node11333 [label=<<font color="black">false</font>> color="black"]
  node11299 -> node11300 [label=<<font color="black">true</font>> color="black"]
  node11299 -> node11301 [label=<<font color="black">false</font>> color="black"]
  node11319 -> node11320 [ color="black"]
  node11334 -> node11335 [label=<<font color="black">true</font>> color="black"]
  node11334 -> node11336 [label=<<font color="black">false</font>> color="black"]
  node11336 -> node11289 [ color="black"]
  node11327 -> node11328 [label=<<font color="black">true</font>> color="black"]
  node11327 -> node11330 [label=<<font color="black">false</font>> color="black"]
  node11315 -> node11316 [label=<<font color="black">true</font>> color="black"]
  node11315 -> node11318 [label=<<font color="black">false</font>> color="black"]
}
