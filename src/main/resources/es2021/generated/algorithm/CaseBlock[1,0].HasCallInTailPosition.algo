def [SYNTAX] CaseBlock[1,0].HasCallInTailPosition<(CaseClauses0, DefaultClause, CaseClauses1),true>(call) = {
  0:let has = false
  1:if (! (= CaseClauses0 absent)) {
    access __x0__ = (CaseClauses0 "HasCallInTailPosition" call)
    let has = __x0__
  } else 8:{}
  2:if (= has true) return true else 8:{}
  3:access __x1__ = (DefaultClause "HasCallInTailPosition" call)
  3:let has = __x1__
  4:if (= has true) return true else 8:{}
  5:if (! (= CaseClauses1 absent)) {
    access __x2__ = (CaseClauses1 "HasCallInTailPosition" call)
    let has = __x2__
  } else 8:{}
  6:return has
}
- id: "sec-statement-rules"
- code:
          1. Let _has_ be *false*.
          1. If the first |CaseClauses| is present, let _has_ be HasCallInTailPosition of the first |CaseClauses| with argument _call_.
          1. If _has_ is *true*, return *true*.
          1. Let _has_ be HasCallInTailPosition of |DefaultClause| with argument _call_.
          1. If _has_ is *true*, return *true*.
          1. If the second |CaseClauses| is present, let _has_ be HasCallInTailPosition of the second |CaseClauses| with argument _call_.
          1. Return _has_.