digraph {
  node18482 [shape=cds, label=<<font color="black">16:app __x6__ = (Invoke promise &quot;then&quot; (new [thenFinally, catchFinally]))</font>> color="black" fillcolor="white" style=filled]
  node18463 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node18479 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">9:let thenFinally = [! __x4__]</td></tr>
      <tr><td align="left">10:thenFinally.Constructor = C</td></tr>
      <tr><td align="left">11:thenFinally.OnFinally = onFinally</td></tr>
      <tr><td align="left">12:let stepsCatchFinally = CatchFinallyFunctions</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18475 [shape=diamond, label=<<font color="black">(= __x3__ false)</font>> color="black" fillcolor="white" style=filled]
  node18471 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">2:let C = [? __x1__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18481 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">13:let catchFinally = [! __x5__]</td></tr>
      <tr><td align="left">14:catchFinally.Constructor = C</td></tr>
      <tr><td align="left">15:catchFinally.OnFinally = onFinally</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18480 [shape=cds, label=<<font color="black">13:app __x5__ = (CreateBuiltinFunction stepsCatchFinally (new [&quot;Constructor&quot;, &quot;OnFinally&quot;]))</font>> color="black" fillcolor="white" style=filled]
  node18476 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">5:let thenFinally = onFinally</td></tr>
      <tr><td align="left">6:let catchFinally = onFinally</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18465 [shape=cds, label=<<font color="black">app onFinally = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node18472 [shape=cds, label=<<font color="black">3:app __x2__ = (IsConstructor C)</font>> color="black" fillcolor="white" style=filled]
  node18477 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">8:let stepsThenFinally = ThenFinallyFunctions</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18466 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let promise = this</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18473 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">3:assert (= __x2__ true)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18478 [shape=cds, label=<<font color="black">9:app __x4__ = (CreateBuiltinFunction stepsThenFinally (new [&quot;Constructor&quot;, &quot;OnFinally&quot;]))</font>> color="black" fillcolor="white" style=filled]
  node18470 [shape=cds, label=<<font color="black">2:app __x1__ = (SpeciesConstructor promise INTRINSIC_Promise)</font>> color="black" fillcolor="white" style=filled]
  node18467 [shape=cds, label=<<font color="black">1:app __x0__ = (Type promise)</font>> color="black" fillcolor="white" style=filled]
  node18474 [shape=cds, label=<<font color="black">7:app __x3__ = (IsCallable onFinally)</font>> color="black" fillcolor="white" style=filled]
  node18468 [shape=diamond, label=<<font color="black">(! (= __x0__ Object))</font>> color="black" fillcolor="white" style=filled]
  node18469 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18464 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node18483 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">16:return [? __x6__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18467 -> node18468 [ color="black"]
  node18477 -> node18478 [ color="black"]
  node18476 -> node18482 [ color="black"]
  node18470 -> node18471 [ color="black"]
  node18474 -> node18475 [ color="black"]
  node18480 -> node18481 [ color="black"]
  node18465 -> node18466 [ color="black"]
  node18472 -> node18473 [ color="black"]
  node18475 -> node18476 [label=<<font color="black">true</font>> color="black"]
  node18475 -> node18477 [label=<<font color="black">false</font>> color="black"]
  node18468 -> node18469 [label=<<font color="black">true</font>> color="black"]
  node18468 -> node18470 [label=<<font color="black">false</font>> color="black"]
  node18471 -> node18472 [ color="black"]
  node18483 -> node18464 [ color="black"]
  node18463 -> node18465 [ color="black"]
  node18481 -> node18482 [ color="black"]
  node18469 -> node18470 [ color="black"]
  node18482 -> node18483 [ color="black"]
  node18473 -> node18474 [ color="black"]
  node18479 -> node18480 [ color="black"]
  node18478 -> node18479 [ color="black"]
  node18466 -> node18467 [ color="black"]
}
