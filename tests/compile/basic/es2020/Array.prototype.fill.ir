{
  app __x0__ = (ToObject this)
  if (is-completion __x0__) if (= __x0__.Type CONST_normal) __x0__ = __x0__.Value else return __x0__ else {}
  let O = __x0__
  app __x1__ = (LengthOfArrayLike O)
  if (is-completion __x1__) if (= __x1__.Type CONST_normal) __x1__ = __x1__.Value else return __x1__ else {}
  let len = __x1__
  app __x2__ = (ToInteger start)
  if (is-completion __x2__) if (= __x2__.Type CONST_normal) __x2__ = __x2__.Value else return __x2__ else {}
  let relativeStart = __x2__
  if (< relativeStart 0i) {
    app __x3__ = (max (+ len relativeStart) 0i)
    let k = __x3__
  } else {
    app __x4__ = (min relativeStart len)
    let k = __x4__
  }
  if (= end undefined) let relativeEnd = len else {
    app __x5__ = (ToInteger end)
    if (is-completion __x5__) if (= __x5__.Type CONST_normal) __x5__ = __x5__.Value else return __x5__ else {}
    let relativeEnd = __x5__
  }
  if (< relativeEnd 0i) {
    app __x6__ = (max (+ len relativeEnd) 0i)
    let final = __x6__
  } else {
    app __x7__ = (min relativeEnd len)
    let final = __x7__
  }
  while (< k final) {
    app __x8__ = (ToString k)
    if (is-completion __x8__) if (= __x8__.Type CONST_normal) __x8__ = __x8__.Value else return __x8__ else {}
    let Pk = __x8__
    app __x9__ = (Set O Pk value true)
    if (is-completion __x9__) if (= __x9__.Type CONST_normal) __x9__ = __x9__.Value else return __x9__ else {}
    __x9__
    k = (+ k 1i)
  }
  app __x10__ = (WrapCompletion O)
  return __x10__
}