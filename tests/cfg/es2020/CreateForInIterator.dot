digraph {
  node7845 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">1:let iterator = __x1__</td></tr>
      <tr><td align="left">2:iterator.Object = object</td></tr>
      <tr><td align="left">3:iterator.ObjectWasVisited = false</td></tr>
      <tr><td align="left">4:iterator.VisitedKeys = (new [])</td></tr>
      <tr><td align="left">5:iterator.RemainingKeys = (new [])</td></tr>
      <tr><td align="left">6:return iterator</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node7842 [shape=cds, label=<<font color="black">0:app __x0__ = (Type object)</font>> color="black" fillcolor="white" style=filled]
  node7841 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node7843 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:assert (= __x0__ Object)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node7844 [shape=cds, label=<<font color="black">1:app __x1__ = (OrdinaryObjectCreate INTRINSIC_ForInIteratorPrototype (new [&quot;Object&quot;, &quot;ObjectWasVisited&quot;, &quot;VisitedKeys&quot;, &quot;RemainingKeys&quot;]))</font>> color="black" fillcolor="white" style=filled]
  node7840 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node7845 -> node7841 [ color="black"]
  node7844 -> node7845 [ color="black"]
  node7843 -> node7844 [ color="black"]
  node7842 -> node7843 [ color="black"]
  node7840 -> node7842 [ color="black"]
}
