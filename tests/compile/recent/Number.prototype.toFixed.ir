{
  app fractionDigits = (GetArgument argumentsList 0i)
  [0] app __x0__ = (thisNumberValue this)
  [0] if (is-completion __x0__) if (= __x0__.Type CONST_normal) __x0__ = __x0__.Value else return __x0__ else [2] {}
  [0] let x = __x0__
  [1] app __x1__ = (ToIntegerOrInfinity fractionDigits)
  [1] if (is-completion __x1__) if (= __x1__.Type CONST_normal) __x1__ = __x1__.Value else return __x1__ else [2] {}
  [1] let f = __x1__
  [3] if (|| (= f Infinity) (= f -Infinity)) {
    app __x2__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_RangeError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
    return __x2__
  } else [2] {}
  [4] if (|| (< f 0i) (< 100i f)) {
    app __x3__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_RangeError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
    return __x3__
  } else [2] {}
  [5] ??? "If id:{x} is not finite , return ! Number : : toString ( id:{x} ) ."
  [6] ??? "Set id:{x} to ℝ ( id:{x} ) ."
  [7] let s = ""
  [8] if (< x 0i) {
    [9] s = "-"
    [10] x = (- x)
  } else [2] {}
  [13] if (! (< x 9223372036854775807i)) ??? "Let id:{m} be ! ToString ( 𝔽 ( id:{x} ) ) ." else {
    [14] ??? "Let id:{n} be an integer for which id:{n} ÷ 10 sup:{id:{f} } - id:{x} is as close to zero as possible . If there are two such id:{n} , pick the larger id:{n} ."
    [15] ??? "If id:{n} = 0 , let id:{m} be the String value:{\"0\"} . Otherwise , let id:{m} be the String value consisting of the digits of the decimal representation of id:{n} ( in order , with no leading zeroes ) ."
    [16] if (! (== f 0i)) {
      [17] let k = m.length
      [18] if (! (< f k)) {
        [19] ??? "Let id:{z} be the String value consisting of id:{f} + 1 - id:{k} occurrences of the code unit 0x0030 ( DIGIT ZERO ) ."
        [20] m = (+ z m)
        [21] k = (+ f 1i)
      } else [2] {}
      [22] ??? "Let id:{a} be the first id:{k} - id:{f} code units of id:{m} ."
      [23] ??? "Let id:{b} be the other id:{f} code units of id:{m} ."
      [24] m = (+ (+ a ".") b)
    } else [2] {}
  }
  [25] app __x4__ = (WrapCompletion (+ s m))
  [25] return __x4__
}