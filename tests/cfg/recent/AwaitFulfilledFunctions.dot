digraph {
  node0 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node2 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let F = CONTEXT.Function</td></tr>
      <tr><td align="left">1:let asyncContext = F.AsyncContext</td></tr>
      <tr><td align="left">2:let prevContext = CONTEXT</td></tr>
      <tr><td align="left">3:CONTEXT = null</td></tr>
      <tr><td align="left">4:append asyncContext -&gt; EXECUTION_STACK</td></tr>
      <tr><td align="left">4:CONTEXT = EXECUTION_STACK[(- EXECUTION_STACK.length 1i)]</td></tr>
      <tr><td align="left">5:??? &quot;Resume the suspended evaluation of asyncContext using (NormalCompletion~value) as the result of the operation that suspended it&quot;</td></tr>
      <tr><td align="left">7:return undefined</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node1 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node0 -> node2 [ color="black"]
  node2 -> node1 [ color="black"]
}
