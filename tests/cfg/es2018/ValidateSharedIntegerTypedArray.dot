digraph {
  node16495 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16497 [shape=cds, label=<<font color="black">10:app __x1__ = (IsSharedArrayBuffer buffer)</font>> color="black" fillcolor="white" style=filled]
  node16492 [shape=diamond, label=<<font color="black">(! (= typeName &quot;Int32Array&quot;))</font>> color="black" fillcolor="white" style=filled]
  node16486 [shape=diamond, label=<<font color="black">(! (= __x0__ Object))</font>> color="black" fillcolor="white" style=filled]
  node16500 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">11:return buffer</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16493 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16489 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16499 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16485 [shape=cds, label=<<font color="black">1:app __x0__ = (Type typedArray)</font>> color="black" fillcolor="white" style=filled]
  node16482 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node16494 [shape=diamond, label=<<font color="black">(! (|| (|| (|| (|| (|| (= typeName &quot;Int8Array&quot;) (= typeName &quot;Uint8Array&quot;)) (= typeName &quot;Int16Array&quot;)) (= typeName &quot;Uint16Array&quot;)) (= typeName &quot;Int32Array&quot;)) (= typeName &quot;Uint32Array&quot;)))</font>> color="black" fillcolor="white" style=filled]
  node16490 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">3:let typeName = typedArray.TypedArrayName</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16481 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node16498 [shape=diamond, label=<<font color="black">(= __x1__ false)</font>> color="black" fillcolor="white" style=filled]
  node16491 [shape=diamond, label=<<font color="black">(= onlyInt32 true)</font>> color="black" fillcolor="white" style=filled]
  node16488 [shape=diamond, label=<<font color="black">(= typedArray.TypedArrayName absent)</font>> color="black" fillcolor="white" style=filled]
  node16487 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16484 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">onlyInt32 = false</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16483 [shape=diamond, label=<<font color="black">(= onlyInt32 absent)</font>> color="black" fillcolor="white" style=filled]
  node16496 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">8:assert (! (= typedArray.ViewedArrayBuffer absent))</td></tr>
      <tr><td align="left">9:let buffer = typedArray.ViewedArrayBuffer</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16490 -> node16491 [ color="black"]
  node16487 -> node16488 [ color="black"]
  node16498 -> node16499 [label=<<font color="black">true</font>> color="black"]
  node16498 -> node16500 [label=<<font color="black">false</font>> color="black"]
  node16488 -> node16489 [label=<<font color="black">true</font>> color="black"]
  node16488 -> node16490 [label=<<font color="black">false</font>> color="black"]
  node16492 -> node16493 [label=<<font color="black">true</font>> color="black"]
  node16492 -> node16496 [label=<<font color="black">false</font>> color="black"]
  node16496 -> node16497 [ color="black"]
  node16494 -> node16495 [label=<<font color="black">true</font>> color="black"]
  node16494 -> node16496 [label=<<font color="black">false</font>> color="black"]
  node16481 -> node16483 [ color="black"]
  node16500 -> node16482 [ color="black"]
  node16497 -> node16498 [ color="black"]
  node16486 -> node16487 [label=<<font color="black">true</font>> color="black"]
  node16486 -> node16488 [label=<<font color="black">false</font>> color="black"]
  node16499 -> node16500 [ color="black"]
  node16489 -> node16490 [ color="black"]
  node16484 -> node16485 [ color="black"]
  node16483 -> node16484 [label=<<font color="black">true</font>> color="black"]
  node16483 -> node16485 [label=<<font color="black">false</font>> color="black"]
  node16493 -> node16496 [ color="black"]
  node16495 -> node16496 [ color="black"]
  node16485 -> node16486 [ color="black"]
  node16491 -> node16492 [label=<<font color="black">true</font>> color="black"]
  node16491 -> node16494 [label=<<font color="black">false</font>> color="black"]
}
