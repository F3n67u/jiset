digraph {
  node0 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node1 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node2 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:assert (|| (is-instance-of R ReadSharedMemory) (is-instance-of R ReadModifyWriteSharedMemory))</td></tr>
      <tr><td align="left">1:??? &quot;Let reads - bytes - from be id:{execution} . [ [ ReadsBytesFrom ] ] .&quot;</td></tr>
      <tr><td align="left">2:??? &quot;Let id:{Ws} be reads - bytes - from ( id:{R} ) .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node3 [shape=cds, label=<<font color="black">4:app __x0__ = (ComposeWriteEventBytes execution R.ByteIndex Ws)</font>> color="black" fillcolor="white" style=filled]
  node4 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">4:return __x0__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node0 -> node2 [ color="black"]
  node2 -> node3 [ color="black"]
  node3 -> node4 [ color="black"]
  node4 -> node1 [ color="black"]
}
