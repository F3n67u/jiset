{
  if (! (is-instance-of module SourceTextModuleRecord)) {
    app __x0__ = (module.Instantiate module)
    [? __x0__]
    return index
  } else {}
  if (|| (|| (= module.Status "instantiating") (= module.Status "instantiated")) (= module.Status "evaluated")) return index else {}
  assert (= module.Status "uninstantiated")
  module.Status = "instantiating"
  module.DFSIndex = index
  module.DFSAncestorIndex = index
  index = (+ index 1i)
  append module -> stack
  let __x1__ = module.RequestedModules
  let __x2__ = 0i
  while (< __x2__ __x1__.length) {
    let required = __x1__[__x2__]
    app __x3__ = (HostResolveImportedModule module required)
    let requiredModule = [? __x3__]
    app __x4__ = (InnerModuleInstantiation requiredModule stack index)
    index = [? __x4__]
    assert (|| (|| (= requiredModule.Status "instantiating") (= requiredModule.Status "instantiated")) (= requiredModule.Status "evaluated"))
    if (= requiredModule.Status "instantiating") {
      assert (is-instance-of requiredModule SourceTextModuleRecord)
      app __x5__ = (min module.DFSAncestorIndex requiredModule.DFSAncestorIndex)
      module.DFSAncestorIndex = __x5__
    } else {}
    __x2__ = (+ __x2__ 1i)
  }
  app __x6__ = (ModuleDeclarationEnvironmentSetup module)
  [? __x6__]
  assert (! (< module.DFSIndex module.DFSAncestorIndex))
  if (= module.DFSAncestorIndex module.DFSIndex) {
    let done = false
    while (= done false) {
      let requiredModule = stack[(- stack.length 1i)]
      (pop stack (- stack.length 1i))
      requiredModule.Status = "instantiated"
      if (= requiredModule module) done = true else {}
    }
  } else {}
  return index
}