{
  [0] let module = this
  [1] let __x0__ = resolveSet
  [1] let __x1__ = 0i
  [1] while (< __x1__ __x0__.length) {
    let r = __x0__[__x1__]
    [2] let __x2__ = (= module r.Module)
    [2] if __x2__ {
      app __x3__ = (SameValue exportName r.ExportName)
      __x2__ = (= __x3__ true)
    } else [28] {}
    [2] if __x2__ {
      [4] app __x4__ = (WrapCompletion null)
      [4] return __x4__
    } else [28] {}
    __x1__ = (+ __x1__ 1i)
  }
  [5] append (new Record("Module" -> module, "ExportName" -> exportName)) -> resolveSet
  [6] let __x5__ = module.LocalExportEntries
  [6] let __x6__ = 0i
  [6] while (< __x6__ __x5__.length) {
    let e = __x5__[__x6__]
    [7] app __x7__ = (SameValue exportName e.ExportName)
    [7] if (= __x7__ true) {
      [9] app __x8__ = (WrapCompletion (new ResolvedBindingRecord("Module" -> module, "BindingName" -> e.LocalName)))
      [9] return __x8__
    } else [28] {}
    __x6__ = (+ __x6__ 1i)
  }
  [10] let __x9__ = module.IndirectExportEntries
  [10] let __x10__ = 0i
  [10] while (< __x10__ __x9__.length) {
    let e = __x9__[__x10__]
    [11] app __x11__ = (SameValue exportName e.ExportName)
    [11] if (= __x11__ true) {
      [13] app __x12__ = (HostResolveImportedModule module e.ModuleRequest)
      [13] if (is-completion __x12__) if (= __x12__.Type CONST_normal) __x12__ = __x12__.Value else return __x12__ else [28] {}
      [13] let importedModule = __x12__
      [14] app __x13__ = (importedModule.ResolveExport importedModule e.ImportName resolveSet)
      [14] app __x14__ = (WrapCompletion __x13__)
      [14] return __x14__
    } else [28] {}
    __x10__ = (+ __x10__ 1i)
  }
  [15] app __x15__ = (SameValue exportName "default")
  [15] if (= __x15__ true) {
    [17] app __x16__ = (WrapCompletion null)
    [17] return __x16__
  } else [28] {}
  [19] let starResolution = null
  [20] let __x17__ = module.StarExportEntries
  [20] let __x18__ = 0i
  [20] while (< __x18__ __x17__.length) {
    let e = __x17__[__x18__]
    [21] app __x19__ = (HostResolveImportedModule module e.ModuleRequest)
    [21] if (is-completion __x19__) if (= __x19__.Type CONST_normal) __x19__ = __x19__.Value else return __x19__ else [28] {}
    [21] let importedModule = __x19__
    [22] app __x20__ = (importedModule.ResolveExport importedModule exportName resolveSet)
    [22] if (is-completion __x20__) if (= __x20__.Type CONST_normal) __x20__ = __x20__.Value else return __x20__ else [28] {}
    [22] let resolution = __x20__
    [23] if (= resolution "ambiguous") {
      app __x21__ = (WrapCompletion "ambiguous")
      return __x21__
    } else [28] {}
    [24] if (! (= resolution null)) {
      [25] assert (= (typeof resolution) "ResolvedBindingRecord")
      [27] if (= starResolution null) starResolution = resolution else {
        [29] let __x22__ = (! (= resolution.Module starResolution.Module))
        [29] if __x22__ [28] {} else {
          app __x23__ = (SameValue resolution.BindingName starResolution.BindingName)
          __x22__ = (= __x23__ false)
        }
        [29] if __x22__ {
          app __x24__ = (WrapCompletion "ambiguous")
          return __x24__
        } else [28] {}
      }
    } else [28] {}
    __x18__ = (+ __x18__ 1i)
  }
  [30] app __x25__ = (WrapCompletion starResolution)
  [30] return __x25__
}