{
  app __x0__ = (Get holder key)
  let value = [? __x0__]
  app __x1__ = (Type value)
  if (|| (= __x1__ Object) (= __x1__ BigInt)) {
    app __x2__ = (GetV value "toJSON")
    let toJSON = [? __x2__]
    app __x3__ = (IsCallable toJSON)
    if (= __x3__ true) {
      app __x4__ = (Call toJSON value (new [key]))
      value = [? __x4__]
    } else {}
  } else {}
  if (! (= state.ReplacerFunction undefined)) {
    app __x5__ = (Call state.ReplacerFunction holder (new [key, value]))
    value = [? __x5__]
  } else {}
  app __x6__ = (Type value)
  if (= __x6__ Object) if (! (= value.NumberData absent)) {
    app __x7__ = (ToNumber value)
    value = [? __x7__]
  } else if (! (= value.StringData absent)) {
    app __x8__ = (ToString value)
    value = [? __x8__]
  } else if (! (= value.BooleanData absent)) value = value.BooleanData else if (! (= value.BigIntData absent)) value = value.BigIntData else {} else {}
  if (= value null) return "null" else {}
  if (= value true) return "true" else {}
  if (= value false) return "false" else {}
  app __x9__ = (Type value)
  if (= __x9__ String) {
    app __x10__ = (QuoteJSONString value)
    return __x10__
  } else {}
  app __x11__ = (Type value)
  if (= __x11__ Number) {
    if (! (|| (= value Infinity) (= value -Infinity))) {
      app __x12__ = (ToString value)
      return [! __x12__]
    } else {}
    return "null"
  } else {}
  app __x13__ = (Type value)
  if (= __x13__ BigInt) throw TypeError else {}
  let __x14__ = true
  app __x15__ = (Type value)
  __x14__ = (= __x15__ Object)
  if __x14__ {
    app __x16__ = (IsCallable value)
    __x14__ = (= __x16__ false)
  } else {}
  if __x14__ {
    app __x17__ = (IsArray value)
    let isArray = [? __x17__]
    if (= isArray true) {
      app __x18__ = (SerializeJSONArray state value)
      return [? __x18__]
    } else {}
    app __x19__ = (SerializeJSONObject state value)
    return [? __x19__]
  } else {}
  return undefined
}