digraph {
  node14093 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node14099 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">1:let S = [? __x1__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14113 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">11:??? &quot;If the sequence of code units of id:{S} starting at id:{start} of length id:{searchLength} is the same as the full code unit sequence of id:{searchStr} , return value:{true} .&quot;</td></tr>
      <tr><td align="left">12:??? &quot;Otherwise , return value:{false} .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14096 [shape=cds, label=<<font color="black">0:app __x0__ = (RequireObjectCoercible this)</font>> color="black" fillcolor="white" style=filled]
  node14100 [shape=cds, label=<<font color="black">2:app __x2__ = (IsRegExp searchString)</font>> color="black" fillcolor="white" style=filled]
  node14092 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node14107 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">5:let pos = [? __x4__]</td></tr>
      <tr><td align="left">7:let len = S.length</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14106 [shape=cds, label=<<font color="black">5:app __x4__ = (ToInteger position)</font>> color="black" fillcolor="white" style=filled]
  node14094 [shape=cds, label=<<font color="black">app searchString = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node14105 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">4:let searchStr = [? __x3__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14103 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14109 [shape=cds, label=<<font color="black">8:app __x6__ = (min __x5__ len)</font>> color="black" fillcolor="white" style=filled]
  node14110 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">8:let start = __x6__</td></tr>
      <tr><td align="left">9:let searchLength = searchStr.length</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14104 [shape=cds, label=<<font color="black">4:app __x3__ = (ToString searchString)</font>> color="black" fillcolor="white" style=filled]
  node14097 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let O = [? __x0__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14095 [shape=cds, label=<<font color="black">app position = (GetArgument argumentsList 1i)</font>> color="black" fillcolor="white" style=filled]
  node14111 [shape=diamond, label=<<font color="black">(&lt; len (+ searchLength start))</font>> color="black" fillcolor="white" style=filled]
  node14101 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">2:let isRegExp = [? __x2__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14098 [shape=cds, label=<<font color="black">1:app __x1__ = (ToString O)</font>> color="black" fillcolor="white" style=filled]
  node14108 [shape=cds, label=<<font color="black">8:app __x5__ = (max pos 0i)</font>> color="black" fillcolor="white" style=filled]
  node14112 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return false</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14102 [shape=diamond, label=<<font color="black">(= isRegExp true)</font>> color="black" fillcolor="white" style=filled]
  node14106 -> node14107 [ color="black"]
  node14096 -> node14097 [ color="black"]
  node14113 -> node14093 [ color="black"]
  node14105 -> node14106 [ color="black"]
  node14101 -> node14102 [ color="black"]
  node14103 -> node14104 [ color="black"]
  node14100 -> node14101 [ color="black"]
  node14109 -> node14110 [ color="black"]
  node14104 -> node14105 [ color="black"]
  node14094 -> node14095 [ color="black"]
  node14095 -> node14096 [ color="black"]
  node14107 -> node14108 [ color="black"]
  node14108 -> node14109 [ color="black"]
  node14092 -> node14094 [ color="black"]
  node14102 -> node14103 [label=<<font color="black">true</font>> color="black"]
  node14102 -> node14104 [label=<<font color="black">false</font>> color="black"]
  node14097 -> node14098 [ color="black"]
  node14098 -> node14099 [ color="black"]
  node14110 -> node14111 [ color="black"]
  node14112 -> node14113 [ color="black"]
  node14111 -> node14112 [label=<<font color="black">true</font>> color="black"]
  node14111 -> node14113 [label=<<font color="black">false</font>> color="black"]
  node14099 -> node14100 [ color="black"]
}
