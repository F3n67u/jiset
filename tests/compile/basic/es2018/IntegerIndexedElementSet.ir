{
  app __x0__ = (Type index)
  assert (= __x0__ Number)
  app __x1__ = (ToNumber value)
  if (is-completion __x1__) if (= __x1__.Type CONST_normal) __x1__ = __x1__.Value else return __x1__ else {}
  let numValue = __x1__
  let buffer = O.ViewedArrayBuffer
  app __x2__ = (IsDetachedBuffer buffer)
  if (= __x2__ true) throw INTRINSIC_TypeError else {}
  app __x3__ = (IsInteger index)
  if (= __x3__ false) {
    app __x4__ = (WrapCompletion false)
    return __x4__
  } else {}
  if (== index -0.0) {
    app __x5__ = (WrapCompletion false)
    return __x5__
  } else {}
  let length = O.ArrayLength
  if (|| (< index 0i) (! (< index length))) {
    app __x6__ = (WrapCompletion false)
    return __x6__
  } else {}
  let offset = O.ByteOffset
  let arrayTypeName = O.TypedArrayName
  ??? "Let id:{elementSize} be the Number value of the Element Size value specified in link:{unhandled: table-49} for id:{arrayTypeName} ."
  let indexedPosition = (+ (* index elementSize) offset)
  ??? "Let id:{elementType} be the String value of the Element Type value in link:{unhandled: table-49} for id:{arrayTypeName} ."
  app __x7__ = (SetValueInBuffer buffer indexedPosition elementType numValue true "Unordered")
  __x7__
  app __x8__ = (WrapCompletion true)
  return __x8__
}