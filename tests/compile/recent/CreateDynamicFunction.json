[{
  "tokens": ["Assert", ":", "The", "execution", "context", "stack", "has", "at", "least", "two", "elements", "."]
}, {
  "tokens": ["Let", {
    "id": "callerContext"
  }, "be", "the", "second", "to", "top", "element", "of", "the", "execution", "context", "stack", "."]
}, {
  "tokens": ["Let", {
    "id": "callerRealm"
  }, "be", {
    "id": "callerContext"
  }, "'", "s", "Realm", "."]
}, {
  "tokens": ["Let", {
    "id": "calleeRealm"
  }, "be", "the", "current", "Realm", "Record", "."]
}, {
  "tokens": ["Perform", "?", "HostEnsureCanCompileStrings", "(", {
    "id": "callerRealm"
  }, ",", {
    "id": "calleeRealm"
  }, ")", "."]
}, {
  "tokens": ["If", {
    "id": "newTarget"
  }, "is", {
    "value": "undefined"
  }, ",", "set", {
    "id": "newTarget"
  }, "to", {
    "id": "constructor"
  }, "."]
}, {
  "tokens": ["If", {
    "id": "kind"
  }, "is", {
    "const": "normal"
  }, ",", "then"]
}, {
  "tokens": ["Let", {
    "id": "goal"
  }, "be", "the", "grammar", "symbol", "|", "FunctionBody", "[", "~", "Yield", ",", "~", "Await", "]", "|", "."]
}, {
  "tokens": ["Let", {
    "id": "parameterGoal"
  }, "be", "the", "grammar", "symbol", "|", "FormalParameters", "[", "~", "Yield", ",", "~", "Await", "]", "|", "."]
}, {
  "tokens": ["Let", {
    "id": "fallbackProto"
  }, "be", {
    "value": "\"%Function.prototype%\""
  }, "."]
}, {
  "tokens": ["Else", "if", {
    "id": "kind"
  }, "is", {
    "const": "generator"
  }, ",", "then"]
}, {
  "tokens": ["Let", {
    "id": "goal"
  }, "be", "the", "grammar", "symbol", {
    "nt": "GeneratorBody"
  }, "."]
}, {
  "tokens": ["Let", {
    "id": "parameterGoal"
  }, "be", "the", "grammar", "symbol", "|", "FormalParameters", "[", "+", "Yield", ",", "~", "Await", "]", "|", "."]
}, {
  "tokens": ["Let", {
    "id": "fallbackProto"
  }, "be", {
    "value": "\"%GeneratorFunction.prototype%\""
  }, "."]
}, {
  "tokens": ["Else", "if", {
    "id": "kind"
  }, "is", {
    "const": "async"
  }, ",", "then"]
}, {
  "tokens": ["Let", {
    "id": "goal"
  }, "be", "the", "grammar", "symbol", {
    "nt": "AsyncFunctionBody"
  }, "."]
}, {
  "tokens": ["Let", {
    "id": "parameterGoal"
  }, "be", "the", "grammar", "symbol", "|", "FormalParameters", "[", "~", "Yield", ",", "+", "Await", "]", "|", "."]
}, {
  "tokens": ["Let", {
    "id": "fallbackProto"
  }, "be", {
    "value": "\"%AsyncFunction.prototype%\""
  }, "."]
}, {
  "tokens": ["Else", ","]
}, {
  "tokens": ["Assert", ":", {
    "id": "kind"
  }, "is", {
    "const": "asyncGenerator"
  }, "."]
}, {
  "tokens": ["Let", {
    "id": "goal"
  }, "be", "the", "grammar", "symbol", {
    "nt": "AsyncGeneratorBody"
  }, "."]
}, {
  "tokens": ["Let", {
    "id": "parameterGoal"
  }, "be", "the", "grammar", "symbol", "|", "FormalParameters", "[", "+", "Yield", ",", "+", "Await", "]", "|", "."]
}, {
  "tokens": ["Let", {
    "id": "fallbackProto"
  }, "be", {
    "value": "\"%AsyncGeneratorFunction.prototype%\""
  }, "."]
}, {
  "tokens": ["Let", {
    "id": "argCount"
  }, "be", "the", "number", "of", "elements", "in", {
    "id": "args"
  }, "."]
}, {
  "tokens": ["Let", {
    "id": "P"
  }, "be", "the", "empty", "String", "."]
}, {
  "tokens": ["If", {
    "id": "argCount"
  }, "=", "0", ",", "let", {
    "id": "bodyArg"
  }, "be", "the", "empty", "String", "."]
}, {
  "tokens": ["Else", "if", {
    "id": "argCount"
  }, "=", "1", ",", "let", {
    "id": "bodyArg"
  }, "be", {
    "id": "args"
  }, "[", "0", "]", "."]
}, {
  "tokens": ["Else", ","]
}, {
  "tokens": ["Assert", ":", {
    "id": "argCount"
  }, ">", "1", "."]
}, {
  "tokens": ["Let", {
    "id": "firstArg"
  }, "be", {
    "id": "args"
  }, "[", "0", "]", "."]
}, {
  "tokens": ["Set", {
    "id": "P"
  }, "to", "?", "ToString", "(", {
    "id": "firstArg"
  }, ")", "."]
}, {
  "tokens": ["Let", {
    "id": "k"
  }, "be", "1", "."]
}, {
  "tokens": ["Repeat", ",", "while", {
    "id": "k"
  }, "<", {
    "id": "argCount"
  }, "-", "1", ","]
}, {
  "tokens": ["Let", {
    "id": "nextArg"
  }, "be", {
    "id": "args"
  }, "[", {
    "id": "k"
  }, "]", "."]
}, {
  "tokens": ["Let", {
    "id": "nextArgString"
  }, "be", "?", "ToString", "(", {
    "id": "nextArg"
  }, ")", "."]
}, {
  "tokens": ["Set", {
    "id": "P"
  }, "to", "the", "string", "-", "concatenation", "of", {
    "id": "P"
  }, ",", {
    "value": "\",\""
  }, "(", "a", "comma", ")", ",", "and", {
    "id": "nextArgString"
  }, "."]
}, {
  "tokens": ["Set", {
    "id": "k"
  }, "to", {
    "id": "k"
  }, "+", "1", "."]
}, {
  "tokens": ["Let", {
    "id": "bodyArg"
  }, "be", {
    "id": "args"
  }, "[", {
    "id": "k"
  }, "]", "."]
}, {
  "tokens": ["Let", {
    "id": "bodyString"
  }, "be", "the", "string", "-", "concatenation", "of", "0x000A", "(", "LINE", "FEED", ")", ",", "?", "ToString", "(", {
    "id": "bodyArg"
  }, ")", ",", "and", "0x000A", "(", "LINE", "FEED", ")", "."]
}, {
  "tokens": ["Let", {
    "id": "prefix"
  }, "be", "the", "prefix", "associated", "with", {
    "id": "kind"
  }, "in", {
    "link": ""
  }, "."]
}, {
  "tokens": ["Let", {
    "id": "sourceString"
  }, "be", "the", "string", "-", "concatenation", "of", {
    "id": "prefix"
  }, ",", "*", "\"", "anonymous", "(", "\"", "*", ",", {
    "id": "P"
  }, ",", "0x000A", "(", "LINE", "FEED", ")", ",", "*", "\"", ")", "{", "\"", "*", ",", {
    "id": "bodyString"
  }, ",", "and", {
    "value": "\"}\""
  }, "."]
}, {
  "tokens": ["Let", {
    "id": "sourceText"
  }, "be", "!", "StringToCodePoints", "(", {
    "id": "sourceString"
  }, ")", "."]
}, {
  "tokens": ["Perform", "the", "following", "substeps", "in", "an", "implementation", "-", "defined", "order", ",", "possibly", "interleaving", "parsing", "and", "error", "detection", ":"]
}, {
  "tokens": ["Let", {
    "id": "parameters"
  }, "be", "ParseText", "(", "!", "StringToCodePoints", "(", {
    "id": "P"
  }, ")", ",", {
    "id": "parameterGoal"
  }, ")", "."]
}, {
  "tokens": ["If", {
    "id": "parameters"
  }, "is", "a", "List", "of", "errors", ",", "throw", "a", {
    "value": "SyntaxError"
  }, "exception", "."]
}, {
  "tokens": ["Let", {
    "id": "body"
  }, "be", "ParseText", "(", "!", "StringToCodePoints", "(", {
    "id": "bodyString"
  }, ")", ",", {
    "id": "goal"
  }, ")", "."]
}, {
  "tokens": ["If", {
    "id": "body"
  }, "is", "a", "List", "of", "errors", ",", "throw", "a", {
    "value": "SyntaxError"
  }, "exception", "."]
}, {
  "tokens": ["Let", {
    "id": "strict"
  }, "be", "ContainsUseStrict", "of", {
    "id": "body"
  }, "."]
}, {
  "tokens": ["If", {
    "id": "strict"
  }, "is", {
    "value": "true"
  }, ",", "apply", "the", "early", "error", "rules", "for", {
    "grammar": "UniqueFormalParameters0",
    "subs": ["FormalParameters"]
  }, "to", {
    "id": "parameters"
  }, "."]
}, {
  "tokens": ["If", {
    "id": "strict"
  }, "is", {
    "value": "true"
  }, "and", "IsSimpleParameterList", "of", {
    "id": "parameters"
  }, "is", {
    "value": "false"
  }, ",", "throw", "a", {
    "value": "SyntaxError"
  }, "exception", "."]
}, {
  "tokens": ["If", "any", "element", "of", "the", "BoundNames", "of", {
    "id": "parameters"
  }, "also", "occurs", "in", "the", "LexicallyDeclaredNames", "of", {
    "id": "body"
  }, ",", "throw", "a", {
    "value": "SyntaxError"
  }, "exception", "."]
}, {
  "tokens": ["If", {
    "id": "body"
  }, "Contains", {
    "nt": "SuperCall"
  }, "is", {
    "value": "true"
  }, ",", "throw", "a", {
    "value": "SyntaxError"
  }, "exception", "."]
}, {
  "tokens": ["If", {
    "id": "parameters"
  }, "Contains", {
    "nt": "SuperCall"
  }, "is", {
    "value": "true"
  }, ",", "throw", "a", {
    "value": "SyntaxError"
  }, "exception", "."]
}, {
  "tokens": ["If", {
    "id": "body"
  }, "Contains", {
    "nt": "SuperProperty"
  }, "is", {
    "value": "true"
  }, ",", "throw", "a", {
    "value": "SyntaxError"
  }, "exception", "."]
}, {
  "tokens": ["If", {
    "id": "parameters"
  }, "Contains", {
    "nt": "SuperProperty"
  }, "is", {
    "value": "true"
  }, ",", "throw", "a", {
    "value": "SyntaxError"
  }, "exception", "."]
}, {
  "tokens": ["If", {
    "id": "kind"
  }, "is", {
    "const": "generator"
  }, "or", {
    "const": "asyncGenerator"
  }, ",", "then"]
}, {
  "tokens": ["If", {
    "id": "parameters"
  }, "Contains", {
    "nt": "YieldExpression"
  }, "is", {
    "value": "true"
  }, ",", "throw", "a", {
    "value": "SyntaxError"
  }, "exception", "."]
}, {
  "tokens": ["If", {
    "id": "kind"
  }, "is", {
    "const": "async"
  }, "or", {
    "const": "asyncGenerator"
  }, ",", "then"]
}, {
  "tokens": ["If", {
    "id": "parameters"
  }, "Contains", {
    "nt": "AwaitExpression"
  }, "is", {
    "value": "true"
  }, ",", "throw", "a", {
    "value": "SyntaxError"
  }, "exception", "."]
}, {
  "tokens": ["If", {
    "id": "strict"
  }, "is", {
    "value": "true"
  }, ",", "then"]
}, {
  "tokens": ["If", "BoundNames", "of", {
    "id": "parameters"
  }, "contains", "any", "duplicate", "elements", ",", "throw", "a", {
    "value": "SyntaxError"
  }, "exception", "."]
}, {
  "tokens": ["Let", {
    "id": "proto"
  }, "be", "?", "GetPrototypeFromConstructor", "(", {
    "id": "newTarget"
  }, ",", {
    "id": "fallbackProto"
  }, ")", "."]
}, {
  "tokens": ["Let", {
    "id": "realmF"
  }, "be", "the", "current", "Realm", "Record", "."]
}, {
  "tokens": ["Let", {
    "id": "scope"
  }, "be", {
    "id": "realmF"
  }, ".", "[", "[", "GlobalEnv", "]", "]", "."]
}, {
  "tokens": ["Let", {
    "id": "F"
  }, "be", "!", "OrdinaryFunctionCreate", "(", {
    "id": "proto"
  }, ",", {
    "id": "sourceText"
  }, ",", {
    "id": "parameters"
  }, ",", {
    "id": "body"
  }, ",", {
    "const": "non-lexical-this"
  }, ",", {
    "id": "scope"
  }, ")", "."]
}, {
  "tokens": ["Perform", "SetFunctionName", "(", {
    "id": "F"
  }, ",", {
    "value": "\"anonymous\""
  }, ")", "."]
}, {
  "tokens": ["If", {
    "id": "kind"
  }, "is", {
    "const": "generator"
  }, ",", "then"]
}, {
  "tokens": ["Let", {
    "id": "prototype"
  }, "be", "!", "OrdinaryObjectCreate", "(", "%", "GeneratorFunction", ".", "prototype", ".", "prototype", "%", ")", "."]
}, {
  "tokens": ["Perform", "DefinePropertyOrThrow", "(", {
    "id": "F"
  }, ",", {
    "value": "\"prototype\""
  }, ",", "PropertyDescriptor", "{", "[", "[", "Value", "]", "]", ":", {
    "id": "prototype"
  }, ",", "[", "[", "Writable", "]", "]", ":", {
    "value": "true"
  }, ",", "[", "[", "Enumerable", "]", "]", ":", {
    "value": "false"
  }, ",", "[", "[", "Configurable", "]", "]", ":", {
    "value": "false"
  }, "}", ")", "."]
}, {
  "tokens": ["Else", "if", {
    "id": "kind"
  }, "is", {
    "const": "asyncGenerator"
  }, ",", "then"]
}, {
  "tokens": ["Let", {
    "id": "prototype"
  }, "be", "!", "OrdinaryObjectCreate", "(", "%", "AsyncGeneratorFunction", ".", "prototype", ".", "prototype", "%", ")", "."]
}, {
  "tokens": ["Perform", "DefinePropertyOrThrow", "(", {
    "id": "F"
  }, ",", {
    "value": "\"prototype\""
  }, ",", "PropertyDescriptor", "{", "[", "[", "Value", "]", "]", ":", {
    "id": "prototype"
  }, ",", "[", "[", "Writable", "]", "]", ":", {
    "value": "true"
  }, ",", "[", "[", "Enumerable", "]", "]", ":", {
    "value": "false"
  }, ",", "[", "[", "Configurable", "]", "]", ":", {
    "value": "false"
  }, "}", ")", "."]
}, {
  "tokens": ["Else", "if", {
    "id": "kind"
  }, "is", {
    "const": "normal"
  }, ",", "perform", "MakeConstructor", "(", {
    "id": "F"
  }, ")", "."]
}, {
  "tokens": ["NOTE", ":", "Functions", "whose", {
    "id": "kind"
  }, "is", {
    "const": "async"
  }, "are", "not", "constructible", "and", "do", "not", "have", "a", "[", "[", "Construct", "]", "]", "internal", "method", "or", "a", {
    "value": "\"prototype\""
  }, "property", "."]
}, {
  "tokens": ["Return", {
    "id": "F"
  }, "."]
}]