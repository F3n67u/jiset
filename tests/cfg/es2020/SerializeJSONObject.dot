digraph {
  node17847 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">10:let strP = [? __x3__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17857 [shape=diamond, label=<<font color="black">(= state.Gap &quot;&quot;)</font>> color="black" fillcolor="white" style=filled]
  node17835 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node17859 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">25:let separator = (+ (+ &quot;,&quot; &quot;\n&quot;) state.Indent)</td></tr>
      <tr><td align="left">26:??? &quot;Let id:{properties} be the String value formed by concatenating all the element Strings of id:{partial} with each adjacent pair of Strings separated with id:{separator} . The id:{separator} String is not inserted either before the first String or after the last String .&quot;</td></tr>
      <tr><td align="left">27:let final = (+ (+ (+ (+ (+ (+ &quot;{&quot; &quot;\n&quot;) state.Indent) properties) &quot;\n&quot;) stepback) &quot;}&quot;)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17858 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">22:??? &quot;Let id:{properties} be the String value formed by concatenating all the element Strings of id:{partial} with each adjacent pair of Strings separated with the code unit 0x002C ( COMMA ) . A comma is not inserted either before the first String or after the last String .&quot;</td></tr>
      <tr><td align="left">23:let final = (+ (+ &quot;{&quot; properties) &quot;}&quot;)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17860 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">28:??? &quot;Remove the last element of id:{state} . [ [ Stack ] ] .&quot;</td></tr>
      <tr><td align="left">29:state.Indent = stepback</td></tr>
      <tr><td align="left">30:return final</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17841 [shape=cds, label=<<font color="black">7:app __x0__ = (EnumerableOwnPropertyNames value CONST_key)</font>> color="black" fillcolor="white" style=filled]
  node17850 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">12:let member = __x4__</td></tr>
      <tr><td align="left">13:member = (+ member &quot;:&quot;)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17853 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">16:member = (+ member strP)</td></tr>
      <tr><td align="left">17:append member -&gt; partial</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17842 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">7:let K = [? __x0__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17846 [shape=cds, label=<<font color="black">10:app __x3__ = (SerializeJSONProperty state P value)</font>> color="black" fillcolor="white" style=filled]
  node17849 [shape=cds, label=<<font color="black">12:app __x4__ = (QuoteJSONString P)</font>> color="black" fillcolor="white" style=filled]
  node17856 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let final = &quot;{}&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17843 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">8:let partial = (new [])</td></tr>
      <tr><td align="left">9:let __x1__ = K</td></tr>
      <tr><td align="left">9:let __x2__ = 0i</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17852 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">member = (+ member &quot; &quot;)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17855 [shape=diamond, label=<<font color="black">(= partial.length 0i)</font>> color="black" fillcolor="white" style=filled]
  node17844 [shape=diamond, label=<<font color="black">(&lt; __x2__ __x1__.length)</font>> color="black" fillcolor="white" style=filled]
  node17838 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">1:append value -&gt; state.Stack</td></tr>
      <tr><td align="left">2:let stepback = state.Indent</td></tr>
      <tr><td align="left">3:state.Indent = (+ state.Indent state.Gap)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17848 [shape=diamond, label=<<font color="black">(! (= strP undefined))</font>> color="black" fillcolor="white" style=filled]
  node17834 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node17851 [shape=diamond, label=<<font color="black">(! (= state.Gap &quot;&quot;))</font>> color="black" fillcolor="white" style=filled]
  node17837 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17854 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">__x2__ = (+ __x2__ 1i)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17840 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let K = state.PropertyList</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17845 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let P = __x1__[__x2__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17839 [shape=diamond, label=<<font color="black">(! (= state.PropertyList undefined))</font>> color="black" fillcolor="white" style=filled]
  node17836 [shape=diamond, label=<<font color="black">(contains state.Stack value)</font>> color="black" fillcolor="white" style=filled]
  node17851 -> node17852 [label=<<font color="black">true</font>> color="black"]
  node17851 -> node17853 [label=<<font color="black">false</font>> color="black"]
  node17834 -> node17836 [ color="black"]
  node17848 -> node17849 [label=<<font color="black">true</font>> color="black"]
  node17848 -> node17854 [label=<<font color="black">false</font>> color="black"]
  node17845 -> node17846 [ color="black"]
  node17855 -> node17856 [label=<<font color="black">true</font>> color="black"]
  node17855 -> node17857 [label=<<font color="black">false</font>> color="black"]
  node17837 -> node17838 [ color="black"]
  node17857 -> node17858 [label=<<font color="black">true</font>> color="black"]
  node17857 -> node17859 [label=<<font color="black">false</font>> color="black"]
  node17836 -> node17837 [label=<<font color="black">true</font>> color="black"]
  node17836 -> node17838 [label=<<font color="black">false</font>> color="black"]
  node17850 -> node17851 [ color="black"]
  node17843 -> node17844 [ color="black"]
  node17842 -> node17843 [ color="black"]
  node17841 -> node17842 [ color="black"]
  node17847 -> node17848 [ color="black"]
  node17854 -> node17844 [ color="black"]
  node17849 -> node17850 [ color="black"]
  node17840 -> node17843 [ color="black"]
  node17852 -> node17853 [ color="black"]
  node17844 -> node17845 [label=<<font color="black">true</font>> color="black"]
  node17844 -> node17855 [label=<<font color="black">false</font>> color="black"]
  node17839 -> node17840 [label=<<font color="black">true</font>> color="black"]
  node17839 -> node17841 [label=<<font color="black">false</font>> color="black"]
  node17838 -> node17839 [ color="black"]
  node17846 -> node17847 [ color="black"]
  node17860 -> node17835 [ color="black"]
  node17859 -> node17860 [ color="black"]
  node17858 -> node17860 [ color="black"]
  node17856 -> node17860 [ color="black"]
  node17853 -> node17854 [ color="black"]
}
