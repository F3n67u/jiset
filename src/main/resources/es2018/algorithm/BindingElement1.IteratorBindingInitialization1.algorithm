<algorithm>
  <param>BindingPattern</param>
  <param>Initializer</param>
  <step-list>
    <step>If <id>iteratorRecord</id> .[[Done]] is <value>false</value> , then     <step-list>
      <step>Let <id>next</id> be IteratorStep ( <id>iteratorRecord</id> ).</step>
      <step>If <id>next</id> is an abrupt completion , set <id>iteratorRecord</id> .[[Done]] to <value>true</value> .</step>
      <step>ReturnIfAbrupt ( <id>next</id> ).</step>
      <step>If <id>next</id> is <value>false</value> , set <id>iteratorRecord</id> .[[Done]] to <value>true</value> .</step>
      <step>Else,       <step-list>
        <step>Let <id>v</id> be IteratorValue ( <id>next</id> ).</step>
        <step>If <id>v</id> is an abrupt completion , set <id>iteratorRecord</id> .[[Done]] to <value>true</value> .</step>
        <step>ReturnIfAbrupt ( <id>v</id> ).</step>
      </step-list></step>
    </step-list></step>
    <step>If <id>iteratorRecord</id> .[[Done]] is <value>true</value> , let <id>v</id> be <value>undefined</value> .</step>
    <step>If Initializer is present and <id>v</id> is <value>undefined</value> , then     <step-list>
      <step>Let <id>defaultValue</id> be the result of evaluating Initializer .</step>
      <step>Set <id>v</id> to ? GetValue ( <id>defaultValue</id> ).</step>
    </step-list></step>
    <step>Return the result of performing BindingInitialization of BindingPattern with <id>v</id> and <id>environment</id> as the arguments.</step>
  </step-list>
</algorithm>