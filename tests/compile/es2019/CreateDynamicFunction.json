[{
  "tokens": ["Assert", ":", "The", "execution", "context", "stack", "has", "at", "least", "two", "elements", "."]
}, {
  "tokens": ["Let", {
    "id": "callerContext"
  }, "be", "the", "second", "to", "top", "element", "of", "the", "execution", "context", "stack", "."]
}, {
  "tokens": ["Let", {
    "id": "callerRealm"
  }, "be", {
    "id": "callerContext"
  }, "'", "s", "Realm", "."]
}, {
  "tokens": ["Let", {
    "id": "calleeRealm"
  }, "be", "the", "current", "Realm", "Record", "."]
}, {
  "tokens": ["Perform", "?", "HostEnsureCanCompileStrings", "(", {
    "id": "callerRealm"
  }, ",", {
    "id": "calleeRealm"
  }, ")", "."]
}, {
  "tokens": ["If", {
    "id": "newTarget"
  }, "is", {
    "value": "undefined"
  }, ",", "set", {
    "id": "newTarget"
  }, "to", {
    "id": "constructor"
  }, "."]
}, {
  "tokens": ["If", {
    "id": "kind"
  }, "is", {
    "code": "\"normal\""
  }, ",", "then"]
}, {
  "tokens": ["Let", {
    "id": "goal"
  }, "be", "the", "grammar", "symbol", "|", "FunctionBody", "[", "~", "Yield", ",", "~", "Await", "]", "|", "."]
}, {
  "tokens": ["Let", {
    "id": "parameterGoal"
  }, "be", "the", "grammar", "symbol", "|", "FormalParameters", "[", "~", "Yield", ",", "~", "Await", "]", "|", "."]
}, {
  "tokens": ["Let", {
    "id": "fallbackProto"
  }, "be", {
    "code": "\"%FunctionPrototype%\""
  }, "."]
}, {
  "tokens": ["Else", "if", {
    "id": "kind"
  }, "is", {
    "code": "\"generator\""
  }, ",", "then"]
}, {
  "tokens": ["Let", {
    "id": "goal"
  }, "be", "the", "grammar", "symbol", {
    "nt": "GeneratorBody"
  }, "."]
}, {
  "tokens": ["Let", {
    "id": "parameterGoal"
  }, "be", "the", "grammar", "symbol", "|", "FormalParameters", "[", "+", "Yield", ",", "~", "Await", "]", "|", "."]
}, {
  "tokens": ["Let", {
    "id": "fallbackProto"
  }, "be", {
    "code": "\"%Generator%\""
  }, "."]
}, {
  "tokens": ["Else", "if", {
    "id": "kind"
  }, "is", {
    "code": "\"async\""
  }, ",", "then"]
}, {
  "tokens": ["Let", {
    "id": "goal"
  }, "be", "the", "grammar", "symbol", {
    "nt": "AsyncFunctionBody"
  }, "."]
}, {
  "tokens": ["Let", {
    "id": "parameterGoal"
  }, "be", "the", "grammar", "symbol", "|", "FormalParameters", "[", "~", "Yield", ",", "+", "Await", "]", "|", "."]
}, {
  "tokens": ["Let", {
    "id": "fallbackProto"
  }, "be", {
    "code": "\"%AsyncFunctionPrototype%\""
  }, "."]
}, {
  "tokens": ["Else", ","]
}, {
  "tokens": ["Assert", ":", {
    "id": "kind"
  }, "is", "`", "\"", "async", "generator", "\"", "`", "."]
}, {
  "tokens": ["Let", {
    "id": "goal"
  }, "be", "the", "grammar", "symbol", {
    "nt": "AsyncGeneratorBody"
  }, "."]
}, {
  "tokens": ["Let", {
    "id": "parameterGoal"
  }, "be", "the", "grammar", "symbol", "|", "FormalParameters", "[", "+", "Yield", ",", "+", "Await", "]", "|", "."]
}, {
  "tokens": ["Let", {
    "id": "fallbackProto"
  }, "be", {
    "code": "\"%AsyncGenerator%\""
  }, "."]
}, {
  "tokens": ["Let", {
    "id": "argCount"
  }, "be", "the", "number", "of", "elements", "in", {
    "id": "args"
  }, "."]
}, {
  "tokens": ["Let", {
    "id": "P"
  }, "be", "the", "empty", "String", "."]
}, {
  "tokens": ["If", {
    "id": "argCount"
  }, "=", "0", ",", "let", {
    "id": "bodyText"
  }, "be", "the", "empty", "String", "."]
}, {
  "tokens": ["Else", "if", {
    "id": "argCount"
  }, "=", "1", ",", "let", {
    "id": "bodyText"
  }, "be", {
    "id": "args"
  }, "[", "0", "]", "."]
}, {
  "tokens": ["Else", {
    "id": "argCount"
  }, ">", "1", ","]
}, {
  "tokens": ["Let", {
    "id": "firstArg"
  }, "be", {
    "id": "args"
  }, "[", "0", "]", "."]
}, {
  "tokens": ["Set", {
    "id": "P"
  }, "to", "?", "ToString", "(", {
    "id": "firstArg"
  }, ")", "."]
}, {
  "tokens": ["Let", {
    "id": "k"
  }, "be", "1", "."]
}, {
  "tokens": ["Repeat", ",", "while", {
    "id": "k"
  }, "<", {
    "id": "argCount"
  }, "-", "1"]
}, {
  "tokens": ["Let", {
    "id": "nextArg"
  }, "be", {
    "id": "args"
  }, "[", {
    "id": "k"
  }, "]", "."]
}, {
  "tokens": ["Let", {
    "id": "nextArgString"
  }, "be", "?", "ToString", "(", {
    "id": "nextArg"
  }, ")", "."]
}, {
  "tokens": ["Set", {
    "id": "P"
  }, "to", "the", "string", "-", "concatenation", "of", "the", "previous", "value", "of", {
    "id": "P"
  }, ",", {
    "code": "\",\""
  }, "(", "a", "comma", ")", ",", "and", {
    "id": "nextArgString"
  }, "."]
}, {
  "tokens": ["Increase", {
    "id": "k"
  }, "by", "1", "."]
}, {
  "tokens": ["Let", {
    "id": "bodyText"
  }, "be", {
    "id": "args"
  }, "[", {
    "id": "k"
  }, "]", "."]
}, {
  "tokens": ["Set", {
    "id": "bodyText"
  }, "to", "?", "ToString", "(", {
    "id": "bodyText"
  }, ")", "."]
}, {
  "tokens": ["Let", {
    "id": "parameters"
  }, "be", "the", "result", "of", "parsing", {
    "id": "P"
  }, ",", "interpreted", "as", "UTF", "-", "16", "encoded", "Unicode", "text", "as", "described", "in", {
    "link": ""
  }, ",", "using", {
    "id": "parameterGoal"
  }, "as", "the", "goal", "symbol", ".", "Throw", "a", {
    "value": "SyntaxError"
  }, "exception", "if", "the", "parse", "fails", "."]
}, {
  "tokens": ["Let", {
    "id": "body"
  }, "be", "the", "result", "of", "parsing", {
    "id": "bodyText"
  }, ",", "interpreted", "as", "UTF", "-", "16", "encoded", "Unicode", "text", "as", "described", "in", {
    "link": ""
  }, ",", "using", {
    "id": "goal"
  }, "as", "the", "goal", "symbol", ".", "Throw", "a", {
    "value": "SyntaxError"
  }, "exception", "if", "the", "parse", "fails", "."]
}, {
  "tokens": ["Let", {
    "id": "strict"
  }, "be", "ContainsUseStrict", "of", {
    "id": "body"
  }, "."]
}, {
  "tokens": ["If", "any", "static", "semantics", "errors", "are", "detected", "for", {
    "id": "parameters"
  }, "or", {
    "id": "body"
  }, ",", "throw", "a", {
    "value": "SyntaxError"
  }, "or", "a", {
    "value": "ReferenceError"
  }, "exception", ",", "depending", "on", "the", "type", "of", "the", "error", ".", "If", {
    "id": "strict"
  }, "is", {
    "value": "true"
  }, ",", "the", "Early", "Error", "rules", "for", {
    "grammar": "UniqueFormalParameters0",
    "subs": ["FormalParameters"]
  }, "are", "applied", ".", "Parsing", "and", "early", "error", "detection", "may", "be", "interweaved", "in", "an", "implementation", "-", "dependent", "manner", "."]
}, {
  "tokens": ["If", {
    "id": "strict"
  }, "is", {
    "value": "true"
  }, "and", "IsSimpleParameterList", "of", {
    "id": "parameters"
  }, "is", {
    "value": "false"
  }, ",", "throw", "a", {
    "value": "SyntaxError"
  }, "exception", "."]
}, {
  "tokens": ["If", "any", "element", "of", "the", "BoundNames", "of", {
    "id": "parameters"
  }, "also", "occurs", "in", "the", "LexicallyDeclaredNames", "of", {
    "id": "body"
  }, ",", "throw", "a", {
    "value": "SyntaxError"
  }, "exception", "."]
}, {
  "tokens": ["If", {
    "id": "body"
  }, "Contains", {
    "nt": "SuperCall"
  }, "is", {
    "value": "true"
  }, ",", "throw", "a", {
    "value": "SyntaxError"
  }, "exception", "."]
}, {
  "tokens": ["If", {
    "id": "parameters"
  }, "Contains", {
    "nt": "SuperCall"
  }, "is", {
    "value": "true"
  }, ",", "throw", "a", {
    "value": "SyntaxError"
  }, "exception", "."]
}, {
  "tokens": ["If", {
    "id": "body"
  }, "Contains", {
    "nt": "SuperProperty"
  }, "is", {
    "value": "true"
  }, ",", "throw", "a", {
    "value": "SyntaxError"
  }, "exception", "."]
}, {
  "tokens": ["If", {
    "id": "parameters"
  }, "Contains", {
    "nt": "SuperProperty"
  }, "is", {
    "value": "true"
  }, ",", "throw", "a", {
    "value": "SyntaxError"
  }, "exception", "."]
}, {
  "tokens": ["If", {
    "id": "kind"
  }, "is", {
    "code": "\"generator\""
  }, "or", "`", "\"", "async", "generator", "\"", "`", ",", "then"]
}, {
  "tokens": ["If", {
    "id": "parameters"
  }, "Contains", {
    "nt": "YieldExpression"
  }, "is", {
    "value": "true"
  }, ",", "throw", "a", {
    "value": "SyntaxError"
  }, "exception", "."]
}, {
  "tokens": ["If", {
    "id": "kind"
  }, "is", {
    "code": "\"async\""
  }, "or", "`", "\"", "async", "generator", "\"", "`", ",", "then"]
}, {
  "tokens": ["If", {
    "id": "parameters"
  }, "Contains", {
    "nt": "AwaitExpression"
  }, "is", {
    "value": "true"
  }, ",", "throw", "a", {
    "value": "SyntaxError"
  }, "exception", "."]
}, {
  "tokens": ["If", {
    "id": "strict"
  }, "is", {
    "value": "true"
  }, ",", "then"]
}, {
  "tokens": ["If", "BoundNames", "of", {
    "id": "parameters"
  }, "contains", "any", "duplicate", "elements", ",", "throw", "a", {
    "value": "SyntaxError"
  }, "exception", "."]
}, {
  "tokens": ["Let", {
    "id": "proto"
  }, "be", "?", "GetPrototypeFromConstructor", "(", {
    "id": "newTarget"
  }, ",", {
    "id": "fallbackProto"
  }, ")", "."]
}, {
  "tokens": ["Let", {
    "id": "F"
  }, "be", "FunctionAllocate", "(", {
    "id": "proto"
  }, ",", {
    "id": "strict"
  }, ",", {
    "id": "kind"
  }, ")", "."]
}, {
  "tokens": ["Let", {
    "id": "realmF"
  }, "be", {
    "id": "F"
  }, ".", "[", "[", "Realm", "]", "]", "."]
}, {
  "tokens": ["Let", {
    "id": "scope"
  }, "be", {
    "id": "realmF"
  }, ".", "[", "[", "GlobalEnv", "]", "]", "."]
}, {
  "tokens": ["Perform", "FunctionInitialize", "(", {
    "id": "F"
  }, ",", {
    "const": "Normal"
  }, ",", {
    "id": "parameters"
  }, ",", {
    "id": "body"
  }, ",", {
    "id": "scope"
  }, ")", "."]
}, {
  "tokens": ["If", {
    "id": "kind"
  }, "is", {
    "code": "\"generator\""
  }, ",", "then"]
}, {
  "tokens": ["Let", {
    "id": "prototype"
  }, "be", "ObjectCreate", "(", "%", "GeneratorPrototype", "%", ")", "."]
}, {
  "tokens": ["Perform", "DefinePropertyOrThrow", "(", {
    "id": "F"
  }, ",", {
    "code": "\"prototype\""
  }, ",", "PropertyDescriptor", "{", "[", "[", "Value", "]", "]", ":", {
    "id": "prototype"
  }, ",", "[", "[", "Writable", "]", "]", ":", {
    "value": "true"
  }, ",", "[", "[", "Enumerable", "]", "]", ":", {
    "value": "false"
  }, ",", "[", "[", "Configurable", "]", "]", ":", {
    "value": "false"
  }, "}", ")", "."]
}, {
  "tokens": ["Else", "if", {
    "id": "kind"
  }, "is", "`", "\"", "async", "generator", "\"", "`", ",", "then"]
}, {
  "tokens": ["Let", {
    "id": "prototype"
  }, "be", "ObjectCreate", "(", "%", "AsyncGeneratorPrototype", "%", ")", "."]
}, {
  "tokens": ["Perform", "DefinePropertyOrThrow", "(", {
    "id": "F"
  }, ",", {
    "code": "\"prototype\""
  }, ",", "PropertyDescriptor", "{", "[", "[", "Value", "]", "]", ":", {
    "id": "prototype"
  }, ",", "[", "[", "Writable", "]", "]", ":", {
    "value": "true"
  }, ",", "[", "[", "Enumerable", "]", "]", ":", {
    "value": "false"
  }, ",", "[", "[", "Configurable", "]", "]", ":", {
    "value": "false"
  }, "}", ")", "."]
}, {
  "tokens": ["Else", "if", {
    "id": "kind"
  }, "is", {
    "code": "\"normal\""
  }, ",", "perform", "MakeConstructor", "(", {
    "id": "F"
  }, ")", "."]
}, {
  "tokens": ["NOTE", ":", "Async", "functions", "are", "not", "constructable", "and", "do", "not", "have", "a", "[", "[", "Construct", "]", "]", "internal", "method", "or", "a", {
    "code": "\"prototype\""
  }, "property", "."]
}, {
  "tokens": ["Perform", "SetFunctionName", "(", {
    "id": "F"
  }, ",", {
    "code": "\"anonymous\""
  }, ")", "."]
}, {
  "tokens": ["Let", {
    "id": "prefix"
  }, "be", "the", "prefix", "associated", "with", {
    "id": "kind"
  }, "in", {
    "link": ""
  }, "."]
}, {
  "tokens": ["Let", {
    "id": "sourceText"
  }, "be", "the", "string", "-", "concatenation", "of", {
    "id": "prefix"
  }, ",", "`", "\"", "anonymous", "(", "\"", "`", ",", {
    "id": "P"
  }, ",", "0x000A", "(", "LINE", "FEED", ")", ",", "`", "\"", ")", "{", "\"", "`", ",", "0x000A", "(", "LINE", "FEED", ")", ",", {
    "id": "bodyText"
  }, ",", "0x000A", "(", "LINE", "FEED", ")", ",", "and", {
    "code": "\"}\""
  }, "."]
}, {
  "tokens": ["Set", {
    "id": "F"
  }, ".", "[", "[", "SourceText", "]", "]", "to", {
    "id": "sourceText"
  }, "."]
}, {
  "tokens": ["Return", {
    "id": "F"
  }, "."]
}]