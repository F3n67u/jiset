{
  access __x0__ = (UnaryExpression "Evaluation")
  let ref = __x0__
  [? ref]
  if (! (is-instance-of ref ReferenceRecord)) return true else {}
  app __x1__ = (IsUnresolvableReference ref)
  if (= __x1__ true) {
    assert (= ref.Strict false)
    return true
  } else {}
  app __x2__ = (IsPropertyReference ref)
  if (= __x2__ true) {
    app __x3__ = (IsSuperReference ref)
    if (= __x3__ true) throw ReferenceError else {}
    app __x4__ = (ToObject ref.Base)
    let baseObj = [! __x4__]
    app __x5__ = (baseObj.Delete baseObj ref.ReferencedName)
    let deleteStatus = [? __x5__]
    if (&& (= deleteStatus false) (= ref.Strict true)) throw TypeError else {}
    return deleteStatus
  } else {
    let base = ref.Base
    app __x6__ = (base.DeleteBinding base ref.ReferencedName)
    return [? __x6__]
  }
}