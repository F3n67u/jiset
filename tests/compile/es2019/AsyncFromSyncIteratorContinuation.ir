{
  app result = (GetArgument argumentsList 0i)
  app promiseCapability = (GetArgument argumentsList 1i)
  [0] app __x0__ = (IteratorComplete result)
  [0] let done = __x0__
  [1] if (is-completion done) if (= done.Type CONST_normal) done = done.Value else {
    app __x1__ = (Call promiseCapability.Reject undefined (new [done.Value]))
    if (&& (is-completion __x1__) (! (= __x1__.Type CONST_normal))) return __x1__ else [22] {}
    return promiseCapability.Promise
  } else [22] {}
  [1] done
  [2] app __x2__ = (IteratorValue result)
  [2] let value = __x2__
  [3] if (is-completion value) if (= value.Type CONST_normal) value = value.Value else {
    app __x3__ = (Call promiseCapability.Reject undefined (new [value.Value]))
    if (&& (is-completion __x3__) (! (= __x3__.Type CONST_normal))) return __x3__ else [22] {}
    return promiseCapability.Promise
  } else [22] {}
  [3] value
  [4] app __x4__ = (PromiseResolve INTRINSIC_Promise (new [value]))
  [4] if (is-completion __x4__) if (= __x4__.Type CONST_normal) __x4__ = __x4__.Value else return __x4__ else [22] {}
  [4] let valueWrapper = __x4__
  [5] ??? "Let id:{steps} be the algorithm steps defined in link:{} ."
  [6] app __x5__ = (CreateBuiltinFunction steps (new ["Done"]))
  [6] let onFulfilled = __x5__
  [7] onFulfilled.Done = done
  [8] app __x6__ = (PerformPromiseThen valueWrapper onFulfilled undefined promiseCapability)
  [8] if (is-completion __x6__) if (= __x6__.Type CONST_normal) __x6__ = __x6__.Value else return __x6__ else [22] {}
  [8] __x6__
  [9] app __x7__ = (WrapCompletion promiseCapability.Promise)
  [9] return __x7__
}