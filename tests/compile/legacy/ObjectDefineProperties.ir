{
  if (! (= (typeof O) Object)) throw TypeError else {}
  app __x0__ = (ToObject Properties)
  let props = [? __x0__]
  app __x1__ = (props.OwnPropertyKeys props)
  let keys = [? __x1__]
  let descriptors = (new [])
  let __x2__ = keys
  let __x3__ = 0i
  while (< __x3__ __x2__.length) {
    let nextKey = __x2__[__x3__]
    app __x4__ = (props.GetOwnProperty props nextKey)
    let propDesc = [? __x4__]
    if (&& (! (= propDesc undefined)) (= propDesc.Enumerable true)) {
      app __x5__ = (Get props nextKey)
      let descObj = [? __x5__]
      app __x6__ = (ToPropertyDescriptor descObj)
      let desc = [? __x6__]
      append (new [nextKey, desc]) -> descriptors
    } else {}
    __x3__ = (+ __x3__ 1i)
  }
  let __x7__ = descriptors
  let __x8__ = 0i
  while (< __x8__ __x7__.length) {
    let pair = __x7__[__x8__]
    let P = pair[0i]
    let desc = pair[1i]
    app __x9__ = (DefinePropertyOrThrow O P desc)
    [? __x9__]
    __x8__ = (+ __x8__ 1i)
  }
  return O
}