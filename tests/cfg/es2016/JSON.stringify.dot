digraph {
  node0 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node5 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let stack = (new [])</td></tr>
      <tr><td align="left">1:let indent = &quot;&quot;</td></tr>
      <tr><td align="left">2:let PropertyList = undefined</td></tr>
      <tr><td align="left">2:let ReplacerFunction = undefined</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10 [shape=cds, label=<<font color="black">7:app __x1__ = (IsArray replacer)</font>> color="black" fillcolor="white" style=filled]
  node14 [shape=cds, label=<<font color="black">10:app __x2__ = (Get replacer &quot;length&quot;)</font>> color="black" fillcolor="white" style=filled]
  node1 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node6 [shape=diamond, label=<<font color="black">(= (typeof replacer) Object)</font>> color="black" fillcolor="white" style=filled]
  node9 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let ReplacerFunction = replacer</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node2 [shape=cds, label=<<font color="black">app value = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node12 [shape=diamond, label=<<font color="black">(= isArray true)</font>> color="black" fillcolor="white" style=filled]
  node8 [shape=diamond, label=<<font color="black">(= __x0__ true)</font>> color="black" fillcolor="white" style=filled]
  node4 [shape=cds, label=<<font color="black">app space = (GetArgument argumentsList 2i)</font>> color="black" fillcolor="white" style=filled]
  node42 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">gap = &quot;&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node24 [shape=cds, label=<<font color="black">app __x6__ = (ToString v)</font>> color="black" fillcolor="white" style=filled]
  node37 [shape=cds, label=<<font color="black">28:app __x9__ = (ToInteger space)</font>> color="black" fillcolor="white" style=filled]
  node25 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let item = [! __x6__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node20 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">13:let v = [? __x5__]</td></tr>
      <tr><td align="left">14:let item = undefined</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node46 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">35:let status = __x12__</td></tr>
      <tr><td align="left">36:assert (= status true)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node29 [shape=diamond, label=<<font color="black">(= (typeof space) Object)</font>> color="black" fillcolor="white" style=filled]
  node21 [shape=diamond, label=<<font color="black">(= (typeof v) String)</font>> color="black" fillcolor="white" style=filled]
  node33 [shape=diamond, label=<<font color="black">(! (= space.StringData absent))</font>> color="black" fillcolor="white" style=filled]
  node28 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">19:??? &quot;If id:{item} is not value:{undefined} and id:{item} is not currently an element of id:{PropertyList} , then in:{} out:{}&quot;</td></tr>
      <tr><td align="left">21:let k = (+ k 1i)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node38 [shape=cds, label=<<font color="black">28:app __x10__ = (min 10i __x9__)</font>> color="black" fillcolor="white" style=filled]
  node13 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">9:let PropertyList = (new [])</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node41 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">??? &quot;If the number of elements in id:{space} is 10 or less , set id:{gap} to id:{space} ; otherwise set id:{gap} to a String consisting of the first 10 elements of id:{space} .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node45 [shape=cds, label=<<font color="black">35:app __x12__ = (CreateDataProperty wrapper &quot;&quot; value)</font>> color="black" fillcolor="white" style=filled]
  node17 [shape=diamond, label=<<font color="black">(&lt; k len)</font>> color="black" fillcolor="white" style=filled]
  node32 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">24:let space = [? __x7__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node34 [shape=cds, label=<<font color="black">26:app __x8__ = (ToString space)</font>> color="black" fillcolor="white" style=filled]
  node22 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let item = v</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node44 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">34:let wrapper = __x11__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node27 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">??? &quot;If id:{v} has a [ [ StringData ] ] or [ [ NumberData ] ] internal slot , let id:{item} be ? ToString ( id:{v} ) .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node7 [shape=cds, label=<<font color="black">6:app __x0__ = (IsCallable replacer)</font>> color="black" fillcolor="white" style=filled]
  node39 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">28:let space = __x10__</td></tr>
      <tr><td align="left">29:??? &quot;Set id:{gap} to a String containing id:{space} occurrences of code unit 0x0020 ( SPACE ) . This will be the empty String if id:{space} is less than 1 .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node3 [shape=cds, label=<<font color="black">app replacer = (GetArgument argumentsList 1i)</font>> color="black" fillcolor="white" style=filled]
  node35 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">26:let space = [? __x8__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node48 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">37:return [? __x13__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18 [shape=cds, label=<<font color="black">13:app __x4__ = (ToString k)</font>> color="black" fillcolor="white" style=filled]
  node16 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">10:let len = [? __x3__]</td></tr>
      <tr><td align="left">11:let k = 0i</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node31 [shape=cds, label=<<font color="black">24:app __x7__ = (ToNumber space)</font>> color="black" fillcolor="white" style=filled]
  node11 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">7:let isArray = [? __x1__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node43 [shape=cds, label=<<font color="black">34:app __x11__ = (ObjectCreate INTRINSIC_ObjectPrototype)</font>> color="black" fillcolor="white" style=filled]
  node40 [shape=diamond, label=<<font color="black">(= (typeof space) String)</font>> color="black" fillcolor="white" style=filled]
  node26 [shape=diamond, label=<<font color="black">(= (typeof v) Object)</font>> color="black" fillcolor="white" style=filled]
  node23 [shape=diamond, label=<<font color="black">(= (typeof v) Number)</font>> color="black" fillcolor="white" style=filled]
  node36 [shape=diamond, label=<<font color="black">(= (typeof space) Number)</font>> color="black" fillcolor="white" style=filled]
  node30 [shape=diamond, label=<<font color="black">(! (= space.NumberData absent))</font>> color="black" fillcolor="white" style=filled]
  node19 [shape=cds, label=<<font color="black">13:app __x5__ = (Get replacer [! __x4__])</font>> color="black" fillcolor="white" style=filled]
  node47 [shape=cds, label=<<font color="black">37:app __x13__ = (SerializeJSONProperty &quot;&quot; wrapper)</font>> color="black" fillcolor="white" style=filled]
  node15 [shape=cds, label=<<font color="black">10:app __x3__ = (ToLength [? __x2__])</font>> color="black" fillcolor="white" style=filled]
  node33 -> node34 [label=<<font color="black">true</font>> color="black"]
  node33 -> node36 [label=<<font color="black">false</font>> color="black"]
  node40 -> node41 [label=<<font color="black">true</font>> color="black"]
  node40 -> node42 [label=<<font color="black">false</font>> color="black"]
  node26 -> node27 [label=<<font color="black">true</font>> color="black"]
  node26 -> node28 [label=<<font color="black">false</font>> color="black"]
  node12 -> node13 [label=<<font color="black">true</font>> color="black"]
  node12 -> node29 [label=<<font color="black">false</font>> color="black"]
  node9 -> node29 [ color="black"]
  node39 -> node43 [ color="black"]
  node4 -> node5 [ color="black"]
  node30 -> node31 [label=<<font color="black">true</font>> color="black"]
  node30 -> node33 [label=<<font color="black">false</font>> color="black"]
  node8 -> node9 [label=<<font color="black">true</font>> color="black"]
  node8 -> node10 [label=<<font color="black">false</font>> color="black"]
  node38 -> node39 [ color="black"]
  node48 -> node1 [ color="black"]
  node5 -> node6 [ color="black"]
  node3 -> node4 [ color="black"]
  node25 -> node28 [ color="black"]
  node7 -> node8 [ color="black"]
  node6 -> node7 [label=<<font color="black">true</font>> color="black"]
  node6 -> node29 [label=<<font color="black">false</font>> color="black"]
  node18 -> node19 [ color="black"]
  node42 -> node43 [ color="black"]
  node34 -> node35 [ color="black"]
  node2 -> node3 [ color="black"]
  node23 -> node24 [label=<<font color="black">true</font>> color="black"]
  node23 -> node26 [label=<<font color="black">false</font>> color="black"]
  node15 -> node16 [ color="black"]
  node11 -> node12 [ color="black"]
  node22 -> node28 [ color="black"]
  node19 -> node20 [ color="black"]
  node13 -> node14 [ color="black"]
  node35 -> node36 [ color="black"]
  node45 -> node46 [ color="black"]
  node29 -> node30 [label=<<font color="black">true</font>> color="black"]
  node29 -> node36 [label=<<font color="black">false</font>> color="black"]
  node0 -> node2 [ color="black"]
  node43 -> node44 [ color="black"]
  node21 -> node22 [label=<<font color="black">true</font>> color="black"]
  node21 -> node23 [label=<<font color="black">false</font>> color="black"]
  node44 -> node45 [ color="black"]
  node27 -> node28 [ color="black"]
  node37 -> node38 [ color="black"]
  node14 -> node15 [ color="black"]
  node31 -> node32 [ color="black"]
  node10 -> node11 [ color="black"]
  node32 -> node36 [ color="black"]
  node28 -> node17 [ color="black"]
  node47 -> node48 [ color="black"]
  node36 -> node37 [label=<<font color="black">true</font>> color="black"]
  node36 -> node40 [label=<<font color="black">false</font>> color="black"]
  node17 -> node18 [label=<<font color="black">true</font>> color="black"]
  node17 -> node29 [label=<<font color="black">false</font>> color="black"]
  node41 -> node43 [ color="black"]
  node20 -> node21 [ color="black"]
  node24 -> node25 [ color="black"]
  node16 -> node17 [ color="black"]
  node46 -> node47 [ color="black"]
}
