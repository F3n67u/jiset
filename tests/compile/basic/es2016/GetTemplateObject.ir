{
  access __x0__ = (templateLiteral "TemplateStrings")
  app __x1__ = (__x0__ true)
  let rawStrings = __x1__
  let realm = REALM
  let templateRegistry = realm.TemplateMap
  let __x2__ = templateRegistry
  let __x3__ = 0i
  while (< __x3__ __x2__.length) {
    let e = __x2__[__x3__]
    ??? "If id:{e} . [ [ Strings ] ] and id:{rawStrings} contain the same values in the same order , then in:{} out:{}"
    __x3__ = (+ __x3__ 1i)
  }
  access __x4__ = (templateLiteral "TemplateStrings")
  app __x5__ = (__x4__ false)
  let cookedStrings = __x5__
  let count = cookedStrings.length
  app __x6__ = (ArrayCreate count)
  let template = __x6__
  app __x7__ = (ArrayCreate count)
  let rawObj = __x7__
  let index = 0i
  while (< index count) {
    app __x8__ = (ToString index)
    let prop = [! __x8__]
    let cookedValue = cookedStrings[index]
    app __x9__ = (template.DefineOwnProperty template prop (new PropertyDescriptor("Value" -> cookedValue, "Writable" -> false, "Enumerable" -> true, "Configurable" -> false)))
    __x9__
    let rawValue = rawStrings[index]
    app __x10__ = (rawObj.DefineOwnProperty rawObj prop (new PropertyDescriptor("Value" -> rawValue, "Writable" -> false, "Enumerable" -> true, "Configurable" -> false)))
    __x10__
    let index = (+ index 1i)
  }
  app __x11__ = (SetIntegrityLevel rawObj "frozen")
  __x11__
  app __x12__ = (template.DefineOwnProperty template "raw" (new PropertyDescriptor("Value" -> rawObj, "Writable" -> false, "Enumerable" -> false, "Configurable" -> false)))
  __x12__
  app __x13__ = (SetIntegrityLevel template "frozen")
  __x13__
  append (new Record("Strings" -> rawStrings, "Array" -> template)) -> templateRegistry
  return template
}