{
  access __x0__ = (FunctionStatementList "LexicallyDeclaredNames")
  app __x1__ = (IsDuplicate __x0__)
  if __x1__ throw INTRINSIC_SyntaxError else {
    app __x2__ = (NormalCompletion undefined)
    return __x2__
  }
  access __x3__ = (FunctionStatementList "LexicallyDeclaredNames")
  access __x4__ = (FunctionStatementList "VarDeclaredNames")
  let __x5__ = __x3__
  let __x6__ = __x4__
  let __x7__ = 0i
  let __x8__ = 0i
  let __x9__ = false
  while (< __x7__ __x5__.length) {
    __x8__ = 0i
    while (< __x8__ __x6__.length) if (= __x5__[__x7__] __x6__[__x8__]) __x9__ = true else {}
  }
  if __x9__ throw INTRINSIC_SyntaxError else {
    app __x10__ = (NormalCompletion undefined)
    return __x10__
  }
  access __x11__ = (FunctionStatementList "ContainsDuplicateLabels")
  app __x12__ = (__x11__ (new []))
  if (= __x12__ true) throw INTRINSIC_SyntaxError else {
    app __x13__ = (NormalCompletion undefined)
    return __x13__
  }
  access __x14__ = (FunctionStatementList "ContainsUndefinedBreakTarget")
  app __x15__ = (__x14__ (new []))
  if (= __x15__ true) throw INTRINSIC_SyntaxError else {
    app __x16__ = (NormalCompletion undefined)
    return __x16__
  }
  access __x17__ = (FunctionStatementList "ContainsUndefinedContinueTarget")
  app __x18__ = (__x17__ (new []) (new []))
  if (= __x18__ true) throw INTRINSIC_SyntaxError else {
    app __x19__ = (NormalCompletion undefined)
    return __x19__
  }
}