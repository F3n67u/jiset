digraph {
  node18284 [shape=diamond, label=<<font color="black">(= __x10__ Object)</font>> color="black" fillcolor="white" style=filled]
  node18265 [shape=cds, label=<<font color="black">10:app __x3__ = (LengthOfArrayLike replacer)</font>> color="black" fillcolor="white" style=filled]
  node18269 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">13:let prop = [! __x4__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18257 [shape=diamond, label=<<font color="black">(= __x0__ Object)</font>> color="black" fillcolor="white" style=filled]
  node18290 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">27:space = [? __x12__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18271 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">14:let v = [? __x5__]</td></tr>
      <tr><td align="left">15:let item = undefined</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18295 [shape=cds, label=<<font color="black">30:app __x15__ = (min 10i spaceMV)</font>> color="black" fillcolor="white" style=filled]
  node18285 [shape=diamond, label=<<font color="black">(! (= space.NumberData absent))</font>> color="black" fillcolor="white" style=filled]
  node18279 [shape=cds, label=<<font color="black">app __x9__ = (Type v)</font>> color="black" fillcolor="white" style=filled]
  node18272 [shape=cds, label=<<font color="black">18:app __x6__ = (Type v)</font>> color="black" fillcolor="white" style=filled]
  node18297 [shape=cds, label=<<font color="black">app __x16__ = (Type space)</font>> color="black" fillcolor="white" style=filled]
  node18304 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">37:[! __x18__]</td></tr>
      <tr><td align="left">38:let state = (new Record(&quot;ReplacerFunction&quot; -&gt; ReplacerFunction, &quot;Stack&quot; -&gt; stack, &quot;Indent&quot; -&gt; indent, &quot;Gap&quot; -&gt; gap, &quot;PropertyList&quot; -&gt; PropertyList))</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18252 [shape=cds, label=<<font color="black">app value = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node18292 [shape=diamond, label=<<font color="black">(= __x13__ Number)</font>> color="black" fillcolor="white" style=filled]
  node18264 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">9:PropertyList = (new [])</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18273 [shape=diamond, label=<<font color="black">(= __x6__ String)</font>> color="black" fillcolor="white" style=filled]
  node18301 [shape=cds, label=<<font color="black">36:app __x17__ = (OrdinaryObjectCreate INTRINSIC_Object_prototype)</font>> color="black" fillcolor="white" style=filled]
  node18260 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">ReplacerFunction = replacer</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18296 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">30:spaceMV = __x15__</td></tr>
      <tr><td align="left">31:??? &quot;If id:{spaceMV} &lt; 1 , let id:{gap} be the empty String ; otherwise let id:{gap} be the String value containing id:{spaceMV} occurrences of the code unit 0x0020 ( SPACE ) .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18286 [shape=cds, label=<<font color="black">25:app __x11__ = (ToNumber space)</font>> color="black" fillcolor="white" style=filled]
  node18261 [shape=cds, label=<<font color="black">7:app __x2__ = (IsArray replacer)</font>> color="black" fillcolor="white" style=filled]
  node18251 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node18300 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let gap = &quot;&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18283 [shape=cds, label=<<font color="black">23:app __x10__ = (Type space)</font>> color="black" fillcolor="white" style=filled]
  node18268 [shape=cds, label=<<font color="black">13:app __x4__ = (ToString k)</font>> color="black" fillcolor="white" style=filled]
  node18293 [shape=cds, label=<<font color="black">29:app __x14__ = (ToIntegerOrInfinity space)</font>> color="black" fillcolor="white" style=filled]
  node18303 [shape=cds, label=<<font color="black">37:app __x18__ = (CreateDataPropertyOrThrow wrapper &quot;&quot; value)</font>> color="black" fillcolor="white" style=filled]
  node18306 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">39:return [? __x19__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18287 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">25:space = [? __x11__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18289 [shape=cds, label=<<font color="black">27:app __x12__ = (ToString space)</font>> color="black" fillcolor="white" style=filled]
  node18274 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">item = v</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18276 [shape=diamond, label=<<font color="black">(= __x7__ Number)</font>> color="black" fillcolor="white" style=filled]
  node18255 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let stack = (new [])</td></tr>
      <tr><td align="left">1:let indent = &quot;&quot;</td></tr>
      <tr><td align="left">2:let PropertyList = undefined</td></tr>
      <tr><td align="left">2:let ReplacerFunction = undefined</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18280 [shape=diamond, label=<<font color="black">(= __x9__ Object)</font>> color="black" fillcolor="white" style=filled]
  node18302 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">36:let wrapper = [! __x17__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18262 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">7:let isArray = [? __x2__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18267 [shape=diamond, label=<<font color="black">(&lt; k len)</font>> color="black" fillcolor="white" style=filled]
  node18299 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">??? &quot;If the length of id:{space} is 10 or less , let id:{gap} be id:{space} ; otherwise let id:{gap} be the substring of id:{space} from 0 to 10 .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18250 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node18282 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">20:??? &quot;If id:{item} is not value:{undefined} and id:{item} is not currently an element of id:{PropertyList} , then in:{} out:{}&quot;</td></tr>
      <tr><td align="left">22:k = (+ k 1i)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18277 [shape=cds, label=<<font color="black">app __x8__ = (ToString v)</font>> color="black" fillcolor="white" style=filled]
  node18270 [shape=cds, label=<<font color="black">14:app __x5__ = (Get replacer prop)</font>> color="black" fillcolor="white" style=filled]
  node18254 [shape=cds, label=<<font color="black">app space = (GetArgument argumentsList 2i)</font>> color="black" fillcolor="white" style=filled]
  node18294 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">29:let spaceMV = [! __x14__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18275 [shape=cds, label=<<font color="black">app __x7__ = (Type v)</font>> color="black" fillcolor="white" style=filled]
  node18258 [shape=cds, label=<<font color="black">6:app __x1__ = (IsCallable replacer)</font>> color="black" fillcolor="white" style=filled]
  node18256 [shape=cds, label=<<font color="black">3:app __x0__ = (Type replacer)</font>> color="black" fillcolor="white" style=filled]
  node18281 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">??? &quot;If id:{v} has a [ [ StringData ] ] or [ [ NumberData ] ] internal slot , set id:{item} to ? ToString ( id:{v} ) .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18266 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">10:let len = [? __x3__]</td></tr>
      <tr><td align="left">11:let k = 0i</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18298 [shape=diamond, label=<<font color="black">(= __x16__ String)</font>> color="black" fillcolor="white" style=filled]
  node18305 [shape=cds, label=<<font color="black">39:app __x19__ = (SerializeJSONProperty state &quot;&quot; wrapper)</font>> color="black" fillcolor="white" style=filled]
  node18288 [shape=diamond, label=<<font color="black">(! (= space.StringData absent))</font>> color="black" fillcolor="white" style=filled]
  node18263 [shape=diamond, label=<<font color="black">(= isArray true)</font>> color="black" fillcolor="white" style=filled]
  node18253 [shape=cds, label=<<font color="black">app replacer = (GetArgument argumentsList 1i)</font>> color="black" fillcolor="white" style=filled]
  node18278 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">item = [! __x8__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18291 [shape=cds, label=<<font color="black">34:app __x13__ = (Type space)</font>> color="black" fillcolor="white" style=filled]
  node18259 [shape=diamond, label=<<font color="black">(= __x1__ true)</font>> color="black" fillcolor="white" style=filled]
  node18302 -> node18303 [ color="black"]
  node18282 -> node18267 [ color="black"]
  node18294 -> node18295 [ color="black"]
  node18305 -> node18306 [ color="black"]
  node18267 -> node18268 [label=<<font color="black">true</font>> color="black"]
  node18267 -> node18283 [label=<<font color="black">false</font>> color="black"]
  node18250 -> node18252 [ color="black"]
  node18299 -> node18301 [ color="black"]
  node18301 -> node18302 [ color="black"]
  node18271 -> node18272 [ color="black"]
  node18285 -> node18286 [label=<<font color="black">true</font>> color="black"]
  node18285 -> node18288 [label=<<font color="black">false</font>> color="black"]
  node18280 -> node18281 [label=<<font color="black">true</font>> color="black"]
  node18280 -> node18282 [label=<<font color="black">false</font>> color="black"]
  node18257 -> node18258 [label=<<font color="black">true</font>> color="black"]
  node18257 -> node18283 [label=<<font color="black">false</font>> color="black"]
  node18290 -> node18291 [ color="black"]
  node18279 -> node18280 [ color="black"]
  node18289 -> node18290 [ color="black"]
  node18287 -> node18291 [ color="black"]
  node18293 -> node18294 [ color="black"]
  node18255 -> node18256 [ color="black"]
  node18284 -> node18285 [label=<<font color="black">true</font>> color="black"]
  node18284 -> node18291 [label=<<font color="black">false</font>> color="black"]
  node18259 -> node18260 [label=<<font color="black">true</font>> color="black"]
  node18259 -> node18261 [label=<<font color="black">false</font>> color="black"]
  node18283 -> node18284 [ color="black"]
  node18252 -> node18253 [ color="black"]
  node18263 -> node18264 [label=<<font color="black">true</font>> color="black"]
  node18263 -> node18283 [label=<<font color="black">false</font>> color="black"]
  node18298 -> node18299 [label=<<font color="black">true</font>> color="black"]
  node18298 -> node18300 [label=<<font color="black">false</font>> color="black"]
  node18264 -> node18265 [ color="black"]
  node18286 -> node18287 [ color="black"]
  node18291 -> node18292 [ color="black"]
  node18276 -> node18277 [label=<<font color="black">true</font>> color="black"]
  node18276 -> node18279 [label=<<font color="black">false</font>> color="black"]
  node18262 -> node18263 [ color="black"]
  node18295 -> node18296 [ color="black"]
  node18292 -> node18293 [label=<<font color="black">true</font>> color="black"]
  node18292 -> node18297 [label=<<font color="black">false</font>> color="black"]
  node18300 -> node18301 [ color="black"]
  node18281 -> node18282 [ color="black"]
  node18272 -> node18273 [ color="black"]
  node18296 -> node18301 [ color="black"]
  node18256 -> node18257 [ color="black"]
  node18273 -> node18274 [label=<<font color="black">true</font>> color="black"]
  node18273 -> node18275 [label=<<font color="black">false</font>> color="black"]
  node18268 -> node18269 [ color="black"]
  node18260 -> node18283 [ color="black"]
  node18277 -> node18278 [ color="black"]
  node18288 -> node18289 [label=<<font color="black">true</font>> color="black"]
  node18288 -> node18291 [label=<<font color="black">false</font>> color="black"]
  node18278 -> node18282 [ color="black"]
  node18261 -> node18262 [ color="black"]
  node18253 -> node18254 [ color="black"]
  node18266 -> node18267 [ color="black"]
  node18304 -> node18305 [ color="black"]
  node18297 -> node18298 [ color="black"]
  node18275 -> node18276 [ color="black"]
  node18306 -> node18251 [ color="black"]
  node18269 -> node18270 [ color="black"]
  node18258 -> node18259 [ color="black"]
  node18274 -> node18282 [ color="black"]
  node18303 -> node18304 [ color="black"]
  node18270 -> node18271 [ color="black"]
  node18254 -> node18255 [ color="black"]
  node18265 -> node18266 [ color="black"]
}
