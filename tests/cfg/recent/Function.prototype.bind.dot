digraph {
  node0 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node5 [shape=cds, label=<<font color="black">1:app __x0__ = (IsCallable Target)</font>> color="black" fillcolor="white" style=filled]
  node10 [shape=cds, label=<<font color="black">4:app __x2__ = (HasOwnProperty Target &quot;length&quot;)</font>> color="black" fillcolor="white" style=filled]
  node14 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">6:let targetLen = [? __x3__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node1 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node6 [shape=diamond, label=<<font color="black">(= __x0__ false)</font>> color="black" fillcolor="white" style=filled]
  node9 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">2:let F = [? __x1__]</td></tr>
      <tr><td align="left">3:let L = 0i</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node13 [shape=cds, label=<<font color="black">6:app __x3__ = (Get Target &quot;length&quot;)</font>> color="black" fillcolor="white" style=filled]
  node2 [shape=cds, label=<<font color="black">app thisArg = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node12 [shape=diamond, label=<<font color="black">(= targetHasLength true)</font>> color="black" fillcolor="white" style=filled]
  node7 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node3 [shape=cds, label=<<font color="black">app args = (GetArgument argumentsList 1i)</font>> color="black" fillcolor="white" style=filled]
  node18 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">L = Infinity</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">4:let targetHasLength = [? __x2__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node8 [shape=cds, label=<<font color="black">2:app __x1__ = (BoundFunctionCreate Target thisArg args)</font>> color="black" fillcolor="white" style=filled]
  node4 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let Target = this</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15 [shape=cds, label=<<font color="black">7:app __x4__ = (Type targetLen)</font>> color="black" fillcolor="white" style=filled]
  node24 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">14:L = __x6__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node25 [shape=cds, label=<<font color="black">15:app __x7__ = (SetFunctionLength F L)</font>> color="black" fillcolor="white" style=filled]
  node20 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">L = 0i</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node29 [shape=cds, label=<<font color="black">17:app __x9__ = (Type targetName)</font>> color="black" fillcolor="white" style=filled]
  node28 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">16:let targetName = [? __x8__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node21 [shape=cds, label=<<font color="black">11:app __x5__ = (ToIntegerOrInfinity targetLen)</font>> color="black" fillcolor="white" style=filled]
  node33 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">18:__x10__</td></tr>
      <tr><td align="left">19:return F</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node32 [shape=cds, label=<<font color="black">18:app __x10__ = (SetFunctionName F targetName &quot;bound&quot;)</font>> color="black" fillcolor="white" style=filled]
  node17 [shape=diamond, label=<<font color="black">(= targetLen Infinity)</font>> color="black" fillcolor="white" style=filled]
  node22 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">11:let targetLenAsInt = [! __x5__]</td></tr>
      <tr><td align="left">12:assert (! (|| (= targetLenAsInt Infinity) (= targetLenAsInt -Infinity)))</td></tr>
      <tr><td align="left">13:let argCount = args.length</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node27 [shape=cds, label=<<font color="black">16:app __x8__ = (Get Target &quot;name&quot;)</font>> color="black" fillcolor="white" style=filled]
  node16 [shape=diamond, label=<<font color="black">(= __x4__ Number)</font>> color="black" fillcolor="white" style=filled]
  node31 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">targetName = &quot;&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node26 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">15:[! __x7__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node23 [shape=cds, label=<<font color="black">14:app __x6__ = (max (- targetLenAsInt argCount) 0i)</font>> color="black" fillcolor="white" style=filled]
  node30 [shape=diamond, label=<<font color="black">(! (= __x9__ String))</font>> color="black" fillcolor="white" style=filled]
  node19 [shape=diamond, label=<<font color="black">(= targetLen -Infinity)</font>> color="black" fillcolor="white" style=filled]
  node20 -> node25 [ color="black"]
  node11 -> node12 [ color="black"]
  node13 -> node14 [ color="black"]
  node22 -> node23 [ color="black"]
  node9 -> node10 [ color="black"]
  node30 -> node31 [label=<<font color="black">true</font>> color="black"]
  node30 -> node32 [label=<<font color="black">false</font>> color="black"]
  node26 -> node27 [ color="black"]
  node10 -> node11 [ color="black"]
  node4 -> node5 [ color="black"]
  node25 -> node26 [ color="black"]
  node24 -> node25 [ color="black"]
  node32 -> node33 [ color="black"]
  node17 -> node18 [label=<<font color="black">true</font>> color="black"]
  node17 -> node19 [label=<<font color="black">false</font>> color="black"]
  node12 -> node13 [label=<<font color="black">true</font>> color="black"]
  node12 -> node25 [label=<<font color="black">false</font>> color="black"]
  node5 -> node6 [ color="black"]
  node3 -> node4 [ color="black"]
  node28 -> node29 [ color="black"]
  node29 -> node30 [ color="black"]
  node6 -> node7 [label=<<font color="black">true</font>> color="black"]
  node6 -> node8 [label=<<font color="black">false</font>> color="black"]
  node7 -> node8 [ color="black"]
  node2 -> node3 [ color="black"]
  node15 -> node16 [ color="black"]
  node33 -> node1 [ color="black"]
  node0 -> node2 [ color="black"]
  node19 -> node20 [label=<<font color="black">true</font>> color="black"]
  node19 -> node21 [label=<<font color="black">false</font>> color="black"]
  node27 -> node28 [ color="black"]
  node16 -> node17 [label=<<font color="black">true</font>> color="black"]
  node16 -> node25 [label=<<font color="black">false</font>> color="black"]
  node18 -> node25 [ color="black"]
  node23 -> node24 [ color="black"]
  node14 -> node15 [ color="black"]
  node31 -> node32 [ color="black"]
  node8 -> node9 [ color="black"]
  node21 -> node22 [ color="black"]
}
