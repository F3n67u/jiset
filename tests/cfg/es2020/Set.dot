digraph {
  node16676 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16698 [shape=diamond, label=<<font color="black">__x7__</font>> color="black" fillcolor="white" style=filled]
  node16688 [shape=diamond, label=<<font color="black">true</font>> color="black" fillcolor="white" style=filled]
  node16672 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node16697 [shape=cds, label=<<font color="black">12:app __x7__ = (IsAbruptCompletion status)</font>> color="black" fillcolor="white" style=filled]
  node16687 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">6:let iteratorRecord = [? __x3__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16673 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node16694 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">10:let nextValue = [? __x5__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16691 [shape=diamond, label=<<font color="black">(= next false)</font>> color="black" fillcolor="white" style=filled]
  node16686 [shape=cds, label=<<font color="black">6:app __x3__ = (GetIterator iterable)</font>> color="black" fillcolor="white" style=filled]
  node16696 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">11:let status = __x6__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16684 [shape=diamond, label=<<font color="black">(= __x2__ false)</font>> color="black" fillcolor="white" style=filled]
  node16689 [shape=cds, label=<<font color="black">8:app __x4__ = (IteratorStep iteratorRecord)</font>> color="black" fillcolor="white" style=filled]
  node16680 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return set</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16693 [shape=cds, label=<<font color="black">10:app __x5__ = (IteratorValue next)</font>> color="black" fillcolor="white" style=filled]
  node16700 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return [? __x8__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16683 [shape=cds, label=<<font color="black">5:app __x2__ = (IsCallable adder)</font>> color="black" fillcolor="white" style=filled]
  node16690 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">8:let next = [? __x4__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16677 [shape=cds, label=<<font color="black">1:app __x0__ = (OrdinaryCreateFromConstructor NewTarget &quot;%Set.prototype%&quot; (new [&quot;SetData&quot;]))</font>> color="black" fillcolor="white" style=filled]
  node16674 [shape=cds, label=<<font color="black">app iterable = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node16699 [shape=cds, label=<<font color="black">app __x8__ = (IteratorClose iteratorRecord status)</font>> color="black" fillcolor="white" style=filled]
  node16678 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">1:let set = [? __x0__]</td></tr>
      <tr><td align="left">2:set.SetData = (new [])</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16695 [shape=cds, label=<<font color="black">11:app __x6__ = (Call adder set (new [nextValue]))</font>> color="black" fillcolor="white" style=filled]
  node16692 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return set</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16675 [shape=diamond, label=<<font color="black">(= NewTarget undefined)</font>> color="black" fillcolor="white" style=filled]
  node16682 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">4:let adder = [? __x1__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16685 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16679 [shape=diamond, label=<<font color="black">(|| (= iterable undefined) (= iterable null))</font>> color="black" fillcolor="white" style=filled]
  node16681 [shape=cds, label=<<font color="black">4:app __x1__ = (Get set &quot;add&quot;)</font>> color="black" fillcolor="white" style=filled]
  node16678 -> node16679 [ color="black"]
  node16688 -> node16689 [label=<<font color="black">true</font>> color="black"]
  node16688 -> node16673 [label=<<font color="black">false</font>> color="black"]
  node16699 -> node16700 [ color="black"]
  node16680 -> node16681 [ color="black"]
  node16686 -> node16687 [ color="black"]
  node16700 -> node16688 [ color="black"]
  node16691 -> node16692 [label=<<font color="black">true</font>> color="black"]
  node16691 -> node16693 [label=<<font color="black">false</font>> color="black"]
  node16683 -> node16684 [ color="black"]
  node16697 -> node16698 [ color="black"]
  node16698 -> node16699 [label=<<font color="black">true</font>> color="black"]
  node16698 -> node16688 [label=<<font color="black">false</font>> color="black"]
  node16687 -> node16688 [ color="black"]
  node16692 -> node16693 [ color="black"]
  node16672 -> node16674 [ color="black"]
  node16679 -> node16680 [label=<<font color="black">true</font>> color="black"]
  node16679 -> node16681 [label=<<font color="black">false</font>> color="black"]
  node16685 -> node16686 [ color="black"]
  node16677 -> node16678 [ color="black"]
  node16690 -> node16691 [ color="black"]
  node16676 -> node16677 [ color="black"]
  node16696 -> node16697 [ color="black"]
  node16675 -> node16676 [label=<<font color="black">true</font>> color="black"]
  node16675 -> node16677 [label=<<font color="black">false</font>> color="black"]
  node16695 -> node16696 [ color="black"]
  node16694 -> node16695 [ color="black"]
  node16674 -> node16675 [ color="black"]
  node16682 -> node16683 [ color="black"]
  node16693 -> node16694 [ color="black"]
  node16689 -> node16690 [ color="black"]
  node16684 -> node16685 [label=<<font color="black">true</font>> color="black"]
  node16684 -> node16686 [label=<<font color="black">false</font>> color="black"]
  node16681 -> node16682 [ color="black"]
}
