digraph {
  node11211 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw URIError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11207 [shape=diamond, label=<<font color="black">(! (= C &quot;%&quot;))</font>> color="black" fillcolor="white" style=filled]
  node11202 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let strLen = string.length</td></tr>
      <tr><td align="left">1:let R = &quot;&quot;</td></tr>
      <tr><td align="left">2:let k = 0i</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11212 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">11:??? &quot;If the code units at index ( id:{k} + 1 ) and ( id:{k} + 2 ) within id:{string} do not represent hexadecimal digits , throw a value:{URIError} exception .&quot;</td></tr>
      <tr><td align="left">12:??? &quot;Let id:{B} be the 8 - bit value represented by the two hexadecimal digits at index ( id:{k} + 1 ) and ( id:{k} + 2 ) .&quot;</td></tr>
      <tr><td align="left">13:k = (+ k 2i)</td></tr>
      <tr><td align="left">14:??? &quot;If the most significant bit in id:{B} is 0 , then in:{} out:{}&quot;</td></tr>
      <tr><td align="left">20:??? &quot;Else the most significant bit in id:{B} is 1 , in:{} out:{}&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11206 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">5:let C = string[k]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11201 [shape=cds, label=<<font color="black">app reservedSet = (GetArgument argumentsList 1i)</font>> color="black" fillcolor="white" style=filled]
  node11205 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return R</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11203 [shape=diamond, label=<<font color="black">true</font>> color="black" fillcolor="white" style=filled]
  node11200 [shape=cds, label=<<font color="black">app string = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node11213 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">39:R = (+ R S)</td></tr>
      <tr><td align="left">40:k = (+ k 1i)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11198 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node11210 [shape=diamond, label=<<font color="black">(! (&lt; (+ k 2i) strLen))</font>> color="black" fillcolor="white" style=filled]
  node11208 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let S = C</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11199 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node11209 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">9:let start = k</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11204 [shape=diamond, label=<<font color="black">(= k strLen)</font>> color="black" fillcolor="white" style=filled]
  node11201 -> node11202 [ color="black"]
  node11205 -> node11206 [ color="black"]
  node11206 -> node11207 [ color="black"]
  node11213 -> node11203 [ color="black"]
  node11210 -> node11211 [label=<<font color="black">true</font>> color="black"]
  node11210 -> node11212 [label=<<font color="black">false</font>> color="black"]
  node11200 -> node11201 [ color="black"]
  node11198 -> node11200 [ color="black"]
  node11212 -> node11213 [ color="black"]
  node11211 -> node11212 [ color="black"]
  node11209 -> node11210 [ color="black"]
  node11207 -> node11208 [label=<<font color="black">true</font>> color="black"]
  node11207 -> node11209 [label=<<font color="black">false</font>> color="black"]
  node11202 -> node11203 [ color="black"]
  node11203 -> node11204 [label=<<font color="black">true</font>> color="black"]
  node11203 -> node11199 [label=<<font color="black">false</font>> color="black"]
  node11204 -> node11205 [label=<<font color="black">true</font>> color="black"]
  node11204 -> node11206 [label=<<font color="black">false</font>> color="black"]
  node11208 -> node11213 [ color="black"]
}
