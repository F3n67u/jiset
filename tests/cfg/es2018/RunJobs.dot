digraph {
  node1633 [shape=cds, label=<<font color="black">0:app __x0__ = (InitializeHostDefinedRealm )</font>> color="black" fillcolor="white" style=filled]
  node1640 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">__x2__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node1632 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node1636 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">7:GLOBAL_context = null</td></tr>
      <tr><td align="left">9:??? &quot;Let id:{nextQueue} be a non - empty Job Queue chosen in an implementation - defined manner . If all Job Queues are empty , the result is implementation - defined .&quot;</td></tr>
      <tr><td align="left">10:??? &quot;Let id:{nextPending} be the PendingJob record at the front of id:{nextQueue} . Remove that record from id:{nextQueue} .&quot;</td></tr>
      <tr><td align="left">11:let newContext = (new ExecutionContext(&quot;SubMap&quot; -&gt; (new SubMap())))</td></tr>
      <tr><td align="left">12:newContext.Function = null</td></tr>
      <tr><td align="left">13:newContext.Realm = nextPending.Realm</td></tr>
      <tr><td align="left">14:newContext.ScriptOrModule = nextPending.ScriptOrModule</td></tr>
      <tr><td align="left">15:append newContext -&gt; GLOBAL_executionStack</td></tr>
      <tr><td align="left">15:GLOBAL_context = GLOBAL_executionStack[(- GLOBAL_executionStack.length 1i)]</td></tr>
      <tr><td align="left">17:??? &quot;Let id:{result} be the result of performing the abstract operation named by id:{nextPending} . [ [ Job ] ] using the elements of id:{nextPending} . [ [ Arguments ] ] as its arguments .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node1634 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:[? __x0__]</td></tr>
      <tr><td align="left">1:??? &quot;In an implementation - dependent manner , obtain the ECMAScript source texts ( see clause link:{unhandled: sec-ecmascript-language-source-code} ) and any associated host - defined values for zero or more ECMAScript scripts and / or ECMAScript modules . For each such id:{sourceText} and id:{hostDefined} , do in:{} out:{}&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node1631 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node1637 [shape=cds, label=<<font color="black">18:app __x1__ = (IsAbruptCompletion result)</font>> color="black" fillcolor="white" style=filled]
  node1639 [shape=cds, label=<<font color="black">app __x2__ = (HostReportErrors (new [result.Value]))</font>> color="black" fillcolor="white" style=filled]
  node1635 [shape=diamond, label=<<font color="black">true</font>> color="black" fillcolor="white" style=filled]
  node1638 [shape=diamond, label=<<font color="black">__x1__</font>> color="black" fillcolor="white" style=filled]
  node1636 -> node1637 [ color="black"]
  node1639 -> node1640 [ color="black"]
  node1638 -> node1639 [label=<<font color="black">true</font>> color="black"]
  node1638 -> node1635 [label=<<font color="black">false</font>> color="black"]
  node1637 -> node1638 [ color="black"]
  node1633 -> node1634 [ color="black"]
  node1631 -> node1633 [ color="black"]
  node1634 -> node1635 [ color="black"]
  node1640 -> node1635 [ color="black"]
  node1635 -> node1636 [label=<<font color="black">true</font>> color="black"]
  node1635 -> node1632 [label=<<font color="black">false</font>> color="black"]
}
