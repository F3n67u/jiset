{
  app __x0__ = (IsDetachedBuffer arrayBuffer)
  assert (= __x0__ false)
  app __x1__ = (IsNonNegativeInteger byteIndex)
  if (is-completion __x1__) if (= __x1__.Type CONST_normal) __x1__ = __x1__.Value else return __x1__ else {}
  assert (= __x1__ true)
  let block = arrayBuffer.ArrayBufferData
  ??? "Let id:{elementSize} be the Element Size value specified in link:{unhandled: table-the-typedarray-constructors} for Element Type id:{type} ."
  if (= isLittleEndian absent) isLittleEndian = GLOBAL_agent.LittleEndian else {}
  app __x2__ = (NumericToRawBytes type value isLittleEndian)
  let rawBytes = __x2__
  app __x3__ = (IsSharedArrayBuffer arrayBuffer)
  if (= __x3__ true) {
    let execution = GLOBAL_agent.CandidateExecution
    ??? "Let id:{eventList} be the [ [ EventList ] ] field of the element in id:{execution} . [ [ EventsRecords ] ] whose [ [ AgentSignifier ] ] is AgentSignifier ( ) ."
    let __x4__ = true
    __x4__ = (= isTypedArray true)
    if __x4__ {
      app __x5__ = (IsNoTearConfiguration type order)
      __x4__ = (= __x5__ true)
    } else {}
    if __x4__ let noTear = true else let noTear = false
    append (new WriteSharedMemory("Order" -> order, "NoTear" -> noTear, "Block" -> block, "ByteIndex" -> byteIndex, "ElementSize" -> elementSize, "Payload" -> rawBytes)) -> eventList
  } else {}
  ??? "Else , store the individual bytes of id:{rawBytes} into id:{block} , in order , starting at id:{block} [ id:{byteIndex} ] ."
  app __x6__ = (NormalCompletion undefined)
  app __x7__ = (WrapCompletion __x6__)
  return __x7__
}