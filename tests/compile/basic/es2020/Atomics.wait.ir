{
  app __x0__ = (ValidateSharedIntegerTypedArray typedArray true)
  let buffer = [? __x0__]
  app __x1__ = (ValidateAtomicAccess typedArray index)
  let i = [? __x1__]
  let arrayTypeName = typedArray.TypedArrayName
  if (= arrayTypeName "BigInt64Array") {
    app __x2__ = (ToBigInt64 value)
    let v = [? __x2__]
  } else {
    app __x3__ = (ToInt32 value)
    let v = [? __x3__]
  }
  app __x4__ = (ToNumber timeout)
  let q = [? __x4__]
  if (= q NaN) let t = Infinity else {
    app __x5__ = (max q 0i)
    let t = __x5__
  }
  app __x6__ = (AgentCanSuspend)
  let B = __x6__
  if (= B false) throw TypeError else {}
  let block = buffer.ArrayBufferData
  let offset = typedArray.ByteOffset
  ??? "Let id:{elementSize} be the Element Size value specified in link:{unhandled: table-the-typedarray-constructors} for id:{arrayTypeName} ."
  let indexedPosition = (+ (* i elementSize) offset)
  app __x7__ = (GetWaiterList block indexedPosition)
  let WL = __x7__
  app __x8__ = (EnterCriticalSection WL)
  __x8__
  app __x9__ = (AtomicLoad typedArray i)
  let w = [! __x9__]
  if (! (= v w)) {
    app __x10__ = (LeaveCriticalSection WL)
    __x10__
    return "not-equal"
  } else {}
  app __x11__ = (AgentSignifier)
  let W = __x11__
  app __x12__ = (AddWaiter WL W)
  __x12__
  app __x13__ = (Suspend WL W t)
  let notified = __x13__
  if (= notified true) {} else {
    app __x14__ = (RemoveWaiter WL W)
    __x14__
  }
  app __x15__ = (LeaveCriticalSection WL)
  __x15__
  if (= notified true) return "ok" else {}
  return "timed-out"
}