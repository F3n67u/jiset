digraph {
  node0 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node5 [shape=diamond, label=<<font color="black">(= __x1__ true)</font>> color="black" fillcolor="white" style=filled]
  node10 [shape=diamond, label=<<font color="black">__x2__</font>> color="black" fillcolor="white" style=filled]
  node14 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">13:??? &quot;Else , let id:{rawValue} be a List whose elements are bytes from id:{block} at indices id:{byteIndex} ( inclusive ) through id:{byteIndex} + id:{elementSize} ( exclusive ) .&quot;</td></tr>
      <tr><td align="left">14:assert (= rawValue.length elementSize)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node1 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node6 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">5:let execution = AGENT.CandidateExecution</td></tr>
      <tr><td align="left">6:??? &quot;Let id:{eventList} be the [ [ EventList ] ] field of the element in id:{execution} . [ [ EventsRecords ] ] whose [ [ AgentSignifier ] ] is AgentSignifier ( ) .&quot;</td></tr>
      <tr><td align="left">7:let __x2__ = true</td></tr>
      <tr><td align="left">7:__x2__ = (= isTypedArray true)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node9 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">__x2__ = (= __x3__ true)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node13 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">8:??? &quot;Let id:{rawValue} be a List of length id:{elementSize} whose elements are nondeterministically chosen byte values .&quot;</td></tr>
      <tr><td align="left">10:let readEvent = (new ReadSharedMemory(&quot;Order&quot; -&gt; order, &quot;NoTear&quot; -&gt; noTear, &quot;Block&quot; -&gt; block, &quot;ByteIndex&quot; -&gt; byteIndex, &quot;ElementSize&quot; -&gt; elementSize))</td></tr>
      <tr><td align="left">11:append readEvent -&gt; eventList</td></tr>
      <tr><td align="left">12:append (new ChosenValueRecord(&quot;Event&quot; -&gt; readEvent, &quot;ChosenValue&quot; -&gt; rawValue)) -&gt; execution.ChosenValues</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node2 [shape=cds, label=<<font color="black">0:app __x0__ = (IsDetachedBuffer arrayBuffer)</font>> color="black" fillcolor="white" style=filled]
  node17 [shape=cds, label=<<font color="black">16:app __x4__ = (RawBytesToNumeric type rawValue isLittleEndian)</font>> color="black" fillcolor="white" style=filled]
  node12 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let noTear = false</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node7 [shape=diamond, label=<<font color="black">__x2__</font>> color="black" fillcolor="white" style=filled]
  node3 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:assert (= __x0__ false)</td></tr>
      <tr><td align="left">2:let block = arrayBuffer.ArrayBufferData</td></tr>
      <tr><td align="left">3:??? &quot;Let id:{elementSize} be the Element Size value specified in link:{unhandled: table-the-typedarray-constructors} for Element Type id:{type} .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">16:return __x4__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">isLittleEndian = AGENT.LittleEndian</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let noTear = true</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node8 [shape=cds, label=<<font color="black">app __x3__ = (IsNoTearConfiguration type order)</font>> color="black" fillcolor="white" style=filled]
  node4 [shape=cds, label=<<font color="black">4:app __x1__ = (IsSharedArrayBuffer arrayBuffer)</font>> color="black" fillcolor="white" style=filled]
  node15 [shape=diamond, label=<<font color="black">(= isLittleEndian absent)</font>> color="black" fillcolor="white" style=filled]
  node3 -> node4 [ color="black"]
  node10 -> node11 [label=<<font color="black">true</font>> color="black"]
  node10 -> node12 [label=<<font color="black">false</font>> color="black"]
  node7 -> node8 [label=<<font color="black">true</font>> color="black"]
  node7 -> node10 [label=<<font color="black">false</font>> color="black"]
  node2 -> node3 [ color="black"]
  node13 -> node14 [ color="black"]
  node12 -> node13 [ color="black"]
  node0 -> node2 [ color="black"]
  node6 -> node7 [ color="black"]
  node14 -> node15 [ color="black"]
  node4 -> node5 [ color="black"]
  node8 -> node9 [ color="black"]
  node16 -> node17 [ color="black"]
  node5 -> node6 [label=<<font color="black">true</font>> color="black"]
  node5 -> node14 [label=<<font color="black">false</font>> color="black"]
  node15 -> node16 [label=<<font color="black">true</font>> color="black"]
  node15 -> node17 [label=<<font color="black">false</font>> color="black"]
  node9 -> node10 [ color="black"]
  node11 -> node13 [ color="black"]
  node18 -> node1 [ color="black"]
  node17 -> node18 [ color="black"]
}
