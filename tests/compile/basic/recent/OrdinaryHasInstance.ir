{
  app __x0__ = (IsCallable C)
  if (= __x0__ false) return false else {}
  if (! (= C.BoundTargetFunction absent)) {
    let BC = C.BoundTargetFunction
    app __x1__ = (InstanceofOperator O BC)
    return [? __x1__]
  } else {}
  if (! (= (typeof O) Object)) return false else {}
  app __x2__ = (Get C "prototype")
  let P = [? __x2__]
  if (! (= (typeof P) Object)) throw TypeError else {}
  while true {
    app __x3__ = (O.GetPrototypeOf O)
    O = [? __x3__]
    if (= O null) return false else {}
    app __x4__ = (SameValue P O)
    if (= __x4__ true) return true else {}
  }
}