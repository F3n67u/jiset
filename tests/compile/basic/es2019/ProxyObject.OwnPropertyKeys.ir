{
  let handler = O.ProxyHandler
  if (= handler null) {
    app __x0__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_TypeError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
    return __x0__
  } else {}
  app __x1__ = (Type handler)
  assert (= __x1__ Object)
  let target = O.ProxyTarget
  app __x2__ = (GetMethod handler "ownKeys")
  if (is-completion __x2__) if (= __x2__.Type CONST_normal) __x2__ = __x2__.Value else return __x2__ else {}
  let trap = __x2__
  if (= trap undefined) {
    app __x3__ = (target.OwnPropertyKeys target)
    if (is-completion __x3__) if (= __x3__.Type CONST_normal) __x3__ = __x3__.Value else return __x3__ else {}
    app __x4__ = (WrapCompletion __x3__)
    return __x4__
  } else {}
  app __x5__ = (Call trap handler (new [target]))
  if (is-completion __x5__) if (= __x5__.Type CONST_normal) __x5__ = __x5__.Value else return __x5__ else {}
  let trapResultArray = __x5__
  app __x6__ = (CreateListFromArrayLike trapResultArray (new [String, Symbol]))
  if (is-completion __x6__) if (= __x6__.Type CONST_normal) __x6__ = __x6__.Value else return __x6__ else {}
  let trapResult = __x6__
  let __x7__ = trapResult
  let __x8__ = 0i
  let __x9__ = true
  while (< __x8__ __x7__.length) {
    let __x10__ = (+ __x8__ 1i)
    while (< __x10__ __x7__.length) if (= __x7__[__x8__] __x7__[__x10__]) __x9__ = true else {}
  }
  if __x9__ {
    app __x11__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_TypeError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
    return __x11__
  } else {}
  app __x12__ = (IsExtensible target)
  if (is-completion __x12__) if (= __x12__.Type CONST_normal) __x12__ = __x12__.Value else return __x12__ else {}
  let extensibleTarget = __x12__
  app __x13__ = (target.OwnPropertyKeys target)
  if (is-completion __x13__) if (= __x13__.Type CONST_normal) __x13__ = __x13__.Value else return __x13__ else {}
  let targetKeys = __x13__
  let targetConfigurableKeys = (new [])
  let targetNonconfigurableKeys = (new [])
  let __x14__ = targetKeys
  let __x15__ = 0i
  while (< __x15__ __x14__.length) {
    let key = __x14__[__x15__]
    app __x16__ = (target.GetOwnProperty target key)
    if (is-completion __x16__) if (= __x16__.Type CONST_normal) __x16__ = __x16__.Value else return __x16__ else {}
    let desc = __x16__
    if (&& (! (= desc undefined)) (= desc.Configurable false)) append key -> targetNonconfigurableKeys else append key -> targetConfigurableKeys
    __x15__ = (+ __x15__ 1i)
  }
  if (&& (= extensibleTarget true) (= targetNonconfigurableKeys.length 0i)) {
    app __x17__ = (WrapCompletion trapResult)
    return __x17__
  } else {}
  let uncheckedResultKeys = (copy-obj trapResult)
  let __x18__ = targetNonconfigurableKeys
  let __x19__ = 0i
  while (< __x19__ __x18__.length) {
    let key = __x18__[__x19__]
    if (! (contains uncheckedResultKeys key)) {
      app __x20__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_TypeError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
      return __x20__
    } else {}
    let __x21__ = 0i
    while (< __x21__ uncheckedResultKeys.length) if (= uncheckedResultKeys[__x21__] key) (pop uncheckedResultKeys __x21__) else __x21__ = (+ __x21__ 1i)
    __x19__ = (+ __x19__ 1i)
  }
  if (= extensibleTarget true) {
    app __x22__ = (WrapCompletion trapResult)
    return __x22__
  } else {}
  let __x23__ = targetConfigurableKeys
  let __x24__ = 0i
  while (< __x24__ __x23__.length) {
    let key = __x23__[__x24__]
    if (! (contains uncheckedResultKeys key)) {
      app __x25__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_TypeError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
      return __x25__
    } else {}
    let __x26__ = 0i
    while (< __x26__ uncheckedResultKeys.length) if (= uncheckedResultKeys[__x26__] key) (pop uncheckedResultKeys __x26__) else __x26__ = (+ __x26__ 1i)
    __x24__ = (+ __x24__ 1i)
  }
  if (< 0i uncheckedResultKeys.length) {
    app __x27__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_TypeError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
    return __x27__
  } else {}
  app __x28__ = (WrapCompletion trapResult)
  return __x28__
}