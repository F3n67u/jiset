{
  if (= Desc.Value absent) {
    app __x0__ = (OrdinaryDefineOwnProperty A "length" Desc)
    return __x0__
  } else {}
  let newLenDesc = (copy-obj Desc)
  app __x1__ = (ToUint32 Desc.Value)
  let newLen = [? __x1__]
  app __x2__ = (ToNumber Desc.Value)
  let numberLen = [? __x2__]
  if (! (== newLen numberLen)) throw RangeError else {}
  newLenDesc.Value = newLen
  app __x3__ = (OrdinaryGetOwnProperty A "length")
  let oldLenDesc = __x3__
  let oldLen = oldLenDesc.Value
  if (! (< newLen oldLen)) {
    app __x4__ = (OrdinaryDefineOwnProperty A "length" newLenDesc)
    return __x4__
  } else {}
  if (= oldLenDesc.Writable false) return false else {}
  if (|| (= newLenDesc.Writable absent) (= newLenDesc.Writable true)) let newWritable = true else {
    let newWritable = false
    newLenDesc.Writable = true
  }
  app __x5__ = (OrdinaryDefineOwnProperty A "length" newLenDesc)
  let succeeded = [! __x5__]
  if (= succeeded false) return false else {}
  while (< newLen oldLen) {
    oldLen = (- oldLen 1i)
    app __x6__ = (ToString oldLen)
    app __x7__ = (A.Delete A [! __x6__])
    let deleteSucceeded = [! __x7__]
    if (= deleteSucceeded false) {
      newLenDesc.Value = (+ oldLen 1i)
      if (= newWritable false) newLenDesc.Writable = false else {}
      app __x8__ = (OrdinaryDefineOwnProperty A "length" newLenDesc)
      let succeeded = [! __x8__]
      return false
    } else {}
  }
  if (= newWritable false) {
    app __x9__ = (OrdinaryDefineOwnProperty A "length" (new PropertyDescriptor("Writable" -> false)))
    return __x9__
  } else {}
  return true
}