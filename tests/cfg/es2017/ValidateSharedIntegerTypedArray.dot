digraph {
  node15806 [shape=diamond, label=<<font color="black">(! (= typeName &quot;Int32Array&quot;))</font>> color="black" fillcolor="white" style=filled]
  node15795 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node15808 [shape=diamond, label=<<font color="black">(! (|| (|| (|| (|| (|| (= typeName &quot;Int8Array&quot;) (= typeName &quot;Uint8Array&quot;)) (= typeName &quot;Int16Array&quot;)) (= typeName &quot;Uint16Array&quot;)) (= typeName &quot;Int32Array&quot;)) (= typeName &quot;Uint32Array&quot;)))</font>> color="black" fillcolor="white" style=filled]
  node15812 [shape=diamond, label=<<font color="black">(= __x1__ false)</font>> color="black" fillcolor="white" style=filled]
  node15802 [shape=diamond, label=<<font color="black">(= typedArray.TypedArrayName absent)</font>> color="black" fillcolor="white" style=filled]
  node15799 [shape=cds, label=<<font color="black">1:app __x0__ = (Type typedArray)</font>> color="black" fillcolor="white" style=filled]
  node15811 [shape=cds, label=<<font color="black">10:app __x1__ = (IsSharedArrayBuffer buffer)</font>> color="black" fillcolor="white" style=filled]
  node15810 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">8:assert (! (= typedArray.ViewedArrayBuffer absent))</td></tr>
      <tr><td align="left">9:let buffer = typedArray.ViewedArrayBuffer</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15814 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">11:return buffer</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15809 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15807 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15813 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15798 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">onlyInt32 = false</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15803 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15804 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">3:let typeName = typedArray.TypedArrayName</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15797 [shape=diamond, label=<<font color="black">(= onlyInt32 absent)</font>> color="black" fillcolor="white" style=filled]
  node15805 [shape=diamond, label=<<font color="black">(= onlyInt32 true)</font>> color="black" fillcolor="white" style=filled]
  node15796 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node15801 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15800 [shape=diamond, label=<<font color="black">(! (= __x0__ Object))</font>> color="black" fillcolor="white" style=filled]
  node15800 -> node15801 [label=<<font color="black">true</font>> color="black"]
  node15800 -> node15802 [label=<<font color="black">false</font>> color="black"]
  node15808 -> node15809 [label=<<font color="black">true</font>> color="black"]
  node15808 -> node15810 [label=<<font color="black">false</font>> color="black"]
  node15814 -> node15796 [ color="black"]
  node15798 -> node15799 [ color="black"]
  node15810 -> node15811 [ color="black"]
  node15811 -> node15812 [ color="black"]
  node15812 -> node15813 [label=<<font color="black">true</font>> color="black"]
  node15812 -> node15814 [label=<<font color="black">false</font>> color="black"]
  node15807 -> node15810 [ color="black"]
  node15795 -> node15797 [ color="black"]
  node15804 -> node15805 [ color="black"]
  node15803 -> node15804 [ color="black"]
  node15809 -> node15810 [ color="black"]
  node15806 -> node15807 [label=<<font color="black">true</font>> color="black"]
  node15806 -> node15810 [label=<<font color="black">false</font>> color="black"]
  node15813 -> node15814 [ color="black"]
  node15805 -> node15806 [label=<<font color="black">true</font>> color="black"]
  node15805 -> node15808 [label=<<font color="black">false</font>> color="black"]
  node15799 -> node15800 [ color="black"]
  node15801 -> node15802 [ color="black"]
  node15797 -> node15798 [label=<<font color="black">true</font>> color="black"]
  node15797 -> node15799 [label=<<font color="black">false</font>> color="black"]
  node15802 -> node15803 [label=<<font color="black">true</font>> color="black"]
  node15802 -> node15804 [label=<<font color="black">false</font>> color="black"]
}
