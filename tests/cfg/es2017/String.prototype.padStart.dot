digraph {
  node12710 [shape=diamond, label=<<font color="black">(! (&lt; stringLength intMaxLength))</font>> color="black" fillcolor="white" style=filled]
  node12714 [shape=cds, label=<<font color="black">app __x3__ = (ToString fillString)</font>> color="black" fillcolor="white" style=filled]
  node12705 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let O = [? __x0__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12709 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">2:let intMaxLength = [? __x2__]</td></tr>
      <tr><td align="left">3:let stringLength = S.length</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12704 [shape=cds, label=<<font color="black">0:app __x0__ = (RequireObjectCoercible this)</font>> color="black" fillcolor="white" style=filled]
  node12716 [shape=diamond, label=<<font color="black">(= filler &quot;&quot;)</font>> color="black" fillcolor="white" style=filled]
  node12712 [shape=diamond, label=<<font color="black">(= fillString undefined)</font>> color="black" fillcolor="white" style=filled]
  node12711 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return S</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12702 [shape=cds, label=<<font color="black">app maxLength = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node12707 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">1:let S = [? __x1__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12717 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return S</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12718 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">8:let fillLen = (- intMaxLength stringLength)</td></tr>
      <tr><td align="left">9:??? &quot;Let id:{truncatedStringFiller} be a new String value consisting of repeated concatenations of id:{filler} truncated to length id:{fillLen} .&quot;</td></tr>
      <tr><td align="left">10:return (+ truncatedStringFiller S)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12713 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let filler = &quot; &quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12706 [shape=cds, label=<<font color="black">1:app __x1__ = (ToString O)</font>> color="black" fillcolor="white" style=filled]
  node12703 [shape=cds, label=<<font color="black">app fillString = (GetArgument argumentsList 1i)</font>> color="black" fillcolor="white" style=filled]
  node12700 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node12715 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let filler = [? __x3__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12708 [shape=cds, label=<<font color="black">2:app __x2__ = (ToLength maxLength)</font>> color="black" fillcolor="white" style=filled]
  node12701 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node12716 -> node12717 [label=<<font color="black">true</font>> color="black"]
  node12716 -> node12718 [label=<<font color="black">false</font>> color="black"]
  node12717 -> node12718 [ color="black"]
  node12704 -> node12705 [ color="black"]
  node12712 -> node12713 [label=<<font color="black">true</font>> color="black"]
  node12712 -> node12714 [label=<<font color="black">false</font>> color="black"]
  node12703 -> node12704 [ color="black"]
  node12711 -> node12712 [ color="black"]
  node12709 -> node12710 [ color="black"]
  node12708 -> node12709 [ color="black"]
  node12714 -> node12715 [ color="black"]
  node12702 -> node12703 [ color="black"]
  node12707 -> node12708 [ color="black"]
  node12700 -> node12702 [ color="black"]
  node12715 -> node12716 [ color="black"]
  node12713 -> node12716 [ color="black"]
  node12718 -> node12701 [ color="black"]
  node12706 -> node12707 [ color="black"]
  node12710 -> node12711 [label=<<font color="black">true</font>> color="black"]
  node12710 -> node12712 [label=<<font color="black">false</font>> color="black"]
  node12705 -> node12706 [ color="black"]
}
