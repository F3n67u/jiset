digraph {
  node18353 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">2:return [? __x0__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18348 [shape=cds, label=<<font color="black">app typedArray = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node18351 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:??? &quot;Let id:{or} be a new read - modify - write modification function with parameters ( id:{xBytes} , id:{yBytes} ) that captures nothing and performs the following steps atomically when called : in:{} out:{}&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18347 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node18350 [shape=cds, label=<<font color="black">app value = (GetArgument argumentsList 2i)</font>> color="black" fillcolor="white" style=filled]
  node18346 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node18349 [shape=cds, label=<<font color="black">app index = (GetArgument argumentsList 1i)</font>> color="black" fillcolor="white" style=filled]
  node18352 [shape=cds, label=<<font color="black">2:app __x0__ = (AtomicReadModifyWrite typedArray index value or)</font>> color="black" fillcolor="white" style=filled]
  node18350 -> node18351 [ color="black"]
  node18349 -> node18350 [ color="black"]
  node18352 -> node18353 [ color="black"]
  node18346 -> node18348 [ color="black"]
  node18353 -> node18347 [ color="black"]
  node18348 -> node18349 [ color="black"]
  node18351 -> node18352 [ color="black"]
}
