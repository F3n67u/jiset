{
  app target = (GetArgument argumentsList 0i)
  app source = (GetArgument argumentsList 1i)
  app sourceLen = (GetArgument argumentsList 2i)
  app start = (GetArgument argumentsList 3i)
  app depth = (GetArgument argumentsList 4i)
  app mapperFunction = (GetArgument argumentsList 5i)
  app thisArg = (GetArgument argumentsList 6i)
  [0] app __x0__ = (Type target)
  [0] assert (= __x0__ Object)
  [1] app __x1__ = (Type source)
  [1] assert (= __x1__ Object)
  [2] app __x2__ = (IsNonNegativeInteger sourceLen)
  [2] if (is-completion __x2__) if (= __x2__.Type CONST_normal) __x2__ = __x2__.Value else return __x2__ else [5] {}
  [2] assert (= __x2__ true)
  [3] app __x3__ = (IsNonNegativeInteger start)
  [3] if (is-completion __x3__) if (= __x3__.Type CONST_normal) __x3__ = __x3__.Value else return __x3__ else [5] {}
  [3] assert (= __x3__ true)
  [4] app __x4__ = (IsInteger depth)
  [4] if (is-completion __x4__) if (= __x4__.Type CONST_normal) __x4__ = __x4__.Value else return __x4__ else [5] {}
  [4] assert (|| (= __x4__ true) (|| (= depth Infinity) (= depth -Infinity)))
  [6] let targetIndex = start
  [7] let sourceIndex = 0i
  [8] while (< sourceIndex sourceLen) {
    [9] app __x5__ = (ToString sourceIndex)
    [9] if (is-completion __x5__) if (= __x5__.Type CONST_normal) __x5__ = __x5__.Value else return __x5__ else [5] {}
    [9] let P = __x5__
    [10] app __x6__ = (HasProperty source P)
    [10] if (is-completion __x6__) if (= __x6__.Type CONST_normal) __x6__ = __x6__.Value else return __x6__ else [5] {}
    [10] let exists = __x6__
    [11] if (= exists true) {
      [12] app __x7__ = (Get source P)
      [12] if (is-completion __x7__) if (= __x7__.Type CONST_normal) __x7__ = __x7__.Value else return __x7__ else [5] {}
      [12] let element = __x7__
      [13] if (! (= mapperFunction absent)) {
        [14] app __x8__ = (Call mapperFunction thisArg (new [element, sourceIndex, source]))
        [14] if (is-completion __x8__) if (= __x8__.Type CONST_normal) __x8__ = __x8__.Value else return __x8__ else [5] {}
        [14] element = __x8__
      } else [5] {}
      [15] let shouldFlatten = false
      [16] if (< 0i depth) {
        [17] app __x9__ = (IsArray element)
        [17] if (is-completion __x9__) if (= __x9__.Type CONST_normal) __x9__ = __x9__.Value else return __x9__ else [5] {}
        [17] shouldFlatten = __x9__
      } else [5] {}
      [21] if (= shouldFlatten true) {
        [19] app __x10__ = (LengthOfArrayLike element)
        [19] if (is-completion __x10__) if (= __x10__.Type CONST_normal) __x10__ = __x10__.Value else return __x10__ else [5] {}
        [19] let elementLen = __x10__
        [20] app __x11__ = (FlattenIntoArray target element elementLen targetIndex (- depth 1i))
        [20] if (is-completion __x11__) if (= __x11__.Type CONST_normal) __x11__ = __x11__.Value else return __x11__ else [5] {}
        [20] targetIndex = __x11__
      } else {
        [22] if (! (< targetIndex (- 9007199254740992i 1i))) {
          app __x12__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_TypeError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
          return __x12__
        } else [5] {}
        [23] app __x13__ = (ToString targetIndex)
        [23] if (is-completion __x13__) if (= __x13__.Type CONST_normal) __x13__ = __x13__.Value else return __x13__ else [5] {}
        [23] app __x14__ = (CreateDataPropertyOrThrow target __x13__ element)
        [23] if (is-completion __x14__) if (= __x14__.Type CONST_normal) __x14__ = __x14__.Value else return __x14__ else [5] {}
        [23] __x14__
        [24] targetIndex = (+ targetIndex 1i)
      }
    } else [5] {}
    [25] sourceIndex = (+ sourceIndex 1i)
  }
  [26] app __x15__ = (WrapCompletion targetIndex)
  [26] return __x15__
}