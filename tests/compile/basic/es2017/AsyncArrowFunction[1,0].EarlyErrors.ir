{
  access __x0__ = (CoverCallExpressionAndAsyncArrowHead "Contains" "YieldExpression")
  if (= __x0__ true) throw SyntaxError else return undefined
  access __x1__ = (CoverCallExpressionAndAsyncArrowHead "Contains" "AwaitExpression")
  if (= __x1__ true) throw SyntaxError else return undefined
  ??? "It is a Syntax Error if the lexical token sequence matched by nt:{CoverCallExpressionAndAsyncArrowHead} cannot be parsed with no tokens left over using nt:{AsyncArrowHead} as the goal symbol ."
  access __x2__ = (CoverCallExpressionAndAsyncArrowHead "BoundNames")
  access __x3__ = (AsyncConciseBody "LexicallyDeclaredNames")
  let __x4__ = __x2__
  let __x5__ = __x3__
  let __x6__ = 0i
  let __x7__ = 0i
  let __x8__ = false
  while (< __x6__ __x4__.length) {
    __x7__ = 0i
    while (< __x7__ __x5__.length) if (= __x4__[__x6__] __x5__[__x7__]) __x8__ = true else {}
  }
  if __x8__ throw SyntaxError else return undefined
  let __x9__ = true
  access __x10__ = (AsyncConciseBody "ContainsUseStrict")
  __x9__ = (= __x10__ true)
  if __x9__ {
    access __x11__ = (CoverCallExpressionAndAsyncArrowHead "IsSimpleParameterList")
    __x9__ = (= __x11__ false)
  } else {}
  if __x9__ throw SyntaxError else return undefined
  ??? "All Early Error rules for nt:{AsyncArrowHead} and its derived productions apply to CoveredAsyncArrowHead of nt:{CoverCallExpressionAndAsyncArrowHead} ."
}