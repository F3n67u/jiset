<algorithm>
  <param>this</param>
  <param>N</param>
  <param>S</param>
  <step-list>
    <step>Assert : <id>S</id> is <value>true</value> .</step>
    <step>Let <id>envRec</id> be the module Environment Record for which the method was invoked.</step>
    <step>Assert : <id>envRec</id> has a binding for <id>N</id> .</step>
    <step>If the binding for <id>N</id> is an indirect binding, then     <step-list>
      <step>Let <id>M</id> and <id>N2</id> be the indirection values provided when this binding for <id>N</id> was created.</step>
      <step>Let <id>targetEnv</id> be <id>M</id> .[[Environment]].</step>
      <step>If <id>targetEnv</id> is <value>undefined</value> , throw a <value>ReferenceError</value> exception.</step>
      <step>Let <id>targetER</id> be <id>targetEnv</id> 's EnvironmentRecord .</step>
      <step>Return ? <id>targetER</id> .GetBindingValue( <id>N2</id> , <value>true</value> ).</step>
    </step-list></step>
    <step>If the binding for <id>N</id> in <id>envRec</id> is an uninitialized binding, throw a <value>ReferenceError</value> exception.</step>
    <step>Return the value currently bound to <id>N</id> in <id>envRec</id> .</step>
  </step-list>
</algorithm>