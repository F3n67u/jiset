{
  ??? "If the source code matching nt:{FormalParameters} is strict mode code , the Early Error rules for grammar:{UniqueFormalParameters0, [FormalParameters]} are applied ."
  if (&& (! (= BindingIdentifier absent)) true) {
    access __x0__ = (BindingIdentifier "StringValue")
    if (|| (= __x0__ "eval") (= __x0__ "arguments")) {
      app __x1__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_SyntaxError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
      return __x1__
    } else {
      app __x2__ = (NormalCompletion undefined)
      return __x2__
    }
  } else {}
  access __x3__ = (GeneratorBody "ContainsUseStrict")
  let __x4__ = (= __x3__ true)
  if __x4__ {
    access __x5__ = (FormalParameters "IsSimpleParameterList")
    __x4__ = (= __x5__ false)
  } else {}
  if __x4__ {
    app __x6__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_SyntaxError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
    return __x6__
  } else {
    app __x7__ = (NormalCompletion undefined)
    return __x7__
  }
  access __x8__ = (FormalParameters "BoundNames")
  access __x9__ = (GeneratorBody "LexicallyDeclaredNames")
  let __x10__ = __x8__
  let __x11__ = __x9__
  let __x12__ = 0i
  let __x13__ = 0i
  let __x14__ = false
  while (< __x12__ __x10__.length) {
    __x13__ = 0i
    while (< __x13__ __x11__.length) if (= __x10__[__x12__] __x11__[__x13__]) __x14__ = true else {}
  }
  if __x14__ {
    app __x15__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_SyntaxError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
    return __x15__
  } else {
    app __x16__ = (NormalCompletion undefined)
    return __x16__
  }
  access __x17__ = (FormalParameters "Contains")
  app __x18__ = (__x17__ "YieldExpression")
  if (= __x18__ true) {
    app __x19__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_SyntaxError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
    return __x19__
  } else {
    app __x20__ = (NormalCompletion undefined)
    return __x20__
  }
  access __x21__ = (FormalParameters "Contains")
  app __x22__ = (__x21__ "SuperProperty")
  if (= __x22__ true) {
    app __x23__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_SyntaxError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
    return __x23__
  } else {
    app __x24__ = (NormalCompletion undefined)
    return __x24__
  }
  access __x25__ = (GeneratorBody "Contains")
  app __x26__ = (__x25__ "SuperProperty")
  if (= __x26__ true) {
    app __x27__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_SyntaxError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
    return __x27__
  } else {
    app __x28__ = (NormalCompletion undefined)
    return __x28__
  }
  access __x29__ = (FormalParameters "Contains")
  app __x30__ = (__x29__ "SuperCall")
  if (= __x30__ true) {
    app __x31__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_SyntaxError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
    return __x31__
  } else {
    app __x32__ = (NormalCompletion undefined)
    return __x32__
  }
  access __x33__ = (GeneratorBody "Contains")
  app __x34__ = (__x33__ "SuperCall")
  if (= __x34__ true) {
    app __x35__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_SyntaxError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
    return __x35__
  } else {
    app __x36__ = (NormalCompletion undefined)
    return __x36__
  }
}