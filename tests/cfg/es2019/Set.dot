digraph {
  node15916 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return set</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15922 [shape=diamond, label=<<font color="black">__x7__</font>> color="black" fillcolor="white" style=filled]
  node15907 [shape=cds, label=<<font color="black">6:app __x2__ = (IsCallable adder)</font>> color="black" fillcolor="white" style=filled]
  node15920 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">12:let status = __x6__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15901 [shape=diamond, label=<<font color="black">(= iterable absent)</font>> color="black" fillcolor="white" style=filled]
  node15908 [shape=diamond, label=<<font color="black">(= __x2__ false)</font>> color="black" fillcolor="white" style=filled]
  node15923 [shape=cds, label=<<font color="black">app __x8__ = (IteratorClose iteratorRecord status)</font>> color="black" fillcolor="white" style=filled]
  node15919 [shape=cds, label=<<font color="black">12:app __x6__ = (Call adder set (new [nextValue]))</font>> color="black" fillcolor="white" style=filled]
  node15902 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">iterable = undefined</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15914 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">9:let next = [? __x4__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15898 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15913 [shape=cds, label=<<font color="black">9:app __x4__ = (IteratorStep iteratorRecord)</font>> color="black" fillcolor="white" style=filled]
  node15917 [shape=cds, label=<<font color="black">11:app __x5__ = (IteratorValue next)</font>> color="black" fillcolor="white" style=filled]
  node15911 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">7:let iteratorRecord = [? __x3__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15900 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">1:let set = [? __x0__]</td></tr>
      <tr><td align="left">2:set.SetData = (new [])</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15915 [shape=diamond, label=<<font color="black">(= next false)</font>> color="black" fillcolor="white" style=filled]
  node15896 [shape=cds, label=<<font color="black">app iterable = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node15912 [shape=diamond, label=<<font color="black">true</font>> color="black" fillcolor="white" style=filled]
  node15897 [shape=diamond, label=<<font color="black">(= NewTarget undefined)</font>> color="black" fillcolor="white" style=filled]
  node15909 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15904 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return set</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15918 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">11:let nextValue = [? __x5__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15895 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node15905 [shape=cds, label=<<font color="black">5:app __x1__ = (Get set &quot;add&quot;)</font>> color="black" fillcolor="white" style=filled]
  node15924 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return [? __x8__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15910 [shape=cds, label=<<font color="black">7:app __x3__ = (GetIterator iterable)</font>> color="black" fillcolor="white" style=filled]
  node15903 [shape=diamond, label=<<font color="black">(|| (= iterable undefined) (= iterable null))</font>> color="black" fillcolor="white" style=filled]
  node15894 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node15921 [shape=cds, label=<<font color="black">13:app __x7__ = (IsAbruptCompletion status)</font>> color="black" fillcolor="white" style=filled]
  node15906 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">5:let adder = [? __x1__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15899 [shape=cds, label=<<font color="black">1:app __x0__ = (OrdinaryCreateFromConstructor NewTarget INTRINSIC_SetPrototype (new [&quot;SetData&quot;]))</font>> color="black" fillcolor="white" style=filled]
  node15905 -> node15906 [ color="black"]
  node15894 -> node15896 [ color="black"]
  node15918 -> node15919 [ color="black"]
  node15924 -> node15912 [ color="black"]
  node15909 -> node15910 [ color="black"]
  node15913 -> node15914 [ color="black"]
  node15914 -> node15915 [ color="black"]
  node15899 -> node15900 [ color="black"]
  node15897 -> node15898 [label=<<font color="black">true</font>> color="black"]
  node15897 -> node15899 [label=<<font color="black">false</font>> color="black"]
  node15907 -> node15908 [ color="black"]
  node15915 -> node15916 [label=<<font color="black">true</font>> color="black"]
  node15915 -> node15917 [label=<<font color="black">false</font>> color="black"]
  node15904 -> node15905 [ color="black"]
  node15896 -> node15897 [ color="black"]
  node15898 -> node15899 [ color="black"]
  node15911 -> node15912 [ color="black"]
  node15916 -> node15917 [ color="black"]
  node15903 -> node15904 [label=<<font color="black">true</font>> color="black"]
  node15903 -> node15905 [label=<<font color="black">false</font>> color="black"]
  node15920 -> node15921 [ color="black"]
  node15910 -> node15911 [ color="black"]
  node15917 -> node15918 [ color="black"]
  node15923 -> node15924 [ color="black"]
  node15921 -> node15922 [ color="black"]
  node15900 -> node15901 [ color="black"]
  node15901 -> node15902 [label=<<font color="black">true</font>> color="black"]
  node15901 -> node15903 [label=<<font color="black">false</font>> color="black"]
  node15908 -> node15909 [label=<<font color="black">true</font>> color="black"]
  node15908 -> node15910 [label=<<font color="black">false</font>> color="black"]
  node15912 -> node15913 [label=<<font color="black">true</font>> color="black"]
  node15912 -> node15895 [label=<<font color="black">false</font>> color="black"]
  node15902 -> node15903 [ color="black"]
  node15919 -> node15920 [ color="black"]
  node15906 -> node15907 [ color="black"]
  node15922 -> node15923 [label=<<font color="black">true</font>> color="black"]
  node15922 -> node15912 [label=<<font color="black">false</font>> color="black"]
}
