digraph {
  node2544 [shape=diamond, label=<<font color="black">(= __x1__ true)</font>> color="black" fillcolor="white" style=filled]
  node2548 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return undefined</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node2552 [shape=diamond, label=<<font color="black">(|| (&lt; index 0i) (! (&lt; index length)))</font>> color="black" fillcolor="white" style=filled]
  node2541 [shape=cds, label=<<font color="black">0:app __x0__ = (Type index)</font>> color="black" fillcolor="white" style=filled]
  node2547 [shape=diamond, label=<<font color="black">(= __x2__ false)</font>> color="black" fillcolor="white" style=filled]
  node2551 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">6:let length = O.ArrayLength</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node2546 [shape=cds, label=<<font color="black">4:app __x2__ = (IsInteger index)</font>> color="black" fillcolor="white" style=filled]
  node2556 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">13:return __x3__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node2550 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return undefined</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node2545 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node2543 [shape=cds, label=<<font color="black">3:app __x1__ = (IsDetachedBuffer buffer)</font>> color="black" fillcolor="white" style=filled]
  node2554 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">8:let offset = O.ByteOffset</td></tr>
      <tr><td align="left">9:let arrayTypeName = O.TypedArrayName</td></tr>
      <tr><td align="left">10:??? &quot;Let id:{elementSize} be the Number value of the Element Size value specified in link:{unhandled: table-49} for id:{arrayTypeName} .&quot;</td></tr>
      <tr><td align="left">11:let indexedPosition = (+ (* index elementSize) offset)</td></tr>
      <tr><td align="left">12:??? &quot;Let id:{elementType} be the String value of the Element Type value in link:{unhandled: table-49} for id:{arrayTypeName} .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node2549 [shape=diamond, label=<<font color="black">(== index -0.0)</font>> color="black" fillcolor="white" style=filled]
  node2539 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node2540 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node2555 [shape=cds, label=<<font color="black">13:app __x3__ = (GetValueFromBuffer buffer indexedPosition elementType true &quot;Unordered&quot;)</font>> color="black" fillcolor="white" style=filled]
  node2542 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:assert (= __x0__ Number)</td></tr>
      <tr><td align="left">2:let buffer = O.ViewedArrayBuffer</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node2553 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return undefined</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node2543 -> node2544 [ color="black"]
  node2550 -> node2551 [ color="black"]
  node2555 -> node2556 [ color="black"]
  node2547 -> node2548 [label=<<font color="black">true</font>> color="black"]
  node2547 -> node2549 [label=<<font color="black">false</font>> color="black"]
  node2546 -> node2547 [ color="black"]
  node2551 -> node2552 [ color="black"]
  node2552 -> node2553 [label=<<font color="black">true</font>> color="black"]
  node2552 -> node2554 [label=<<font color="black">false</font>> color="black"]
  node2548 -> node2549 [ color="black"]
  node2554 -> node2555 [ color="black"]
  node2545 -> node2546 [ color="black"]
  node2549 -> node2550 [label=<<font color="black">true</font>> color="black"]
  node2549 -> node2551 [label=<<font color="black">false</font>> color="black"]
  node2556 -> node2540 [ color="black"]
  node2544 -> node2545 [label=<<font color="black">true</font>> color="black"]
  node2544 -> node2546 [label=<<font color="black">false</font>> color="black"]
  node2539 -> node2541 [ color="black"]
  node2553 -> node2554 [ color="black"]
  node2542 -> node2543 [ color="black"]
  node2541 -> node2542 [ color="black"]
}
