{
  app __x0__ = (RequireObjectCoercible this)
  if (is-completion __x0__) if (= __x0__.Type CONST_normal) __x0__ = __x0__.Value else return __x0__ else {}
  let O = __x0__
  if (! (|| (= separator undefined) (= separator null))) {
    app __x1__ = (GetMethod separator SYMBOL_split)
    if (is-completion __x1__) if (= __x1__.Type CONST_normal) __x1__ = __x1__.Value else return __x1__ else {}
    let splitter = __x1__
    if (! (= splitter undefined)) {
      app __x2__ = (Call splitter separator (new [O, limit]))
      if (is-completion __x2__) if (= __x2__.Type CONST_normal) __x2__ = __x2__.Value else return __x2__ else {}
      app __x3__ = (WrapCompletion __x2__)
      return __x3__
    } else {}
  } else {}
  app __x4__ = (ToString O)
  if (is-completion __x4__) if (= __x4__.Type CONST_normal) __x4__ = __x4__.Value else return __x4__ else {}
  let S = __x4__
  app __x5__ = (ArrayCreate 0i)
  if (is-completion __x5__) if (= __x5__.Type CONST_normal) __x5__ = __x5__.Value else return __x5__ else {}
  let A = __x5__
  let lengthA = 0i
  if (= limit undefined) let lim = (- (** 2.0 32i) 1i) else {
    app __x6__ = (ToUint32 limit)
    if (is-completion __x6__) if (= __x6__.Type CONST_normal) __x6__ = __x6__.Value else return __x6__ else {}
    let lim = __x6__
  }
  app __x7__ = (ToString separator)
  if (is-completion __x7__) if (= __x7__.Type CONST_normal) __x7__ = __x7__.Value else return __x7__ else {}
  let R = __x7__
  if (== lim 0i) {
    app __x8__ = (WrapCompletion A)
    return __x8__
  } else {}
  if (= separator undefined) {
    app __x9__ = (CreateDataPropertyOrThrow A "0" S)
    if (is-completion __x9__) if (= __x9__.Type CONST_normal) __x9__ = __x9__.Value else return __x9__ else {}
    __x9__
    app __x10__ = (WrapCompletion A)
    return __x10__
  } else {}
  let s = S.length
  if (== s 0i) {
    if (! (= R "")) {
      app __x11__ = (CreateDataPropertyOrThrow A "0" S)
      if (is-completion __x11__) if (= __x11__.Type CONST_normal) __x11__ = __x11__.Value else return __x11__ else {}
      __x11__
    } else {}
    app __x12__ = (WrapCompletion A)
    return __x12__
  } else {}
  let p = 0i
  let q = p
  while (! (== q s)) {
    app __x13__ = (SplitMatch S q R)
    let e = __x13__
    if (= e CONST_notDASHmatched) q = (+ q 1i) else if (== e p) q = (+ q 1i) else {
      let __x14__ = ""
      let __x15__ = p
      while (< __x15__ (+ q 1i)) {
        access __x16__ = (S __x15__)
        __x14__ = (+ __x14__ __x16__)
        __x15__ = (+ __x15__ 1i)
      }
      let T = __x14__
      app __x17__ = (ToString lengthA)
      if (is-completion __x17__) if (= __x17__.Type CONST_normal) __x17__ = __x17__.Value else return __x17__ else {}
      app __x18__ = (CreateDataPropertyOrThrow A __x17__ T)
      if (is-completion __x18__) if (= __x18__.Type CONST_normal) __x18__ = __x18__.Value else return __x18__ else {}
      __x18__
      lengthA = (+ lengthA 1i)
      if (== lengthA lim) {
        app __x19__ = (WrapCompletion A)
        return __x19__
      } else {}
      p = e
      q = p
    }
  }
  let __x20__ = ""
  let __x21__ = p
  while (< __x21__ (+ s 1i)) {
    access __x22__ = (S __x21__)
    __x20__ = (+ __x20__ __x22__)
    __x21__ = (+ __x21__ 1i)
  }
  let T = __x20__
  app __x23__ = (ToString lengthA)
  if (is-completion __x23__) if (= __x23__.Type CONST_normal) __x23__ = __x23__.Value else return __x23__ else {}
  app __x24__ = (CreateDataPropertyOrThrow A __x23__ T)
  if (is-completion __x24__) if (= __x24__.Type CONST_normal) __x24__ = __x24__.Value else return __x24__ else {}
  __x24__
  app __x25__ = (WrapCompletion A)
  return __x25__
}