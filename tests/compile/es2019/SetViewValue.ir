{
  [0] app __x0__ = (Type view)
  [0] if (! (= __x0__ Object)) {
    app __x1__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_TypeError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
    return __x1__
  } else [0] {}
  [1] if (= view.DataView absent) {
    app __x2__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_TypeError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
    return __x2__
  } else [0] {}
  [2] assert (! (= view.ViewedArrayBuffer absent))
  [3] app __x3__ = (ToIndex requestIndex)
  [3] if (is-completion __x3__) if (= __x3__.Type CONST_normal) __x3__ = __x3__.Value else return __x3__ else [0] {}
  [3] let getIndex = __x3__
  [4] app __x4__ = (ToNumber value)
  [4] if (is-completion __x4__) if (= __x4__.Type CONST_normal) __x4__ = __x4__.Value else return __x4__ else [0] {}
  [4] let numberValue = __x4__
  [5] app __x5__ = (ToBoolean isLittleEndian)
  [5] isLittleEndian = __x5__
  [6] let buffer = view.ViewedArrayBuffer
  [7] app __x6__ = (IsDetachedBuffer buffer)
  [7] if (= __x6__ true) {
    app __x7__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_TypeError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
    return __x7__
  } else [0] {}
  [8] let viewOffset = view.ByteOffset
  [9] let viewSize = view.ByteLength
  [10] ??? "Let id:{elementSize} be the Number value of the Element Size value specified in link:{} for Element Type id:{type} ."
  [11] if (< viewSize (+ getIndex elementSize)) {
    app __x8__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_RangeError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
    return __x8__
  } else [0] {}
  [12] let bufferIndex = (+ getIndex viewOffset)
  [13] app __x9__ = (SetValueInBuffer buffer bufferIndex type numberValue false "Unordered" isLittleEndian)
  [13] app __x10__ = (WrapCompletion __x9__)
  [13] return __x10__
}