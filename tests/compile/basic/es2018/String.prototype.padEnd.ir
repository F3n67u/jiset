{
  app __x0__ = (RequireObjectCoercible this)
  if (is-completion __x0__) if (= __x0__.Type CONST_normal) __x0__ = __x0__.Value else return __x0__ else {}
  let O = __x0__
  app __x1__ = (ToString O)
  if (is-completion __x1__) if (= __x1__.Type CONST_normal) __x1__ = __x1__.Value else return __x1__ else {}
  let S = __x1__
  app __x2__ = (ToLength maxLength)
  if (is-completion __x2__) if (= __x2__.Type CONST_normal) __x2__ = __x2__.Value else return __x2__ else {}
  let intMaxLength = __x2__
  let stringLength = S.length
  if (! (< stringLength intMaxLength)) {
    app __x3__ = (WrapCompletion S)
    return __x3__
  } else {}
  if (= fillString undefined) let filler = " " else {
    app __x4__ = (ToString fillString)
    if (is-completion __x4__) if (= __x4__.Type CONST_normal) __x4__ = __x4__.Value else return __x4__ else {}
    let filler = __x4__
  }
  if (= filler "") {
    app __x5__ = (WrapCompletion S)
    return __x5__
  } else {}
  let fillLen = (- intMaxLength stringLength)
  ??? "Let id:{truncatedStringFiller} be the String value consisting of repeated concatenations of id:{filler} truncated to length id:{fillLen} ."
  app __x6__ = (WrapCompletion (+ S truncatedStringFiller))
  return __x6__
}