digraph {
  node18693 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">1:append value -&gt; state.Stack</td></tr>
      <tr><td align="left">2:let stepback = state.Indent</td></tr>
      <tr><td align="left">3:state.Indent = (+ state.Indent state.Gap)</td></tr>
      <tr><td align="left">4:let partial = (new [])</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18697 [shape=cds, label=<<font color="black">8:app __x1__ = (ToString index)</font>> color="black" fillcolor="white" style=filled]
  node18689 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node18698 [shape=cds, label=<<font color="black">8:app __x2__ = (SerializeJSONProperty state [! __x1__] value)</font>> color="black" fillcolor="white" style=filled]
  node18699 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">8:let strP = [? __x2__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18694 [shape=cds, label=<<font color="black">5:app __x0__ = (LengthOfArrayLike value)</font>> color="black" fillcolor="white" style=filled]
  node18691 [shape=diamond, label=<<font color="black">(contains state.Stack value)</font>> color="black" fillcolor="white" style=filled]
  node18706 [shape=diamond, label=<<font color="black">(= state.Gap &quot;&quot;)</font>> color="black" fillcolor="white" style=filled]
  node18703 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">13:index = (+ index 1i)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18700 [shape=diamond, label=<<font color="black">(= strP undefined)</font>> color="black" fillcolor="white" style=filled]
  node18690 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node18705 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let final = &quot;[]&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18696 [shape=diamond, label=<<font color="black">(&lt; index len)</font>> color="black" fillcolor="white" style=filled]
  node18701 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">append &quot;null&quot; -&gt; partial</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18709 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">24:??? &quot;Remove the last element of id:{state} . [ [ Stack ] ] .&quot;</td></tr>
      <tr><td align="left">25:state.Indent = stepback</td></tr>
      <tr><td align="left">26:return final</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18704 [shape=diamond, label=<<font color="black">(= partial.length 0i)</font>> color="black" fillcolor="white" style=filled]
  node18695 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">5:let len = [? __x0__]</td></tr>
      <tr><td align="left">6:let index = 0i</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18708 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">21:let separator = (+ (+ &quot;,&quot; &quot;\n&quot;) state.Indent)</td></tr>
      <tr><td align="left">22:??? &quot;Let id:{properties} be the String value formed by concatenating all the element Strings of id:{partial} with each adjacent pair of Strings separated with id:{separator} . The id:{separator} String is not inserted either before the first String or after the last String .&quot;</td></tr>
      <tr><td align="left">23:let final = (+ (+ (+ (+ (+ (+ &quot;[&quot; &quot;\n&quot;) state.Indent) properties) &quot;\n&quot;) stepback) &quot;]&quot;)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18702 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">append strP -&gt; partial</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18692 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18707 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">18:??? &quot;Let id:{properties} be the String value formed by concatenating all the element Strings of id:{partial} with each adjacent pair of Strings separated with the code unit 0x002C ( COMMA ) . A comma is not inserted either before the first String or after the last String .&quot;</td></tr>
      <tr><td align="left">19:let final = (+ (+ &quot;[&quot; properties) &quot;]&quot;)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18703 -> node18696 [ color="black"]
  node18693 -> node18694 [ color="black"]
  node18708 -> node18709 [ color="black"]
  node18701 -> node18703 [ color="black"]
  node18700 -> node18701 [label=<<font color="black">true</font>> color="black"]
  node18700 -> node18702 [label=<<font color="black">false</font>> color="black"]
  node18702 -> node18703 [ color="black"]
  node18689 -> node18691 [ color="black"]
  node18705 -> node18709 [ color="black"]
  node18698 -> node18699 [ color="black"]
  node18699 -> node18700 [ color="black"]
  node18691 -> node18692 [label=<<font color="black">true</font>> color="black"]
  node18691 -> node18693 [label=<<font color="black">false</font>> color="black"]
  node18706 -> node18707 [label=<<font color="black">true</font>> color="black"]
  node18706 -> node18708 [label=<<font color="black">false</font>> color="black"]
  node18692 -> node18693 [ color="black"]
  node18694 -> node18695 [ color="black"]
  node18697 -> node18698 [ color="black"]
  node18707 -> node18709 [ color="black"]
  node18709 -> node18690 [ color="black"]
  node18704 -> node18705 [label=<<font color="black">true</font>> color="black"]
  node18704 -> node18706 [label=<<font color="black">false</font>> color="black"]
  node18695 -> node18696 [ color="black"]
  node18696 -> node18697 [label=<<font color="black">true</font>> color="black"]
  node18696 -> node18704 [label=<<font color="black">false</font>> color="black"]
}
