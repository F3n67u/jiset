{
  [1] let module = this
  [2] assert (|| (= module.Status CONST_linked) (= module.Status CONST_evaluated))
  [3] let stack = (new [])
  [4] app __x0__ = (InnerModuleEvaluation module stack 0i)
  [4] let result = __x0__
  [5] app __x1__ = (IsAbruptCompletion result)
  [5] if __x1__ {
    [6] let __x2__ = stack
    [6] let __x3__ = 0i
    [6] while (< __x3__ __x2__.length) {
      let m = __x2__[__x3__]
      [7] assert (= m.Status CONST_evaluating)
      [8] m.Status = CONST_evaluated
      [9] m.EvaluationError = result
      __x3__ = (+ __x3__ 1i)
    }
    [10] assert (&& (= module.Status CONST_evaluated) (= module.EvaluationError result))
    [11] app __x4__ = (WrapCompletion result)
    [11] return __x4__
  } else [0] {}
  [12] assert (&& (= module.Status CONST_evaluated) (= module.EvaluationError undefined))
  [13] assert (= stack.length 0i)
  [14] app __x5__ = (WrapCompletion undefined)
  [14] return __x5__
}