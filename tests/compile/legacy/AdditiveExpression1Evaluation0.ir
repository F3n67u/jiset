{
  access __x0__ = (AdditiveExpression "Evaluation")
  let lref = __x0__
  app __x1__ = (GetValue lref)
  let lval = [? __x1__]
  access __x2__ = (MultiplicativeExpression "Evaluation")
  let rref = __x2__
  app __x3__ = (GetValue rref)
  let rval = [? __x3__]
  app __x4__ = (ToPrimitive lval)
  let lprim = [? __x4__]
  app __x5__ = (ToPrimitive rval)
  let rprim = [? __x5__]
  if (|| (= (typeof lprim) String) (= (typeof rprim) String)) {
    app __x6__ = (ToString lprim)
    let lstr = [? __x6__]
    app __x7__ = (ToString rprim)
    let rstr = [? __x7__]
    return (+ lstr rstr)
  } else {}
  app __x8__ = (ToNumeric lprim)
  let lnum = [? __x8__]
  app __x9__ = (ToNumeric rprim)
  let rnum = [? __x9__]
  if (! (= (typeof lnum) (typeof rnum))) throw TypeError else {}
  let T = (typeof lnum)
  app __x10__ = (PRIMITIVE[T].add lnum rnum)
  return __x10__
}