{
  let rx = this
  if (! (= (typeof rx) Object)) throw TypeError else {}
  app __x0__ = (ToString string)
  let S = [? __x0__]
  app __x1__ = (Get rx "global")
  app __x2__ = (ToBoolean [? __x1__])
  let global = __x2__
  if (= global false) {
    app __x3__ = (RegExpExec rx S)
    return [? __x3__]
  } else {
    app __x4__ = (Get rx "unicode")
    app __x5__ = (ToBoolean [? __x4__])
    let fullUnicode = __x5__
    app __x6__ = (Set rx "lastIndex" 0i true)
    [? __x6__]
    app __x7__ = (ArrayCreate 0i)
    let A = [! __x7__]
    let n = 0i
    while true {
      app __x8__ = (RegExpExec rx S)
      let result = [? __x8__]
      if (= result null) {
        if (== n 0i) return null else {}
        return A
      } else {
        app __x9__ = (Get result "0")
        app __x10__ = (ToString [? __x9__])
        let matchStr = [? __x10__]
        app __x11__ = (ToString n)
        app __x12__ = (CreateDataProperty A [! __x11__] matchStr)
        let status = __x12__
        assert (= status true)
        if (= matchStr "") {
          app __x13__ = (Get rx "lastIndex")
          app __x14__ = (ToLength [? __x13__])
          let thisIndex = [? __x14__]
          app __x15__ = (AdvanceStringIndex S thisIndex fullUnicode)
          let nextIndex = __x15__
          app __x16__ = (Set rx "lastIndex" nextIndex true)
          [? __x16__]
        } else {}
        n = (+ n 1i)
      }
    }
  }
}