digraph {
  node2595 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">13:return [? __x4__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node2590 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">6:let binding = [? __x3__]</td></tr>
      <tr><td align="left">7:assert (! (|| (= binding null) (= binding &quot;ambiguous&quot;)))</td></tr>
      <tr><td align="left">8:let targetModule = binding.Module</td></tr>
      <tr><td align="left">9:assert (! (= targetModule undefined))</td></tr>
      <tr><td align="left">10:let targetEnv = targetModule.Environment</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node2580 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:assert (= __x0__ true)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node2586 [shape=diamond, label=<<font color="black">(! (contains exports P))</font>> color="black" fillcolor="white" style=filled]
  node2589 [shape=cds, label=<<font color="black">6:app __x3__ = (m.ResolveExport m P (new []) (new []))</font>> color="black" fillcolor="white" style=filled]
  node2577 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node2581 [shape=cds, label=<<font color="black">1:app __x1__ = (Type P)</font>> color="black" fillcolor="white" style=filled]
  node2585 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">3:let exports = O.Exports</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node2592 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw ReferenceError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node2582 [shape=diamond, label=<<font color="black">(= __x1__ Symbol)</font>> color="black" fillcolor="white" style=filled]
  node2588 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">5:let m = O.Module</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node2587 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return undefined</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node2583 [shape=cds, label=<<font color="black">2:app __x2__ = (OrdinaryGet O P Receiver)</font>> color="black" fillcolor="white" style=filled]
  node2593 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">12:let targetEnvRec = targetEnv.EnvironmentRecord</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node2578 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node2579 [shape=cds, label=<<font color="black">0:app __x0__ = (IsPropertyKey P)</font>> color="black" fillcolor="white" style=filled]
  node2584 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">2:return [? __x2__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node2591 [shape=diamond, label=<<font color="black">(= targetEnv undefined)</font>> color="black" fillcolor="white" style=filled]
  node2594 [shape=cds, label=<<font color="black">13:app __x4__ = (targetEnvRec.GetBindingValue targetEnvRec binding.BindingName true)</font>> color="black" fillcolor="white" style=filled]
  node2585 -> node2586 [ color="black"]
  node2586 -> node2587 [label=<<font color="black">true</font>> color="black"]
  node2586 -> node2588 [label=<<font color="black">false</font>> color="black"]
  node2584 -> node2585 [ color="black"]
  node2590 -> node2591 [ color="black"]
  node2577 -> node2579 [ color="black"]
  node2582 -> node2583 [label=<<font color="black">true</font>> color="black"]
  node2582 -> node2585 [label=<<font color="black">false</font>> color="black"]
  node2581 -> node2582 [ color="black"]
  node2593 -> node2594 [ color="black"]
  node2579 -> node2580 [ color="black"]
  node2591 -> node2592 [label=<<font color="black">true</font>> color="black"]
  node2591 -> node2593 [label=<<font color="black">false</font>> color="black"]
  node2580 -> node2581 [ color="black"]
  node2594 -> node2595 [ color="black"]
  node2589 -> node2590 [ color="black"]
  node2588 -> node2589 [ color="black"]
  node2592 -> node2593 [ color="black"]
  node2583 -> node2584 [ color="black"]
  node2595 -> node2578 [ color="black"]
  node2587 -> node2588 [ color="black"]
}
