<algorithm>
  <param>this</param>
  <param>N</param>
  <param>D</param>
  <step-list>
    <step>Let <id>envRec</id> be the global Environment Record for which the method was invoked.</step>
    <step>Let <id>ObjRec</id> be <id>envRec</id> .[[ObjectRecord]].</step>
    <step>Let <id>globalObject</id> be the binding object for <id>ObjRec</id> .</step>
    <step>Let <id>hasProperty</id> be ? HasOwnProperty ( <id>globalObject</id> , <id>N</id> ).</step>
    <step>Let <id>extensible</id> be ? IsExtensible ( <id>globalObject</id> ).</step>
    <step>If <id>hasProperty</id> is <value>false</value> and <id>extensible</id> is <value>true</value> , then     <step-list>
      <step>Perform ? <id>ObjRec</id> .CreateMutableBinding( <id>N</id> , <id>D</id> ).</step>
      <step>Perform ? <id>ObjRec</id> .InitializeBinding( <id>N</id> , <value>undefined</value> ).</step>
    </step-list></step>
    <step>Let <id>varDeclaredNames</id> be <id>envRec</id> .[[VarNames]].</step>
    <step>If <id>varDeclaredNames</id> does not contain <id>N</id> , then     <step-list>
      <step>Append <id>N</id> to <id>varDeclaredNames</id> .</step>
    </step-list></step>
    <step>Return NormalCompletion ( <value>empty</value> ).</step>
  </step-list>
</algorithm>