{
  let R = this
  app __x0__ = (Type R)
  if (! (= __x0__ Object)) throw TypeError else {}
  app __x1__ = (ToString string)
  let S = [? __x1__]
  app __x2__ = (SpeciesConstructor R INTRINSIC_RegExp)
  let C = [? __x2__]
  app __x3__ = (Get R "flags")
  app __x4__ = (ToString [? __x3__])
  let flags = [? __x4__]
  app __x5__ = (Construct C (new [R, flags]))
  let matcher = [? __x5__]
  app __x6__ = (Get R "lastIndex")
  app __x7__ = (ToLength [? __x6__])
  let lastIndex = [? __x7__]
  app __x8__ = (Set matcher "lastIndex" lastIndex true)
  [? __x8__]
  if (contains flags "g") let global = true else let global = false
  if (contains flags "u") let fullUnicode = true else let fullUnicode = false
  app __x9__ = (CreateRegExpStringIterator matcher S global fullUnicode)
  return [! __x9__]
}