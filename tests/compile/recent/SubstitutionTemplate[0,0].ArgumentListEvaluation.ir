{
  [0] access __x0__ = (Expression "Evaluation")
  [0] let firstSubRef = __x0__
  [1] app __x1__ = (GetValue firstSubRef)
  [1] if (is-completion __x1__) if (= __x1__.Type CONST_normal) __x1__ = __x1__.Value else return __x1__ else [3] {}
  [1] let firstSub = __x1__
  [2] access __x2__ = (TemplateSpans "SubstitutionEvaluation")
  [2] if (is-completion __x2__) if (= __x2__.Type CONST_normal) __x2__ = __x2__.Value else return __x2__ else [3] {}
  [2] let restSub = __x2__
  [4] ??? "Return a List whose first element is id:{firstSub} and whose subsequent elements are the elements of id:{restSub} . id:{restSub} may contain no elements ."
}