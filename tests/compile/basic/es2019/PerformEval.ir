{
  if (! (= (typeof x) String)) return x else {}
  app __x0__ = (GetThisEnvironment)
  let thisEnvRec = [! __x0__]
  if (is-instance-of thisEnvRec FunctionEnvironmentRecord) {
    let F = thisEnvRec.FunctionObject
    let inFunction = true
    app __x1__ = (thisEnvRec.HasSuperBinding thisEnvRec)
    let inMethod = __x1__
    if (= F.ConstructorKind "derived") let inDerivedConstructor = true else let inDerivedConstructor = false
  } else {
    let inFunction = false
    let inMethod = false
    let inDerivedConstructor = false
  }
  ??? "Let id:{script} be the ECMAScript code that is the result of parsing id:{x} , interpreted as UTF - 16 encoded Unicode text as described in link:{unhandled: sec-ecmascript-language-types-string-type} , for the goal symbol nt:{Script} . If id:{inFunction} is value:{false} , additional early error rules from link:{unhandled: sec-performeval-rules-outside-functions} are applied . If id:{inMethod} is value:{false} , additional early error rules from link:{unhandled: sec-performeval-rules-outside-methods} are applied . If id:{inDerivedConstructor} is value:{false} , additional early error rules from link:{unhandled: sec-performeval-rules-outside-constructors} are applied . If the parse fails , throw a value:{SyntaxError} exception . If any early errors are detected , throw a value:{SyntaxError} or a value:{ReferenceError} exception , depending on the type of the error ( but see also clause link:{unhandled: sec-error-handling-and-language-extensions} ) . Parsing and early error detection may be interweaved in an implementation - dependent manner ."
  access __x2__ = (script "Contains" "ScriptBody")
  if (= __x2__ false) return undefined else {}
  access __x3__ = (script "ScriptBody")
  let body = __x3__
  if (= strictCaller true) let strictEval = true else {
    access __x4__ = (script "IsStrict")
    let strictEval = __x4__
  }
  let ctx = GLOBAL_context
  if (= direct true) {
    app __x5__ = (NewDeclarativeEnvironment ctx.LexicalEnvironment)
    let lexEnv = __x5__
    let varEnv = ctx.VariableEnvironment
  } else {
    app __x6__ = (NewDeclarativeEnvironment evalRealm.GlobalEnv)
    let lexEnv = __x6__
    let varEnv = evalRealm.GlobalEnv
  }
  if (= strictEval true) varEnv = lexEnv else {}
  if (= ctx null) GLOBAL_context = null else {}
  let evalCxt = (new ExecutionContext("SubMap" -> (new SubMap())))
  evalCxt.Function = null
  evalCxt.Realm = evalRealm
  evalCxt.ScriptOrModule = ctx.ScriptOrModule
  evalCxt.VariableEnvironment = varEnv
  evalCxt.LexicalEnvironment = lexEnv
  append evalCxt -> GLOBAL_executionStack
  GLOBAL_context = GLOBAL_executionStack[(- GLOBAL_executionStack.length 1i)]
  app __x7__ = (EvalDeclarationInstantiation body varEnv lexEnv strictEval)
  let result = __x7__
  if (= result.Type CONST_normal) {
    access __x8__ = (body "Evaluation")
    result = __x8__
  } else {}
  if (&& (= result.Type CONST_normal) (= result.Value CONST_empty)) {
    app __x9__ = (NormalCompletion undefined)
    result = __x9__
  } else {}
  GLOBAL_context = null
  if (= GLOBAL_executionStack[(- GLOBAL_executionStack.length 1i)] evalCxt) (pop GLOBAL_executionStack (- GLOBAL_executionStack.length 1i)) else {}
  GLOBAL_context = GLOBAL_executionStack[(- GLOBAL_executionStack.length 1i)]
  return result
}