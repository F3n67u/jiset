digraph {
  node5550 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">__x5__ = (+ __x5__ 1i)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node5533 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node5541 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">4:let __x4__ = __x3__</td></tr>
      <tr><td align="left">4:let __x5__ = 0i</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node5547 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">6:[! __x7__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node5544 [shape=cds, label=<<font color="black">7:access __x6__ = (d &quot;IsConstantDeclaration&quot;)</font>> color="black" fillcolor="white" style=filled]
  node5535 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let envRec = env.EnvironmentRecord</td></tr>
      <tr><td align="left">1:assert (= (typeof envRec) &quot;DeclarativeEnvironmentRecord&quot;)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node5543 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let dn = __x4__[__x5__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node5536 [shape=cds, label=<<font color="black">2:access __x0__ = (code &quot;LexicallyScopedDeclarations&quot;)</font>> color="black" fillcolor="white" style=filled]
  node5549 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">8:[! __x8__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node5537 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">2:let declarations = __x0__</td></tr>
      <tr><td align="left">3:let __x1__ = declarations</td></tr>
      <tr><td align="left">3:let __x2__ = 0i</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node5542 [shape=diamond, label=<<font color="black">(&lt; __x5__ __x4__.length)</font>> color="black" fillcolor="white" style=filled]
  node5545 [shape=diamond, label=<<font color="black">(= __x6__ true)</font>> color="black" fillcolor="white" style=filled]
  node5540 [shape=cds, label=<<font color="black">4:access __x3__ = (d &quot;BoundNames&quot;)</font>> color="black" fillcolor="white" style=filled]
  node5534 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node5551 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">9:??? &quot;If id:{d} is a nt:{GeneratorDeclaration} production or a nt:{FunctionDeclaration} production , then in:{} out:{}&quot;</td></tr>
      <tr><td align="left">__x2__ = (+ __x2__ 1i)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node5546 [shape=cds, label=<<font color="black">6:app __x7__ = (envRec.CreateImmutableBinding envRec dn true)</font>> color="black" fillcolor="white" style=filled]
  node5539 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let d = __x1__[__x2__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node5548 [shape=cds, label=<<font color="black">8:app __x8__ = (envRec.CreateMutableBinding envRec dn false)</font>> color="black" fillcolor="white" style=filled]
  node5538 [shape=diamond, label=<<font color="black">(&lt; __x2__ __x1__.length)</font>> color="black" fillcolor="white" style=filled]
  node5533 -> node5535 [ color="black"]
  node5544 -> node5545 [ color="black"]
  node5539 -> node5540 [ color="black"]
  node5538 -> node5539 [label=<<font color="black">true</font>> color="black"]
  node5538 -> node5534 [label=<<font color="black">false</font>> color="black"]
  node5548 -> node5549 [ color="black"]
  node5551 -> node5538 [ color="black"]
  node5546 -> node5547 [ color="black"]
  node5543 -> node5544 [ color="black"]
  node5550 -> node5542 [ color="black"]
  node5549 -> node5550 [ color="black"]
  node5537 -> node5538 [ color="black"]
  node5545 -> node5546 [label=<<font color="black">true</font>> color="black"]
  node5545 -> node5548 [label=<<font color="black">false</font>> color="black"]
  node5542 -> node5543 [label=<<font color="black">true</font>> color="black"]
  node5542 -> node5551 [label=<<font color="black">false</font>> color="black"]
  node5536 -> node5537 [ color="black"]
  node5540 -> node5541 [ color="black"]
  node5541 -> node5542 [ color="black"]
  node5535 -> node5536 [ color="black"]
  node5547 -> node5550 [ color="black"]
}
