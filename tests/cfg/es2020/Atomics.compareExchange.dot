digraph {
  node17424 [shape=cds, label=<<font color="black">5:app __x3__ = (ToBigInt replacementValue)</font>> color="black" fillcolor="white" style=filled]
  node17411 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node17415 [shape=cds, label=<<font color="black">app expectedValue = (GetArgument argumentsList 2i)</font>> color="black" fillcolor="white" style=filled]
  node17432 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">11:let expectedBytes = __x6__</td></tr>
      <tr><td align="left">12:??? &quot;Let id:{elementSize} be the Element Size value specified in link:{unhandled: table-the-typedarray-constructors} for id:{arrayTypeName} .&quot;</td></tr>
      <tr><td align="left">13:let offset = typedArray.ByteOffset</td></tr>
      <tr><td align="left">14:let indexedPosition = (+ (* i elementSize) offset)</td></tr>
      <tr><td align="left">15:??? &quot;Let code:{compareExchange} denote a semantic function of two List of byte values arguments that returns the second argument if the first argument is element - wise equal to id:{expectedBytes} .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17423 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">4:let expected = [? __x2__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17412 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node17422 [shape=cds, label=<<font color="black">4:app __x2__ = (ToBigInt expectedValue)</font>> color="black" fillcolor="white" style=filled]
  node17418 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let buffer = [? __x0__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17430 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">9:??? &quot;Let id:{elementType} be the Element Type value in link:{unhandled: table-the-typedarray-constructors} for id:{arrayTypeName} .&quot;</td></tr>
      <tr><td align="left">10:let isLittleEndian = GLOBAL_agent.LittleEndian</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17413 [shape=cds, label=<<font color="black">app typedArray = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node17421 [shape=diamond, label=<<font color="black">(= typedArray.ContentType CONST_BigInt)</font>> color="black" fillcolor="white" style=filled]
  node17417 [shape=cds, label=<<font color="black">0:app __x0__ = (ValidateSharedIntegerTypedArray typedArray)</font>> color="black" fillcolor="white" style=filled]
  node17433 [shape=cds, label=<<font color="black">16:app __x7__ = (GetModifySetValueInBuffer buffer indexedPosition elementType replacement ??? &quot;compareExchange&quot;)</font>> color="black" fillcolor="white" style=filled]
  node17428 [shape=cds, label=<<font color="black">8:app __x5__ = (ToInteger replacementValue)</font>> color="black" fillcolor="white" style=filled]
  node17425 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">5:let replacement = [? __x3__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17420 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">1:let i = [? __x1__]</td></tr>
      <tr><td align="left">2:let arrayTypeName = typedArray.TypedArrayName</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17429 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">8:let replacement = [? __x5__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17416 [shape=cds, label=<<font color="black">app replacementValue = (GetArgument argumentsList 3i)</font>> color="black" fillcolor="white" style=filled]
  node17419 [shape=cds, label=<<font color="black">1:app __x1__ = (ValidateAtomicAccess typedArray index)</font>> color="black" fillcolor="white" style=filled]
  node17426 [shape=cds, label=<<font color="black">7:app __x4__ = (ToInteger expectedValue)</font>> color="black" fillcolor="white" style=filled]
  node17427 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">7:let expected = [? __x4__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17434 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">16:return __x7__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17431 [shape=cds, label=<<font color="black">11:app __x6__ = (NumericToRawBytes elementType expected isLittleEndian)</font>> color="black" fillcolor="white" style=filled]
  node17414 [shape=cds, label=<<font color="black">app index = (GetArgument argumentsList 1i)</font>> color="black" fillcolor="white" style=filled]
  node17415 -> node17416 [ color="black"]
  node17432 -> node17433 [ color="black"]
  node17424 -> node17425 [ color="black"]
  node17413 -> node17414 [ color="black"]
  node17431 -> node17432 [ color="black"]
  node17421 -> node17422 [label=<<font color="black">true</font>> color="black"]
  node17421 -> node17426 [label=<<font color="black">false</font>> color="black"]
  node17411 -> node17413 [ color="black"]
  node17426 -> node17427 [ color="black"]
  node17419 -> node17420 [ color="black"]
  node17420 -> node17421 [ color="black"]
  node17417 -> node17418 [ color="black"]
  node17416 -> node17417 [ color="black"]
  node17425 -> node17430 [ color="black"]
  node17422 -> node17423 [ color="black"]
  node17414 -> node17415 [ color="black"]
  node17429 -> node17430 [ color="black"]
  node17418 -> node17419 [ color="black"]
  node17434 -> node17412 [ color="black"]
  node17427 -> node17428 [ color="black"]
  node17433 -> node17434 [ color="black"]
  node17428 -> node17429 [ color="black"]
  node17423 -> node17424 [ color="black"]
  node17430 -> node17431 [ color="black"]
}
