digraph {
  node14367 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let O = [? __x0__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14377 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let pos = 0i</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14382 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return true</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14391 [shape=cds, label=<<font color="black">13:app __x8__ = (SameValueNonNumeric substring searchStr)</font>> color="black" fillcolor="white" style=filled]
  node14376 [shape=diamond, label=<<font color="black">(= position undefined)</font>> color="black" fillcolor="white" style=filled]
  node14387 [shape=diamond, label=<<font color="black">(&lt; __x6__ (+ end 1i))</font>> color="black" fillcolor="white" style=filled]
  node14372 [shape=diamond, label=<<font color="black">(= isRegExp true)</font>> color="black" fillcolor="white" style=filled]
  node14363 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node14362 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node14384 [shape=diamond, label=<<font color="black">(&lt; len end)</font>> color="black" fillcolor="white" style=filled]
  node14365 [shape=cds, label=<<font color="black">app position = (GetArgument argumentsList 1i)</font>> color="black" fillcolor="white" style=filled]
  node14370 [shape=cds, label=<<font color="black">2:app __x2__ = (IsRegExp searchString)</font>> color="black" fillcolor="white" style=filled]
  node14385 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return false</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14374 [shape=cds, label=<<font color="black">4:app __x3__ = (ToString searchString)</font>> color="black" fillcolor="white" style=filled]
  node14389 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">__x5__ = (+ __x5__ __x7__)</td></tr>
      <tr><td align="left">__x6__ = (+ __x6__ 1i)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14368 [shape=cds, label=<<font color="black">1:app __x1__ = (ToString O)</font>> color="black" fillcolor="white" style=filled]
  node14380 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">7:??? &quot;Let id:{start} be the result of clamping id:{pos} between 0 and id:{len} .&quot;</td></tr>
      <tr><td align="left">8:let searchLength = searchStr.length</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14381 [shape=diamond, label=<<font color="black">(== searchLength 0i)</font>> color="black" fillcolor="white" style=filled]
  node14366 [shape=cds, label=<<font color="black">0:app __x0__ = (RequireObjectCoercible this)</font>> color="black" fillcolor="white" style=filled]
  node14369 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">1:let S = [? __x1__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14392 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">13:return [! __x8__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14388 [shape=cds, label=<<font color="black">access __x7__ = (S __x6__)</font>> color="black" fillcolor="white" style=filled]
  node14373 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14364 [shape=cds, label=<<font color="black">app searchString = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node14379 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let pos = [? __x4__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14378 [shape=cds, label=<<font color="black">app __x4__ = (ToIntegerOrInfinity position)</font>> color="black" fillcolor="white" style=filled]
  node14383 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">10:let end = (+ start searchLength)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14386 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">12:let __x5__ = &quot;&quot;</td></tr>
      <tr><td align="left">12:let __x6__ = start</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14375 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">4:let searchStr = [? __x3__]</td></tr>
      <tr><td align="left">5:let len = S.length</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14390 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">12:let substring = __x5__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14371 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">2:let isRegExp = [? __x2__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14382 -> node14383 [ color="black"]
  node14374 -> node14375 [ color="black"]
  node14388 -> node14389 [ color="black"]
  node14392 -> node14363 [ color="black"]
  node14371 -> node14372 [ color="black"]
  node14376 -> node14377 [label=<<font color="black">true</font>> color="black"]
  node14376 -> node14378 [label=<<font color="black">false</font>> color="black"]
  node14370 -> node14371 [ color="black"]
  node14378 -> node14379 [ color="black"]
  node14368 -> node14369 [ color="black"]
  node14381 -> node14382 [label=<<font color="black">true</font>> color="black"]
  node14381 -> node14383 [label=<<font color="black">false</font>> color="black"]
  node14372 -> node14373 [label=<<font color="black">true</font>> color="black"]
  node14372 -> node14374 [label=<<font color="black">false</font>> color="black"]
  node14385 -> node14386 [ color="black"]
  node14389 -> node14387 [ color="black"]
  node14390 -> node14391 [ color="black"]
  node14377 -> node14380 [ color="black"]
  node14375 -> node14376 [ color="black"]
  node14365 -> node14366 [ color="black"]
  node14391 -> node14392 [ color="black"]
  node14362 -> node14364 [ color="black"]
  node14364 -> node14365 [ color="black"]
  node14384 -> node14385 [label=<<font color="black">true</font>> color="black"]
  node14384 -> node14386 [label=<<font color="black">false</font>> color="black"]
  node14380 -> node14381 [ color="black"]
  node14379 -> node14380 [ color="black"]
  node14373 -> node14374 [ color="black"]
  node14387 -> node14388 [label=<<font color="black">true</font>> color="black"]
  node14387 -> node14390 [label=<<font color="black">false</font>> color="black"]
  node14386 -> node14387 [ color="black"]
  node14367 -> node14368 [ color="black"]
  node14383 -> node14384 [ color="black"]
  node14369 -> node14370 [ color="black"]
  node14366 -> node14367 [ color="black"]
}
