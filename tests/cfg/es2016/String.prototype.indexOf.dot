digraph {
  node11998 [shape=cds, label=<<font color="black">2:app __x2__ = (ToString searchString)</font>> color="black" fillcolor="white" style=filled]
  node11994 [shape=cds, label=<<font color="black">0:app __x0__ = (RequireObjectCoercible this)</font>> color="black" fillcolor="white" style=filled]
  node12003 [shape=cds, label=<<font color="black">5:app __x5__ = (min __x4__ len)</font>> color="black" fillcolor="white" style=filled]
  node11991 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node11993 [shape=cds, label=<<font color="black">app position = (GetArgument argumentsList 1i)</font>> color="black" fillcolor="white" style=filled]
  node12004 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">5:let start = __x5__</td></tr>
      <tr><td align="left">6:let searchLen = searchStr.length</td></tr>
      <tr><td align="left">7:??? &quot;Return the smallest possible integer id:{k} not smaller than id:{start} such that id:{k} + id:{searchLen} is not greater than id:{len} , and for all nonnegative integers id:{j} less than id:{searchLen} , the code unit at index id:{k} + id:{j} of id:{S} is the same as the code unit at index id:{j} of id:{searchStr} ; but if there is no such integer id:{k} , return the value code:{-1} .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11997 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">1:let S = [? __x1__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11996 [shape=cds, label=<<font color="black">1:app __x1__ = (ToString O)</font>> color="black" fillcolor="white" style=filled]
  node12000 [shape=cds, label=<<font color="black">3:app __x3__ = (ToInteger position)</font>> color="black" fillcolor="white" style=filled]
  node12001 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">3:let pos = [? __x3__]</td></tr>
      <tr><td align="left">4:let len = S.length</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11995 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let O = [? __x0__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11999 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">2:let searchStr = [? __x2__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12002 [shape=cds, label=<<font color="black">5:app __x4__ = (max pos 0i)</font>> color="black" fillcolor="white" style=filled]
  node11990 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node11992 [shape=cds, label=<<font color="black">app searchString = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node11994 -> node11995 [ color="black"]
  node12004 -> node11991 [ color="black"]
  node11996 -> node11997 [ color="black"]
  node11990 -> node11992 [ color="black"]
  node11998 -> node11999 [ color="black"]
  node11992 -> node11993 [ color="black"]
  node11995 -> node11996 [ color="black"]
  node11993 -> node11994 [ color="black"]
  node12002 -> node12003 [ color="black"]
  node11997 -> node11998 [ color="black"]
  node12000 -> node12001 [ color="black"]
  node12001 -> node12002 [ color="black"]
  node12003 -> node12004 [ color="black"]
  node11999 -> node12000 [ color="black"]
}
