digraph {
  node17274 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node17273 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node17279 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">1:??? &quot;It is a Syntax Error if the nt:{LeftHandSideExpression} is grammar:{CoverParenthesizedExpressionAndArrowParameterList0, [Expression]} and nt:{Expression} derives a phrase that would produce a Syntax Error according to these rules if that phrase were substituted for nt:{LeftHandSideExpression} . This rule is recursively applied .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17278 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return undefined</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17275 [shape=cds, label=<<font color="black">0:access __x0__ = (LeftHandSideExpression &quot;IsValidSimpleAssignmentTarget&quot;)</font>> color="black" fillcolor="white" style=filled]
  node17276 [shape=diamond, label=<<font color="black">(= __x0__ false)</font>> color="black" fillcolor="white" style=filled]
  node17277 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw SyntaxError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17277 -> node17279 [ color="black"]
  node17278 -> node17279 [ color="black"]
  node17273 -> node17275 [ color="black"]
  node17275 -> node17276 [ color="black"]
  node17276 -> node17277 [label=<<font color="black">true</font>> color="black"]
  node17276 -> node17278 [label=<<font color="black">false</font>> color="black"]
  node17279 -> node17274 [ color="black"]
}
