digraph {
  node7781 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node7782 [shape=cds, label=<<font color="black">0:app __x0__ = (Type object)</font>> color="black" fillcolor="white" style=filled]
  node7785 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">1:let iterator = [! __x1__]</td></tr>
      <tr><td align="left">2:iterator.Object = object</td></tr>
      <tr><td align="left">3:iterator.ObjectWasVisited = false</td></tr>
      <tr><td align="left">4:iterator.VisitedKeys = (new [])</td></tr>
      <tr><td align="left">5:iterator.RemainingKeys = (new [])</td></tr>
      <tr><td align="left">6:return iterator</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node7783 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:assert (= __x0__ Object)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node7784 [shape=cds, label=<<font color="black">1:app __x1__ = (OrdinaryObjectCreate INTRINSIC_ForInIteratorPrototype (new [&quot;Object&quot;, &quot;ObjectWasVisited&quot;, &quot;VisitedKeys&quot;, &quot;RemainingKeys&quot;]))</font>> color="black" fillcolor="white" style=filled]
  node7780 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node7780 -> node7782 [ color="black"]
  node7782 -> node7783 [ color="black"]
  node7783 -> node7784 [ color="black"]
  node7784 -> node7785 [ color="black"]
  node7785 -> node7781 [ color="black"]
}
