{
  app __x0__ = (Type S)
  assert (= __x0__ String)
  let length = S.length
  app __x1__ = (Get R "lastIndex")
  app __x2__ = (ToLength [? __x1__])
  let lastIndex = [? __x2__]
  let flags = R.OriginalFlags
  if (contains flags "g") let global = true else let global = false
  if (contains flags "y") let sticky = true else let sticky = false
  if (&& (= global false) (= sticky false)) lastIndex = 0i else {}
  let matcher = R.RegExpMatcher
  if (contains flags "u") let fullUnicode = true else let fullUnicode = false
  let matchSucceeded = false
  while (= matchSucceeded false) {
    if (< length lastIndex) {
      if (|| (= global true) (= sticky true)) {
        app __x3__ = (Set R "lastIndex" 0i true)
        [? __x3__]
      } else {}
      return null
    } else {}
    app __x4__ = (matcher S lastIndex)
    let r = __x4__
    if (= r CONST_failure) {
      if (= sticky true) {
        app __x5__ = (Set R "lastIndex" 0i true)
        [? __x5__]
        return null
      } else {}
      app __x6__ = (AdvanceStringIndex S lastIndex fullUnicode)
      lastIndex = __x6__
    } else matchSucceeded = true
  }
  let e = r.endIndex
  if (= fullUnicode true) {
    ??? "id:{e} is an index into the id:{Input} character list , derived from id:{S} , matched by id:{matcher} . Let id:{eUTF} be the smallest index into id:{S} that corresponds to the character at element id:{e} of id:{Input} . If id:{e} is greater than or equal to the number of elements in id:{Input} , then id:{eUTF} is the number of code units in id:{S} ."
    e = eUTF
  } else {}
  if (|| (= global true) (= sticky true)) {
    app __x7__ = (Set R "lastIndex" e true)
    [? __x7__]
  } else {}
  ??? "Let id:{n} be the number of elements in id:{r} ' s id:{captures} List . ( This is the same value as link:{unhandled: sec-notation} ' s id:{NcapturingParens} . )"
  assert (< n (- (** 2.0 32i) 1i))
  app __x8__ = (ArrayCreate (+ n 1i))
  let A = [! __x8__]
  app __x9__ = (CreateDataPropertyOrThrow A "index" lastIndex)
  [! __x9__]
  app __x10__ = (CreateDataPropertyOrThrow A "input" S)
  [! __x10__]
  let __x11__ = ""
  let __x12__ = lastIndex
  while (< __x12__ (+ e 1i)) {
    access __x13__ = (S __x12__)
    __x11__ = (+ __x11__ __x13__)
    __x12__ = (+ __x12__ 1i)
  }
  let matchedSubstr = __x11__
  app __x14__ = (CreateDataPropertyOrThrow A "0" matchedSubstr)
  [! __x14__]
  ??? "If id:{R} contains any nt:{GroupName} , then in:{} out:{}"
  ??? "Else , in:{} out:{}"
  app __x15__ = (CreateDataPropertyOrThrow A "groups" groups)
  [! __x15__]
  ??? "For each integer id:{i} such that id:{i} ≥ 1 and id:{i} ≤ id:{n} , do in:{} out:{}"
  return A
}