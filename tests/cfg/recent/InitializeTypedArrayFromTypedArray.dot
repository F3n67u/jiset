digraph {
  node16836 [shape=cds, label=<<font color="black">14:app __x2__ = (SpeciesConstructor srcData INTRINSIC_ArrayBuffer)</font>> color="black" fillcolor="white" style=filled]
  node16849 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">23:let srcByteIndex = srcByteOffset</td></tr>
      <tr><td align="left">24:let targetByteIndex = 0i</td></tr>
      <tr><td align="left">25:let count = elementLength</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16840 [shape=cds, label=<<font color="black">18:app __x3__ = (CloneArrayBuffer srcData srcByteOffset byteLength bufferConstructor)</font>> color="black" fillcolor="white" style=filled]
  node16841 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">18:let data = [? __x3__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16829 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">2:let srcData = srcArray.ViewedArrayBuffer</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16855 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">32:O.ViewedArrayBuffer = data</td></tr>
      <tr><td align="left">33:O.ByteLength = byteLength</td></tr>
      <tr><td align="left">34:O.ByteOffset = 0i</td></tr>
      <tr><td align="left">35:O.ArrayLength = elementLength</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16851 [shape=cds, label=<<font color="black">27:app __x6__ = (GetValueFromBuffer srcData srcByteIndex srcType true CONST_Unordered)</font>> color="black" fillcolor="white" style=filled]
  node16834 [shape=cds, label=<<font color="black">15:app __x1__ = (IsSharedArrayBuffer srcData)</font>> color="black" fillcolor="white" style=filled]
  node16835 [shape=diamond, label=<<font color="black">(= __x1__ false)</font>> color="black" fillcolor="white" style=filled]
  node16830 [shape=cds, label=<<font color="black">3:app __x0__ = (IsDetachedBuffer srcData)</font>> color="black" fillcolor="white" style=filled]
  node16845 [shape=diamond, label=<<font color="black">(= __x5__ true)</font>> color="black" fillcolor="white" style=filled]
  node16853 [shape=cds, label=<<font color="black">28:app __x7__ = (SetValueInBuffer data targetByteIndex elementType value true CONST_Unordered)</font>> color="black" fillcolor="white" style=filled]
  node16848 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16833 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">4:let constructorName = O.TypedArrayName</td></tr>
      <tr><td align="left">5:??? &quot;Let id:{elementType} be the Element Type value in link:{unhandled: table-the-typedarray-constructors} for id:{constructorName} .&quot;</td></tr>
      <tr><td align="left">6:let elementLength = srcArray.ArrayLength</td></tr>
      <tr><td align="left">7:let srcName = srcArray.TypedArrayName</td></tr>
      <tr><td align="left">8:??? &quot;Let id:{srcType} be the Element Type value in link:{unhandled: table-the-typedarray-constructors} for id:{srcName} .&quot;</td></tr>
      <tr><td align="left">9:??? &quot;Let id:{srcElementSize} be the Element Size value specified in link:{unhandled: table-the-typedarray-constructors} for id:{srcName} .&quot;</td></tr>
      <tr><td align="left">10:let srcByteOffset = srcArray.ByteOffset</td></tr>
      <tr><td align="left">11:??? &quot;Let id:{elementSize} be the Element Size value specified in link:{unhandled: table-the-typedarray-constructors} for id:{constructorName} .&quot;</td></tr>
      <tr><td align="left">12:let byteLength = (* elementSize elementLength)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16850 [shape=diamond, label=<<font color="black">(&lt; 0i count)</font>> color="black" fillcolor="white" style=filled]
  node16847 [shape=diamond, label=<<font color="black">(! (== srcArray.ContentType O.ContentType))</font>> color="black" fillcolor="white" style=filled]
  node16832 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16844 [shape=cds, label=<<font color="black">21:app __x5__ = (IsDetachedBuffer srcData)</font>> color="black" fillcolor="white" style=filled]
  node16837 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">14:let bufferConstructor = [? __x2__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16854 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">28:__x7__</td></tr>
      <tr><td align="left">29:srcByteIndex = (+ srcByteIndex srcElementSize)</td></tr>
      <tr><td align="left">30:targetByteIndex = (+ targetByteIndex elementSize)</td></tr>
      <tr><td align="left">31:count = (- count 1i)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16838 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let bufferConstructor = INTRINSIC_ArrayBuffer</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16831 [shape=diamond, label=<<font color="black">(= __x0__ true)</font>> color="black" fillcolor="white" style=filled]
  node16828 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node16843 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">20:let data = [? __x4__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16839 [shape=diamond, label=<<font color="black">(= elementType srcType)</font>> color="black" fillcolor="white" style=filled]
  node16846 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16852 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">27:let value = __x6__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16827 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node16842 [shape=cds, label=<<font color="black">20:app __x4__ = (AllocateArrayBuffer bufferConstructor byteLength)</font>> color="black" fillcolor="white" style=filled]
  node16843 -> node16844 [ color="black"]
  node16829 -> node16830 [ color="black"]
  node16844 -> node16845 [ color="black"]
  node16832 -> node16833 [ color="black"]
  node16830 -> node16831 [ color="black"]
  node16842 -> node16843 [ color="black"]
  node16845 -> node16846 [label=<<font color="black">true</font>> color="black"]
  node16845 -> node16847 [label=<<font color="black">false</font>> color="black"]
  node16849 -> node16850 [ color="black"]
  node16846 -> node16847 [ color="black"]
  node16841 -> node16855 [ color="black"]
  node16848 -> node16849 [ color="black"]
  node16852 -> node16853 [ color="black"]
  node16854 -> node16850 [ color="black"]
  node16839 -> node16840 [label=<<font color="black">true</font>> color="black"]
  node16839 -> node16842 [label=<<font color="black">false</font>> color="black"]
  node16836 -> node16837 [ color="black"]
  node16827 -> node16829 [ color="black"]
  node16840 -> node16841 [ color="black"]
  node16831 -> node16832 [label=<<font color="black">true</font>> color="black"]
  node16831 -> node16833 [label=<<font color="black">false</font>> color="black"]
  node16853 -> node16854 [ color="black"]
  node16850 -> node16851 [label=<<font color="black">true</font>> color="black"]
  node16850 -> node16855 [label=<<font color="black">false</font>> color="black"]
  node16851 -> node16852 [ color="black"]
  node16834 -> node16835 [ color="black"]
  node16838 -> node16839 [ color="black"]
  node16847 -> node16848 [label=<<font color="black">true</font>> color="black"]
  node16847 -> node16849 [label=<<font color="black">false</font>> color="black"]
  node16835 -> node16836 [label=<<font color="black">true</font>> color="black"]
  node16835 -> node16838 [label=<<font color="black">false</font>> color="black"]
  node16855 -> node16828 [ color="black"]
  node16833 -> node16834 [ color="black"]
  node16837 -> node16839 [ color="black"]
}
