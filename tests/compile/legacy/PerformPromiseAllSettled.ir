{
  app __x0__ = (IsConstructor constructor)
  assert (= [! __x0__] true)
  let values = (new [])
  let remainingElementsCount = (new Record("Value" -> 1i))
  let index = 0i
  app __x1__ = (Get constructor "resolve")
  let promiseResolve = [? __x1__]
  app __x2__ = (IsCallable promiseResolve)
  if (= __x2__ false) throw INTRINSIC_TypeError else {}
  while true {
    app __x3__ = (IteratorStep iteratorRecord)
    let next = __x3__
    app __x4__ = (IsAbruptCompletion next)
    if __x4__ iteratorRecord.Done = true else {}
    [? next]
    if (= next false) {
      iteratorRecord.Done = true
      remainingElementsCount.Value = (- remainingElementsCount.Value 1i)
      if (= remainingElementsCount.Value 0i) {
        app __x5__ = (CreateArrayFromList values)
        let valuesArray = [! __x5__]
        app __x6__ = (Call resultCapability.Resolve undefined (new [valuesArray]))
        [? __x6__]
      } else {}
      return resultCapability.Promise
    } else {}
    app __x7__ = (IteratorValue next)
    let nextValue = __x7__
    app __x8__ = (IsAbruptCompletion nextValue)
    if __x8__ iteratorRecord.Done = true else {}
    [? nextValue]
    append undefined -> values
    app __x9__ = (Call promiseResolve constructor (new [nextValue]))
    let nextPromise = [? __x9__]
    ??? "Let id:{steps} be the algorithm steps defined in Promise . allSettled Resolve Element Functions ."
    app __x10__ = (CreateBuiltinFunction steps (new ["AlreadyCalled", "Index", "Values", "Capability", "RemainingElements"]))
    let resolveElement = [! __x10__]
    let alreadyCalled = (new Record("Value" -> false))
    resolveElement.AlreadyCalled = alreadyCalled
    resolveElement.Index = index
    resolveElement.Values = values
    resolveElement.Capability = resultCapability
    resolveElement.RemainingElements = remainingElementsCount
    ??? "Let id:{rejectSteps} be the algorithm steps defined in Promise . allSettled Reject Element Functions ."
    app __x11__ = (CreateBuiltinFunction rejectSteps (new ["AlreadyCalled", "Index", "Values", "Capability", "RemainingElements"]))
    let rejectElement = [! __x11__]
    rejectElement.AlreadyCalled = alreadyCalled
    rejectElement.Index = index
    rejectElement.Values = values
    rejectElement.Capability = resultCapability
    rejectElement.RemainingElements = remainingElementsCount
    remainingElementsCount.Value = (+ remainingElementsCount.Value 1i)
    app __x12__ = (Invoke nextPromise "then" (new [resolveElement, rejectElement]))
    [? __x12__]
    index = (+ index 1i)
  }
}