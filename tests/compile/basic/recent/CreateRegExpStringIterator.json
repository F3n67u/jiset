["Assert", ":", "Type", "(", {
  "id": "S"
}, ")", "is", "String", ".", {
  "k": 0
}, "Assert", ":", "Type", "(", {
  "id": "global"
}, ")", "is", "Boolean", ".", {
  "k": 1
}, "Assert", ":", "Type", "(", {
  "id": "fullUnicode"
}, ")", "is", "Boolean", ".", {
  "k": 2
}, "Let", {
  "id": "closure"
}, "be", "a", "new", "Abstract", "Closure", "with", "no", "parameters", "that", "captures", {
  "id": "R"
}, ",", {
  "id": "S"
}, ",", {
  "id": "global"
}, ",", "and", {
  "id": "fullUnicode"
}, "and", "performs", "the", "following", "steps", "when", "called", ":", {
  "in": null
}, "Repeat", ",", {
  "in": null
}, "Let", {
  "id": "match"
}, "be", "?", "RegExpExec", "(", {
  "id": "R"
}, ",", {
  "id": "S"
}, ")", ".", {
  "k": 5
}, "If", {
  "id": "match"
}, "is", {
  "value": "null"
}, ",", "return", {
  "value": "undefined"
}, ".", {
  "k": 6
}, "If", {
  "id": "global"
}, "is", {
  "value": "false"
}, ",", "then", {
  "in": null
}, "Perform", "?", "Yield", "(", {
  "id": "match"
}, ")", ".", {
  "k": 8
}, "Return", {
  "value": "undefined"
}, ".", {
  "k": 9
}, {
  "out": null
}, {
  "k": 7
}, "Let", {
  "id": "matchStr"
}, "be", "?", "ToString", "(", "?", "Get", "(", {
  "id": "match"
}, ",", {
  "value": "\"0\""
}, ")", ")", ".", {
  "k": 10
}, "If", {
  "id": "matchStr"
}, "is", "the", "empty", "String", ",", "then", {
  "in": null
}, "Let", {
  "id": "thisIndex"
}, "be", "‚Ñù", "(", "?", "ToLength", "(", "?", "Get", "(", {
  "id": "R"
}, ",", {
  "value": "\"lastIndex\""
}, ")", ")", ")", ".", {
  "k": 12
}, "Let", {
  "id": "nextIndex"
}, "be", "!", "AdvanceStringIndex", "(", {
  "id": "S"
}, ",", {
  "id": "thisIndex"
}, ",", {
  "id": "fullUnicode"
}, ")", ".", {
  "k": 13
}, "Perform", "?", "Set", "(", {
  "id": "R"
}, ",", {
  "value": "\"lastIndex\""
}, ",", "ùîΩ", "(", {
  "id": "nextIndex"
}, ")", ",", {
  "value": "true"
}, ")", ".", {
  "k": 14
}, {
  "out": null
}, {
  "k": 11
}, "Perform", "?", "Yield", "(", {
  "id": "match"
}, ")", ".", {
  "k": 15
}, {
  "out": null
}, {
  "k": 4
}, {
  "out": null
}, {
  "k": 3
}, "Return", "!", "CreateIteratorFromClosure", "(", {
  "id": "closure"
}, ",", {
  "value": "\"%RegExpStringIteratorPrototype%\""
}, ",", "%", "RegExpStringIteratorPrototype", "%", ")", ".", {
  "k": 16
}]