digraph {
  node17594 [shape=cds, label=<<font color="black">7:app __x2__ = (CreateResolvingFunctions promise)</font>> color="black" fillcolor="white" style=filled]
  node17598 [shape=cds, label=<<font color="black">9:app __x4__ = (IsAbruptCompletion completion)</font>> color="black" fillcolor="white" style=filled]
  node17601 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">10:[? __x5__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17599 [shape=diamond, label=<<font color="black">__x4__</font>> color="black" fillcolor="white" style=filled]
  node17595 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">7:let resolvingFunctions = __x2__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17587 [shape=diamond, label=<<font color="black">(= NewTarget undefined)</font>> color="black" fillcolor="white" style=filled]
  node17602 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">11:return promise</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17593 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">2:let promise = [? __x1__]</td></tr>
      <tr><td align="left">3:promise.PromiseState = &quot;pending&quot;</td></tr>
      <tr><td align="left">4:promise.PromiseFulfillReactions = (new [])</td></tr>
      <tr><td align="left">5:promise.PromiseRejectReactions = (new [])</td></tr>
      <tr><td align="left">6:promise.PromiseIsHandled = false</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17585 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node17588 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17591 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17596 [shape=cds, label=<<font color="black">8:app __x3__ = (Call executor undefined (new [resolvingFunctions.Resolve, resolvingFunctions.Reject]))</font>> color="black" fillcolor="white" style=filled]
  node17590 [shape=diamond, label=<<font color="black">(= __x0__ false)</font>> color="black" fillcolor="white" style=filled]
  node17600 [shape=cds, label=<<font color="black">10:app __x5__ = (Call resolvingFunctions.Reject undefined (new [completion.Value]))</font>> color="black" fillcolor="white" style=filled]
  node17586 [shape=cds, label=<<font color="black">app executor = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node17584 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node17589 [shape=cds, label=<<font color="black">1:app __x0__ = (IsCallable executor)</font>> color="black" fillcolor="white" style=filled]
  node17592 [shape=cds, label=<<font color="black">2:app __x1__ = (OrdinaryCreateFromConstructor NewTarget INTRINSIC_PromisePrototype (new [&quot;PromiseState&quot;, &quot;PromiseResult&quot;, &quot;PromiseFulfillReactions&quot;, &quot;PromiseRejectReactions&quot;, &quot;PromiseIsHandled&quot;]))</font>> color="black" fillcolor="white" style=filled]
  node17597 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">8:let completion = __x3__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17597 -> node17598 [ color="black"]
  node17595 -> node17596 [ color="black"]
  node17593 -> node17594 [ color="black"]
  node17586 -> node17587 [ color="black"]
  node17588 -> node17589 [ color="black"]
  node17589 -> node17590 [ color="black"]
  node17590 -> node17591 [label=<<font color="black">true</font>> color="black"]
  node17590 -> node17592 [label=<<font color="black">false</font>> color="black"]
  node17592 -> node17593 [ color="black"]
  node17600 -> node17601 [ color="black"]
  node17594 -> node17595 [ color="black"]
  node17601 -> node17602 [ color="black"]
  node17584 -> node17586 [ color="black"]
  node17587 -> node17588 [label=<<font color="black">true</font>> color="black"]
  node17587 -> node17589 [label=<<font color="black">false</font>> color="black"]
  node17596 -> node17597 [ color="black"]
  node17591 -> node17592 [ color="black"]
  node17602 -> node17585 [ color="black"]
  node17598 -> node17599 [ color="black"]
  node17599 -> node17600 [label=<<font color="black">true</font>> color="black"]
  node17599 -> node17602 [label=<<font color="black">false</font>> color="black"]
}
