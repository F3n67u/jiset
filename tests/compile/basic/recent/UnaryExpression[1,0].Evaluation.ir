{
  access __x0__ = (UnaryExpression "Evaluation")
  let ref = __x0__
  if (is-completion ref) if (= ref.Type CONST_normal) ref = ref.Value else return ref else {}
  ref
  if (! (= (typeof ref) "ReferenceRecord")) {
    app __x1__ = (WrapCompletion true)
    return __x1__
  } else {}
  app __x2__ = (IsUnresolvableReference ref)
  if (= __x2__ true) {
    assert (= ref.Strict false)
    app __x3__ = (WrapCompletion true)
    return __x3__
  } else {}
  app __x4__ = (IsPropertyReference ref)
  if (= __x4__ true) {
    app __x5__ = (IsSuperReference ref)
    if (= __x5__ true) throw INTRINSIC_ReferenceError else {}
    app __x6__ = (ToObject ref.Base)
    if (is-completion __x6__) if (= __x6__.Type CONST_normal) __x6__ = __x6__.Value else return __x6__ else {}
    let baseObj = __x6__
    app __x7__ = (baseObj.Delete baseObj ref.ReferencedName)
    if (is-completion __x7__) if (= __x7__.Type CONST_normal) __x7__ = __x7__.Value else return __x7__ else {}
    let deleteStatus = __x7__
    if (&& (= deleteStatus false) (= ref.Strict true)) throw INTRINSIC_TypeError else {}
    app __x8__ = (WrapCompletion deleteStatus)
    return __x8__
  } else {
    let base = ref.Base
    app __x9__ = (base.DeleteBinding base ref.ReferencedName)
    if (is-completion __x9__) if (= __x9__.Type CONST_normal) __x9__ = __x9__.Value else return __x9__ else {}
    app __x10__ = (WrapCompletion __x9__)
    return __x10__
  }
}