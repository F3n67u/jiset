digraph {
  node11790 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">19:??? &quot;Let id:{mathInt} be the integer value that is represented by id:{Z} in radix - id:{R} notation , using the letters &lt; b &gt; A &lt; / b &gt; - &lt; b &gt; Z &lt; / b &gt; and &lt; b &gt; a &lt; / b &gt; - &lt; b &gt; z &lt; / b &gt; for digits with values 10 through 35 . ( However , if id:{R} is 10 and id:{Z} contains more than 20 significant digits , every significant digit after the 20th may be replaced by a 0 digit , at the option of the implementation ; and if id:{R} is not 2 , 4 , 8 , 10 , 16 , or 32 , then id:{mathInt} may be an implementation - approximated value representing the integer value that is represented by id:{Z} in radix - id:{R} notation . )&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11786 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">__x3__ = (+ __x3__ __x5__)</td></tr>
      <tr><td align="left">__x4__ = (+ __x4__ 1i)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11773 [shape=cds, label=<<font color="black">5:app __x2__ = (ToInt32 radix)</font>> color="black" fillcolor="white" style=filled]
  node11783 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">16:??? &quot;If id:{S} contains a code unit that is not a radix - id:{R} digit , let id:{end} be the index within id:{S} of the first such code unit ; otherwise , let id:{end} be the length of id:{S} .&quot;</td></tr>
      <tr><td align="left">17:let __x3__ = &quot;&quot;</td></tr>
      <tr><td align="left">17:let __x4__ = 0i</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11791 [shape=diamond, label=<<font color="black">(== mathInt 0i)</font>> color="black" fillcolor="white" style=filled]
  node11771 [shape=cds, label=<<font color="black">1:app __x1__ = (TrimString inputString CONST_start)</font>> color="black" fillcolor="white" style=filled]
  node11767 [shape=cds, label=<<font color="black">app string = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node11795 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">23:return (* sign mathInt)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11770 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let inputString = [? __x0__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11788 [shape=diamond, label=<<font color="black">(= Z.length 0i)</font>> color="black" fillcolor="white" style=filled]
  node11789 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return NaN</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11794 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">22:return 0i</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11778 [shape=diamond, label=<<font color="black">(! (== R 16i))</font>> color="black" fillcolor="white" style=filled]
  node11793 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return -0.0</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11768 [shape=cds, label=<<font color="black">app radix = (GetArgument argumentsList 1i)</font>> color="black" fillcolor="white" style=filled]
  node11766 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node11782 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">??? &quot;If the length of id:{S} is at least 2 and the first two code units of id:{S} are either value:{\&quot;0x\&quot;} or value:{\&quot;0X\&quot;} , then in:{} out:{}&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11774 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">5:let R = [? __x2__]</td></tr>
      <tr><td align="left">6:let stripPrefix = true</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11787 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">17:let Z = __x3__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11777 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return NaN</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11769 [shape=cds, label=<<font color="black">0:app __x0__ = (ToString string)</font>> color="black" fillcolor="white" style=filled]
  node11792 [shape=diamond, label=<<font color="black">(== sign -1i)</font>> color="black" fillcolor="white" style=filled]
  node11765 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node11775 [shape=diamond, label=<<font color="black">(! (== R 0i))</font>> color="black" fillcolor="white" style=filled]
  node11781 [shape=diamond, label=<<font color="black">(= stripPrefix true)</font>> color="black" fillcolor="white" style=filled]
  node11780 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">R = 10i</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11785 [shape=cds, label=<<font color="black">access __x5__ = (S __x4__)</font>> color="black" fillcolor="white" style=filled]
  node11772 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">1:let S = [! __x1__]</td></tr>
      <tr><td align="left">2:let sign = 1i</td></tr>
      <tr><td align="left">3:??? &quot;If id:{S} is not empty and the first code unit of id:{S} is the code unit 0x002D ( HYPHEN - MINUS ) , set id:{sign} to - 1 .&quot;</td></tr>
      <tr><td align="left">4:??? &quot;If id:{S} is not empty and the first code unit of id:{S} is the code unit 0x002B ( PLUS SIGN ) or the code unit 0x002D ( HYPHEN - MINUS ) , remove the first code unit from id:{S} .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11779 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">stripPrefix = false</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11776 [shape=diamond, label=<<font color="black">(|| (&lt; R 2i) (&lt; 36i R))</font>> color="black" fillcolor="white" style=filled]
  node11784 [shape=diamond, label=<<font color="black">(&lt; __x4__ (+ end 1i))</font>> color="black" fillcolor="white" style=filled]
  node11776 -> node11777 [label=<<font color="black">true</font>> color="black"]
  node11776 -> node11778 [label=<<font color="black">false</font>> color="black"]
  node11791 -> node11792 [label=<<font color="black">true</font>> color="black"]
  node11791 -> node11795 [label=<<font color="black">false</font>> color="black"]
  node11786 -> node11784 [ color="black"]
  node11787 -> node11788 [ color="black"]
  node11794 -> node11795 [ color="black"]
  node11783 -> node11784 [ color="black"]
  node11785 -> node11786 [ color="black"]
  node11790 -> node11791 [ color="black"]
  node11780 -> node11781 [ color="black"]
  node11777 -> node11778 [ color="black"]
  node11795 -> node11766 [ color="black"]
  node11768 -> node11769 [ color="black"]
  node11765 -> node11767 [ color="black"]
  node11789 -> node11790 [ color="black"]
  node11770 -> node11771 [ color="black"]
  node11788 -> node11789 [label=<<font color="black">true</font>> color="black"]
  node11788 -> node11790 [label=<<font color="black">false</font>> color="black"]
  node11769 -> node11770 [ color="black"]
  node11774 -> node11775 [ color="black"]
  node11773 -> node11774 [ color="black"]
  node11792 -> node11793 [label=<<font color="black">true</font>> color="black"]
  node11792 -> node11794 [label=<<font color="black">false</font>> color="black"]
  node11771 -> node11772 [ color="black"]
  node11784 -> node11785 [label=<<font color="black">true</font>> color="black"]
  node11784 -> node11787 [label=<<font color="black">false</font>> color="black"]
  node11779 -> node11781 [ color="black"]
  node11775 -> node11776 [label=<<font color="black">true</font>> color="black"]
  node11775 -> node11780 [label=<<font color="black">false</font>> color="black"]
  node11793 -> node11794 [ color="black"]
  node11778 -> node11779 [label=<<font color="black">true</font>> color="black"]
  node11778 -> node11781 [label=<<font color="black">false</font>> color="black"]
  node11782 -> node11783 [ color="black"]
  node11781 -> node11782 [label=<<font color="black">true</font>> color="black"]
  node11781 -> node11783 [label=<<font color="black">false</font>> color="black"]
  node11767 -> node11768 [ color="black"]
  node11772 -> node11773 [ color="black"]
}
