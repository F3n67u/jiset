{
  if (! (|| (is-instance-of LeftHandSideExpression ObjectLiteral) (is-instance-of LeftHandSideExpression ArrayLiteral))) {
    access __x0__ = (LeftHandSideExpression "Evaluation")
    let lref = __x0__
    [? lref]
    access __x1__ = (AssignmentExpression "Evaluation")
    let rref = __x1__
    app __x2__ = (GetValue rref)
    let rval = [? __x2__]
    app __x3__ = (IsAnonymousFunctionDefinition AssignmentExpression)
    access __x4__ = (LeftHandSideExpression "IsIdentifierRef")
    if (&& (= __x3__ true) (= __x4__ true)) {
      app __x5__ = (HasOwnProperty rval "name")
      let hasNameProperty = [? __x5__]
      if (= hasNameProperty false) {
        app __x6__ = (GetReferencedName lref)
        app __x7__ = (SetFunctionName rval __x6__)
        __x7__
      } else {}
    } else {}
    app __x8__ = (PutValue lref rval)
    [? __x8__]
    return rval
  } else {}
  ??? "Let id:{assignmentPattern} be the parse of the source text corresponding to nt:{LeftHandSideExpression} using nt:{AssignmentPattern[?Yield]} as the goal symbol ."
  access __x9__ = (AssignmentExpression "Evaluation")
  let rref = __x9__
  app __x10__ = (GetValue rref)
  let rval = [? __x10__]
  access __x11__ = (assignmentPattern "DestructuringAssignmentEvaluation")
  app __x12__ = (__x11__ rval)
  let status = __x12__
  [? status]
  return rval
}