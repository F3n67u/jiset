{
  access __x0__ = (CoverCallExpressionAndAsyncArrowHead "Contains")
  app __x1__ = (__x0__ "YieldExpression")
  if (= __x1__ true) throw INTRINSIC_SyntaxError else return undefined
  access __x2__ = (CoverCallExpressionAndAsyncArrowHead "Contains")
  app __x3__ = (__x2__ "AwaitExpression")
  if (= __x3__ true) throw INTRINSIC_SyntaxError else return undefined
  ??? "It is a Syntax Error if the lexical token sequence matched by nt:{CoverCallExpressionAndAsyncArrowHead} cannot be parsed with no tokens left over using nt:{AsyncArrowHead} as the goal symbol ."
  access __x4__ = (CoverCallExpressionAndAsyncArrowHead "BoundNames")
  access __x5__ = (AsyncConciseBody "LexicallyDeclaredNames")
  let __x6__ = __x4__
  let __x7__ = __x5__
  let __x8__ = 0i
  let __x9__ = 0i
  let __x10__ = false
  while (< __x8__ __x6__.length) {
    __x9__ = 0i
    while (< __x9__ __x7__.length) if (= __x6__[__x8__] __x7__[__x9__]) __x10__ = true else {}
  }
  if __x10__ throw INTRINSIC_SyntaxError else return undefined
  let __x11__ = true
  access __x12__ = (AsyncConciseBody "ContainsUseStrict")
  __x11__ = (= __x12__ true)
  if __x11__ {
    access __x13__ = (CoverCallExpressionAndAsyncArrowHead "IsSimpleParameterList")
    __x11__ = (= __x13__ false)
  } else {}
  if __x11__ throw INTRINSIC_SyntaxError else return undefined
  ??? "All Early Error rules for nt:{AsyncArrowHead} and its derived productions apply to CoveredAsyncArrowHead of nt:{CoverCallExpressionAndAsyncArrowHead} ."
}