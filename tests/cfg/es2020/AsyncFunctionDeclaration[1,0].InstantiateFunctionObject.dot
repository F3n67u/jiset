digraph {
  node9909 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node9910 [shape=cds, label=<<font color="black">0:app __x0__ = (OrdinaryFunctionCreate INTRINSIC_AsyncFunction_prototype FormalParameters AsyncFunctionBody CONST_nonDASHlexicalDASHthis scope)</font>> color="black" fillcolor="white" style=filled]
  node9913 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">1:[! __x1__]</td></tr>
      <tr><td align="left">2:F.SourceText = (get-syntax AsyncFunctionDeclaration)</td></tr>
      <tr><td align="left">3:return F</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node9911 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let F = [! __x0__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node9912 [shape=cds, label=<<font color="black">1:app __x1__ = (SetFunctionName F &quot;default&quot;)</font>> color="black" fillcolor="white" style=filled]
  node9908 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node9913 -> node9909 [ color="black"]
  node9912 -> node9913 [ color="black"]
  node9910 -> node9911 [ color="black"]
  node9908 -> node9910 [ color="black"]
  node9911 -> node9912 [ color="black"]
}
