{
  app __x0__ = (ToString string)
  let inputString = [? __x0__]
  app __x1__ = (TrimString inputString CONST_start)
  let S = [! __x1__]
  let sign = 1i
  ??? "If id:{S} is not empty and the first code unit of id:{S} is the code unit 0x002D ( HYPHEN - MINUS ) , set id:{sign} to - 1 ."
  ??? "If id:{S} is not empty and the first code unit of id:{S} is the code unit 0x002B ( PLUS SIGN ) or the code unit 0x002D ( HYPHEN - MINUS ) , remove the first code unit from id:{S} ."
  app __x2__ = (ToInt32 radix)
  let R = [? __x2__]
  let stripPrefix = true
  if (! (== R 0i)) {
    if (|| (< R 2i) (< 36i R)) return NaN else {}
    if (! (== R 16i)) stripPrefix = false else {}
  } else R = 10i
  if (= stripPrefix true) ??? "If the length of id:{S} is at least 2 and the first two code units of id:{S} are either value:{\"0x\"} or value:{\"0X\"} , then in:{} out:{}" else {}
  ??? "If id:{S} contains a code unit that is not a radix - id:{R} digit , let id:{end} be the index within id:{S} of the first such code unit ; otherwise , let id:{end} be the length of id:{S} ."
  let __x3__ = ""
  let __x4__ = 0i
  while (< __x4__ (+ end 1i)) {
    access __x5__ = (S __x4__)
    __x3__ = (+ __x3__ __x5__)
    __x4__ = (+ __x4__ 1i)
  }
  let Z = __x3__
  if (= Z.length 0i) return NaN else {}
  ??? "Let id:{mathInt} be the integer value that is represented by id:{Z} in radix - id:{R} notation , using the letters < b > A < / b > - < b > Z < / b > and < b > a < / b > - < b > z < / b > for digits with values 10 through 35 . ( However , if id:{R} is 10 and id:{Z} contains more than 20 significant digits , every significant digit after the 20th may be replaced by a 0 digit , at the option of the implementation ; and if id:{R} is not 2 , 4 , 8 , 10 , 16 , or 32 , then id:{mathInt} may be an implementation - approximated value representing the integer value that is represented by id:{Z} in radix - id:{R} notation . )"
  if (== mathInt 0i) {
    if (== sign -1i) return -0.0 else {}
    return 0i
  } else {}
  return (* sign mathInt)
}