digraph {
  node16862 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw RangeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16858 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">2:let constructorName = O.TypedArrayName</td></tr>
      <tr><td align="left">3:??? &quot;Let id:{elementSize} be the Element Size value specified in link:{unhandled: table-the-typedarray-constructors} for id:{constructorName} .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16866 [shape=cds, label=<<font color="black">8:app __x2__ = (IsDetachedBuffer buffer)</font>> color="black" fillcolor="white" style=filled]
  node16864 [shape=cds, label=<<font color="black">7:app __x1__ = (ToIndex length)</font>> color="black" fillcolor="white" style=filled]
  node16868 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16877 [shape=diamond, label=<<font color="black">(&lt; bufferByteLength (+ offset newByteLength))</font>> color="black" fillcolor="white" style=filled]
  node16873 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">12:let newByteLength = (- bufferByteLength offset)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16872 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw RangeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16861 [shape=diamond, label=<<font color="black">(! (== (%% offset elementSize) 0i))</font>> color="black" fillcolor="white" style=filled]
  node16865 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">7:let newLength = [? __x1__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16879 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">17:O.ViewedArrayBuffer = buffer</td></tr>
      <tr><td align="left">18:O.ByteLength = newByteLength</td></tr>
      <tr><td align="left">19:O.ByteOffset = offset</td></tr>
      <tr><td align="left">20:O.ArrayLength = (/ newByteLength elementSize)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16876 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">15:let newByteLength = (* newLength elementSize)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16857 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node16869 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">9:let bufferByteLength = buffer.ArrayBufferByteLength</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16863 [shape=diamond, label=<<font color="black">(! (= length undefined))</font>> color="black" fillcolor="white" style=filled]
  node16860 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">4:let offset = [? __x0__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16875 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw RangeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16870 [shape=diamond, label=<<font color="black">(= length undefined)</font>> color="black" fillcolor="white" style=filled]
  node16867 [shape=diamond, label=<<font color="black">(= __x2__ true)</font>> color="black" fillcolor="white" style=filled]
  node16878 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw RangeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16871 [shape=diamond, label=<<font color="black">(! (== (%% bufferByteLength elementSize) 0i))</font>> color="black" fillcolor="white" style=filled]
  node16874 [shape=diamond, label=<<font color="black">(&lt; newByteLength 0i)</font>> color="black" fillcolor="white" style=filled]
  node16859 [shape=cds, label=<<font color="black">4:app __x0__ = (ToIndex byteOffset)</font>> color="black" fillcolor="white" style=filled]
  node16856 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node16866 -> node16867 [ color="black"]
  node16859 -> node16860 [ color="black"]
  node16872 -> node16873 [ color="black"]
  node16871 -> node16872 [label=<<font color="black">true</font>> color="black"]
  node16871 -> node16873 [label=<<font color="black">false</font>> color="black"]
  node16873 -> node16874 [ color="black"]
  node16877 -> node16878 [label=<<font color="black">true</font>> color="black"]
  node16877 -> node16879 [label=<<font color="black">false</font>> color="black"]
  node16858 -> node16859 [ color="black"]
  node16869 -> node16870 [ color="black"]
  node16860 -> node16861 [ color="black"]
  node16875 -> node16879 [ color="black"]
  node16878 -> node16879 [ color="black"]
  node16861 -> node16862 [label=<<font color="black">true</font>> color="black"]
  node16861 -> node16863 [label=<<font color="black">false</font>> color="black"]
  node16879 -> node16857 [ color="black"]
  node16876 -> node16877 [ color="black"]
  node16864 -> node16865 [ color="black"]
  node16856 -> node16858 [ color="black"]
  node16874 -> node16875 [label=<<font color="black">true</font>> color="black"]
  node16874 -> node16879 [label=<<font color="black">false</font>> color="black"]
  node16868 -> node16869 [ color="black"]
  node16862 -> node16863 [ color="black"]
  node16867 -> node16868 [label=<<font color="black">true</font>> color="black"]
  node16867 -> node16869 [label=<<font color="black">false</font>> color="black"]
  node16870 -> node16871 [label=<<font color="black">true</font>> color="black"]
  node16870 -> node16876 [label=<<font color="black">false</font>> color="black"]
  node16863 -> node16864 [label=<<font color="black">true</font>> color="black"]
  node16863 -> node16866 [label=<<font color="black">false</font>> color="black"]
  node16865 -> node16866 [ color="black"]
}
