digraph {
  node9818 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return undefined</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node9828 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">18:let result = __x4__</td></tr>
      <tr><td align="left">19:GLOBAL_context = null</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node9822 [shape=cds, label=<<font color="black">6:app __x2__ = (HostResolveImportedModule module required)</font>> color="black" fillcolor="white" style=filled]
  node9817 [shape=diamond, label=<<font color="black">(= module.Evaluated true)</font>> color="black" fillcolor="white" style=filled]
  node9829 [shape=diamond, label=<<font color="black">(= GLOBAL_executionStack[(- GLOBAL_executionStack.length 1i)] moduleCxt)</font>> color="black" fillcolor="white" style=filled]
  node9814 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node9825 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">8:[? __x3__]</td></tr>
      <tr><td align="left">__x1__ = (+ __x1__ 1i)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node9821 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let required = __x0__[__x1__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node9820 [shape=diamond, label=<<font color="black">(&lt; __x1__ __x0__.length)</font>> color="black" fillcolor="white" style=filled]
  node9830 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">(pop GLOBAL_executionStack (- GLOBAL_executionStack.length 1i))</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node9826 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">9:let moduleCxt = (new ExecutionContext(&quot;SubMap&quot; -&gt; (new SubMap())))</td></tr>
      <tr><td align="left">10:moduleCxt.Function = null</td></tr>
      <tr><td align="left">11:moduleCxt.Realm = module.Realm</td></tr>
      <tr><td align="left">12:moduleCxt.ScriptOrModule = module</td></tr>
      <tr><td align="left">14:moduleCxt.VariableEnvironment = module.Environment</td></tr>
      <tr><td align="left">15:moduleCxt.LexicalEnvironment = module.Environment</td></tr>
      <tr><td align="left">16:GLOBAL_context = null</td></tr>
      <tr><td align="left">17:append moduleCxt -&gt; GLOBAL_executionStack</td></tr>
      <tr><td align="left">17:GLOBAL_context = GLOBAL_executionStack[(- GLOBAL_executionStack.length 1i)]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node9815 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node9819 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">4:module.Evaluated = true</td></tr>
      <tr><td align="left">5:let __x0__ = module.RequestedModules</td></tr>
      <tr><td align="left">5:let __x1__ = 0i</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node9824 [shape=cds, label=<<font color="black">8:app __x3__ = (requiredModule.ModuleEvaluation requiredModule)</font>> color="black" fillcolor="white" style=filled]
  node9823 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">6:let requiredModule = [! __x2__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node9827 [shape=cds, label=<<font color="black">18:access __x4__ = (module.ECMAScriptCode &quot;Evaluation&quot;)</font>> color="black" fillcolor="white" style=filled]
  node9816 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let module = this</td></tr>
      <tr><td align="left">2:assert (! (= module.Realm undefined))</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node9831 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">20:GLOBAL_context = GLOBAL_executionStack[(- GLOBAL_executionStack.length 1i)]</td></tr>
      <tr><td align="left">21:return result</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node9819 -> node9820 [ color="black"]
  node9823 -> node9824 [ color="black"]
  node9820 -> node9821 [label=<<font color="black">true</font>> color="black"]
  node9820 -> node9826 [label=<<font color="black">false</font>> color="black"]
  node9821 -> node9822 [ color="black"]
  node9828 -> node9829 [ color="black"]
  node9830 -> node9831 [ color="black"]
  node9826 -> node9827 [ color="black"]
  node9818 -> node9819 [ color="black"]
  node9831 -> node9815 [ color="black"]
  node9814 -> node9816 [ color="black"]
  node9816 -> node9817 [ color="black"]
  node9829 -> node9830 [label=<<font color="black">true</font>> color="black"]
  node9829 -> node9831 [label=<<font color="black">false</font>> color="black"]
  node9822 -> node9823 [ color="black"]
  node9825 -> node9820 [ color="black"]
  node9824 -> node9825 [ color="black"]
  node9817 -> node9818 [label=<<font color="black">true</font>> color="black"]
  node9817 -> node9819 [label=<<font color="black">false</font>> color="black"]
  node9827 -> node9828 [ color="black"]
}
