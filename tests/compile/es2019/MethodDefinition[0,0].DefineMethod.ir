{
  [0] access __x0__ = (PropertyName "Evaluation")
  [0] let propKey = __x0__
  [1] if (is-completion propKey) if (= propKey.Type CONST_normal) propKey = propKey.Value else return propKey else [0] {}
  [1] propKey
  [2] if true let strict = true else let strict = false
  [3] let scope = GLOBAL_context.LexicalEnvironment
  [7] if (! (= functionPrototype absent)) {
    [5] let kind = CONST_Normal
    [6] let prototype = functionPrototype
  } else {
    [8] let kind = CONST_Method
    [9] let prototype = INTRINSIC_FunctionPrototype
  }
  [10] app __x1__ = (FunctionCreate kind UniqueFormalParameters FunctionBody scope strict prototype)
  [10] let closure = __x1__
  [11] app __x2__ = (MakeMethod closure object)
  [11] __x2__
  [12] closure.SourceText = (get-syntax MethodDefinition)
  [13] app __x3__ = (WrapCompletion (new Record("Key" -> propKey, "Closure" -> closure)))
  [13] return __x3__
}