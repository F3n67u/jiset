digraph {
  node11008 [shape=diamond, label=<<font color="black">(= result.Type CONST_normal)</font>> color="black" fillcolor="white" style=filled]
  node10982 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let inDerivedConstructor = true</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10972 [shape=cds, label=<<font color="black">1:app __x0__ = (Type x)</font>> color="black" fillcolor="white" style=filled]
  node11000 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">23:let lexEnv = __x7__</td></tr>
      <tr><td align="left">24:let varEnv = evalRealm.GlobalEnv</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10983 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let inDerivedConstructor = false</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11006 [shape=cds, label=<<font color="black">34:app __x8__ = (EvalDeclarationInstantiation body varEnv lexEnv strictEval)</font>> color="black" fillcolor="white" style=filled]
  node11012 [shape=cds, label=<<font color="black">38:app __x10__ = (NormalCompletion undefined)</font>> color="black" fillcolor="white" style=filled]
  node10994 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let strictEval = __x5__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10981 [shape=diamond, label=<<font color="black">(= F.ConstructorKind &quot;derived&quot;)</font>> color="black" fillcolor="white" style=filled]
  node10988 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return undefined</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10976 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">2:let thisEnvRec = [! __x1__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10987 [shape=diamond, label=<<font color="black">(= __x3__ false)</font>> color="black" fillcolor="white" style=filled]
  node11014 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">39:GLOBAL_context = null</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10991 [shape=diamond, label=<<font color="black">(= strictCaller true)</font>> color="black" fillcolor="white" style=filled]
  node11010 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">36:result = __x9__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10997 [shape=cds, label=<<font color="black">20:app __x6__ = (NewDeclarativeEnvironment ctx.LexicalEnvironment)</font>> color="black" fillcolor="white" style=filled]
  node10999 [shape=cds, label=<<font color="black">23:app __x7__ = (NewDeclarativeEnvironment evalRealm.GlobalEnv)</font>> color="black" fillcolor="white" style=filled]
  node11004 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">GLOBAL_context = null</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10977 [shape=diamond, label=<<font color="black">(= (typeof thisEnvRec) &quot;FunctionEnvironmentRecord&quot;)</font>> color="black" fillcolor="white" style=filled]
  node11015 [shape=diamond, label=<<font color="black">(= GLOBAL_executionStack[(- GLOBAL_executionStack.length 1i)] evalCxt)</font>> color="black" fillcolor="white" style=filled]
  node10975 [shape=cds, label=<<font color="black">2:app __x1__ = (GetThisEnvironment)</font>> color="black" fillcolor="white" style=filled]
  node10990 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">14:let body = __x4__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11003 [shape=diamond, label=<<font color="black">(= ctx null)</font>> color="black" fillcolor="white" style=filled]
  node10986 [shape=cds, label=<<font color="black">13:access __x3__ = (__x3__ &quot;Contains&quot; &quot;ScriptBody&quot;)</font>> color="black" fillcolor="white" style=filled]
  node11007 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">34:let result = __x8__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10978 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">4:let F = thisEnvRec.FunctionObject</td></tr>
      <tr><td align="left">5:let inFunction = true</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10971 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node11016 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">(pop GLOBAL_executionStack (- GLOBAL_executionStack.length 1i))</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10993 [shape=cds, label=<<font color="black">access __x5__ = (script &quot;IsStrict&quot;)</font>> color="black" fillcolor="white" style=filled]
  node11011 [shape=diamond, label=<<font color="black">(&amp;&amp; (= result.Type CONST_normal) (= result.Value CONST_empty))</font>> color="black" fillcolor="white" style=filled]
  node10974 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return x</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10989 [shape=cds, label=<<font color="black">14:access __x4__ = (script &quot;ScriptBody&quot;)</font>> color="black" fillcolor="white" style=filled]
  node10980 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">6:let inMethod = __x2__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11002 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">varEnv = lexEnv</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10995 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">17:let ctx = GLOBAL_context</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10985 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">12:??? &quot;Let id:{script} be the ECMAScript code that is the result of parsing id:{x} , interpreted as UTF - 16 encoded Unicode text as described in link:{unhandled: sec-ecmascript-language-types-string-type} , for the goal symbol nt:{Script} . If id:{inFunction} is value:{false} , additional early error rules from link:{unhandled: sec-performeval-rules-outside-functions} are applied . If id:{inMethod} is value:{false} , additional early error rules from link:{unhandled: sec-performeval-rules-outside-methods} are applied . If id:{inDerivedConstructor} is value:{false} , additional early error rules from link:{unhandled: sec-performeval-rules-outside-constructors} are applied . If the parse fails , throw a value:{SyntaxError} exception . If any early errors are detected , throw a value:{SyntaxError} or a value:{ReferenceError} exception , depending on the type of the error ( but see also clause link:{unhandled: sec-error-handling-and-language-extensions} ) . Parsing and early error detection may be interweaved in an implementation - dependent manner .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10970 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node10984 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">9:let inFunction = false</td></tr>
      <tr><td align="left">10:let inMethod = false</td></tr>
      <tr><td align="left">11:let inDerivedConstructor = false</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10979 [shape=cds, label=<<font color="black">6:app __x2__ = (thisEnvRec.HasSuperBinding thisEnvRec)</font>> color="black" fillcolor="white" style=filled]
  node10973 [shape=diamond, label=<<font color="black">(! (= __x0__ String))</font>> color="black" fillcolor="white" style=filled]
  node10992 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let strictEval = true</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11005 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">27:let evalCxt = (new ExecutionContext(&quot;SubMap&quot; -&gt; (new SubMap())))</td></tr>
      <tr><td align="left">28:evalCxt.Function = null</td></tr>
      <tr><td align="left">29:evalCxt.Realm = evalRealm</td></tr>
      <tr><td align="left">30:evalCxt.ScriptOrModule = ctx.ScriptOrModule</td></tr>
      <tr><td align="left">31:evalCxt.VariableEnvironment = varEnv</td></tr>
      <tr><td align="left">32:evalCxt.LexicalEnvironment = lexEnv</td></tr>
      <tr><td align="left">33:append evalCxt -&gt; GLOBAL_executionStack</td></tr>
      <tr><td align="left">33:GLOBAL_context = GLOBAL_executionStack[(- GLOBAL_executionStack.length 1i)]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11017 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">40:GLOBAL_context = GLOBAL_executionStack[(- GLOBAL_executionStack.length 1i)]</td></tr>
      <tr><td align="left">41:return result</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10996 [shape=diamond, label=<<font color="black">(= direct true)</font>> color="black" fillcolor="white" style=filled]
  node11001 [shape=diamond, label=<<font color="black">(= strictEval true)</font>> color="black" fillcolor="white" style=filled]
  node11013 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">38:result = __x10__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10998 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">20:let lexEnv = __x6__</td></tr>
      <tr><td align="left">21:let varEnv = ctx.VariableEnvironment</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11009 [shape=cds, label=<<font color="black">36:access __x9__ = (body &quot;Evaluation&quot;)</font>> color="black" fillcolor="white" style=filled]
  node10973 -> node10974 [label=<<font color="black">true</font>> color="black"]
  node10973 -> node10975 [label=<<font color="black">false</font>> color="black"]
  node11002 -> node11003 [ color="black"]
  node11017 -> node10971 [ color="black"]
  node10998 -> node11001 [ color="black"]
  node11008 -> node11009 [label=<<font color="black">true</font>> color="black"]
  node11008 -> node11011 [label=<<font color="black">false</font>> color="black"]
  node10994 -> node10995 [ color="black"]
  node11014 -> node11015 [ color="black"]
  node11000 -> node11001 [ color="black"]
  node10989 -> node10990 [ color="black"]
  node11011 -> node11012 [label=<<font color="black">true</font>> color="black"]
  node11011 -> node11014 [label=<<font color="black">false</font>> color="black"]
  node11015 -> node11016 [label=<<font color="black">true</font>> color="black"]
  node11015 -> node11017 [label=<<font color="black">false</font>> color="black"]
  node10992 -> node10995 [ color="black"]
  node10970 -> node10972 [ color="black"]
  node11010 -> node11011 [ color="black"]
  node10983 -> node10985 [ color="black"]
  node11001 -> node11002 [label=<<font color="black">true</font>> color="black"]
  node11001 -> node11003 [label=<<font color="black">false</font>> color="black"]
  node10986 -> node10987 [ color="black"]
  node10979 -> node10980 [ color="black"]
  node10991 -> node10992 [label=<<font color="black">true</font>> color="black"]
  node10991 -> node10993 [label=<<font color="black">false</font>> color="black"]
  node10995 -> node10996 [ color="black"]
  node10980 -> node10981 [ color="black"]
  node10974 -> node10975 [ color="black"]
  node10996 -> node10997 [label=<<font color="black">true</font>> color="black"]
  node10996 -> node10999 [label=<<font color="black">false</font>> color="black"]
  node10993 -> node10994 [ color="black"]
  node11007 -> node11008 [ color="black"]
  node10977 -> node10978 [label=<<font color="black">true</font>> color="black"]
  node10977 -> node10984 [label=<<font color="black">false</font>> color="black"]
  node10982 -> node10985 [ color="black"]
  node10997 -> node10998 [ color="black"]
  node10976 -> node10977 [ color="black"]
  node10978 -> node10979 [ color="black"]
  node11005 -> node11006 [ color="black"]
  node10984 -> node10985 [ color="black"]
  node10999 -> node11000 [ color="black"]
  node11013 -> node11014 [ color="black"]
  node11009 -> node11010 [ color="black"]
  node10990 -> node10991 [ color="black"]
  node11004 -> node11005 [ color="black"]
  node11003 -> node11004 [label=<<font color="black">true</font>> color="black"]
  node11003 -> node11005 [label=<<font color="black">false</font>> color="black"]
  node11012 -> node11013 [ color="black"]
  node10988 -> node10989 [ color="black"]
  node10981 -> node10982 [label=<<font color="black">true</font>> color="black"]
  node10981 -> node10983 [label=<<font color="black">false</font>> color="black"]
  node10972 -> node10973 [ color="black"]
  node11016 -> node11017 [ color="black"]
  node10987 -> node10988 [label=<<font color="black">true</font>> color="black"]
  node10987 -> node10989 [label=<<font color="black">false</font>> color="black"]
  node10985 -> node10986 [ color="black"]
  node11006 -> node11007 [ color="black"]
  node10975 -> node10976 [ color="black"]
}
