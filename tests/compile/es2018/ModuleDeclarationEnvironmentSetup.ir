{
  [0] let __x0__ = module.IndirectExportEntries
  [0] let __x1__ = 0i
  [0] while (< __x1__ __x0__.length) {
    let e = __x0__[__x1__]
    [1] app __x2__ = (module.ResolveExport module e.ExportName (new []))
    [1] if (is-completion __x2__) if (= __x2__.Type CONST_normal) __x2__ = __x2__.Value else return __x2__ else [12] {}
    [1] let resolution = __x2__
    [2] if (|| (= resolution null) (= resolution "ambiguous")) {
      app __x3__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_SyntaxError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
      return __x3__
    } else [12] {}
    [3] assert (= (typeof resolution) "ResolvedBindingRecord")
    __x1__ = (+ __x1__ 1i)
  }
  [5] let realm = module.Realm
  [6] assert (! (= realm undefined))
  [7] app __x4__ = (NewModuleEnvironment realm.GlobalEnv)
  [7] let env = __x4__
  [8] module.Environment = env
  [9] let envRec = env.EnvironmentRecord
  [10] let __x5__ = module.ImportEntries
  [10] let __x6__ = 0i
  [10] while (< __x6__ __x5__.length) {
    let in = __x5__[__x6__]
    [11] app __x7__ = (HostResolveImportedModule module in.ModuleRequest)
    [11] if (is-completion __x7__) if (= __x7__.Type CONST_normal) __x7__ = __x7__.Value else return __x7__ else [12] {}
    [11] let importedModule = __x7__
    [17] if (= in.ImportName "*") {
      [14] app __x8__ = (GetModuleNamespace importedModule)
      [14] if (is-completion __x8__) if (= __x8__.Type CONST_normal) __x8__ = __x8__.Value else return __x8__ else [12] {}
      [14] let namespace = __x8__
      [15] app __x9__ = (envRec.CreateImmutableBinding envRec in.LocalName true)
      [15] if (is-completion __x9__) if (= __x9__.Type CONST_normal) __x9__ = __x9__.Value else return __x9__ else [12] {}
      [15] __x9__
      [16] app __x10__ = (envRec.InitializeBinding envRec in.LocalName namespace)
      [16] __x10__
    } else {
      [18] app __x11__ = (importedModule.ResolveExport importedModule in.ImportName (new []))
      [18] if (is-completion __x11__) if (= __x11__.Type CONST_normal) __x11__ = __x11__.Value else return __x11__ else [12] {}
      [18] let resolution = __x11__
      [19] if (|| (= resolution null) (= resolution "ambiguous")) {
        app __x12__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_SyntaxError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
        return __x12__
      } else [12] {}
      [20] app __x13__ = (envRec.CreateImportBinding envRec in.LocalName resolution.Module resolution.BindingName)
      [20] __x13__
    }
    __x6__ = (+ __x6__ 1i)
  }
  [21] let code = module.ECMAScriptCode
  [22] access __x14__ = (code "VarScopedDeclarations")
  [22] let varDeclarations = __x14__
  [23] let declaredVarNames = (new [])
  [24] let __x15__ = varDeclarations
  [24] let __x16__ = 0i
  [24] while (< __x16__ __x15__.length) {
    let d = __x15__[__x16__]
    [25] access __x17__ = (d "BoundNames")
    [25] let __x18__ = __x17__
    [25] let __x19__ = 0i
    [25] while (< __x19__ __x18__.length) {
      let dn = __x18__[__x19__]
      [26] if (! (contains declaredVarNames dn)) {
        [27] app __x20__ = (envRec.CreateMutableBinding envRec dn false)
        [27] if (is-completion __x20__) if (= __x20__.Type CONST_normal) __x20__ = __x20__.Value else return __x20__ else [12] {}
        [27] __x20__
        [28] app __x21__ = (envRec.InitializeBinding envRec dn undefined)
        [28] __x21__
        [29] append dn -> declaredVarNames
      } else [12] {}
      __x19__ = (+ __x19__ 1i)
    }
    __x16__ = (+ __x16__ 1i)
  }
  [30] access __x22__ = (code "LexicallyScopedDeclarations")
  [30] let lexDeclarations = __x22__
  [31] let __x23__ = lexDeclarations
  [31] let __x24__ = 0i
  [31] while (< __x24__ __x23__.length) {
    let d = __x23__[__x24__]
    [32] access __x25__ = (d "BoundNames")
    [32] let __x26__ = __x25__
    [32] let __x27__ = 0i
    [32] while (< __x27__ __x26__.length) {
      let dn = __x26__[__x27__]
      [35] access __x28__ = (d "IsConstantDeclaration")
      [35] if (= __x28__ true) {
        [34] app __x29__ = (envRec.CreateImmutableBinding envRec dn true)
        [34] if (is-completion __x29__) if (= __x29__.Type CONST_normal) __x29__ = __x29__.Value else return __x29__ else [12] {}
        [34] __x29__
      } else {
        [36] app __x30__ = (envRec.CreateMutableBinding envRec dn false)
        [36] if (is-completion __x30__) if (= __x30__.Type CONST_normal) __x30__ = __x30__.Value else return __x30__ else [12] {}
        [36] __x30__
      }
      [37] if (|| (|| (|| (is-instance-of d FunctionDeclaration) (is-instance-of d GeneratorDeclaration)) (is-instance-of d AsyncFunctionDeclaration)) (is-instance-of d AsyncGeneratorDeclaration)) {
        [38] access __x31__ = (d "InstantiateFunctionObject")
        [38] app __x32__ = (__x31__ env)
        [38] let fo = __x32__
        [39] app __x33__ = (envRec.InitializeBinding envRec dn fo)
        [39] __x33__
      } else [12] {}
      __x27__ = (+ __x27__ 1i)
    }
    __x24__ = (+ __x24__ 1i)
  }
}