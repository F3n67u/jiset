<algorithm>
  <param>BindingIdentifier</param>
  <param>FormalParameters</param>
  <param>FunctionBody</param>
  <step-list>
    <step>If the function code for FunctionExpression is strict mode code , let <id>strict</id> be <value>true</value> . Otherwise let <id>strict</id> be <value>false</value> .</step>
    <step>Let <id>scope</id> be the running execution context 's LexicalEnvironment.</step>
    <step>Let <id>funcEnv</id> be NewDeclarativeEnvironment ( <id>scope</id> ).</step>
    <step>Let <id>envRec</id> be <id>funcEnv</id> 's EnvironmentRecord .</step>
    <step>Let <id>name</id> be StringValue of BindingIdentifier .</step>
    <step>Perform <id>envRec</id> .CreateImmutableBinding( <id>name</id> , <value>false</value> ).</step>
    <step>Let <id>closure</id> be FunctionCreate ( <value>Normal</value> , FormalParameters , FunctionBody , <id>funcEnv</id> , <id>strict</id> ).</step>
    <step>Perform MakeConstructor ( <id>closure</id> ).</step>
    <step>Perform SetFunctionName ( <id>closure</id> , <id>name</id> ).</step>
    <step>Perform <id>envRec</id> .InitializeBinding( <id>name</id> , <id>closure</id> ).</step>
    <step>Return <id>closure</id> .</step>
  </step-list>
</algorithm>