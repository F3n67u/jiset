{
  let promise = this
  app __x0__ = (Type promise)
  if (! (= __x0__ Object)) throw TypeError else {}
  app __x1__ = (SpeciesConstructor promise INTRINSIC_Promise)
  let C = [? __x1__]
  app __x2__ = (IsConstructor C)
  assert (= __x2__ true)
  app __x3__ = (IsCallable onFinally)
  if (= __x3__ false) {
    let thenFinally = onFinally
    let catchFinally = onFinally
  } else {
    let stepsThenFinally = ThenFinallyFunctions
    app __x4__ = (CreateBuiltinFunction stepsThenFinally (new ["Constructor", "OnFinally"]))
    let thenFinally = [! __x4__]
    thenFinally.Constructor = C
    thenFinally.OnFinally = onFinally
    let stepsCatchFinally = CatchFinallyFunctions
    app __x5__ = (CreateBuiltinFunction stepsCatchFinally (new ["Constructor", "OnFinally"]))
    let catchFinally = [! __x5__]
    catchFinally.Constructor = C
    catchFinally.OnFinally = onFinally
  }
  app __x6__ = (Invoke promise "then" (new [thenFinally, catchFinally]))
  return [? __x6__]
}