digraph {
  node18297 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let __x1__ = false</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18304 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">1:let __x2__ = true</td></tr>
      <tr><td align="left">1:__x2__ = (! (|| (is-instance-of LeftHandSideExpression ObjectLiteral) (is-instance-of LeftHandSideExpression ArrayLiteral)))</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18301 [shape=diamond, label=<<font color="black">__x0__</font>> color="black" fillcolor="white" style=filled]
  node18296 [shape=diamond, label=<<font color="black">__x0__</font>> color="black" fillcolor="white" style=filled]
  node18300 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">__x0__ = __x1__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18306 [shape=cds, label=<<font color="black">app __x3__ = (AssignmentTargetType LeftHandSideExpression)</font>> color="black" fillcolor="white" style=filled]
  node18308 [shape=diamond, label=<<font color="black">__x2__</font>> color="black" fillcolor="white" style=filled]
  node18302 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw SyntaxError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18294 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node18307 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">__x2__ = (! (= __x3__ CONST_simple))</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18295 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let __x0__ = true</td></tr>
      <tr><td align="left">0:__x0__ = (|| (is-instance-of LeftHandSideExpression ObjectLiteral) (is-instance-of LeftHandSideExpression ArrayLiteral))</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18310 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return undefined</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18293 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node18303 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return undefined</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18299 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">__x1__ = true</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18309 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw SyntaxError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18298 [shape=diamond, label=<<font color="black">(= absent (parse-syntax LeftHandSideExpression &quot;AssignmentPattern&quot; (new [])))</font>> color="black" fillcolor="white" style=filled]
  node18305 [shape=diamond, label=<<font color="black">__x2__</font>> color="black" fillcolor="white" style=filled]
  node18293 -> node18295 [ color="black"]
  node18310 -> node18294 [ color="black"]
  node18296 -> node18297 [label=<<font color="black">true</font>> color="black"]
  node18296 -> node18301 [label=<<font color="black">false</font>> color="black"]
  node18306 -> node18307 [ color="black"]
  node18302 -> node18304 [ color="black"]
  node18300 -> node18301 [ color="black"]
  node18307 -> node18308 [ color="black"]
  node18308 -> node18309 [label=<<font color="black">true</font>> color="black"]
  node18308 -> node18310 [label=<<font color="black">false</font>> color="black"]
  node18301 -> node18302 [label=<<font color="black">true</font>> color="black"]
  node18301 -> node18303 [label=<<font color="black">false</font>> color="black"]
  node18309 -> node18294 [ color="black"]
  node18303 -> node18304 [ color="black"]
  node18298 -> node18299 [label=<<font color="black">true</font>> color="black"]
  node18298 -> node18300 [label=<<font color="black">false</font>> color="black"]
  node18305 -> node18306 [label=<<font color="black">true</font>> color="black"]
  node18305 -> node18308 [label=<<font color="black">false</font>> color="black"]
  node18295 -> node18296 [ color="black"]
  node18299 -> node18300 [ color="black"]
  node18304 -> node18305 [ color="black"]
  node18297 -> node18298 [ color="black"]
}
