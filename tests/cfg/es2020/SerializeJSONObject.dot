digraph {
  node18129 [shape=cds, label=<<font color="black">10:app __x3__ = (SerializeJSONProperty state P value)</font>> color="black" fillcolor="white" style=filled]
  node18133 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">12:let member = __x4__</td></tr>
      <tr><td align="left">13:member = (+ member &quot;:&quot;)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18120 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18143 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">28:??? &quot;Remove the last element of id:{state} . [ [ Stack ] ] .&quot;</td></tr>
      <tr><td align="left">29:state.Indent = stepback</td></tr>
      <tr><td align="left">30:return final</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18126 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">8:let partial = (new [])</td></tr>
      <tr><td align="left">9:let __x1__ = K</td></tr>
      <tr><td align="left">9:let __x2__ = 0i</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18123 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let K = state.PropertyList</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18140 [shape=diamond, label=<<font color="black">(= state.Gap &quot;&quot;)</font>> color="black" fillcolor="white" style=filled]
  node18119 [shape=diamond, label=<<font color="black">(contains state.Stack value)</font>> color="black" fillcolor="white" style=filled]
  node18136 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">16:member = (+ member strP)</td></tr>
      <tr><td align="left">17:append member -&gt; partial</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18127 [shape=diamond, label=<<font color="black">(&lt; __x2__ __x1__.length)</font>> color="black" fillcolor="white" style=filled]
  node18118 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node18131 [shape=diamond, label=<<font color="black">(! (= strP undefined))</font>> color="black" fillcolor="white" style=filled]
  node18121 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">1:append value -&gt; state.Stack</td></tr>
      <tr><td align="left">2:let stepback = state.Indent</td></tr>
      <tr><td align="left">3:state.Indent = (+ state.Indent state.Gap)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18141 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">22:??? &quot;Let id:{properties} be the String value formed by concatenating all the element Strings of id:{partial} with each adjacent pair of Strings separated with the code unit 0x002C ( COMMA ) . A comma is not inserted either before the first String or after the last String .&quot;</td></tr>
      <tr><td align="left">23:let final = (+ (+ &quot;{&quot; properties) &quot;}&quot;)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18128 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let P = __x1__[__x2__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18134 [shape=diamond, label=<<font color="black">(! (= state.Gap &quot;&quot;))</font>> color="black" fillcolor="white" style=filled]
  node18117 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node18138 [shape=diamond, label=<<font color="black">(= partial.length 0i)</font>> color="black" fillcolor="white" style=filled]
  node18122 [shape=diamond, label=<<font color="black">(! (= state.PropertyList undefined))</font>> color="black" fillcolor="white" style=filled]
  node18142 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">25:let separator = (+ (+ &quot;,&quot; &quot;\n&quot;) state.Indent)</td></tr>
      <tr><td align="left">26:??? &quot;Let id:{properties} be the String value formed by concatenating all the element Strings of id:{partial} with each adjacent pair of Strings separated with id:{separator} . The id:{separator} String is not inserted either before the first String or after the last String .&quot;</td></tr>
      <tr><td align="left">27:let final = (+ (+ (+ (+ (+ (+ &quot;{&quot; &quot;\n&quot;) state.Indent) properties) &quot;\n&quot;) stepback) &quot;}&quot;)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18125 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">7:let K = [? __x0__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18132 [shape=cds, label=<<font color="black">12:app __x4__ = (QuoteJSONString P)</font>> color="black" fillcolor="white" style=filled]
  node18137 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">__x2__ = (+ __x2__ 1i)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18124 [shape=cds, label=<<font color="black">7:app __x0__ = (EnumerableOwnPropertyNames value CONST_key)</font>> color="black" fillcolor="white" style=filled]
  node18135 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">member = (+ member &quot; &quot;)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18139 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let final = &quot;{}&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18130 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">10:let strP = [? __x3__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18122 -> node18123 [label=<<font color="black">true</font>> color="black"]
  node18122 -> node18124 [label=<<font color="black">false</font>> color="black"]
  node18126 -> node18127 [ color="black"]
  node18119 -> node18120 [label=<<font color="black">true</font>> color="black"]
  node18119 -> node18121 [label=<<font color="black">false</font>> color="black"]
  node18120 -> node18121 [ color="black"]
  node18129 -> node18130 [ color="black"]
  node18143 -> node18118 [ color="black"]
  node18117 -> node18119 [ color="black"]
  node18138 -> node18139 [label=<<font color="black">true</font>> color="black"]
  node18138 -> node18140 [label=<<font color="black">false</font>> color="black"]
  node18140 -> node18141 [label=<<font color="black">true</font>> color="black"]
  node18140 -> node18142 [label=<<font color="black">false</font>> color="black"]
  node18141 -> node18143 [ color="black"]
  node18121 -> node18122 [ color="black"]
  node18136 -> node18137 [ color="black"]
  node18128 -> node18129 [ color="black"]
  node18124 -> node18125 [ color="black"]
  node18134 -> node18135 [label=<<font color="black">true</font>> color="black"]
  node18134 -> node18136 [label=<<font color="black">false</font>> color="black"]
  node18142 -> node18143 [ color="black"]
  node18131 -> node18132 [label=<<font color="black">true</font>> color="black"]
  node18131 -> node18137 [label=<<font color="black">false</font>> color="black"]
  node18125 -> node18126 [ color="black"]
  node18127 -> node18128 [label=<<font color="black">true</font>> color="black"]
  node18127 -> node18138 [label=<<font color="black">false</font>> color="black"]
  node18132 -> node18133 [ color="black"]
  node18139 -> node18143 [ color="black"]
  node18130 -> node18131 [ color="black"]
  node18137 -> node18127 [ color="black"]
  node18123 -> node18126 [ color="black"]
  node18135 -> node18136 [ color="black"]
  node18133 -> node18134 [ color="black"]
}
