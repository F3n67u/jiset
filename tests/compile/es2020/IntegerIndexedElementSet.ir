{
  [1] app __x0__ = (Type index)
  [1] assert (= __x0__ Number)
  [3] if (= O.ContentType CONST_BigInt) {
    app __x1__ = (ToBigInt value)
    if (is-completion __x1__) if (= __x1__.Type CONST_normal) __x1__ = __x1__.Value else return __x1__ else [0] {}
    let numValue = __x1__
  } else {
    app __x2__ = (ToNumber value)
    if (is-completion __x2__) if (= __x2__.Type CONST_normal) __x2__ = __x2__.Value else return __x2__ else [0] {}
    let numValue = __x2__
  }
  [4] let buffer = O.ViewedArrayBuffer
  [5] app __x3__ = (IsDetachedBuffer buffer)
  [5] if (= __x3__ true) {
    app __x4__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_TypeError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
    return __x4__
  } else [0] {}
  [6] app __x5__ = (IsValidIntegerIndex O index)
  [6] if (is-completion __x5__) if (= __x5__.Type CONST_normal) __x5__ = __x5__.Value else return __x5__ else [0] {}
  [6] if (= __x5__ false) {
    app __x6__ = (WrapCompletion false)
    return __x6__
  } else [0] {}
  [7] let offset = O.ByteOffset
  [8] let arrayTypeName = O.TypedArrayName
  [9] ??? "Let id:{elementSize} be the Element Size value specified in link:{} for id:{arrayTypeName} ."
  [10] let indexedPosition = (+ (* index elementSize) offset)
  [11] ??? "Let id:{elementType} be the Element Type value in link:{} for id:{arrayTypeName} ."
  [12] app __x7__ = (SetValueInBuffer buffer indexedPosition elementType numValue true CONST_Unordered)
  [12] __x7__
  [13] app __x8__ = (WrapCompletion true)
  [13] return __x8__
}