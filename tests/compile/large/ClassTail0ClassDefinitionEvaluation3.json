[{
  "tokens": ["Let", {
    "id": "lex"
  }, "be", "the", "LexicalEnvironment", "of", "the", "running", "execution", "context", "."]
}, {
  "tokens": ["Let", {
    "id": "classScope"
  }, "be", "NewDeclarativeEnvironment", "(", {
    "id": "lex"
  }, ")", "."]
}, {
  "tokens": ["Let", {
    "id": "classScopeEnvRec"
  }, "be", {
    "id": "classScope"
  }, "'", "s", "EnvironmentRecord", "."]
}, {
  "tokens": ["If", {
    "id": "classBinding"
  }, "is", "not", {
    "value": "undefined"
  }, ",", "then", {
    "steps": [{
      "tokens": ["Perform", {
        "id": "classScopeEnvRec"
      }, ".", "CreateImmutableBinding", "(", {
        "id": "classBinding"
      }, ",", {
        "value": "true"
      }, ")", "."]
    }]
  }]
}, {
  "tokens": ["If", {
    "nt": "ClassHeritage"
  }, "is", "not", "present", ",", "then", {
    "steps": [{
      "tokens": ["Let", {
        "id": "protoParent"
      }, "be", "%", "Object", ".", "prototype", "%", "."]
    }, {
      "tokens": ["Let", {
        "id": "constructorParent"
      }, "be", "%", "Function", ".", "prototype", "%", "."]
    }]
  }]
}, {
  "tokens": ["Else", ",", {
    "steps": [{
      "tokens": ["Set", "the", "running", "execution", "context", "'", "s", "LexicalEnvironment", "to", {
        "id": "classScope"
      }, "."]
    }, {
      "tokens": ["Let", {
        "id": "superclassRef"
      }, "be", "the", "result", "of", "evaluating", {
        "nt": "ClassHeritage"
      }, "."]
    }, {
      "tokens": ["Set", "the", "running", "execution", "context", "'", "s", "LexicalEnvironment", "to", {
        "id": "lex"
      }, "."]
    }, {
      "tokens": ["Let", {
        "id": "superclass"
      }, "be", "?", "GetValue", "(", {
        "id": "superclassRef"
      }, ")", "."]
    }, {
      "tokens": ["If", {
        "id": "superclass"
      }, "is", {
        "value": "null"
      }, ",", "then", {
        "steps": [{
          "tokens": ["Let", {
            "id": "protoParent"
          }, "be", {
            "value": "null"
          }, "."]
        }, {
          "tokens": ["Let", {
            "id": "constructorParent"
          }, "be", "%", "Function", ".", "prototype", "%", "."]
        }]
      }]
    }, {
      "tokens": ["Else", "if", "IsConstructor", "(", {
        "id": "superclass"
      }, ")", "is", {
        "value": "false"
      }, ",", "throw", "a", {
        "value": "TypeError"
      }, "exception", "."]
    }, {
      "tokens": ["Else", ",", {
        "steps": [{
          "tokens": ["Let", {
            "id": "protoParent"
          }, "be", "?", "Get", "(", {
            "id": "superclass"
          }, ",", {
            "value": "\"prototype\""
          }, ")", "."]
        }, {
          "tokens": ["If", "Type", "(", {
            "id": "protoParent"
          }, ")", "is", "neither", "Object", "nor", "Null", ",", "throw", "a", {
            "value": "TypeError"
          }, "exception", "."]
        }, {
          "tokens": ["Let", {
            "id": "constructorParent"
          }, "be", {
            "id": "superclass"
          }, "."]
        }]
      }]
    }]
  }]
}, {
  "tokens": ["Let", {
    "id": "proto"
  }, "be", "OrdinaryObjectCreate", "(", {
    "id": "protoParent"
  }, ")", "."]
}, {
  "tokens": ["If", {
    "nt": "ClassBody"
  }, "is", "not", "present", ",", "let", {
    "id": "constructor"
  }, "be", {
    "const": "empty"
  }, "."]
}, {
  "tokens": ["Else", ",", "let", {
    "id": "constructor"
  }, "be", "ConstructorMethod", "of", {
    "nt": "ClassBody"
  }, "."]
}, {
  "tokens": ["If", {
    "id": "constructor"
  }, "is", {
    "const": "empty"
  }, ",", "then", {
    "steps": [{
      "tokens": ["If", {
        "nt": "ClassHeritage"
      }, "is", "present", ",", "then", {
        "steps": [{
          "tokens": ["Set", {
            "id": "constructor"
          }, "to", "the", "result", "of", "parsing", "the", "source", "text", {
            "code": "constructor(...args) { super(...args); }"
          }, "using", "the", "syntactic", "grammar", "with", "the", "goal", "symbol", {
            "nt": "MethodDefinition"
          }, "."]
        }]
      }]
    }, {
      "tokens": ["Else", ",", {
        "steps": [{
          "tokens": ["Set", {
            "id": "constructor"
          }, "to", "the", "result", "of", "parsing", "the", "source", "text", {
            "code": "constructor() {}"
          }, "using", "the", "syntactic", "grammar", "with", "the", "goal", "symbol", {
            "nt": "MethodDefinition"
          }, "."]
        }]
      }]
    }]
  }]
}, {
  "tokens": ["Set", "the", "running", "execution", "context", "'", "s", "LexicalEnvironment", "to", {
    "id": "classScope"
  }, "."]
}, {
  "tokens": ["Let", {
    "id": "constructorInfo"
  }, "be", "!", "DefineMethod", "of", {
    "id": "constructor"
  }, "with", "arguments", {
    "id": "proto"
  }, "and", {
    "id": "constructorParent"
  }, "."]
}, {
  "tokens": ["ReturnIfAbrupt", "(", {
    "id": "constructorInfo"
  }, ")", "."]
}, {
  "tokens": ["Let", {
    "id": "F"
  }, "be", {
    "id": "constructorInfo"
  }, ".", "[", "[", "Closure", "]", "]", "."]
}, {
  "tokens": ["Perform", "MakeConstructor", "(", {
    "id": "F"
  }, ",", {
    "value": "false"
  }, ",", {
    "id": "proto"
  }, ")", "."]
}, {
  "tokens": ["If", {
    "nt": "ClassHeritage"
  }, "is", "present", ",", "set", {
    "id": "F"
  }, ".", "[", "[", "ConstructorKind", "]", "]", "to", {
    "const": "derived"
  }, "."]
}, {
  "tokens": ["Perform", "MakeClassConstructor", "(", {
    "id": "F"
  }, ")", "."]
}, {
  "tokens": ["If", {
    "id": "className"
  }, "is", "not", {
    "value": "undefined"
  }, ",", "then", {
    "steps": [{
      "tokens": ["Perform", "SetFunctionName", "(", {
        "id": "F"
      }, ",", {
        "id": "className"
      }, ")", "."]
    }]
  }]
}, {
  "tokens": ["Perform", "CreateMethodProperty", "(", {
    "id": "proto"
  }, ",", {
    "value": "\"constructor\""
  }, ",", {
    "id": "F"
  }, ")", "."]
}, {
  "tokens": ["If", {
    "nt": "ClassBody"
  }, "is", "not", "present", ",", "let", {
    "id": "methods"
  }, "be", "a", "new", "empty", "List", "."]
}, {
  "tokens": ["Else", ",", "let", {
    "id": "methods"
  }, "be", "NonConstructorMethodDefinitions", "of", {
    "nt": "ClassBody"
  }, "."]
}, {
  "tokens": ["For", "each", {
    "nt": "ClassElement"
  }, {
    "id": "m"
  }, "in", "order", "from", {
    "id": "methods"
  }, ",", "do", {
    "steps": [{
      "tokens": ["If", "IsStatic", "of", {
        "id": "m"
      }, "is", {
        "value": "false"
      }, ",", "then", {
        "steps": [{
          "tokens": ["Let", {
            "id": "status"
          }, "be", "PropertyDefinitionEvaluation", "of", {
            "id": "m"
          }, "with", "arguments", {
            "id": "proto"
          }, "and", {
            "value": "false"
          }, "."]
        }]
      }]
    }, {
      "tokens": ["Else", ",", {
        "steps": [{
          "tokens": ["Let", {
            "id": "status"
          }, "be", "PropertyDefinitionEvaluation", "of", {
            "id": "m"
          }, "with", "arguments", {
            "id": "F"
          }, "and", {
            "value": "false"
          }, "."]
        }]
      }]
    }, {
      "tokens": ["If", {
        "id": "status"
      }, "is", "an", "abrupt", "completion", ",", "then", {
        "steps": [{
          "tokens": ["Set", "the", "running", "execution", "context", "'", "s", "LexicalEnvironment", "to", {
            "id": "lex"
          }, "."]
        }, {
          "tokens": ["Return", "Completion", "(", {
            "id": "status"
          }, ")", "."]
        }]
      }]
    }]
  }]
}, {
  "tokens": ["Set", "the", "running", "execution", "context", "'", "s", "LexicalEnvironment", "to", {
    "id": "lex"
  }, "."]
}, {
  "tokens": ["If", {
    "id": "classBinding"
  }, "is", "not", {
    "value": "undefined"
  }, ",", "then", {
    "steps": [{
      "tokens": ["Perform", {
        "id": "classScopeEnvRec"
      }, ".", "InitializeBinding", "(", {
        "id": "classBinding"
      }, ",", {
        "id": "F"
      }, ")", "."]
    }]
  }]
}, {
  "tokens": ["Return", {
    "id": "F"
  }, "."]
}]