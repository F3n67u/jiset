{
  [0] let asyncContext = GLOBAL_context
  [1] app __x0__ = (NewPromiseCapability INTRINSIC_Promise)
  [1] if (is-completion __x0__) if (= __x0__.Type CONST_normal) __x0__ = __x0__.Value else return __x0__ else [7] {}
  [1] let promiseCapability = __x0__
  [2] app __x1__ = (Call promiseCapability.Resolve undefined (new [promise]))
  [2] if (is-completion __x1__) if (= __x1__.Type CONST_normal) __x1__ = __x1__.Value else return __x1__ else [7] {}
  [2] __x1__
  [3] ??? "Let id:{stepsFulfilled} be the algorithm steps defined in link:{} ."
  [4] app __x2__ = (CreateBuiltinFunction stepsFulfilled (new ["AsyncContext"]))
  [4] let onFulfilled = __x2__
  [5] onFulfilled.AsyncContext = asyncContext
  [6] ??? "Let id:{stepsRejected} be the algorithm steps defined in link:{} ."
  [7] app __x3__ = (CreateBuiltinFunction stepsRejected (new ["AsyncContext"]))
  [7] let onRejected = __x3__
  [8] onRejected.AsyncContext = asyncContext
  [9] app __x4__ = (NewPromiseCapability INTRINSIC_Promise)
  [9] if (is-completion __x4__) if (= __x4__.Type CONST_normal) __x4__ = __x4__.Value else return __x4__ else [7] {}
  [9] let throwawayCapability = __x4__
  [10] throwawayCapability.Promise.PromiseIsHandled = true
  [11] app __x5__ = (PerformPromiseThen promiseCapability.Promise onFulfilled onRejected throwawayCapability)
  [11] if (is-completion __x5__) if (= __x5__.Type CONST_normal) __x5__ = __x5__.Value else return __x5__ else [7] {}
  [11] __x5__
  [12] if (= GLOBAL_executionStack[(- GLOBAL_executionStack.length 1i)] asyncContext) {
    let __x6__ = (- GLOBAL_executionStack.length 1i)
    (pop GLOBAL_executionStack __x6__)
  } else {}
  [12] GLOBAL_context = GLOBAL_executionStack[(- GLOBAL_executionStack.length 1i)]
  [13] ??? "Set the code evaluation state of id:{asyncContext} such that when evaluation is resumed with a Completion id:{completion} , the following steps of the algorithm that invoked Await will be performed , with id:{completion} available ."
}