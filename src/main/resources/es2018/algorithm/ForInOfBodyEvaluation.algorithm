<algorithm>
  <param>lhs</param>
  <param>stmt</param>
  <param>iteratorRecord</param>
  <param>iterationKind</param>
  <param>lhsKind</param>
  <param>labelSet</param>
  <param>iteratorKind</param>
  <step-list>
    <step>If <id>iteratorKind</id> is not present, set <id>iteratorKind</id> to <value>sync</value> .</step>
    <step>Let <id>oldEnv</id> be the running execution context 's LexicalEnvironment.</step>
    <step>Let <id>V</id> be <value>undefined</value> .</step>
    <step>Let <id>destructuring</id> be IsDestructuring of <id>lhs</id> .</step>
    <step>If <id>destructuring</id> is <value>true</value> and if <id>lhsKind</id> is <value>assignment</value> , then     <step-list>
      <step>Assert : <id>lhs</id> is a LeftHandSideExpression .</step>
      <step>Let <id>assignmentPattern</id> be the AssignmentPattern that is covered by <id>lhs</id> .</step>
    </step-list></step>
    <step>Repeat,     <step-list>
      <step>Let <id>nextResult</id> be ? Call ( <id>iteratorRecord</id> .[[NextMethod]], <id>iteratorRecord</id> .[[Iterator]], « »).</step>
      <step>If <id>iteratorKind</id> is <value>async</value> , then set <id>nextResult</id> to ? Await ( <id>nextResult</id> ).</step>
      <step>If Type ( <id>nextResult</id> ) is not Object, throw a <value>TypeError</value> exception.</step>
      <step>Let <id>nextValue</id> be ? IteratorValue ( <id>nextResult</id> ).</step>
      <step>If <id>lhsKind</id> is either <value>assignment</value> or <value>varBinding</value> , then       <step-list>
        <step>If <id>destructuring</id> is <value>false</value> , then         <step-list>
          <step>Let <id>lhsRef</id> be the result of evaluating <id>lhs</id> . (It may be evaluated repeatedly.)</step>
        </step-list></step>
      </step-list></step>
      <step>Else,       <step-list>
        <step>Assert : <id>lhsKind</id> is <value>lexicalBinding</value> .</step>
        <step>Assert : <id>lhs</id> is a ForDeclaration .</step>
        <step>Let <id>iterationEnv</id> be NewDeclarativeEnvironment ( <id>oldEnv</id> ).</step>
        <step>Perform BindingInstantiation for <id>lhs</id> passing <id>iterationEnv</id> as the argument.</step>
        <step>Set the running execution context 's LexicalEnvironment to <id>iterationEnv</id> .</step>
        <step>If <id>destructuring</id> is <value>false</value> , then         <step-list>
          <step>Assert : <id>lhs</id> binds a single name.</step>
          <step>Let <id>lhsName</id> be the sole element of BoundNames of <id>lhs</id> .</step>
          <step>Let <id>lhsRef</id> be ! ResolveBinding ( <id>lhsName</id> ).</step>
        </step-list></step>
      </step-list></step>
      <step>If <id>destructuring</id> is <value>false</value> , then       <step-list>
        <step>If <id>lhsRef</id> is an abrupt completion , then         <step-list>
          <step>Let <id>status</id> be <id>lhsRef</id> .</step>
        </step-list></step>
        <step>Else if <id>lhsKind</id> is <value>lexicalBinding</value> , then         <step-list>
          <step>Let <id>status</id> be InitializeReferencedBinding ( <id>lhsRef</id> , <id>nextValue</id> ).</step>
        </step-list></step>
        <step>Else,         <step-list>
          <step>Let <id>status</id> be PutValue ( <id>lhsRef</id> , <id>nextValue</id> ).</step>
        </step-list></step>
      </step-list></step>
      <step>Else,       <step-list>
        <step>If <id>lhsKind</id> is <value>assignment</value> , then         <step-list>
          <step>Let <id>status</id> be the result of performing DestructuringAssignmentEvaluation of <id>assignmentPattern</id> using <id>nextValue</id> as the argument.</step>
        </step-list></step>
        <step>Else if <id>lhsKind</id> is <value>varBinding</value> , then         <step-list>
          <step>Assert : <id>lhs</id> is a ForBinding .</step>
          <step>Let <id>status</id> be the result of performing BindingInitialization for <id>lhs</id> passing <id>nextValue</id> and <value>undefined</value> as the arguments.</step>
        </step-list></step>
        <step>Else,         <step-list>
          <step>Assert : <id>lhsKind</id> is <value>lexicalBinding</value> .</step>
          <step>Assert : <id>lhs</id> is a ForDeclaration .</step>
          <step>Let <id>status</id> be the result of performing BindingInitialization for <id>lhs</id> passing <id>nextValue</id> and <id>iterationEnv</id> as arguments.</step>
        </step-list></step>
      </step-list></step>
      <step>If <id>status</id> is an abrupt completion , then       <step-list>
        <step>Set the running execution context 's LexicalEnvironment to <id>oldEnv</id> .</step>
        <step>If <id>iteratorKind</id> is <value>async</value> , return ? AsyncIteratorClose ( <id>iteratorRecord</id> , <id>status</id> ).</step>
        <step>If <id>iterationKind</id> is <value>enumerate</value> , then         <step-list>
          <step>Return <id>status</id> .</step>
        </step-list></step>
        <step>Else,         <step-list>
          <step>Assert : <id>iterationKind</id> is <value>iterate</value> .</step>
          <step>Return ? IteratorClose ( <id>iteratorRecord</id> , <id>status</id> ).</step>
        </step-list></step>
      </step-list></step>
      <step>Let <id>result</id> be the result of evaluating <id>stmt</id> .</step>
      <step>Set the running execution context 's LexicalEnvironment to <id>oldEnv</id> .</step>
      <step>If LoopContinues ( <id>result</id> , <id>labelSet</id> ) is <value>false</value> , then       <step-list>
        <step>If <id>iterationKind</id> is <value>enumerate</value> , then         <step-list>
          <step>Return Completion ( UpdateEmpty ( <id>result</id> , <id>V</id> )).</step>
        </step-list></step>
        <step>Else,         <step-list>
          <step>Assert : <id>iterationKind</id> is <value>iterate</value> .</step>
          <step>Set <id>status</id> to UpdateEmpty ( <id>result</id> , <id>V</id> ).</step>
          <step>If <id>iteratorKind</id> is <value>async</value> , return ? AsyncIteratorClose ( <id>iteratorRecord</id> , <id>status</id> ).</step>
          <step>Return ? IteratorClose ( <id>iteratorRecord</id> , <id>status</id> ).</step>
        </step-list></step>
      </step-list></step>
      <step>If <id>result</id> .[[Value]] is not <value>empty</value> , set <id>V</id> to <id>result</id> .[[Value]].</step>
    </step-list></step>
  </step-list>
</algorithm>