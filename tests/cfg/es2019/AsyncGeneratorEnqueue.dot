digraph {
  node17343 [shape=cds, label=<<font color="black">4:app __x2__ = (Call promiseCapability.Reject undefined (new [badGeneratorError]))</font>> color="black" fillcolor="white" style=filled]
  node17339 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">1:let promiseCapability = [! __x0__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17334 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node17342 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">3:let badGeneratorError = ??? &quot;TypeError&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17349 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">12:return promiseCapability.Promise</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17346 [shape=diamond, label=<<font color="black">(! (= state &quot;executing&quot;))</font>> color="black" fillcolor="white" style=filled]
  node17345 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">6:let queue = generator.AsyncGeneratorQueue</td></tr>
      <tr><td align="left">7:let request = (new AsyncGeneratorRequest(&quot;Completion&quot; -&gt; completion, &quot;Capability&quot; -&gt; promiseCapability))</td></tr>
      <tr><td align="left">8:append request -&gt; queue</td></tr>
      <tr><td align="left">9:let state = generator.AsyncGeneratorState</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17335 [shape=cds, label=<<font color="black">app generator = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node17338 [shape=cds, label=<<font color="black">1:app __x0__ = (NewPromiseCapability INTRINSIC_Promise)</font>> color="black" fillcolor="white" style=filled]
  node17341 [shape=diamond, label=<<font color="black">(|| (! (= __x1__ Object)) (= generator.AsyncGeneratorState absent))</font>> color="black" fillcolor="white" style=filled]
  node17344 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">4:[! __x2__]</td></tr>
      <tr><td align="left">5:return promiseCapability.Promise</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17337 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:assert (is-completion completion)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17348 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">11:[! __x3__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17333 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node17340 [shape=cds, label=<<font color="black">2:app __x1__ = (Type generator)</font>> color="black" fillcolor="white" style=filled]
  node17336 [shape=cds, label=<<font color="black">app completion = (GetArgument argumentsList 1i)</font>> color="black" fillcolor="white" style=filled]
  node17347 [shape=cds, label=<<font color="black">11:app __x3__ = (AsyncGeneratorResumeNext generator)</font>> color="black" fillcolor="white" style=filled]
  node17345 -> node17346 [ color="black"]
  node17348 -> node17349 [ color="black"]
  node17335 -> node17336 [ color="black"]
  node17333 -> node17335 [ color="black"]
  node17344 -> node17345 [ color="black"]
  node17343 -> node17344 [ color="black"]
  node17341 -> node17342 [label=<<font color="black">true</font>> color="black"]
  node17341 -> node17345 [label=<<font color="black">false</font>> color="black"]
  node17347 -> node17348 [ color="black"]
  node17349 -> node17334 [ color="black"]
  node17342 -> node17343 [ color="black"]
  node17339 -> node17340 [ color="black"]
  node17346 -> node17347 [label=<<font color="black">true</font>> color="black"]
  node17346 -> node17349 [label=<<font color="black">false</font>> color="black"]
  node17340 -> node17341 [ color="black"]
  node17336 -> node17337 [ color="black"]
  node17338 -> node17339 [ color="black"]
  node17337 -> node17338 [ color="black"]
}
