{
  app reaction = (GetArgument argumentsList 0i)
  app argument = (GetArgument argumentsList 1i)
  [1] let promiseCapability = reaction.Capability
  [2] let type = reaction.Type
  [3] let handler = reaction.Handler
  [9] if (= handler undefined) if (= type "Fulfill") {
    app __x0__ = (NormalCompletion argument)
    let handlerResult = __x0__
  } else {
    [7] assert (= type "Reject")
    [8] let handlerResult = (new Completion("Type" -> CONST_throw, "Value" -> argument, "Target" -> CONST_empty))
  } else {
    app __x1__ = (Call handler undefined (new [argument]))
    let handlerResult = __x1__
  }
  [12] app __x2__ = (IsAbruptCompletion handlerResult)
  [12] if __x2__ {
    [11] app __x3__ = (Call promiseCapability.Reject undefined (new [handlerResult.Value]))
    [11] let status = __x3__
  } else {
    [13] app __x4__ = (Call promiseCapability.Resolve undefined (new [handlerResult.Value]))
    [13] let status = __x4__
  }
  [14] app __x5__ = (Completion status)
  [14] app __x6__ = (WrapCompletion __x5__)
  [14] return __x6__
}