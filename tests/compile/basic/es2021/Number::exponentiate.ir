{
  if (= exponent NaN) return NaN else {}
  if (|| (= exponent 0i) (= exponent -0.0)) return 1i else {}
  if (= base NaN) return NaN else {}
  if (= base Infinity) if (< 0i exponent) return Infinity else return 0i else {}
  if (= base -Infinity) if (< 0i exponent) ??? "If id:{exponent} is an odd integral Number , return value:{-∞} . Otherwise , return value:{+∞} ." else ??? "If id:{exponent} is an odd integral Number , return value:{-0} . Otherwise , return value:{+0} ." else {}
  if (= base 0i) if (< 0i exponent) return 0i else return Infinity else {}
  if (= base -0.0) if (< 0i exponent) ??? "If id:{exponent} is an odd integral Number , return value:{-0} . Otherwise , return value:{+0} ." else ??? "If id:{exponent} is an odd integral Number , return value:{-∞} . Otherwise , return value:{+∞} ." else {}
  if (= exponent Infinity) {
    app __x0__ = (abs base)
    if (< 1i __x0__) return Infinity else {}
    app __x1__ = (abs base)
    if (= __x1__ 1i) return NaN else {}
    app __x2__ = (abs base)
    if (< __x2__ 1i) return 0i else {}
  } else {}
  if (= exponent -Infinity) {
    app __x3__ = (abs base)
    if (< 1i __x3__) return 0i else {}
    app __x4__ = (abs base)
    if (= __x4__ 1i) return NaN else {}
    app __x5__ = (abs base)
    if (< __x5__ 1i) return Infinity else {}
  } else {}
  ??? "If id:{base} < value:{+0} and id:{exponent} is not an integral Number , return value:{NaN} ."
  ??? "Return an implementation - approximated value representing the result of raising ℝ ( id:{base} ) to the ℝ ( id:{exponent} ) power ."
}