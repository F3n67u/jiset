var ESParse;(()=>{var e={1234:function(e,t){!function(e){"use strict";var t={3:"abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile",5:"class enum extends super const export import",6:"enum",strict:"implements interface let package private protected public static yield",strictBind:"eval arguments"},s="break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this",i={5:s,"5module":s+" export import",6:s+" const class extends export import super"},r=/^in(stanceof)?$/,n="ªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙՠ-ֈא-תׯ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࡠ-ࡪࢠ-ࢴࢶ-ࣇऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱৼਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡૹଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘ-ౚౠౡಀಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഄ-ഌഎ-ഐഒ-ഺഽൎൔ-ൖൟ-ൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄຆ-ຊຌ-ຣລວ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏽᏸ-ᏽᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡸᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᦰ-ᧉᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᲀ-ᲈᲐ-ᲺᲽ-Ჿᳩ-ᳬᳮ-ᳳᳵᳶᳺᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕ℘-ℝℤΩℨK-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞ々-〇〡-〩〱-〵〸-〼ぁ-ゖ゛-ゟァ-ヺー-ヿㄅ-ㄯㄱ-ㆎㆠ-ㆿㇰ-ㇿ㐀-䶿一-鿼ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꞿꟂ-ꟊꟵ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꣽꣾꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭩꭰ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜ",a="‌‍·̀-ͯ·҃-֑҇-ׇֽֿׁׂׅׄؐ-ًؚ-٩ٰۖ-ۜ۟-۪ۤۧۨ-ۭ۰-۹ܑܰ-݊ަ-ް߀-߉߫-߽߳ࠖ-࠙ࠛ-ࠣࠥ-ࠧࠩ-࡙࠭-࡛࣓-ࣣ࣡-ःऺ-़ा-ॏ॑-ॗॢॣ०-९ঁ-ঃ়া-ৄেৈো-্ৗৢৣ০-৯৾ਁ-ਃ਼ਾ-ੂੇੈੋ-੍ੑ੦-ੱੵઁ-ઃ઼ા-ૅે-ૉો-્ૢૣ૦-૯ૺ-૿ଁ-ଃ଼ା-ୄେୈୋ-୍୕-ୗୢୣ୦-୯ஂா-ூெ-ைொ-்ௗ௦-௯ఀ-ఄా-ౄె-ైొ-్ౕౖౢౣ౦-౯ಁ-ಃ಼ಾ-ೄೆ-ೈೊ-್ೕೖೢೣ೦-೯ഀ-ഃ഻഼ാ-ൄെ-ൈൊ-്ൗൢൣ൦-൯ඁ-ඃ්ා-ුූෘ-ෟ෦-෯ෲෳัิ-ฺ็-๎๐-๙ັິ-ຼ່-ໍ໐-໙༘༙༠-༩༹༵༷༾༿ཱ-྄྆྇ྍ-ྗྙ-ྼ࿆ါ-ှ၀-၉ၖ-ၙၞ-ၠၢ-ၤၧ-ၭၱ-ၴႂ-ႍႏ-ႝ፝-፟፩-፱ᜒ-᜔ᜲ-᜴ᝒᝓᝲᝳ឴-៓៝០-៩᠋-᠍᠐-᠙ᢩᤠ-ᤫᤰ-᤻᥆-᥏᧐-᧚ᨗ-ᨛᩕ-ᩞ᩠-᩿᩼-᪉᪐-᪙᪰-᪽ᪿᫀᬀ-ᬄ᬴-᭄᭐-᭙᭫-᭳ᮀ-ᮂᮡ-ᮭ᮰-᮹᯦-᯳ᰤ-᰷᱀-᱉᱐-᱙᳐-᳔᳒-᳨᳭᳴᳷-᳹᷀-᷹᷻-᷿‿⁀⁔⃐-⃥⃜⃡-⃰⳯-⵿⳱ⷠ-〪ⷿ-゙゚〯꘠-꘩꙯ꙴ-꙽ꚞꚟ꛰꛱ꠂ꠆ꠋꠣ-ꠧ꠬ꢀꢁꢴ-ꣅ꣐-꣙꣠-꣱ꣿ-꤉ꤦ-꤭ꥇ-꥓ꦀ-ꦃ꦳-꧀꧐-꧙ꧥ꧰-꧹ꨩ-ꨶꩃꩌꩍ꩐-꩙ꩻ-ꩽꪰꪲ-ꪴꪷꪸꪾ꪿꫁ꫫ-ꫯꫵ꫶ꯣ-ꯪ꯬꯭꯰-꯹ﬞ︀-️︠-︯︳︴﹍-﹏０-９＿",o=new RegExp("["+n+"]"),c=new RegExp("["+n+a+"]");n=a=null;var p=[0,11,2,25,2,18,2,1,2,14,3,13,35,122,70,52,268,28,4,48,48,31,14,29,6,37,11,29,3,35,5,7,2,4,43,157,19,35,5,35,5,39,9,51,157,310,10,21,11,7,153,5,3,0,2,43,2,1,4,0,3,22,11,22,10,30,66,18,2,1,11,21,11,25,71,55,7,1,65,0,16,3,2,2,2,28,43,28,4,28,36,7,2,27,28,53,11,21,11,18,14,17,111,72,56,50,14,50,14,35,349,41,7,1,79,28,11,0,9,21,107,20,28,22,13,52,76,44,33,24,27,35,30,0,3,0,9,34,4,0,13,47,15,3,22,0,2,0,36,17,2,24,85,6,2,0,2,3,2,14,2,9,8,46,39,7,3,1,3,21,2,6,2,1,2,4,4,0,19,0,13,4,159,52,19,3,21,2,31,47,21,1,2,0,185,46,42,3,37,47,21,0,60,42,14,0,72,26,230,43,117,63,32,7,3,0,3,7,2,1,2,23,16,0,2,0,95,7,3,38,17,0,2,0,29,0,11,39,8,0,22,0,12,45,20,0,35,56,264,8,2,36,18,0,50,29,113,6,2,1,2,37,22,0,26,5,2,1,2,31,15,0,328,18,190,0,80,921,103,110,18,195,2749,1070,4050,582,8634,568,8,30,114,29,19,47,17,3,32,20,6,18,689,63,129,74,6,0,67,12,65,1,2,0,29,6135,9,1237,43,8,8952,286,50,2,18,3,9,395,2309,106,6,12,4,8,8,9,5991,84,2,70,2,1,3,0,3,1,3,3,2,11,2,0,2,6,2,64,2,3,3,7,2,6,2,27,2,3,2,4,2,0,4,6,2,339,3,24,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,7,2357,44,11,6,17,0,370,43,1301,196,60,67,8,0,1205,3,2,26,2,1,2,0,3,0,2,9,2,3,2,0,2,0,7,0,5,0,2,0,2,0,2,2,2,1,2,0,3,0,2,0,2,0,2,0,2,0,2,1,2,0,3,3,2,6,2,3,2,3,2,0,2,9,2,16,6,2,2,4,2,16,4421,42717,35,4148,12,221,3,5761,15,7472,3104,541,1507,4938],h=[509,0,227,0,150,4,294,9,1368,2,2,1,6,3,41,2,5,0,166,1,574,3,9,9,370,1,154,10,176,2,54,14,32,9,16,3,46,10,54,9,7,2,37,13,2,9,6,1,45,0,13,2,49,13,9,3,2,11,83,11,7,0,161,11,6,9,7,3,56,1,2,6,3,1,3,2,10,0,11,1,3,6,4,4,193,17,10,9,5,0,82,19,13,9,214,6,3,8,28,1,83,16,16,9,82,12,9,9,84,14,5,9,243,14,166,9,71,5,2,1,3,3,2,0,2,1,13,9,120,6,3,6,4,0,29,9,41,6,2,3,9,0,10,10,47,15,406,7,2,7,17,9,57,21,2,13,123,5,4,0,2,1,2,6,2,0,9,9,49,4,2,1,2,4,9,9,330,3,19306,9,135,4,60,6,26,9,1014,0,2,54,8,3,82,0,12,1,19628,1,5319,4,4,5,9,7,3,6,31,3,149,2,1418,49,513,54,5,49,9,0,15,0,23,4,2,14,1361,6,2,16,3,6,2,1,2,4,262,6,10,9,419,13,1495,6,110,6,6,9,4759,9,787719,239];function l(e,t){for(var s=65536,i=0;i<t.length;i+=2){if((s+=t[i])>e)return!1;if((s+=t[i+1])>=e)return!0}}function u(e,t){return e<65?36===e:e<91||(e<97?95===e:e<123||(e<=65535?e>=170&&o.test(String.fromCharCode(e)):!1!==t&&l(e,p)))}function d(e,t){return e<48?36===e:e<58||!(e<65)&&(e<91||(e<97?95===e:e<123||(e<=65535?e>=170&&c.test(String.fromCharCode(e)):!1!==t&&(l(e,p)||l(e,h)))))}var f=function(e,t){void 0===t&&(t={}),this.label=e,this.keyword=t.keyword,this.beforeExpr=!!t.beforeExpr,this.startsExpr=!!t.startsExpr,this.isLoop=!!t.isLoop,this.isAssign=!!t.isAssign,this.prefix=!!t.prefix,this.postfix=!!t.postfix,this.binop=t.binop||null,this.updateContext=null};function x(e,t){return new f(e,{beforeExpr:!0,binop:t})}var m={beforeExpr:!0},g={startsExpr:!0},y={};function E(e,t){return void 0===t&&(t={}),t.keyword=e,y[e]=new f(e,t)}var w={num:new f("num",g),regexp:new f("regexp",g),string:new f("string",g),name:new f("name",g),privateId:new f("privateId",g),eof:new f("eof"),bracketL:new f("[",{beforeExpr:!0,startsExpr:!0}),bracketR:new f("]"),braceL:new f("{",{beforeExpr:!0,startsExpr:!0}),braceR:new f("}"),parenL:new f("(",{beforeExpr:!0,startsExpr:!0}),parenR:new f(")"),comma:new f(",",m),semi:new f(";",m),colon:new f(":",m),dot:new f("."),question:new f("?",m),questionDot:new f("?."),arrow:new f("=>",m),template:new f("template"),invalidTemplate:new f("invalidTemplate"),ellipsis:new f("...",m),backQuote:new f("`",g),dollarBraceL:new f("${",{beforeExpr:!0,startsExpr:!0}),eq:new f("=",{beforeExpr:!0,isAssign:!0}),assign:new f("_=",{beforeExpr:!0,isAssign:!0}),incDec:new f("++/--",{prefix:!0,postfix:!0,startsExpr:!0}),prefix:new f("!/~",{beforeExpr:!0,prefix:!0,startsExpr:!0}),logicalOR:x("||",1),logicalAND:x("&&",2),bitwiseOR:x("|",3),bitwiseXOR:x("^",4),bitwiseAND:x("&",5),equality:x("==/!=/===/!==",6),relational:x("</>/<=/>=",7),bitShift:x("<</>>/>>>",8),plusMin:new f("+/-",{beforeExpr:!0,binop:9,prefix:!0,startsExpr:!0}),modulo:x("%",10),star:x("*",10),slash:x("/",10),starstar:new f("**",{beforeExpr:!0}),coalesce:x("??",1),_break:E("break"),_case:E("case",m),_catch:E("catch"),_continue:E("continue"),_debugger:E("debugger"),_default:E("default",m),_do:E("do",{isLoop:!0,beforeExpr:!0}),_else:E("else",m),_finally:E("finally"),_for:E("for",{isLoop:!0}),_function:E("function",g),_if:E("if"),_return:E("return",m),_switch:E("switch"),_throw:E("throw",m),_try:E("try"),_var:E("var"),_const:E("const"),_while:E("while",{isLoop:!0}),_with:E("with"),_new:E("new",{beforeExpr:!0,startsExpr:!0}),_this:E("this",g),_super:E("super",g),_class:E("class",g),_extends:E("extends",m),_export:E("export"),_import:E("import",g),_null:E("null",g),_true:E("true",g),_false:E("false",g),_in:E("in",{beforeExpr:!0,binop:7}),_instanceof:E("instanceof",{beforeExpr:!0,binop:7}),_typeof:E("typeof",{beforeExpr:!0,prefix:!0,startsExpr:!0}),_void:E("void",{beforeExpr:!0,prefix:!0,startsExpr:!0}),_delete:E("delete",{beforeExpr:!0,prefix:!0,startsExpr:!0})},v=/\r\n?|\n|\u2028|\u2029/,b=new RegExp(v.source,"g");function k(e,t){return 10===e||13===e||!t&&(8232===e||8233===e)}var S=/[\u1680\u2000-\u200a\u202f\u205f\u3000\ufeff]/,C=/(?:\s|\/\/.*|\/\*[^]*?\*\/)*/g,P=Object.prototype,A=P.hasOwnProperty,_=P.toString;function T(e,t){return A.call(e,t)}var I=Array.isArray||function(e){return"[object Array]"===_.call(e)};function L(e){return new RegExp("^(?:"+e.replace(/ /g,"|")+")$")}var O=function(e,t){this.line=e,this.column=t};O.prototype.offset=function(e){return new O(this.line,this.column+e)};var N=function(e,t,s){this.start=t,this.end=s,null!==e.sourceFile&&(this.source=e.sourceFile)};function V(e,t){for(var s=1,i=0;;){b.lastIndex=i;var r=b.exec(e);if(!(r&&r.index<t))return new O(s,t-i);++s,i=r.index+r[0].length}}var D={ecmaVersion:null,sourceType:"script",onInsertedSemicolon:null,onTrailingComma:null,allowReserved:null,allowReturnOutsideFunction:!1,allowImportExportEverywhere:!1,allowAwaitOutsideFunction:null,allowHashBang:!1,locations:!1,onToken:null,onComment:null,ranges:!1,program:null,sourceFile:null,directSourceFile:null,preserveParens:!1},B=!1;function R(e){var t={};for(var s in D)t[s]=e&&T(e,s)?e[s]:D[s];if("latest"===t.ecmaVersion?t.ecmaVersion=1e8:null==t.ecmaVersion?(!B&&"object"==typeof console&&console.warn&&(B=!0,console.warn("Since Acorn 8.0.0, options.ecmaVersion is required.\nDefaulting to 2020, but this will stop working in the future.")),t.ecmaVersion=11):t.ecmaVersion>=2015&&(t.ecmaVersion-=2009),null==t.allowReserved&&(t.allowReserved=t.ecmaVersion<5),null==t.allowAwaitOutsideFunction&&(t.allowAwaitOutsideFunction=t.ecmaVersion>=13),I(t.onToken)){var i=t.onToken;t.onToken=function(e){return i.push(e)}}return I(t.onComment)&&(t.onComment=function(e,t){return function(s,i,r,n,a,o){var c={type:s?"Block":"Line",value:i,start:r,end:n};e.locations&&(c.loc=new N(this,a,o)),e.ranges&&(c.range=[r,n]),t.push(c)}}(t,t.onComment)),t}function M(e,t){return 2|(e?4:0)|(t?8:0)}var F=function(e,s,r){this.options=e=R(e),this.sourceFile=e.sourceFile,this.keywords=L(i[e.ecmaVersion>=6?6:"module"===e.sourceType?"5module":5]);var n="";!0!==e.allowReserved&&(n=t[e.ecmaVersion>=6?6:5===e.ecmaVersion?5:3],"module"===e.sourceType&&(n+=" await")),this.reservedWords=L(n);var a=(n?n+" ":"")+t.strict;this.reservedWordsStrict=L(a),this.reservedWordsStrictBind=L(a+" "+t.strictBind),this.input=String(s),this.containsEsc=!1,r?(this.pos=r,this.lineStart=this.input.lastIndexOf("\n",r-1)+1,this.curLine=this.input.slice(0,this.lineStart).split(v).length):(this.pos=this.lineStart=0,this.curLine=1),this.type=w.eof,this.value=null,this.start=this.end=this.pos,this.startLoc=this.endLoc=this.curPosition(),this.lastTokEndLoc=this.lastTokStartLoc=null,this.lastTokStart=this.lastTokEnd=this.pos,this.context=this.initialContext(),this.exprAllowed=!0,this.inModule="module"===e.sourceType,this.strict=this.inModule||this.strictDirective(this.pos),this.potentialArrowAt=-1,this.potentialArrowInForAwait=!1,this.yieldPos=this.awaitPos=this.awaitIdentPos=0,this.labels=[],this.undefinedExports=Object.create(null),0===this.pos&&e.allowHashBang&&"#!"===this.input.slice(0,2)&&this.skipLineComment(2),this.scopeStack=[],this.enterScope(1),this.regexpState=null,this.privateNameStack=[]},U={inFunction:{configurable:!0},inGenerator:{configurable:!0},inAsync:{configurable:!0},allowSuper:{configurable:!0},allowDirectSuper:{configurable:!0},treatFunctionsAsVar:{configurable:!0},inNonArrowFunction:{configurable:!0}};F.prototype.parse=function(){var e=this.options.program||this.startNode();return this.nextToken(),this.parseTopLevel(e)},U.inFunction.get=function(){return(2&this.currentVarScope().flags)>0},U.inGenerator.get=function(){return(8&this.currentVarScope().flags)>0&&!this.currentVarScope().inClassFieldInit},U.inAsync.get=function(){return(4&this.currentVarScope().flags)>0&&!this.currentVarScope().inClassFieldInit},U.allowSuper.get=function(){var e=this.currentThisScope(),t=e.flags,s=e.inClassFieldInit;return(64&t)>0||s},U.allowDirectSuper.get=function(){return(128&this.currentThisScope().flags)>0},U.treatFunctionsAsVar.get=function(){return this.treatFunctionsAsVarInScope(this.currentScope())},U.inNonArrowFunction.get=function(){var e=this.currentThisScope(),t=e.flags,s=e.inClassFieldInit;return(2&t)>0||s},F.extend=function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];for(var s=this,i=0;i<e.length;i++)s=e[i](s);return s},F.parse=function(e,t){return new this(t,e).parse()},F.parseExpressionAt=function(e,t,s){var i=new this(s,e,t);return i.nextToken(),i.parseExpression()},F.tokenizer=function(e,t){return new this(t,e)},Object.defineProperties(F.prototype,U);var j=F.prototype,q=/^(?:'((?:\\.|[^'\\])*?)'|"((?:\\.|[^"\\])*?)")/;function z(){this.shorthandAssign=this.trailingComma=this.parenthesizedAssign=this.parenthesizedBind=this.doubleProto=-1}j.strictDirective=function(e){for(;;){C.lastIndex=e,e+=C.exec(this.input)[0].length;var t=q.exec(this.input.slice(e));if(!t)return!1;if("use strict"===(t[1]||t[2])){C.lastIndex=e+t[0].length;var s=C.exec(this.input),i=s.index+s[0].length,r=this.input.charAt(i);return";"===r||"}"===r||v.test(s[0])&&!(/[(`.[+\-/*%<>=,?^&]/.test(r)||"!"===r&&"="===this.input.charAt(i+1))}e+=t[0].length,C.lastIndex=e,e+=C.exec(this.input)[0].length,";"===this.input[e]&&e++}},j.eat=function(e){return this.type===e&&(this.next(),!0)},j.isContextual=function(e){return this.type===w.name&&this.value===e&&!this.containsEsc},j.eatContextual=function(e){return!!this.isContextual(e)&&(this.next(),!0)},j.expectContextual=function(e){this.eatContextual(e)||this.unexpected()},j.canInsertSemicolon=function(){return this.type===w.eof||this.type===w.braceR||v.test(this.input.slice(this.lastTokEnd,this.start))},j.insertSemicolon=function(){if(this.canInsertSemicolon())return this.options.onInsertedSemicolon&&this.options.onInsertedSemicolon(this.lastTokEnd,this.lastTokEndLoc),!0},j.semicolon=function(){this.eat(w.semi)||this.insertSemicolon()||this.unexpected()},j.afterTrailingComma=function(e,t){if(this.type===e)return this.options.onTrailingComma&&this.options.onTrailingComma(this.lastTokStart,this.lastTokStartLoc),t||this.next(),!0},j.expect=function(e){this.eat(e)||this.unexpected()},j.unexpected=function(e){this.raise(null!=e?e:this.start,"Unexpected token")},j.checkPatternErrors=function(e,t){if(e){e.trailingComma>-1&&this.raiseRecoverable(e.trailingComma,"Comma is not permitted after the rest element");var s=t?e.parenthesizedAssign:e.parenthesizedBind;s>-1&&this.raiseRecoverable(s,"Parenthesized pattern")}},j.checkExpressionErrors=function(e,t){if(!e)return!1;var s=e.shorthandAssign,i=e.doubleProto;if(!t)return s>=0||i>=0;s>=0&&this.raise(s,"Shorthand property assignments are valid only in destructuring patterns"),i>=0&&this.raiseRecoverable(i,"Redefinition of __proto__ property")},j.checkYieldAwaitInDefaultParams=function(){this.yieldPos&&(!this.awaitPos||this.yieldPos<this.awaitPos)&&this.raise(this.yieldPos,"Yield expression cannot be a default value"),this.awaitPos&&this.raise(this.awaitPos,"Await expression cannot be a default value")},j.isSimpleAssignTarget=function(e){return"ParenthesizedExpression"===e.type?this.isSimpleAssignTarget(e.expression):"Identifier"===e.type||"MemberExpression"===e.type};var H=F.prototype;H.parseTopLevel=function(e){var t=Object.create(null);for(e.body||(e.body=[]);this.type!==w.eof;){var s=this.parseStatement(null,!0,t);e.body.push(s)}if(this.inModule)for(var i=0,r=Object.keys(this.undefinedExports);i<r.length;i+=1){var n=r[i];this.raiseRecoverable(this.undefinedExports[n].start,"Export '"+n+"' is not defined")}return this.adaptDirectivePrologue(e.body),this.next(),e.sourceType=this.options.sourceType,this.finishNode(e,"Program")};var G={kind:"loop"},W={kind:"switch"};H.isLet=function(e){if(this.options.ecmaVersion<6||!this.isContextual("let"))return!1;C.lastIndex=this.pos;var t=C.exec(this.input),s=this.pos+t[0].length,i=this.input.charCodeAt(s);if(91===i||92===i||i>55295&&i<56320)return!0;if(e)return!1;if(123===i)return!0;if(u(i,!0)){for(var n=s+1;d(i=this.input.charCodeAt(n),!0);)++n;if(92===i||i>55295&&i<56320)return!0;var a=this.input.slice(s,n);if(!r.test(a))return!0}return!1},H.isAsyncFunction=function(){if(this.options.ecmaVersion<8||!this.isContextual("async"))return!1;C.lastIndex=this.pos;var e,t=C.exec(this.input),s=this.pos+t[0].length;return!(v.test(this.input.slice(this.pos,s))||"function"!==this.input.slice(s,s+8)||s+8!==this.input.length&&(d(e=this.input.charCodeAt(s+8))||e>55295&&e<56320))},H.parseStatement=function(e,t,s){var i,r=this.type,n=this.startNode();switch(this.isLet(e)&&(r=w._var,i="let"),r){case w._break:case w._continue:return this.parseBreakContinueStatement(n,r.keyword);case w._debugger:return this.parseDebuggerStatement(n);case w._do:return this.parseDoStatement(n);case w._for:return this.parseForStatement(n);case w._function:return e&&(this.strict||"if"!==e&&"label"!==e)&&this.options.ecmaVersion>=6&&this.unexpected(),this.parseFunctionStatement(n,!1,!e);case w._class:return e&&this.unexpected(),this.parseClass(n,!0);case w._if:return this.parseIfStatement(n);case w._return:return this.parseReturnStatement(n);case w._switch:return this.parseSwitchStatement(n);case w._throw:return this.parseThrowStatement(n);case w._try:return this.parseTryStatement(n);case w._const:case w._var:return i=i||this.value,e&&"var"!==i&&this.unexpected(),this.parseVarStatement(n,i);case w._while:return this.parseWhileStatement(n);case w._with:return this.parseWithStatement(n);case w.braceL:return this.parseBlock(!0,n);case w.semi:return this.parseEmptyStatement(n);case w._export:case w._import:if(this.options.ecmaVersion>10&&r===w._import){C.lastIndex=this.pos;var a=C.exec(this.input),o=this.pos+a[0].length,c=this.input.charCodeAt(o);if(40===c||46===c)return this.parseExpressionStatement(n,this.parseExpression())}return this.options.allowImportExportEverywhere||(t||this.raise(this.start,"'import' and 'export' may only appear at the top level"),this.inModule||this.raise(this.start,"'import' and 'export' may appear only with 'sourceType: module'")),r===w._import?this.parseImport(n):this.parseExport(n,s);default:if(this.isAsyncFunction())return e&&this.unexpected(),this.next(),this.parseFunctionStatement(n,!0,!e);var p=this.value,h=this.parseExpression();return r===w.name&&"Identifier"===h.type&&this.eat(w.colon)?this.parseLabeledStatement(n,p,h,e):this.parseExpressionStatement(n,h)}},H.parseBreakContinueStatement=function(e,t){var s="break"===t;this.next(),this.eat(w.semi)||this.insertSemicolon()?e.label=null:this.type!==w.name?this.unexpected():(e.label=this.parseIdent(),this.semicolon());for(var i=0;i<this.labels.length;++i){var r=this.labels[i];if(null==e.label||r.name===e.label.name){if(null!=r.kind&&(s||"loop"===r.kind))break;if(e.label&&s)break}}return i===this.labels.length&&this.raise(e.start,"Unsyntactic "+t),this.finishNode(e,s?"BreakStatement":"ContinueStatement")},H.parseDebuggerStatement=function(e){return this.next(),this.semicolon(),this.finishNode(e,"DebuggerStatement")},H.parseDoStatement=function(e){return this.next(),this.labels.push(G),e.body=this.parseStatement("do"),this.labels.pop(),this.expect(w._while),e.test=this.parseParenExpression(),this.options.ecmaVersion>=6?this.eat(w.semi):this.semicolon(),this.finishNode(e,"DoWhileStatement")},H.parseForStatement=function(e){this.next();var t=this.options.ecmaVersion>=9&&(this.inAsync||!this.inFunction&&this.options.allowAwaitOutsideFunction)&&this.eatContextual("await")?this.lastTokStart:-1;if(this.labels.push(G),this.enterScope(0),this.expect(w.parenL),this.type===w.semi)return t>-1&&this.unexpected(t),this.parseFor(e,null);var s=this.isLet();if(this.type===w._var||this.type===w._const||s){var i=this.startNode(),r=s?"let":this.value;return this.next(),this.parseVar(i,!0,r),this.finishNode(i,"VariableDeclaration"),(this.type===w._in||this.options.ecmaVersion>=6&&this.isContextual("of"))&&1===i.declarations.length?(this.options.ecmaVersion>=9&&(this.type===w._in?t>-1&&this.unexpected(t):e.await=t>-1),this.parseForIn(e,i)):(t>-1&&this.unexpected(t),this.parseFor(e,i))}var n=new z,a=this.parseExpression(!(t>-1)||"await",n);return this.type===w._in||this.options.ecmaVersion>=6&&this.isContextual("of")?(this.options.ecmaVersion>=9&&(this.type===w._in?t>-1&&this.unexpected(t):e.await=t>-1),this.toAssignable(a,!1,n),this.checkLValPattern(a),this.parseForIn(e,a)):(this.checkExpressionErrors(n,!0),t>-1&&this.unexpected(t),this.parseFor(e,a))},H.parseFunctionStatement=function(e,t,s){return this.next(),this.parseFunction(e,Q|(s?0:K),!1,t)},H.parseIfStatement=function(e){return this.next(),e.test=this.parseParenExpression(),e.consequent=this.parseStatement("if"),e.alternate=this.eat(w._else)?this.parseStatement("if"):null,this.finishNode(e,"IfStatement")},H.parseReturnStatement=function(e){return this.inFunction||this.options.allowReturnOutsideFunction||this.raise(this.start,"'return' outside of function"),this.next(),this.eat(w.semi)||this.insertSemicolon()?e.argument=null:(e.argument=this.parseExpression(),this.semicolon()),this.finishNode(e,"ReturnStatement")},H.parseSwitchStatement=function(e){var t;this.next(),e.discriminant=this.parseParenExpression(),e.cases=[],this.expect(w.braceL),this.labels.push(W),this.enterScope(0);for(var s=!1;this.type!==w.braceR;)if(this.type===w._case||this.type===w._default){var i=this.type===w._case;t&&this.finishNode(t,"SwitchCase"),e.cases.push(t=this.startNode()),t.consequent=[],this.next(),i?t.test=this.parseExpression():(s&&this.raiseRecoverable(this.lastTokStart,"Multiple default clauses"),s=!0,t.test=null),this.expect(w.colon)}else t||this.unexpected(),t.consequent.push(this.parseStatement(null));return this.exitScope(),t&&this.finishNode(t,"SwitchCase"),this.next(),this.labels.pop(),this.finishNode(e,"SwitchStatement")},H.parseThrowStatement=function(e){return this.next(),v.test(this.input.slice(this.lastTokEnd,this.start))&&this.raise(this.lastTokEnd,"Illegal newline after throw"),e.argument=this.parseExpression(),this.semicolon(),this.finishNode(e,"ThrowStatement")};var $=[];H.parseTryStatement=function(e){if(this.next(),e.block=this.parseBlock(),e.handler=null,this.type===w._catch){var t=this.startNode();if(this.next(),this.eat(w.parenL)){t.param=this.parseBindingAtom();var s="Identifier"===t.param.type;this.enterScope(s?32:0),this.checkLValPattern(t.param,s?4:2),this.expect(w.parenR)}else this.options.ecmaVersion<10&&this.unexpected(),t.param=null,this.enterScope(0);t.body=this.parseBlock(!1),this.exitScope(),e.handler=this.finishNode(t,"CatchClause")}return e.finalizer=this.eat(w._finally)?this.parseBlock():null,e.handler||e.finalizer||this.raise(e.start,"Missing catch or finally clause"),this.finishNode(e,"TryStatement")},H.parseVarStatement=function(e,t){return this.next(),this.parseVar(e,!1,t),this.semicolon(),this.finishNode(e,"VariableDeclaration")},H.parseWhileStatement=function(e){return this.next(),e.test=this.parseParenExpression(),this.labels.push(G),e.body=this.parseStatement("while"),this.labels.pop(),this.finishNode(e,"WhileStatement")},H.parseWithStatement=function(e){return this.strict&&this.raise(this.start,"'with' in strict mode"),this.next(),e.object=this.parseParenExpression(),e.body=this.parseStatement("with"),this.finishNode(e,"WithStatement")},H.parseEmptyStatement=function(e){return this.next(),this.finishNode(e,"EmptyStatement")},H.parseLabeledStatement=function(e,t,s,i){for(var r=0,n=this.labels;r<n.length;r+=1)n[r].name===t&&this.raise(s.start,"Label '"+t+"' is already declared");for(var a=this.type.isLoop?"loop":this.type===w._switch?"switch":null,o=this.labels.length-1;o>=0;o--){var c=this.labels[o];if(c.statementStart!==e.start)break;c.statementStart=this.start,c.kind=a}return this.labels.push({name:t,kind:a,statementStart:this.start}),e.body=this.parseStatement(i?-1===i.indexOf("label")?i+"label":i:"label"),this.labels.pop(),e.label=s,this.finishNode(e,"LabeledStatement")},H.parseExpressionStatement=function(e,t){return e.expression=t,this.semicolon(),this.finishNode(e,"ExpressionStatement")},H.parseBlock=function(e,t,s){for(void 0===e&&(e=!0),void 0===t&&(t=this.startNode()),t.body=[],this.expect(w.braceL),e&&this.enterScope(0);this.type!==w.braceR;){var i=this.parseStatement(null);t.body.push(i)}return s&&(this.strict=!1),this.next(),e&&this.exitScope(),this.finishNode(t,"BlockStatement")},H.parseFor=function(e,t){return e.init=t,this.expect(w.semi),e.test=this.type===w.semi?null:this.parseExpression(),this.expect(w.semi),e.update=this.type===w.parenR?null:this.parseExpression(),this.expect(w.parenR),e.body=this.parseStatement("for"),this.exitScope(),this.labels.pop(),this.finishNode(e,"ForStatement")},H.parseForIn=function(e,t){var s=this.type===w._in;return this.next(),"VariableDeclaration"===t.type&&null!=t.declarations[0].init&&(!s||this.options.ecmaVersion<8||this.strict||"var"!==t.kind||"Identifier"!==t.declarations[0].id.type)&&this.raise(t.start,(s?"for-in":"for-of")+" loop variable declaration may not have an initializer"),e.left=t,e.right=s?this.parseExpression():this.parseMaybeAssign(),this.expect(w.parenR),e.body=this.parseStatement("for"),this.exitScope(),this.labels.pop(),this.finishNode(e,s?"ForInStatement":"ForOfStatement")},H.parseVar=function(e,t,s){for(e.declarations=[],e.kind=s;;){var i=this.startNode();if(this.parseVarId(i,s),this.eat(w.eq)?i.init=this.parseMaybeAssign(t):"const"!==s||this.type===w._in||this.options.ecmaVersion>=6&&this.isContextual("of")?"Identifier"===i.id.type||t&&(this.type===w._in||this.isContextual("of"))?i.init=null:this.raise(this.lastTokEnd,"Complex binding patterns require an initialization value"):this.unexpected(),e.declarations.push(this.finishNode(i,"VariableDeclarator")),!this.eat(w.comma))break}return e},H.parseVarId=function(e,t){e.id=this.parseBindingAtom(),this.checkLValPattern(e.id,"var"===t?1:2,!1)};var Q=1,K=2;function Y(e,t){var s=t.key.name,i=e[s],r="true";return"MethodDefinition"!==t.type||"get"!==t.kind&&"set"!==t.kind||(r=(t.static?"s":"i")+t.kind),"iget"===i&&"iset"===r||"iset"===i&&"iget"===r||"sget"===i&&"sset"===r||"sset"===i&&"sget"===r?(e[s]="true",!1):!!i||(e[s]=r,!1)}function X(e,t){var s=e.computed,i=e.key;return!s&&("Identifier"===i.type&&i.name===t||"Literal"===i.type&&i.value===t)}H.parseFunction=function(e,t,s,i){this.initFunction(e),(this.options.ecmaVersion>=9||this.options.ecmaVersion>=6&&!i)&&(this.type===w.star&&t&K&&this.unexpected(),e.generator=this.eat(w.star)),this.options.ecmaVersion>=8&&(e.async=!!i),t&Q&&(e.id=4&t&&this.type!==w.name?null:this.parseIdent(),!e.id||t&K||this.checkLValSimple(e.id,this.strict||e.generator||e.async?this.treatFunctionsAsVar?1:2:3));var r=this.yieldPos,n=this.awaitPos,a=this.awaitIdentPos;return this.yieldPos=0,this.awaitPos=0,this.awaitIdentPos=0,this.enterScope(M(e.async,e.generator)),t&Q||(e.id=this.type===w.name?this.parseIdent():null),this.parseFunctionParams(e),this.parseFunctionBody(e,s,!1),this.yieldPos=r,this.awaitPos=n,this.awaitIdentPos=a,this.finishNode(e,t&Q?"FunctionDeclaration":"FunctionExpression")},H.parseFunctionParams=function(e){this.expect(w.parenL),e.params=this.parseBindingList(w.parenR,!1,this.options.ecmaVersion>=8),this.checkYieldAwaitInDefaultParams()},H.parseClass=function(e,t){this.next();var s=this.strict;this.strict=!0,this.parseClassId(e,t),this.parseClassSuper(e);var i=this.enterClassBody(),r=this.startNode(),n=!1;for(r.body=[],this.expect(w.braceL);this.type!==w.braceR;){var a=this.parseClassElement(null!==e.superClass);a&&(r.body.push(a),"MethodDefinition"===a.type&&"constructor"===a.kind?(n&&this.raise(a.start,"Duplicate constructor in the same class"),n=!0):"PrivateIdentifier"===a.key.type&&Y(i,a)&&this.raiseRecoverable(a.key.start,"Identifier '#"+a.key.name+"' has already been declared"))}return this.strict=s,this.next(),e.body=this.finishNode(r,"ClassBody"),this.exitClassBody(),this.finishNode(e,t?"ClassDeclaration":"ClassExpression")},H.parseClassElement=function(e){if(this.eat(w.semi))return null;var t=this.options.ecmaVersion,s=this.startNode(),i="",r=!1,n=!1,a="method";if(s.static=!1,this.eatContextual("static")&&(this.isClassElementNameStart()||this.type===w.star?s.static=!0:i="static"),!i&&t>=8&&this.eatContextual("async")&&(!this.isClassElementNameStart()&&this.type!==w.star||this.canInsertSemicolon()?i="async":n=!0),!i&&(t>=9||!n)&&this.eat(w.star)&&(r=!0),!i&&!n&&!r){var o=this.value;(this.eatContextual("get")||this.eatContextual("set"))&&(this.isClassElementNameStart()?a=o:i=o)}if(i?(s.computed=!1,s.key=this.startNodeAt(this.lastTokStart,this.lastTokStartLoc),s.key.name=i,this.finishNode(s.key,"Identifier")):this.parseClassElementName(s),t<13||this.type===w.parenL||"method"!==a||r||n){var c=!s.static&&X(s,"constructor"),p=c&&e;c&&"method"!==a&&this.raise(s.key.start,"Constructor can't have get/set modifier"),s.kind=c?"constructor":a,this.parseClassMethod(s,r,n,p)}else this.parseClassField(s);return s},H.isClassElementNameStart=function(){return this.type===w.name||this.type===w.privateId||this.type===w.num||this.type===w.string||this.type===w.bracketL||this.type.keyword},H.parseClassElementName=function(e){this.type===w.privateId?("constructor"===this.value&&this.raise(this.start,"Classes can't have an element named '#constructor'"),e.computed=!1,e.key=this.parsePrivateIdent()):this.parsePropertyName(e)},H.parseClassMethod=function(e,t,s,i){var r=e.key;"constructor"===e.kind?(t&&this.raise(r.start,"Constructor can't be a generator"),s&&this.raise(r.start,"Constructor can't be an async method")):e.static&&X(e,"prototype")&&this.raise(r.start,"Classes may not have a static property named prototype");var n=e.value=this.parseMethod(t,s,i);return"get"===e.kind&&0!==n.params.length&&this.raiseRecoverable(n.start,"getter should have no params"),"set"===e.kind&&1!==n.params.length&&this.raiseRecoverable(n.start,"setter should have exactly one param"),"set"===e.kind&&"RestElement"===n.params[0].type&&this.raiseRecoverable(n.params[0].start,"Setter cannot use rest params"),this.finishNode(e,"MethodDefinition")},H.parseClassField=function(e){if(X(e,"constructor")?this.raise(e.key.start,"Classes can't have a field named 'constructor'"):e.static&&X(e,"prototype")&&this.raise(e.key.start,"Classes can't have a static field named 'prototype'"),this.eat(w.eq)){var t=this.currentThisScope(),s=t.inClassFieldInit;t.inClassFieldInit=!0,e.value=this.parseMaybeAssign(),t.inClassFieldInit=s}else e.value=null;return this.semicolon(),this.finishNode(e,"PropertyDefinition")},H.parseClassId=function(e,t){this.type===w.name?(e.id=this.parseIdent(),t&&this.checkLValSimple(e.id,2,!1)):(!0===t&&this.unexpected(),e.id=null)},H.parseClassSuper=function(e){e.superClass=this.eat(w._extends)?this.parseExprSubscripts():null},H.enterClassBody=function(){var e={declared:Object.create(null),used:[]};return this.privateNameStack.push(e),e.declared},H.exitClassBody=function(){for(var e=this.privateNameStack.pop(),t=e.declared,s=e.used,i=this.privateNameStack.length,r=0===i?null:this.privateNameStack[i-1],n=0;n<s.length;++n){var a=s[n];T(t,a.name)||(r?r.used.push(a):this.raiseRecoverable(a.start,"Private field '#"+a.name+"' must be declared in an enclosing class"))}},H.parseExport=function(e,t){if(this.next(),this.eat(w.star))return this.options.ecmaVersion>=11&&(this.eatContextual("as")?(e.exported=this.parseIdent(!0),this.checkExport(t,e.exported.name,this.lastTokStart)):e.exported=null),this.expectContextual("from"),this.type!==w.string&&this.unexpected(),e.source=this.parseExprAtom(),this.semicolon(),this.finishNode(e,"ExportAllDeclaration");if(this.eat(w._default)){var s;if(this.checkExport(t,"default",this.lastTokStart),this.type===w._function||(s=this.isAsyncFunction())){var i=this.startNode();this.next(),s&&this.next(),e.declaration=this.parseFunction(i,4|Q,!1,s)}else if(this.type===w._class){var r=this.startNode();e.declaration=this.parseClass(r,"nullableID")}else e.declaration=this.parseMaybeAssign(),this.semicolon();return this.finishNode(e,"ExportDefaultDeclaration")}if(this.shouldParseExportStatement())e.declaration=this.parseStatement(null),"VariableDeclaration"===e.declaration.type?this.checkVariableExport(t,e.declaration.declarations):this.checkExport(t,e.declaration.id.name,e.declaration.id.start),e.specifiers=[],e.source=null;else{if(e.declaration=null,e.specifiers=this.parseExportSpecifiers(t),this.eatContextual("from"))this.type!==w.string&&this.unexpected(),e.source=this.parseExprAtom();else{for(var n=0,a=e.specifiers;n<a.length;n+=1){var o=a[n];this.checkUnreserved(o.local),this.checkLocalExport(o.local)}e.source=null}this.semicolon()}return this.finishNode(e,"ExportNamedDeclaration")},H.checkExport=function(e,t,s){e&&(T(e,t)&&this.raiseRecoverable(s,"Duplicate export '"+t+"'"),e[t]=!0)},H.checkPatternExport=function(e,t){var s=t.type;if("Identifier"===s)this.checkExport(e,t.name,t.start);else if("ObjectPattern"===s)for(var i=0,r=t.properties;i<r.length;i+=1){var n=r[i];this.checkPatternExport(e,n)}else if("ArrayPattern"===s)for(var a=0,o=t.elements;a<o.length;a+=1){var c=o[a];c&&this.checkPatternExport(e,c)}else"Property"===s?this.checkPatternExport(e,t.value):"AssignmentPattern"===s?this.checkPatternExport(e,t.left):"RestElement"===s?this.checkPatternExport(e,t.argument):"ParenthesizedExpression"===s&&this.checkPatternExport(e,t.expression)},H.checkVariableExport=function(e,t){if(e)for(var s=0,i=t;s<i.length;s+=1){var r=i[s];this.checkPatternExport(e,r.id)}},H.shouldParseExportStatement=function(){return"var"===this.type.keyword||"const"===this.type.keyword||"class"===this.type.keyword||"function"===this.type.keyword||this.isLet()||this.isAsyncFunction()},H.parseExportSpecifiers=function(e){var t=[],s=!0;for(this.expect(w.braceL);!this.eat(w.braceR);){if(s)s=!1;else if(this.expect(w.comma),this.afterTrailingComma(w.braceR))break;var i=this.startNode();i.local=this.parseIdent(!0),i.exported=this.eatContextual("as")?this.parseIdent(!0):i.local,this.checkExport(e,i.exported.name,i.exported.start),t.push(this.finishNode(i,"ExportSpecifier"))}return t},H.parseImport=function(e){return this.next(),this.type===w.string?(e.specifiers=$,e.source=this.parseExprAtom()):(e.specifiers=this.parseImportSpecifiers(),this.expectContextual("from"),e.source=this.type===w.string?this.parseExprAtom():this.unexpected()),this.semicolon(),this.finishNode(e,"ImportDeclaration")},H.parseImportSpecifiers=function(){var e=[],t=!0;if(this.type===w.name){var s=this.startNode();if(s.local=this.parseIdent(),this.checkLValSimple(s.local,2),e.push(this.finishNode(s,"ImportDefaultSpecifier")),!this.eat(w.comma))return e}if(this.type===w.star){var i=this.startNode();return this.next(),this.expectContextual("as"),i.local=this.parseIdent(),this.checkLValSimple(i.local,2),e.push(this.finishNode(i,"ImportNamespaceSpecifier")),e}for(this.expect(w.braceL);!this.eat(w.braceR);){if(t)t=!1;else if(this.expect(w.comma),this.afterTrailingComma(w.braceR))break;var r=this.startNode();r.imported=this.parseIdent(!0),this.eatContextual("as")?r.local=this.parseIdent():(this.checkUnreserved(r.imported),r.local=r.imported),this.checkLValSimple(r.local,2),e.push(this.finishNode(r,"ImportSpecifier"))}return e},H.adaptDirectivePrologue=function(e){for(var t=0;t<e.length&&this.isDirectiveCandidate(e[t]);++t)e[t].directive=e[t].expression.raw.slice(1,-1)},H.isDirectiveCandidate=function(e){return"ExpressionStatement"===e.type&&"Literal"===e.expression.type&&"string"==typeof e.expression.value&&('"'===this.input[e.start]||"'"===this.input[e.start])};var Z=F.prototype;Z.toAssignable=function(e,t,s){if(this.options.ecmaVersion>=6&&e)switch(e.type){case"Identifier":this.inAsync&&"await"===e.name&&this.raise(e.start,"Cannot use 'await' as identifier inside an async function");break;case"ObjectPattern":case"ArrayPattern":case"AssignmentPattern":case"RestElement":break;case"ObjectExpression":e.type="ObjectPattern",s&&this.checkPatternErrors(s,!0);for(var i=0,r=e.properties;i<r.length;i+=1){var n=r[i];this.toAssignable(n,t),"RestElement"!==n.type||"ArrayPattern"!==n.argument.type&&"ObjectPattern"!==n.argument.type||this.raise(n.argument.start,"Unexpected token")}break;case"Property":"init"!==e.kind&&this.raise(e.key.start,"Object pattern can't contain getter or setter"),this.toAssignable(e.value,t);break;case"ArrayExpression":e.type="ArrayPattern",s&&this.checkPatternErrors(s,!0),this.toAssignableList(e.elements,t);break;case"SpreadElement":e.type="RestElement",this.toAssignable(e.argument,t),"AssignmentPattern"===e.argument.type&&this.raise(e.argument.start,"Rest elements cannot have a default value");break;case"AssignmentExpression":"="!==e.operator&&this.raise(e.left.end,"Only '=' operator can be used for specifying default value."),e.type="AssignmentPattern",delete e.operator,this.toAssignable(e.left,t);break;case"ParenthesizedExpression":this.toAssignable(e.expression,t,s);break;case"ChainExpression":this.raiseRecoverable(e.start,"Optional chaining cannot appear in left-hand side");break;case"MemberExpression":if(!t)break;default:this.raise(e.start,"Assigning to rvalue")}else s&&this.checkPatternErrors(s,!0);return e},Z.toAssignableList=function(e,t){for(var s=e.length,i=0;i<s;i++){var r=e[i];r&&this.toAssignable(r,t)}if(s){var n=e[s-1];6===this.options.ecmaVersion&&t&&n&&"RestElement"===n.type&&"Identifier"!==n.argument.type&&this.unexpected(n.argument.start)}return e},Z.parseSpread=function(e){var t=this.startNode();return this.next(),t.argument=this.parseMaybeAssign(!1,e),this.finishNode(t,"SpreadElement")},Z.parseRestBinding=function(){var e=this.startNode();return this.next(),6===this.options.ecmaVersion&&this.type!==w.name&&this.unexpected(),e.argument=this.parseBindingAtom(),this.finishNode(e,"RestElement")},Z.parseBindingAtom=function(){if(this.options.ecmaVersion>=6)switch(this.type){case w.bracketL:var e=this.startNode();return this.next(),e.elements=this.parseBindingList(w.bracketR,!0,!0),this.finishNode(e,"ArrayPattern");case w.braceL:return this.parseObj(!0)}return this.parseIdent()},Z.parseBindingList=function(e,t,s){for(var i=[],r=!0;!this.eat(e);)if(r?r=!1:this.expect(w.comma),t&&this.type===w.comma)i.push(null);else{if(s&&this.afterTrailingComma(e))break;if(this.type===w.ellipsis){var n=this.parseRestBinding();this.parseBindingListItem(n),i.push(n),this.type===w.comma&&this.raise(this.start,"Comma is not permitted after the rest element"),this.expect(e);break}var a=this.parseMaybeDefault(this.start,this.startLoc);this.parseBindingListItem(a),i.push(a)}return i},Z.parseBindingListItem=function(e){return e},Z.parseMaybeDefault=function(e,t,s){if(s=s||this.parseBindingAtom(),this.options.ecmaVersion<6||!this.eat(w.eq))return s;var i=this.startNodeAt(e,t);return i.left=s,i.right=this.parseMaybeAssign(),this.finishNode(i,"AssignmentPattern")},Z.checkLValSimple=function(e,t,s){void 0===t&&(t=0);var i=0!==t;switch(e.type){case"Identifier":this.strict&&this.reservedWordsStrictBind.test(e.name)&&this.raiseRecoverable(e.start,(i?"Binding ":"Assigning to ")+e.name+" in strict mode"),i&&(2===t&&"let"===e.name&&this.raiseRecoverable(e.start,"let is disallowed as a lexically bound name"),s&&(T(s,e.name)&&this.raiseRecoverable(e.start,"Argument name clash"),s[e.name]=!0),5!==t&&this.declareName(e.name,t,e.start));break;case"ChainExpression":this.raiseRecoverable(e.start,"Optional chaining cannot appear in left-hand side");break;case"MemberExpression":i&&this.raiseRecoverable(e.start,"Binding member expression");break;case"ParenthesizedExpression":return i&&this.raiseRecoverable(e.start,"Binding parenthesized expression"),this.checkLValSimple(e.expression,t,s);default:this.raise(e.start,(i?"Binding":"Assigning to")+" rvalue")}},Z.checkLValPattern=function(e,t,s){switch(void 0===t&&(t=0),e.type){case"ObjectPattern":for(var i=0,r=e.properties;i<r.length;i+=1){var n=r[i];this.checkLValInnerPattern(n,t,s)}break;case"ArrayPattern":for(var a=0,o=e.elements;a<o.length;a+=1){var c=o[a];c&&this.checkLValInnerPattern(c,t,s)}break;default:this.checkLValSimple(e,t,s)}},Z.checkLValInnerPattern=function(e,t,s){switch(void 0===t&&(t=0),e.type){case"Property":this.checkLValInnerPattern(e.value,t,s);break;case"AssignmentPattern":this.checkLValPattern(e.left,t,s);break;case"RestElement":this.checkLValPattern(e.argument,t,s);break;default:this.checkLValPattern(e,t,s)}};var J=F.prototype;function ee(e){return"MemberExpression"===e.type&&"PrivateIdentifier"===e.property.type||"ChainExpression"===e.type&&ee(e.expression)}J.checkPropClash=function(e,t,s){if(!(this.options.ecmaVersion>=9&&"SpreadElement"===e.type||this.options.ecmaVersion>=6&&(e.computed||e.method||e.shorthand))){var i,r=e.key;switch(r.type){case"Identifier":i=r.name;break;case"Literal":i=String(r.value);break;default:return}var n=e.kind;if(this.options.ecmaVersion>=6)"__proto__"===i&&"init"===n&&(t.proto&&(s?s.doubleProto<0&&(s.doubleProto=r.start):this.raiseRecoverable(r.start,"Redefinition of __proto__ property")),t.proto=!0);else{var a=t[i="$"+i];a?("init"===n?this.strict&&a.init||a.get||a.set:a.init||a[n])&&this.raiseRecoverable(r.start,"Redefinition of property"):a=t[i]={init:!1,get:!1,set:!1},a[n]=!0}}},J.parseExpression=function(e,t){var s=this.start,i=this.startLoc,r=this.parseMaybeAssign(e,t);if(this.type===w.comma){var n=this.startNodeAt(s,i);for(n.expressions=[r];this.eat(w.comma);)n.expressions.push(this.parseMaybeAssign(e,t));return this.finishNode(n,"SequenceExpression")}return r},J.parseMaybeAssign=function(e,t,s){if(this.isContextual("yield")){if(this.inGenerator)return this.parseYield(e);this.exprAllowed=!1}var i=!1,r=-1,n=-1;t?(r=t.parenthesizedAssign,n=t.trailingComma,t.parenthesizedAssign=t.trailingComma=-1):(t=new z,i=!0);var a=this.start,o=this.startLoc;this.type!==w.parenL&&this.type!==w.name||(this.potentialArrowAt=this.start,this.potentialArrowInForAwait="await"===e);var c=this.parseMaybeConditional(e,t);if(s&&(c=s.call(this,c,a,o)),this.type.isAssign){var p=this.startNodeAt(a,o);return p.operator=this.value,this.type===w.eq&&(c=this.toAssignable(c,!1,t)),i||(t.parenthesizedAssign=t.trailingComma=t.doubleProto=-1),t.shorthandAssign>=c.start&&(t.shorthandAssign=-1),this.type===w.eq?this.checkLValPattern(c):this.checkLValSimple(c),p.left=c,this.next(),p.right=this.parseMaybeAssign(e),this.finishNode(p,"AssignmentExpression")}return i&&this.checkExpressionErrors(t,!0),r>-1&&(t.parenthesizedAssign=r),n>-1&&(t.trailingComma=n),c},J.parseMaybeConditional=function(e,t){var s=this.start,i=this.startLoc,r=this.parseExprOps(e,t);if(this.checkExpressionErrors(t))return r;if(this.eat(w.question)){var n=this.startNodeAt(s,i);return n.test=r,n.consequent=this.parseMaybeAssign(),this.expect(w.colon),n.alternate=this.parseMaybeAssign(e),this.finishNode(n,"ConditionalExpression")}return r},J.parseExprOps=function(e,t){var s=this.start,i=this.startLoc,r=this.parseMaybeUnary(t,!1);return this.checkExpressionErrors(t)||r.start===s&&"ArrowFunctionExpression"===r.type?r:this.parseExprOp(r,s,i,-1,e)},J.parseExprOp=function(e,t,s,i,r){var n=this.type.binop;if(null!=n&&(!r||this.type!==w._in)&&n>i){var a=this.type===w.logicalOR||this.type===w.logicalAND,o=this.type===w.coalesce;o&&(n=w.logicalAND.binop);var c=this.value;this.next();var p=this.start,h=this.startLoc,l=this.parseExprOp(this.parseMaybeUnary(null,!1),p,h,n,r),u=this.buildBinary(t,s,e,l,c,a||o);return(a&&this.type===w.coalesce||o&&(this.type===w.logicalOR||this.type===w.logicalAND))&&this.raiseRecoverable(this.start,"Logical expressions and coalesce expressions cannot be mixed. Wrap either by parentheses"),this.parseExprOp(u,t,s,i,r)}return e},J.buildBinary=function(e,t,s,i,r,n){var a=this.startNodeAt(e,t);return a.left=s,a.operator=r,a.right=i,this.finishNode(a,n?"LogicalExpression":"BinaryExpression")},J.parseMaybeUnary=function(e,t,s){var i,r=this.start,n=this.startLoc;if(this.isContextual("await")&&(this.inAsync||!this.inFunction&&this.options.allowAwaitOutsideFunction))i=this.parseAwait(),t=!0;else if(this.type.prefix){var a=this.startNode(),o=this.type===w.incDec;a.operator=this.value,a.prefix=!0,this.next(),a.argument=this.parseMaybeUnary(null,!0,o),this.checkExpressionErrors(e,!0),o?this.checkLValSimple(a.argument):this.strict&&"delete"===a.operator&&"Identifier"===a.argument.type?this.raiseRecoverable(a.start,"Deleting local variable in strict mode"):"delete"===a.operator&&ee(a.argument)?this.raiseRecoverable(a.start,"Private fields can not be deleted"):t=!0,i=this.finishNode(a,o?"UpdateExpression":"UnaryExpression")}else{if(i=this.parseExprSubscripts(e),this.checkExpressionErrors(e))return i;for(;this.type.postfix&&!this.canInsertSemicolon();){var c=this.startNodeAt(r,n);c.operator=this.value,c.prefix=!1,c.argument=i,this.checkLValSimple(i),this.next(),i=this.finishNode(c,"UpdateExpression")}}return s||!this.eat(w.starstar)?i:t?void this.unexpected(this.lastTokStart):this.buildBinary(r,n,i,this.parseMaybeUnary(null,!1),"**",!1)},J.parseExprSubscripts=function(e){var t=this.start,s=this.startLoc,i=this.parseExprAtom(e);if("ArrowFunctionExpression"===i.type&&")"!==this.input.slice(this.lastTokStart,this.lastTokEnd))return i;var r=this.parseSubscripts(i,t,s);return e&&"MemberExpression"===r.type&&(e.parenthesizedAssign>=r.start&&(e.parenthesizedAssign=-1),e.parenthesizedBind>=r.start&&(e.parenthesizedBind=-1),e.trailingComma>=r.start&&(e.trailingComma=-1)),r},J.parseSubscripts=function(e,t,s,i){for(var r=this.options.ecmaVersion>=8&&"Identifier"===e.type&&"async"===e.name&&this.lastTokEnd===e.end&&!this.canInsertSemicolon()&&e.end-e.start==5&&this.potentialArrowAt===e.start,n=!1;;){var a=this.parseSubscript(e,t,s,i,r,n);if(a.optional&&(n=!0),a===e||"ArrowFunctionExpression"===a.type){if(n){var o=this.startNodeAt(t,s);o.expression=a,a=this.finishNode(o,"ChainExpression")}return a}e=a}},J.parseSubscript=function(e,t,s,i,r,n){var a=this.options.ecmaVersion>=11,o=a&&this.eat(w.questionDot);i&&o&&this.raise(this.lastTokStart,"Optional chaining cannot appear in the callee of new expressions");var c=this.eat(w.bracketL);if(c||o&&this.type!==w.parenL&&this.type!==w.backQuote||this.eat(w.dot)){var p=this.startNodeAt(t,s);p.object=e,c?(p.property=this.parseExpression(),this.expect(w.bracketR)):this.type===w.privateId&&"Super"!==e.type?p.property=this.parsePrivateIdent():p.property=this.parseIdent("never"!==this.options.allowReserved),p.computed=!!c,a&&(p.optional=o),e=this.finishNode(p,"MemberExpression")}else if(!i&&this.eat(w.parenL)){var h=new z,l=this.yieldPos,u=this.awaitPos,d=this.awaitIdentPos;this.yieldPos=0,this.awaitPos=0,this.awaitIdentPos=0;var f=this.parseExprList(w.parenR,this.options.ecmaVersion>=8,!1,h);if(r&&!o&&!this.canInsertSemicolon()&&this.eat(w.arrow))return this.checkPatternErrors(h,!1),this.checkYieldAwaitInDefaultParams(),this.awaitIdentPos>0&&this.raise(this.awaitIdentPos,"Cannot use 'await' as identifier inside an async function"),this.yieldPos=l,this.awaitPos=u,this.awaitIdentPos=d,this.parseArrowExpression(this.startNodeAt(t,s),f,!0);this.checkExpressionErrors(h,!0),this.yieldPos=l||this.yieldPos,this.awaitPos=u||this.awaitPos,this.awaitIdentPos=d||this.awaitIdentPos;var x=this.startNodeAt(t,s);x.callee=e,x.arguments=f,a&&(x.optional=o),e=this.finishNode(x,"CallExpression")}else if(this.type===w.backQuote){(o||n)&&this.raise(this.start,"Optional chaining cannot appear in the tag of tagged template expressions");var m=this.startNodeAt(t,s);m.tag=e,m.quasi=this.parseTemplate({isTagged:!0}),e=this.finishNode(m,"TaggedTemplateExpression")}return e},J.parseExprAtom=function(e){this.type===w.slash&&this.readRegexp();var t,s=this.potentialArrowAt===this.start;switch(this.type){case w._super:return this.allowSuper||this.raise(this.start,"'super' keyword outside a method"),t=this.startNode(),this.next(),this.type!==w.parenL||this.allowDirectSuper||this.raise(t.start,"super() call outside constructor of a subclass"),this.type!==w.dot&&this.type!==w.bracketL&&this.type!==w.parenL&&this.unexpected(),this.finishNode(t,"Super");case w._this:return t=this.startNode(),this.next(),this.finishNode(t,"ThisExpression");case w.name:var i=this.start,r=this.startLoc,n=this.containsEsc,a=this.parseIdent(!1);if(this.options.ecmaVersion>=8&&!n&&"async"===a.name&&!this.canInsertSemicolon()&&this.eat(w._function))return this.parseFunction(this.startNodeAt(i,r),0,!1,!0);if(s&&!this.canInsertSemicolon()){if(this.eat(w.arrow))return this.parseArrowExpression(this.startNodeAt(i,r),[a],!1);if(this.options.ecmaVersion>=8&&"async"===a.name&&this.type===w.name&&!n&&(!this.potentialArrowInForAwait||"of"!==this.value||this.containsEsc))return a=this.parseIdent(!1),!this.canInsertSemicolon()&&this.eat(w.arrow)||this.unexpected(),this.parseArrowExpression(this.startNodeAt(i,r),[a],!0)}return a;case w.regexp:var o=this.value;return(t=this.parseLiteral(o.value)).regex={pattern:o.pattern,flags:o.flags},t;case w.num:case w.string:return this.parseLiteral(this.value);case w._null:case w._true:case w._false:return(t=this.startNode()).value=this.type===w._null?null:this.type===w._true,t.raw=this.type.keyword,this.next(),this.finishNode(t,"Literal");case w.parenL:var c=this.start,p=this.parseParenAndDistinguishExpression(s);return e&&(e.parenthesizedAssign<0&&!this.isSimpleAssignTarget(p)&&(e.parenthesizedAssign=c),e.parenthesizedBind<0&&(e.parenthesizedBind=c)),p;case w.bracketL:return t=this.startNode(),this.next(),t.elements=this.parseExprList(w.bracketR,!0,!0,e),this.finishNode(t,"ArrayExpression");case w.braceL:return this.parseObj(!1,e);case w._function:return t=this.startNode(),this.next(),this.parseFunction(t,0);case w._class:return this.parseClass(this.startNode(),!1);case w._new:return this.parseNew();case w.backQuote:return this.parseTemplate();case w._import:return this.options.ecmaVersion>=11?this.parseExprImport():this.unexpected();default:this.unexpected()}},J.parseExprImport=function(){var e=this.startNode();this.containsEsc&&this.raiseRecoverable(this.start,"Escape sequence in keyword import");var t=this.parseIdent(!0);switch(this.type){case w.parenL:return this.parseDynamicImport(e);case w.dot:return e.meta=t,this.parseImportMeta(e);default:this.unexpected()}},J.parseDynamicImport=function(e){if(this.next(),e.source=this.parseMaybeAssign(),!this.eat(w.parenR)){var t=this.start;this.eat(w.comma)&&this.eat(w.parenR)?this.raiseRecoverable(t,"Trailing comma is not allowed in import()"):this.unexpected(t)}return this.finishNode(e,"ImportExpression")},J.parseImportMeta=function(e){this.next();var t=this.containsEsc;return e.property=this.parseIdent(!0),"meta"!==e.property.name&&this.raiseRecoverable(e.property.start,"The only valid meta property for import is 'import.meta'"),t&&this.raiseRecoverable(e.start,"'import.meta' must not contain escaped characters"),"module"===this.options.sourceType||this.options.allowImportExportEverywhere||this.raiseRecoverable(e.start,"Cannot use 'import.meta' outside a module"),this.finishNode(e,"MetaProperty")},J.parseLiteral=function(e){var t=this.startNode();return t.value=e,t.raw=this.input.slice(this.start,this.end),110===t.raw.charCodeAt(t.raw.length-1)&&(t.bigint=t.raw.slice(0,-1).replace(/_/g,"")),this.next(),this.finishNode(t,"Literal")},J.parseParenExpression=function(){this.expect(w.parenL);var e=this.parseExpression();return this.expect(w.parenR),e},J.parseParenAndDistinguishExpression=function(e){var t,s=this.start,i=this.startLoc,r=this.options.ecmaVersion>=8;if(this.options.ecmaVersion>=6){this.next();var n,a=this.start,o=this.startLoc,c=[],p=!0,h=!1,l=new z,u=this.yieldPos,d=this.awaitPos;for(this.yieldPos=0,this.awaitPos=0;this.type!==w.parenR;){if(p?p=!1:this.expect(w.comma),r&&this.afterTrailingComma(w.parenR,!0)){h=!0;break}if(this.type===w.ellipsis){n=this.start,c.push(this.parseParenItem(this.parseRestBinding())),this.type===w.comma&&this.raise(this.start,"Comma is not permitted after the rest element");break}c.push(this.parseMaybeAssign(!1,l,this.parseParenItem))}var f=this.start,x=this.startLoc;if(this.expect(w.parenR),e&&!this.canInsertSemicolon()&&this.eat(w.arrow))return this.checkPatternErrors(l,!1),this.checkYieldAwaitInDefaultParams(),this.yieldPos=u,this.awaitPos=d,this.parseParenArrowList(s,i,c);c.length&&!h||this.unexpected(this.lastTokStart),n&&this.unexpected(n),this.checkExpressionErrors(l,!0),this.yieldPos=u||this.yieldPos,this.awaitPos=d||this.awaitPos,c.length>1?((t=this.startNodeAt(a,o)).expressions=c,this.finishNodeAt(t,"SequenceExpression",f,x)):t=c[0]}else t=this.parseParenExpression();if(this.options.preserveParens){var m=this.startNodeAt(s,i);return m.expression=t,this.finishNode(m,"ParenthesizedExpression")}return t},J.parseParenItem=function(e){return e},J.parseParenArrowList=function(e,t,s){return this.parseArrowExpression(this.startNodeAt(e,t),s)};var te=[];J.parseNew=function(){this.containsEsc&&this.raiseRecoverable(this.start,"Escape sequence in keyword new");var e=this.startNode(),t=this.parseIdent(!0);if(this.options.ecmaVersion>=6&&this.eat(w.dot)){e.meta=t;var s=this.containsEsc;return e.property=this.parseIdent(!0),"target"!==e.property.name&&this.raiseRecoverable(e.property.start,"The only valid meta property for new is 'new.target'"),s&&this.raiseRecoverable(e.start,"'new.target' must not contain escaped characters"),this.inNonArrowFunction||this.raiseRecoverable(e.start,"'new.target' can only be used in functions"),this.finishNode(e,"MetaProperty")}var i=this.start,r=this.startLoc,n=this.type===w._import;return e.callee=this.parseSubscripts(this.parseExprAtom(),i,r,!0),n&&"ImportExpression"===e.callee.type&&this.raise(i,"Cannot use new with import()"),this.eat(w.parenL)?e.arguments=this.parseExprList(w.parenR,this.options.ecmaVersion>=8,!1):e.arguments=te,this.finishNode(e,"NewExpression")},J.parseTemplateElement=function(e){var t=e.isTagged,s=this.startNode();return this.type===w.invalidTemplate?(t||this.raiseRecoverable(this.start,"Bad escape sequence in untagged template literal"),s.value={raw:this.value,cooked:null}):s.value={raw:this.input.slice(this.start,this.end).replace(/\r\n?/g,"\n"),cooked:this.value},this.next(),s.tail=this.type===w.backQuote,this.finishNode(s,"TemplateElement")},J.parseTemplate=function(e){void 0===e&&(e={});var t=e.isTagged;void 0===t&&(t=!1);var s=this.startNode();this.next(),s.expressions=[];var i=this.parseTemplateElement({isTagged:t});for(s.quasis=[i];!i.tail;)this.type===w.eof&&this.raise(this.pos,"Unterminated template literal"),this.expect(w.dollarBraceL),s.expressions.push(this.parseExpression()),this.expect(w.braceR),s.quasis.push(i=this.parseTemplateElement({isTagged:t}));return this.next(),this.finishNode(s,"TemplateLiteral")},J.isAsyncProp=function(e){return!e.computed&&"Identifier"===e.key.type&&"async"===e.key.name&&(this.type===w.name||this.type===w.num||this.type===w.string||this.type===w.bracketL||this.type.keyword||this.options.ecmaVersion>=9&&this.type===w.star)&&!v.test(this.input.slice(this.lastTokEnd,this.start))},J.parseObj=function(e,t){var s=this.startNode(),i=!0,r={};for(s.properties=[],this.next();!this.eat(w.braceR);){if(i)i=!1;else if(this.expect(w.comma),this.options.ecmaVersion>=5&&this.afterTrailingComma(w.braceR))break;var n=this.parseProperty(e,t);e||this.checkPropClash(n,r,t),s.properties.push(n)}return this.finishNode(s,e?"ObjectPattern":"ObjectExpression")},J.parseProperty=function(e,t){var s,i,r,n,a=this.startNode();if(this.options.ecmaVersion>=9&&this.eat(w.ellipsis))return e?(a.argument=this.parseIdent(!1),this.type===w.comma&&this.raise(this.start,"Comma is not permitted after the rest element"),this.finishNode(a,"RestElement")):(this.type===w.parenL&&t&&(t.parenthesizedAssign<0&&(t.parenthesizedAssign=this.start),t.parenthesizedBind<0&&(t.parenthesizedBind=this.start)),a.argument=this.parseMaybeAssign(!1,t),this.type===w.comma&&t&&t.trailingComma<0&&(t.trailingComma=this.start),this.finishNode(a,"SpreadElement"));this.options.ecmaVersion>=6&&(a.method=!1,a.shorthand=!1,(e||t)&&(r=this.start,n=this.startLoc),e||(s=this.eat(w.star)));var o=this.containsEsc;return this.parsePropertyName(a),!e&&!o&&this.options.ecmaVersion>=8&&!s&&this.isAsyncProp(a)?(i=!0,s=this.options.ecmaVersion>=9&&this.eat(w.star),this.parsePropertyName(a,t)):i=!1,this.parsePropertyValue(a,e,s,i,r,n,t,o),this.finishNode(a,"Property")},J.parsePropertyValue=function(e,t,s,i,r,n,a,o){if((s||i)&&this.type===w.colon&&this.unexpected(),this.eat(w.colon))e.value=t?this.parseMaybeDefault(this.start,this.startLoc):this.parseMaybeAssign(!1,a),e.kind="init";else if(this.options.ecmaVersion>=6&&this.type===w.parenL)t&&this.unexpected(),e.kind="init",e.method=!0,e.value=this.parseMethod(s,i);else if(t||o||!(this.options.ecmaVersion>=5)||e.computed||"Identifier"!==e.key.type||"get"!==e.key.name&&"set"!==e.key.name||this.type===w.comma||this.type===w.braceR||this.type===w.eq)this.options.ecmaVersion>=6&&!e.computed&&"Identifier"===e.key.type?((s||i)&&this.unexpected(),this.checkUnreserved(e.key),"await"!==e.key.name||this.awaitIdentPos||(this.awaitIdentPos=r),e.kind="init",t?e.value=this.parseMaybeDefault(r,n,this.copyNode(e.key)):this.type===w.eq&&a?(a.shorthandAssign<0&&(a.shorthandAssign=this.start),e.value=this.parseMaybeDefault(r,n,this.copyNode(e.key))):e.value=this.copyNode(e.key),e.shorthand=!0):this.unexpected();else{(s||i)&&this.unexpected(),e.kind=e.key.name,this.parsePropertyName(e),e.value=this.parseMethod(!1);var c="get"===e.kind?0:1;if(e.value.params.length!==c){var p=e.value.start;"get"===e.kind?this.raiseRecoverable(p,"getter should have no params"):this.raiseRecoverable(p,"setter should have exactly one param")}else"set"===e.kind&&"RestElement"===e.value.params[0].type&&this.raiseRecoverable(e.value.params[0].start,"Setter cannot use rest params")}},J.parsePropertyName=function(e){if(this.options.ecmaVersion>=6){if(this.eat(w.bracketL))return e.computed=!0,e.key=this.parseMaybeAssign(),this.expect(w.bracketR),e.key;e.computed=!1}return e.key=this.type===w.num||this.type===w.string?this.parseExprAtom():this.parseIdent("never"!==this.options.allowReserved)},J.initFunction=function(e){e.id=null,this.options.ecmaVersion>=6&&(e.generator=e.expression=!1),this.options.ecmaVersion>=8&&(e.async=!1)},J.parseMethod=function(e,t,s){var i=this.startNode(),r=this.yieldPos,n=this.awaitPos,a=this.awaitIdentPos;return this.initFunction(i),this.options.ecmaVersion>=6&&(i.generator=e),this.options.ecmaVersion>=8&&(i.async=!!t),this.yieldPos=0,this.awaitPos=0,this.awaitIdentPos=0,this.enterScope(64|M(t,i.generator)|(s?128:0)),this.expect(w.parenL),i.params=this.parseBindingList(w.parenR,!1,this.options.ecmaVersion>=8),this.checkYieldAwaitInDefaultParams(),this.parseFunctionBody(i,!1,!0),this.yieldPos=r,this.awaitPos=n,this.awaitIdentPos=a,this.finishNode(i,"FunctionExpression")},J.parseArrowExpression=function(e,t,s){var i=this.yieldPos,r=this.awaitPos,n=this.awaitIdentPos;return this.enterScope(16|M(s,!1)),this.initFunction(e),this.options.ecmaVersion>=8&&(e.async=!!s),this.yieldPos=0,this.awaitPos=0,this.awaitIdentPos=0,e.params=this.toAssignableList(t,!0),this.parseFunctionBody(e,!0,!1),this.yieldPos=i,this.awaitPos=r,this.awaitIdentPos=n,this.finishNode(e,"ArrowFunctionExpression")},J.parseFunctionBody=function(e,t,s){var i=t&&this.type!==w.braceL,r=this.strict,n=!1;if(i)e.body=this.parseMaybeAssign(),e.expression=!0,this.checkParams(e,!1);else{var a=this.options.ecmaVersion>=7&&!this.isSimpleParamList(e.params);r&&!a||(n=this.strictDirective(this.end))&&a&&this.raiseRecoverable(e.start,"Illegal 'use strict' directive in function with non-simple parameter list");var o=this.labels;this.labels=[],n&&(this.strict=!0),this.checkParams(e,!r&&!n&&!t&&!s&&this.isSimpleParamList(e.params)),this.strict&&e.id&&this.checkLValSimple(e.id,5),e.body=this.parseBlock(!1,void 0,n&&!r),e.expression=!1,this.adaptDirectivePrologue(e.body.body),this.labels=o}this.exitScope()},J.isSimpleParamList=function(e){for(var t=0,s=e;t<s.length;t+=1)if("Identifier"!==s[t].type)return!1;return!0},J.checkParams=function(e,t){for(var s=Object.create(null),i=0,r=e.params;i<r.length;i+=1){var n=r[i];this.checkLValInnerPattern(n,1,t?null:s)}},J.parseExprList=function(e,t,s,i){for(var r=[],n=!0;!this.eat(e);){if(n)n=!1;else if(this.expect(w.comma),t&&this.afterTrailingComma(e))break;var a=void 0;s&&this.type===w.comma?a=null:this.type===w.ellipsis?(a=this.parseSpread(i),i&&this.type===w.comma&&i.trailingComma<0&&(i.trailingComma=this.start)):a=this.parseMaybeAssign(!1,i),r.push(a)}return r},J.checkUnreserved=function(e){var t=e.start,s=e.end,i=e.name;this.inGenerator&&"yield"===i&&this.raiseRecoverable(t,"Cannot use 'yield' as identifier inside a generator"),this.inAsync&&"await"===i&&this.raiseRecoverable(t,"Cannot use 'await' as identifier inside an async function"),this.currentThisScope().inClassFieldInit&&"arguments"===i&&this.raiseRecoverable(t,"Cannot use 'arguments' in class field initializer"),this.keywords.test(i)&&this.raise(t,"Unexpected keyword '"+i+"'"),this.options.ecmaVersion<6&&-1!==this.input.slice(t,s).indexOf("\\")||(this.strict?this.reservedWordsStrict:this.reservedWords).test(i)&&(this.inAsync||"await"!==i||this.raiseRecoverable(t,"Cannot use keyword 'await' outside an async function"),this.raiseRecoverable(t,"The keyword '"+i+"' is reserved"))},J.parseIdent=function(e,t){var s=this.startNode();return this.type===w.name?s.name=this.value:this.type.keyword?(s.name=this.type.keyword,"class"!==s.name&&"function"!==s.name||this.lastTokEnd===this.lastTokStart+1&&46===this.input.charCodeAt(this.lastTokStart)||this.context.pop()):this.unexpected(),this.next(!!e),this.finishNode(s,"Identifier"),e||(this.checkUnreserved(s),"await"!==s.name||this.awaitIdentPos||(this.awaitIdentPos=s.start)),s},J.parsePrivateIdent=function(){var e=this.startNode();return this.type===w.privateId?e.name=this.value:this.unexpected(),this.next(),this.finishNode(e,"PrivateIdentifier"),0===this.privateNameStack.length?this.raise(e.start,"Private field '#"+e.name+"' must be declared in an enclosing class"):this.privateNameStack[this.privateNameStack.length-1].used.push(e),e},J.parseYield=function(e){this.yieldPos||(this.yieldPos=this.start);var t=this.startNode();return this.next(),this.type===w.semi||this.canInsertSemicolon()||this.type!==w.star&&!this.type.startsExpr?(t.delegate=!1,t.argument=null):(t.delegate=this.eat(w.star),t.argument=this.parseMaybeAssign(e)),this.finishNode(t,"YieldExpression")},J.parseAwait=function(){this.awaitPos||(this.awaitPos=this.start);var e=this.startNode();return this.next(),e.argument=this.parseMaybeUnary(null,!0),this.finishNode(e,"AwaitExpression")};var se=F.prototype;se.raise=function(e,t){var s=V(this.input,e);t+=" ("+s.line+":"+s.column+")";var i=new SyntaxError(t);throw i.pos=e,i.loc=s,i.raisedAt=this.pos,i},se.raiseRecoverable=se.raise,se.curPosition=function(){if(this.options.locations)return new O(this.curLine,this.pos-this.lineStart)};var ie=F.prototype,re=function(e){this.flags=e,this.var=[],this.lexical=[],this.functions=[],this.inClassFieldInit=!1};ie.enterScope=function(e){this.scopeStack.push(new re(e))},ie.exitScope=function(){this.scopeStack.pop()},ie.treatFunctionsAsVarInScope=function(e){return 2&e.flags||!this.inModule&&1&e.flags},ie.declareName=function(e,t,s){var i=!1;if(2===t){var r=this.currentScope();i=r.lexical.indexOf(e)>-1||r.functions.indexOf(e)>-1||r.var.indexOf(e)>-1,r.lexical.push(e),this.inModule&&1&r.flags&&delete this.undefinedExports[e]}else if(4===t)this.currentScope().lexical.push(e);else if(3===t){var n=this.currentScope();i=this.treatFunctionsAsVar?n.lexical.indexOf(e)>-1:n.lexical.indexOf(e)>-1||n.var.indexOf(e)>-1,n.functions.push(e)}else for(var a=this.scopeStack.length-1;a>=0;--a){var o=this.scopeStack[a];if(o.lexical.indexOf(e)>-1&&!(32&o.flags&&o.lexical[0]===e)||!this.treatFunctionsAsVarInScope(o)&&o.functions.indexOf(e)>-1){i=!0;break}if(o.var.push(e),this.inModule&&1&o.flags&&delete this.undefinedExports[e],3&o.flags)break}i&&this.raiseRecoverable(s,"Identifier '"+e+"' has already been declared")},ie.checkLocalExport=function(e){-1===this.scopeStack[0].lexical.indexOf(e.name)&&-1===this.scopeStack[0].var.indexOf(e.name)&&(this.undefinedExports[e.name]=e)},ie.currentScope=function(){return this.scopeStack[this.scopeStack.length-1]},ie.currentVarScope=function(){for(var e=this.scopeStack.length-1;;e--){var t=this.scopeStack[e];if(3&t.flags)return t}},ie.currentThisScope=function(){for(var e=this.scopeStack.length-1;;e--){var t=this.scopeStack[e];if(3&t.flags&&!(16&t.flags))return t}};var ne=function(e,t,s){this.type="",this.start=t,this.end=0,e.options.locations&&(this.loc=new N(e,s)),e.options.directSourceFile&&(this.sourceFile=e.options.directSourceFile),e.options.ranges&&(this.range=[t,0])},ae=F.prototype;function oe(e,t,s,i){return e.type=t,e.end=s,this.options.locations&&(e.loc.end=i),this.options.ranges&&(e.range[1]=s),e}ae.startNode=function(){return new ne(this,this.start,this.startLoc)},ae.startNodeAt=function(e,t){return new ne(this,e,t)},ae.finishNode=function(e,t){return oe.call(this,e,t,this.lastTokEnd,this.lastTokEndLoc)},ae.finishNodeAt=function(e,t,s,i){return oe.call(this,e,t,s,i)},ae.copyNode=function(e){var t=new ne(this,e.start,this.startLoc);for(var s in e)t[s]=e[s];return t};var ce=function(e,t,s,i,r){this.token=e,this.isExpr=!!t,this.preserveSpace=!!s,this.override=i,this.generator=!!r},pe={b_stat:new ce("{",!1),b_expr:new ce("{",!0),b_tmpl:new ce("${",!1),p_stat:new ce("(",!1),p_expr:new ce("(",!0),q_tmpl:new ce("`",!0,!0,(function(e){return e.tryReadTemplateToken()})),f_stat:new ce("function",!1),f_expr:new ce("function",!0),f_expr_gen:new ce("function",!0,!1,null,!0),f_gen:new ce("function",!1,!1,null,!0)},he=F.prototype;he.initialContext=function(){return[pe.b_stat]},he.braceIsBlock=function(e){var t=this.curContext();return t===pe.f_expr||t===pe.f_stat||(e!==w.colon||t!==pe.b_stat&&t!==pe.b_expr?e===w._return||e===w.name&&this.exprAllowed?v.test(this.input.slice(this.lastTokEnd,this.start)):e===w._else||e===w.semi||e===w.eof||e===w.parenR||e===w.arrow||(e===w.braceL?t===pe.b_stat:e!==w._var&&e!==w._const&&e!==w.name&&!this.exprAllowed):!t.isExpr)},he.inGeneratorContext=function(){for(var e=this.context.length-1;e>=1;e--){var t=this.context[e];if("function"===t.token)return t.generator}return!1},he.updateContext=function(e){var t,s=this.type;s.keyword&&e===w.dot?this.exprAllowed=!1:(t=s.updateContext)?t.call(this,e):this.exprAllowed=s.beforeExpr},w.parenR.updateContext=w.braceR.updateContext=function(){if(1!==this.context.length){var e=this.context.pop();e===pe.b_stat&&"function"===this.curContext().token&&(e=this.context.pop()),this.exprAllowed=!e.isExpr}else this.exprAllowed=!0},w.braceL.updateContext=function(e){this.context.push(this.braceIsBlock(e)?pe.b_stat:pe.b_expr),this.exprAllowed=!0},w.dollarBraceL.updateContext=function(){this.context.push(pe.b_tmpl),this.exprAllowed=!0},w.parenL.updateContext=function(e){var t=e===w._if||e===w._for||e===w._with||e===w._while;this.context.push(t?pe.p_stat:pe.p_expr),this.exprAllowed=!0},w.incDec.updateContext=function(){},w._function.updateContext=w._class.updateContext=function(e){!e.beforeExpr||e===w._else||e===w.semi&&this.curContext()!==pe.p_stat||e===w._return&&v.test(this.input.slice(this.lastTokEnd,this.start))||(e===w.colon||e===w.braceL)&&this.curContext()===pe.b_stat?this.context.push(pe.f_stat):this.context.push(pe.f_expr),this.exprAllowed=!1},w.backQuote.updateContext=function(){this.curContext()===pe.q_tmpl?this.context.pop():this.context.push(pe.q_tmpl),this.exprAllowed=!1},w.star.updateContext=function(e){if(e===w._function){var t=this.context.length-1;this.context[t]===pe.f_expr?this.context[t]=pe.f_expr_gen:this.context[t]=pe.f_gen}this.exprAllowed=!0},w.name.updateContext=function(e){var t=!1;this.options.ecmaVersion>=6&&e!==w.dot&&("of"===this.value&&!this.exprAllowed||"yield"===this.value&&this.inGeneratorContext())&&(t=!0),this.exprAllowed=t};var le="ASCII ASCII_Hex_Digit AHex Alphabetic Alpha Any Assigned Bidi_Control Bidi_C Bidi_Mirrored Bidi_M Case_Ignorable CI Cased Changes_When_Casefolded CWCF Changes_When_Casemapped CWCM Changes_When_Lowercased CWL Changes_When_NFKC_Casefolded CWKCF Changes_When_Titlecased CWT Changes_When_Uppercased CWU Dash Default_Ignorable_Code_Point DI Deprecated Dep Diacritic Dia Emoji Emoji_Component Emoji_Modifier Emoji_Modifier_Base Emoji_Presentation Extender Ext Grapheme_Base Gr_Base Grapheme_Extend Gr_Ext Hex_Digit Hex IDS_Binary_Operator IDSB IDS_Trinary_Operator IDST ID_Continue IDC ID_Start IDS Ideographic Ideo Join_Control Join_C Logical_Order_Exception LOE Lowercase Lower Math Noncharacter_Code_Point NChar Pattern_Syntax Pat_Syn Pattern_White_Space Pat_WS Quotation_Mark QMark Radical Regional_Indicator RI Sentence_Terminal STerm Soft_Dotted SD Terminal_Punctuation Term Unified_Ideograph UIdeo Uppercase Upper Variation_Selector VS White_Space space XID_Continue XIDC XID_Start XIDS",ue=le+" Extended_Pictographic",de={9:le,10:ue,11:ue,12:ue+" EBase EComp EMod EPres ExtPict"},fe="Cased_Letter LC Close_Punctuation Pe Connector_Punctuation Pc Control Cc cntrl Currency_Symbol Sc Dash_Punctuation Pd Decimal_Number Nd digit Enclosing_Mark Me Final_Punctuation Pf Format Cf Initial_Punctuation Pi Letter L Letter_Number Nl Line_Separator Zl Lowercase_Letter Ll Mark M Combining_Mark Math_Symbol Sm Modifier_Letter Lm Modifier_Symbol Sk Nonspacing_Mark Mn Number N Open_Punctuation Ps Other C Other_Letter Lo Other_Number No Other_Punctuation Po Other_Symbol So Paragraph_Separator Zp Private_Use Co Punctuation P punct Separator Z Space_Separator Zs Spacing_Mark Mc Surrogate Cs Symbol S Titlecase_Letter Lt Unassigned Cn Uppercase_Letter Lu",xe="Adlam Adlm Ahom Ahom Anatolian_Hieroglyphs Hluw Arabic Arab Armenian Armn Avestan Avst Balinese Bali Bamum Bamu Bassa_Vah Bass Batak Batk Bengali Beng Bhaiksuki Bhks Bopomofo Bopo Brahmi Brah Braille Brai Buginese Bugi Buhid Buhd Canadian_Aboriginal Cans Carian Cari Caucasian_Albanian Aghb Chakma Cakm Cham Cham Cherokee Cher Common Zyyy Coptic Copt Qaac Cuneiform Xsux Cypriot Cprt Cyrillic Cyrl Deseret Dsrt Devanagari Deva Duployan Dupl Egyptian_Hieroglyphs Egyp Elbasan Elba Ethiopic Ethi Georgian Geor Glagolitic Glag Gothic Goth Grantha Gran Greek Grek Gujarati Gujr Gurmukhi Guru Han Hani Hangul Hang Hanunoo Hano Hatran Hatr Hebrew Hebr Hiragana Hira Imperial_Aramaic Armi Inherited Zinh Qaai Inscriptional_Pahlavi Phli Inscriptional_Parthian Prti Javanese Java Kaithi Kthi Kannada Knda Katakana Kana Kayah_Li Kali Kharoshthi Khar Khmer Khmr Khojki Khoj Khudawadi Sind Lao Laoo Latin Latn Lepcha Lepc Limbu Limb Linear_A Lina Linear_B Linb Lisu Lisu Lycian Lyci Lydian Lydi Mahajani Mahj Malayalam Mlym Mandaic Mand Manichaean Mani Marchen Marc Masaram_Gondi Gonm Meetei_Mayek Mtei Mende_Kikakui Mend Meroitic_Cursive Merc Meroitic_Hieroglyphs Mero Miao Plrd Modi Modi Mongolian Mong Mro Mroo Multani Mult Myanmar Mymr Nabataean Nbat New_Tai_Lue Talu Newa Newa Nko Nkoo Nushu Nshu Ogham Ogam Ol_Chiki Olck Old_Hungarian Hung Old_Italic Ital Old_North_Arabian Narb Old_Permic Perm Old_Persian Xpeo Old_South_Arabian Sarb Old_Turkic Orkh Oriya Orya Osage Osge Osmanya Osma Pahawh_Hmong Hmng Palmyrene Palm Pau_Cin_Hau Pauc Phags_Pa Phag Phoenician Phnx Psalter_Pahlavi Phlp Rejang Rjng Runic Runr Samaritan Samr Saurashtra Saur Sharada Shrd Shavian Shaw Siddham Sidd SignWriting Sgnw Sinhala Sinh Sora_Sompeng Sora Soyombo Soyo Sundanese Sund Syloti_Nagri Sylo Syriac Syrc Tagalog Tglg Tagbanwa Tagb Tai_Le Tale Tai_Tham Lana Tai_Viet Tavt Takri Takr Tamil Taml Tangut Tang Telugu Telu Thaana Thaa Thai Thai Tibetan Tibt Tifinagh Tfng Tirhuta Tirh Ugaritic Ugar Vai Vaii Warang_Citi Wara Yi Yiii Zanabazar_Square Zanb",me=xe+" Dogra Dogr Gunjala_Gondi Gong Hanifi_Rohingya Rohg Makasar Maka Medefaidrin Medf Old_Sogdian Sogo Sogdian Sogd",ge=me+" Elymaic Elym Nandinagari Nand Nyiakeng_Puachue_Hmong Hmnp Wancho Wcho",ye={9:xe,10:me,11:ge,12:ge+" Chorasmian Chrs Diak Dives_Akuru Khitan_Small_Script Kits Yezi Yezidi"},Ee={};function we(e){var t=Ee[e]={binary:L(de[e]+" "+fe),nonBinary:{General_Category:L(fe),Script:L(ye[e])}};t.nonBinary.Script_Extensions=t.nonBinary.Script,t.nonBinary.gc=t.nonBinary.General_Category,t.nonBinary.sc=t.nonBinary.Script,t.nonBinary.scx=t.nonBinary.Script_Extensions}we(9),we(10),we(11),we(12);var ve=F.prototype,be=function(e){this.parser=e,this.validFlags="gim"+(e.options.ecmaVersion>=6?"uy":"")+(e.options.ecmaVersion>=9?"s":"")+(e.options.ecmaVersion>=13?"d":""),this.unicodeProperties=Ee[e.options.ecmaVersion>=12?12:e.options.ecmaVersion],this.source="",this.flags="",this.start=0,this.switchU=!1,this.switchN=!1,this.pos=0,this.lastIntValue=0,this.lastStringValue="",this.lastAssertionIsQuantifiable=!1,this.numCapturingParens=0,this.maxBackReference=0,this.groupNames=[],this.backReferenceNames=[]};function ke(e){return e<=65535?String.fromCharCode(e):(e-=65536,String.fromCharCode(55296+(e>>10),56320+(1023&e)))}function Se(e){return 36===e||e>=40&&e<=43||46===e||63===e||e>=91&&e<=94||e>=123&&e<=125}function Ce(e){return e>=65&&e<=90||e>=97&&e<=122}function Pe(e){return Ce(e)||95===e}function Ae(e){return Pe(e)||_e(e)}function _e(e){return e>=48&&e<=57}function Te(e){return e>=48&&e<=57||e>=65&&e<=70||e>=97&&e<=102}function Ie(e){return e>=65&&e<=70?e-65+10:e>=97&&e<=102?e-97+10:e-48}function Le(e){return e>=48&&e<=55}be.prototype.reset=function(e,t,s){var i=-1!==s.indexOf("u");this.start=0|e,this.source=t+"",this.flags=s,this.switchU=i&&this.parser.options.ecmaVersion>=6,this.switchN=i&&this.parser.options.ecmaVersion>=9},be.prototype.raise=function(e){this.parser.raiseRecoverable(this.start,"Invalid regular expression: /"+this.source+"/: "+e)},be.prototype.at=function(e,t){void 0===t&&(t=!1);var s=this.source,i=s.length;if(e>=i)return-1;var r=s.charCodeAt(e);if(!t&&!this.switchU||r<=55295||r>=57344||e+1>=i)return r;var n=s.charCodeAt(e+1);return n>=56320&&n<=57343?(r<<10)+n-56613888:r},be.prototype.nextIndex=function(e,t){void 0===t&&(t=!1);var s=this.source,i=s.length;if(e>=i)return i;var r,n=s.charCodeAt(e);return!t&&!this.switchU||n<=55295||n>=57344||e+1>=i||(r=s.charCodeAt(e+1))<56320||r>57343?e+1:e+2},be.prototype.current=function(e){return void 0===e&&(e=!1),this.at(this.pos,e)},be.prototype.lookahead=function(e){return void 0===e&&(e=!1),this.at(this.nextIndex(this.pos,e),e)},be.prototype.advance=function(e){void 0===e&&(e=!1),this.pos=this.nextIndex(this.pos,e)},be.prototype.eat=function(e,t){return void 0===t&&(t=!1),this.current(t)===e&&(this.advance(t),!0)},ve.validateRegExpFlags=function(e){for(var t=e.validFlags,s=e.flags,i=0;i<s.length;i++){var r=s.charAt(i);-1===t.indexOf(r)&&this.raise(e.start,"Invalid regular expression flag"),s.indexOf(r,i+1)>-1&&this.raise(e.start,"Duplicate regular expression flag")}},ve.validateRegExpPattern=function(e){this.regexp_pattern(e),!e.switchN&&this.options.ecmaVersion>=9&&e.groupNames.length>0&&(e.switchN=!0,this.regexp_pattern(e))},ve.regexp_pattern=function(e){e.pos=0,e.lastIntValue=0,e.lastStringValue="",e.lastAssertionIsQuantifiable=!1,e.numCapturingParens=0,e.maxBackReference=0,e.groupNames.length=0,e.backReferenceNames.length=0,this.regexp_disjunction(e),e.pos!==e.source.length&&(e.eat(41)&&e.raise("Unmatched ')'"),(e.eat(93)||e.eat(125))&&e.raise("Lone quantifier brackets")),e.maxBackReference>e.numCapturingParens&&e.raise("Invalid escape");for(var t=0,s=e.backReferenceNames;t<s.length;t+=1){var i=s[t];-1===e.groupNames.indexOf(i)&&e.raise("Invalid named capture referenced")}},ve.regexp_disjunction=function(e){for(this.regexp_alternative(e);e.eat(124);)this.regexp_alternative(e);this.regexp_eatQuantifier(e,!0)&&e.raise("Nothing to repeat"),e.eat(123)&&e.raise("Lone quantifier brackets")},ve.regexp_alternative=function(e){for(;e.pos<e.source.length&&this.regexp_eatTerm(e););},ve.regexp_eatTerm=function(e){return this.regexp_eatAssertion(e)?(e.lastAssertionIsQuantifiable&&this.regexp_eatQuantifier(e)&&e.switchU&&e.raise("Invalid quantifier"),!0):!!(e.switchU?this.regexp_eatAtom(e):this.regexp_eatExtendedAtom(e))&&(this.regexp_eatQuantifier(e),!0)},ve.regexp_eatAssertion=function(e){var t=e.pos;if(e.lastAssertionIsQuantifiable=!1,e.eat(94)||e.eat(36))return!0;if(e.eat(92)){if(e.eat(66)||e.eat(98))return!0;e.pos=t}if(e.eat(40)&&e.eat(63)){var s=!1;if(this.options.ecmaVersion>=9&&(s=e.eat(60)),e.eat(61)||e.eat(33))return this.regexp_disjunction(e),e.eat(41)||e.raise("Unterminated group"),e.lastAssertionIsQuantifiable=!s,!0}return e.pos=t,!1},ve.regexp_eatQuantifier=function(e,t){return void 0===t&&(t=!1),!!this.regexp_eatQuantifierPrefix(e,t)&&(e.eat(63),!0)},ve.regexp_eatQuantifierPrefix=function(e,t){return e.eat(42)||e.eat(43)||e.eat(63)||this.regexp_eatBracedQuantifier(e,t)},ve.regexp_eatBracedQuantifier=function(e,t){var s=e.pos;if(e.eat(123)){var i=0,r=-1;if(this.regexp_eatDecimalDigits(e)&&(i=e.lastIntValue,e.eat(44)&&this.regexp_eatDecimalDigits(e)&&(r=e.lastIntValue),e.eat(125)))return-1!==r&&r<i&&!t&&e.raise("numbers out of order in {} quantifier"),!0;e.switchU&&!t&&e.raise("Incomplete quantifier"),e.pos=s}return!1},ve.regexp_eatAtom=function(e){return this.regexp_eatPatternCharacters(e)||e.eat(46)||this.regexp_eatReverseSolidusAtomEscape(e)||this.regexp_eatCharacterClass(e)||this.regexp_eatUncapturingGroup(e)||this.regexp_eatCapturingGroup(e)},ve.regexp_eatReverseSolidusAtomEscape=function(e){var t=e.pos;if(e.eat(92)){if(this.regexp_eatAtomEscape(e))return!0;e.pos=t}return!1},ve.regexp_eatUncapturingGroup=function(e){var t=e.pos;if(e.eat(40)){if(e.eat(63)&&e.eat(58)){if(this.regexp_disjunction(e),e.eat(41))return!0;e.raise("Unterminated group")}e.pos=t}return!1},ve.regexp_eatCapturingGroup=function(e){if(e.eat(40)){if(this.options.ecmaVersion>=9?this.regexp_groupSpecifier(e):63===e.current()&&e.raise("Invalid group"),this.regexp_disjunction(e),e.eat(41))return e.numCapturingParens+=1,!0;e.raise("Unterminated group")}return!1},ve.regexp_eatExtendedAtom=function(e){return e.eat(46)||this.regexp_eatReverseSolidusAtomEscape(e)||this.regexp_eatCharacterClass(e)||this.regexp_eatUncapturingGroup(e)||this.regexp_eatCapturingGroup(e)||this.regexp_eatInvalidBracedQuantifier(e)||this.regexp_eatExtendedPatternCharacter(e)},ve.regexp_eatInvalidBracedQuantifier=function(e){return this.regexp_eatBracedQuantifier(e,!0)&&e.raise("Nothing to repeat"),!1},ve.regexp_eatSyntaxCharacter=function(e){var t=e.current();return!!Se(t)&&(e.lastIntValue=t,e.advance(),!0)},ve.regexp_eatPatternCharacters=function(e){for(var t=e.pos,s=0;-1!==(s=e.current())&&!Se(s);)e.advance();return e.pos!==t},ve.regexp_eatExtendedPatternCharacter=function(e){var t=e.current();return!(-1===t||36===t||t>=40&&t<=43||46===t||63===t||91===t||94===t||124===t||(e.advance(),0))},ve.regexp_groupSpecifier=function(e){if(e.eat(63)){if(this.regexp_eatGroupName(e))return-1!==e.groupNames.indexOf(e.lastStringValue)&&e.raise("Duplicate capture group name"),void e.groupNames.push(e.lastStringValue);e.raise("Invalid group")}},ve.regexp_eatGroupName=function(e){if(e.lastStringValue="",e.eat(60)){if(this.regexp_eatRegExpIdentifierName(e)&&e.eat(62))return!0;e.raise("Invalid capture group name")}return!1},ve.regexp_eatRegExpIdentifierName=function(e){if(e.lastStringValue="",this.regexp_eatRegExpIdentifierStart(e)){for(e.lastStringValue+=ke(e.lastIntValue);this.regexp_eatRegExpIdentifierPart(e);)e.lastStringValue+=ke(e.lastIntValue);return!0}return!1},ve.regexp_eatRegExpIdentifierStart=function(e){var t=e.pos,s=this.options.ecmaVersion>=11,i=e.current(s);return e.advance(s),92===i&&this.regexp_eatRegExpUnicodeEscapeSequence(e,s)&&(i=e.lastIntValue),function(e){return u(e,!0)||36===e||95===e}(i)?(e.lastIntValue=i,!0):(e.pos=t,!1)},ve.regexp_eatRegExpIdentifierPart=function(e){var t=e.pos,s=this.options.ecmaVersion>=11,i=e.current(s);return e.advance(s),92===i&&this.regexp_eatRegExpUnicodeEscapeSequence(e,s)&&(i=e.lastIntValue),function(e){return d(e,!0)||36===e||95===e||8204===e||8205===e}(i)?(e.lastIntValue=i,!0):(e.pos=t,!1)},ve.regexp_eatAtomEscape=function(e){return!!(this.regexp_eatBackReference(e)||this.regexp_eatCharacterClassEscape(e)||this.regexp_eatCharacterEscape(e)||e.switchN&&this.regexp_eatKGroupName(e))||(e.switchU&&(99===e.current()&&e.raise("Invalid unicode escape"),e.raise("Invalid escape")),!1)},ve.regexp_eatBackReference=function(e){var t=e.pos;if(this.regexp_eatDecimalEscape(e)){var s=e.lastIntValue;if(e.switchU)return s>e.maxBackReference&&(e.maxBackReference=s),!0;if(s<=e.numCapturingParens)return!0;e.pos=t}return!1},ve.regexp_eatKGroupName=function(e){if(e.eat(107)){if(this.regexp_eatGroupName(e))return e.backReferenceNames.push(e.lastStringValue),!0;e.raise("Invalid named reference")}return!1},ve.regexp_eatCharacterEscape=function(e){return this.regexp_eatControlEscape(e)||this.regexp_eatCControlLetter(e)||this.regexp_eatZero(e)||this.regexp_eatHexEscapeSequence(e)||this.regexp_eatRegExpUnicodeEscapeSequence(e,!1)||!e.switchU&&this.regexp_eatLegacyOctalEscapeSequence(e)||this.regexp_eatIdentityEscape(e)},ve.regexp_eatCControlLetter=function(e){var t=e.pos;if(e.eat(99)){if(this.regexp_eatControlLetter(e))return!0;e.pos=t}return!1},ve.regexp_eatZero=function(e){return 48===e.current()&&!_e(e.lookahead())&&(e.lastIntValue=0,e.advance(),!0)},ve.regexp_eatControlEscape=function(e){var t=e.current();return 116===t?(e.lastIntValue=9,e.advance(),!0):110===t?(e.lastIntValue=10,e.advance(),!0):118===t?(e.lastIntValue=11,e.advance(),!0):102===t?(e.lastIntValue=12,e.advance(),!0):114===t&&(e.lastIntValue=13,e.advance(),!0)},ve.regexp_eatControlLetter=function(e){var t=e.current();return!!Ce(t)&&(e.lastIntValue=t%32,e.advance(),!0)},ve.regexp_eatRegExpUnicodeEscapeSequence=function(e,t){void 0===t&&(t=!1);var s,i=e.pos,r=t||e.switchU;if(e.eat(117)){if(this.regexp_eatFixedHexDigits(e,4)){var n=e.lastIntValue;if(r&&n>=55296&&n<=56319){var a=e.pos;if(e.eat(92)&&e.eat(117)&&this.regexp_eatFixedHexDigits(e,4)){var o=e.lastIntValue;if(o>=56320&&o<=57343)return e.lastIntValue=1024*(n-55296)+(o-56320)+65536,!0}e.pos=a,e.lastIntValue=n}return!0}if(r&&e.eat(123)&&this.regexp_eatHexDigits(e)&&e.eat(125)&&((s=e.lastIntValue)>=0&&s<=1114111))return!0;r&&e.raise("Invalid unicode escape"),e.pos=i}return!1},ve.regexp_eatIdentityEscape=function(e){if(e.switchU)return!!this.regexp_eatSyntaxCharacter(e)||!!e.eat(47)&&(e.lastIntValue=47,!0);var t=e.current();return!(99===t||e.switchN&&107===t||(e.lastIntValue=t,e.advance(),0))},ve.regexp_eatDecimalEscape=function(e){e.lastIntValue=0;var t=e.current();if(t>=49&&t<=57){do{e.lastIntValue=10*e.lastIntValue+(t-48),e.advance()}while((t=e.current())>=48&&t<=57);return!0}return!1},ve.regexp_eatCharacterClassEscape=function(e){var t=e.current();if(function(e){return 100===e||68===e||115===e||83===e||119===e||87===e}(t))return e.lastIntValue=-1,e.advance(),!0;if(e.switchU&&this.options.ecmaVersion>=9&&(80===t||112===t)){if(e.lastIntValue=-1,e.advance(),e.eat(123)&&this.regexp_eatUnicodePropertyValueExpression(e)&&e.eat(125))return!0;e.raise("Invalid property name")}return!1},ve.regexp_eatUnicodePropertyValueExpression=function(e){var t=e.pos;if(this.regexp_eatUnicodePropertyName(e)&&e.eat(61)){var s=e.lastStringValue;if(this.regexp_eatUnicodePropertyValue(e)){var i=e.lastStringValue;return this.regexp_validateUnicodePropertyNameAndValue(e,s,i),!0}}if(e.pos=t,this.regexp_eatLoneUnicodePropertyNameOrValue(e)){var r=e.lastStringValue;return this.regexp_validateUnicodePropertyNameOrValue(e,r),!0}return!1},ve.regexp_validateUnicodePropertyNameAndValue=function(e,t,s){T(e.unicodeProperties.nonBinary,t)||e.raise("Invalid property name"),e.unicodeProperties.nonBinary[t].test(s)||e.raise("Invalid property value")},ve.regexp_validateUnicodePropertyNameOrValue=function(e,t){e.unicodeProperties.binary.test(t)||e.raise("Invalid property name")},ve.regexp_eatUnicodePropertyName=function(e){var t=0;for(e.lastStringValue="";Pe(t=e.current());)e.lastStringValue+=ke(t),e.advance();return""!==e.lastStringValue},ve.regexp_eatUnicodePropertyValue=function(e){var t=0;for(e.lastStringValue="";Ae(t=e.current());)e.lastStringValue+=ke(t),e.advance();return""!==e.lastStringValue},ve.regexp_eatLoneUnicodePropertyNameOrValue=function(e){return this.regexp_eatUnicodePropertyValue(e)},ve.regexp_eatCharacterClass=function(e){if(e.eat(91)){if(e.eat(94),this.regexp_classRanges(e),e.eat(93))return!0;e.raise("Unterminated character class")}return!1},ve.regexp_classRanges=function(e){for(;this.regexp_eatClassAtom(e);){var t=e.lastIntValue;if(e.eat(45)&&this.regexp_eatClassAtom(e)){var s=e.lastIntValue;!e.switchU||-1!==t&&-1!==s||e.raise("Invalid character class"),-1!==t&&-1!==s&&t>s&&e.raise("Range out of order in character class")}}},ve.regexp_eatClassAtom=function(e){var t=e.pos;if(e.eat(92)){if(this.regexp_eatClassEscape(e))return!0;if(e.switchU){var s=e.current();(99===s||Le(s))&&e.raise("Invalid class escape"),e.raise("Invalid escape")}e.pos=t}var i=e.current();return 93!==i&&(e.lastIntValue=i,e.advance(),!0)},ve.regexp_eatClassEscape=function(e){var t=e.pos;if(e.eat(98))return e.lastIntValue=8,!0;if(e.switchU&&e.eat(45))return e.lastIntValue=45,!0;if(!e.switchU&&e.eat(99)){if(this.regexp_eatClassControlLetter(e))return!0;e.pos=t}return this.regexp_eatCharacterClassEscape(e)||this.regexp_eatCharacterEscape(e)},ve.regexp_eatClassControlLetter=function(e){var t=e.current();return!(!_e(t)&&95!==t||(e.lastIntValue=t%32,e.advance(),0))},ve.regexp_eatHexEscapeSequence=function(e){var t=e.pos;if(e.eat(120)){if(this.regexp_eatFixedHexDigits(e,2))return!0;e.switchU&&e.raise("Invalid escape"),e.pos=t}return!1},ve.regexp_eatDecimalDigits=function(e){var t=e.pos,s=0;for(e.lastIntValue=0;_e(s=e.current());)e.lastIntValue=10*e.lastIntValue+(s-48),e.advance();return e.pos!==t},ve.regexp_eatHexDigits=function(e){var t=e.pos,s=0;for(e.lastIntValue=0;Te(s=e.current());)e.lastIntValue=16*e.lastIntValue+Ie(s),e.advance();return e.pos!==t},ve.regexp_eatLegacyOctalEscapeSequence=function(e){if(this.regexp_eatOctalDigit(e)){var t=e.lastIntValue;if(this.regexp_eatOctalDigit(e)){var s=e.lastIntValue;t<=3&&this.regexp_eatOctalDigit(e)?e.lastIntValue=64*t+8*s+e.lastIntValue:e.lastIntValue=8*t+s}else e.lastIntValue=t;return!0}return!1},ve.regexp_eatOctalDigit=function(e){var t=e.current();return Le(t)?(e.lastIntValue=t-48,e.advance(),!0):(e.lastIntValue=0,!1)},ve.regexp_eatFixedHexDigits=function(e,t){var s=e.pos;e.lastIntValue=0;for(var i=0;i<t;++i){var r=e.current();if(!Te(r))return e.pos=s,!1;e.lastIntValue=16*e.lastIntValue+Ie(r),e.advance()}return!0};var Oe=function(e){this.type=e.type,this.value=e.value,this.start=e.start,this.end=e.end,e.options.locations&&(this.loc=new N(e,e.startLoc,e.endLoc)),e.options.ranges&&(this.range=[e.start,e.end])},Ne=F.prototype;function Ve(e){return"function"!=typeof BigInt?null:BigInt(e.replace(/_/g,""))}function De(e){return e<=65535?String.fromCharCode(e):(e-=65536,String.fromCharCode(55296+(e>>10),56320+(1023&e)))}Ne.next=function(e){!e&&this.type.keyword&&this.containsEsc&&this.raiseRecoverable(this.start,"Escape sequence in keyword "+this.type.keyword),this.options.onToken&&this.options.onToken(new Oe(this)),this.lastTokEnd=this.end,this.lastTokStart=this.start,this.lastTokEndLoc=this.endLoc,this.lastTokStartLoc=this.startLoc,this.nextToken()},Ne.getToken=function(){return this.next(),new Oe(this)},"undefined"!=typeof Symbol&&(Ne[Symbol.iterator]=function(){var e=this;return{next:function(){var t=e.getToken();return{done:t.type===w.eof,value:t}}}}),Ne.curContext=function(){return this.context[this.context.length-1]},Ne.nextToken=function(){var e=this.curContext();return e&&e.preserveSpace||this.skipSpace(),this.start=this.pos,this.options.locations&&(this.startLoc=this.curPosition()),this.pos>=this.input.length?this.finishToken(w.eof):e.override?e.override(this):void this.readToken(this.fullCharCodeAtPos())},Ne.readToken=function(e){return u(e,this.options.ecmaVersion>=6)||92===e?this.readWord():this.getTokenFromCode(e)},Ne.fullCharCodeAtPos=function(){var e=this.input.charCodeAt(this.pos);if(e<=55295||e>=56320)return e;var t=this.input.charCodeAt(this.pos+1);return t<=56319||t>=57344?e:(e<<10)+t-56613888},Ne.skipBlockComment=function(){var e,t=this.options.onComment&&this.curPosition(),s=this.pos,i=this.input.indexOf("*/",this.pos+=2);if(-1===i&&this.raise(this.pos-2,"Unterminated comment"),this.pos=i+2,this.options.locations)for(b.lastIndex=s;(e=b.exec(this.input))&&e.index<this.pos;)++this.curLine,this.lineStart=e.index+e[0].length;this.options.onComment&&this.options.onComment(!0,this.input.slice(s+2,i),s,this.pos,t,this.curPosition())},Ne.skipLineComment=function(e){for(var t=this.pos,s=this.options.onComment&&this.curPosition(),i=this.input.charCodeAt(this.pos+=e);this.pos<this.input.length&&!k(i);)i=this.input.charCodeAt(++this.pos);this.options.onComment&&this.options.onComment(!1,this.input.slice(t+e,this.pos),t,this.pos,s,this.curPosition())},Ne.skipSpace=function(){e:for(;this.pos<this.input.length;){var e=this.input.charCodeAt(this.pos);switch(e){case 32:case 160:++this.pos;break;case 13:10===this.input.charCodeAt(this.pos+1)&&++this.pos;case 10:case 8232:case 8233:++this.pos,this.options.locations&&(++this.curLine,this.lineStart=this.pos);break;case 47:switch(this.input.charCodeAt(this.pos+1)){case 42:this.skipBlockComment();break;case 47:this.skipLineComment(2);break;default:break e}break;default:if(!(e>8&&e<14||e>=5760&&S.test(String.fromCharCode(e))))break e;++this.pos}}},Ne.finishToken=function(e,t){this.end=this.pos,this.options.locations&&(this.endLoc=this.curPosition());var s=this.type;this.type=e,this.value=t,this.updateContext(s)},Ne.readToken_dot=function(){var e=this.input.charCodeAt(this.pos+1);if(e>=48&&e<=57)return this.readNumber(!0);var t=this.input.charCodeAt(this.pos+2);return this.options.ecmaVersion>=6&&46===e&&46===t?(this.pos+=3,this.finishToken(w.ellipsis)):(++this.pos,this.finishToken(w.dot))},Ne.readToken_slash=function(){var e=this.input.charCodeAt(this.pos+1);return this.exprAllowed?(++this.pos,this.readRegexp()):61===e?this.finishOp(w.assign,2):this.finishOp(w.slash,1)},Ne.readToken_mult_modulo_exp=function(e){var t=this.input.charCodeAt(this.pos+1),s=1,i=42===e?w.star:w.modulo;return this.options.ecmaVersion>=7&&42===e&&42===t&&(++s,i=w.starstar,t=this.input.charCodeAt(this.pos+2)),61===t?this.finishOp(w.assign,s+1):this.finishOp(i,s)},Ne.readToken_pipe_amp=function(e){var t=this.input.charCodeAt(this.pos+1);return t===e?this.options.ecmaVersion>=12&&61===this.input.charCodeAt(this.pos+2)?this.finishOp(w.assign,3):this.finishOp(124===e?w.logicalOR:w.logicalAND,2):61===t?this.finishOp(w.assign,2):this.finishOp(124===e?w.bitwiseOR:w.bitwiseAND,1)},Ne.readToken_caret=function(){return 61===this.input.charCodeAt(this.pos+1)?this.finishOp(w.assign,2):this.finishOp(w.bitwiseXOR,1)},Ne.readToken_plus_min=function(e){var t=this.input.charCodeAt(this.pos+1);return t===e?45!==t||this.inModule||62!==this.input.charCodeAt(this.pos+2)||0!==this.lastTokEnd&&!v.test(this.input.slice(this.lastTokEnd,this.pos))?this.finishOp(w.incDec,2):(this.skipLineComment(3),this.skipSpace(),this.nextToken()):61===t?this.finishOp(w.assign,2):this.finishOp(w.plusMin,1)},Ne.readToken_lt_gt=function(e){var t=this.input.charCodeAt(this.pos+1),s=1;return t===e?(s=62===e&&62===this.input.charCodeAt(this.pos+2)?3:2,61===this.input.charCodeAt(this.pos+s)?this.finishOp(w.assign,s+1):this.finishOp(w.bitShift,s)):33!==t||60!==e||this.inModule||45!==this.input.charCodeAt(this.pos+2)||45!==this.input.charCodeAt(this.pos+3)?(61===t&&(s=2),this.finishOp(w.relational,s)):(this.skipLineComment(4),this.skipSpace(),this.nextToken())},Ne.readToken_eq_excl=function(e){var t=this.input.charCodeAt(this.pos+1);return 61===t?this.finishOp(w.equality,61===this.input.charCodeAt(this.pos+2)?3:2):61===e&&62===t&&this.options.ecmaVersion>=6?(this.pos+=2,this.finishToken(w.arrow)):this.finishOp(61===e?w.eq:w.prefix,1)},Ne.readToken_question=function(){var e=this.options.ecmaVersion;if(e>=11){var t=this.input.charCodeAt(this.pos+1);if(46===t){var s=this.input.charCodeAt(this.pos+2);if(s<48||s>57)return this.finishOp(w.questionDot,2)}if(63===t)return e>=12&&61===this.input.charCodeAt(this.pos+2)?this.finishOp(w.assign,3):this.finishOp(w.coalesce,2)}return this.finishOp(w.question,1)},Ne.readToken_numberSign=function(){var e=35;if(this.options.ecmaVersion>=13&&(++this.pos,u(e=this.fullCharCodeAtPos(),!0)||92===e))return this.finishToken(w.privateId,this.readWord1());this.raise(this.pos,"Unexpected character '"+De(e)+"'")},Ne.getTokenFromCode=function(e){switch(e){case 46:return this.readToken_dot();case 40:return++this.pos,this.finishToken(w.parenL);case 41:return++this.pos,this.finishToken(w.parenR);case 59:return++this.pos,this.finishToken(w.semi);case 44:return++this.pos,this.finishToken(w.comma);case 91:return++this.pos,this.finishToken(w.bracketL);case 93:return++this.pos,this.finishToken(w.bracketR);case 123:return++this.pos,this.finishToken(w.braceL);case 125:return++this.pos,this.finishToken(w.braceR);case 58:return++this.pos,this.finishToken(w.colon);case 96:if(this.options.ecmaVersion<6)break;return++this.pos,this.finishToken(w.backQuote);case 48:var t=this.input.charCodeAt(this.pos+1);if(120===t||88===t)return this.readRadixNumber(16);if(this.options.ecmaVersion>=6){if(111===t||79===t)return this.readRadixNumber(8);if(98===t||66===t)return this.readRadixNumber(2)}case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:return this.readNumber(!1);case 34:case 39:return this.readString(e);case 47:return this.readToken_slash();case 37:case 42:return this.readToken_mult_modulo_exp(e);case 124:case 38:return this.readToken_pipe_amp(e);case 94:return this.readToken_caret();case 43:case 45:return this.readToken_plus_min(e);case 60:case 62:return this.readToken_lt_gt(e);case 61:case 33:return this.readToken_eq_excl(e);case 63:return this.readToken_question();case 126:return this.finishOp(w.prefix,1);case 35:return this.readToken_numberSign()}this.raise(this.pos,"Unexpected character '"+De(e)+"'")},Ne.finishOp=function(e,t){var s=this.input.slice(this.pos,this.pos+t);return this.pos+=t,this.finishToken(e,s)},Ne.readRegexp=function(){for(var e,t,s=this.pos;;){this.pos>=this.input.length&&this.raise(s,"Unterminated regular expression");var i=this.input.charAt(this.pos);if(v.test(i)&&this.raise(s,"Unterminated regular expression"),e)e=!1;else{if("["===i)t=!0;else if("]"===i&&t)t=!1;else if("/"===i&&!t)break;e="\\"===i}++this.pos}var r=this.input.slice(s,this.pos);++this.pos;var n=this.pos,a=this.readWord1();this.containsEsc&&this.unexpected(n);var o=this.regexpState||(this.regexpState=new be(this));o.reset(s,r,a),this.validateRegExpFlags(o),this.validateRegExpPattern(o);var c=null;try{c=new RegExp(r,a)}catch(e){}return this.finishToken(w.regexp,{pattern:r,flags:a,value:c})},Ne.readInt=function(e,t,s){for(var i=this.options.ecmaVersion>=12&&void 0===t,r=s&&48===this.input.charCodeAt(this.pos),n=this.pos,a=0,o=0,c=0,p=null==t?1/0:t;c<p;++c,++this.pos){var h=this.input.charCodeAt(this.pos),l=void 0;if(i&&95===h)r&&this.raiseRecoverable(this.pos,"Numeric separator is not allowed in legacy octal numeric literals"),95===o&&this.raiseRecoverable(this.pos,"Numeric separator must be exactly one underscore"),0===c&&this.raiseRecoverable(this.pos,"Numeric separator is not allowed at the first of digits"),o=h;else{if((l=h>=97?h-97+10:h>=65?h-65+10:h>=48&&h<=57?h-48:1/0)>=e)break;o=h,a=a*e+l}}return i&&95===o&&this.raiseRecoverable(this.pos-1,"Numeric separator is not allowed at the last of digits"),this.pos===n||null!=t&&this.pos-n!==t?null:a},Ne.readRadixNumber=function(e){var t=this.pos;this.pos+=2;var s=this.readInt(e);return null==s&&this.raise(this.start+2,"Expected number in radix "+e),this.options.ecmaVersion>=11&&110===this.input.charCodeAt(this.pos)?(s=Ve(this.input.slice(t,this.pos)),++this.pos):u(this.fullCharCodeAtPos())&&this.raise(this.pos,"Identifier directly after number"),this.finishToken(w.num,s)},Ne.readNumber=function(e){var t=this.pos;e||null!==this.readInt(10,void 0,!0)||this.raise(t,"Invalid number");var s=this.pos-t>=2&&48===this.input.charCodeAt(t);s&&this.strict&&this.raise(t,"Invalid number");var i=this.input.charCodeAt(this.pos);if(!s&&!e&&this.options.ecmaVersion>=11&&110===i){var r=Ve(this.input.slice(t,this.pos));return++this.pos,u(this.fullCharCodeAtPos())&&this.raise(this.pos,"Identifier directly after number"),this.finishToken(w.num,r)}s&&/[89]/.test(this.input.slice(t,this.pos))&&(s=!1),46!==i||s||(++this.pos,this.readInt(10),i=this.input.charCodeAt(this.pos)),69!==i&&101!==i||s||(43!==(i=this.input.charCodeAt(++this.pos))&&45!==i||++this.pos,null===this.readInt(10)&&this.raise(t,"Invalid number")),u(this.fullCharCodeAtPos())&&this.raise(this.pos,"Identifier directly after number");var n,a=(n=this.input.slice(t,this.pos),s?parseInt(n,8):parseFloat(n.replace(/_/g,"")));return this.finishToken(w.num,a)},Ne.readCodePoint=function(){var e;if(123===this.input.charCodeAt(this.pos)){this.options.ecmaVersion<6&&this.unexpected();var t=++this.pos;e=this.readHexChar(this.input.indexOf("}",this.pos)-this.pos),++this.pos,e>1114111&&this.invalidStringToken(t,"Code point out of bounds")}else e=this.readHexChar(4);return e},Ne.readString=function(e){for(var t="",s=++this.pos;;){this.pos>=this.input.length&&this.raise(this.start,"Unterminated string constant");var i=this.input.charCodeAt(this.pos);if(i===e)break;92===i?(t+=this.input.slice(s,this.pos),t+=this.readEscapedChar(!1),s=this.pos):(k(i,this.options.ecmaVersion>=10)&&this.raise(this.start,"Unterminated string constant"),++this.pos)}return t+=this.input.slice(s,this.pos++),this.finishToken(w.string,t)};var Be={};Ne.tryReadTemplateToken=function(){this.inTemplateElement=!0;try{this.readTmplToken()}catch(e){if(e!==Be)throw e;this.readInvalidTemplateToken()}this.inTemplateElement=!1},Ne.invalidStringToken=function(e,t){if(this.inTemplateElement&&this.options.ecmaVersion>=9)throw Be;this.raise(e,t)},Ne.readTmplToken=function(){for(var e="",t=this.pos;;){this.pos>=this.input.length&&this.raise(this.start,"Unterminated template");var s=this.input.charCodeAt(this.pos);if(96===s||36===s&&123===this.input.charCodeAt(this.pos+1))return this.pos!==this.start||this.type!==w.template&&this.type!==w.invalidTemplate?(e+=this.input.slice(t,this.pos),this.finishToken(w.template,e)):36===s?(this.pos+=2,this.finishToken(w.dollarBraceL)):(++this.pos,this.finishToken(w.backQuote));if(92===s)e+=this.input.slice(t,this.pos),e+=this.readEscapedChar(!0),t=this.pos;else if(k(s)){switch(e+=this.input.slice(t,this.pos),++this.pos,s){case 13:10===this.input.charCodeAt(this.pos)&&++this.pos;case 10:e+="\n";break;default:e+=String.fromCharCode(s)}this.options.locations&&(++this.curLine,this.lineStart=this.pos),t=this.pos}else++this.pos}},Ne.readInvalidTemplateToken=function(){for(;this.pos<this.input.length;this.pos++)switch(this.input[this.pos]){case"\\":++this.pos;break;case"$":if("{"!==this.input[this.pos+1])break;case"`":return this.finishToken(w.invalidTemplate,this.input.slice(this.start,this.pos))}this.raise(this.start,"Unterminated template")},Ne.readEscapedChar=function(e){var t=this.input.charCodeAt(++this.pos);switch(++this.pos,t){case 110:return"\n";case 114:return"\r";case 120:return String.fromCharCode(this.readHexChar(2));case 117:return De(this.readCodePoint());case 116:return"\t";case 98:return"\b";case 118:return"\v";case 102:return"\f";case 13:10===this.input.charCodeAt(this.pos)&&++this.pos;case 10:return this.options.locations&&(this.lineStart=this.pos,++this.curLine),"";case 56:case 57:if(this.strict&&this.invalidStringToken(this.pos-1,"Invalid escape sequence"),e){var s=this.pos-1;return this.invalidStringToken(s,"Invalid escape sequence in template string"),null}default:if(t>=48&&t<=55){var i=this.input.substr(this.pos-1,3).match(/^[0-7]+/)[0],r=parseInt(i,8);return r>255&&(i=i.slice(0,-1),r=parseInt(i,8)),this.pos+=i.length-1,t=this.input.charCodeAt(this.pos),"0"===i&&56!==t&&57!==t||!this.strict&&!e||this.invalidStringToken(this.pos-1-i.length,e?"Octal literal in template string":"Octal literal in strict mode"),String.fromCharCode(r)}return k(t)?"":String.fromCharCode(t)}},Ne.readHexChar=function(e){var t=this.pos,s=this.readInt(16,e);return null===s&&this.invalidStringToken(t,"Bad character escape sequence"),s},Ne.readWord1=function(){this.containsEsc=!1;for(var e="",t=!0,s=this.pos,i=this.options.ecmaVersion>=6;this.pos<this.input.length;){var r=this.fullCharCodeAtPos();if(d(r,i))this.pos+=r<=65535?1:2;else{if(92!==r)break;this.containsEsc=!0,e+=this.input.slice(s,this.pos);var n=this.pos;117!==this.input.charCodeAt(++this.pos)&&this.invalidStringToken(this.pos,"Expecting Unicode escape sequence \\uXXXX"),++this.pos;var a=this.readCodePoint();(t?u:d)(a,i)||this.invalidStringToken(n,"Invalid Unicode escape"),e+=De(a),s=this.pos}t=!1}return e+this.input.slice(s,this.pos)},Ne.readWord=function(){var e=this.readWord1(),t=w.name;return this.keywords.test(e)&&(t=y[e]),this.finishToken(t,e)};var Re="8.3.0";F.acorn={Parser:F,version:Re,defaultOptions:D,Position:O,SourceLocation:N,getLineInfo:V,Node:ne,TokenType:f,tokTypes:w,keywordTypes:y,TokContext:ce,tokContexts:pe,isIdentifierChar:d,isIdentifierStart:u,Token:Oe,isNewLine:k,lineBreak:v,lineBreakG:b,nonASCIIwhitespace:S},e.Node=ne,e.Parser=F,e.Position=O,e.SourceLocation=N,e.TokContext=ce,e.Token=Oe,e.TokenType=f,e.defaultOptions=D,e.getLineInfo=V,e.isIdentifierChar=d,e.isIdentifierStart=u,e.isNewLine=k,e.keywordTypes=y,e.lineBreak=v,e.lineBreakG=b,e.nonASCIIwhitespace=S,e.parse=function(e,t){return F.parse(e,t)},e.parseExpressionAt=function(e,t,s){return F.parseExpressionAt(e,t,s)},e.tokContexts=pe,e.tokTypes=w,e.tokenizer=function(e,t){return F.tokenizer(e,t)},e.version=Re,Object.defineProperty(e,"__esModule",{value:!0})}(t)},9329:e=>{var t="";const s=(e,s)=>t.slice(e,s);var i=[];e.exports={init:e=>{(e=>{t=e})(e),i=[]},addComma:e=>i.push(e),checkComma:(e,t,r)=>{const n=s(e,t);let a=!0,o=!0,c=0;for(let e=n.length-1;e>=0;e-=1){let t=n[e];if(" "!==t&&"\n"!==t&&"\t"!==t)if(","===t&&o)o=!1;else{if(n[e]!==r||!a){c=e;break}a=!1}}e+=c;for(let s=0;s<i.length;s+=1){let r=i[s];if(e<=r&&r<t)return p=s,i=(h=i).slice(0,p).concat(h.slice(p+1,h.length)),!0}var p,h;return!1},createSemicolon:(e,t)=>{let i=s(e,t).split(";").length-1;return Array(i).fill(null)},checkCoverCallExpressionAndAsyncArrowHead:(e,t)=>{let i=s(e,t);return i.indexOf("(")>-1&&i.indexOf(")")>-1}}},4147:e=>{class t{constructor(e,t,s,i,r){void 0===i&&(i=[]),void 0===r&&(r=[]),t?.loc&&(this.loc=t.loc),this.kind=e,this.index=s,this.children=i,this.params=r}compress(){let e=[],s=[{parent:e,target:this}];for(;s.length>0;){let{parent:e,target:i}=s.shift();if(i instanceof t){let t=[],r=[i.index,t,i.params.map(Number),i.compressedLoc()];e.push(r),i.children.forEach((e=>{s.push({parent:t,target:e})}))}else e.push(i)}return e[0]}compressedLoc(){if(!this.loc)return[-1,-1,-1,-1];let{start:e,end:t}=this.loc;return[e.line,e.column,t.line,t.column]}}t.fromList=(e,s,i,r)=>{let n;for(let a of s){let s=i(a);void 0===n?n=new t(e,a,0,[s],r):(n=new t(e,a,1,[n,s],r),n.end=s.end)}return n},t.getRhs=(e,t,s)=>{let i=e.indexOf(s.type);return-1===i?null:{index:i,child:t[i](s)}},t.TODO=e=>{throw`[TODO] ${e}`},t.getBinary=(e,t,s,i)=>{let{operator:r,left:n,right:a}=e,o=t.indexOf(r)+1,c={index:o};if(o>0){let e=s(n),t=i(a);c.children=[e,t]}else{let t=i(e);c.children=[t]}return c},e.exports=t},2570:(e,t,s)=>{const i=s(1234),{init:r,addComma:n}=s(9329);e.exports=class{constructor(e){this.ecmaVersion=e,this.Script=s(9613)(`./es${this.ecmaVersion}/Script`)}acornParse(e){try{return r(e),i.parse(e,{ecmaVersion:this.ecmaVersion,preserveParens:!0,locations:!0,onTrailingComma:(e,t)=>n(e)})}catch(e){console.error(`[SyntaxError] ${e}`)}}trans(e){return this.Script(e)}parse(e){const t=this.acornParse(e);return this.trans(t)}}},8422:(e,t,s)=>{const i=s(4147);let r=(e,t)=>n=>{let a=s(2659),o=[e,t],{type:c}=n;switch(c){case"AwaitExpression":case"UnaryExpression":case"UpdateExpression":case"CallExpression":case"NewExpression":case"MemberExpression":case"ObjectExpression":case"ArrayExpression":case"FunctionExpression":case"ClassExpression":case"SequenceExpression":case"ParenthesizedExpression":case"TaggedTemplateExpression":case"TemplateLiteral":case"Identifier":case"ThisExpression":case"ArrayPattern":case"ObjectPattern":case"MetaProperty":case"Literal":{let s=a(e,t)(n);return new i("AdditiveExpression",n,0,[s],o)}case"BinaryExpression":{let{index:s,children:c}=i.getBinary(n,["+","-"],r(e,t),a(e,t));return new i("AdditiveExpression",n,s,c,o)}default:i.TODO(`${c} @ AdditiveExpression`)}i.TODO("AdditiveExpression")};e.exports=r},4182:(e,t,s)=>{const i=s(4147);let r=(e,t)=>n=>{const a=s(4043);let o,c,p=[e,t],h=n.length,l=n.pop();if("SpreadElement"!=l.type?(o=a(!0,e,t)(l),c=0):(o=a(!0,e,t)(l.argument),c=1),1==h)return new i("ArgumentList",l,c,[o],p);{c+=2;let s=r(e,t)(n);return new i("ArgumentList",l,c,[s,o],p)}};e.exports=r},270:(e,t,s)=>{const i=s(4147);e.exports=(e,t)=>(r,n)=>{const a=s(4182);let o=[e,t];if(0==r.length)return new i("Arguments",r,0,[],o);{let s=a(e,t)(r);return new i("Arguments",r,n?2:1,[s],o)}}},6594:(e,t,s)=>{const i=s(4147),{checkComma:r}=s(9329);e.exports=(e,t)=>n=>{let a=s(5151),o=s(9597),c=s(2786),p=[e,t],h=n.elements;if(h.every((e=>null===e))){let e=null;return h.length>0&&(e=a(h)),new i("ArrayBindingPattern",n,0,[e,null],p)}{let s=h.pop();const l=r(n.start,n.end,"]");if(null===s||l){l&&h.push(s);let r=[];for(let e=h.length-1;e>=0&&null===h[e];e-=1)r.push(h.pop());let c=null;r.length>0&&(c=a(r));let u=o(e,t)(h);return new i("ArrayBindingPattern",n,2,[u,c,null],p)}if("RestElement"===s.type){let r=c(e,t)(s);if(h.every((e=>null===e))){let e=null;return h.length>0&&(e=a(h)),new i("ArrayBindingPattern",n,0,[e,r],p)}let l=[];for(let e=h.length-1;e>=0&&null===h[e];e-=1)l.push(h.pop());let u=null;l.length>0&&(u=a(l));let d=o(e,t)(h);return new i("ArrayBindingPattern",n,2,[d,u,r],p)}{h.push(s);let r=o(e,t)(h);return new i("ArrayBindingPattern",n,1,[r],p)}}}},8365:(e,t,s)=>{const i=s(4147),{checkComma:r}=s(9329);e.exports=(e,t)=>n=>{let a=s(5151),o=s(4690),c=[e,t],{elements:p}=n,h=p.length;if(0==h)return new i("ArrayLiteral",n,0,[null],c);if(p.every((e=>null==e))){let e=a(p);return new i("ArrayLiteral",n,0,[e],c)}if(null!=p[h-1]){let s=o(e,t)(p);return r(n.start,n.end,"]")?new i("ArrayLiteral",n,2,[s,null],c):new i("ArrayLiteral",n,1,[s],c)}{let s=[];for(let e=p.length-1;e>=0&&null===p[e];e-=1)s.push(p.pop());let r=null;s.length>0&&(r=a(s));let h=o(e,t)(p);return new i("ArrayLiteral",n,2,[h,r],c)}}},7078:(e,t,s)=>{const i=s(4147);e.exports=(e,t,r)=>n=>{const a=s(833),o=s(2553);n.params.start=n.start,n.params.end=n.body.start;let c=[e,t,r],p=a(t,r)(n.params),h=o(e)(n.body);return new i("ArrowFunction",n,0,[p,h],c)}},833:(e,t,s)=>{const i=s(4147),{checkCoverCallExpressionAndAsyncArrowHead:r}=s(9329);e.exports=(e,t)=>n=>{const a=s(2904),o=s(4947);let c=[e,t];if(r(n.start,n.end)){let s=o(e,t)(n);return new i("ArrowParameters",n,1,[s],c)}{let s=a(e,t)(n[0]);return new i("ArrowParameters",n,0,[s],c)}}},4043:(e,t,s)=>{const i=s(4147);let r=(e,t,n)=>a=>{const o=s(4732),c=s(1542),p=s(7078),h=s(7636),l=s(6411);let u=[e,t,n],{type:d}=a;switch(d){case"AwaitExpression":case"UnaryExpression":case"LogicalExpression":case"BinaryExpression":case"UpdateExpression":case"CallExpression":case"NewExpression":case"MemberExpression":case"ObjectExpression":case"ArrayExpression":case"FunctionExpression":case"ClassExpression":case"SequenceExpression":case"ParenthesizedExpression":case"TemplateLiteral":case"TaggedTemplateExpression":case"Identifier":case"ThisExpression":case"ArrayPattern":case"ObjectPattern":case"ConditionalExpression":case"MetaProperty":case"Literal":{let s=o(e,t,n)(a);return new i("AssignmentExpression",a,0,[s],u)}case"YieldExpression":{let t=c(e,n)(a);return new i("AssignmentExpression",a,1,[t],u)}case"ArrowFunctionExpression":if(a.async){let s=h(e,t,n)(a);return new i("AssignmentExpression",a,3,[s],u)}{let s=p(e,t,n)(a);return new i("AssignmentExpression",a,2,[s],u)}case"AssignmentPattern":{const{left:s,right:o}=a,c=l(t,n)(s),p=r(e,t,n)(o);return new i("AssignmentExpression",a,4,[c,p],u)}case"AssignmentExpression":{let{left:s,operator:o,right:c}=a,p=l(t,n)(s),h=r(e,t,n)(c),d=new i("AssignmentExpression",a,4,[p,h],u);switch(o){case"=":break;case"&&=":d.index=6;break;case"||=":d.index=7;break;case"??=":d.index=8;break;default:{let e=["*=","/=","%=","+=","-=","<<=",">>=",">>>=","&=","^=","|=","**="].indexOf(o),t=new i("AssignmentOperator",{},e);d.index=5,d.children=[p,t,h]}}return d}default:i.TODO(`${d} @ AssignmentExpression`)}};e.exports=r},8839:(e,t,s)=>{const i=s(4147);e.exports=e=>t=>{const r=s(2904);let n=[e],a=r(e,!0)(t);return new i("AsyncArrowBindingIdentifier",t,0,[a],n)}},7636:(e,t,s)=>{const i=s(4147),{checkCoverCallExpressionAndAsyncArrowHead:r}=s(9329);e.exports=(e,t,n)=>a=>{const o=s(8839),c=s(2064),p=s(31),h=r(a.start,a.body.start);let l=[e,t,n],u=c(e)(a.body);if(h){let e={callee:{type:"Identifier",name:"async"},arguments:a.params},s=p(t,n)(e);return new i("AsyncArrowFunction",a,1,[s,u],l)}{let e=o(t)(a.params[0]);return new i("AsyncArrowFunction",a,0,[e,u],l)}}},2064:(e,t,s)=>{const i=s(4147);e.exports=e=>t=>{const r=s(458),n=s(8610);let a=[e];if(t.body){let e=n(t);return new i("AsyncConciseBody",t,1,[e],a)}{let s=r(e,!0)(t);return new i("AsyncConciseBody",t,0,[s],a)}}},8610:(e,t,s)=>{const i=s(4147);e.exports=e=>{let t=s(4815)(!1,!0)(e);return new i("AsyncFunctionBody",e,0,[t])}},6659:(e,t,s)=>{const i=s(4147),{checkComma:r}=s(9329);e.exports=(e,t,n)=>a=>{const o=s(2904),c=s(9880),p=s(8610);let h=[e,t,n],{id:l,body:u}=a,d=r(l.end,u.start,")"),f=c(!1,!0)(a.params,d),x=p(u);if(l){let s=o(e,t)(l);return new i("AsyncFunctionDeclaration",a,0,[s,f,x],h)}return new i("AsyncFunctionDeclaration",a,1,[f,x],h)}},4417:(e,t,s)=>{const i=s(4147),{checkComma:r}=s(9329);e.exports=e=>{const t=s(2904),n=s(9880),a=s(8610);let{id:o,params:c,body:p}=e,h=null;null!=o&&(h=t(!1,!0)(o));let l=r(e.start,p.start,")"),u=n(!1,!0)(c,l),d=a(p);return new i("AsyncFunctionExpression",e,0,[h,u,d])}},7809:(e,t,s)=>{const i=s(4147);e.exports=e=>{let t=s(4815)(!0,!0)(e);return new i("AsyncGeneratorBody",e,0,[t])}},5462:(e,t,s)=>{const i=s(4147),{checkComma:r}=s(9329);e.exports=(e,t,n)=>a=>{const o=s(2904),c=s(9880),p=s(7809);let h=[e,t,n],{id:l,body:u}=a,d=r(l.end,u.start,")"),f=c(!0,!0)(a.params,d),x=p(u);if(l){let s=o(e,t)(l);return new i("AsyncGeneratorDeclaration",a,0,[s,f,x],h)}return new i("AsyncGeneratorDeclaration",a,1,[f,x],h)}},8354:(e,t,s)=>{const i=s(4147),{checkComma:r}=s(9329);e.exports=e=>{const t=s(2904),n=s(9880),a=s(7809);let{id:o,params:c,body:p}=e,h=null;null!=o&&(h=t(!0,!0)(o));let l=r(e.start,p.start,")"),u=n(!0,!0)(c,l),d=a(p);return new i("AsyncGeneratorExpression",e,0,[h,u,d])}},6354:(e,t,s)=>{const i=s(4147),{checkComma:r}=s(9329);e.exports=(e,t)=>n=>{const a=s(6086),o=s(2291),c=s(7809);let p=[e,t],h=a(e,t)(n),l=r(n.key.end,n.value.body.start,")"),u=o(!0,!0)(n.value.params,l),d=c(n.value.body);return new i("AsyncGeneratorMethod",n,0,[h,u,d],p)}},8931:(e,t,s)=>{const i=s(4147),{checkComma:r}=s(9329);e.exports=(e,t)=>n=>{const a=s(6086),o=s(2291),c=s(8610);let p=[e,t],h=a(e,t)(n),l=r(n.key.end,n.value.body.start,")"),u=o(!1,!0)(n.value.params,l),d=c(n.value.body);return new i("AsyncMethod",n,0,[h,u,d],p)}},4118:(e,t,s)=>{const i=s(4147);e.exports=e=>t=>{const r=s(3778);let n=[e],a=r(e,!0)(t.argument);return new i("AwaitExpression",t,0,[a],n)}},943:(e,t,s)=>{const i=s(4147);e.exports=(e,t)=>r=>{const n=s(2122),a=s(5095),o=s(6038);let c=[e,t],{type:p}=r;switch(p){case"Identifier":{let s=n(e,t)(r);return new i("BindingElement",r,0,[s],c)}case"AssignmentPattern":{let{left:s,right:p}=r;if("Identifier"===s.type){let s=n(e,t)(r);return new i("BindingElement",r,0,[s],c)}{let n=a(e,t)(s),h=o(!0,e,t)(p);return new i("BindingElement",r,1,[n,h],c)}}case"ArrayPattern":case"ObjectPattern":{let s=a(e,t)(r);return new i("BindingElement",r,1,[s,null],c)}default:i.TODO(`${p} @ BindingElement`)}}},9597:(e,t,s)=>{const i=s(4147);let r=(e,t)=>n=>{let a=s(2876),o=[e,t],c=[n.pop()];for(let e=n.length-1;e>=0&&null===n[e];e-=1)c.unshift(n.pop());if(0===n.length){let s=a(e,t)(c);return new i("BindingElementList",n,0,[s],o)}{let s=a(e,t)(c),p=r(e,t)(n);return new i("BindingElementList",n,1,[p,s],o)}};e.exports=r},2876:(e,t,s)=>{const i=s(4147);e.exports=(e,t)=>r=>{let n=s(943),a=s(5151),o=[e,t],c=n(e,t)(r.pop()),p=null;return r.length>0&&(p=a(r)),new i("BindingElisionElement",r,0,[p,c],o)}},2904:(e,t,s)=>{const i=s(4147);e.exports=(e,t)=>r=>{const n=s(3326);let a=[e,t];if(!e&&!t)return new i("BindingIdentifier",r,0,[n(r)],a);switch(r.name){case"yield":return new i("BindingIdentifier",r,1,[],a);case"await":return new i("BindingIdentifier",r,2,[],a);default:return new i("BindingIdentifier",r,0,[n(r)],a)}}},2690:(e,t,s)=>{const i=s(4147);e.exports=(e,t,r)=>n=>{let a=s(9676)(e,t,r),o=[e,t,r];return i.fromList("BindingList",n,a,o)}},5095:(e,t,s)=>{const i=s(4147);e.exports=(e,t)=>r=>{let n=s(753),a=s(6594),o=[e,t];if("ArrayPattern"===r.type){let s=a(e,t)(r);return new i("BindingPattern",r,1,[s],o)}{let s=n(e,t)(r);return new i("BindingPattern",r,0,[s],o)}}},265:(e,t,s)=>{const i=s(4147);e.exports=(e,t)=>r=>{let n=s(2122),a=s(6086),o=s(943),c=[e,t],{shorthand:p,key:h,value:l}=r;if(p){let s;return s="Identifier"===h.type&&"Identifier"===l.type&&h.name===l.name?n(e,t)(h):n(e,t)({left:h,right:l}),new i("BindingProperty",r,0,[s],c)}{let s=a(e,t)(r),n=o(e,t)(l);return new i("BindingProperty",r,1,[s,n],c)}}},846:(e,t,s)=>{const i=s(4147);e.exports=(e,t)=>r=>{let n=s(265)(e,t),a=[e,t];return i.fromList("BindingPropertyList",r,n,a)}},2786:(e,t,s)=>{const i=s(4147);e.exports=(e,t)=>r=>{const n=s(2904),a=s(5095);let o=[e,t],{argument:c}=r,{type:p}=c;if("Identifier"==p){let s=n(e,t)(c);return new i("BindingRestElement",r,0,[s],o)}{let s=a(e,t)(c);return new i("BindingRestElement",r,1,[s],o)}}},2814:(e,t,s)=>{const i=s(4147);e.exports=(e,t)=>r=>{let n=s(2904),a=[e,t],o=n(e,t)(r.argument);return new i("BindingRestProperty",r,0,[o],a)}},3643:(e,t,s)=>{const i=s(4147);let r=(e,t,n)=>a=>{let o=s(8747),c=[e,t,n],{type:p}=a;switch(p){case"AwaitExpression":case"UnaryExpression":case"UpdateExpression":case"CallExpression":case"NewExpression":case"MemberExpression":case"ObjectExpression":case"ArrayExpression":case"FunctionExpression":case"ClassExpression":case"SequenceExpression":case"ParenthesizedExpression":case"TemplateLiteral":case"TaggedTemplateExpression":case"Identifier":case"ThisExpression":case"ArrayPattern":case"ObjectPattern":case"MetaProperty":case"Literal":{let s=o(e,t,n)(a);return new i("BitwiseANDExpression",a,0,[s],c)}case"BinaryExpression":{let{index:s,children:p}=i.getBinary(a,["&"],r(e,t,n),o(e,t,n));return new i("BitwiseANDExpression",a,s,p,c)}default:i.TODO(`${p} @ BitwiseANDExpression`)}i.TODO("BitwiseANDExpression")};e.exports=r},8944:(e,t,s)=>{const i=s(4147);let r=(e,t,n)=>a=>{let o=s(5328),c=[e,t,n],{type:p}=a;switch(p){case"AwaitExpression":case"UnaryExpression":case"UpdateExpression":case"CallExpression":case"NewExpression":case"MemberExpression":case"ObjectExpression":case"ArrayExpression":case"FunctionExpression":case"ClassExpression":case"SequenceExpression":case"ParenthesizedExpression":case"TemplateLiteral":case"TaggedTemplateExpression":case"Identifier":case"ThisExpression":case"ArrayPattern":case"ObjectPattern":case"MetaProperty":case"Literal":{let s=o(e,t,n)(a);return new i("BitwiseORExpression",a,0,[s],c)}case"BinaryExpression":{let{index:s,children:p}=i.getBinary(a,["|"],r(e,t,n),o(e,t,n));return new i("BitwiseORExpression",a,s,p,c)}default:i.TODO(`${p} @ BitwiseORExpression`)}i.TODO("BitwiseORExpression")};e.exports=r},5328:(e,t,s)=>{const i=s(4147);let r=(e,t,n)=>a=>{let o=s(3643),c=[e,t,n],{type:p}=a;switch(p){case"AwaitExpression":case"UnaryExpression":case"UpdateExpression":case"CallExpression":case"NewExpression":case"MemberExpression":case"ObjectExpression":case"ArrayExpression":case"FunctionExpression":case"ClassExpression":case"SequenceExpression":case"ParenthesizedExpression":case"TemplateLiteral":case"TaggedTemplateExpression":case"Identifier":case"ThisExpression":case"ArrayPattern":case"ObjectPattern":case"MetaProperty":case"Literal":{let s=o(e,t,n)(a);return new i("BitwiseXORExpression",a,0,[s],c)}case"BinaryExpression":{let{index:s,children:p}=i.getBinary(a,["^"],r(e,t,n),o(e,t,n));return new i("BitwiseXORExpression",a,s,p,c)}default:i.TODO(`${p} @ BitwiseXORExpression`)}i.TODO("BitwiseXORExpression")};e.exports=r},3396:(e,t,s)=>{const i=s(4147);e.exports=(e,t,r)=>n=>{const a=s(5963);let o=[e,t,r],c=null;return n.body.length>0&&(c=a(e,t,r)(n.body)),new i("Block",n,0,[c],o)}},8901:(e,t,s)=>{const i=s(4147);e.exports=(e,t,r)=>n=>{const a=s(3396);let o=[e,t,r],c=a(e,t,r)(n);return new i("BlockStatement",n,0,[c],o)}},6556:(e,t,s)=>{const i=s(4147);e.exports=(e,t)=>r=>{const n=s(4362);let a=[e,t],{label:o}=r;if(null==o)return new i("BreakStatement",r,0,[],a);{let s=n(e,t)(o);return new i("BreakStatement",r,1,[s],a)}}},8473:(e,t,s)=>{const i=s(4147);e.exports=(e,t,r)=>n=>{const a=s(2069),o=s(7208);let c=[e,t,r];switch(n.type){case"SwitchStatement":{let s=o(e,t,r)(n);return new i("BreakableStatement",n,1,[s],c)}default:{let s=a(e,t,r)(n);return new i("BreakableStatement",n,0,[s],c)}}}},3530:(e,t,s)=>{const i=s(4147);let r=(e,t)=>n=>{const a=s(31),o=s(2645),c=s(270),p=s(1916),h=s(7037);let l=[e,t],{type:u,callee:d}=n;if("MemberExpression"===u){const{object:s,property:a,computed:c}=n,p=r(e,t)(s);if(c){const s=o(!0,e,t)(a);return new i("CallExpression",n,4,[p,s],l)}return new i("CallExpression",n,5,[p,a.name],l)}if("TaggedTemplateExpression"===u){const s=r(e,t)(n.tag),a=h(e,t,!0)(n.quasi);return new i("CallExpression",n,6,[s,a],l)}if("CallExpression"==u){if("Super"==d.type){const s=p(e,t)(n);return new i("CallExpression",n,1,[s],l)}if("MemberExpression"===d.type&&"CallExpression"===d.object.type||"CallExpression"===d.type){const s=r(e,t)(d),a=c(e,t)(n.arguments);return new i("CallExpression",n,3,[s,a],l)}{let s=a(e,t)(n);return new i("CallExpression",n,0,[s],l)}}i.TODO(`${u} @ CallExpression`)};e.exports=r},1633:(e,t,s)=>{const i=s(4147);e.exports=(e,t,r)=>n=>{const a=s(8150),o=s(4715);let c=[e,t,r],p=n.findIndex((e=>null==e.test)),h=n.length;if(-1==p){let s=null;return h>0&&(s=a(e,t,r)(n)),new i("CaseBlock",{},0,[s],c)}{let s=null,h=n.slice(0,p);h.length>0&&(s=a(e,t,r)(h));let l=o(e,t,r)(n[p]),u=null,d=n.slice(p+1);return d.length>0&&(u=a(e,t,r)(d)),new i("CaseBlock",{},1,[s,l,u],c)}}},1316:(e,t,s)=>{const i=s(4147);e.exports=(e,t,r)=>n=>{const a=s(2645),o=s(5963);let c=[e,t,r],p=a(!0,e,t)(n.test),h=null;return n.consequent.length>0&&(h=o(e,t,r)(n.consequent)),new i("CaseClause",n,0,[p,h],c)}},8150:(e,t,s)=>{const i=s(4147);e.exports=(e,t,r)=>n=>{let a=s(1316)(e,t,r),o=[e,t,r];return i.fromList("CaseClause",n,a,o)}},570:(e,t,s)=>{const i=s(4147);e.exports=(e,t,r)=>n=>{const a=s(7384),o=s(3396);let c=[e,t,r],{body:p,param:h}=n,l=o(e,t,r)(p);if(null!=h){let s=a(e,t)(h);return new i("Catch",n,0,[s,l],c)}return new i("Catch",n,1,[l],c)}},7384:(e,t,s)=>{const i=s(4147);e.exports=(e,t)=>r=>{const n=s(2904),a=s(5095);let o=[e,t],{type:c}=r;if("Identifier"===c){let s=n(e,t)(r);return new i("CatchParameter",r,0,[s],o)}if("ArrayPattern"===c||"ObjectPattern"===c){const s=a(e,t)(r);return new i("CatchParameter",r,1,[s],o)}i.TODO(`${c} @ CatchParameter`)}},7417:(e,t,s)=>{const i=s(4147);e.exports=(e,t)=>r=>{const n=s(9521);let a=[e,t],o=n(e,t)(r);return new i("ClassBody",r,0,[o],a)}},5109:(e,t,s)=>{const i=s(4147);e.exports=(e,t,r)=>n=>{const a=s(2904),o=s(2622);let c=[e,t,r],{id:p}=n,h=o(e,t)(n);if(p){let s=a(e,t)(p);return new i("ClassDeclaration",n,0,[s,h],c)}return new i("ClassDeclaration",n,1,[h],c)}},8222:(e,t,s)=>{const i=s(4147);e.exports=(e,t)=>r=>{const n=s(8162);let a=[e,t];if(null===r)return new i("ClassElement",r,2,[],a);{let{static:s}=r,o=0;s&&(o=1);let c=n(e,t)(r);return new i("ClassElement",r,o,[c],a)}}},9521:(e,t,s)=>{const i=s(4147);e.exports=(e,t)=>r=>{let n=s(8222)(e,t),a=[e,t];return i.fromList("ClassElementList",r.body,n,a)}},6359:(e,t,s)=>{const i=s(4147);e.exports=(e,t)=>r=>{const n=s(2904),a=s(2622);let o=[e,t],{id:c,superClass:p,body:h}=r,l=null;null!=c&&(l=n(e,t)(c));let u=a(e,t)({superClass:p,body:h});return new i("ClassExpression",r,0,[l,u],o)}},8771:(e,t,s)=>{const i=s(4147);e.exports=(e,t)=>r=>{let n=s(6411),a=[e,t],o=n(e,t)(r);return new i("ClassHeritage",r,0,[o],a)}},2622:(e,t,s)=>{const i=s(4147),{createSemicolon:r}=s(9329);e.exports=(e,t)=>n=>{const a=s(8771),o=s(7417);let c=[e,t],{superClass:p,body:h}=n,l=null;p&&(l=a(e,t)(p));let u=null,d=h.start,f=h.end;if(0===h.body.length)h.body=r(d,f);else{let e=0;for(;;){let t=h.body[e],s=h.body.slice(0,e),i=r(d,t.start),n=h.body.slice(e,h.body.length);if(h.body=s.concat(i).concat(n),e+=1+i.length,d=t.end,e>=h.body.length){let e=r(t.end,f);h.body=h.body.concat(e);break}}}return h.body.length>0&&(u=o(e,t)(h)),new i("ClassTail",n,0,[l,u],c)}},6527:(e,t,s)=>{const i=s(4147);e.exports=(e,t)=>r=>{let n=s(4043),a=[e,t],o=n(!0,e,t)(r);return new i("ComputedPropertyName",r,0,[o],a)}},2553:(e,t,s)=>{const i=s(4147);e.exports=e=>t=>{const r=s(458),n=s(4815);let a=[e],{type:o}=t;if("BlockStatement"!=o){let s=r(e,!1)(t);return new i("ConciseBody",t,0,[s],a)}{let e=n(!1,!1)(t);return new i("ConciseBody",t,1,[e],a)}}},4732:(e,t,s)=>{const i=s(4147);e.exports=(e,t,r)=>n=>{let a=s(6135),o=s(4043),c=[e,t,r],{type:p}=n;switch(p){case"AwaitExpression":case"UnaryExpression":case"LogicalExpression":case"BinaryExpression":case"UpdateExpression":case"CallExpression":case"NewExpression":case"MemberExpression":case"ObjectExpression":case"ArrayExpression":case"FunctionExpression":case"ClassExpression":case"SequenceExpression":case"ParenthesizedExpression":case"TemplateLiteral":case"TaggedTemplateExpression":case"Identifier":case"ThisExpression":case"ArrayPattern":case"ObjectPattern":case"MetaProperty":case"Literal":{let s=a(e,t,r)(n);return new i("ConditionalExpression",n,0,[s],c)}case"ConditionalExpression":{let s=a(e,t,r)(n.test),p=o(!0,t,r)(n.consequent),h=o(e,t,r)(n.alternate);return new i("ConditionalExpression",n,1,[s,p,h],c)}default:i.TODO(`${p} @ ConditionalExpression`)}i.TODO("ConditionalExpression")}},1844:(e,t,s)=>{const i=s(4147);e.exports=(e,t)=>r=>{const n=s(4362);let a=[e,t];if(null===r.label)return new i("ContinueStatement",r,0,[],a);{let s=n(e,t)(r.label);return new i("ContinueStatement",r,1,[s],a)}}},31:(e,t,s)=>{const i=s(4147),{checkComma:r}=s(9329);e.exports=(e,t)=>n=>{const a=s(8262),o=s(270);let c=[e,t],{callee:p}=n,h=a(e,t)(p),l=r(p.end,n.end,")"),u=o(e,t)(n.arguments,l);return new i("CoverCallExpressionAndAsyncArrowHead",n,0,[h,u],c)}},4461:(e,t,s)=>{const i=s(4147);e.exports=(e,t)=>r=>{const n=s(7168),a=s(6038);let o=[e,t],{left:c,right:p}=r,h=n(e,t)(c),l=a(!0,e,t)(p);return new i("CoverInitializedName",r,0,[h,l],o)}},4947:(e,t,s)=>{const i=s(4147);e.exports=(e,t)=>r=>{const n=s(2645),a=s(2904),o=s(5095);let c="CoverParenthesizedExpressionAndArrowParameterList",p=[e,t];"ParenthesizedExpression"==r.type&&(r="SequenceExpression"==(r=r.expression).type?r.expressions:[r]),"SequenceExpression"==r.type&&(r=r.expressions);let h=r.length;if(0==h)return new i(c,{},2,[],p);let l=r[h-1];if("RestElement"==l.type){if(1==h){if("Identifier"==l.argument.type){let s=a(e,t)(l.argument);return new i(c,l,3,[s],p)}{let s=o(e,t)(l.argument);return new i(c,l,4,[s],p)}}{r.pop();let s=n(!0,e,t)(r);if("Identifier"==l.argument.type){let n=a(e,t)(l.argument);return new i(c,r,5,[s,n],p)}{let n=o(e,t)(l.argument);return new i(c,r,6,[s,n],p)}}}{let s=n(!0,e,t)(r);return new i(c,{},0,[s],p)}}},310:(e,t,s)=>{const i=s(4147);e.exports=e=>new i("DebuggerStatement",e,0,[])},3319:(e,t,s)=>{const i=s(4147);e.exports=(e,t)=>r=>{const n=s(6027),a=s(9655),o=s(5109);let c=[e,t],{type:p}=r;switch(p){case"FunctionDeclaration":{let s=a(e,t,!1)(r);return new i("Declaration",r,0,[s],c)}case"ClassDeclaration":{let s=o(e,t,!1)(r);return new i("Declaration",r,1,[s],c)}case"VariableDeclaration":{let s=n(!0,e,t)(r);return new i("Declaration",r,2,[s],c)}default:i.TODO(`${p} @ Declaration`)}}},4715:(e,t,s)=>{const i=s(4147);e.exports=(e,t,r)=>n=>{const a=s(5963);let o=[e,t,r],c=null;return n.consequent.length>0&&(c=a(e,t,r)(n.consequent)),new i("DefaultClause",n,0,[c],o)}},6782:(e,t,s)=>{const i=s(4147);e.exports=(e,t,r)=>n=>{const a=s(3735),o=s(2645);let c=[e,t,r];const p=a(e,t,r)(n.body),h=o(!0,e,t)(n.test);return new i("DoWhileStatement",n,0,[p,h],c)}},4690:(e,t,s)=>{const i=s(4147);let r=(e,t)=>n=>{let a=s(5151),o=s(843),c=s(4043),p=[e,t],h=n.pop(),l=[];for(;n.length>0;){let e=n.pop();if(null!=e){n.push(e);break}l.push(e)}let u=null;if(l.length>0&&(u=a(l)),0==n.length)switch(h.type){case"SpreadElement":case"RestElement":{let s=o(e,t)(h);return new i("ElementList",h,1,[u,s],p)}default:{let s=c(!0,e,t)(h);return new i("ElementList",h,0,[u,s],p)}}else switch(h.type){case"SpreadElement":case"RestElement":{let s=r(e,t)(n),a=o(e,t)(h);return new i("ElementList",h,3,[s,u,a],p)}default:{let s=r(e,t)(n),a=c(!0,e,t)(h);return new i("ElementList",h,2,[s,u,a],p)}}};e.exports=r},5151:(e,t,s)=>{const i=s(4147);e.exports=e=>{let t=e.length,s=new i("Elision",{},0);for(let e=1;e<t;e++)s=new i("Elision",{},1,[s]);return s}},3900:(e,t,s)=>{const i=s(4147);e.exports=e=>new i("EmptyStatement",e,0)},8747:(e,t,s)=>{const i=s(4147);let r=(e,t,n)=>a=>{let o=s(5126),c=[e,t,n],{type:p}=a;switch(p){case"AwaitExpression":case"UnaryExpression":case"UpdateExpression":case"CallExpression":case"NewExpression":case"MemberExpression":case"ObjectExpression":case"ArrayExpression":case"FunctionExpression":case"ClassExpression":case"SequenceExpression":case"ParenthesizedExpression":case"TemplateLiteral":case"TaggedTemplateExpression":case"Identifier":case"ThisExpression":case"ArrayPattern":case"ObjectPattern":case"MetaProperty":case"Literal":{let s=o(e,t,n)(a);return new i("EqualityExpression",a,0,[s],c)}case"BinaryExpression":{let{index:s,children:p}=i.getBinary(a,["==","!=","===","!=="],r(e,t,n),o(e,t,n));return new i("EqualityExpression",a,s,p,c)}default:i.TODO(`${p} @ EqualityExpression`)}i.TODO("EqualityExpression")};e.exports=r},5952:(e,t,s)=>{const i=s(4147);let r=(e,t)=>n=>{let a=s(3778),o=s(9039),c=[e,t],{type:p}=n;switch(p){case"AwaitExpression":case"UnaryExpression":case"UpdateExpression":case"CallExpression":case"NewExpression":case"MemberExpression":case"ObjectExpression":case"ArrayExpression":case"FunctionExpression":case"ClassExpression":case"SequenceExpression":case"ParenthesizedExpression":case"TemplateLiteral":case"TaggedTemplateExpression":case"Identifier":case"ThisExpression":case"ArrayPattern":case"ObjectPattern":case"MetaProperty":case"Literal":{let s=a(e,t)(n);return new i("ExponentiationExpression",n,0,[s],c)}case"BinaryExpression":{let{operator:s,left:p,right:h}=n;if("**"==s){let s=o(e,t)(p),a=r(e,t)(h);return new i("ExponentiationExpression",n,1,[s,a],c)}let l=a(e,t)(n);return new i("ExponentiationExpression",n,0,[l],c)}default:i.TODO(`${p} @ ExponentiationExpression`)}i.TODO("ExponentiationExpression")};e.exports=r},2645:(e,t,s)=>{const i=s(4147);e.exports=(e,t,r)=>n=>{const a=s(4043);let o=[e,t,r],c=n.loc;if("SequenceExpression"===n.type?n=n.expressions:Array.isArray(n)||(n=[n]),1==n.length){let s=a(e,t,r)(n[0]),p=new i("Expression",n[0],0,[s],o);return p.loc=c,p}{let s=a(e,t,r),p=i.fromList("Expression",n,s,o);return p.loc=c,p}}},458:(e,t,s)=>{const i=s(4147);e.exports=(e,t)=>r=>{const n=s(4043);let a=[e,t],o=n(e,!1,t)(r);return new i("ExpressionBody",r,0,[o],a)}},7848:(e,t,s)=>{const i=s(4147);e.exports=(e,t)=>r=>{const n=s(2645);let a=[e,t],o=n(!0,e,t)(r.expression);return new i("ExpressionStatement",r,0,[o],a)}},2399:(e,t,s)=>{const i=s(4147);e.exports=(e,t,r)=>n=>{let a=s(3396),o=[e,t,r],c=a(e,t,r)(n);return new i("Finally",n,0,[c],o)}},5950:(e,t,s)=>{const i=s(4147);e.exports=(e,t)=>r=>{const n=s(2904),a=s(5095),o=[e,t],{id:c}=r;if("Identifier"==c.type){let s=n(e,t)(c);return new i("ForBinding",r,0,[s],o)}if("ArrayPattern"===c.type||"ObjectPattern"===c.type){const s=a(e,t)(c);return new i("ForBinding",r,1,[s],o)}i.TODO(`${c.type} @ ForBinding`)}},3468:(e,t,s)=>{const i=s(4147);e.exports=(e,t)=>r=>{const n=s(5950),a=s(8638);let o=[e,t],{kind:c,declarations:p}=r,h=a(c),l=n(e,t)(p[0]);return new i("ForDeclaration",r,0,[h,l],o)}},7866:(e,t,s)=>{const i=s(4147);e.exports=(e,t,r)=>n=>{const a=s(6411),o=s(2645),c=s(3735),p=s(5950),h=s(3468),l=s(4043);let u,d,f,x,m=[e,t,r],{type:g,await:y,left:E,right:w,body:v}=n;return"VariableDeclaration"!=E.type?(u=0,d=a(e,t)(E)):"var"==E.kind?(u=1,d=p(e,t)(E.declarations[0])):(u=2,d=h(e,t)(E)),"ForOfStatement"==g?(u+=3,f=l(!0,e,t)(w)):f=o(!0,e,t)(w),y&&(u+=3),x=c(e,t,r)(v),new i("ForInOfStatement",n,u,[d,f,x],m)}},5949:(e,t,s)=>{const i=s(4147);e.exports=(e,t,r)=>n=>{const a=s(2645),o=s(3735),c=s(6027),p=s(693);let h,l=[e,t,r],{init:u,test:d,update:f,body:x}=n,m=null;if(null!=u)switch(u.type){case"VariableDeclaration":"var"==u.kind?(h=1,m=p(!1,e,t)(u)):(h=2,m=c(!1,e,t)(u));break;default:h=0,m=a(!1,e,t)(u)}let g=null;null!=d&&(g=a(!0,e,t)(d));let y=null;null!=f&&(y=a(!0,e,t)(f));let E=o(e,t,r)(x);return new i("ForStatement",n,h,[m,g,y,E],l)}},2860:(e,t,s)=>{const i=s(4147);e.exports=(e,t)=>r=>{const n=s(943);let a=[e,t],o=n(e,t)(r);return new i("FormalParameter",r,0,[o],a)}},5065:(e,t,s)=>{const i=s(4147);e.exports=(e,t)=>r=>{let n=s(2860)(e,t),a=[e,t];return i.fromList("FormalParameterList",r,n,a)}},9880:(e,t,s)=>{const i=s(4147);e.exports=(e,t)=>(r,n)=>{const a=s(7256),o=s(5065);let c=[e,t],p=r.length,h=r[p-1];if(0==p)return new i("FormalParameters",{},0,[],c);if(1==p&&"RestElement"==h.type){let s=a(e,t)(h);return new i("FormalParameters",h,1,[s],c)}if("RestElement"!=h.type){let s=o(e,t)(r);return new i("FormalParameters",s,n?3:2,[s],c)}{r.pop();let s=o(e,t)(r),n=a(e,t)(h),p=new i("FormalParameters",{},4,[s,n],c);return p.start=s.start,p.end=n.end,p}}},4815:(e,t,s)=>{const i=s(4147);e.exports=(e,t)=>r=>{const n=s(297);let a=[e,t],o=n(e,t)(r);return new i("FunctionBody",r,0,[o],a)}},650:(e,t,s)=>{const i=s(4147),{checkComma:r}=s(9329);e.exports=(e,t,n)=>a=>{const o=s(2904),c=s(9880),p=s(4815);let h=[e,t,n],{id:l,body:u}=a,d=r(l.end,u.start,")"),f=c(!1,!1)(a.params,d),x=p(!1,!1)(u);if(l){let s=o(e,t)(l);return new i("FunctionDeclaration",a,0,[s,f,x],h)}return new i("FunctionDeclaration",a,1,[f,x],h)}},7476:(e,t,s)=>{const i=s(4147),{checkComma:r}=s(9329);e.exports=e=>{const t=s(2904),n=s(9880),a=s(4815);let{id:o,params:c,body:p}=e,h=null;null!=o&&(h=t(!1,!1)(o));let l=r(e.start,p.start,")"),u=n(!1,!1)(c,l),d=a(!1,!1)(p);return new i("FunctionExpression",e,0,[h,u,d])}},7256:(e,t,s)=>{const i=s(4147);e.exports=(e,t)=>r=>{const n=s(2786);let a=[e,t],o=n(e,t)(r);return new i("FunctionRestParameter",r,0,[o],a)}},297:(e,t,s)=>{const i=s(4147);e.exports=(e,t)=>r=>{const n=s(5963);let a=[e,t],o=null;return r.body.length>0&&(o=n(e,t,!0)(r.body)),new i("FunctionStatementList",r,0,[o],a)}},1452:(e,t,s)=>{const i=s(4147);e.exports=e=>{let t=s(4815)(!0,!1)(e);return new i("GeneratorBody",e,0,[t])}},5407:(e,t,s)=>{const i=s(4147),{checkComma:r}=s(9329);e.exports=(e,t,n)=>a=>{const o=s(2904),c=s(9880),p=s(1452);let h=[e,t,n],{id:l,body:u}=a,d=r(l.end,u.start,")"),f=c(!0,!1)(a.params,d),x=p(u);if(l){let s=o(e,t)(l);return new i("GeneratorDeclaration",a,0,[s,f,x],h)}return new i("GeneratorDeclaration",a,1,[f,x],h)}},2170:(e,t,s)=>{const i=s(4147),{checkComma:r}=s(9329);e.exports=e=>{const t=s(2904),n=s(9880),a=s(1452);let{id:o,params:c,body:p}=e,h=null;null!=o&&(h=t(!0,!1)(o));let l=r(e.start,p.start,")"),u=n(!0,!1)(c,l),d=a(p);return new i("GeneratorExpression",e,0,[h,u,d])}},7962:(e,t,s)=>{const i=s(4147),{checkComma:r}=s(9329);e.exports=(e,t)=>n=>{const a=s(6086),o=s(2291),c=s(1452);let p=[e,t],h=a(e,t)(n),l=r(n.key.end,n.value.body.start,")"),u=o(!0,!1)(n.value.params,l),d=c(n.value.body);return new i("GeneratorMethod",n,0,[h,u,d],p)}},9655:(e,t,s)=>{const i=s(4147);e.exports=(e,t,r)=>n=>{const a=s(650),o=s(5407),c=s(6659),p=s(5462);let h,l,u=[e,t,r],{async:d,generator:f}=n;return d||f?!d&&f?(h=1,l=o(e,t,r)(n)):d&&!f?(h=2,l=c(e,t,r)(n)):(h=3,l=p(e,t,r)(n)):(h=0,l=a(e,t,r)(n)),new i("HoistableDeclaration",n,h,[l],u)}},3326:(e,t,s)=>{const i=s(4147);e.exports=e=>new i("Identifier",e,0,[e.name])},7168:(e,t,s)=>{const i=s(4147);e.exports=(e,t)=>r=>{let n=s(3326),a=[e,t];switch(r.name){case"yield":return new i("IdentifierReference",r,1,[],a);case"await":return new i("IdentifierReference",r,2,[],a);default:return new i("IdentifierReference",r,0,[n(r)],a)}}},4431:(e,t,s)=>{const i=s(4147);e.exports=(e,t,r)=>n=>{const a=s(2645),o=s(3735);let c=[e,t,r],{test:p,consequent:h,alternate:l}=n,u=a(!0,e,t)(p),d=o(e,t,r)(h);if(null!=l){let s=o(e,t,r)(l);return new i("IfStatement",n,0,[u,d,s],c)}return new i("IfStatement",n,1,[u,d],c)}},6038:(e,t,s)=>{const i=s(4147);e.exports=(e,t,r)=>n=>{let a=s(4043)(e,t,r)(n);return new i("Initializer",n,0,[a],[e,t,r])}},2069:(e,t,s)=>{const i=s(4147);e.exports=(e,t,r)=>n=>{const a=s(6782),o=s(8727),c=s(5949),p=s(7866);let h=[e,t,r],{type:l}=n;switch(l){case"DoWhileStatement":{let s=a(e,t,r)(n);return new i("IterationStatement",n,0,[s],h)}case"WhileStatement":{let s=o(e,t,r)(n);return new i("IterationStatement",n,1,[s],h)}case"ForStatement":{let s=c(e,t,r)(n);return new i("IterationStatement",n,2,[s],h)}case"ForOfStatement":case"ForInStatement":{let s=p(e,t,r)(n);return new i("IterationStatement",n,3,[s],h)}}}},4362:(e,t,s)=>{const i=s(4147);e.exports=(e,t)=>r=>{const n=s(3326);let a=[e,t];switch(r.name){case"yield":return new i("LabelIdentifier",r,1,[],a);case"await":return new i("LabelIdentifier",r,2,[],a);default:return new i("LabelIdentifier",r,0,[n(r)],a)}}},6792:(e,t,s)=>{const i=s(4147);e.exports=(e,t,r)=>n=>{const a=s(3735),o=s(650);let c=[e,t,r];switch(n.type){case"DoWhileStatement":case"WhileStatement":case"ForStatement":case"ExpressionStatement":case"BlockStatement":{let s=a(e,t,r)(n);return new i("LabelledItem",n,0,[s],c)}case"FunctionDeclaration":{let s=o(e,t,!1)(n);return new i("LabelledItem",n,1,[s],c)}default:i.TODO(`${n.type} @ LabelledItem`)}}},2199:(e,t,s)=>{const i=s(4147);e.exports=(e,t,r)=>n=>{const a=s(4362),o=s(6792);let c=[e,t,r];const p=a(e,t)(n.label),h=o(e,t,r)(n.body);return new i("LabelledStatement",n,0,[p,h],c)}},6411:(e,t,s)=>{const i=s(4147);e.exports=(e,t)=>r=>{const n=s(4817),a=s(3530);let o=[e,t],{type:c}=r;switch(c){case"MetaProperty":case"NewExpression":{let s=n(e,t)(r);return new i("LeftHandSideExpression",r,0,[s],o)}case"MemberExpression":{let s,c,p=r;for(;"MemberExpression"==p?.type;)p=p.object;return"CallExpression"==p?.type?(c=1,s=a(e,t)(r)):(c=0,s=n(e,t)(r)),new i("LeftHandSideExpression",r,c,[s],o)}case"ObjectExpression":case"ArrayExpression":case"FunctionExpression":case"ClassExpression":case"SequenceExpression":case"ParenthesizedExpression":case"TemplateLiteral":case"Identifier":case"ThisExpression":case"Literal":{let s=n(e,t)(r);return new i("LeftHandSideExpression",r,0,[s],o)}case"TaggedTemplateExpression":if("CallExpression"===r.tag.type){let s=a(e,t)(r);return new i("LeftHandSideExpression",r,1,[s],o)}{let s=n(e,t)(r);return new i("LeftHandSideExpression",r,0,[s],o)}case"CallExpression":{let s=a(e,t)(r);return new i("LeftHandSideExpression",r,1,[s],o)}case"ObjectPattern":case"ArrayPattern":{let s=n(e,t)(r);return new i("LeftHandSideExpression",r,0,[s],o)}default:i.TODO(`${c} @ LeftHandSideExpression`)}i.TODO("LeftHandSideExpression")}},8638:(e,t,s)=>{const i=s(4147);e.exports=e=>{let t=0;return"const"==e&&(t=1),new i("LetOrConst",{},t)}},9676:(e,t,s)=>{const i=s(4147);e.exports=(e,t,r)=>n=>{const a=s(2904),o=s(5095),c=s(6038),p=[e,t,r];if("Identifier"===n.id.type){let s=a(t,r)(n.id),o=null;return n.init&&(o=c(e,t,r)(n.init)),new i("LexicalBinding",n,0,[s,o],p)}if("ArrayPattern"===n.id.type||"ObjectPattern"===n.id.type){const s=o(t,r)(n.id),a=c(e,t,r)(n.init);return new i("LexicalBinding",n,1,[s,a],p)}i.TODO(`${n.id.type} @ LexicalBinding`)}},6027:(e,t,s)=>{const i=s(4147);e.exports=(e,t,r)=>n=>{const a=s(2690),o=s(8638);let c=[e,t,r],{kind:p,declarations:h}=n,l=o(p),u=a(e,t,r)(h);return new i("LexicalDeclaration",n,0,[l,u],c)}},806:(e,t,s)=>{const i=s(4147);e.exports=e=>{let{value:t,raw:s}=e;return null===t?new i("Literal",e,0,[s]):"boolean"==typeof t?new i("Literal",e,1,[s]):"number"==typeof t?new i("Literal",e,2,[s]):"string"==typeof t?new i("Literal",e,3,[s]):void i.TODO(`${t} @ Literal`)}},7949:(e,t,s)=>{const i=s(4147);e.exports=e=>{let{type:t,name:s,value:r,raw:n}=e;return"Identifier"==t?new i("LiteralPropertyName",e,0,[s]):"string"==typeof r?new i("LiteralPropertyName",e,1,[n]):"number"==typeof r?new i("LiteralPropertyName",e,2,[n]):void i.TODO(`${r} @ Literal`)}},1544:(e,t,s)=>{const i=s(4147);let r=(e,t,n)=>a=>{let o=s(8944),c=[e,t,n],{type:p}=a;switch(p){case"AwaitExpression":case"UnaryExpression":case"BinaryExpression":case"UpdateExpression":case"CallExpression":case"NewExpression":case"MemberExpression":case"ObjectExpression":case"ArrayExpression":case"FunctionExpression":case"ClassExpression":case"SequenceExpression":case"ParenthesizedExpression":case"TemplateLiteral":case"TaggedTemplateExpression":case"Identifier":case"ThisExpression":case"ArrayPattern":case"ObjectPattern":case"MetaProperty":case"Literal":{let s=o(e,t,n)(a);return new i("LogicalANDExpression",a,0,[s],c)}case"LogicalExpression":{let{operator:s,left:p,right:h}=a;if("&&"==s){let s=r(e,t,n)(p),l=o(e,t,n)(h);return new i("LogicalORExpression",a,1,[s,l],c)}{let s=o(e,t,n)(a);return new i("LogicalANDExpression",a,0,[s],c)}}default:i.TODO(`${p} @ LogicalANDExpression`)}i.TODO("LogicalANDExpression")};e.exports=r},5374:(e,t,s)=>{const i=s(4147);let r=(e,t,n)=>a=>{let o=s(1544),c=[e,t,n],{type:p}=a;switch(p){case"AwaitExpression":case"UnaryExpression":case"BinaryExpression":case"UpdateExpression":case"CallExpression":case"NewExpression":case"MemberExpression":case"ObjectExpression":case"ArrayExpression":case"FunctionExpression":case"ClassExpression":case"SequenceExpression":case"ParenthesizedExpression":case"TemplateLiteral":case"TaggedTemplateExpression":case"Identifier":case"ThisExpression":case"ArrayPattern":case"ObjectPattern":case"MetaProperty":case"Literal":{let s=o(e,t,n)(a);return new i("LogicalORExpression",a,0,[s],c)}case"LogicalExpression":{let{operator:s,left:p,right:h}=a;if("||"==s){let s=r(e,t,n)(p),l=o(e,t,n)(h);return new i("LogicalORExpression",a,1,[s,l],c)}{let s=o(e,t,n)(a);return new i("LogicalORExpression",a,0,[s],c)}}default:i.TODO(`${p} @ LogicalORExpression`)}i.TODO("LogicalORExpression")};e.exports=r},8262:(e,t,s)=>{const i=s(4147);let r=(e,t)=>n=>{const a=s(9095),o=s(3530),c=s(2645),p=s(8865),h=s(8740),l=s(270),u=s(7037);let d=[e,t],{type:f}=n;switch(f){case"ObjectExpression":case"ArrayExpression":case"FunctionExpression":case"ClassExpression":case"SequenceExpression":case"ParenthesizedExpression":case"TemplateLiteral":case"Identifier":case"ThisExpression":case"ObjectPattern":case"ArrayPattern":case"Literal":{let s=a(e,t)(n);return new i("MemberExpression",n,0,[s],d)}case"TaggedTemplateExpression":{let s=r(e,t)(n.tag),a=u(e,t,!0)(n.quasi);return new i("MemberExpression",n,3,[s,a],d)}case"NewExpression":{let s=r(e,t)(n.callee),a=l(e,t)(n.arguments);return new i("MemberExpression",n,6,[s,a],d)}case"MetaProperty":{let e=h(n);return new i("MemberExpression",n,5,[e],d)}case"MemberExpression":{let{object:s,meta:a,property:l,computed:u}=n;if(a){let s=h(e,t)(n);return new i("MemberExpression",n,5,[s],d)}if(s&&"Super"==s.type){let s=p(e,t)(n);return new i("MemberExpression",n,4,[s],d)}if(s&&"CallExpression"===s.type)return u&&i.TODO("computed @ MemberExpression"),o(e,t)(n);if(s&&u){let a=r(e,t)(s),o=c(!0,e,t)(l);return new i("MemberExpression",n,1,[a,o],d)}if(s&&!u){let a=r(e,t)(s),o=l.name;return new i("MemberExpression",n,2,[a,o],d)}i.TODO("MemberExpression");break}default:i.TODO(`${f} @ MemberExpression`)}};e.exports=r},8740:(e,t,s)=>{const i=s(4147);e.exports=e=>{const t=s(647);switch(e.meta.name){case"new":return new i("MetaProperty",e,0,[t(e)],[]);default:i.TODO(`${e.meta.name} @ MetaProperty`)}}},8162:(e,t,s)=>{const i=s(4147),{checkComma:r}=s(9329);e.exports=(e,t)=>n=>{const a=s(6086),o=s(2291),c=s(7962),p=s(8931),h=s(6354),l=s(4815),u=s(4145);let d=[e,t],{kind:f,key:x,value:m,generator:g,async:y,computed:E}=n;switch(f){case"constructor":case"init":case"method":if(y=y||m.async,g=g||m.generator,y||g){if(!y&&g){let s=c(e,t)(n);return new i("MethodDefinition",n,1,[s],d)}if(y&&!g){let s=p(e,t)(n);return new i("MethodDefinition",n,2,[s],d)}{let s=h(e,t)(n);return new i("MethodDefinition",n,3,[s],d)}}{let s=a(e,t)(n),c=r(n.key.end,n.value.body.start,")"),p=o(!1,!1)(m.params,c),h=l(!1,!1)(m.body);return new i("MethodDefinition",n,0,[s,p,h],d)}case"get":{let s=a(e,t)({key:x,loc:x.loc,computed:E}),r=l(!1,!1)(m.body);return new i("MethodDefinition",n,4,[s,r],d)}case"set":{let s=a(e,t)({key:x,loc:x.loc,computed:E}),r=u()(m.params[0]),o=l(!1,!1)(m.body);return new i("MethodDefinition",n,5,[s,r,o],d)}default:i.TODO(`${f} @ MethodDefinition`)}}},2659:(e,t,s)=>{const i=s(4147);let r=(e,t)=>n=>{let a=s(5952),o=[e,t],{type:c}=n;switch(c){case"AwaitExpression":case"UnaryExpression":case"UpdateExpression":case"CallExpression":case"NewExpression":case"MemberExpression":case"ObjectExpression":case"ArrayExpression":case"FunctionExpression":case"ClassExpression":case"SequenceExpression":case"ParenthesizedExpression":case"TemplateLiteral":case"TaggedTemplateExpression":case"Identifier":case"ThisExpression":case"ArrayPattern":case"ObjectPattern":case"MetaProperty":case"Literal":{let s=a(e,t)(n);return new i("MultiplicativeExpression",n,0,[s],o)}case"BinaryExpression":{let{index:s,children:c}=i.getBinary(n,["*","/","%"],r(e,t),a(e,t));if(s>0){let[e,t]=c;c=[e,new i("MultiplicativeOperator",{},s-1),t],s=1}return new i("AdditiveExpression",n,s,c,o)}default:i.TODO(`${c} @ MultiplicativeExpression`)}i.TODO("MultiplicativeExpression")};e.exports=r},4817:(e,t,s)=>{const i=s(4147);let r=(e,t)=>n=>{let a=s(8262),o=[e,t],{type:c}=n;switch(c){case"MemberExpression":case"ObjectExpression":case"ArrayExpression":case"FunctionExpression":case"ClassExpression":case"SequenceExpression":case"ParenthesizedExpression":case"TemplateLiteral":case"TaggedTemplateExpression":case"Identifier":case"ThisExpression":case"ObjectPattern":case"ArrayPattern":case"MetaProperty":case"Literal":{let s=a(e,t)(n);return new i("NewExpression",n,0,[s],o)}case"NewExpression":{let{callee:s}=n;if(s.end!=n.end){let s=a(e,t)(n);return new i("NewExpression",n,0,[s],o)}{let a=r(e,t)(s);return new i("NewExpression",n,1,[a],o)}}default:i.TODO(`${c} @ NewExpression`)}i.TODO("NewExpression")};e.exports=r},647:(e,t,s)=>{const i=s(4147);e.exports=e=>new i("NewTarget",e,0,[],[])},753:(e,t,s)=>{const i=s(4147),{checkComma:r}=s(9329);e.exports=(e,t)=>n=>{let a=s(2814),o=s(846),c=[e,t],p=n.properties;if(0===p.length)return new i("ObjectBindingPattern",n,0,[],c);{let s=p.pop();const h=r(n.start,n.end,"}");if(null===s||h){h&&p.push(s);let r=o(e,t)(p);return new i("ObjectBindingPattern",n,3,[r,null],c)}if("RestElement"===s.type){let r=a(e,t)(s);if(0===p.length)return new i("ObjectBindingPattern",n,1,[r],c);{let s=o(e,t)(p);return new i("ObjectBindingPattern",n,3,[s,r],c)}}{p.push(s);let r=o(e,t)(p);return new i("ObjectBindingPattern",n,2,[r],c)}}}},2244:(e,t,s)=>{const i=s(4147),{checkComma:r}=s(9329);e.exports=(e,t)=>n=>{let a=s(744),o=[e,t],{properties:c}=n;if(0==c.length)return new i("ObjectLiteral",n,0,[],o);{let s=a(e,t)(n);const c=r(n.start,n.end,"}");return new i("ObjectLiteral",n,c?2:1,[s],o)}}},9095:(e,t,s)=>{const i=s(4147);e.exports=(e,t)=>r=>{const n=s(806),a=s(7168),o=s(8365),c=s(2244),p=s(7476),h=s(6359),l=s(2170),u=s(4417),d=s(8354),f=s(7037),x=s(4947);let m=[e,t],{type:g}=r;switch(g){case"ThisExpression":return new i("PrimaryExpression",r,0,[],m);case"Identifier":{let s=a(e,t)(r);return new i("PrimaryExpression",r,1,[s],m)}case"Literal":if(r.regex){let e=r.raw;return new i("PrimaryExpression",r,10,[e],m)}{let e=n(r);return new i("PrimaryExpression",r,2,[e],m)}case"ArrayPattern":case"ArrayExpression":{let s=o(e,t)(r);return new i("PrimaryExpression",r,3,[s],m)}case"ObjectPattern":case"ObjectExpression":{let s=c(e,t)(r);return new i("PrimaryExpression",r,4,[s],m)}case"FunctionExpression":{let e,t,{async:s,generator:n}=r;return s||n?!s&&n?(e=7,t=l(r)):s&&!n?(e=8,t=u(r)):(e=9,t=d(r)):(e=5,t=p(r)),new i("PrimaryExpression",r,e,[t],m)}case"ClassExpression":{let s=h(e,t)(r);return new i("PrimaryExpression",r,6,[s],m)}case"TemplateLiteral":{let s=f(e,t,!1)(r);return new i("PrimaryExpression",r,11,[s],m)}case"SequenceExpression":case"ParenthesizedExpression":{let s=x(e,t)(r);return new i("PrimaryExpression",r,12,[s],m)}default:i.TODO(`${g} @ PrimaryExpression`)}i.TODO("PrimaryExpression")}},8968:(e,t,s)=>{const i=s(4147);e.exports=(e,t)=>r=>{let n=s(7168),a=s(4461),o=s(6086),c=s(8162),p=s(4043),h=[e,t],{type:l}=r;if("Property"===l){let{method:s,shorthand:l,key:u,value:d}=r;switch(r.kind){case"get":case"set":{let s=c(e,t)(r);return new i("PropertyDefinition",r,3,[s],h)}case"init":if(l&&"AssignmentPattern"===d.type){let s=a(e,t)(d);return new i("PropertyDefinition",r,1,[s],h)}if(l){let s=n(e,t)(u);return new i("PropertyDefinition",r,0,[s],h)}if(!s){let s=o(e,t)(r),n=p(!0,e,t)(d);return new i("PropertyDefinition",r,2,[s,n],h)}if(s){let s=c(e,t)(r);return new i("PropertyDefinition",r,3,[s],h)}return i.TODO("init @ PropertyDefinition");default:i.TODO(`${r.kind} @ PropertyDefinition`)}}else{if("RestElement"===l||"SpreadElement"===l){let{argument:s}=r,n=p(!0,e,t)(s);return new i("PropertyDefinition",r,4,[n],h)}i.TODO(`${r.type} @ PropertyDefinition`)}}},744:(e,t,s)=>{const i=s(4147);e.exports=(e,t)=>r=>{let n=s(8968)(e,t),a=[e,t],{properties:o}=r;return i.fromList("PropertyDefinitionList",o,n,a)}},6086:(e,t,s)=>{const i=s(4147);e.exports=(e,t)=>r=>{let n=s(7949),a=s(6527),o=[e,t],{computed:c,key:p}=r;if(c){let s=a(e,t)(p);return new i("PropertyName",r,1,[s],o)}{let e=n(p);return new i("PropertyName",r,0,[e],o)}}},4145:(e,t,s)=>{const i=s(4147);e.exports=()=>e=>{let t=s(2860)(!1,!1)(e);return new i("PropertySetParameterList",e,0,[t],[])}},5126:(e,t,s)=>{const i=s(4147);let r=(e,t,n)=>a=>{let o=s(2134),c=[e,t,n],{type:p}=a;switch(p){case"AwaitExpression":case"UnaryExpression":case"UpdateExpression":case"CallExpression":case"NewExpression":case"MemberExpression":case"ObjectExpression":case"ArrayExpression":case"FunctionExpression":case"ClassExpression":case"SequenceExpression":case"ParenthesizedExpression":case"TemplateLiteral":case"TaggedTemplateExpression":case"Identifier":case"ThisExpression":case"ArrayPattern":case"ObjectPattern":case"MetaProperty":case"Literal":{let e=o(t,n)(a);return new i("RelationalExpression",a,0,[e],c)}case"BinaryExpression":if("in"==a.operator){let{left:e,right:s}=a,p=r(!0,t,n)(e),h=o(t,n)(s);return new i("RelationalExpression",a,6,[p,h],c)}{let{index:s,children:p}=i.getBinary(a,["<",">","<=",">=","instanceof"],r(e,t,n),o(t,n));return new i("RelationalExpression",a,s,p,c)}default:i.TODO(`${p} @ RelationalExpression`)}i.TODO("RelationalExpression")};e.exports=r},8547:(e,t,s)=>{const i=s(4147);e.exports=(e,t)=>r=>{const n=s(2645);let a=[e,t],{argument:o}=r;if(null==o)return new i("ReturnStatement",r,0,[],a);{let s=n(!0,e,t)(o);return new i("ReturnStatement",r,1,[s],a)}}},581:(e,t,s)=>{const i=s(4147);e.exports=e=>{const t=s(2158);let r=null;return e.body.length>0&&(r=t(e)),new i("Script",e,0,[r])}},2158:(e,t,s)=>{const i=s(4147);e.exports=e=>{let t=s(5963)(!1,!1,!1)(e.body);return new i("ScriptBody",e,0,[t])}},2134:(e,t,s)=>{const i=s(4147);let r=(e,t)=>n=>{let a=s(8422),o=[e,t],{type:c}=n;switch(c){case"AwaitExpression":case"UnaryExpression":case"UpdateExpression":case"CallExpression":case"NewExpression":case"MemberExpression":case"ObjectExpression":case"ArrayExpression":case"FunctionExpression":case"ClassExpression":case"SequenceExpression":case"ParenthesizedExpression":case"TemplateLiteral":case"TaggedTemplateExpression":case"Identifier":case"ThisExpression":case"ArrayPattern":case"ObjectPattern":case"MetaProperty":case"Literal":{let s=a(e,t)(n);return new i("ShiftExpression",n,0,[s],o)}case"BinaryExpression":{let{index:s,children:c}=i.getBinary(n,["<<",">>",">>>"],r(e,t),a(e,t));return new i("ShiftExpression",n,s,c,o)}default:i.TODO(`${c} @ ShiftExpression`)}i.TODO("ShiftExpression")};e.exports=r},6135:(e,t,s)=>{const i=s(4147);e.exports=(e,t,r)=>n=>{let a=s(5374),o=[e,t,r],{type:c}=n;switch(c){case"AwaitExpression":case"UnaryExpression":case"LogicalExpression":case"BinaryExpression":case"UpdateExpression":case"CallExpression":case"NewExpression":case"MemberExpression":case"ObjectExpression":case"ArrayExpression":case"FunctionExpression":case"ClassExpression":case"SequenceExpression":case"ParenthesizedExpression":case"TemplateLiteral":case"TaggedTemplateExpression":case"Identifier":case"ThisExpression":case"ArrayPattern":case"ObjectPattern":case"MetaProperty":case"Literal":{let s=a(e,t,r)(n);return new i("ShortCircuitExpression",n,0,[s],o)}default:i.TODO(`${c} @ ShortCircuitExpression`)}i.TODO("ShortCircuitExpression")}},2122:(e,t,s)=>{const i=s(4147);e.exports=(e,t)=>r=>{const n=s(2904),a=s(6038);let o=[e,t],{type:c,left:p,right:h}=r;if("Identifier"==c){let s=n(e,t)(r);return new i("SingleNameBinding",r,0,[s,null],o)}{"AssignmentPattern"===h.type&&(p=h.left,h=h.right);let s=n(e,t)(p),c=a(!0,e,t)(h);return new i("SingleNameBinding",r,0,[s,c],o)}}},843:(e,t,s)=>{const i=s(4147);e.exports=(e,t)=>r=>{let n=s(4043),a=[e,t],o=n(!0,e,t)(r.argument);return new i("SpreadElement",r,0,[o],a)}},3735:(e,t,s)=>{const i=s(4147);e.exports=(e,t,r)=>n=>{const a=s(8901),o=s(5610),c=s(3900),p=s(7848),h=s(4431),l=s(8473),u=s(1844),d=s(6556),f=s(8547),x=s(3247),m=s(2199),g=s(1188),y=s(3090),E=s(310);let w=["BlockStatement","VariableStatement","EmptyStatement","ExpressionStatement","IfStatement","BreakableStatement","ContinueStatement","BreakStatement","ReturnStatement","WithStatement","LabeledStatement","ThrowStatement","TryStatement","DebuggerStatement"],v=[a(e,t,r),o(e,t),c,p(e,t),h(e,t,r),l(e,t,r),u(e,t),d(e,t),f(e,t),x(e,t,r),m(e,t,r),g(e,t),y(e,t,r),E],b=[e,t,r];switch(n.type){case"VariableDeclaration":{let s=o(e,t)(n);return new i("Statement",n,1,[s],b)}case"SwitchStatement":case"WhileStatement":case"DoWhileStatement":case"ForStatement":case"ForInStatement":case"ForOfStatement":{let s=l(e,t,r)(n);return new i("Statement",n,5,[s],b)}default:{let e=i.getRhs(w,v,n);null===e&&i.TODO(`${n.type} @ Statement`);let{index:t,child:s}=e;return new i("Statement",n,t,[s],b)}}}},5963:(e,t,s)=>{const i=s(4147);e.exports=(e,t,r)=>n=>{let a=s(6653)(e,t,r),o=[e,t,r];return i.fromList("StatementList",n,a,o)}},6653:(e,t,s)=>{const i=s(4147);e.exports=(e,t,r)=>n=>{const a=s(3735),o=s(3319);let c=[e,t,r],{type:p,kind:h}=n;if(p.endsWith("Statement")||"VariableDeclaration"===p&&"var"===h){let s=a(e,t,r)(n);return new i("StatementListItem",n,0,[s],c)}{let s=o(e,t)(n);return new i("StatementListItem",n,1,[s],c)}}},5691:(e,t,s)=>{const i=s(4147);e.exports=(e,t,r)=>n=>{const a=s(2645),o=s(5415);let c=[e,t,r],{quasis:p,expressions:h}=n,l="`"+p.shift().value.raw+"${",u=a(!0,e,t)(h.shift()),d=o(e,t,r)(n);return new i("SubstitutionTemplate",n,0,[l,u,d],c)}},1916:(e,t,s)=>{const i=s(4147);e.exports=(e,t)=>r=>{const n=s(270);let a=[e,t];const o=n(e,t)(r.arguments);return new i("SuperCall",r,0,[o],a)}},8865:(e,t,s)=>{const i=s(4147);e.exports=(e,t)=>r=>{const n=s(2645);let a=[e,t],{object:o,property:c,computed:p}=r;if("Super"===o.type){if("Identifier"!==c.type||p){let s=n(!0,e,t)(c);return new i("SuperProperty",c,0,[s],a)}return new i("SuperProperty",r,1,[c.name],a)}i.TODO("SuperProperty")}},7208:(e,t,s)=>{const i=s(4147);e.exports=(e,t,r)=>n=>{const a=s(2645),o=s(1633);let c=[e,t,r],p=a(!0,e,t)(n.discriminant),h=o(e,t,r)(n.cases);return new i("SwitchStatement",n,0,[p,h],c)}},7037:(e,t,s)=>{const i=s(4147);e.exports=(e,t,r)=>n=>{const a=s(5691);let o=[e,t,r],{quasis:c,expressions:p}=n;if(0==p.length&&1==c.length){let e="`"+c[0].value.raw+"`";return new i("TemplateLiteral",n,0,[e],o)}{let s=a(e,t,r)(n);return new i("TemplateLiteral",n,1,[s],o)}}},8551:(e,t,s)=>{const i=s(4147);let r=(e,t,n)=>a=>{const o=s(2645);let c=[e,t,n],{quasis:p,expressions:h}=a,l="}"+p.pop().value.raw+"${",u=o(!0,e,t)(h.pop());if(0==p.length)return new i("TemplateMiddleList",a,0,[l,u],c);{let s=r(e,t,n)(a);return new i("TemplateMiddleList",a,1,[s,l,u],c)}};e.exports=r},5415:(e,t,s)=>{const i=s(4147);e.exports=(e,t,r)=>n=>{const a=s(8551);let o=[e,t,r],{quasis:c,expressions:p}=n,h="}"+c.pop().value.raw+"`";if(0==p.length)return new i("TemplateSpans",n,0,[h],o);{let s=a(e,t,r)(n);return new i("TemplateSpans",n,1,[s,h],o)}}},1188:(e,t,s)=>{const i=s(4147);e.exports=(e,t)=>r=>{const n=s(2645);let a=[e,t],o=n(!0,e,t)(r.argument);return new i("ThrowStatement",r,0,[o],a)}},3090:(e,t,s)=>{const i=s(4147);e.exports=(e,t,r)=>n=>{const a=s(3396),o=s(570),c=s(2399);let p=[e,t,r],{block:h,handler:l,finalizer:u}=n,d=a(e,t,r)(h);if(null!=l&&null==u){let s=o(e,t,r)(l);return new i("TryStatement",n,0,[d,s],p)}if(null==l&&null!=u){let s=c(e,t,r)(u);return new i("TryStatement",n,1,[d,s],p)}if(null!=l&&null!=u){let s=o(e,t,r)(l),a=c(e,t,r)(u);return new i("TryStatement",n,2,[d,s,a],p)}i.TODO("TryStatement")}},3778:(e,t,s)=>{const i=s(4147);let r=(e,t)=>n=>{let a=s(9039),o=s(4118),c=[e,t],{type:p}=n;switch(p){case"UpdateExpression":case"CallExpression":case"NewExpression":case"MemberExpression":case"ObjectExpression":case"ArrayExpression":case"FunctionExpression":case"ClassExpression":case"SequenceExpression":case"ParenthesizedExpression":case"TemplateLiteral":case"TaggedTemplateExpression":case"Identifier":case"ThisExpression":case"ArrayPattern":case"ObjectPattern":case"MetaProperty":case"Literal":{let s=a(e,t)(n);return new i("UnaryExpression",n,0,[s],c)}case"UnaryExpression":{let s,{operator:a,argument:o}=n;switch(a){case"delete":s=1;break;case"void":s=2;break;case"typeof":s=3;break;case"+":s=4;break;case"-":s=5;break;case"~":s=6;break;case"!":s=7;break;default:throw`[Error] unknown unary operator: ${a}`}let p=r(e,t)(o);return new i("UnaryExpression",n,s,[p],c)}case"AwaitExpression":{let t=o(e)(n);return new i("UnaryExpression",n,8,[t],c)}default:i.TODO(`${p} @ UnaryExpression`)}i.TODO("UnaryExpression")};e.exports=r},2291:(e,t,s)=>{const i=s(4147);e.exports=(e,t)=>(r,n)=>{const a=s(9880);let o=[e,t],c=a(e,t)(r,n);return new i("UniqueFormalParameters",r,0,[c],o)}},9039:(e,t,s)=>{const i=s(4147);e.exports=(e,t)=>r=>{const n=s(6411),a=s(3778);let o=[e,t],{type:c}=r;switch(c){case"CallExpression":case"NewExpression":case"MemberExpression":case"ObjectExpression":case"ArrayExpression":case"FunctionExpression":case"ClassExpression":case"SequenceExpression":case"ParenthesizedExpression":case"TemplateLiteral":case"TaggedTemplateExpression":case"Identifier":case"ThisExpression":case"ArrayPattern":case"ObjectPattern":case"MetaProperty":case"Literal":{let s=n(e,t)(r);return new i("UpdateExpression",r,0,[s],o)}case"UpdateExpression":{let s,c,{prefix:p,operator:h,argument:l}=r;return p?(s=a(e,t)(l),"++"==h?c=3:"--"==h?c=4:i.TODO(`${h}x @ UpdateExpression`)):(s=n(e,t)(l),"++"==h?c=1:"--"==h?c=2:i.TODO(`x${h} @ UpdateExpression`)),new i("UpdateExpression",r,c,[s],o)}default:i.TODO(`${c} @ UpdateExpression`)}i.TODO("UpdateExpression")}},8392:(e,t,s)=>{const i=s(4147);e.exports=(e,t,r)=>n=>{let a=s(2904),o=s(6038),c=s(5095),p=[e,t,r];if("Identifier"===n.id.type){let s=a(t,r)(n.id),c=null;return n.init&&(c=o(e,t,r)(n.init)),new i("VariableDeclaration",n,0,[s,c],p)}{let s=c(t,r)(n.id),a=o(e,t,r)(n.init);return new i("VariableDeclaration",n,1,[s,a],p)}}},693:(e,t,s)=>{const i=s(4147);e.exports=(e,t,r)=>n=>{let a=s(8392)(e,t,r),o=[e,t,r];return i.fromList("VariableDeclarationList",n.declarations,a,o)}},5610:(e,t,s)=>{const i=s(4147);e.exports=(e,t)=>r=>{let n=s(693)(!0,e,t)(r);return new i("VariableStatement",r,0,[n],[e,t])}},8727:(e,t,s)=>{const i=s(4147);e.exports=(e,t,r)=>n=>{const a=s(2645),o=s(3735);let c=[e,t,r],p=a(!0,e,t)(n.test),h=o(e,t,r)(n.body);return new i("WhileStatement",n,0,[p,h],c)}},3247:(e,t,s)=>{const i=s(4147);e.exports=(e,t,r)=>n=>{const a=s(2645),o=s(3735);let c=[e,t,r],p=a(!0,e,t)(n.object),h=o(e,t,r)(n.body);return new i("WithStatement",n,0,[p,h],c)}},1542:(e,t,s)=>{const i=s(4147);e.exports=(e,t)=>r=>{const n=s(4043);let a=[e,t],{argument:o,delegate:c}=r;if(null==o)return new i("YieldExpression",r,0,[],a);if(c){let s=n(e,!0,t)(o);return new i("YieldExpression",r,2,[s],a)}{let s=n(e,!0,t)(o);return new i("YieldExpression",r,1,[s],a)}}},9613:(e,t,s)=>{var i={"./es2021/Script":581};function r(e){var t=n(e);return s(t)}function n(e){if(!s.o(i,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return i[e]}r.keys=function(){return Object.keys(i)},r.resolve=n,e.exports=r,r.id=9613}},t={};function s(i){var r=t[i];if(void 0!==r)return r.exports;var n=t[i]={exports:{}};return e[i].call(n.exports,n,n.exports,s),n.exports}s.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t);var i=s(2570);ESParse=i})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,