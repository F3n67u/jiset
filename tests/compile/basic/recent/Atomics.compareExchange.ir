{
  app __x0__ = (ValidateIntegerTypedArray typedArray)
  let buffer = [? __x0__]
  let block = buffer.ArrayBufferData
  app __x1__ = (ValidateAtomicAccess typedArray index)
  let indexedPosition = [? __x1__]
  let arrayTypeName = typedArray.TypedArrayName
  if (= typedArray.ContentType CONST_BigInt) {
    app __x2__ = (ToBigInt expectedValue)
    let expected = [? __x2__]
    app __x3__ = (ToBigInt replacementValue)
    let replacement = [? __x3__]
  } else {
    app __x4__ = (ToIntegerOrInfinity expectedValue)
    let expected = [? __x4__]
    app __x5__ = (ToIntegerOrInfinity replacementValue)
    let replacement = [? __x5__]
  }
  app __x6__ = (IsDetachedBuffer buffer)
  if (= __x6__ true) throw TypeError else {}
  let elementType = CONST_Int8
  ??? "Let id:{elementSize} be the Element Size value specified in link:{unhandled: table-the-typedarray-constructors} for Element Type id:{elementType} ."
  let isLittleEndian = AGENT.LittleEndian
  app __x7__ = (NumericToRawBytes elementType expected isLittleEndian)
  let expectedBytes = __x7__
  app __x8__ = (NumericToRawBytes elementType replacement isLittleEndian)
  let replacementBytes = __x8__
  app __x9__ = (IsSharedArrayBuffer buffer)
  if (= __x9__ true) {
    let execution = AGENT.CandidateExecution
    ??? "Let id:{eventList} be the [ [ EventList ] ] field of the element in id:{execution} . [ [ EventsRecords ] ] whose [ [ AgentSignifier ] ] is AgentSignifier ( ) ."
    ??? "Let id:{rawBytesRead} be a List of length id:{elementSize} whose elements are nondeterministically chosen byte values ."
    app __x10__ = (ByteListEqual rawBytesRead expectedBytes)
    if (= __x10__ true) {
      ??? "Let id:{second} be a new read - modify - write modification function with parameters ( id:{oldBytes} , id:{newBytes} ) that captures nothing and performs the following steps atomically when called : in:{} out:{}"
      let event = (new ReadModifyWriteSharedMemory("Order" -> CONST_SeqCst, "NoTear" -> true, "Block" -> block, "ByteIndex" -> indexedPosition, "ElementSize" -> elementSize, "Payload" -> replacementBytes, "ModifyOp" -> second))
    } else let event = (new ReadSharedMemory("Order" -> CONST_SeqCst, "NoTear" -> true, "Block" -> block, "ByteIndex" -> indexedPosition, "ElementSize" -> elementSize))
    append event -> eventList
    append (new ChosenValueRecord("Event" -> event, "ChosenValue" -> rawBytesRead)) -> execution.ChosenValues
  } else {
    ??? "Let id:{rawBytesRead} be a List of length id:{elementSize} whose elements are the sequence of id:{elementSize} bytes starting with id:{block} [ id:{indexedPosition} ] ."
    app __x11__ = (ByteListEqual rawBytesRead expectedBytes)
    if (= __x11__ true) ??? "Store the individual bytes of id:{replacementBytes} into id:{block} , starting at id:{block} [ id:{indexedPosition} ] ." else {}
  }
  app __x12__ = (RawBytesToNumeric elementType rawBytesRead isLittleEndian)
  return __x12__
}