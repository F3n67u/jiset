digraph {
  node16054 [shape=diamond, label=<<font color="black">(= __x1__ false)</font>> color="black" fillcolor="white" style=filled]
  node16039 [shape=diamond, label=<<font color="black">(= onlyInt32 absent)</font>> color="black" fillcolor="white" style=filled]
  node16044 [shape=diamond, label=<<font color="black">(= typedArray.TypedArrayName absent)</font>> color="black" fillcolor="white" style=filled]
  node16040 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">onlyInt32 = false</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16055 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16051 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16048 [shape=diamond, label=<<font color="black">(! (= typeName &quot;Int32Array&quot;))</font>> color="black" fillcolor="white" style=filled]
  node16043 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16037 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node16056 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">11:return buffer</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16047 [shape=diamond, label=<<font color="black">(= onlyInt32 true)</font>> color="black" fillcolor="white" style=filled]
  node16049 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16053 [shape=cds, label=<<font color="black">10:app __x1__ = (IsSharedArrayBuffer buffer)</font>> color="black" fillcolor="white" style=filled]
  node16038 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node16041 [shape=cds, label=<<font color="black">1:app __x0__ = (Type typedArray)</font>> color="black" fillcolor="white" style=filled]
  node16046 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">3:let typeName = typedArray.TypedArrayName</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16050 [shape=diamond, label=<<font color="black">(! (|| (|| (|| (|| (|| (= typeName &quot;Int8Array&quot;) (= typeName &quot;Uint8Array&quot;)) (= typeName &quot;Int16Array&quot;)) (= typeName &quot;Uint16Array&quot;)) (= typeName &quot;Int32Array&quot;)) (= typeName &quot;Uint32Array&quot;)))</font>> color="black" fillcolor="white" style=filled]
  node16045 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16052 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">8:assert (! (= typedArray.ViewedArrayBuffer absent))</td></tr>
      <tr><td align="left">9:let buffer = typedArray.ViewedArrayBuffer</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16042 [shape=diamond, label=<<font color="black">(! (= __x0__ Object))</font>> color="black" fillcolor="white" style=filled]
  node16044 -> node16045 [label=<<font color="black">true</font>> color="black"]
  node16044 -> node16046 [label=<<font color="black">false</font>> color="black"]
  node16037 -> node16039 [ color="black"]
  node16052 -> node16053 [ color="black"]
  node16045 -> node16046 [ color="black"]
  node16050 -> node16051 [label=<<font color="black">true</font>> color="black"]
  node16050 -> node16052 [label=<<font color="black">false</font>> color="black"]
  node16053 -> node16054 [ color="black"]
  node16041 -> node16042 [ color="black"]
  node16049 -> node16052 [ color="black"]
  node16056 -> node16038 [ color="black"]
  node16039 -> node16040 [label=<<font color="black">true</font>> color="black"]
  node16039 -> node16041 [label=<<font color="black">false</font>> color="black"]
  node16042 -> node16043 [label=<<font color="black">true</font>> color="black"]
  node16042 -> node16044 [label=<<font color="black">false</font>> color="black"]
  node16055 -> node16056 [ color="black"]
  node16047 -> node16048 [label=<<font color="black">true</font>> color="black"]
  node16047 -> node16050 [label=<<font color="black">false</font>> color="black"]
  node16043 -> node16044 [ color="black"]
  node16051 -> node16052 [ color="black"]
  node16054 -> node16055 [label=<<font color="black">true</font>> color="black"]
  node16054 -> node16056 [label=<<font color="black">false</font>> color="black"]
  node16046 -> node16047 [ color="black"]
  node16048 -> node16049 [label=<<font color="black">true</font>> color="black"]
  node16048 -> node16052 [label=<<font color="black">false</font>> color="black"]
  node16040 -> node16041 [ color="black"]
}
