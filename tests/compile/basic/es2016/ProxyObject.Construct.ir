{
  let handler = O.ProxyHandler
  if (= handler null) throw TypeError else {}
  assert (= (typeof handler) Object)
  let target = O.ProxyTarget
  app __x0__ = (GetMethod handler "construct")
  let trap = [? __x0__]
  if (= trap undefined) {
    assert (! (= target.Construct absent))
    app __x1__ = (Construct target argumentsList newTarget)
    return [? __x1__]
  } else {}
  app __x2__ = (CreateArrayFromList argumentsList)
  let argArray = __x2__
  app __x3__ = (Call trap handler (new [target, argArray, newTarget]))
  let newObj = [? __x3__]
  if (! (= (typeof newObj) Object)) throw TypeError else {}
  return newObj
}