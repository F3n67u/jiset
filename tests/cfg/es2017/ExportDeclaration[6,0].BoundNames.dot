digraph {
  node10010 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node10014 [shape=diamond, label=<<font color="black">(! (contains declarationNames &quot;*default*&quot;))</font>> color="black" fillcolor="white" style=filled]
  node10015 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">append &quot;*default*&quot; -&gt; declarationNames</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10011 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node10016 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">2:return declarationNames</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10012 [shape=cds, label=<<font color="black">0:access __x0__ = (ClassDeclaration &quot;BoundNames&quot;)</font>> color="black" fillcolor="white" style=filled]
  node10013 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let declarationNames = __x0__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10014 -> node10015 [label=<<font color="black">true</font>> color="black"]
  node10014 -> node10016 [label=<<font color="black">false</font>> color="black"]
  node10010 -> node10012 [ color="black"]
  node10013 -> node10014 [ color="black"]
  node10012 -> node10013 [ color="black"]
  node10016 -> node10011 [ color="black"]
  node10015 -> node10016 [ color="black"]
}
