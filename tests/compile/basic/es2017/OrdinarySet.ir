{
  app __x0__ = (IsPropertyKey P)
  assert (= __x0__ true)
  app __x1__ = (O.GetOwnProperty O P)
  let ownDesc = [? __x1__]
  if (= ownDesc undefined) {
    app __x2__ = (O.GetPrototypeOf O)
    let parent = [? __x2__]
    if (! (= parent null)) {
      app __x3__ = (parent.Set parent P V Receiver)
      return [? __x3__]
    } else ownDesc = (new PropertyDescriptor("Value" -> undefined, "Writable" -> true, "Enumerable" -> true, "Configurable" -> true))
  } else {}
  app __x4__ = (IsDataDescriptor ownDesc)
  if (= __x4__ true) {
    if (= ownDesc.Writable false) return false else {}
    if (! (= (typeof Receiver) Object)) return false else {}
    app __x5__ = (Receiver.GetOwnProperty Receiver P)
    let existingDescriptor = [? __x5__]
    if (! (= existingDescriptor undefined)) {
      app __x6__ = (IsAccessorDescriptor existingDescriptor)
      if (= __x6__ true) return false else {}
      if (= existingDescriptor.Writable false) return false else {}
      let valueDesc = (new PropertyDescriptor("Value" -> V))
      app __x7__ = (Receiver.DefineOwnProperty Receiver P valueDesc)
      return [? __x7__]
    } else {
      app __x8__ = (CreateDataProperty Receiver P V)
      return [? __x8__]
    }
  } else {}
  app __x9__ = (IsAccessorDescriptor ownDesc)
  assert (= __x9__ true)
  let setter = ownDesc.Set
  if (= setter undefined) return false else {}
  app __x10__ = (Call setter Receiver (new [V]))
  [? __x10__]
  return true
}