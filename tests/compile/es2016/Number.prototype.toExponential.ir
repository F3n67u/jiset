{
  app fractionDigits = (GetArgument argumentsList 0i)
  [0] app __x0__ = (thisNumberValue this)
  [0] if (is-completion __x0__) if (= __x0__.Type CONST_normal) __x0__ = __x0__.Value else return __x0__ else [2] {}
  [0] let x = __x0__
  [1] app __x1__ = (ToInteger fractionDigits)
  [1] if (is-completion __x1__) if (= __x1__.Type CONST_normal) __x1__ = __x1__.Value else return __x1__ else [2] {}
  [1] let f = __x1__
  [3] if (= x NaN) {
    app __x2__ = (WrapCompletion "NaN")
    return __x2__
  } else [2] {}
  [4] let s = ""
  [5] if (< x 0i) {
    [6] let s = "-"
    [7] let x = (- x)
  } else [2] {}
  [8] if (== x Infinity) {
    [9] app __x3__ = (WrapCompletion (+ s "Infinity"))
    [9] return __x3__
  } else [2] {}
  [10] if (|| (< f 0i) (< 20i f)) {
    app __x4__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_RangeError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
    return __x4__
  } else [2] {}
  [14] if (== x 0i) {
    [12] ??? "Let id:{m} be the String consisting of id:{f} + 1 occurrences of the code unit 0x0030 ( DIGIT ZERO ) ."
    [13] let e = 0i
  } else {
    [17] if (! (= fractionDigits undefined)) ??? "Let id:{e} and id:{n} be integers such that 10 sup:{id:{f} } ≤ id:{n} < 10 sup:{id:{f} + 1 } and for which the exact mathematical value of id:{n} × 10 sup:{id:{e} - id:{f} } - id:{x} is as close to zero as possible . If there are two such sets of id:{e} and id:{n} , pick the id:{e} and id:{n} for which id:{n} × 10 sup:{id:{e} - id:{f} } is larger ." else ??? "Let id:{e} , id:{n} , and id:{f} be integers such that id:{f} ≥ 0 , 10 sup:{id:{f} } ≤ id:{n} < 10 sup:{id:{f} + 1 } , the Number value for id:{n} × 10 sup:{id:{e} - id:{f} } is id:{x} , and id:{f} is as small as possible . Note that the decimal representation of id:{n} has id:{f} + 1 digits , id:{n} is not divisible by 10 , and the least significant digit of id:{n} is not necessarily uniquely determined by these criteria ."
    [19] ??? "Let id:{m} be the String consisting of the digits of the decimal representation of id:{n} ( in order , with no leading zeroes ) ."
  }
  [20] if (! (== f 0i)) {
    [21] ??? "Let id:{a} be the first element of id:{m} , and let id:{b} be the remaining id:{f} elements of id:{m} ."
    [22] ??? "Let id:{m} be the concatenation of the three Strings id:{a} , code:{\".\"} , and id:{b} ."
  } else [2] {}
  [26] if (== e 0i) {
    [24] let c = "+"
    [25] let d = "0"
  } else {
    [28] if (< 0i e) let c = "+" else {
      [29] let c = "-"
      [30] let e = (- e)
    }
    [31] ??? "Let id:{d} be the String consisting of the digits of the decimal representation of id:{e} ( in order , with no leading zeroes ) ."
  }
  [32] ??? "Let id:{m} be the concatenation of the four Strings id:{m} , code:{\"e\"} , id:{c} , and id:{d} ."
  [33] app __x5__ = (WrapCompletion (+ s m))
  [33] return __x5__
}