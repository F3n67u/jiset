{
  assert (= (typeof index) Number)
  let buffer = O.ViewedArrayBuffer
  app __x0__ = (IsDetachedBuffer buffer)
  if (= __x0__ true) throw TypeError else {}
  app __x1__ = (IsValidIntegerIndex O index)
  if (= [! __x1__] false) return undefined else {}
  let offset = O.ByteOffset
  let arrayTypeName = O.TypedArrayName
  ??? "Let id:{elementSize} be the Element Size value specified in link:{unhandled: table-the-typedarray-constructors} for id:{arrayTypeName} ."
  let indexedPosition = (+ (* index elementSize) offset)
  ??? "Let id:{elementType} be the Element Type value in link:{unhandled: table-the-typedarray-constructors} for id:{arrayTypeName} ."
  app __x2__ = (GetValueFromBuffer buffer indexedPosition elementType true CONST_Unordered)
  return __x2__
}