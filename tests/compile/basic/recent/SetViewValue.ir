{
  app __x0__ = (RequireInternalSlot view "DataView")
  [? __x0__]
  assert (! (= view.ViewedArrayBuffer absent))
  app __x1__ = (ToIndex requestIndex)
  let getIndex = [? __x1__]
  app __x2__ = (IsBigIntElementType type)
  if (= [! __x2__] true) {
    app __x3__ = (ToBigInt value)
    let numberValue = [? __x3__]
  } else {
    app __x4__ = (ToNumber value)
    let numberValue = [? __x4__]
  }
  app __x5__ = (ToBoolean isLittleEndian)
  isLittleEndian = [! __x5__]
  let buffer = view.ViewedArrayBuffer
  app __x6__ = (IsDetachedBuffer buffer)
  if (= __x6__ true) throw TypeError else {}
  let viewOffset = view.ByteOffset
  let viewSize = view.ByteLength
  let elementSize = AnyNum
  if (< viewSize (+ getIndex elementSize)) throw RangeError else {}
  let bufferIndex = (+ getIndex viewOffset)
  app __x7__ = (SetValueInBuffer buffer bufferIndex type numberValue false CONST_Unordered isLittleEndian)
  return __x7__
}