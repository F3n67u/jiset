digraph {
  node12686 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">15:??? &quot;Let id:{e} and id:{n} be integers such that 10 sup:{id:{p} - 1} &le; id:{n} &lt; 10 sup:{id:{p}} and for which ℝ ( id:{n} ) &times; 10 sub:{ℝ} &lt; sup &gt; ℝ ( id:{e} ) - ℝ ( id:{p} ) + 1 sub:{ℝ} &lt; / sup &gt; - ℝ ( id:{x} ) is as close to zero as possible . If there are two such sets of id:{e} and id:{n} , pick the id:{e} and id:{n} for which ℝ ( id:{n} ) &times; 10 sub:{ℝ} &lt; sup &gt; ℝ ( id:{e} ) - ℝ ( id:{p} ) + 1 sub:{ℝ} &lt; / sup &gt; is larger .&quot;</td></tr>
      <tr><td align="left">16:??? &quot;Let id:{m} be the String value consisting of the digits of the decimal representation of id:{n} ( in order , with no leading zeroes ) .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12673 [shape=cds, label=<<font color="black">2:app __x2__ = (ToInteger precision)</font>> color="black" fillcolor="white" style=filled]
  node12692 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let c = &quot;+&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12667 [shape=cds, label=<<font color="black">app precision = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node12696 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return (+ s m)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12671 [shape=cds, label=<<font color="black">app __x1__ = (ToString x)</font>> color="black" fillcolor="white" style=filled]
  node12677 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">4:let s = &quot;&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12683 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw RangeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12688 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">18:assert (! (== e 0i))</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12695 [shape=diamond, label=<<font color="black">(== e (- p 1i))</font>> color="black" fillcolor="white" style=filled]
  node12684 [shape=diamond, label=<<font color="black">(== x 0i)</font>> color="black" fillcolor="white" style=filled]
  node12665 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node12690 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">20:??? &quot;Let id:{a} be the first code unit of id:{m} , and let id:{b} be the remaining id:{p} - 1 code units of id:{m} .&quot;</td></tr>
      <tr><td align="left">21:m = (+ (+ a &quot;.&quot;) b)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12675 [shape=diamond, label=<<font color="black">(= x NaN)</font>> color="black" fillcolor="white" style=filled]
  node12681 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return (+ s &quot;Infinity&quot;)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12679 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">6:s = &quot;-&quot;</td></tr>
      <tr><td align="left">7:x = (- x)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12669 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let x = [? __x0__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12694 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">28:??? &quot;Let id:{d} be the String value consisting of the digits of the decimal representation of id:{e} ( in order , with no leading zeroes ) .&quot;</td></tr>
      <tr><td align="left">29:return (+ (+ (+ (+ s m) &quot;e&quot;) c) d)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12699 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">??? &quot;Set id:{m} to the string - concatenation of the code unit 0x0030 ( DIGIT ZERO ) , the code unit 0x002E ( FULL STOP ) , - ( id:{e} + 1 ) occurrences of the code unit 0x0030 ( DIGIT ZERO ) , and the String id:{m} .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12689 [shape=diamond, label=<<font color="black">(! (== p 1i))</font>> color="black" fillcolor="white" style=filled]
  node12674 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">2:let p = [? __x2__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12666 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node12693 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">25:assert (&lt; e 0i)</td></tr>
      <tr><td align="left">26:let c = &quot;-&quot;</td></tr>
      <tr><td align="left">27:e = (- e)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12682 [shape=diamond, label=<<font color="black">(|| (&lt; p 1i) (&lt; 100i p))</font>> color="black" fillcolor="white" style=filled]
  node12678 [shape=diamond, label=<<font color="black">(&lt; x 0i)</font>> color="black" fillcolor="white" style=filled]
  node12670 [shape=diamond, label=<<font color="black">(= precision undefined)</font>> color="black" fillcolor="white" style=filled]
  node12700 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">35:return (+ s m)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12687 [shape=diamond, label=<<font color="black">(|| (&lt; e -6i) (! (&lt; e p)))</font>> color="black" fillcolor="white" style=filled]
  node12676 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return &quot;NaN&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12668 [shape=cds, label=<<font color="black">0:app __x0__ = (thisNumberValue this)</font>> color="black" fillcolor="white" style=filled]
  node12697 [shape=diamond, label=<<font color="black">(! (&lt; e 0i))</font>> color="black" fillcolor="white" style=filled]
  node12691 [shape=diamond, label=<<font color="black">(&lt; 0i e)</font>> color="black" fillcolor="white" style=filled]
  node12680 [shape=diamond, label=<<font color="black">(== x Infinity)</font>> color="black" fillcolor="white" style=filled]
  node12672 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return [! __x1__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12698 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">??? &quot;Set id:{m} to the string - concatenation of the first id:{e} + 1 code units of id:{m} , the code unit 0x002E ( FULL STOP ) , and the remaining id:{p} - ( id:{e} + 1 ) code units of id:{m} .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12685 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">12:??? &quot;Let id:{m} be the String value consisting of id:{p} occurrences of the code unit 0x0030 ( DIGIT ZERO ) .&quot;</td></tr>
      <tr><td align="left">13:let e = 0i</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12690 -> node12691 [ color="black"]
  node12683 -> node12684 [ color="black"]
  node12673 -> node12674 [ color="black"]
  node12669 -> node12670 [ color="black"]
  node12677 -> node12678 [ color="black"]
  node12691 -> node12692 [label=<<font color="black">true</font>> color="black"]
  node12691 -> node12693 [label=<<font color="black">false</font>> color="black"]
  node12684 -> node12685 [label=<<font color="black">true</font>> color="black"]
  node12684 -> node12686 [label=<<font color="black">false</font>> color="black"]
  node12698 -> node12700 [ color="black"]
  node12668 -> node12669 [ color="black"]
  node12694 -> node12695 [ color="black"]
  node12700 -> node12666 [ color="black"]
  node12670 -> node12671 [label=<<font color="black">true</font>> color="black"]
  node12670 -> node12673 [label=<<font color="black">false</font>> color="black"]
  node12687 -> node12688 [label=<<font color="black">true</font>> color="black"]
  node12687 -> node12695 [label=<<font color="black">false</font>> color="black"]
  node12674 -> node12675 [ color="black"]
  node12699 -> node12700 [ color="black"]
  node12682 -> node12683 [label=<<font color="black">true</font>> color="black"]
  node12682 -> node12684 [label=<<font color="black">false</font>> color="black"]
  node12679 -> node12680 [ color="black"]
  node12665 -> node12667 [ color="black"]
  node12671 -> node12672 [ color="black"]
  node12697 -> node12698 [label=<<font color="black">true</font>> color="black"]
  node12697 -> node12699 [label=<<font color="black">false</font>> color="black"]
  node12675 -> node12676 [label=<<font color="black">true</font>> color="black"]
  node12675 -> node12677 [label=<<font color="black">false</font>> color="black"]
  node12676 -> node12677 [ color="black"]
  node12696 -> node12697 [ color="black"]
  node12678 -> node12679 [label=<<font color="black">true</font>> color="black"]
  node12678 -> node12680 [label=<<font color="black">false</font>> color="black"]
  node12693 -> node12694 [ color="black"]
  node12672 -> node12673 [ color="black"]
  node12689 -> node12690 [label=<<font color="black">true</font>> color="black"]
  node12689 -> node12691 [label=<<font color="black">false</font>> color="black"]
  node12667 -> node12668 [ color="black"]
  node12692 -> node12694 [ color="black"]
  node12680 -> node12681 [label=<<font color="black">true</font>> color="black"]
  node12680 -> node12682 [label=<<font color="black">false</font>> color="black"]
  node12681 -> node12682 [ color="black"]
  node12685 -> node12695 [ color="black"]
  node12686 -> node12687 [ color="black"]
  node12688 -> node12689 [ color="black"]
  node12695 -> node12696 [label=<<font color="black">true</font>> color="black"]
  node12695 -> node12697 [label=<<font color="black">false</font>> color="black"]
}
