{
  let module = this
  assert (! (= module.Realm undefined))
  if (= module.Evaluated true) return undefined else {}
  module.Evaluated = true
  let __x0__ = module.RequestedModules
  let __x1__ = 0i
  while (< __x1__ __x0__.length) {
    let required = __x0__[__x1__]
    app __x2__ = (HostResolveImportedModule module required)
    let requiredModule = [? __x2__]
    app __x3__ = (requiredModule.ModuleEvaluation requiredModule)
    [? __x3__]
    __x1__ = (+ __x1__ 1i)
  }
  let moduleCxt = (new ExecutionContext("SubMap" -> (new SubMap())))
  moduleCxt.Function = null
  moduleCxt.Realm = module.Realm
  moduleCxt.ScriptOrModule = module
  moduleCxt.VariableEnvironment = module.Environment
  moduleCxt.LexicalEnvironment = module.Environment
  GLOBAL_context = null
  append moduleCxt -> GLOBAL_executionStack
  GLOBAL_context = GLOBAL_executionStack[(- GLOBAL_executionStack.length 1i)]
  access __x4__ = (module.ECMAScriptCode "Evaluation")
  let result = __x4__
  GLOBAL_context = null
  if (= GLOBAL_executionStack[(- GLOBAL_executionStack.length 1i)] moduleCxt) (pop GLOBAL_executionStack (- GLOBAL_executionStack.length 1i)) else {}
  GLOBAL_context = GLOBAL_executionStack[(- GLOBAL_executionStack.length 1i)]
  return result
}