digraph {
  node10184 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node10185 [shape=cds, label=<<font color="black">0:app __x0__ = (OrdinaryFunctionCreate INTRINSIC_AsyncFunction_prototype FormalParameters AsyncFunctionBody CONST_nonDASHlexicalDASHthis scope)</font>> color="black" fillcolor="white" style=filled]
  node10183 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node10186 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let F = [! __x0__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10188 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">1:[! __x1__]</td></tr>
      <tr><td align="left">2:F.SourceText = (get-syntax AsyncFunctionDeclaration)</td></tr>
      <tr><td align="left">3:return F</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10187 [shape=cds, label=<<font color="black">1:app __x1__ = (SetFunctionName F &quot;default&quot;)</font>> color="black" fillcolor="white" style=filled]
  node10185 -> node10186 [ color="black"]
  node10187 -> node10188 [ color="black"]
  node10188 -> node10184 [ color="black"]
  node10183 -> node10185 [ color="black"]
  node10186 -> node10187 [ color="black"]
}
