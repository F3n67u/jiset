{
  if (= Desc.Value absent) {
    app __x0__ = (OrdinaryDefineOwnProperty A "length" Desc)
    app __x1__ = (WrapCompletion __x0__)
    return __x1__
  } else {}
  let newLenDesc = (copy-obj Desc)
  app __x2__ = (ToUint32 Desc.Value)
  if (is-completion __x2__) if (= __x2__.Type CONST_normal) __x2__ = __x2__.Value else return __x2__ else {}
  let newLen = __x2__
  app __x3__ = (ToNumber Desc.Value)
  if (is-completion __x3__) if (= __x3__.Type CONST_normal) __x3__ = __x3__.Value else return __x3__ else {}
  let numberLen = __x3__
  ??? "If id:{newLen} is not the same value as id:{numberLen} , throw a value:{RangeError} exception ."
  newLenDesc.Value = newLen
  app __x4__ = (OrdinaryGetOwnProperty A "length")
  let oldLenDesc = __x4__
  app __x5__ = (IsDataDescriptor oldLenDesc)
  if (is-completion __x5__) if (= __x5__.Type CONST_normal) __x5__ = __x5__.Value else return __x5__ else {}
  assert (= __x5__ true)
  assert (= oldLenDesc.Configurable false)
  let oldLen = oldLenDesc.Value
  if (! (< newLen oldLen)) {
    app __x6__ = (OrdinaryDefineOwnProperty A "length" newLenDesc)
    app __x7__ = (WrapCompletion __x6__)
    return __x7__
  } else {}
  if (= oldLenDesc.Writable false) {
    app __x8__ = (WrapCompletion false)
    return __x8__
  } else {}
  if (|| (= newLenDesc.Writable absent) (= newLenDesc.Writable true)) let newWritable = true else {
    let newWritable = false
    newLenDesc.Writable = true
  }
  app __x9__ = (OrdinaryDefineOwnProperty A "length" newLenDesc)
  if (is-completion __x9__) if (= __x9__.Type CONST_normal) __x9__ = __x9__.Value else return __x9__ else {}
  let succeeded = __x9__
  if (= succeeded false) {
    app __x10__ = (WrapCompletion false)
    return __x10__
  } else {}
  ??? "For each own property key id:{P} of id:{A} that is an array index , whose numeric value is greater than or equal to id:{newLen} , in descending numeric index order , do in:{} out:{}"
  if (= newWritable false) {
    app __x11__ = (OrdinaryDefineOwnProperty A "length" (new PropertyDescriptor("Writable" -> false)))
    if (is-completion __x11__) if (= __x11__.Type CONST_normal) __x11__ = __x11__.Value else return __x11__ else {}
    let succeeded = __x11__
    assert (= succeeded true)
  } else {}
  app __x12__ = (WrapCompletion true)
  return __x12__
}