digraph {
  node13142 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">3:let proto = [? __x0__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node13134 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node13138 [shape=diamond, label=<<font color="black">(= NewTarget undefined)</font>> color="black" fillcolor="white" style=filled]
  node13137 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let numberOfArgs = argumentsList.length</td></tr>
      <tr><td align="left">1:assert (! (&lt; numberOfArgs 2i))</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node13135 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node13144 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">4:let array = [? __x1__]</td></tr>
      <tr><td align="left">5:let k = 0i</td></tr>
      <tr><td align="left">6:??? &quot;Let id:{items} be a zero - origined List containing the argument items in order .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node13136 [shape=cds, label=<<font color="black">app items = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node13146 [shape=cds, label=<<font color="black">8:app __x2__ = (ToString k)</font>> color="black" fillcolor="white" style=filled]
  node13143 [shape=cds, label=<<font color="black">4:app __x1__ = (ArrayCreate numberOfArgs proto)</font>> color="black" fillcolor="white" style=filled]
  node13139 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let newTarget = GLOBAL_context.Function</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node13150 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">14:return array</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node13145 [shape=diamond, label=<<font color="black">(&lt; k numberOfArgs)</font>> color="black" fillcolor="white" style=filled]
  node13147 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">8:let Pk = [! __x2__]</td></tr>
      <tr><td align="left">9:let itemK = items[k]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node13148 [shape=cds, label=<<font color="black">10:app __x3__ = (CreateDataProperty array Pk itemK)</font>> color="black" fillcolor="white" style=filled]
  node13141 [shape=cds, label=<<font color="black">3:app __x0__ = (GetPrototypeFromConstructor newTarget INTRINSIC_ArrayPrototype)</font>> color="black" fillcolor="white" style=filled]
  node13140 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let newTarget = NewTarget</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node13149 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">10:let defineStatus = __x3__</td></tr>
      <tr><td align="left">11:assert (= defineStatus true)</td></tr>
      <tr><td align="left">12:k = (+ k 1i)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node13136 -> node13137 [ color="black"]
  node13147 -> node13148 [ color="black"]
  node13143 -> node13144 [ color="black"]
  node13140 -> node13141 [ color="black"]
  node13144 -> node13145 [ color="black"]
  node13134 -> node13136 [ color="black"]
  node13150 -> node13135 [ color="black"]
  node13148 -> node13149 [ color="black"]
  node13138 -> node13139 [label=<<font color="black">true</font>> color="black"]
  node13138 -> node13140 [label=<<font color="black">false</font>> color="black"]
  node13141 -> node13142 [ color="black"]
  node13137 -> node13138 [ color="black"]
  node13142 -> node13143 [ color="black"]
  node13145 -> node13146 [label=<<font color="black">true</font>> color="black"]
  node13145 -> node13150 [label=<<font color="black">false</font>> color="black"]
  node13139 -> node13141 [ color="black"]
  node13149 -> node13145 [ color="black"]
  node13146 -> node13147 [ color="black"]
}
