digraph {
  node14977 [shape=cds, label=<<font color="black">app pattern = (GetArgument argumentsList 1i)</font>> color="black" fillcolor="white" style=filled]
  node14981 [shape=cds, label=<<font color="black">app __x0__ = (ToString pattern)</font>> color="black" fillcolor="white" style=filled]
  node14987 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">4:??? &quot;If id:{F} contains any code unit other than value:{\&quot;g\&quot;} , value:{\&quot;i\&quot;} , value:{\&quot;m\&quot;} , value:{\&quot;s\&quot;} , value:{\&quot;u\&quot;} , or value:{\&quot;y\&quot;} or if it contains the same code unit more than once , throw a value:{SyntaxError} exception .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14993 [shape=cds, label=<<font color="black">11:app __x2__ = (UTF16DecodeString P)</font>> color="black" fillcolor="white" style=filled]
  node14978 [shape=cds, label=<<font color="black">app flags = (GetArgument argumentsList 2i)</font>> color="black" fillcolor="white" style=filled]
  node14986 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let F = [? __x1__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14997 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">17:[? __x3__]</td></tr>
      <tr><td align="left">18:return obj</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14982 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let P = [? __x0__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14989 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let BMP = false</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14979 [shape=diamond, label=<<font color="black">(= pattern undefined)</font>> color="black" fillcolor="white" style=filled]
  node14985 [shape=cds, label=<<font color="black">app __x1__ = (ToString flags)</font>> color="black" fillcolor="white" style=filled]
  node14983 [shape=diamond, label=<<font color="black">(= flags undefined)</font>> color="black" fillcolor="white" style=filled]
  node14992 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">7:??? &quot;Let id:{pText} be the sequence of code points resulting from interpreting each of the 16 - bit elements of id:{P} as a Unicode BMP code point . UTF - 16 decoding is not applied to the elements .&quot;</td></tr>
      <tr><td align="left">8:??? &quot;Parse id:{pText} using the grammars in link:{unhandled: sec-patterns} . The goal symbol for the parse is | Pattern [ ~ U , ~ N ] | . If the result of parsing contains a nt:{GroupName} , reparse with the goal symbol | Pattern [ ~ U , + N ] | and use this result instead . Throw a value:{SyntaxError} exception if id:{pText} did not conform to the grammar , if any elements of id:{pText} were not matched by the parse , or if any Early Error conditions exist .&quot;</td></tr>
      <tr><td align="left">9:??? &quot;Let id:{patternCharacters} be a List whose elements are the code unit elements of id:{P} .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14980 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let P = &quot;&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14995 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">14:obj.OriginalSource = P</td></tr>
      <tr><td align="left">15:obj.OriginalFlags = F</td></tr>
      <tr><td align="left">16:??? &quot;Set id:{obj} . [ [ RegExpMatcher ] ] to the abstract closure that evaluates the above parse by applying the semantics provided in link:{unhandled: sec-pattern-semantics} using id:{patternCharacters} as the pattern ' s List of nt:{SourceCharacter} values and id:{F} as the flag parameters .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14984 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let F = &quot;&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14988 [shape=diamond, label=<<font color="black">(contains F &quot;u&quot;)</font>> color="black" fillcolor="white" style=filled]
  node14976 [shape=cds, label=<<font color="black">app obj = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node14991 [shape=diamond, label=<<font color="black">(= BMP true)</font>> color="black" fillcolor="white" style=filled]
  node14996 [shape=cds, label=<<font color="black">17:app __x3__ = (Set obj &quot;lastIndex&quot; 0i true)</font>> color="black" fillcolor="white" style=filled]
  node14975 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node14990 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let BMP = true</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14974 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node14994 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">11:let pText = [! __x2__]</td></tr>
      <tr><td align="left">12:??? &quot;Parse id:{pText} using the grammars in link:{unhandled: sec-patterns} . The goal symbol for the parse is | Pattern [ + U , + N ] | . Throw a value:{SyntaxError} exception if id:{pText} did not conform to the grammar , if any elements of id:{pText} were not matched by the parse , or if any Early Error conditions exist .&quot;</td></tr>
      <tr><td align="left">13:??? &quot;Let id:{patternCharacters} be a List whose elements are the code points of id:{pText} .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14993 -> node14994 [ color="black"]
  node14980 -> node14983 [ color="black"]
  node14989 -> node14991 [ color="black"]
  node14982 -> node14983 [ color="black"]
  node14976 -> node14977 [ color="black"]
  node14977 -> node14978 [ color="black"]
  node14991 -> node14992 [label=<<font color="black">true</font>> color="black"]
  node14991 -> node14993 [label=<<font color="black">false</font>> color="black"]
  node14992 -> node14995 [ color="black"]
  node14997 -> node14975 [ color="black"]
  node14995 -> node14996 [ color="black"]
  node14979 -> node14980 [label=<<font color="black">true</font>> color="black"]
  node14979 -> node14981 [label=<<font color="black">false</font>> color="black"]
  node14984 -> node14987 [ color="black"]
  node14987 -> node14988 [ color="black"]
  node14994 -> node14995 [ color="black"]
  node14990 -> node14991 [ color="black"]
  node14983 -> node14984 [label=<<font color="black">true</font>> color="black"]
  node14983 -> node14985 [label=<<font color="black">false</font>> color="black"]
  node14988 -> node14989 [label=<<font color="black">true</font>> color="black"]
  node14988 -> node14990 [label=<<font color="black">false</font>> color="black"]
  node14981 -> node14982 [ color="black"]
  node14985 -> node14986 [ color="black"]
  node14996 -> node14997 [ color="black"]
  node14978 -> node14979 [ color="black"]
  node14986 -> node14987 [ color="black"]
  node14974 -> node14976 [ color="black"]
}
