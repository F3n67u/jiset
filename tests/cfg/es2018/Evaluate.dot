digraph {
  node10373 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node10382 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let m = __x2__[__x3__]</td></tr>
      <tr><td align="left">6:assert (= m.Status &quot;evaluating&quot;)</td></tr>
      <tr><td align="left">7:m.Status = &quot;evaluated&quot;</td></tr>
      <tr><td align="left">8:m.EvaluationError = result</td></tr>
      <tr><td align="left">__x3__ = (+ __x3__ 1i)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10378 [shape=cds, label=<<font color="black">4:app __x1__ = (IsAbruptCompletion result)</font>> color="black" fillcolor="white" style=filled]
  node10374 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node10381 [shape=diamond, label=<<font color="black">(&lt; __x3__ __x2__.length)</font>> color="black" fillcolor="white" style=filled]
  node10377 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">3:let result = __x0__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10384 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">11:assert (&amp;&amp; (= module.Status &quot;evaluated&quot;) (= module.EvaluationError undefined))</td></tr>
      <tr><td align="left">12:assert (= stack.length 0i)</td></tr>
      <tr><td align="left">13:return undefined</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10376 [shape=cds, label=<<font color="black">3:app __x0__ = (InnerModuleEvaluation module stack 0i)</font>> color="black" fillcolor="white" style=filled]
  node10379 [shape=diamond, label=<<font color="black">__x1__</font>> color="black" fillcolor="white" style=filled]
  node10383 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">9:assert (&amp;&amp; (= module.Status &quot;evaluated&quot;) (= module.EvaluationError result))</td></tr>
      <tr><td align="left">10:return result</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10375 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let module = this</td></tr>
      <tr><td align="left">1:assert (|| (= module.Status &quot;instantiated&quot;) (= module.Status &quot;evaluated&quot;))</td></tr>
      <tr><td align="left">2:let stack = (new [])</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10380 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">5:let __x2__ = stack</td></tr>
      <tr><td align="left">5:let __x3__ = 0i</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10379 -> node10380 [label=<<font color="black">true</font>> color="black"]
  node10379 -> node10384 [label=<<font color="black">false</font>> color="black"]
  node10378 -> node10379 [ color="black"]
  node10381 -> node10382 [label=<<font color="black">true</font>> color="black"]
  node10381 -> node10383 [label=<<font color="black">false</font>> color="black"]
  node10384 -> node10374 [ color="black"]
  node10373 -> node10375 [ color="black"]
  node10376 -> node10377 [ color="black"]
  node10377 -> node10378 [ color="black"]
  node10382 -> node10381 [ color="black"]
  node10375 -> node10376 [ color="black"]
  node10383 -> node10384 [ color="black"]
  node10380 -> node10381 [ color="black"]
}
