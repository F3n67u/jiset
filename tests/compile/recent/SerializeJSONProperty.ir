{
  [0] app __x0__ = (Get holder key)
  [0] if (is-completion __x0__) if (= __x0__.Type CONST_normal) __x0__ = __x0__.Value else return __x0__ else [7] {}
  [0] let value = __x0__
  [1] app __x1__ = (Type value)
  [1] if (|| (= __x1__ Object) (= __x1__ BigInt)) {
    [2] app __x2__ = (GetV value "toJSON")
    [2] if (is-completion __x2__) if (= __x2__.Type CONST_normal) __x2__ = __x2__.Value else return __x2__ else [7] {}
    [2] let toJSON = __x2__
    [3] app __x3__ = (IsCallable toJSON)
    [3] if (= __x3__ true) {
      [4] app __x4__ = (Call toJSON value (new [key]))
      [4] if (is-completion __x4__) if (= __x4__.Type CONST_normal) __x4__ = __x4__.Value else return __x4__ else [7] {}
      [4] value = __x4__
    } else [7] {}
  } else [7] {}
  [5] if (! (= state.ReplacerFunction undefined)) {
    [6] app __x5__ = (Call state.ReplacerFunction holder (new [key, value]))
    [6] if (is-completion __x5__) if (= __x5__.Type CONST_normal) __x5__ = __x5__.Value else return __x5__ else [7] {}
    [6] value = __x5__
  } else [7] {}
  [7] app __x6__ = (Type value)
  [7] if (= __x6__ Object) if (! (= value.NumberData absent)) {
    [9] app __x7__ = (ToNumber value)
    [9] if (is-completion __x7__) if (= __x7__.Type CONST_normal) __x7__ = __x7__.Value else return __x7__ else [7] {}
    [9] value = __x7__
  } else if (! (= value.StringData absent)) {
    [11] app __x8__ = (ToString value)
    [11] if (is-completion __x8__) if (= __x8__.Type CONST_normal) __x8__ = __x8__.Value else return __x8__ else [7] {}
    [11] value = __x8__
  } else if (! (= value.BooleanData absent)) value = value.BooleanData else if (! (= value.BigIntData absent)) value = value.BigIntData else [7] {} else [7] {}
  [16] if (= value null) {
    app __x9__ = (WrapCompletion "null")
    return __x9__
  } else [7] {}
  [17] if (= value true) {
    app __x10__ = (WrapCompletion "true")
    return __x10__
  } else [7] {}
  [18] if (= value false) {
    app __x11__ = (WrapCompletion "false")
    return __x11__
  } else [7] {}
  [19] app __x12__ = (Type value)
  [19] if (= __x12__ String) {
    app __x13__ = (QuoteJSONString value)
    app __x14__ = (WrapCompletion __x13__)
    return __x14__
  } else [7] {}
  [20] app __x15__ = (Type value)
  [20] if (= __x15__ Number) {
    [21] if (! (|| (= value Infinity) (= value -Infinity))) {
      app __x16__ = (ToString value)
      if (is-completion __x16__) if (= __x16__.Type CONST_normal) __x16__ = __x16__.Value else return __x16__ else [7] {}
      app __x17__ = (WrapCompletion __x16__)
      return __x17__
    } else [7] {}
    [22] app __x18__ = (WrapCompletion "null")
    [22] return __x18__
  } else [7] {}
  [23] app __x19__ = (Type value)
  [23] if (= __x19__ BigInt) {
    app __x20__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_TypeError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
    return __x20__
  } else [7] {}
  [24] app __x21__ = (Type value)
  [24] let __x22__ = (= __x21__ Object)
  [24] if __x22__ {
    app __x23__ = (IsCallable value)
    __x22__ = (= __x23__ false)
  } else [7] {}
  [24] if __x22__ {
    [25] app __x24__ = (IsArray value)
    [25] if (is-completion __x24__) if (= __x24__.Type CONST_normal) __x24__ = __x24__.Value else return __x24__ else [7] {}
    [25] let isArray = __x24__
    [26] if (= isArray true) {
      app __x25__ = (SerializeJSONArray state value)
      if (is-completion __x25__) if (= __x25__.Type CONST_normal) __x25__ = __x25__.Value else return __x25__ else [7] {}
      app __x26__ = (WrapCompletion __x25__)
      return __x26__
    } else [7] {}
    [27] app __x27__ = (SerializeJSONObject state value)
    [27] if (is-completion __x27__) if (= __x27__.Type CONST_normal) __x27__ = __x27__.Value else return __x27__ else [7] {}
    [27] app __x28__ = (WrapCompletion __x27__)
    [27] return __x28__
  } else [7] {}
  [28] app __x29__ = (WrapCompletion undefined)
  [28] return __x29__
}