{
  app __x0__ = (IsPropertyKey P)
  assert (= __x0__ true)
  let handler = O.ProxyHandler
  if (= handler null) throw TypeError else {}
  assert (= (typeof handler) Object)
  let target = O.ProxyTarget
  app __x1__ = (GetMethod handler "defineProperty")
  let trap = [? __x1__]
  if (= trap undefined) {
    app __x2__ = (target.DefineOwnProperty target P Desc)
    return [? __x2__]
  } else {}
  app __x3__ = (FromPropertyDescriptor Desc)
  let descObj = __x3__
  app __x4__ = (Call trap handler (new [target, P, descObj]))
  app __x5__ = (ToBoolean [? __x4__])
  let booleanTrapResult = __x5__
  if (= booleanTrapResult false) return false else {}
  app __x6__ = (target.GetOwnProperty target P)
  let targetDesc = [? __x6__]
  app __x7__ = (IsExtensible target)
  let extensibleTarget = [? __x7__]
  if (&& (! (= Desc.Configurable absent)) (= Desc.Configurable false)) let settingConfigFalse = true else let settingConfigFalse = false
  if (= targetDesc undefined) {
    if (= extensibleTarget false) throw TypeError else {}
    if (= settingConfigFalse true) throw TypeError else {}
  } else {
    app __x8__ = (IsCompatiblePropertyDescriptor extensibleTarget Desc targetDesc)
    if (= __x8__ false) throw TypeError else {}
    if (&& (= settingConfigFalse true) (= targetDesc.Configurable true)) throw TypeError else {}
  }
  return true
}