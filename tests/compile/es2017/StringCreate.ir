{
  [0] app __x0__ = (Type value)
  [0] assert (= __x0__ String)
  [1] let S = (new StringExoticObject("SubMap" -> (new SubMap())))
  [2] S.StringData = value
  [4] ??? "Set id:{S} . [ [ GetOwnProperty ] ] as specified in link:{} ."
  [5] ??? "Set id:{S} . [ [ DefineOwnProperty ] ] as specified in link:{} ."
  [6] ??? "Set id:{S} . [ [ OwnPropertyKeys ] ] as specified in link:{} ."
  [7] S.Prototype = prototype
  [8] S.Extensible = true
  [9] let length = value.length
  [10] app __x1__ = (DefinePropertyOrThrow S "length" (new PropertyDescriptor("Value" -> length, "Writable" -> false, "Enumerable" -> false, "Configurable" -> false)))
  [10] if (is-completion __x1__) if (= __x1__.Type CONST_normal) __x1__ = __x1__.Value else return __x1__ else [15] {}
  [10] __x1__
  [11] app __x2__ = (WrapCompletion S)
  [11] return __x2__
}