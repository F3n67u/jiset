digraph {
  node18284 [shape=cds, label=<<font color="black">31:app __x11__ = (Invoke nextPromise &quot;then&quot; (new [resolveElement, resultCapability.Reject]))</font>> color="black" fillcolor="white" style=filled]
  node18265 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">10:[? next]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18269 [shape=cds, label=<<font color="black">15:app __x5__ = (CreateArrayFromList values)</font>> color="black" fillcolor="white" style=filled]
  node18264 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">iteratorRecord.Done = true</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18273 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">17:return resultCapability.Promise</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18260 [shape=cds, label=<<font color="black">8:app __x3__ = (IteratorStep iteratorRecord)</font>> color="black" fillcolor="white" style=filled]
  node18261 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">8:let next = __x3__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18251 [shape=cds, label=<<font color="black">0:app __x0__ = (IsConstructor constructor)</font>> color="black" fillcolor="white" style=filled]
  node18257 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18262 [shape=cds, label=<<font color="black">9:app __x4__ = (IsAbruptCompletion next)</font>> color="black" fillcolor="white" style=filled]
  node18267 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">12:iteratorRecord.Done = true</td></tr>
      <tr><td align="left">13:remainingElementsCount.Value = (- remainingElementsCount.Value 1i)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18254 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">4:let promiseResolve = [? __x1__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18271 [shape=cds, label=<<font color="black">16:app __x6__ = (Call resultCapability.Resolve undefined (new [valuesArray]))</font>> color="black" fillcolor="white" style=filled]
  node18246 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node18249 [shape=cds, label=<<font color="black">app constructor = (GetArgument argumentsList 1i)</font>> color="black" fillcolor="white" style=filled]
  node18263 [shape=diamond, label=<<font color="black">__x4__</font>> color="black" fillcolor="white" style=filled]
  node18259 [shape=diamond, label=<<font color="black">true</font>> color="black" fillcolor="white" style=filled]
  node18285 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">31:[? __x11__]</td></tr>
      <tr><td align="left">32:index = (+ index 1i)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18279 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">20:[? nextValue]</td></tr>
      <tr><td align="left">21:append undefined -&gt; values</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18272 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">16:[? __x6__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18247 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node18252 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:assert (= __x0__ true)</td></tr>
      <tr><td align="left">2:let values = (new [])</td></tr>
      <tr><td align="left">3:let remainingElementsCount = (new Record(&quot;Value&quot; -&gt; 1i))</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18283 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">24:let resolveElement = [! __x10__]</td></tr>
      <tr><td align="left">25:resolveElement.AlreadyCalled = (new Record(&quot;Value&quot; -&gt; false))</td></tr>
      <tr><td align="left">26:resolveElement.Index = index</td></tr>
      <tr><td align="left">27:resolveElement.Values = values</td></tr>
      <tr><td align="left">28:resolveElement.Capability = resultCapability</td></tr>
      <tr><td align="left">29:resolveElement.RemainingElements = remainingElementsCount</td></tr>
      <tr><td align="left">30:remainingElementsCount.Value = (+ remainingElementsCount.Value 1i)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18268 [shape=diamond, label=<<font color="black">(= remainingElementsCount.Value 0i)</font>> color="black" fillcolor="white" style=filled]
  node18248 [shape=cds, label=<<font color="black">app iteratorRecord = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node18274 [shape=cds, label=<<font color="black">18:app __x7__ = (IteratorValue next)</font>> color="black" fillcolor="white" style=filled]
  node18276 [shape=cds, label=<<font color="black">19:app __x8__ = (IsAbruptCompletion nextValue)</font>> color="black" fillcolor="white" style=filled]
  node18255 [shape=cds, label=<<font color="black">5:app __x2__ = (IsCallable promiseResolve)</font>> color="black" fillcolor="white" style=filled]
  node18280 [shape=cds, label=<<font color="black">22:app __x9__ = (Call promiseResolve constructor (new [nextValue]))</font>> color="black" fillcolor="white" style=filled]
  node18250 [shape=cds, label=<<font color="black">app resultCapability = (GetArgument argumentsList 2i)</font>> color="black" fillcolor="white" style=filled]
  node18282 [shape=cds, label=<<font color="black">24:app __x10__ = (CreateBuiltinFunction steps (new [&quot;AlreadyCalled&quot;, &quot;Index&quot;, &quot;Values&quot;, &quot;Capability&quot;, &quot;RemainingElements&quot;]))</font>> color="black" fillcolor="white" style=filled]
  node18277 [shape=diamond, label=<<font color="black">__x8__</font>> color="black" fillcolor="white" style=filled]
  node18270 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">15:let valuesArray = [! __x5__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18275 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">18:let nextValue = __x7__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18258 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">6:let index = 0i</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18256 [shape=diamond, label=<<font color="black">(= [! __x2__] false)</font>> color="black" fillcolor="white" style=filled]
  node18281 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">22:let nextPromise = [? __x9__]</td></tr>
      <tr><td align="left">23:??? &quot;Let id:{steps} be the algorithm steps defined in link:{unhandled: sec-promise.all-resolve-element-functions} .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18266 [shape=diamond, label=<<font color="black">(= next false)</font>> color="black" fillcolor="white" style=filled]
  node18253 [shape=cds, label=<<font color="black">4:app __x1__ = (Get constructor &quot;resolve&quot;)</font>> color="black" fillcolor="white" style=filled]
  node18278 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">iteratorRecord.Done = true</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18271 -> node18272 [ color="black"]
  node18259 -> node18260 [label=<<font color="black">true</font>> color="black"]
  node18259 -> node18247 [label=<<font color="black">false</font>> color="black"]
  node18277 -> node18278 [label=<<font color="black">true</font>> color="black"]
  node18277 -> node18279 [label=<<font color="black">false</font>> color="black"]
  node18273 -> node18274 [ color="black"]
  node18279 -> node18280 [ color="black"]
  node18255 -> node18256 [ color="black"]
  node18264 -> node18265 [ color="black"]
  node18250 -> node18251 [ color="black"]
  node18285 -> node18259 [ color="black"]
  node18261 -> node18262 [ color="black"]
  node18283 -> node18284 [ color="black"]
  node18252 -> node18253 [ color="black"]
  node18282 -> node18283 [ color="black"]
  node18266 -> node18267 [label=<<font color="black">true</font>> color="black"]
  node18266 -> node18274 [label=<<font color="black">false</font>> color="black"]
  node18262 -> node18263 [ color="black"]
  node18284 -> node18285 [ color="black"]
  node18256 -> node18257 [label=<<font color="black">true</font>> color="black"]
  node18256 -> node18258 [label=<<font color="black">false</font>> color="black"]
  node18249 -> node18250 [ color="black"]
  node18278 -> node18279 [ color="black"]
  node18251 -> node18252 [ color="black"]
  node18276 -> node18277 [ color="black"]
  node18281 -> node18282 [ color="black"]
  node18272 -> node18273 [ color="black"]
  node18263 -> node18264 [label=<<font color="black">true</font>> color="black"]
  node18263 -> node18265 [label=<<font color="black">false</font>> color="black"]
  node18248 -> node18249 [ color="black"]
  node18268 -> node18269 [label=<<font color="black">true</font>> color="black"]
  node18268 -> node18273 [label=<<font color="black">false</font>> color="black"]
  node18257 -> node18258 [ color="black"]
  node18253 -> node18254 [ color="black"]
  node18280 -> node18281 [ color="black"]
  node18246 -> node18248 [ color="black"]
  node18267 -> node18268 [ color="black"]
  node18260 -> node18261 [ color="black"]
  node18275 -> node18276 [ color="black"]
  node18269 -> node18270 [ color="black"]
  node18274 -> node18275 [ color="black"]
  node18258 -> node18259 [ color="black"]
  node18270 -> node18271 [ color="black"]
  node18254 -> node18255 [ color="black"]
  node18265 -> node18266 [ color="black"]
}
