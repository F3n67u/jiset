{
  [0] let R = this
  [1] app __x0__ = (Type R)
  [1] if (! (= __x0__ Object)) {
    app __x1__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_TypeError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
    return __x1__
  } else [56] {}
  [2] if (= R.OriginalSource absent) {
    [3] ??? "If SameValue ( id:{R} , % RegExp . prototype % ) is value:{true} , return value:{\"(?:)\"} ."
    [4] ??? "Otherwise , throw a value:{TypeError} exception ."
  } else [56] {}
  [5] assert (! (= R.OriginalFlags absent))
  [6] let src = R.OriginalSource
  [7] let flags = R.OriginalFlags
  [8] app __x2__ = (EscapeRegExpPattern src flags)
  [8] app __x3__ = (WrapCompletion __x2__)
  [8] return __x3__
}