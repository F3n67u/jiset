{
  app start = (GetArgument argumentsList 0i)
  app end = (GetArgument argumentsList 1i)
  [0] app __x0__ = (RequireObjectCoercible this)
  [0] if (is-completion __x0__) if (= __x0__.Type CONST_normal) __x0__ = __x0__.Value else return __x0__ else [6] {}
  [0] let O = __x0__
  [1] app __x1__ = (ToString O)
  [1] if (is-completion __x1__) if (= __x1__.Type CONST_normal) __x1__ = __x1__.Value else return __x1__ else [6] {}
  [1] let S = __x1__
  [2] let len = S.length
  [3] app __x2__ = (ToInteger start)
  [3] if (is-completion __x2__) if (= __x2__.Type CONST_normal) __x2__ = __x2__.Value else return __x2__ else [6] {}
  [3] let intStart = __x2__
  [4] if (= end undefined) let intEnd = len else {
    app __x3__ = (ToInteger end)
    if (is-completion __x3__) if (= __x3__.Type CONST_normal) __x3__ = __x3__.Value else return __x3__ else [6] {}
    let intEnd = __x3__
  }
  [5] if (< intStart 0i) {
    app __x4__ = (max (+ len intStart) 0i)
    let from = __x4__
  } else {
    app __x5__ = (min intStart len)
    let from = __x5__
  }
  [6] if (< intEnd 0i) {
    app __x6__ = (max (+ len intEnd) 0i)
    let to = __x6__
  } else {
    app __x7__ = (min intEnd len)
    let to = __x7__
  }
  [7] app __x8__ = (max (- to from) 0i)
  [7] let span = __x8__
  [8] ??? "Return a String value containing id:{span} consecutive elements from id:{S} beginning with the element at index id:{from} ."
}