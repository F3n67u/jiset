[{
  "tokens": ["Let", {
    "id": "varNames"
  }, "be", "the", "VarDeclaredNames", "of", {
    "id": "body"
  }, "."]
}, {
  "tokens": ["Let", {
    "id": "varDeclarations"
  }, "be", "the", "VarScopedDeclarations", "of", {
    "id": "body"
  }, "."]
}, {
  "tokens": ["If", {
    "id": "strict"
  }, "is", {
    "value": "false"
  }, ",", "then"]
}, {
  "tokens": ["If", {
    "id": "varEnv"
  }, "is", "a", "global", "Environment", "Record", ",", "then"]
}, {
  "tokens": ["For", "each", "element", {
    "id": "name"
  }, "of", {
    "id": "varNames"
  }, ",", "do"]
}, {
  "tokens": ["If", {
    "id": "varEnv"
  }, ".", "HasLexicalDeclaration", "(", {
    "id": "name"
  }, ")", "is", {
    "value": "true"
  }, ",", "throw", "a", {
    "value": "SyntaxError"
  }, "exception", "."]
}, {
  "tokens": ["NOTE", ":", {
    "code": "eval"
  }, "will", "not", "create", "a", "global", "var", "declaration", "that", "would", "be", "shadowed", "by", "a", "global", "lexical", "declaration", "."]
}, {
  "tokens": ["Let", {
    "id": "thisEnv"
  }, "be", {
    "id": "lexEnv"
  }, "."]
}, {
  "tokens": ["Assert", ":", "The", "following", "loop", "will", "terminate", "."]
}, {
  "tokens": ["Repeat", ",", "while", {
    "id": "thisEnv"
  }, "is", "not", "the", "same", "as", {
    "id": "varEnv"
  }, ","]
}, {
  "tokens": ["If", {
    "id": "thisEnv"
  }, "is", "not", "an", "object", "Environment", "Record", ",", "then"]
}, {
  "tokens": ["NOTE", ":", "The", "environment", "of", "with", "statements", "cannot", "contain", "any", "lexical", "declaration", "so", "it", "doesn", "'", "t", "need", "to", "be", "checked", "for", "var", "/", "let", "hoisting", "conflicts", "."]
}, {
  "tokens": ["For", "each", "element", {
    "id": "name"
  }, "of", {
    "id": "varNames"
  }, ",", "do"]
}, {
  "tokens": ["If", {
    "id": "thisEnv"
  }, ".", "HasBinding", "(", {
    "id": "name"
  }, ")", "is", {
    "value": "true"
  }, ",", "then"]
}, {
  "tokens": ["Throw", "a", {
    "value": "SyntaxError"
  }, "exception", "."]
}, {
  "tokens": ["NOTE", ":", "Annex", {
    "link": ""
  }, "defines", "alternate", "semantics", "for", "the", "above", "step", "."]
}, {
  "tokens": ["NOTE", ":", "A", "direct", "eval", "will", "not", "hoist", "var", "declaration", "over", "a", "like", "-", "named", "lexical", "declaration", "."]
}, {
  "tokens": ["Set", {
    "id": "thisEnv"
  }, "to", {
    "id": "thisEnv"
  }, ".", "[", "[", "OuterEnv", "]", "]", "."]
}, {
  "tokens": ["Let", {
    "id": "functionsToInitialize"
  }, "be", "a", "new", "empty", "List", "."]
}, {
  "tokens": ["Let", {
    "id": "declaredFunctionNames"
  }, "be", "a", "new", "empty", "List", "."]
}, {
  "tokens": ["For", "each", "element", {
    "id": "d"
  }, "of", {
    "id": "varDeclarations"
  }, ",", "in", "reverse", "List", "order", ",", "do"]
}, {
  "tokens": ["If", {
    "id": "d"
  }, "is", "neither", "a", {
    "nt": "VariableDeclaration"
  }, "nor", "a", {
    "nt": "ForBinding"
  }, "nor", "a", {
    "nt": "BindingIdentifier"
  }, ",", "then"]
}, {
  "tokens": ["Assert", ":", {
    "id": "d"
  }, "is", "either", "a", {
    "nt": "FunctionDeclaration"
  }, ",", "a", {
    "nt": "GeneratorDeclaration"
  }, ",", "an", {
    "nt": "AsyncFunctionDeclaration"
  }, ",", "or", "an", {
    "nt": "AsyncGeneratorDeclaration"
  }, "."]
}, {
  "tokens": ["NOTE", ":", "If", "there", "are", "multiple", "function", "declarations", "for", "the", "same", "name", ",", "the", "last", "declaration", "is", "used", "."]
}, {
  "tokens": ["Let", {
    "id": "fn"
  }, "be", "the", "sole", "element", "of", "the", "BoundNames", "of", {
    "id": "d"
  }, "."]
}, {
  "tokens": ["If", {
    "id": "fn"
  }, "is", "not", "an", "element", "of", {
    "id": "declaredFunctionNames"
  }, ",", "then"]
}, {
  "tokens": ["If", {
    "id": "varEnv"
  }, "is", "a", "global", "Environment", "Record", ",", "then"]
}, {
  "tokens": ["Let", {
    "id": "fnDefinable"
  }, "be", "?", {
    "id": "varEnv"
  }, ".", "CanDeclareGlobalFunction", "(", {
    "id": "fn"
  }, ")", "."]
}, {
  "tokens": ["If", {
    "id": "fnDefinable"
  }, "is", {
    "value": "false"
  }, ",", "throw", "a", {
    "value": "TypeError"
  }, "exception", "."]
}, {
  "tokens": ["Append", {
    "id": "fn"
  }, "to", {
    "id": "declaredFunctionNames"
  }, "."]
}, {
  "tokens": ["Insert", {
    "id": "d"
  }, "as", "the", "first", "element", "of", {
    "id": "functionsToInitialize"
  }, "."]
}, {
  "tokens": ["NOTE", ":", "Annex", {
    "link": ""
  }, "adds", "additional", "steps", "at", "this", "point", "."]
}, {
  "tokens": ["Let", {
    "id": "declaredVarNames"
  }, "be", "a", "new", "empty", "List", "."]
}, {
  "tokens": ["For", "each", "element", {
    "id": "d"
  }, "of", {
    "id": "varDeclarations"
  }, ",", "do"]
}, {
  "tokens": ["If", {
    "id": "d"
  }, "is", "a", {
    "nt": "VariableDeclaration"
  }, ",", "a", {
    "nt": "ForBinding"
  }, ",", "or", "a", {
    "nt": "BindingIdentifier"
  }, ",", "then"]
}, {
  "tokens": ["For", "each", "String", {
    "id": "vn"
  }, "of", "the", "BoundNames", "of", {
    "id": "d"
  }, ",", "do"]
}, {
  "tokens": ["If", {
    "id": "vn"
  }, "is", "not", "an", "element", "of", {
    "id": "declaredFunctionNames"
  }, ",", "then"]
}, {
  "tokens": ["If", {
    "id": "varEnv"
  }, "is", "a", "global", "Environment", "Record", ",", "then"]
}, {
  "tokens": ["Let", {
    "id": "vnDefinable"
  }, "be", "?", {
    "id": "varEnv"
  }, ".", "CanDeclareGlobalVar", "(", {
    "id": "vn"
  }, ")", "."]
}, {
  "tokens": ["If", {
    "id": "vnDefinable"
  }, "is", {
    "value": "false"
  }, ",", "throw", "a", {
    "value": "TypeError"
  }, "exception", "."]
}, {
  "tokens": ["If", {
    "id": "vn"
  }, "is", "not", "an", "element", "of", {
    "id": "declaredVarNames"
  }, ",", "then"]
}, {
  "tokens": ["Append", {
    "id": "vn"
  }, "to", {
    "id": "declaredVarNames"
  }, "."]
}, {
  "tokens": ["NOTE", ":", "No", "abnormal", "terminations", "occur", "after", "this", "algorithm", "step", "unless", {
    "id": "varEnv"
  }, "is", "a", "global", "Environment", "Record", "and", "the", "global", "object", "is", "a", "Proxy", "exotic", "object", "."]
}, {
  "tokens": ["Let", {
    "id": "lexDeclarations"
  }, "be", "the", "LexicallyScopedDeclarations", "of", {
    "id": "body"
  }, "."]
}, {
  "tokens": ["For", "each", "element", {
    "id": "d"
  }, "of", {
    "id": "lexDeclarations"
  }, ",", "do"]
}, {
  "tokens": ["NOTE", ":", "Lexically", "declared", "names", "are", "only", "instantiated", "here", "but", "not", "initialized", "."]
}, {
  "tokens": ["For", "each", "element", {
    "id": "dn"
  }, "of", "the", "BoundNames", "of", {
    "id": "d"
  }, ",", "do"]
}, {
  "tokens": ["If", "IsConstantDeclaration", "of", {
    "id": "d"
  }, "is", {
    "value": "true"
  }, ",", "then"]
}, {
  "tokens": ["Perform", "?", {
    "id": "lexEnv"
  }, ".", "CreateImmutableBinding", "(", {
    "id": "dn"
  }, ",", {
    "value": "true"
  }, ")", "."]
}, {
  "tokens": ["Else", ","]
}, {
  "tokens": ["Perform", "?", {
    "id": "lexEnv"
  }, ".", "CreateMutableBinding", "(", {
    "id": "dn"
  }, ",", {
    "value": "false"
  }, ")", "."]
}, {
  "tokens": ["For", "each", "Parse", "Node", {
    "id": "f"
  }, "of", {
    "id": "functionsToInitialize"
  }, ",", "do"]
}, {
  "tokens": ["Let", {
    "id": "fn"
  }, "be", "the", "sole", "element", "of", "the", "BoundNames", "of", {
    "id": "f"
  }, "."]
}, {
  "tokens": ["Let", {
    "id": "fo"
  }, "be", "InstantiateFunctionObject", "of", {
    "id": "f"
  }, "with", "argument", {
    "id": "lexEnv"
  }, "."]
}, {
  "tokens": ["If", {
    "id": "varEnv"
  }, "is", "a", "global", "Environment", "Record", ",", "then"]
}, {
  "tokens": ["Perform", "?", {
    "id": "varEnv"
  }, ".", "CreateGlobalFunctionBinding", "(", {
    "id": "fn"
  }, ",", {
    "id": "fo"
  }, ",", {
    "value": "true"
  }, ")", "."]
}, {
  "tokens": ["Else", ","]
}, {
  "tokens": ["Let", {
    "id": "bindingExists"
  }, "be", {
    "id": "varEnv"
  }, ".", "HasBinding", "(", {
    "id": "fn"
  }, ")", "."]
}, {
  "tokens": ["If", {
    "id": "bindingExists"
  }, "is", {
    "value": "false"
  }, ",", "then"]
}, {
  "tokens": ["Let", {
    "id": "status"
  }, "be", "!", {
    "id": "varEnv"
  }, ".", "CreateMutableBinding", "(", {
    "id": "fn"
  }, ",", {
    "value": "true"
  }, ")", "."]
}, {
  "tokens": ["Assert", ":", {
    "id": "status"
  }, "is", "not", "an", "abrupt", "completion", "because", "of", "validation", "preceding", "step", {
    "link": ""
  }, "."]
}, {
  "tokens": ["Perform", "!", {
    "id": "varEnv"
  }, ".", "InitializeBinding", "(", {
    "id": "fn"
  }, ",", {
    "id": "fo"
  }, ")", "."]
}, {
  "tokens": ["Else", ","]
}, {
  "tokens": ["Perform", "!", {
    "id": "varEnv"
  }, ".", "SetMutableBinding", "(", {
    "id": "fn"
  }, ",", {
    "id": "fo"
  }, ",", {
    "value": "false"
  }, ")", "."]
}, {
  "tokens": ["For", "each", "String", {
    "id": "vn"
  }, "of", {
    "id": "declaredVarNames"
  }, ",", "do"]
}, {
  "tokens": ["If", {
    "id": "varEnv"
  }, "is", "a", "global", "Environment", "Record", ",", "then"]
}, {
  "tokens": ["Perform", "?", {
    "id": "varEnv"
  }, ".", "CreateGlobalVarBinding", "(", {
    "id": "vn"
  }, ",", {
    "value": "true"
  }, ")", "."]
}, {
  "tokens": ["Else", ","]
}, {
  "tokens": ["Let", {
    "id": "bindingExists"
  }, "be", {
    "id": "varEnv"
  }, ".", "HasBinding", "(", {
    "id": "vn"
  }, ")", "."]
}, {
  "tokens": ["If", {
    "id": "bindingExists"
  }, "is", {
    "value": "false"
  }, ",", "then"]
}, {
  "tokens": ["Let", {
    "id": "status"
  }, "be", "!", {
    "id": "varEnv"
  }, ".", "CreateMutableBinding", "(", {
    "id": "vn"
  }, ",", {
    "value": "true"
  }, ")", "."]
}, {
  "tokens": ["Assert", ":", {
    "id": "status"
  }, "is", "not", "an", "abrupt", "completion", "because", "of", "validation", "preceding", "step", {
    "link": ""
  }, "."]
}, {
  "tokens": ["Perform", "!", {
    "id": "varEnv"
  }, ".", "InitializeBinding", "(", {
    "id": "vn"
  }, ",", {
    "value": "undefined"
  }, ")", "."]
}, {
  "tokens": ["Return", "NormalCompletion", "(", {
    "const": "empty"
  }, ")", "."]
}]