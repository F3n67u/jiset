digraph {
  node500 [shape=diamond, label=<<font color="black">(= (typeof toBlock) &quot;SharedDataBlock&quot;)</font>> color="black" fillcolor="white" style=filled]
  node504 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">21:toIndex = (+ toIndex 1i)</td></tr>
      <tr><td align="left">22:fromIndex = (+ fromIndex 1i)</td></tr>
      <tr><td align="left">23:count = (- count 1i)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node499 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">7:let execution = GLOBAL_agent.CandidateExecution</td></tr>
      <tr><td align="left">8:??? &quot;Let id:{eventList} be the [ [ EventList ] ] field of the element in id:{execution} . [ [ EventsRecords ] ] whose [ [ AgentSignifier ] ] is AgentSignifier ( ) .&quot;</td></tr>
      <tr><td align="left">9:??? &quot;Let id:{bytes} be a List whose sole element is a nondeterministically chosen byte value .&quot;</td></tr>
      <tr><td align="left">11:let readEvent = (new ReadSharedMemory(&quot;Order&quot; -&gt; CONST_Unordered, &quot;NoTear&quot; -&gt; true, &quot;Block&quot; -&gt; fromBlock, &quot;ByteIndex&quot; -&gt; fromIndex, &quot;ElementSize&quot; -&gt; 1i))</td></tr>
      <tr><td align="left">12:append readEvent -&gt; eventList</td></tr>
      <tr><td align="left">13:append (new ChosenValueRecord(&quot;Event&quot; -&gt; readEvent, &quot;ChosenValue&quot; -&gt; bytes)) -&gt; execution.ChosenValues</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node503 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">19:assert (! (= (typeof toBlock) &quot;SharedDataBlock&quot;))</td></tr>
      <tr><td align="left">20:toBlock[toIndex] = fromBlock[fromIndex]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node498 [shape=diamond, label=<<font color="black">(= (typeof fromBlock) &quot;SharedDataBlock&quot;)</font>> color="black" fillcolor="white" style=filled]
  node494 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node505 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">24:return CONST_empty</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node502 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">toBlock[toIndex] = bytes[0i]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node497 [shape=diamond, label=<<font color="black">(&lt; 0i count)</font>> color="black" fillcolor="white" style=filled]
  node495 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node501 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">append (new WriteSharedMemory(&quot;Order&quot; -&gt; CONST_Unordered, &quot;NoTear&quot; -&gt; true, &quot;Block&quot; -&gt; toBlock, &quot;ByteIndex&quot; -&gt; toIndex, &quot;ElementSize&quot; -&gt; 1i, &quot;Payload&quot; -&gt; bytes)) -&gt; eventList</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node496 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">1:??? &quot;Let id:{fromSize} be the number of bytes in id:{fromBlock} .&quot;</td></tr>
      <tr><td align="left">2:assert (! (&lt; fromSize (+ fromIndex count)))</td></tr>
      <tr><td align="left">3:??? &quot;Let id:{toSize} be the number of bytes in id:{toBlock} .&quot;</td></tr>
      <tr><td align="left">4:assert (! (&lt; toSize (+ toIndex count)))</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node501 -> node504 [ color="black"]
  node494 -> node496 [ color="black"]
  node499 -> node500 [ color="black"]
  node500 -> node501 [label=<<font color="black">true</font>> color="black"]
  node500 -> node502 [label=<<font color="black">false</font>> color="black"]
  node502 -> node504 [ color="black"]
  node504 -> node497 [ color="black"]
  node497 -> node498 [label=<<font color="black">true</font>> color="black"]
  node497 -> node505 [label=<<font color="black">false</font>> color="black"]
  node503 -> node504 [ color="black"]
  node505 -> node495 [ color="black"]
  node496 -> node497 [ color="black"]
  node498 -> node499 [label=<<font color="black">true</font>> color="black"]
  node498 -> node503 [label=<<font color="black">false</font>> color="black"]
}
