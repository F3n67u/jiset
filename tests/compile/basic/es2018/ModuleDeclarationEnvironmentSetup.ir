{
  let __x0__ = module.IndirectExportEntries
  let __x1__ = 0i
  while (< __x1__ __x0__.length) {
    let e = __x0__[__x1__]
    app __x2__ = (module.ResolveExport module e.ExportName (new []))
    let resolution = [? __x2__]
    if (|| (= resolution null) (= resolution "ambiguous")) throw SyntaxError else {}
    assert (= (typeof resolution) "ResolvedBindingRecord")
    __x1__ = (+ __x1__ 1i)
  }
  let realm = module.Realm
  assert (! (= realm undefined))
  app __x3__ = (NewModuleEnvironment realm.GlobalEnv)
  let env = __x3__
  module.Environment = env
  let envRec = env.EnvironmentRecord
  let __x4__ = module.ImportEntries
  let __x5__ = 0i
  while (< __x5__ __x4__.length) {
    let in = __x4__[__x5__]
    app __x6__ = (HostResolveImportedModule module in.ModuleRequest)
    let importedModule = [! __x6__]
    if (= in.ImportName "*") {
      app __x7__ = (GetModuleNamespace importedModule)
      let namespace = [? __x7__]
      app __x8__ = (envRec.CreateImmutableBinding envRec in.LocalName true)
      [! __x8__]
      app __x9__ = (envRec.InitializeBinding envRec in.LocalName namespace)
      __x9__
    } else {
      app __x10__ = (importedModule.ResolveExport importedModule in.ImportName (new []))
      let resolution = [? __x10__]
      if (|| (= resolution null) (= resolution "ambiguous")) throw SyntaxError else {}
      app __x11__ = (envRec.CreateImportBinding envRec in.LocalName resolution.Module resolution.BindingName)
      __x11__
    }
    __x5__ = (+ __x5__ 1i)
  }
  let code = module.ECMAScriptCode
  access __x12__ = (code "VarScopedDeclarations")
  let varDeclarations = __x12__
  let declaredVarNames = (new [])
  let __x13__ = varDeclarations
  let __x14__ = 0i
  while (< __x14__ __x13__.length) {
    let d = __x13__[__x14__]
    access __x15__ = (d "BoundNames")
    let __x16__ = __x15__
    let __x17__ = 0i
    while (< __x17__ __x16__.length) {
      let dn = __x16__[__x17__]
      if (! (contains declaredVarNames dn)) {
        app __x18__ = (envRec.CreateMutableBinding envRec dn false)
        [! __x18__]
        app __x19__ = (envRec.InitializeBinding envRec dn undefined)
        __x19__
        append dn -> declaredVarNames
      } else {}
      __x17__ = (+ __x17__ 1i)
    }
    __x14__ = (+ __x14__ 1i)
  }
  access __x20__ = (code "LexicallyScopedDeclarations")
  let lexDeclarations = __x20__
  let __x21__ = lexDeclarations
  let __x22__ = 0i
  while (< __x22__ __x21__.length) {
    let d = __x21__[__x22__]
    access __x23__ = (d "BoundNames")
    let __x24__ = __x23__
    let __x25__ = 0i
    while (< __x25__ __x24__.length) {
      let dn = __x24__[__x25__]
      access __x26__ = (d "IsConstantDeclaration")
      if (= __x26__ true) {
        app __x27__ = (envRec.CreateImmutableBinding envRec dn true)
        [! __x27__]
      } else {
        app __x28__ = (envRec.CreateMutableBinding envRec dn false)
        [! __x28__]
      }
      if (|| (|| (|| (is-instance-of d FunctionDeclaration) (is-instance-of d GeneratorDeclaration)) (is-instance-of d AsyncFunctionDeclaration)) (is-instance-of d AsyncGeneratorDeclaration)) {
        access __x29__ = (d "InstantiateFunctionObject")
        app __x30__ = (__x29__ env)
        let fo = __x30__
        app __x31__ = (envRec.InitializeBinding envRec dn fo)
        __x31__
      } else {}
      __x25__ = (+ __x25__ 1i)
    }
    __x22__ = (+ __x22__ 1i)
  }
}