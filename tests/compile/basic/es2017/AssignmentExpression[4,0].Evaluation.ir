{
  if (! (|| (is-instance-of LeftHandSideExpression ObjectLiteral) (is-instance-of LeftHandSideExpression ArrayLiteral))) {
    access __x0__ = (LeftHandSideExpression "Evaluation")
    let lref = __x0__
    if (is-completion lref) if (= lref.Type CONST_normal) lref = lref.Value else return lref else {}
    lref
    access __x1__ = (AssignmentExpression "Evaluation")
    let rref = __x1__
    app __x2__ = (GetValue rref)
    if (is-completion __x2__) if (= __x2__.Type CONST_normal) __x2__ = __x2__.Value else return __x2__ else {}
    let rval = __x2__
    app __x3__ = (IsAnonymousFunctionDefinition AssignmentExpression)
    access __x4__ = (LeftHandSideExpression "IsIdentifierRef")
    if (&& (= __x3__ true) (= __x4__ true)) {
      app __x5__ = (HasOwnProperty rval "name")
      if (is-completion __x5__) if (= __x5__.Type CONST_normal) __x5__ = __x5__.Value else return __x5__ else {}
      let hasNameProperty = __x5__
      if (= hasNameProperty false) {
        app __x6__ = (GetReferencedName lref)
        app __x7__ = (SetFunctionName rval __x6__)
        __x7__
      } else {}
    } else {}
    app __x8__ = (PutValue lref rval)
    if (is-completion __x8__) if (= __x8__.Type CONST_normal) __x8__ = __x8__.Value else return __x8__ else {}
    __x8__
    app __x9__ = (WrapCompletion rval)
    return __x9__
  } else {}
  ??? "Let id:{assignmentPattern} be the parse of the source text corresponding to nt:{LeftHandSideExpression} using nt:{AssignmentPattern} as the goal symbol with its sub:{[ Yield ] } and sub:{[ Await ] } parameters set to the values used when parsing nt:{LeftHandSideExpression} ."
  access __x10__ = (AssignmentExpression "Evaluation")
  let rref = __x10__
  app __x11__ = (GetValue rref)
  if (is-completion __x11__) if (= __x11__.Type CONST_normal) __x11__ = __x11__.Value else return __x11__ else {}
  let rval = __x11__
  access __x12__ = (assignmentPattern "DestructuringAssignmentEvaluation")
  app __x13__ = (__x12__ rval)
  let status = __x13__
  if (is-completion status) if (= status.Type CONST_normal) status = status.Value else return status else {}
  status
  app __x14__ = (WrapCompletion rval)
  return __x14__
}