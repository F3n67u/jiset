def CreateRegExpStringIterator(R, S, global, fullUnicode) = {
  0:assert (= (typeof S) String)
  1:assert (= (typeof global) Boolean)
  2:assert (= (typeof fullUnicode) Boolean)
  3:let closure = ()[R, S, global, fullUnicode] => while true {
    5:app __x0__ = (RegExpExec R S)
    5:let match = [? __x0__]
    6:if (= match null) return undefined else 56:{}
    7:if (= global false) {
      8:app __x1__ = (Yield match)
      8:[? __x1__]
      9:return undefined
    } else 56:{}
    10:app __x2__ = (Get match "0")
    10:app __x3__ = (ToString [? __x2__])
    10:let matchStr = [? __x3__]
    11:if (= matchStr "") {
      12:app __x4__ = (Get R "lastIndex")
      12:app __x5__ = (ToLength [? __x4__])
      12:let thisIndex = [? __x5__]
      13:app __x6__ = (AdvanceStringIndex S thisIndex fullUnicode)
      13:let nextIndex = [! __x6__]
      14:app __x7__ = (Set R "lastIndex" nextIndex true)
      14:[? __x7__]
    } else 56:{}
    15:app __x8__ = (Yield match)
    15:[? __x8__]
  }
  16:app __x9__ = (CreateIteratorFromClosure closure "%RegExpStringIteratorPrototype%" INTRINSICS["%RegExpStringIteratorPrototype%"])
  16:return [! __x9__]
}
- id: "sec-createregexpstringiterator"
- code:
          1. Assert: Type(_S_) is String.
          1. Assert: Type(_global_) is Boolean.
          1. Assert: Type(_fullUnicode_) is Boolean.
          1. Let _closure_ be a new Abstract Closure with no parameters that captures _R_, _S_, _global_, and _fullUnicode_ and performs the following steps when called:
            1. Repeat,
              1. Let _match_ be ? RegExpExec(_R_, _S_).
              1. If _match_ is *null*, return *undefined*.
              1. If _global_ is *false*, then
                1. Perform ? Yield(_match_).
                1. Return *undefined*.
              1. Let _matchStr_ be ? ToString(? Get(_match_, *"0"*)).
              1. If _matchStr_ is the empty String, then
                1. Let _thisIndex_ be ‚Ñù(? ToLength(? Get(_R_, *"lastIndex"*))).
                1. Let _nextIndex_ be ! AdvanceStringIndex(_S_, _thisIndex_, _fullUnicode_).
                1. Perform ? Set(_R_, *"lastIndex"*, ùîΩ(_nextIndex_), *true*).
              1. Perform ? Yield(_match_).
          1. Return ! CreateIteratorFromClosure(_closure_, *"%RegExpStringIteratorPrototype%"*, %RegExpStringIteratorPrototype%).