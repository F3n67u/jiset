[{
  "tokens": ["If", {
    "id": "stack"
  }, "contains", {
    "id": "value"
  }, ",", "throw", "a", {
    "value": "TypeError"
  }, "exception", "because", "the", "structure", "is", "cyclical", "."]
}, {
  "tokens": ["Append", {
    "id": "value"
  }, "to", {
    "id": "stack"
  }, "."]
}, {
  "tokens": ["Let", {
    "id": "stepback"
  }, "be", {
    "id": "indent"
  }, "."]
}, {
  "tokens": ["Let", {
    "id": "indent"
  }, "be", "the", "concatenation", "of", {
    "id": "indent"
  }, "and", {
    "id": "gap"
  }, "."]
}, {
  "tokens": ["If", {
    "id": "PropertyList"
  }, "is", "not", {
    "value": "undefined"
  }, ",", "then"]
}, {
  "tokens": ["Let", {
    "id": "K"
  }, "be", {
    "id": "PropertyList"
  }, "."]
}, {
  "tokens": ["Else", ","]
}, {
  "tokens": ["Let", {
    "id": "K"
  }, "be", "?", "EnumerableOwnNames", "(", {
    "id": "value"
  }, ")", "."]
}, {
  "tokens": ["Let", {
    "id": "partial"
  }, "be", "a", "new", "empty", "List", "."]
}, {
  "tokens": ["For", "each", "element", {
    "id": "P"
  }, "of", {
    "id": "K"
  }, ","]
}, {
  "tokens": ["Let", {
    "id": "strP"
  }, "be", "?", "SerializeJSONProperty", "(", {
    "id": "P"
  }, ",", {
    "id": "value"
  }, ")", "."]
}, {
  "tokens": ["If", {
    "id": "strP"
  }, "is", "not", {
    "value": "undefined"
  }, ",", "then"]
}, {
  "tokens": ["Let", {
    "id": "member"
  }, "be", "QuoteJSONString", "(", {
    "id": "P"
  }, ")", "."]
}, {
  "tokens": ["Let", {
    "id": "member"
  }, "be", "the", "concatenation", "of", {
    "id": "member"
  }, "and", "the", "string", {
    "code": "\":\""
  }, "."]
}, {
  "tokens": ["If", {
    "id": "gap"
  }, "is", "not", "the", "empty", "String", ",", "then"]
}, {
  "tokens": ["Let", {
    "id": "member"
  }, "be", "the", "concatenation", "of", {
    "id": "member"
  }, "and", "code", "unit", "0x0020", "(", "SPACE", ")", "."]
}, {
  "tokens": ["Let", {
    "id": "member"
  }, "be", "the", "concatenation", "of", {
    "id": "member"
  }, "and", {
    "id": "strP"
  }, "."]
}, {
  "tokens": ["Append", {
    "id": "member"
  }, "to", {
    "id": "partial"
  }, "."]
}, {
  "tokens": ["If", {
    "id": "partial"
  }, "is", "empty", ",", "then"]
}, {
  "tokens": ["Let", {
    "id": "final"
  }, "be", {
    "code": "\"{}\""
  }, "."]
}, {
  "tokens": ["Else", ","]
}, {
  "tokens": ["If", {
    "id": "gap"
  }, "is", "the", "empty", "String", ",", "then"]
}, {
  "tokens": ["Let", {
    "id": "properties"
  }, "be", "a", "String", "formed", "by", "concatenating", "all", "the", "element", "Strings", "of", {
    "id": "partial"
  }, "with", "each", "adjacent", "pair", "of", "Strings", "separated", "with", "code", "unit", "0x002C", "(", "COMMA", ")", ".", "A", "comma", "is", "not", "inserted", "either", "before", "the", "first", "String", "or", "after", "the", "last", "String", "."]
}, {
  "tokens": ["Let", {
    "id": "final"
  }, "be", "the", "result", "of", "concatenating", {
    "code": "\"{\""
  }, ",", {
    "id": "properties"
  }, ",", "and", {
    "code": "\"}\""
  }, "."]
}, {
  "tokens": ["Else", {
    "id": "gap"
  }, "is", "not", "the", "empty", "String"]
}, {
  "tokens": ["Let", {
    "id": "separator"
  }, "be", "the", "result", "of", "concatenating", "code", "unit", "0x002C", "(", "COMMA", ")", ",", "code", "unit", "0x000A", "(", "LINE", "FEED", ")", ",", "and", {
    "id": "indent"
  }, "."]
}, {
  "tokens": ["Let", {
    "id": "properties"
  }, "be", "a", "String", "formed", "by", "concatenating", "all", "the", "element", "Strings", "of", {
    "id": "partial"
  }, "with", "each", "adjacent", "pair", "of", "Strings", "separated", "with", {
    "id": "separator"
  }, ".", "The", {
    "id": "separator"
  }, "String", "is", "not", "inserted", "either", "before", "the", "first", "String", "or", "after", "the", "last", "String", "."]
}, {
  "tokens": ["Let", {
    "id": "final"
  }, "be", "the", "result", "of", "concatenating", {
    "code": "\"{\""
  }, ",", "code", "unit", "0x000A", "(", "LINE", "FEED", ")", ",", {
    "id": "indent"
  }, ",", {
    "id": "properties"
  }, ",", "code", "unit", "0x000A", "(", "LINE", "FEED", ")", ",", {
    "id": "stepback"
  }, ",", "and", {
    "code": "\"}\""
  }, "."]
}, {
  "tokens": ["Remove", "the", "last", "element", "of", {
    "id": "stack"
  }, "."]
}, {
  "tokens": ["Let", {
    "id": "indent"
  }, "be", {
    "id": "stepback"
  }, "."]
}, {
  "tokens": ["Return", {
    "id": "final"
  }, "."]
}]