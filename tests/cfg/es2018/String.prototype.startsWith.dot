digraph {
  node13520 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return false</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node13501 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node13516 [shape=cds, label=<<font color="black">7:app __x5__ = (max pos 0i)</font>> color="black" fillcolor="white" style=filled]
  node13511 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node13506 [shape=cds, label=<<font color="black">1:app __x1__ = (ToString O)</font>> color="black" fillcolor="white" style=filled]
  node13521 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">10:??? &quot;If the sequence of elements of id:{S} starting at id:{start} of length id:{searchLength} is the same as the full element sequence of id:{searchStr} , return value:{true} .&quot;</td></tr>
      <tr><td align="left">11:??? &quot;Otherwise , return value:{false} .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node13519 [shape=diamond, label=<<font color="black">(&lt; len (+ searchLength start))</font>> color="black" fillcolor="white" style=filled]
  node13515 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">5:let pos = [? __x4__]</td></tr>
      <tr><td align="left">6:let len = S.length</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node13504 [shape=cds, label=<<font color="black">0:app __x0__ = (RequireObjectCoercible this)</font>> color="black" fillcolor="white" style=filled]
  node13512 [shape=cds, label=<<font color="black">4:app __x3__ = (ToString searchString)</font>> color="black" fillcolor="white" style=filled]
  node13500 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node13507 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">1:let S = [? __x1__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node13503 [shape=cds, label=<<font color="black">app position = (GetArgument argumentsList 1i)</font>> color="black" fillcolor="white" style=filled]
  node13514 [shape=cds, label=<<font color="black">5:app __x4__ = (ToInteger position)</font>> color="black" fillcolor="white" style=filled]
  node13518 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">7:let start = __x6__</td></tr>
      <tr><td align="left">8:let searchLength = searchStr.length</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node13508 [shape=cds, label=<<font color="black">2:app __x2__ = (IsRegExp searchString)</font>> color="black" fillcolor="white" style=filled]
  node13509 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">2:let isRegExp = [? __x2__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node13502 [shape=cds, label=<<font color="black">app searchString = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node13513 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">4:let searchStr = [? __x3__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node13517 [shape=cds, label=<<font color="black">7:app __x6__ = (min __x5__ len)</font>> color="black" fillcolor="white" style=filled]
  node13505 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let O = [? __x0__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node13510 [shape=diamond, label=<<font color="black">(= isRegExp true)</font>> color="black" fillcolor="white" style=filled]
  node13511 -> node13512 [ color="black"]
  node13510 -> node13511 [label=<<font color="black">true</font>> color="black"]
  node13510 -> node13512 [label=<<font color="black">false</font>> color="black"]
  node13514 -> node13515 [ color="black"]
  node13520 -> node13521 [ color="black"]
  node13509 -> node13510 [ color="black"]
  node13513 -> node13514 [ color="black"]
  node13506 -> node13507 [ color="black"]
  node13502 -> node13503 [ color="black"]
  node13507 -> node13508 [ color="black"]
  node13515 -> node13516 [ color="black"]
  node13504 -> node13505 [ color="black"]
  node13521 -> node13501 [ color="black"]
  node13512 -> node13513 [ color="black"]
  node13516 -> node13517 [ color="black"]
  node13500 -> node13502 [ color="black"]
  node13503 -> node13504 [ color="black"]
  node13518 -> node13519 [ color="black"]
  node13517 -> node13518 [ color="black"]
  node13519 -> node13520 [label=<<font color="black">true</font>> color="black"]
  node13519 -> node13521 [label=<<font color="black">false</font>> color="black"]
  node13508 -> node13509 [ color="black"]
  node13505 -> node13506 [ color="black"]
}
