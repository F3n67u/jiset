{
  [1] app __x0__ = (ParseText sourceText Module)
  [1] let body = __x0__
  [3] access __x1__ = (body "ModuleRequests")
  [3] let requestedModules = __x1__
  [4] access __x2__ = (body "ImportEntries")
  [4] let importEntries = __x2__
  [5] app __x3__ = (ImportedLocalNames importEntries)
  [5] let importedBoundNames = __x3__
  [6] let indirectExportEntries = (new [])
  [7] let localExportEntries = (new [])
  [8] let starExportEntries = (new [])
  [9] access __x4__ = (body "ExportEntries")
  [9] let exportEntries = __x4__
  [10] let __x5__ = exportEntries
  [10] let __x6__ = 0i
  [10] while (< __x6__ __x5__.length) {
    let ee = __x5__[__x6__]
    [11] if (= ee.ModuleRequest null) if (! (contains importedBoundNames ee.LocalName)) append ee -> localExportEntries else {
      [15] ??? "Let id:{ie} be the element of id:{importEntries} whose [ [ LocalName ] ] is the same as id:{ee} . [ [ LocalName ] ] ."
      [16] ??? "If id:{ie} . [ [ ImportName ] ] is value:{\"\\} \" * , then step-list:{...}"
      [19] ??? "Else , step-list:{...}"
    } else [20] {}
    [22] ??? "Else if id:{ee} . [ [ ImportName ] ] is value:{\"\\} \" * and id:{ee} . [ [ ExportName ] ] is value:{null} , then step-list:{...}"
    [24] ??? "Else , step-list:{...}"
    __x6__ = (+ __x6__ 1i)
  }
  [26] app __x7__ = (WrapCompletion (new SourceTextModuleRecord("Realm" -> realm, "Environment" -> undefined, "Namespace" -> undefined, "Status" -> CONST_unlinked, "EvaluationError" -> undefined, "HostDefined" -> hostDefined, "ECMAScriptCode" -> body, "Context" -> CONST_empty, "ImportMeta" -> CONST_empty, "RequestedModules" -> requestedModules, "ImportEntries" -> importEntries, "LocalExportEntries" -> localExportEntries, "IndirectExportEntries" -> indirectExportEntries, "StarExportEntries" -> starExportEntries, "DFSIndex" -> undefined, "DFSAncestorIndex" -> undefined)))
  [26] return __x7__
}