digraph {
  node11907 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">7:let end = __x6__</td></tr>
      <tr><td align="left">8:let searchLength = searchStr.length</td></tr>
      <tr><td align="left">9:let start = (- end searchLength)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11897 [shape=diamond, label=<<font color="black">(= isRegExp true)</font>> color="black" fillcolor="white" style=filled]
  node11908 [shape=diamond, label=<<font color="black">(&lt; start 0i)</font>> color="black" fillcolor="white" style=filled]
  node11892 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let O = [? __x0__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11888 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node11901 [shape=diamond, label=<<font color="black">(= endPosition undefined)</font>> color="black" fillcolor="white" style=filled]
  node11905 [shape=cds, label=<<font color="black">7:app __x5__ = (max pos 0i)</font>> color="black" fillcolor="white" style=filled]
  node11900 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">4:let searchStr = [? __x3__]</td></tr>
      <tr><td align="left">5:let len = S.length</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11893 [shape=cds, label=<<font color="black">1:app __x1__ = (ToString O)</font>> color="black" fillcolor="white" style=filled]
  node11887 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node11889 [shape=cds, label=<<font color="black">app searchString = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node11909 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return false</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11906 [shape=cds, label=<<font color="black">7:app __x6__ = (min __x5__ len)</font>> color="black" fillcolor="white" style=filled]
  node11910 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">11:??? &quot;If the sequence of elements of id:{S} starting at id:{start} of length id:{searchLength} is the same as the full element sequence of id:{searchStr} , return value:{true} .&quot;</td></tr>
      <tr><td align="left">12:??? &quot;Otherwise , return value:{false} .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11896 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">2:let isRegExp = [? __x2__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11895 [shape=cds, label=<<font color="black">2:app __x2__ = (IsRegExp searchString)</font>> color="black" fillcolor="white" style=filled]
  node11898 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11891 [shape=cds, label=<<font color="black">0:app __x0__ = (RequireObjectCoercible this)</font>> color="black" fillcolor="white" style=filled]
  node11902 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let pos = len</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11899 [shape=cds, label=<<font color="black">4:app __x3__ = (ToString searchString)</font>> color="black" fillcolor="white" style=filled]
  node11904 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let pos = [? __x4__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11894 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">1:let S = [? __x1__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11903 [shape=cds, label=<<font color="black">app __x4__ = (ToInteger endPosition)</font>> color="black" fillcolor="white" style=filled]
  node11890 [shape=cds, label=<<font color="black">app endPosition = (GetArgument argumentsList 1i)</font>> color="black" fillcolor="white" style=filled]
  node11893 -> node11894 [ color="black"]
  node11889 -> node11890 [ color="black"]
  node11908 -> node11909 [label=<<font color="black">true</font>> color="black"]
  node11908 -> node11910 [label=<<font color="black">false</font>> color="black"]
  node11909 -> node11910 [ color="black"]
  node11890 -> node11891 [ color="black"]
  node11902 -> node11905 [ color="black"]
  node11897 -> node11898 [label=<<font color="black">true</font>> color="black"]
  node11897 -> node11899 [label=<<font color="black">false</font>> color="black"]
  node11906 -> node11907 [ color="black"]
  node11910 -> node11888 [ color="black"]
  node11891 -> node11892 [ color="black"]
  node11900 -> node11901 [ color="black"]
  node11905 -> node11906 [ color="black"]
  node11899 -> node11900 [ color="black"]
  node11887 -> node11889 [ color="black"]
  node11904 -> node11905 [ color="black"]
  node11907 -> node11908 [ color="black"]
  node11903 -> node11904 [ color="black"]
  node11892 -> node11893 [ color="black"]
  node11898 -> node11899 [ color="black"]
  node11901 -> node11902 [label=<<font color="black">true</font>> color="black"]
  node11901 -> node11903 [label=<<font color="black">false</font>> color="black"]
  node11894 -> node11895 [ color="black"]
  node11895 -> node11896 [ color="black"]
  node11896 -> node11897 [ color="black"]
}
