{
  [0] app __x0__ = (IsDetachedBuffer arrayBuffer)
  [0] assert (= __x0__ false)
  [3] let block = arrayBuffer.ArrayBufferData
  [4] ??? "Let id:{elementSize} be the Number value of the Element Size value specified in link:{} for Element Type id:{type} ."
  [5] app __x1__ = (IsSharedArrayBuffer arrayBuffer)
  [5] if (= __x1__ true) {
    [6] let execution = GLOBAL_agent.CandidateExecution
    [7] ??? "Let id:{eventList} be the [ [ EventList ] ] field of the element in id:{execution} . [ [ EventsRecords ] ] whose [ [ AgentSignifier ] ] is AgentSignifier ( ) ."
    [8] if (&& (= isTypedArray true) (|| (|| (|| (|| (|| (= type "Int8") (= type "Uint8")) (= type "Int16")) (= type "Uint16")) (= type "Int32")) (= type "Uint32"))) let noTear = true else let noTear = false
    [9] ??? "Let id:{rawValue} be a List of length id:{elementSize} of nondeterministically chosen byte values ."
    [11] let readEvent = (new ReadSharedMemory("Order" -> order, "NoTear" -> noTear, "Block" -> block, "ByteIndex" -> byteIndex, "ElementSize" -> elementSize))
    [12] append readEvent -> eventList
    [13] append (new ChosenValueRecord("Event" -> readEvent, "ChosenValue" -> rawValue)) -> execution.ChosenValues
  } else [10] {}
  [14] ??? "Else , let id:{rawValue} be a List of id:{elementSize} containing , in order , the id:{elementSize} sequence of bytes starting with id:{block} [ id:{byteIndex} ] ."
  [15] if (= isLittleEndian absent) isLittleEndian = GLOBAL_agent.LittleEndian else [10] {}
  [16] app __x2__ = (RawBytesToNumber type rawValue isLittleEndian)
  [16] app __x3__ = (WrapCompletion __x2__)
  [16] return __x3__
}