digraph {
  node16150 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">34:let wrapper = __x18__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16118 [shape=cds, label=<<font color="black">13:app __x5__ = (ToString k)</font>> color="black" fillcolor="white" style=filled]
  node16146 [shape=diamond, label=<<font color="black">(= __x17__ String)</font>> color="black" fillcolor="white" style=filled]
  node16114 [shape=cds, label=<<font color="black">10:app __x3__ = (Get replacer &quot;length&quot;)</font>> color="black" fillcolor="white" style=filled]
  node16119 [shape=cds, label=<<font color="black">13:app __x6__ = (Get replacer [! __x5__])</font>> color="black" fillcolor="white" style=filled]
  node16123 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let item = v</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16126 [shape=cds, label=<<font color="black">app __x9__ = (ToString v)</font>> color="black" fillcolor="white" style=filled]
  node16130 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">??? &quot;If id:{v} has a [ [ StringData ] ] or [ [ NumberData ] ] internal slot , let id:{item} be ? ToString ( id:{v} ) .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16125 [shape=diamond, label=<<font color="black">(= __x8__ Number)</font>> color="black" fillcolor="white" style=filled]
  node16137 [shape=diamond, label=<<font color="black">(! (= space.StringData absent))</font>> color="black" fillcolor="white" style=filled]
  node16103 [shape=cds, label=<<font color="black">app space = (GetArgument argumentsList 2i)</font>> color="black" fillcolor="white" style=filled]
  node16124 [shape=cds, label=<<font color="black">app __x8__ = (Type v)</font>> color="black" fillcolor="white" style=filled]
  node16135 [shape=cds, label=<<font color="black">24:app __x12__ = (ToNumber space)</font>> color="black" fillcolor="white" style=filled]
  node16105 [shape=cds, label=<<font color="black">3:app __x0__ = (Type replacer)</font>> color="black" fillcolor="white" style=filled]
  node16141 [shape=diamond, label=<<font color="black">(= __x14__ Number)</font>> color="black" fillcolor="white" style=filled]
  node16151 [shape=cds, label=<<font color="black">35:app __x19__ = (CreateDataProperty wrapper &quot;&quot; value)</font>> color="black" fillcolor="white" style=filled]
  node16099 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node16131 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">19:??? &quot;If id:{item} is not value:{undefined} and id:{item} is not currently an element of id:{PropertyList} , then in:{} out:{}&quot;</td></tr>
      <tr><td align="left">21:let k = (+ k 1i)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16136 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">24:let space = [? __x12__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16109 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let ReplacerFunction = replacer</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16104 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let stack = (new [])</td></tr>
      <tr><td align="left">1:let indent = &quot;&quot;</td></tr>
      <tr><td align="left">2:let PropertyList = undefined</td></tr>
      <tr><td align="left">2:let ReplacerFunction = undefined</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16140 [shape=cds, label=<<font color="black">32:app __x14__ = (Type space)</font>> color="black" fillcolor="white" style=filled]
  node16108 [shape=diamond, label=<<font color="black">(= __x1__ true)</font>> color="black" fillcolor="white" style=filled]
  node16144 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">28:let space = __x16__</td></tr>
      <tr><td align="left">29:??? &quot;Set id:{gap} to a String containing id:{space} occurrences of code unit 0x0020 ( SPACE ) . This will be the empty String if id:{space} is less than 1 .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16147 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">??? &quot;If the number of elements in id:{space} is 10 or less , set id:{gap} to id:{space} ; otherwise set id:{gap} to a String consisting of the first 10 elements of id:{space} .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16127 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let item = [! __x9__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16112 [shape=diamond, label=<<font color="black">(= isArray true)</font>> color="black" fillcolor="white" style=filled]
  node16132 [shape=cds, label=<<font color="black">22:app __x11__ = (Type space)</font>> color="black" fillcolor="white" style=filled]
  node16115 [shape=cds, label=<<font color="black">10:app __x4__ = (ToLength [? __x3__])</font>> color="black" fillcolor="white" style=filled]
  node16120 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">13:let v = [? __x6__]</td></tr>
      <tr><td align="left">14:let item = undefined</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16100 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node16152 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">35:let status = __x19__</td></tr>
      <tr><td align="left">36:assert (= status true)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16122 [shape=diamond, label=<<font color="black">(= __x7__ String)</font>> color="black" fillcolor="white" style=filled]
  node16154 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">37:return [? __x20__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16133 [shape=diamond, label=<<font color="black">(= __x11__ Object)</font>> color="black" fillcolor="white" style=filled]
  node16107 [shape=cds, label=<<font color="black">6:app __x1__ = (IsCallable replacer)</font>> color="black" fillcolor="white" style=filled]
  node16139 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">26:let space = [? __x13__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16128 [shape=cds, label=<<font color="black">app __x10__ = (Type v)</font>> color="black" fillcolor="white" style=filled]
  node16101 [shape=cds, label=<<font color="black">app value = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node16129 [shape=diamond, label=<<font color="black">(= __x10__ Object)</font>> color="black" fillcolor="white" style=filled]
  node16116 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">10:let len = [? __x4__]</td></tr>
      <tr><td align="left">11:let k = 0i</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16111 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">7:let isArray = [? __x2__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16143 [shape=cds, label=<<font color="black">28:app __x16__ = (min 10i __x15__)</font>> color="black" fillcolor="white" style=filled]
  node16148 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">gap = &quot;&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16106 [shape=diamond, label=<<font color="black">(= __x0__ Object)</font>> color="black" fillcolor="white" style=filled]
  node16138 [shape=cds, label=<<font color="black">26:app __x13__ = (ToString space)</font>> color="black" fillcolor="white" style=filled]
  node16153 [shape=cds, label=<<font color="black">37:app __x20__ = (SerializeJSONProperty &quot;&quot; wrapper)</font>> color="black" fillcolor="white" style=filled]
  node16121 [shape=cds, label=<<font color="black">17:app __x7__ = (Type v)</font>> color="black" fillcolor="white" style=filled]
  node16102 [shape=cds, label=<<font color="black">app replacer = (GetArgument argumentsList 1i)</font>> color="black" fillcolor="white" style=filled]
  node16134 [shape=diamond, label=<<font color="black">(! (= space.NumberData absent))</font>> color="black" fillcolor="white" style=filled]
  node16149 [shape=cds, label=<<font color="black">34:app __x18__ = (ObjectCreate INTRINSIC_ObjectPrototype)</font>> color="black" fillcolor="white" style=filled]
  node16117 [shape=diamond, label=<<font color="black">(&lt; k len)</font>> color="black" fillcolor="white" style=filled]
  node16113 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">9:let PropertyList = (new [])</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16145 [shape=cds, label=<<font color="black">app __x17__ = (Type space)</font>> color="black" fillcolor="white" style=filled]
  node16110 [shape=cds, label=<<font color="black">7:app __x2__ = (IsArray replacer)</font>> color="black" fillcolor="white" style=filled]
  node16142 [shape=cds, label=<<font color="black">28:app __x15__ = (ToInteger space)</font>> color="black" fillcolor="white" style=filled]
  node16154 -> node16100 [ color="black"]
  node16109 -> node16132 [ color="black"]
  node16114 -> node16115 [ color="black"]
  node16152 -> node16153 [ color="black"]
  node16112 -> node16113 [label=<<font color="black">true</font>> color="black"]
  node16112 -> node16132 [label=<<font color="black">false</font>> color="black"]
  node16111 -> node16112 [ color="black"]
  node16119 -> node16120 [ color="black"]
  node16107 -> node16108 [ color="black"]
  node16102 -> node16103 [ color="black"]
  node16122 -> node16123 [label=<<font color="black">true</font>> color="black"]
  node16122 -> node16124 [label=<<font color="black">false</font>> color="black"]
  node16142 -> node16143 [ color="black"]
  node16116 -> node16117 [ color="black"]
  node16099 -> node16101 [ color="black"]
  node16144 -> node16149 [ color="black"]
  node16125 -> node16126 [label=<<font color="black">true</font>> color="black"]
  node16125 -> node16128 [label=<<font color="black">false</font>> color="black"]
  node16120 -> node16121 [ color="black"]
  node16134 -> node16135 [label=<<font color="black">true</font>> color="black"]
  node16134 -> node16137 [label=<<font color="black">false</font>> color="black"]
  node16130 -> node16131 [ color="black"]
  node16128 -> node16129 [ color="black"]
  node16131 -> node16117 [ color="black"]
  node16136 -> node16140 [ color="black"]
  node16137 -> node16138 [label=<<font color="black">true</font>> color="black"]
  node16137 -> node16140 [label=<<font color="black">false</font>> color="black"]
  node16121 -> node16122 [ color="black"]
  node16118 -> node16119 [ color="black"]
  node16133 -> node16134 [label=<<font color="black">true</font>> color="black"]
  node16133 -> node16140 [label=<<font color="black">false</font>> color="black"]
  node16145 -> node16146 [ color="black"]
  node16140 -> node16141 [ color="black"]
  node16103 -> node16104 [ color="black"]
  node16126 -> node16127 [ color="black"]
  node16108 -> node16109 [label=<<font color="black">true</font>> color="black"]
  node16108 -> node16110 [label=<<font color="black">false</font>> color="black"]
  node16151 -> node16152 [ color="black"]
  node16148 -> node16149 [ color="black"]
  node16106 -> node16107 [label=<<font color="black">true</font>> color="black"]
  node16106 -> node16132 [label=<<font color="black">false</font>> color="black"]
  node16132 -> node16133 [ color="black"]
  node16143 -> node16144 [ color="black"]
  node16127 -> node16131 [ color="black"]
  node16110 -> node16111 [ color="black"]
  node16101 -> node16102 [ color="black"]
  node16124 -> node16125 [ color="black"]
  node16115 -> node16116 [ color="black"]
  node16138 -> node16139 [ color="black"]
  node16105 -> node16106 [ color="black"]
  node16117 -> node16118 [label=<<font color="black">true</font>> color="black"]
  node16117 -> node16132 [label=<<font color="black">false</font>> color="black"]
  node16135 -> node16136 [ color="black"]
  node16113 -> node16114 [ color="black"]
  node16153 -> node16154 [ color="black"]
  node16146 -> node16147 [label=<<font color="black">true</font>> color="black"]
  node16146 -> node16148 [label=<<font color="black">false</font>> color="black"]
  node16123 -> node16131 [ color="black"]
  node16129 -> node16130 [label=<<font color="black">true</font>> color="black"]
  node16129 -> node16131 [label=<<font color="black">false</font>> color="black"]
  node16147 -> node16149 [ color="black"]
  node16150 -> node16151 [ color="black"]
  node16104 -> node16105 [ color="black"]
  node16149 -> node16150 [ color="black"]
  node16141 -> node16142 [label=<<font color="black">true</font>> color="black"]
  node16141 -> node16145 [label=<<font color="black">false</font>> color="black"]
  node16139 -> node16140 [ color="black"]
}
