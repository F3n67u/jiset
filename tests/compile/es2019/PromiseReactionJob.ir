{
  app reaction = (GetArgument argumentsList 0i)
  app argument = (GetArgument argumentsList 1i)
  [1] let promiseCapability = reaction.Capability
  [2] let type = reaction.Type
  [3] let handler = reaction.Handler
  [9] if (= handler undefined) if (= type "Fulfill") {
    app __x0__ = (NormalCompletion argument)
    let handlerResult = __x0__
  } else {
    [7] assert (= type "Reject")
    [8] app __x1__ = (ThrowCompletion argument)
    [8] let handlerResult = __x1__
  } else {
    app __x2__ = (Call handler undefined (new [argument]))
    let handlerResult = __x2__
  }
  [10] if (= promiseCapability undefined) {
    [11] app __x3__ = (IsAbruptCompletion handlerResult)
    [11] assert (! __x3__)
    [12] app __x4__ = (NormalCompletion CONST_empty)
    [12] app __x5__ = (WrapCompletion __x4__)
    [12] return __x5__
  } else [0] {}
  [15] app __x6__ = (IsAbruptCompletion handlerResult)
  [15] if __x6__ {
    [14] app __x7__ = (Call promiseCapability.Reject undefined (new [handlerResult.Value]))
    [14] let status = __x7__
  } else {
    [16] app __x8__ = (Call promiseCapability.Resolve undefined (new [handlerResult.Value]))
    [16] let status = __x8__
  }
  [17] app __x9__ = (Completion status)
  [17] app __x10__ = (WrapCompletion __x9__)
  [17] return __x10__
}