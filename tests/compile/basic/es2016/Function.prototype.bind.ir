{
  let Target = this
  app __x0__ = (IsCallable Target)
  if (= __x0__ false) throw INTRINSIC_TypeError else {}
  ??? "Let id:{args} be a new ( possibly empty ) List consisting of all of the argument values provided after id:{thisArg} in order ."
  app __x1__ = (BoundFunctionCreate Target thisArg args)
  let F = [? __x1__]
  app __x2__ = (HasOwnProperty Target "length")
  let targetHasLength = [? __x2__]
  if (= targetHasLength true) {
    app __x3__ = (Get Target "length")
    let targetLen = [? __x3__]
    app __x4__ = (Type targetLen)
    if (! (= __x4__ Number)) let L = 0i else {
      app __x5__ = (ToInteger targetLen)
      let targetLen = __x5__
      ??? "Let id:{L} be the larger of 0 and the result of id:{targetLen} minus the number of elements of id:{args} ."
    }
  } else let L = 0i
  app __x6__ = (DefinePropertyOrThrow F "length" (new PropertyDescriptor("Value" -> L, "Writable" -> false, "Enumerable" -> false, "Configurable" -> true)))
  [! __x6__]
  app __x7__ = (Get Target "name")
  let targetName = [? __x7__]
  app __x8__ = (Type targetName)
  if (! (= __x8__ String)) let targetName = "" else {}
  app __x9__ = (SetFunctionName F targetName "bound")
  __x9__
  return F
}