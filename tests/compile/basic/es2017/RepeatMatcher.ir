{
  if (= max 0i) {
    app __x0__ = (c x)
    return __x0__
  } else {}
  ??? "Let id:{d} be an internal Continuation closure that takes one State argument id:{y} and performs the following steps when evaluated : in:{} out:{}"
  ??? "Let id:{cap} be a fresh copy of id:{x} ' s id:{captures} List ."
  let k = (+ parenIndex 1i)
  let __x1__ = (+ (+ parenIndex parenCount) 1i)
  while (< k __x1__) cap[k] = undefined
  let e = x.endIndex
  let xr = (new [e, cap])
  if (! (= min 0i)) {
    app __x2__ = (m xr d)
    return __x2__
  } else {}
  if (= greedy false) {
    app __x3__ = (c x)
    let z = __x3__
    if (! (= z CONST_failure)) return z else {}
    app __x4__ = (m xr d)
    return __x4__
  } else {}
  app __x5__ = (m xr d)
  let z = __x5__
  if (! (= z CONST_failure)) return z else {}
  app __x6__ = (c x)
  return __x6__
}