{
  if (! (|| (is-instance-of DestructuringAssignmentTarget ObjectLiteral) (is-instance-of DestructuringAssignmentTarget ArrayLiteral))) {
    access __x0__ = (DestructuringAssignmentTarget "Evaluation")
    let lref = __x0__
    [? lref]
  } else {}
  app __x1__ = (ArrayCreate 0i)
  let A = __x1__
  let n = 0i
  while (= iteratorRecord.Done false) {
    app __x2__ = (IteratorStep iteratorRecord.Iterator)
    let next = __x2__
    app __x3__ = (IsAbruptCompletion next)
    if __x3__ iteratorRecord.Done = true else {}
    [? next]
    if (= next false) iteratorRecord.Done = true else {
      app __x4__ = (IteratorValue next)
      let nextValue = __x4__
      app __x5__ = (IsAbruptCompletion nextValue)
      if __x5__ iteratorRecord.Done = true else {}
      [? nextValue]
      app __x6__ = (ToString n)
      app __x7__ = (CreateDataProperty A [! __x6__] nextValue)
      let status = __x7__
      assert (= status true)
      n = (+ n 1i)
    }
  }
  if (! (|| (is-instance-of DestructuringAssignmentTarget ObjectLiteral) (is-instance-of DestructuringAssignmentTarget ArrayLiteral))) {
    app __x8__ = (PutValue lref A)
    return [? __x8__]
  } else {}
  ??? "Let id:{nestedAssignmentPattern} be the parse of the source text corresponding to nt:{DestructuringAssignmentTarget} using either nt:{AssignmentPattern} or nt:{AssignmentPattern[Yield]} as the goal symbol depending upon whether this nt:{AssignmentElement} has the sub:{[ Yield ]} parameter ."
  access __x9__ = (nestedAssignmentPattern "DestructuringAssignmentEvaluation" A)
  return __x9__
}