{
  assert (= (typeof env) "DeclarativeEnvironmentRecord")
  access __x0__ = (code "LexicallyScopedDeclarations")
  let declarations = __x0__
  let __x1__ = declarations
  let __x2__ = 0i
  while (< __x2__ __x1__.length) {
    let d = __x1__[__x2__]
    access __x3__ = (d "BoundNames")
    let __x4__ = __x3__
    let __x5__ = 0i
    while (< __x5__ __x4__.length) {
      let dn = __x4__[__x5__]
      access __x6__ = (d "IsConstantDeclaration")
      if (= __x6__ true) {
        app __x7__ = (env.CreateImmutableBinding env dn true)
        [! __x7__]
      } else {
        app __x8__ = (env.CreateMutableBinding env dn false)
        [! __x8__]
      }
      __x5__ = (+ __x5__ 1i)
    }
    if (|| (|| (|| (is-instance-of d FunctionDeclaration) (is-instance-of d GeneratorDeclaration)) (is-instance-of d AsyncFunctionDeclaration)) (is-instance-of d AsyncGeneratorDeclaration)) {
      access __x9__ = (d "BoundNames")
      let fn = __x9__[0i]
      access __x10__ = (d "InstantiateFunctionObject" env)
      let fo = __x10__
      app __x11__ = (env.InitializeBinding env fn fo)
      __x11__
    } else {}
    __x2__ = (+ __x2__ 1i)
  }
}