digraph {
  node18107 [shape=cds, label=<<font color="black">2:app __x1__ = (ToIndex byteOffset)</font>> color="black" fillcolor="white" style=filled]
  node18120 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw RangeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18104 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18116 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let viewByteLength = (- bufferByteLength offset)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18123 [shape=cds, label=<<font color="black">12:app __x5__ = (IsDetachedBuffer buffer)</font>> color="black" fillcolor="white" style=filled]
  node18112 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">4:let bufferByteLength = buffer.ArrayBufferByteLength</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18108 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">2:let offset = [? __x1__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18100 [shape=cds, label=<<font color="black">app buffer = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node18124 [shape=diamond, label=<<font color="black">(= __x5__ true)</font>> color="black" fillcolor="white" style=filled]
  node18105 [shape=cds, label=<<font color="black">1:app __x0__ = (RequireInternalSlot buffer &quot;ArrayBufferData&quot;)</font>> color="black" fillcolor="white" style=filled]
  node18109 [shape=cds, label=<<font color="black">3:app __x2__ = (IsDetachedBuffer buffer)</font>> color="black" fillcolor="white" style=filled]
  node18102 [shape=cds, label=<<font color="black">app byteLength = (GetArgument argumentsList 2i)</font>> color="black" fillcolor="white" style=filled]
  node18106 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">1:[? __x0__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18122 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">11:let O = [? __x4__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18110 [shape=diamond, label=<<font color="black">(= __x2__ true)</font>> color="black" fillcolor="white" style=filled]
  node18125 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18098 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node18101 [shape=cds, label=<<font color="black">app byteOffset = (GetArgument argumentsList 1i)</font>> color="black" fillcolor="white" style=filled]
  node18114 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw RangeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18111 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18126 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">13:O.ViewedArrayBuffer = buffer</td></tr>
      <tr><td align="left">14:O.ByteLength = viewByteLength</td></tr>
      <tr><td align="left">15:O.ByteOffset = offset</td></tr>
      <tr><td align="left">16:return O</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18113 [shape=diamond, label=<<font color="black">(&lt; bufferByteLength offset)</font>> color="black" fillcolor="white" style=filled]
  node18119 [shape=diamond, label=<<font color="black">(&lt; bufferByteLength (+ offset viewByteLength))</font>> color="black" fillcolor="white" style=filled]
  node18103 [shape=diamond, label=<<font color="black">(= NewTarget undefined)</font>> color="black" fillcolor="white" style=filled]
  node18118 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">9:let viewByteLength = [? __x3__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18121 [shape=cds, label=<<font color="black">11:app __x4__ = (OrdinaryCreateFromConstructor NewTarget &quot;%DataView.prototype%&quot; (new [&quot;DataView&quot;, &quot;ViewedArrayBuffer&quot;, &quot;ByteLength&quot;, &quot;ByteOffset&quot;]))</font>> color="black" fillcolor="white" style=filled]
  node18099 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node18117 [shape=cds, label=<<font color="black">9:app __x3__ = (ToIndex byteLength)</font>> color="black" fillcolor="white" style=filled]
  node18115 [shape=diamond, label=<<font color="black">(= byteLength undefined)</font>> color="black" fillcolor="white" style=filled]
  node18114 -> node18115 [ color="black"]
  node18110 -> node18111 [label=<<font color="black">true</font>> color="black"]
  node18110 -> node18112 [label=<<font color="black">false</font>> color="black"]
  node18104 -> node18105 [ color="black"]
  node18126 -> node18099 [ color="black"]
  node18101 -> node18102 [ color="black"]
  node18098 -> node18100 [ color="black"]
  node18112 -> node18113 [ color="black"]
  node18113 -> node18114 [label=<<font color="black">true</font>> color="black"]
  node18113 -> node18115 [label=<<font color="black">false</font>> color="black"]
  node18115 -> node18116 [label=<<font color="black">true</font>> color="black"]
  node18115 -> node18117 [label=<<font color="black">false</font>> color="black"]
  node18103 -> node18104 [label=<<font color="black">true</font>> color="black"]
  node18103 -> node18105 [label=<<font color="black">false</font>> color="black"]
  node18106 -> node18107 [ color="black"]
  node18102 -> node18103 [ color="black"]
  node18119 -> node18120 [label=<<font color="black">true</font>> color="black"]
  node18119 -> node18121 [label=<<font color="black">false</font>> color="black"]
  node18100 -> node18101 [ color="black"]
  node18121 -> node18122 [ color="black"]
  node18111 -> node18112 [ color="black"]
  node18123 -> node18124 [ color="black"]
  node18105 -> node18106 [ color="black"]
  node18120 -> node18121 [ color="black"]
  node18108 -> node18109 [ color="black"]
  node18124 -> node18125 [label=<<font color="black">true</font>> color="black"]
  node18124 -> node18126 [label=<<font color="black">false</font>> color="black"]
  node18116 -> node18121 [ color="black"]
  node18125 -> node18126 [ color="black"]
  node18122 -> node18123 [ color="black"]
  node18109 -> node18110 [ color="black"]
  node18117 -> node18118 [ color="black"]
  node18118 -> node18119 [ color="black"]
  node18107 -> node18108 [ color="black"]
}
