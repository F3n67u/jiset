digraph {
  node13024 [shape=cds, label=<<font color="black">0:app __x0__ = (RequireObjectCoercible this)</font>> color="black" fillcolor="white" style=filled]
  node13020 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node13029 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">2:let searchStr = [? __x2__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node13026 [shape=cds, label=<<font color="black">1:app __x1__ = (ToString O)</font>> color="black" fillcolor="white" style=filled]
  node13031 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">3:let pos = [? __x3__]</td></tr>
      <tr><td align="left">5:let len = S.length</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node13027 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">1:let S = [? __x1__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node13032 [shape=cds, label=<<font color="black">6:app __x4__ = (max pos 0i)</font>> color="black" fillcolor="white" style=filled]
  node13021 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node13028 [shape=cds, label=<<font color="black">2:app __x2__ = (ToString searchString)</font>> color="black" fillcolor="white" style=filled]
  node13030 [shape=cds, label=<<font color="black">3:app __x3__ = (ToInteger position)</font>> color="black" fillcolor="white" style=filled]
  node13025 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let O = [? __x0__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node13034 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">6:let start = __x5__</td></tr>
      <tr><td align="left">7:let searchLen = searchStr.length</td></tr>
      <tr><td align="left">8:??? &quot;Return the smallest possible integer id:{k} not smaller than id:{start} such that id:{k} + id:{searchLen} is not greater than id:{len} , and for all nonnegative integers id:{j} less than id:{searchLen} , the code unit at index id:{k} + id:{j} within id:{S} is the same as the code unit at index id:{j} within id:{searchStr} ; but if there is no such integer id:{k} , return the value - 1 .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node13023 [shape=cds, label=<<font color="black">app position = (GetArgument argumentsList 1i)</font>> color="black" fillcolor="white" style=filled]
  node13033 [shape=cds, label=<<font color="black">6:app __x5__ = (min __x4__ len)</font>> color="black" fillcolor="white" style=filled]
  node13022 [shape=cds, label=<<font color="black">app searchString = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node13020 -> node13022 [ color="black"]
  node13034 -> node13021 [ color="black"]
  node13033 -> node13034 [ color="black"]
  node13025 -> node13026 [ color="black"]
  node13026 -> node13027 [ color="black"]
  node13023 -> node13024 [ color="black"]
  node13028 -> node13029 [ color="black"]
  node13031 -> node13032 [ color="black"]
  node13030 -> node13031 [ color="black"]
  node13027 -> node13028 [ color="black"]
  node13022 -> node13023 [ color="black"]
  node13032 -> node13033 [ color="black"]
  node13024 -> node13025 [ color="black"]
  node13029 -> node13030 [ color="black"]
}
