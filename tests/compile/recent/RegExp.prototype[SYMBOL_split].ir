{
  app string = (GetArgument argumentsList 0i)
  app limit = (GetArgument argumentsList 1i)
  [0] let rx = this
  [1] app __x0__ = (Type rx)
  [1] if (! (= __x0__ Object)) {
    app __x1__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_TypeError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
    return __x1__
  } else [56] {}
  [2] app __x2__ = (ToString string)
  [2] if (is-completion __x2__) if (= __x2__.Type CONST_normal) __x2__ = __x2__.Value else return __x2__ else [56] {}
  [2] let S = __x2__
  [3] app __x3__ = (SpeciesConstructor rx INTRINSIC_RegExp)
  [3] if (is-completion __x3__) if (= __x3__.Type CONST_normal) __x3__ = __x3__.Value else return __x3__ else [56] {}
  [3] let C = __x3__
  [4] app __x4__ = (Get rx "flags")
  [4] if (is-completion __x4__) if (= __x4__.Type CONST_normal) __x4__ = __x4__.Value else return __x4__ else [56] {}
  [4] app __x5__ = (ToString __x4__)
  [4] if (is-completion __x5__) if (= __x5__.Type CONST_normal) __x5__ = __x5__.Value else return __x5__ else [56] {}
  [4] let flags = __x5__
  [6] if (contains flags "u") let unicodeMatching = true else let unicodeMatching = false
  [8] if (contains flags "y") let newFlags = flags else let newFlags = (+ flags "y")
  [9] app __x6__ = (Construct C (new [rx, newFlags]))
  [9] if (is-completion __x6__) if (= __x6__.Type CONST_normal) __x6__ = __x6__.Value else return __x6__ else [56] {}
  [9] let splitter = __x6__
  [10] app __x7__ = (ArrayCreate 0i)
  [10] if (is-completion __x7__) if (= __x7__.Type CONST_normal) __x7__ = __x7__.Value else return __x7__ else [56] {}
  [10] let A = __x7__
  [11] let lengthA = 0i
  [12] ??? "If id:{limit} is value:{undefined} , let id:{lim} be 2 sup:{32 } - 1 ; else let id:{lim} be ‚Ñù ( ? ToUint32 ( id:{limit} ) ) ."
  [13] if (= lim 0i) {
    app __x8__ = (WrapCompletion A)
    return __x8__
  } else [56] {}
  [14] let size = S.length
  [15] if (= size 0i) {
    [16] app __x9__ = (RegExpExec splitter S)
    [16] if (is-completion __x9__) if (= __x9__.Type CONST_normal) __x9__ = __x9__.Value else return __x9__ else [56] {}
    [16] let z = __x9__
    [17] if (! (= z null)) {
      app __x10__ = (WrapCompletion A)
      return __x10__
    } else [56] {}
    [18] app __x11__ = (CreateDataPropertyOrThrow A "0" S)
    [18] if (is-completion __x11__) if (= __x11__.Type CONST_normal) __x11__ = __x11__.Value else return __x11__ else [56] {}
    [18] __x11__
    [19] app __x12__ = (WrapCompletion A)
    [19] return __x12__
  } else [56] {}
  [20] let p = 0i
  [21] let q = p
  [22] while (< q size) {
    [23] ??? "Perform ? Set ( id:{splitter} , value:{\"lastIndex\"} , ùîΩ ( id:{q} ) , value:{true} ) ."
    [24] app __x13__ = (RegExpExec splitter S)
    [24] if (is-completion __x13__) if (= __x13__.Type CONST_normal) __x13__ = __x13__.Value else return __x13__ else [56] {}
    [24] let z = __x13__
    [26] if (= z null) {
      app __x14__ = (AdvanceStringIndex S q unicodeMatching)
      q = __x14__
    } else {
      [27] ??? "Let id:{e} be ‚Ñù ( ? ToLength ( ? Get ( id:{splitter} , value:{\"lastIndex\"} ) ) ) ."
      [28] app __x15__ = (min e size)
      [28] e = __x15__
      [30] if (== e p) {
        app __x16__ = (AdvanceStringIndex S q unicodeMatching)
        q = __x16__
      } else {
        [31] ??? "Let id:{T} be the substring of id:{S} from id:{p} to id:{q} ."
        [32] ??? "Perform ! CreateDataPropertyOrThrow ( id:{A} , ! ToString ( ùîΩ ( id:{lengthA} ) ) , id:{T} ) ."
        [33] lengthA = (+ lengthA 1i)
        [34] if (== lengthA lim) {
          app __x17__ = (WrapCompletion A)
          return __x17__
        } else [56] {}
        [35] p = e
        [36] app __x18__ = (LengthOfArrayLike z)
        [36] if (is-completion __x18__) if (= __x18__.Type CONST_normal) __x18__ = __x18__.Value else return __x18__ else [56] {}
        [36] let numberOfCaptures = __x18__
        [37] app __x19__ = (max (- numberOfCaptures 1i) 0i)
        [37] numberOfCaptures = __x19__
        [38] let i = 1i
        [39] while (! (< numberOfCaptures i)) {
          [40] ??? "Let id:{nextCapture} be ? Get ( id:{z} , ! ToString ( ùîΩ ( id:{i} ) ) ) ."
          [41] ??? "Perform ! CreateDataPropertyOrThrow ( id:{A} , ! ToString ( ùîΩ ( id:{lengthA} ) ) , id:{nextCapture} ) ."
          [42] i = (+ i 1i)
          [43] lengthA = (+ lengthA 1i)
          [44] if (== lengthA lim) {
            app __x20__ = (WrapCompletion A)
            return __x20__
          } else [56] {}
        }
        [45] q = p
      }
    }
  }
  [46] ??? "Let id:{T} be the substring of id:{S} from id:{p} to id:{size} ."
  [47] ??? "Perform ! CreateDataPropertyOrThrow ( id:{A} , ! ToString ( ùîΩ ( id:{lengthA} ) ) , id:{T} ) ."
  [48] app __x21__ = (WrapCompletion A)
  [48] return __x21__
}