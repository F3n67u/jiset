digraph {
  node15643 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let P = __x1__[__x2__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15656 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">22:??? &quot;Let id:{properties} be a String formed by concatenating all the element Strings of id:{partial} with each adjacent pair of Strings separated with code unit 0x002C ( COMMA ) . A comma is not inserted either before the first String or after the last String .&quot;</td></tr>
      <tr><td align="left">23:let final = (+ (+ &quot;{&quot; properties) &quot;}&quot;)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15637 [shape=diamond, label=<<font color="black">(! (= PropertyList undefined))</font>> color="black" fillcolor="white" style=filled]
  node15648 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">12:let member = __x4__</td></tr>
      <tr><td align="left">13:let member = (+ member &quot;:&quot;)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15633 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node15638 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let K = PropertyList</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15634 [shape=diamond, label=<<font color="black">(contains stack value)</font>> color="black" fillcolor="white" style=filled]
  node15654 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let final = &quot;{}&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15635 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15657 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">25:let separator = (+ (+ &quot;,&quot; &quot;\n&quot;) indent)</td></tr>
      <tr><td align="left">26:??? &quot;Let id:{properties} be a String formed by concatenating all the element Strings of id:{partial} with each adjacent pair of Strings separated with id:{separator} . The id:{separator} String is not inserted either before the first String or after the last String .&quot;</td></tr>
      <tr><td align="left">27:let final = (+ (+ (+ (+ (+ (+ &quot;{&quot; &quot;\n&quot;) indent) properties) &quot;\n&quot;) stepback) &quot;}&quot;)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15644 [shape=cds, label=<<font color="black">10:app __x3__ = (SerializeJSONProperty P value)</font>> color="black" fillcolor="white" style=filled]
  node15658 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">28:(pop stack (- stack.length 1i))</td></tr>
      <tr><td align="left">29:let indent = stepback</td></tr>
      <tr><td align="left">30:return final</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15651 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">16:let member = (+ member strP)</td></tr>
      <tr><td align="left">17:append member -&gt; partial</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15632 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node15655 [shape=diamond, label=<<font color="black">(= gap &quot;&quot;)</font>> color="black" fillcolor="white" style=filled]
  node15642 [shape=diamond, label=<<font color="black">(&lt; __x2__ __x1__.length)</font>> color="black" fillcolor="white" style=filled]
  node15650 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let member = (+ member &quot; &quot;)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15639 [shape=cds, label=<<font color="black">7:app __x0__ = (EnumerableOwnNames value)</font>> color="black" fillcolor="white" style=filled]
  node15646 [shape=diamond, label=<<font color="black">(! (= strP undefined))</font>> color="black" fillcolor="white" style=filled]
  node15641 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">8:let partial = (new [])</td></tr>
      <tr><td align="left">9:let __x1__ = K</td></tr>
      <tr><td align="left">9:let __x2__ = 0i</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15649 [shape=diamond, label=<<font color="black">(! (= gap &quot;&quot;))</font>> color="black" fillcolor="white" style=filled]
  node15645 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">10:let strP = [? __x3__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15640 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">7:let K = [? __x0__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15653 [shape=diamond, label=<<font color="black">(= partial.length 0i)</font>> color="black" fillcolor="white" style=filled]
  node15652 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">__x2__ = (+ __x2__ 1i)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15647 [shape=cds, label=<<font color="black">12:app __x4__ = (QuoteJSONString P)</font>> color="black" fillcolor="white" style=filled]
  node15636 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">1:append value -&gt; stack</td></tr>
      <tr><td align="left">2:let stepback = indent</td></tr>
      <tr><td align="left">3:let indent = (+ indent gap)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15648 -> node15649 [ color="black"]
  node15637 -> node15638 [label=<<font color="black">true</font>> color="black"]
  node15637 -> node15639 [label=<<font color="black">false</font>> color="black"]
  node15656 -> node15658 [ color="black"]
  node15647 -> node15648 [ color="black"]
  node15640 -> node15641 [ color="black"]
  node15651 -> node15652 [ color="black"]
  node15639 -> node15640 [ color="black"]
  node15643 -> node15644 [ color="black"]
  node15641 -> node15642 [ color="black"]
  node15653 -> node15654 [label=<<font color="black">true</font>> color="black"]
  node15653 -> node15655 [label=<<font color="black">false</font>> color="black"]
  node15638 -> node15641 [ color="black"]
  node15635 -> node15636 [ color="black"]
  node15658 -> node15633 [ color="black"]
  node15646 -> node15647 [label=<<font color="black">true</font>> color="black"]
  node15646 -> node15652 [label=<<font color="black">false</font>> color="black"]
  node15634 -> node15635 [label=<<font color="black">true</font>> color="black"]
  node15634 -> node15636 [label=<<font color="black">false</font>> color="black"]
  node15642 -> node15643 [label=<<font color="black">true</font>> color="black"]
  node15642 -> node15653 [label=<<font color="black">false</font>> color="black"]
  node15650 -> node15651 [ color="black"]
  node15636 -> node15637 [ color="black"]
  node15654 -> node15658 [ color="black"]
  node15655 -> node15656 [label=<<font color="black">true</font>> color="black"]
  node15655 -> node15657 [label=<<font color="black">false</font>> color="black"]
  node15649 -> node15650 [label=<<font color="black">true</font>> color="black"]
  node15649 -> node15651 [label=<<font color="black">false</font>> color="black"]
  node15644 -> node15645 [ color="black"]
  node15652 -> node15642 [ color="black"]
  node15645 -> node15646 [ color="black"]
  node15632 -> node15634 [ color="black"]
  node15657 -> node15658 [ color="black"]
}
