digraph {
  node17449 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">1:append value -&gt; stack</td></tr>
      <tr><td align="left">2:let stepback = indent</td></tr>
      <tr><td align="left">3:indent = (+ indent gap)</td></tr>
      <tr><td align="left">4:let partial = (new [])</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17453 [shape=diamond, label=<<font color="black">(&lt; index len)</font>> color="black" fillcolor="white" style=filled]
  node17445 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node17462 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let final = &quot;[]&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17450 [shape=cds, label=<<font color="black">5:app __x0__ = (Get value &quot;length&quot;)</font>> color="black" fillcolor="white" style=filled]
  node17454 [shape=cds, label=<<font color="black">8:app __x2__ = (ToString index)</font>> color="black" fillcolor="white" style=filled]
  node17455 [shape=cds, label=<<font color="black">8:app __x3__ = (SerializeJSONProperty [! __x2__] value)</font>> color="black" fillcolor="white" style=filled]
  node17464 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">18:??? &quot;Let id:{properties} be the String value formed by concatenating all the element Strings of id:{partial} with each adjacent pair of Strings separated with the code unit 0x002C ( COMMA ) . A comma is not inserted either before the first String or after the last String .&quot;</td></tr>
      <tr><td align="left">19:let final = (+ (+ &quot;[&quot; properties) &quot;]&quot;)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17447 [shape=diamond, label=<<font color="black">(contains stack value)</font>> color="black" fillcolor="white" style=filled]
  node17456 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">8:let strP = [? __x3__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17446 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node17463 [shape=diamond, label=<<font color="black">(= gap &quot;&quot;)</font>> color="black" fillcolor="white" style=filled]
  node17466 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">24:(pop stack (- stack.length 1i))</td></tr>
      <tr><td align="left">25:indent = stepback</td></tr>
      <tr><td align="left">26:return final</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17459 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">append strP -&gt; partial</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17458 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">append &quot;null&quot; -&gt; partial</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17451 [shape=cds, label=<<font color="black">5:app __x1__ = (ToLength [? __x0__])</font>> color="black" fillcolor="white" style=filled]
  node17448 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17461 [shape=diamond, label=<<font color="black">(= partial.length 0i)</font>> color="black" fillcolor="white" style=filled]
  node17452 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">5:let len = [? __x1__]</td></tr>
      <tr><td align="left">6:let index = 0i</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17457 [shape=diamond, label=<<font color="black">(= strP undefined)</font>> color="black" fillcolor="white" style=filled]
  node17460 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">13:index = (+ index 1i)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17465 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">21:let separator = (+ (+ &quot;,&quot; &quot;\n&quot;) indent)</td></tr>
      <tr><td align="left">22:??? &quot;Let id:{properties} be the String value formed by concatenating all the element Strings of id:{partial} with each adjacent pair of Strings separated with id:{separator} . The id:{separator} String is not inserted either before the first String or after the last String .&quot;</td></tr>
      <tr><td align="left">23:let final = (+ (+ (+ (+ (+ (+ &quot;[&quot; &quot;\n&quot;) indent) properties) &quot;\n&quot;) stepback) &quot;]&quot;)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17456 -> node17457 [ color="black"]
  node17453 -> node17454 [label=<<font color="black">true</font>> color="black"]
  node17453 -> node17461 [label=<<font color="black">false</font>> color="black"]
  node17459 -> node17460 [ color="black"]
  node17455 -> node17456 [ color="black"]
  node17450 -> node17451 [ color="black"]
  node17463 -> node17464 [label=<<font color="black">true</font>> color="black"]
  node17463 -> node17465 [label=<<font color="black">false</font>> color="black"]
  node17466 -> node17446 [ color="black"]
  node17445 -> node17447 [ color="black"]
  node17452 -> node17453 [ color="black"]
  node17461 -> node17462 [label=<<font color="black">true</font>> color="black"]
  node17461 -> node17463 [label=<<font color="black">false</font>> color="black"]
  node17458 -> node17460 [ color="black"]
  node17449 -> node17450 [ color="black"]
  node17447 -> node17448 [label=<<font color="black">true</font>> color="black"]
  node17447 -> node17449 [label=<<font color="black">false</font>> color="black"]
  node17451 -> node17452 [ color="black"]
  node17454 -> node17455 [ color="black"]
  node17464 -> node17466 [ color="black"]
  node17457 -> node17458 [label=<<font color="black">true</font>> color="black"]
  node17457 -> node17459 [label=<<font color="black">false</font>> color="black"]
  node17462 -> node17466 [ color="black"]
  node17448 -> node17449 [ color="black"]
  node17460 -> node17453 [ color="black"]
  node17465 -> node17466 [ color="black"]
}
