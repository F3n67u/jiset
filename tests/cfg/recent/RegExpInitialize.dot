digraph {
  node14944 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node14954 [shape=diamond, label=<<font color="black">(contains F &quot;u&quot;)</font>> color="black" fillcolor="white" style=filled]
  node14949 [shape=diamond, label=<<font color="black">(= flags undefined)</font>> color="black" fillcolor="white" style=filled]
  node14945 [shape=diamond, label=<<font color="black">(= pattern undefined)</font>> color="black" fillcolor="white" style=filled]
  node14953 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">4:??? &quot;If id:{F} contains any code unit other than value:{\&quot;g\&quot;} , value:{\&quot;i\&quot;} , value:{\&quot;m\&quot;} , value:{\&quot;s\&quot;} , value:{\&quot;u\&quot;} , or value:{\&quot;y\&quot;} or if it contains the same code unit more than once , throw a value:{SyntaxError} exception .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14950 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let F = &quot;&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14961 [shape=cds, label=<<font color="black">12:app __x3__ = (ParsePattern patternText u)</font>> color="black" fillcolor="white" style=filled]
  node14946 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let P = &quot;&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14957 [shape=diamond, label=<<font color="black">(= u true)</font>> color="black" fillcolor="white" style=filled]
  node14947 [shape=cds, label=<<font color="black">app __x0__ = (ToString pattern)</font>> color="black" fillcolor="white" style=filled]
  node14951 [shape=cds, label=<<font color="black">app __x1__ = (ToString flags)</font>> color="black" fillcolor="white" style=filled]
  node14962 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">12:let parseResult = __x3__</td></tr>
      <tr><td align="left">13:??? &quot;If id:{parseResult} is a non - empty List of value:{SyntaxError} objects , throw a value:{SyntaxError} exception .&quot;</td></tr>
      <tr><td align="left">15:obj.OriginalSource = P</td></tr>
      <tr><td align="left">16:obj.OriginalFlags = F</td></tr>
      <tr><td align="left">17:??? &quot;Set id:{obj} . [ [ RegExpMatcher ] ] to the Abstract Closure that evaluates id:{parseResult} by applying the semantics provided in link:{unhandled: sec-pattern-semantics} using id:{patternCharacters} as the pattern ' s List of nt:{SourceCharacter} values and id:{F} as the flag parameters .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14948 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let P = [? __x0__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14963 [shape=cds, label=<<font color="black">18:app __x4__ = (Set obj &quot;lastIndex&quot; 0i true)</font>> color="black" fillcolor="white" style=filled]
  node14952 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let F = [? __x1__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14956 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let u = false</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14959 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">7:let patternText = [! __x2__]</td></tr>
      <tr><td align="left">8:??? &quot;Let id:{patternCharacters} be a List whose elements are the code points of id:{patternText} .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14964 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">18:[? __x4__]</td></tr>
      <tr><td align="left">19:return obj</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14958 [shape=cds, label=<<font color="black">7:app __x2__ = (StringToCodePoints P)</font>> color="black" fillcolor="white" style=filled]
  node14943 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node14960 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">10:??? &quot;Let id:{patternText} be the result of interpreting each of id:{P} ' s 16 - bit elements as a Unicode BMP code point . UTF - 16 decoding is not applied to the elements .&quot;</td></tr>
      <tr><td align="left">11:??? &quot;Let id:{patternCharacters} be a List whose elements are the code unit elements of id:{P} .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14955 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let u = true</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14963 -> node14964 [ color="black"]
  node14945 -> node14946 [label=<<font color="black">true</font>> color="black"]
  node14945 -> node14947 [label=<<font color="black">false</font>> color="black"]
  node14953 -> node14954 [ color="black"]
  node14955 -> node14957 [ color="black"]
  node14960 -> node14961 [ color="black"]
  node14959 -> node14961 [ color="black"]
  node14961 -> node14962 [ color="black"]
  node14949 -> node14950 [label=<<font color="black">true</font>> color="black"]
  node14949 -> node14951 [label=<<font color="black">false</font>> color="black"]
  node14943 -> node14945 [ color="black"]
  node14957 -> node14958 [label=<<font color="black">true</font>> color="black"]
  node14957 -> node14960 [label=<<font color="black">false</font>> color="black"]
  node14954 -> node14955 [label=<<font color="black">true</font>> color="black"]
  node14954 -> node14956 [label=<<font color="black">false</font>> color="black"]
  node14958 -> node14959 [ color="black"]
  node14952 -> node14953 [ color="black"]
  node14956 -> node14957 [ color="black"]
  node14947 -> node14948 [ color="black"]
  node14951 -> node14952 [ color="black"]
  node14964 -> node14944 [ color="black"]
  node14950 -> node14953 [ color="black"]
  node14948 -> node14949 [ color="black"]
  node14946 -> node14949 [ color="black"]
  node14962 -> node14963 [ color="black"]
}
