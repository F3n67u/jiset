{
  app __x0__ = (IsConstructor constructor)
  assert (= __x0__ true)
  assert (is-instance-of resultCapability PromiseCapabilityRecord)
  while true {
    app __x1__ = (IteratorStep iteratorRecord)
    let next = __x1__
    app __x2__ = (IsAbruptCompletion next)
    if __x2__ iteratorRecord.Done = true else {}
    [? next]
    if (= next false) {
      iteratorRecord.Done = true
      return resultCapability.Promise
    } else {}
    app __x3__ = (IteratorValue next)
    let nextValue = __x3__
    app __x4__ = (IsAbruptCompletion nextValue)
    if __x4__ iteratorRecord.Done = true else {}
    [? nextValue]
    app __x5__ = (Invoke constructor "resolve" (new [nextValue]))
    let nextPromise = [? __x5__]
    app __x6__ = (Invoke nextPromise "then" (new [resultCapability.Resolve, resultCapability.Reject]))
    [? __x6__]
  }
}