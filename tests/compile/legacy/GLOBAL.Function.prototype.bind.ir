{
  app __x0__ = (GetArgument argumentsList 0i)
  let thisArg = __x0__
  let Target = this
  app __x1__ = (IsCallable Target)
  if (= __x1__ false) throw TypeError else {}
  ??? "Let id:{args} be a new ( possibly empty ) List consisting of all of the argument values provided after id:{thisArg} in order ."
  app __x2__ = (BoundFunctionCreate Target thisArg args)
  let F = [? __x2__]
  app __x3__ = (HasOwnProperty Target "length")
  let targetHasLength = [? __x3__]
  if (= targetHasLength true) {
    app __x4__ = (Get Target "length")
    let targetLen = [? __x4__]
    app __x5__ = (Type targetLen)
    if (! (= __x5__ Number)) let L = 0i else {
      app __x6__ = (ToInteger targetLen)
      targetLen = [! __x6__]
      ??? "Let id:{L} be the larger of 0 and the result of id:{targetLen} minus the number of elements of id:{args} ."
    }
  } else let L = 0i
  app __x7__ = (SetFunctionLength F L)
  [! __x7__]
  app __x8__ = (Get Target "name")
  let targetName = [? __x8__]
  app __x9__ = (Type targetName)
  if (! (= __x9__ String)) targetName = "" else {}
  app __x10__ = (SetFunctionName F targetName "bound")
  __x10__
  return F
}