digraph {
  node13901 [shape=cds, label=<<font color="black">app items = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node13915 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">14:return array</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node13906 [shape=cds, label=<<font color="black">3:app __x0__ = (GetPrototypeFromConstructor newTarget INTRINSIC_ArrayPrototype)</font>> color="black" fillcolor="white" style=filled]
  node13910 [shape=diamond, label=<<font color="black">(&lt; k numberOfArgs)</font>> color="black" fillcolor="white" style=filled]
  node13914 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">10:let defineStatus = __x3__</td></tr>
      <tr><td align="left">11:assert (= defineStatus true)</td></tr>
      <tr><td align="left">12:k = (+ k 1i)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node13907 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">3:let proto = [? __x0__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node13913 [shape=cds, label=<<font color="black">10:app __x3__ = (CreateDataProperty array Pk itemK)</font>> color="black" fillcolor="white" style=filled]
  node13912 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">8:let Pk = [! __x2__]</td></tr>
      <tr><td align="left">9:let itemK = items[k]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node13902 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let numberOfArgs = argumentsList.length</td></tr>
      <tr><td align="left">1:assert (! (&lt; numberOfArgs 2i))</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node13905 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let newTarget = NewTarget</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node13909 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">4:let array = [? __x1__]</td></tr>
      <tr><td align="left">5:let k = 0i</td></tr>
      <tr><td align="left">6:??? &quot;Let id:{items} be a zero - origined List containing the argument items in order .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node13904 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let newTarget = GLOBAL_context.Function</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node13899 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node13900 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node13911 [shape=cds, label=<<font color="black">8:app __x2__ = (ToString k)</font>> color="black" fillcolor="white" style=filled]
  node13908 [shape=cds, label=<<font color="black">4:app __x1__ = (ArrayCreate numberOfArgs proto)</font>> color="black" fillcolor="white" style=filled]
  node13903 [shape=diamond, label=<<font color="black">(= NewTarget undefined)</font>> color="black" fillcolor="white" style=filled]
  node13910 -> node13911 [label=<<font color="black">true</font>> color="black"]
  node13910 -> node13915 [label=<<font color="black">false</font>> color="black"]
  node13906 -> node13907 [ color="black"]
  node13907 -> node13908 [ color="black"]
  node13915 -> node13900 [ color="black"]
  node13908 -> node13909 [ color="black"]
  node13911 -> node13912 [ color="black"]
  node13914 -> node13910 [ color="black"]
  node13904 -> node13906 [ color="black"]
  node13899 -> node13901 [ color="black"]
  node13912 -> node13913 [ color="black"]
  node13909 -> node13910 [ color="black"]
  node13901 -> node13902 [ color="black"]
  node13913 -> node13914 [ color="black"]
  node13902 -> node13903 [ color="black"]
  node13903 -> node13904 [label=<<font color="black">true</font>> color="black"]
  node13903 -> node13905 [label=<<font color="black">false</font>> color="black"]
  node13905 -> node13906 [ color="black"]
}
