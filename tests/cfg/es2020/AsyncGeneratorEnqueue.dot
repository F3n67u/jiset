digraph {
  node18388 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">6:let queue = generator.AsyncGeneratorQueue</td></tr>
      <tr><td align="left">7:let request = (new AsyncGeneratorRequest(&quot;Completion&quot; -&gt; completion, &quot;Capability&quot; -&gt; promiseCapability))</td></tr>
      <tr><td align="left">8:append request -&gt; queue</td></tr>
      <tr><td align="left">9:let state = generator.AsyncGeneratorState</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18384 [shape=diamond, label=<<font color="black">(|| (! (= __x1__ Object)) (= generator.AsyncGeneratorState absent))</font>> color="black" fillcolor="white" style=filled]
  node18385 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">3:let badGeneratorError = ??? &quot;TypeError&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18380 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:assert (is-completion completion)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18392 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">12:return promiseCapability.Promise</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18383 [shape=cds, label=<<font color="black">2:app __x1__ = (Type generator)</font>> color="black" fillcolor="white" style=filled]
  node18379 [shape=cds, label=<<font color="black">app completion = (GetArgument argumentsList 1i)</font>> color="black" fillcolor="white" style=filled]
  node18386 [shape=cds, label=<<font color="black">4:app __x2__ = (Call promiseCapability.Reject undefined (new [badGeneratorError]))</font>> color="black" fillcolor="white" style=filled]
  node18389 [shape=diamond, label=<<font color="black">(! (= state CONST_executing))</font>> color="black" fillcolor="white" style=filled]
  node18376 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node18378 [shape=cds, label=<<font color="black">app generator = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node18382 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">1:let promiseCapability = [! __x0__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18390 [shape=cds, label=<<font color="black">11:app __x3__ = (AsyncGeneratorResumeNext generator)</font>> color="black" fillcolor="white" style=filled]
  node18387 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">4:[! __x2__]</td></tr>
      <tr><td align="left">5:return promiseCapability.Promise</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18377 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node18381 [shape=cds, label=<<font color="black">1:app __x0__ = (NewPromiseCapability INTRINSIC_Promise)</font>> color="black" fillcolor="white" style=filled]
  node18391 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">11:[! __x3__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18376 -> node18378 [ color="black"]
  node18383 -> node18384 [ color="black"]
  node18384 -> node18385 [label=<<font color="black">true</font>> color="black"]
  node18384 -> node18388 [label=<<font color="black">false</font>> color="black"]
  node18387 -> node18388 [ color="black"]
  node18381 -> node18382 [ color="black"]
  node18386 -> node18387 [ color="black"]
  node18390 -> node18391 [ color="black"]
  node18385 -> node18386 [ color="black"]
  node18378 -> node18379 [ color="black"]
  node18388 -> node18389 [ color="black"]
  node18380 -> node18381 [ color="black"]
  node18392 -> node18377 [ color="black"]
  node18389 -> node18390 [label=<<font color="black">true</font>> color="black"]
  node18389 -> node18392 [label=<<font color="black">false</font>> color="black"]
  node18379 -> node18380 [ color="black"]
  node18391 -> node18392 [ color="black"]
  node18382 -> node18383 [ color="black"]
}
