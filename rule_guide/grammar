$S => $Stmt .
$S => $Stmt
$Stmt => Let $Var be $Expr
$Stmt => Let $Var be ? $Expr
$Stmt => If $Condition , $Stmt . Otherwise , $Stmt
$Stmt => If $Condition , $Stmt ; otherwise , $Stmt
$Stmt => If $Condition , $Stmt
$Stmt => If $Condition , then $Stmt
$Stmt => Else , $Stmt
$Stmt => Return $Expr
$Stmt => Return ? $Expr
$Stmt => return $Expr
$Stmt => Assert : $Condition
$Stmt => throw a $Value exception
$Stmt => Perform $Expr
$Stmt => Perform ? $Expr
$Stmt => perform $Expr
$Stmt => Set $Settable to $Expr
$Stmt => set $Settable to $Expr
$Stmt => Call $Expr
$Stmt => Repeat , $Stmt
$Stmt => line-list
$Settable => $Var . [ [ $Field ] ]
$Settable => $Var ' s $Field
$Settable => $Var ' s $Field component
$Settable => $Var
$Settable => the $Field of $Var
$Settable => the outer lexical environment reference of $Var
$Settable => the bound value for $Var in $Var
$Field => CanBlock
$Field => Signifier
$Field => VarNames
$Field => EnvironmentRecord
$Field => Function
$Field => Realm
$Field => ScriptOrModule
$Field => ThisBindingStatus
$Field => ThisValue
$Field => HomeObject
$Field => FunctionObject
$Field => NewTarget
$Field => ObjectRecord
$Field => GlobalThisValue
$Field => DeclarativeRecord
$Field => VarNames
$Field => GlobalObject
$Field => GlobalEnv
$Field => TemplateMap
$Field => Intrinsics
$Field => Value
$Field => % ObjectPrototype %
$Field => % ThrowTypeError %
$Field => % FunctionPrototype %
$Field => SetPrototypeOf
$Field => GetPrototypeOf
$Field => Environment
$Field => GetOwnProperty
$Field => Configurable
$Field => ThisBindingStatus
$Field => ThisMode
$Expr => $AExpr ( )
$Expr => $AExpr ( $Arguments )
$Expr => $AExpr
$AExpr => $Value
$AExpr => $Code
$AExpr => $Const
$AExpr => $RecordV
$AExpr => $ExecContextV
$AExpr => $EnvironmentV
$AExpr => $ListV
$AExpr => $ObjectV
$AExpr => $Settable
$AExpr => the String value of the property name
$AExpr => $Var . $AMERName
$AExpr => $AMERName
$AMERName => GetIdentifierReference
$AMERName => TopLevelModuleEvaluationJob
$AMERName => ScriptEvaluationJob
$AMERName => HostReportErrors
$AMERName => EnqueueJob
$AMERName => GetThisEnvironment
$AMERName => CreateMutableBinding
$AMERName => InitializeBinding
$AMERName => HasThisBinding
$AMERName => GetThisBinding
$AMERName => AddRestrictedFunctionProperties
$AMERName => SetRealmGlobalObject
$AMERName => CreateIntrinsics
$AMERName => CreateRealm
$AMERName => ObjectCreate
$AMERName => NewGlobalEnvironment
$AMERName => GetBindingValue
$AMERName => IsExtensible
$AMERName => SetMutableBinding
$AMERName => HasBinding
$AMERName => DeleteBinding
$AMERName => DefinePropertyOrThrow
$AMERName => Get
$AMERName => Set
$AMERName => Type
$AMERName => InitializeHostDefinedRealm
$AMERName => SetDefaultGlobalBindings
$AMERName => HasOwnProperty
$AMERName => HasProperty
$AMERName => CreateImmutableBinding
$AMERName => CreateBuiltinFunction
$AMERName => NormalCompletion
$Arguments => $SingleArg , $Arguments
$Arguments => $SingleArg
$SingleArg => $Expr
$SingleArg => [ [ $Flag ] ] : $Expr
$Flag => Value
$Flag => Writable
$Flag => Enumerable
$Flag => Configurable
$RecordV => the declarative Environment Record for which the method was invoked
$RecordV => the object Environment Record for which the method was invoked
$RecordV => the global Environment Record for which the method was invoked
$RecordV => the function Environment Record for which the method was invoked
$RecordV => the Agent Record of the surrounding agent
$RecordV => a new Record
$RecordV => a new global Environment Record
$RecordV => a new declarative Environment Record containing no bindings
$RecordV => a new module Environment Record containing no bindings
$RecordV => a new object Environment Record containing $Var as the binding object
$RecordV => a new Realm Record
$ListV => a new empty List
$ListV => « »
$ListV => « $Arguments »
$ExecContextV => a new execution context
$ExecContextV => the running execution context
$EnvironmentV => a new Lexical Environment
$EnvironmentV => the running execution context ' s LexicalEnvironment
$ObjectV => the binding object for $Var
$Type => a Lexical Environment
$Type => a Module Record
$Type => an ECMAScript function
$Type => Object
$Condition => $Var has a binding for the name that is the value of $Var
$Condition => $Var does not already have a binding for $Var
$Condition => $Var does not have a binding for $Var
$Condition => $Var does not contain $Var
$Condition => $Var must have an uninitialized binding for $Var
$Condition => $Expr is $Expr
$Condition => $Expr is the value $Value
$Condition => $Expr is not $Expr
$Condition => $Expr is $Type
$Condition => $Binding is a strict binding
$Condition => $Binding has not yet been initialized
$Condition => $Binding is a mutable binding
$Condition => This is an attempt to change the value of an immutable binding .
$Condition => $Var has a binding for $Var
$Condition => The execution context stack is now empty
$Condition => the execution context stack is empty
$Condition => no such execution context exists
$Condition => $Var is an abrupt completion
$Condition => $Var is the source code of a script
$Condition => $Var has a [ [ $Field ] ] field
$Binding => the binding for $Var in $Var