{
  app __x0__ = (ToObject this)
  if (is-completion __x0__) if (= __x0__.Type CONST_normal) __x0__ = __x0__.Value else return __x0__ else {}
  let O = __x0__
  app __x1__ = (LengthOfArrayLike O)
  if (is-completion __x1__) if (= __x1__.Type CONST_normal) __x1__ = __x1__.Value else return __x1__ else {}
  let len = __x1__
  app __x2__ = (ToIntegerOrInfinity start)
  if (is-completion __x2__) if (= __x2__.Type CONST_normal) __x2__ = __x2__.Value else return __x2__ else {}
  let relativeStart = __x2__
  ??? "If id:{relativeStart} is - ∞ , let id:{k} be 0 ."
  ??? "Else if id:{relativeStart} < 0 , let id:{k} be max ( id:{len} + id:{relativeStart} , 0 ) ."
  ??? "Else , let id:{k} be min ( id:{relativeStart} , id:{len} ) ."
  if (= end undefined) let relativeEnd = len else {
    app __x3__ = (ToIntegerOrInfinity end)
    if (is-completion __x3__) if (= __x3__.Type CONST_normal) __x3__ = __x3__.Value else return __x3__ else {}
    let relativeEnd = __x3__
  }
  ??? "If id:{relativeEnd} is - ∞ , let id:{final} be 0 ."
  ??? "Else if id:{relativeEnd} < 0 , let id:{final} be max ( id:{len} + id:{relativeEnd} , 0 ) ."
  ??? "Else , let id:{final} be min ( id:{relativeEnd} , id:{len} ) ."
  while (< k final) {
    app __x4__ = (ToString k)
    if (is-completion __x4__) if (= __x4__.Type CONST_normal) __x4__ = __x4__.Value else return __x4__ else {}
    let Pk = __x4__
    app __x5__ = (Set O Pk value true)
    if (is-completion __x5__) if (= __x5__.Type CONST_normal) __x5__ = __x5__.Value else return __x5__ else {}
    __x5__
    k = (+ k 1i)
  }
  app __x6__ = (WrapCompletion O)
  return __x6__
}