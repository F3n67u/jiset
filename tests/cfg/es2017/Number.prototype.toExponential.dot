digraph {
  node11313 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">32:??? &quot;Let id:{m} be the concatenation of the four Strings id:{m} , code:{\&quot;e\&quot;} , id:{c} , and id:{d} .&quot;</td></tr>
      <tr><td align="left">33:return (+ s m)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11308 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">24:let c = &quot;+&quot;</td></tr>
      <tr><td align="left">25:let d = &quot;0&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11285 [shape=cds, label=<<font color="black">app fractionDigits = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node11293 [shape=diamond, label=<<font color="black">(&lt; x 0i)</font>> color="black" fillcolor="white" style=filled]
  node11312 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">31:??? &quot;Let id:{d} be the String consisting of the digits of the decimal representation of id:{e} ( in order , with no leading zeroes ) .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11284 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node11304 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">19:??? &quot;Let id:{m} be the String consisting of the digits of the decimal representation of id:{n} ( in order , with no leading zeroes ) .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11300 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">12:??? &quot;Let id:{m} be the String consisting of id:{f} + 1 occurrences of the code unit 0x0030 ( DIGIT ZERO ) .&quot;</td></tr>
      <tr><td align="left">13:let e = 0i</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11296 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return (+ s &quot;Infinity&quot;)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11311 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">29:let c = &quot;-&quot;</td></tr>
      <tr><td align="left">30:let e = (- e)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11310 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let c = &quot;+&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11302 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">??? &quot;Let id:{e} and id:{n} be integers such that 10 sup:{id:{f}} &le; id:{n} &lt; 10 sup:{id:{f} + 1} and for which the exact mathematical value of id:{n} &times; 10 sup:{id:{e} - id:{f}} - id:{x} is as close to zero as possible . If there are two such sets of id:{e} and id:{n} , pick the id:{e} and id:{n} for which id:{n} &times; 10 sup:{id:{e} - id:{f}} is larger .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11290 [shape=diamond, label=<<font color="black">(= x NaN)</font>> color="black" fillcolor="white" style=filled]
  node11303 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">??? &quot;Let id:{e} , id:{n} , and id:{f} be integers such that id:{f} &ge; 0 , 10 sup:{id:{f}} &le; id:{n} &lt; 10 sup:{id:{f} + 1} , the Number value for id:{n} &times; 10 sup:{id:{e} - id:{f}} is id:{x} , and id:{f} is as small as possible . Note that the decimal representation of id:{n} has id:{f} + 1 digits , id:{n} is not divisible by 10 , and the least significant digit of id:{n} is not necessarily uniquely determined by these criteria .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11288 [shape=cds, label=<<font color="black">1:app __x1__ = (ToInteger fractionDigits)</font>> color="black" fillcolor="white" style=filled]
  node11289 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">1:let f = [? __x1__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11299 [shape=diamond, label=<<font color="black">(== x 0i)</font>> color="black" fillcolor="white" style=filled]
  node11307 [shape=diamond, label=<<font color="black">(== e 0i)</font>> color="black" fillcolor="white" style=filled]
  node11292 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">4:let s = &quot;&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11301 [shape=diamond, label=<<font color="black">(! (= fractionDigits undefined))</font>> color="black" fillcolor="white" style=filled]
  node11291 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return &quot;NaN&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11283 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node11306 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">21:??? &quot;Let id:{a} be the first element of id:{m} , and let id:{b} be the remaining id:{f} elements of id:{m} .&quot;</td></tr>
      <tr><td align="left">22:??? &quot;Let id:{m} be the concatenation of the three Strings id:{a} , code:{\&quot;.\&quot;} , and id:{b} .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11295 [shape=diamond, label=<<font color="black">(== x Infinity)</font>> color="black" fillcolor="white" style=filled]
  node11297 [shape=diamond, label=<<font color="black">(|| (&lt; f 0i) (&lt; 20i f))</font>> color="black" fillcolor="white" style=filled]
  node11287 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let x = [? __x0__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11305 [shape=diamond, label=<<font color="black">(! (== f 0i))</font>> color="black" fillcolor="white" style=filled]
  node11309 [shape=diamond, label=<<font color="black">(&lt; 0i e)</font>> color="black" fillcolor="white" style=filled]
  node11298 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw RangeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11286 [shape=cds, label=<<font color="black">0:app __x0__ = (thisNumberValue this)</font>> color="black" fillcolor="white" style=filled]
  node11294 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">6:let s = &quot;-&quot;</td></tr>
      <tr><td align="left">7:let x = (- x)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11304 -> node11305 [ color="black"]
  node11294 -> node11295 [ color="black"]
  node11289 -> node11290 [ color="black"]
  node11310 -> node11312 [ color="black"]
  node11286 -> node11287 [ color="black"]
  node11287 -> node11288 [ color="black"]
  node11290 -> node11291 [label=<<font color="black">true</font>> color="black"]
  node11290 -> node11292 [label=<<font color="black">false</font>> color="black"]
  node11293 -> node11294 [label=<<font color="black">true</font>> color="black"]
  node11293 -> node11295 [label=<<font color="black">false</font>> color="black"]
  node11292 -> node11293 [ color="black"]
  node11298 -> node11299 [ color="black"]
  node11299 -> node11300 [label=<<font color="black">true</font>> color="black"]
  node11299 -> node11301 [label=<<font color="black">false</font>> color="black"]
  node11297 -> node11298 [label=<<font color="black">true</font>> color="black"]
  node11297 -> node11299 [label=<<font color="black">false</font>> color="black"]
  node11283 -> node11285 [ color="black"]
  node11301 -> node11302 [label=<<font color="black">true</font>> color="black"]
  node11301 -> node11303 [label=<<font color="black">false</font>> color="black"]
  node11305 -> node11306 [label=<<font color="black">true</font>> color="black"]
  node11305 -> node11307 [label=<<font color="black">false</font>> color="black"]
  node11285 -> node11286 [ color="black"]
  node11302 -> node11304 [ color="black"]
  node11312 -> node11313 [ color="black"]
  node11295 -> node11296 [label=<<font color="black">true</font>> color="black"]
  node11295 -> node11297 [label=<<font color="black">false</font>> color="black"]
  node11307 -> node11308 [label=<<font color="black">true</font>> color="black"]
  node11307 -> node11309 [label=<<font color="black">false</font>> color="black"]
  node11311 -> node11312 [ color="black"]
  node11296 -> node11297 [ color="black"]
  node11300 -> node11305 [ color="black"]
  node11291 -> node11292 [ color="black"]
  node11306 -> node11307 [ color="black"]
  node11309 -> node11310 [label=<<font color="black">true</font>> color="black"]
  node11309 -> node11311 [label=<<font color="black">false</font>> color="black"]
  node11303 -> node11304 [ color="black"]
  node11313 -> node11284 [ color="black"]
  node11288 -> node11289 [ color="black"]
  node11308 -> node11313 [ color="black"]
}
