def [BUILTIN] Math.hypot(...args) = {
  0:let coerced = (new [])
  1:let __x0__ = args
  1:let __x1__ = 0i
  1:while (< __x1__ __x0__.length) {
    let arg = __x0__[__x1__]
    2:app __x2__ = (ToNumber arg)
    2:let n = [? __x2__]
    3:append n -> coerced
    __x1__ = (+ __x1__ 1i)
  }
  4:let __x3__ = coerced
  4:let __x4__ = 0i
  4:while (< __x4__ __x3__.length) {
    let number = __x3__[__x4__]
    5:if (|| (= number Infinity) (= number -Infinity)) return Infinity else 2:{}
    __x4__ = (+ __x4__ 1i)
  }
  6:let onlyZero = true
  7:let __x5__ = coerced
  7:let __x6__ = 0i
  7:while (< __x6__ __x5__.length) {
    let number = __x5__[__x6__]
    8:if (= number NaN) return NaN else 2:{}
    9:if (! (|| (= number 0i) (= number -0.0))) onlyZero = false else 2:{}
    __x6__ = (+ __x6__ 1i)
  }
  10:if (= onlyZero true) return 0i else 2:{}
  11:??? "Return an implementation - approximated value representing the square root of the sum of squares of the mathematical values of the elements of id:{coerced} ."
}
- id: sec-math.hypot
- code:
          1. Let _coerced_ be a new empty List.
          1. For each element _arg_ of _args_, do
            1. Let _n_ be ? ToNumber(_arg_).
            1. Append _n_ to _coerced_.
          1. For each element _number_ of _coerced_, do
            1. If _number_ is *+∞*<sub>𝔽</sub> or _number_ is *-∞*<sub>𝔽</sub>, return *+∞*<sub>𝔽</sub>.
          1. Let _onlyZero_ be *true*.
          1. For each element _number_ of _coerced_, do
            1. If _number_ is *NaN*, return *NaN*.
            1. If _number_ is neither *+0*<sub>𝔽</sub> nor *-0*<sub>𝔽</sub>, set _onlyZero_ to *false*.
          1. If _onlyZero_ is *true*, return *+0*<sub>𝔽</sub>.
          1. Return an implementation-approximated value representing the square root of the sum of squares of the mathematical values of the elements of _coerced_.