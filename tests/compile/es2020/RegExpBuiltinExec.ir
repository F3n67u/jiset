{
  [1] app __x0__ = (Type S)
  [1] assert (= __x0__ String)
  [2] let length = S.length
  [3] app __x1__ = (Get R "lastIndex")
  [3] if (is-completion __x1__) if (= __x1__.Type CONST_normal) __x1__ = __x1__.Value else return __x1__ else [52] {}
  [3] app __x2__ = (ToLength __x1__)
  [3] if (is-completion __x2__) if (= __x2__.Type CONST_normal) __x2__ = __x2__.Value else return __x2__ else [52] {}
  [3] let lastIndex = __x2__
  [4] let flags = R.OriginalFlags
  [5] if (contains flags "g") let global = true else let global = false
  [6] if (contains flags "y") let sticky = true else let sticky = false
  [7] if (&& (= global false) (= sticky false)) lastIndex = 0i else [52] {}
  [8] let matcher = R.RegExpMatcher
  [9] if (contains flags "u") let fullUnicode = true else let fullUnicode = false
  [10] let matchSucceeded = false
  [11] while (= matchSucceeded false) {
    [12] if (< length lastIndex) {
      [13] if (|| (= global true) (= sticky true)) {
        [14] app __x3__ = (Set R "lastIndex" 0i true)
        [14] if (is-completion __x3__) if (= __x3__.Type CONST_normal) __x3__ = __x3__.Value else return __x3__ else [52] {}
        [14] __x3__
      } else [52] {}
      [15] app __x4__ = (WrapCompletion null)
      [15] return __x4__
    } else [52] {}
    [16] app __x5__ = (matcher S lastIndex)
    [16] let r = __x5__
    [22] if (= r CONST_failure) {
      [18] if (= sticky true) {
        [19] app __x6__ = (Set R "lastIndex" 0i true)
        [19] if (is-completion __x6__) if (= __x6__.Type CONST_normal) __x6__ = __x6__.Value else return __x6__ else [52] {}
        [19] __x6__
        [20] app __x7__ = (WrapCompletion null)
        [20] return __x7__
      } else [52] {}
      [21] app __x8__ = (AdvanceStringIndex S lastIndex fullUnicode)
      [21] lastIndex = __x8__
    } else matchSucceeded = true
  }
  [25] let e = r.endIndex
  [26] if (= fullUnicode true) {
    [27] ??? "id:{e} is an index into the id:{Input} character list , derived from id:{S} , matched by id:{matcher} . Let id:{eUTF} be the smallest index into id:{S} that corresponds to the character at element id:{e} of id:{Input} . If id:{e} is greater than or equal to the number of elements in id:{Input} , then id:{eUTF} is the number of code units in id:{S} ."
    [28] e = eUTF
  } else [52] {}
  [29] if (|| (= global true) (= sticky true)) {
    [30] app __x9__ = (Set R "lastIndex" e true)
    [30] if (is-completion __x9__) if (= __x9__.Type CONST_normal) __x9__ = __x9__.Value else return __x9__ else [52] {}
    [30] __x9__
  } else [52] {}
  [31] ??? "Let id:{n} be the number of elements in id:{r} ' s id:{captures} List . ( This is the same value as link:{} ' s id:{NcapturingParens} . )"
  [32] assert (< n (- 4294967296i 1i))
  [33] app __x10__ = (ArrayCreate (+ n 1i))
  [33] if (is-completion __x10__) if (= __x10__.Type CONST_normal) __x10__ = __x10__.Value else return __x10__ else [52] {}
  [33] let A = __x10__
  [35] app __x11__ = (CreateDataPropertyOrThrow A "index" lastIndex)
  [35] if (is-completion __x11__) if (= __x11__.Type CONST_normal) __x11__ = __x11__.Value else return __x11__ else [52] {}
  [35] __x11__
  [36] app __x12__ = (CreateDataPropertyOrThrow A "input" S)
  [36] if (is-completion __x12__) if (= __x12__.Type CONST_normal) __x12__ = __x12__.Value else return __x12__ else [52] {}
  [36] __x12__
  [37] ??? "Let id:{matchedSubstr} be the matched substring ( i . e . the portion of id:{S} between offset id:{lastIndex} inclusive and offset id:{e} exclusive ) ."
  [38] app __x13__ = (CreateDataPropertyOrThrow A "0" matchedSubstr)
  [38] if (is-completion __x13__) if (= __x13__.Type CONST_normal) __x13__ = __x13__.Value else return __x13__ else [52] {}
  [38] __x13__
  [39] ??? "If id:{R} contains any nt:{GroupName} , then step-list:{...}"
  [41] ??? "Else , step-list:{...}"
  [43] app __x14__ = (CreateDataPropertyOrThrow A "groups" groups)
  [43] if (is-completion __x14__) if (= __x14__.Type CONST_normal) __x14__ = __x14__.Value else return __x14__ else [52] {}
  [43] __x14__
  [44] let i = (+ 0i 1i)
  [44] let __x15__ = (+ n 1i)
  [44] while (< i __x15__) {
    [45] ??? "Let id:{captureI} be id:{i} sup:{th } element of id:{r} ' s id:{captures} List ."
    [50] if (= captureI undefined) let capturedValue = undefined else if (= fullUnicode true) {
      [49] app __x16__ = (UTF16Encode captureI)
      [49] if (is-completion __x16__) if (= __x16__.Type CONST_normal) __x16__ = __x16__.Value else return __x16__ else [52] {}
      [49] let capturedValue = __x16__
    } else {
      [51] assert (= fullUnicode false)
      [53] let capturedValue = captureI
    }
    [54] app __x17__ = (ToString i)
    [54] if (is-completion __x17__) if (= __x17__.Type CONST_normal) __x17__ = __x17__.Value else return __x17__ else [52] {}
    [54] app __x18__ = (CreateDataPropertyOrThrow A __x17__ capturedValue)
    [54] if (is-completion __x18__) if (= __x18__.Type CONST_normal) __x18__ = __x18__.Value else return __x18__ else [52] {}
    [54] __x18__
    [55] ??? "If the id:{i} sup:{th } capture of id:{R} was defined with a nt:{GroupName} , then step-list:{...}"
  }
  [58] app __x19__ = (WrapCompletion A)
  [58] return __x19__
}