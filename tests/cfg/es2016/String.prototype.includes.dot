digraph {
  node11922 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11917 [shape=cds, label=<<font color="black">1:app __x1__ = (ToString O)</font>> color="black" fillcolor="white" style=filled]
  node11912 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node11913 [shape=cds, label=<<font color="black">app searchString = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node11911 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node11926 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">5:let pos = [? __x4__]</td></tr>
      <tr><td align="left">6:let len = S.length</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11920 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">2:let isRegExp = [? __x2__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11915 [shape=cds, label=<<font color="black">0:app __x0__ = (RequireObjectCoercible this)</font>> color="black" fillcolor="white" style=filled]
  node11921 [shape=diamond, label=<<font color="black">(= isRegExp true)</font>> color="black" fillcolor="white" style=filled]
  node11918 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">1:let S = [? __x1__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11925 [shape=cds, label=<<font color="black">5:app __x4__ = (ToInteger position)</font>> color="black" fillcolor="white" style=filled]
  node11929 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">7:let start = __x6__</td></tr>
      <tr><td align="left">8:let searchLen = searchStr.length</td></tr>
      <tr><td align="left">9:??? &quot;If there exists any integer id:{k} not smaller than id:{start} such that id:{k} + id:{searchLen} is not greater than id:{len} , and for all nonnegative integers id:{j} less than id:{searchLen} , the code unit at index id:{k} + id:{j} of id:{S} is the same as the code unit at index id:{j} of id:{searchStr} , return value:{true} ; but if there is no such integer id:{k} , return value:{false} .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11923 [shape=cds, label=<<font color="black">4:app __x3__ = (ToString searchString)</font>> color="black" fillcolor="white" style=filled]
  node11927 [shape=cds, label=<<font color="black">7:app __x5__ = (max pos 0i)</font>> color="black" fillcolor="white" style=filled]
  node11916 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let O = [? __x0__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11919 [shape=cds, label=<<font color="black">2:app __x2__ = (IsRegExp searchString)</font>> color="black" fillcolor="white" style=filled]
  node11924 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">4:let searchStr = [? __x3__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11928 [shape=cds, label=<<font color="black">7:app __x6__ = (min __x5__ len)</font>> color="black" fillcolor="white" style=filled]
  node11914 [shape=cds, label=<<font color="black">app position = (GetArgument argumentsList 1i)</font>> color="black" fillcolor="white" style=filled]
  node11925 -> node11926 [ color="black"]
  node11916 -> node11917 [ color="black"]
  node11911 -> node11913 [ color="black"]
  node11915 -> node11916 [ color="black"]
  node11913 -> node11914 [ color="black"]
  node11929 -> node11912 [ color="black"]
  node11928 -> node11929 [ color="black"]
  node11923 -> node11924 [ color="black"]
  node11922 -> node11923 [ color="black"]
  node11924 -> node11925 [ color="black"]
  node11917 -> node11918 [ color="black"]
  node11926 -> node11927 [ color="black"]
  node11920 -> node11921 [ color="black"]
  node11918 -> node11919 [ color="black"]
  node11914 -> node11915 [ color="black"]
  node11927 -> node11928 [ color="black"]
  node11919 -> node11920 [ color="black"]
  node11921 -> node11922 [label=<<font color="black">true</font>> color="black"]
  node11921 -> node11923 [label=<<font color="black">false</font>> color="black"]
}
