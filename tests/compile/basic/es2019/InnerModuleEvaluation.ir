{
  if (! (= (typeof module) "CyclicModuleRecord")) {
    app __x0__ = (module.Evaluate module)
    [? __x0__]
    return index
  } else {}
  if (= module.Status "evaluated") if (= module.EvaluationError undefined) return index else return module.EvaluationError else {}
  if (= module.Status "evaluating") return index else {}
  assert (= module.Status "instantiated")
  module.Status = "evaluating"
  module.DFSIndex = index
  module.DFSAncestorIndex = index
  index = (+ index 1i)
  append module -> stack
  let __x1__ = module.RequestedModules
  let __x2__ = 0i
  while (< __x2__ __x1__.length) {
    let required = __x1__[__x2__]
    app __x3__ = (HostResolveImportedModule module required)
    let requiredModule = [! __x3__]
    app __x4__ = (InnerModuleEvaluation requiredModule stack index)
    index = [? __x4__]
    assert (|| (= requiredModule.Status "evaluating") (= requiredModule.Status "evaluated"))
    if (= requiredModule.Status "evaluating") {
      assert (= (typeof requiredModule) "CyclicModuleRecord")
      app __x5__ = (min module.DFSAncestorIndex requiredModule.DFSAncestorIndex)
      module.DFSAncestorIndex = __x5__
    } else {}
    __x2__ = (+ __x2__ 1i)
  }
  app __x6__ = (module.ExecuteModule module)
  [? __x6__]
  assert (! (< module.DFSIndex module.DFSAncestorIndex))
  if (= module.DFSAncestorIndex module.DFSIndex) {
    let done = false
    while (= done false) {
      let requiredModule = stack[(- stack.length 1i)]
      (pop stack (- stack.length 1i))
      requiredModule.Status = "evaluated"
      if (= requiredModule module) done = true else {}
    }
  } else {}
  return index
}