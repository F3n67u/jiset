{
  [0] access __x0__ = (PropertyName "Evaluation")
  [0] let propKey = __x0__
  [1] if (is-completion propKey) if (= propKey.Type CONST_normal) propKey = propKey.Value else return propKey else [0] {}
  [1] propKey
  [2] let scope = GLOBAL_context.LexicalEnvironment
  [5] if (! (= functionPrototype absent)) let prototype = functionPrototype else ??? "Let id:{prototype} be % Function . prototype % ."
  [7] app __x1__ = (OrdinaryFunctionCreate prototype UniqueFormalParameters FunctionBody CONST_nonDASHlexicalDASHthis scope)
  [7] let closure = __x1__
  [8] app __x2__ = (MakeMethod closure object)
  [8] __x2__
  [9] closure.SourceText = (get-syntax MethodDefinition)
  [10] app __x3__ = (WrapCompletion (new Record("Key" -> propKey, "Closure" -> closure)))
  [10] return __x3__
}