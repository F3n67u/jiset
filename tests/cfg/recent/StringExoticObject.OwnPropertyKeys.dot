digraph {
  node2712 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node2713 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node2716 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">2:assert (= __x0__ String)</td></tr>
      <tr><td align="left">3:let len = str.length</td></tr>
      <tr><td align="left">4:??? &quot;For each non - negative integer id:{i} starting with 0 such that id:{i} &lt; id:{len} , in ascending order , do in:{} out:{}&quot;</td></tr>
      <tr><td align="left">6:??? &quot;For each own property key id:{P} of id:{O} such that id:{P} is an array index and ! ToIntegerOrInfinity ( id:{P} ) &ge; id:{len} , in ascending numeric index order , do in:{} out:{}&quot;</td></tr>
      <tr><td align="left">8:??? &quot;For each own property key id:{P} of id:{O} such that Type ( id:{P} ) is String and id:{P} is not an array index , in ascending chronological order of property creation , do in:{} out:{}&quot;</td></tr>
      <tr><td align="left">10:??? &quot;For each own property key id:{P} of id:{O} such that Type ( id:{P} ) is Symbol , in ascending chronological order of property creation , do in:{} out:{}&quot;</td></tr>
      <tr><td align="left">12:return keys</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node2715 [shape=cds, label=<<font color="black">2:app __x0__ = (Type str)</font>> color="black" fillcolor="white" style=filled]
  node2714 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let keys = (new [])</td></tr>
      <tr><td align="left">1:let str = O.StringData</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node2712 -> node2714 [ color="black"]
  node2714 -> node2715 [ color="black"]
  node2715 -> node2716 [ color="black"]
  node2716 -> node2713 [ color="black"]
}
