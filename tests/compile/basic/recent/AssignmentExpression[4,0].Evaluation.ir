{
  if (! (|| (is-instance-of LeftHandSideExpression ObjectLiteral) (is-instance-of LeftHandSideExpression ArrayLiteral))) {
    access __x0__ = (LeftHandSideExpression "Evaluation")
    let lref = __x0__
    [? lref]
    app __x1__ = (IsAnonymousFunctionDefinition AssignmentExpression)
    access __x2__ = (LeftHandSideExpression "IsIdentifierRef")
    if (&& (= __x1__ true) (= __x2__ true)) {
      access __x3__ = (AssignmentExpression "NamedEvaluation")
      app __x4__ = (__x3__ lref.ReferencedName)
      let rval = __x4__
    } else {
      access __x5__ = (AssignmentExpression "Evaluation")
      let rref = __x5__
      app __x6__ = (GetValue rref)
      let rval = [? __x6__]
    }
    app __x7__ = (PutValue lref rval)
    [? __x7__]
    return rval
  } else {}
  let assignmentPattern = (parse-syntax LeftHandSideExpression "AssignmentPattern" (new []))
  access __x8__ = (AssignmentExpression "Evaluation")
  let rref = __x8__
  app __x9__ = (GetValue rref)
  let rval = [? __x9__]
  access __x10__ = (assignmentPattern "DestructuringAssignmentEvaluation")
  app __x11__ = (__x10__ rval)
  [? __x11__]
  return rval
}