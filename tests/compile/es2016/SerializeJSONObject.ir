{
  [0] if (contains stack value) {
    app __x0__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_TypeError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
    return __x0__
  } else [22] {}
  [1] append value -> stack
  [2] let stepback = indent
  [3] let indent = (+ indent gap)
  [6] if (! (= PropertyList undefined)) let K = PropertyList else {
    [7] app __x1__ = (EnumerableOwnNames value)
    [7] if (is-completion __x1__) if (= __x1__.Type CONST_normal) __x1__ = __x1__.Value else return __x1__ else [22] {}
    [7] let K = __x1__
  }
  [8] let partial = (new [])
  [9] let __x2__ = K
  [9] let __x3__ = 0i
  [9] while (< __x3__ __x2__.length) {
    let P = __x2__[__x3__]
    [10] app __x4__ = (SerializeJSONProperty P value)
    [10] if (is-completion __x4__) if (= __x4__.Type CONST_normal) __x4__ = __x4__.Value else return __x4__ else [22] {}
    [10] let strP = __x4__
    [11] if (! (= strP undefined)) {
      [12] app __x5__ = (QuoteJSONString P)
      [12] let member = __x5__
      [13] let member = (+ member ":")
      [14] if (! (= gap "")) let member = (+ member " ") else [22] {}
      [16] let member = (+ member strP)
      [17] append member -> partial
    } else [22] {}
    __x3__ = (+ __x3__ 1i)
  }
  [20] if (= partial.length 0i) let final = "{}" else if (= gap "") {
    [22] ??? "Let id:{properties} be a String formed by concatenating all the element Strings of id:{partial} with each adjacent pair of Strings separated with code unit 0x002C ( COMMA ) . A comma is not inserted either before the first String or after the last String ."
    [23] let final = (+ (+ "{" properties) "}")
  } else {
    [25] let separator = (+ (+ "," "\n") indent)
    [26] ??? "Let id:{properties} be a String formed by concatenating all the element Strings of id:{partial} with each adjacent pair of Strings separated with id:{separator} . The id:{separator} String is not inserted either before the first String or after the last String ."
    [27] let final = (+ (+ (+ (+ (+ (+ "{" "\n") indent) properties) "\n") stepback) "}")
  }
  [28] (pop stack (- stack.length 1i))
  [29] let indent = stepback
  [30] app __x6__ = (WrapCompletion final)
  [30] return __x6__
}