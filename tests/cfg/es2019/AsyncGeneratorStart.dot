digraph {
  node17603 [shape=cds, label=<<font color="black">app generator = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node17601 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node17605 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">1:assert (= generator.AsyncGeneratorState undefined)</td></tr>
      <tr><td align="left">2:let genContext = GLOBAL_context</td></tr>
      <tr><td align="left">3:genContext.Generator = generator</td></tr>
      <tr><td align="left">4:??? &quot;Set the code evaluation state of id:{genContext} such that when evaluation is resumed for that execution context the following steps will be performed : in:{} out:{}&quot;</td></tr>
      <tr><td align="left">15:generator.AsyncGeneratorContext = genContext</td></tr>
      <tr><td align="left">16:generator.AsyncGeneratorState = &quot;suspendedStart&quot;</td></tr>
      <tr><td align="left">17:generator.AsyncGeneratorQueue = (new [])</td></tr>
      <tr><td align="left">18:return undefined</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17602 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node17604 [shape=cds, label=<<font color="black">app generatorBody = (GetArgument argumentsList 1i)</font>> color="black" fillcolor="white" style=filled]
  node17601 -> node17603 [ color="black"]
  node17603 -> node17604 [ color="black"]
  node17604 -> node17605 [ color="black"]
  node17605 -> node17602 [ color="black"]
}
