package kr.ac.kaist.jiset.js.builtin

import kr.ac.kaist.jiset.ir.Ty._
import kr.ac.kaist.jiset.ir._
import kr.ac.kaist.jiset.js._

// type modeling
object TyModel {
  lazy val infos: List[Info] = List(
    I("Object", Map(
      "GetPrototypeOf" -> algos("OrdinaryObject.GetPrototypeOf"),
      "SetPrototypeOf" -> algos("OrdinaryObject.SetPrototypeOf"),
      "IsExtensible" -> algos("OrdinaryObject.IsExtensible"),
      "PreventExtensions" -> algos("OrdinaryObject.PreventExtensions"),
      "GetOwnProperty" -> algos("OrdinaryObject.GetOwnProperty"),
      "DefineOwnProperty" -> algos("OrdinaryObject.DefineOwnProperty"),
      "HasProperty" -> algos("OrdinaryObject.HasProperty"),
      "Get" -> algos("OrdinaryObject.Get"),
      "Set" -> algos("OrdinaryObject.Set"),
      "Delete" -> algos("OrdinaryObject.Delete"),
      "OwnPropertyKeys" -> algos("OrdinaryObject.OwnPropertyKeys"),
    )),
    I("OrdinaryObject", parent = "Object", Map()),
    I("FunctionObject", parent = "OrdinaryObject", Map()),
    I("ECMAScriptFunctionObject", parent = "FunctionObject", Map(
      "Call" -> algos("ECMAScriptFunctionObject.Call"),
      "Construct" -> algos("ECMAScriptFunctionObject.Construct"),
    )),
    I("BuiltinFunctionObject", parent = "FunctionObject", Map(
      "Call" -> algos("BuiltinFunctionObject.Call"),
      "Construct" -> algos("BuiltinFunctionObject.Construct"),
    )),
    I("BoundFunctionExoticObject", parent = "Object", Map(
      "Call" -> algos("BoundFunctionExoticObject.Call"),
      "Construct" -> algos("BoundFunctionExoticObject.Construct"),
    )),
    I("ArrayExoticObject", parent = "Object", Map(
      "DefineOwnProperty" -> algos("ArrayExoticObject.DefineOwnProperty"),
    )),
    I("StringExoticObject", parent = "Object", Map(
      "GetOwnProperty" -> algos("StringExoticObject.GetOwnProperty"),
      "DefineOwnProperty" -> algos("StringExoticObject.DefineOwnProperty"),
      "OwnPropertyKeys" -> algos("StringExoticObject.OwnPropertyKeys"),
    )),
    I("ArgumentsExoticObject", parent = "Object", Map(
      "GetOwnProperty" -> algos("ArgumentsExoticObject.GetOwnProperty"),
      "DefineOwnProperty" -> algos("ArgumentsExoticObject.DefineOwnProperty"),
      "Get" -> algos("ArgumentsExoticObject.Get"),
      "Set" -> algos("ArgumentsExoticObject.Set"),
      "Delete" -> algos("ArgumentsExoticObject.Delete"),
    )),
    I("IntegerIndexedExoticObject", parent = "Object", Map(
      "GetOwnProperty" -> algos("IntegerIndexedExoticObject.GetOwnProperty"),
      "HasProperty" -> algos("IntegerIndexedExoticObject.HasProperty"),
      "DefineOwnProperty" -> algos("IntegerIndexedExoticObject.DefineOwnProperty"),
      "Get" -> algos("IntegerIndexedExoticObject.Get"),
      "Set" -> algos("IntegerIndexedExoticObject.Set"),
      "Delete" -> algos("IntegerIndexedExoticObject.Delete"),
      "OwnPropertyKeys" -> algos("IntegerIndexedExoticObject.OwnPropertyKeys"),
    )),
    I("ImmutablePrototypeExoticObject", parent = "Object", Map(
      "SetPrototypeOf" -> algos("ImmutablePrototypeExoticObject.SetPrototypeOf"),
    )),
    I("ProxyObject", parent = "Object", Map(
      "GetPrototypeOf" -> algos("ProxyObject.GetPrototypeOf"),
      "SetPrototypeOf" -> algos("ProxyObject.SetPrototypeOf"),
      "IsExtensible" -> algos("ProxyObject.IsExtensible"),
      "PreventExtensions" -> algos("ProxyObject.PreventExtensions"),
      "GetOwnProperty" -> algos("ProxyObject.GetOwnProperty"),
      "DefineOwnProperty" -> algos("ProxyObject.DefineOwnProperty"),
      "HasProperty" -> algos("ProxyObject.HasProperty"),
      "Get" -> algos("ProxyObject.Get"),
      "Set" -> algos("ProxyObject.Set"),
      "Delete" -> algos("ProxyObject.Delete"),
      "OwnPropertyKeys" -> algos("ProxyObject.OwnPropertyKeys"),
      "Call" -> algos("ProxyObject.Call"),
      "Construct" -> algos("ProxyObject.Construct"),
    )),
    I("ArrayBufferObject", parent = "Object", Map()),
    I("BooleanObject", parent = "OrdinaryObject", Map()),
    I("BigIntObject", parent = "OrdinaryObject", Map()),
    I("NumberObject", parent = "OrdinaryObject", Map()),
    I("SymbolObject", parent = "OrdinaryObject", Map()),
    // special instances
    I("ForInIteratorInstance", parent = "OrdinaryObject", Map()),
    I("AsynFromSyncIteratorInstance", parent = "OrdinaryObject", Map()),
    I("PromiseInstance", parent = "OrdinaryObject", Map()),
    I("GeneratorInstance", parent = "OrdinaryObject", Map()),
    I("AsyncGeneratorInstance", parent = "OrdinaryObject", Map()),
    // environment records
    I("LexicalEnvironment", Map()),
    I("EnvironmentRecord", parent = "LexicalEnvironment", Map()),
    I("DeclarativeEnvironmentRecord", parent = "EnvironmentRecord", Map(
      "HasBinding" -> algos("DeclarativeEnvironmentRecord.HasBinding"),
      "CreateMutableBinding" -> algos("DeclarativeEnvironmentRecord.CreateMutableBinding"),
      "CreateImmutableBinding" -> algos("DeclarativeEnvironmentRecord.CreateImmutableBinding"),
      "InitializeBinding" -> algos("DeclarativeEnvironmentRecord.InitializeBinding"),
      "SetMutableBinding" -> algos("DeclarativeEnvironmentRecord.SetMutableBinding"),
      "GetBindingValue" -> algos("DeclarativeEnvironmentRecord.GetBindingValue"),
      "DeleteBinding" -> algos("DeclarativeEnvironmentRecord.DeleteBinding"),
      "HasThisBinding" -> algos("DeclarativeEnvironmentRecord.HasThisBinding"),
      "HasSuperBinding" -> algos("DeclarativeEnvironmentRecord.HasSuperBinding"),
      "WithBaseObject" -> algos("DeclarativeEnvironmentRecord.WithBaseObject"),
    )),
    I("ObjectEnvironmentRecord", parent = "EnvironmentRecord", Map(
      "HasBinding" -> algos("ObjectEnvironmentRecord.HasBinding"),
      "CreateMutableBinding" -> algos("ObjectEnvironmentRecord.CreateMutableBinding"),
      "InitializeBinding" -> algos("ObjectEnvironmentRecord.InitializeBinding"),
      "SetMutableBinding" -> algos("ObjectEnvironmentRecord.SetMutableBinding"),
      "GetBindingValue" -> algos("ObjectEnvironmentRecord.GetBindingValue"),
      "DeleteBinding" -> algos("ObjectEnvironmentRecord.DeleteBinding"),
      "HasThisBinding" -> algos("ObjectEnvironmentRecord.HasThisBinding"),
      "HasSuperBinding" -> algos("ObjectEnvironmentRecord.HasSuperBinding"),
      "WithBaseObject" -> algos("ObjectEnvironmentRecord.WithBaseObject"),
    )),
    I("FunctionEnvironmentRecord", parent = "DeclarativeEnvironmentRecord", Map(
      "BindThisValue" -> algos("FunctionEnvironmentRecord.BindThisValue"),
      "HasThisBinding" -> algos("FunctionEnvironmentRecord.HasThisBinding"),
      "HasSuperBinding" -> algos("FunctionEnvironmentRecord.HasSuperBinding"),
      "GetThisBinding" -> algos("FunctionEnvironmentRecord.GetThisBinding"),
      "GetSuperBase" -> algos("FunctionEnvironmentRecord.GetSuperBase"),
    )),
    I("GlobalEnvironmentRecord", parent = "EnvironmentRecord", Map(
      "HasBinding" -> algos("GlobalEnvironmentRecord.HasBinding"),
      "CreateMutableBinding" -> algos("GlobalEnvironmentRecord.CreateMutableBinding"),
      "CreateImmutableBinding" -> algos("GlobalEnvironmentRecord.CreateImmutableBinding"),
      "InitializeBinding" -> algos("GlobalEnvironmentRecord.InitializeBinding"),
      "SetMutableBinding" -> algos("GlobalEnvironmentRecord.SetMutableBinding"),
      "GetBindingValue" -> algos("GlobalEnvironmentRecord.GetBindingValue"),
      "DeleteBinding" -> algos("GlobalEnvironmentRecord.DeleteBinding"),
      "HasThisBinding" -> algos("GlobalEnvironmentRecord.HasThisBinding"),
      "HasSuperBinding" -> algos("GlobalEnvironmentRecord.HasSuperBinding"),
      "WithBaseObject" -> algos("GlobalEnvironmentRecord.WithBaseObject"),
      "GetThisBinding" -> algos("GlobalEnvironmentRecord.GetThisBinding"),
      "HasVarDeclaration" -> algos("GlobalEnvironmentRecord.HasVarDeclaration"),
      "HasLexicalDeclaration" -> algos("GlobalEnvironmentRecord.HasLexicalDeclaration"),
      "HasRestrictedGlobalProperty" -> algos("GlobalEnvironmentRecord.HasRestrictedGlobalProperty"),
      "CanDeclareGlobalVar" -> algos("GlobalEnvironmentRecord.CanDeclareGlobalVar"),
      "CanDeclareGlobalFunction" -> algos("GlobalEnvironmentRecord.CanDeclareGlobalFunction"),
      "CreateGlobalVarBinding" -> algos("GlobalEnvironmentRecord.CreateGlobalVarBinding"),
      "CreateGlobalFunctionBinding" -> algos("GlobalEnvironmentRecord.CreateGlobalFunctionBinding"),
    )),
  )
}
