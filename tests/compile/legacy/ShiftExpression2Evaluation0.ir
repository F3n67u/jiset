{
  access __x0__ = (ShiftExpression "Evaluation")
  let lref = __x0__
  app __x1__ = (GetValue lref)
  let lval = [? __x1__]
  access __x2__ = (AdditiveExpression "Evaluation")
  let rref = __x2__
  app __x3__ = (GetValue rref)
  let rval = [? __x3__]
  app __x4__ = (ToNumeric lval)
  let lnum = [? __x4__]
  app __x5__ = (ToNumeric rval)
  let rnum = [? __x5__]
  if (! (= (typeof lnum) (typeof rnum))) throw TypeError else {}
  let T = (typeof lnum)
  app __x6__ = (PRIMITIVE[T].signedRightShift lnum rnum)
  return __x6__
}