digraph {
  node17639 [shape=diamond, label=<<font color="black">(= state &quot;suspendedStart&quot;)</font>> color="black" fillcolor="white" style=filled]
  node17645 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">16:let promise = [? __x1__]</td></tr>
      <tr><td align="left">17:let stepsFulfilled = AsyncGeneratorResumeNextReturnProcessorFulfilledFunctions</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17638 [shape=diamond, label=<<font color="black">__x0__</font>> color="black" fillcolor="white" style=filled]
  node17643 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">15:generator.AsyncGeneratorState = &quot;awaiting-return&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17647 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">18:let onFulfilled = __x2__</td></tr>
      <tr><td align="left">19:onFulfilled.Generator = generator</td></tr>
      <tr><td align="left">20:let stepsRejected = AsyncGeneratorResumeNextReturnProcessorRejectedFunctions</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17632 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return undefined</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17656 [shape=cds, label=<<font color="black">app __x6__ = (AsyncGeneratorResolve generator undefined true)</font>> color="black" fillcolor="white" style=filled]
  node17641 [shape=diamond, label=<<font color="black">(= state &quot;completed&quot;)</font>> color="black" fillcolor="white" style=filled]
  node17652 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">26:assert (= completion.Type CONST_throw)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17630 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">1:let state = generator.AsyncGeneratorState</td></tr>
      <tr><td align="left">2:assert (! (= state &quot;executing&quot;))</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17635 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return undefined</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17633 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">4:let queue = generator.AsyncGeneratorQueue</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17627 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node17655 [shape=diamond, label=<<font color="black">(= state &quot;completed&quot;)</font>> color="black" fillcolor="white" style=filled]
  node17642 [shape=diamond, label=<<font color="black">(= completion.Type CONST_return)</font>> color="black" fillcolor="white" style=filled]
  node17631 [shape=diamond, label=<<font color="black">(= state &quot;awaiting-return&quot;)</font>> color="black" fillcolor="white" style=filled]
  node17651 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">23:[! __x4__]</td></tr>
      <tr><td align="left">24:return undefined</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17646 [shape=cds, label=<<font color="black">18:app __x2__ = (CreateBuiltinFunction stepsFulfilled (new [&quot;Generator&quot;]))</font>> color="black" fillcolor="white" style=filled]
  node17654 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">27:[! __x5__]</td></tr>
      <tr><td align="left">28:return undefined</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17628 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node17637 [shape=cds, label=<<font color="black">29:app __x0__ = (IsAbruptCompletion completion)</font>> color="black" fillcolor="white" style=filled]
  node17650 [shape=cds, label=<<font color="black">23:app __x4__ = (PerformPromiseThen promise onFulfilled onRejected)</font>> color="black" fillcolor="white" style=filled]
  node17657 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return [! __x6__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17640 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">11:generator.AsyncGeneratorState = &quot;completed&quot;</td></tr>
      <tr><td align="left">12:state = &quot;completed&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17653 [shape=cds, label=<<font color="black">27:app __x5__ = (AsyncGeneratorReject generator completion.Value)</font>> color="black" fillcolor="white" style=filled]
  node17644 [shape=cds, label=<<font color="black">16:app __x1__ = (PromiseResolve INTRINSIC_Promise (new [completion.Value]))</font>> color="black" fillcolor="white" style=filled]
  node17649 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">21:let onRejected = __x3__</td></tr>
      <tr><td align="left">22:onRejected.Generator = generator</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17648 [shape=cds, label=<<font color="black">21:app __x3__ = (CreateBuiltinFunction stepsRejected (new [&quot;Generator&quot;]))</font>> color="black" fillcolor="white" style=filled]
  node17629 [shape=cds, label=<<font color="black">app generator = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node17658 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">30:assert (|| (= state &quot;suspendedStart&quot;) (= state &quot;suspendedYield&quot;))</td></tr>
      <tr><td align="left">31:let genContext = generator.AsyncGeneratorContext</td></tr>
      <tr><td align="left">32:let callerContext = GLOBAL_context</td></tr>
      <tr><td align="left">33:GLOBAL_context = null</td></tr>
      <tr><td align="left">34:generator.AsyncGeneratorState = &quot;executing&quot;</td></tr>
      <tr><td align="left">35:append genContext -&gt; GLOBAL_executionStack</td></tr>
      <tr><td align="left">35:GLOBAL_context = GLOBAL_executionStack[(- GLOBAL_executionStack.length 1i)]</td></tr>
      <tr><td align="left">36:??? &quot;Resume the suspended evaluation of id:{genContext} using id:{completion} as the result of the operation that suspended it . Let id:{result} be the completion record returned by the resumed computation .&quot;</td></tr>
      <tr><td align="left">39:return undefined</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17636 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">6:let next = queue[0i]</td></tr>
      <tr><td align="left">8:let completion = next.Completion</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17634 [shape=diamond, label=<<font color="black">(= queue.length 0i)</font>> color="black" fillcolor="white" style=filled]
  node17635 -> node17636 [ color="black"]
  node17645 -> node17646 [ color="black"]
  node17658 -> node17628 [ color="black"]
  node17654 -> node17658 [ color="black"]
  node17630 -> node17631 [ color="black"]
  node17653 -> node17654 [ color="black"]
  node17640 -> node17641 [ color="black"]
  node17639 -> node17640 [label=<<font color="black">true</font>> color="black"]
  node17639 -> node17641 [label=<<font color="black">false</font>> color="black"]
  node17652 -> node17653 [ color="black"]
  node17633 -> node17634 [ color="black"]
  node17650 -> node17651 [ color="black"]
  node17651 -> node17658 [ color="black"]
  node17631 -> node17632 [label=<<font color="black">true</font>> color="black"]
  node17631 -> node17633 [label=<<font color="black">false</font>> color="black"]
  node17647 -> node17648 [ color="black"]
  node17656 -> node17657 [ color="black"]
  node17637 -> node17638 [ color="black"]
  node17632 -> node17633 [ color="black"]
  node17643 -> node17644 [ color="black"]
  node17646 -> node17647 [ color="black"]
  node17657 -> node17658 [ color="black"]
  node17629 -> node17630 [ color="black"]
  node17648 -> node17649 [ color="black"]
  node17641 -> node17642 [label=<<font color="black">true</font>> color="black"]
  node17641 -> node17658 [label=<<font color="black">false</font>> color="black"]
  node17649 -> node17650 [ color="black"]
  node17638 -> node17639 [label=<<font color="black">true</font>> color="black"]
  node17638 -> node17655 [label=<<font color="black">false</font>> color="black"]
  node17642 -> node17643 [label=<<font color="black">true</font>> color="black"]
  node17642 -> node17652 [label=<<font color="black">false</font>> color="black"]
  node17644 -> node17645 [ color="black"]
  node17634 -> node17635 [label=<<font color="black">true</font>> color="black"]
  node17634 -> node17636 [label=<<font color="black">false</font>> color="black"]
  node17627 -> node17629 [ color="black"]
  node17636 -> node17637 [ color="black"]
  node17655 -> node17656 [label=<<font color="black">true</font>> color="black"]
  node17655 -> node17658 [label=<<font color="black">false</font>> color="black"]
}
