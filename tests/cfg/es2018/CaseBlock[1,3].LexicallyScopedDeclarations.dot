digraph {
  node7396 [shape=diamond, label=<<font color="black">(! (= CaseClauses0 absent))</font>> color="black" fillcolor="white" style=filled]
  node7401 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">2:let __x2__ = __x1__</td></tr>
      <tr><td align="left">2:let __x3__ = 0i</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node7404 [shape=diamond, label=<<font color="black">(= CaseClauses1 absent)</font>> color="black" fillcolor="white" style=filled]
  node7397 [shape=cds, label=<<font color="black">access __x0__ = (CaseClauses0 &quot;LexicallyScopedDeclarations&quot;)</font>> color="black" fillcolor="white" style=filled]
  node7394 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node7403 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let __x4__ = __x2__[__x3__]</td></tr>
      <tr><td align="left">append __x4__ -&gt; declarations</td></tr>
      <tr><td align="left">__x3__ = (+ __x3__ 1i)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node7398 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let declarations = __x0__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node7395 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node7402 [shape=diamond, label=<<font color="black">(&lt; __x3__ __x2__.length)</font>> color="black" fillcolor="white" style=filled]
  node7405 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return declarations</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node7400 [shape=cds, label=<<font color="black">2:access __x1__ = (DefaultClause &quot;LexicallyScopedDeclarations&quot;)</font>> color="black" fillcolor="white" style=filled]
  node7399 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let declarations = (new [])</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node7406 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">4:??? &quot;Return the result of appending to id:{declarations} the elements of the LexicallyScopedDeclarations of the second nt:{CaseClauses} .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node7404 -> node7405 [label=<<font color="black">true</font>> color="black"]
  node7404 -> node7406 [label=<<font color="black">false</font>> color="black"]
  node7399 -> node7400 [ color="black"]
  node7400 -> node7401 [ color="black"]
  node7406 -> node7395 [ color="black"]
  node7397 -> node7398 [ color="black"]
  node7396 -> node7397 [label=<<font color="black">true</font>> color="black"]
  node7396 -> node7399 [label=<<font color="black">false</font>> color="black"]
  node7405 -> node7406 [ color="black"]
  node7401 -> node7402 [ color="black"]
  node7398 -> node7400 [ color="black"]
  node7402 -> node7403 [label=<<font color="black">true</font>> color="black"]
  node7402 -> node7404 [label=<<font color="black">false</font>> color="black"]
  node7403 -> node7402 [ color="black"]
  node7394 -> node7396 [ color="black"]
}
