{
  let calleeContext = GLOBAL_context
  access __x0__ = (calleeContext "LexicalEnvironment")
  let env = __x0__
  let envRec = env.EnvironmentRecord
  let code = func.ECMAScriptCode
  let strict = func.Strict
  let formals = func.FormalParameters
  access __x1__ = (formals "BoundNames")
  let parameterNames = __x1__
  app __x2__ = (IsDuplicate parameterNames)
  if __x2__ let hasDuplicates = true else let hasDuplicates = false
  access __x3__ = (formals "IsSimpleParameterList")
  let simpleParameterList = __x3__
  access __x4__ = (formals "ContainsExpression")
  let hasParameterExpressions = __x4__
  access __x5__ = (code "VarDeclaredNames")
  let varNames = __x5__
  access __x6__ = (code "VarScopedDeclarations")
  let varDeclarations = __x6__
  access __x7__ = (code "LexicallyDeclaredNames")
  let lexicalNames = __x7__
  let functionNames = (new [])
  let functionsToInitialize = (new [])
  let __x8__ = varDeclarations
  let __x9__ = __x8__.length
  while (< 0i __x9__) {
    __x9__ = (- __x9__ 1i)
    let d = __x8__[__x9__]
    if (! (|| (is-instance-of d VariableDeclaration) (is-instance-of d ForBinding))) {
      assert (|| (is-instance-of d FunctionDeclaration) (is-instance-of d GeneratorDeclaration))
      access __x10__ = (d "BoundNames")
      let fn = __x10__[0i]
      if (! (contains functionNames fn)) {
        prepend fn -> functionNames
        prepend d -> functionsToInitialize
      } else {}
    } else {}
  }
  let argumentsObjectNeeded = true
  if (= func.ThisMode CONST_lexical) let argumentsObjectNeeded = false else if (contains parameterNames "arguments") let argumentsObjectNeeded = false else if (= hasParameterExpressions false) if (|| (contains functionNames "arguments") (contains lexicalNames "arguments")) let argumentsObjectNeeded = false else {} else {}
  let __x11__ = parameterNames
  let __x12__ = 0i
  while (< __x12__ __x11__.length) {
    let paramName = __x11__[__x12__]
    app __x13__ = (envRec.HasBinding envRec paramName)
    let alreadyDeclared = __x13__
    if (= alreadyDeclared false) {
      app __x14__ = (envRec.CreateMutableBinding envRec paramName false)
      [! __x14__]
      if (= hasDuplicates true) {
        app __x15__ = (envRec.InitializeBinding envRec paramName undefined)
        [! __x15__]
      } else {}
    } else {}
    __x12__ = (+ __x12__ 1i)
  }
  if (= argumentsObjectNeeded true) {
    if (|| (= strict true) (= simpleParameterList false)) {
      app __x16__ = (CreateUnmappedArgumentsObject argumentsList)
      let ao = __x16__
    } else {
      app __x17__ = (CreateMappedArgumentsObject func formals argumentsList envRec)
      let ao = __x17__
    }
    if (= strict true) {
      app __x18__ = (envRec.CreateImmutableBinding envRec "arguments" false)
      [! __x18__]
    } else {
      app __x19__ = (envRec.CreateMutableBinding envRec "arguments" false)
      [! __x19__]
    }
    app __x20__ = (envRec.InitializeBinding envRec "arguments" ao)
    __x20__
    append "arguments" -> parameterNames
  } else {}
  app __x21__ = (CreateListIterator argumentsList)
  let iteratorRecord = (new Record("Iterator" -> __x21__, "Done" -> false))
  if (= hasDuplicates true) {
    access __x22__ = (formals "IteratorBindingInitialization")
    app __x23__ = (__x22__ iteratorRecord undefined)
    [? __x23__]
  } else {
    access __x24__ = (formals "IteratorBindingInitialization")
    app __x25__ = (__x24__ iteratorRecord env)
    [? __x25__]
  }
  if (= hasParameterExpressions false) {
    let instantiatedVarNames = (copy-obj parameterNames)
    let __x26__ = varNames
    let __x27__ = 0i
    while (< __x27__ __x26__.length) {
      let n = __x26__[__x27__]
      if (! (contains instantiatedVarNames n)) {
        append n -> instantiatedVarNames
        app __x28__ = (envRec.CreateMutableBinding envRec n false)
        [! __x28__]
        app __x29__ = (envRec.InitializeBinding envRec n undefined)
        __x29__
      } else {}
      __x27__ = (+ __x27__ 1i)
    }
    let varEnv = env
    let varEnvRec = envRec
  } else {
    app __x30__ = (NewDeclarativeEnvironment env)
    let varEnv = __x30__
    let varEnvRec = varEnv.EnvironmentRecord
    calleeContext.VariableEnvironment = varEnv
    let instantiatedVarNames = (new [])
    let __x31__ = varNames
    let __x32__ = 0i
    while (< __x32__ __x31__.length) {
      let n = __x31__[__x32__]
      if (! (contains instantiatedVarNames n)) {
        append n -> instantiatedVarNames
        app __x33__ = (varEnvRec.CreateMutableBinding varEnvRec n false)
        [! __x33__]
        if (|| (! (contains parameterNames n)) (contains functionNames n)) let initialValue = undefined else {
          app __x34__ = (envRec.GetBindingValue envRec n false)
          let initialValue = [! __x34__]
        }
        app __x35__ = (varEnvRec.InitializeBinding varEnvRec n initialValue)
        __x35__
      } else {}
      __x32__ = (+ __x32__ 1i)
    }
  }
  if (= strict false) {
    app __x36__ = (NewDeclarativeEnvironment varEnv)
    let lexEnv = __x36__
  } else let lexEnv = varEnv
  let lexEnvRec = lexEnv.EnvironmentRecord
  calleeContext.LexicalEnvironment = lexEnv
  access __x37__ = (code "LexicallyScopedDeclarations")
  let lexDeclarations = __x37__
  let __x38__ = lexDeclarations
  let __x39__ = 0i
  while (< __x39__ __x38__.length) {
    let d = __x38__[__x39__]
    access __x40__ = (d "BoundNames")
    let __x41__ = __x40__
    let __x42__ = 0i
    while (< __x42__ __x41__.length) {
      let dn = __x41__[__x42__]
      access __x43__ = (d "IsConstantDeclaration")
      if (= __x43__ true) {
        app __x44__ = (lexEnvRec.CreateImmutableBinding lexEnvRec dn true)
        [! __x44__]
      } else {
        app __x45__ = (lexEnvRec.CreateMutableBinding lexEnvRec dn false)
        [! __x45__]
      }
      __x42__ = (+ __x42__ 1i)
    }
    __x39__ = (+ __x39__ 1i)
  }
  let __x46__ = functionsToInitialize
  let __x47__ = 0i
  while (< __x47__ __x46__.length) {
    let f = __x46__[__x47__]
    access __x48__ = (f "BoundNames")
    let fn = __x48__[0i]
    access __x49__ = (f "InstantiateFunctionObject")
    app __x50__ = (__x49__ lexEnv)
    let fo = __x50__
    app __x51__ = (varEnvRec.SetMutableBinding varEnvRec fn fo false)
    [! __x51__]
    __x47__ = (+ __x47__ 1i)
  }
  return CONST_empty
}