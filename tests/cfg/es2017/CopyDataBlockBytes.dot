digraph {
  node249 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">toBlock[toIndex] = fromBlock[fromIndex]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node247 [shape=diamond, label=<<font color="black">(= (typeof fromBlock) &quot;SharedDataBlock&quot;)</font>> color="black" fillcolor="white" style=filled]
  node243 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node248 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">8:let execution = GLOBAL_agent.CandidateExecution</td></tr>
      <tr><td align="left">9:??? &quot;Let id:{eventList} be the [ [ EventList ] ] field of the element in id:{execution} . [ [ EventLists ] ] whose [ [ AgentSignifier ] ] is AgentSignifier ( ) .&quot;</td></tr>
      <tr><td align="left">10:??? &quot;Let id:{bytes} be a List of length 1 that contains a nondeterministically chosen byte value .&quot;</td></tr>
      <tr><td align="left">12:let readEvent = (new ReadSharedMemory(&quot;Order&quot; -&gt; &quot;Unordered&quot;, &quot;NoTear&quot; -&gt; true, &quot;Block&quot; -&gt; fromBlock, &quot;ByteIndex&quot; -&gt; fromIndex, &quot;ElementSize&quot; -&gt; 1i))</td></tr>
      <tr><td align="left">13:append readEvent -&gt; eventList</td></tr>
      <tr><td align="left">14:append (new WriteSharedMemory(&quot;Order&quot; -&gt; &quot;Unordered&quot;, &quot;NoTear&quot; -&gt; true, &quot;Block&quot; -&gt; toBlock, &quot;ByteIndex&quot; -&gt; toIndex, &quot;ElementSize&quot; -&gt; 1i, &quot;Payload&quot; -&gt; bytes)) -&gt; eventList</td></tr>
      <tr><td align="left">15:append (new ChosenValueRecord(&quot;Event&quot; -&gt; readEvent, &quot;ChosenValue&quot; -&gt; bytes)) -&gt; execution.ChosenValues</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node244 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node245 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">2:??? &quot;Let id:{fromSize} be the number of bytes in id:{fromBlock} .&quot;</td></tr>
      <tr><td align="left">3:assert (! (&lt; fromSize (+ fromIndex count)))</td></tr>
      <tr><td align="left">4:??? &quot;Let id:{toSize} be the number of bytes in id:{toBlock} .&quot;</td></tr>
      <tr><td align="left">5:assert (! (&lt; toSize (+ toIndex count)))</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node251 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">19:return CONST_empty</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node250 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">17:toIndex = (+ toIndex 1i)</td></tr>
      <tr><td align="left">17:fromIndex = (+ fromIndex 1i)</td></tr>
      <tr><td align="left">18:count = (- count 1i)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node246 [shape=diamond, label=<<font color="black">(&lt; 0i count)</font>> color="black" fillcolor="white" style=filled]
  node249 -> node250 [ color="black"]
  node250 -> node246 [ color="black"]
  node246 -> node247 [label=<<font color="black">true</font>> color="black"]
  node246 -> node251 [label=<<font color="black">false</font>> color="black"]
  node251 -> node244 [ color="black"]
  node245 -> node246 [ color="black"]
  node248 -> node250 [ color="black"]
  node243 -> node245 [ color="black"]
  node247 -> node248 [label=<<font color="black">true</font>> color="black"]
  node247 -> node249 [label=<<font color="black">false</font>> color="black"]
}
