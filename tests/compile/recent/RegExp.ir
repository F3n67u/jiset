{
  app pattern = (GetArgument argumentsList 0i)
  app flags = (GetArgument argumentsList 1i)
  [0] app __x0__ = (IsRegExp pattern)
  [0] if (is-completion __x0__) if (= __x0__.Type CONST_normal) __x0__ = __x0__.Value else return __x0__ else [0] {}
  [0] let patternIsRegExp = __x0__
  [6] if (= NewTarget undefined) {
    [2] let newTarget = GLOBAL_context.Function
    [3] if (&& (= patternIsRegExp true) (= flags undefined)) {
      [4] app __x1__ = (Get pattern "constructor")
      [4] if (is-completion __x1__) if (= __x1__.Type CONST_normal) __x1__ = __x1__.Value else return __x1__ else [0] {}
      [4] let patternConstructor = __x1__
      [5] app __x2__ = (SameValue newTarget patternConstructor)
      [5] if (= __x2__ true) {
        app __x3__ = (WrapCompletion pattern)
        return __x3__
      } else [0] {}
    } else [0] {}
  } else let newTarget = NewTarget
  [16] app __x4__ = (Type pattern)
  [16] if (&& (= __x4__ Object) (! (= pattern.RegExpMatcher absent))) {
    [8] let P = pattern.OriginalSource
    [10] if (= flags undefined) let F = pattern.OriginalFlags else let F = flags
  } else if (= patternIsRegExp true) {
    [12] app __x5__ = (Get pattern "source")
    [12] if (is-completion __x5__) if (= __x5__.Type CONST_normal) __x5__ = __x5__.Value else return __x5__ else [0] {}
    [12] let P = __x5__
    [15] if (= flags undefined) {
      [14] app __x6__ = (Get pattern "flags")
      [14] if (is-completion __x6__) if (= __x6__.Type CONST_normal) __x6__ = __x6__.Value else return __x6__ else [0] {}
      [14] let F = __x6__
    } else let F = flags
  } else {
    [17] let P = pattern
    [18] let F = flags
  }
  [19] app __x7__ = (RegExpAlloc newTarget)
  [19] if (is-completion __x7__) if (= __x7__.Type CONST_normal) __x7__ = __x7__.Value else return __x7__ else [0] {}
  [19] let O = __x7__
  [20] app __x8__ = (RegExpInitialize O P F)
  [20] if (is-completion __x8__) if (= __x8__.Type CONST_normal) __x8__ = __x8__.Value else return __x8__ else [0] {}
  [20] app __x9__ = (WrapCompletion __x8__)
  [20] return __x9__
}