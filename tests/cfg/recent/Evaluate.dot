digraph {
  node10876 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let m = __x2__[__x3__]</td></tr>
      <tr><td align="left">6:assert (= m.Status CONST_evaluating)</td></tr>
      <tr><td align="left">7:m.Status = CONST_evaluated</td></tr>
      <tr><td align="left">8:m.EvaluationError = result</td></tr>
      <tr><td align="left">__x3__ = (+ __x3__ 1i)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10869 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">1:assert (|| (= module.Status CONST_linked) (= module.Status CONST_evaluated))</td></tr>
      <tr><td align="left">2:let stack = (new [])</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10871 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">3:let result = __x0__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10875 [shape=diamond, label=<<font color="black">(&lt; __x3__ __x2__.length)</font>> color="black" fillcolor="white" style=filled]
  node10872 [shape=cds, label=<<font color="black">4:app __x1__ = (IsAbruptCompletion result)</font>> color="black" fillcolor="white" style=filled]
  node10874 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">5:let __x2__ = stack</td></tr>
      <tr><td align="left">5:let __x3__ = 0i</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10867 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node10878 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">11:assert (&amp;&amp; (= module.Status CONST_evaluated) (= module.EvaluationError undefined))</td></tr>
      <tr><td align="left">12:assert (= stack.length 0i)</td></tr>
      <tr><td align="left">13:return undefined</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10873 [shape=diamond, label=<<font color="black">__x1__</font>> color="black" fillcolor="white" style=filled]
  node10870 [shape=cds, label=<<font color="black">3:app __x0__ = (InnerModuleEvaluation module stack 0i)</font>> color="black" fillcolor="white" style=filled]
  node10868 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node10877 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">9:assert (&amp;&amp; (= module.Status CONST_evaluated) (= module.EvaluationError result))</td></tr>
      <tr><td align="left">10:return result</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10875 -> node10876 [label=<<font color="black">true</font>> color="black"]
  node10875 -> node10877 [label=<<font color="black">false</font>> color="black"]
  node10872 -> node10873 [ color="black"]
  node10870 -> node10871 [ color="black"]
  node10873 -> node10874 [label=<<font color="black">true</font>> color="black"]
  node10873 -> node10878 [label=<<font color="black">false</font>> color="black"]
  node10871 -> node10872 [ color="black"]
  node10867 -> node10869 [ color="black"]
  node10878 -> node10868 [ color="black"]
  node10874 -> node10875 [ color="black"]
  node10869 -> node10870 [ color="black"]
  node10877 -> node10878 [ color="black"]
  node10876 -> node10875 [ color="black"]
}
