digraph {
  node7850 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let iteratorHint = CONST_sync</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node7824 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node7839 [shape=diamond, label=<<font color="black">(|| (= exprValue undefined) (= exprValue null))</font>> color="black" fillcolor="white" style=filled]
  node7825 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let oldEnv = GLOBAL_context.LexicalEnvironment</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node7835 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">7:let exprRef = __x4__</td></tr>
      <tr><td align="left">8:GLOBAL_context.LexicalEnvironment = oldEnv</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node7845 [shape=cds, label=<<font color="black">15:app __x8__ = (GetV iterator &quot;next&quot;)</font>> color="black" fillcolor="white" style=filled]
  node7830 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let name = __x1__[__x2__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node7849 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let iteratorHint = CONST_async</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node7842 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">13:let obj = [! __x6__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node7838 [shape=diamond, label=<<font color="black">(= iterationKind CONST_enumerate)</font>> color="black" fillcolor="white" style=filled]
  node7826 [shape=diamond, label=<<font color="black">(&lt; 0i uninitializedBoundNames.length)</font>> color="black" fillcolor="white" style=filled]
  node7831 [shape=cds, label=<<font color="black">5:app __x3__ = (newEnv.CreateMutableBinding newEnv name false)</font>> color="black" fillcolor="white" style=filled]
  node7843 [shape=cds, label=<<font color="black">14:app __x7__ = (EnumerateObjectProperties obj)</font>> color="black" fillcolor="white" style=filled]
  node7837 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">9:let exprValue = [? __x5__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node7852 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">21:return [? __x9__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node7832 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">5:[! __x3__]</td></tr>
      <tr><td align="left">__x2__ = (+ __x2__ 1i)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node7847 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">18:assert (|| (= iterationKind CONST_iterate) (= iterationKind CONST_asyncDASHiterate))</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node7844 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">14:let iterator = [? __x7__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node7840 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return (new Completion(&quot;Type&quot; -&gt; CONST_break, &quot;Value&quot; -&gt; CONST_empty, &quot;Target&quot; -&gt; CONST_empty))</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node7836 [shape=cds, label=<<font color="black">9:app __x5__ = (GetValue exprRef)</font>> color="black" fillcolor="white" style=filled]
  node7851 [shape=cds, label=<<font color="black">21:app __x9__ = (GetIterator exprValue iteratorHint)</font>> color="black" fillcolor="white" style=filled]
  node7829 [shape=diamond, label=<<font color="black">(&lt; __x2__ __x1__.length)</font>> color="black" fillcolor="white" style=filled]
  node7827 [shape=cds, label=<<font color="black">3:app __x0__ = (NewDeclarativeEnvironment oldEnv)</font>> color="black" fillcolor="white" style=filled]
  node7834 [shape=cds, label=<<font color="black">7:access __x4__ = (expr &quot;Evaluation&quot;)</font>> color="black" fillcolor="white" style=filled]
  node7846 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">15:let nextMethod = [! __x8__]</td></tr>
      <tr><td align="left">16:return (new Record(&quot;Iterator&quot; -&gt; iterator, &quot;NextMethod&quot; -&gt; nextMethod, &quot;Done&quot; -&gt; false))</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node7841 [shape=cds, label=<<font color="black">13:app __x6__ = (ToObject exprValue)</font>> color="black" fillcolor="white" style=filled]
  node7833 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">6:GLOBAL_context.LexicalEnvironment = newEnv</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node7828 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">3:let newEnv = __x0__</td></tr>
      <tr><td align="left">4:let __x1__ = uninitializedBoundNames</td></tr>
      <tr><td align="left">4:let __x2__ = 0i</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node7848 [shape=diamond, label=<<font color="black">(= iterationKind CONST_asyncDASHiterate)</font>> color="black" fillcolor="white" style=filled]
  node7823 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node7838 -> node7839 [label=<<font color="black">true</font>> color="black"]
  node7838 -> node7847 [label=<<font color="black">false</font>> color="black"]
  node7837 -> node7838 [ color="black"]
  node7832 -> node7829 [ color="black"]
  node7851 -> node7852 [ color="black"]
  node7823 -> node7825 [ color="black"]
  node7833 -> node7834 [ color="black"]
  node7828 -> node7829 [ color="black"]
  node7848 -> node7849 [label=<<font color="black">true</font>> color="black"]
  node7848 -> node7850 [label=<<font color="black">false</font>> color="black"]
  node7844 -> node7845 [ color="black"]
  node7831 -> node7832 [ color="black"]
  node7849 -> node7851 [ color="black"]
  node7845 -> node7846 [ color="black"]
  node7843 -> node7844 [ color="black"]
  node7847 -> node7848 [ color="black"]
  node7830 -> node7831 [ color="black"]
  node7836 -> node7837 [ color="black"]
  node7852 -> node7824 [ color="black"]
  node7840 -> node7841 [ color="black"]
  node7829 -> node7830 [label=<<font color="black">true</font>> color="black"]
  node7829 -> node7833 [label=<<font color="black">false</font>> color="black"]
  node7834 -> node7835 [ color="black"]
  node7846 -> node7824 [ color="black"]
  node7841 -> node7842 [ color="black"]
  node7826 -> node7827 [label=<<font color="black">true</font>> color="black"]
  node7826 -> node7834 [label=<<font color="black">false</font>> color="black"]
  node7850 -> node7851 [ color="black"]
  node7825 -> node7826 [ color="black"]
  node7839 -> node7840 [label=<<font color="black">true</font>> color="black"]
  node7839 -> node7841 [label=<<font color="black">false</font>> color="black"]
  node7827 -> node7828 [ color="black"]
  node7835 -> node7836 [ color="black"]
  node7842 -> node7843 [ color="black"]
}
