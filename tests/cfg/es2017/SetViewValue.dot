digraph {
  node15963 [shape=cds, label=<<font color="black">5:app __x3__ = (ToBoolean isLittleEndian)</font>> color="black" fillcolor="white" style=filled]
  node15971 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">12:let bufferIndex = (+ getIndex viewOffset)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15954 [shape=diamond, label=<<font color="black">(! (= __x0__ Object))</font>> color="black" fillcolor="white" style=filled]
  node15958 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">2:assert (! (= view.ViewedArrayBuffer absent))</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15962 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">4:let numberValue = [? __x2__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15959 [shape=cds, label=<<font color="black">3:app __x1__ = (ToIndex requestIndex)</font>> color="black" fillcolor="white" style=filled]
  node15972 [shape=cds, label=<<font color="black">13:app __x5__ = (SetValueInBuffer buffer bufferIndex type numberValue false &quot;Unordered&quot; isLittleEndian)</font>> color="black" fillcolor="white" style=filled]
  node15955 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15951 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node15960 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">3:let getIndex = [? __x1__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15956 [shape=diamond, label=<<font color="black">(= view.DataView absent)</font>> color="black" fillcolor="white" style=filled]
  node15969 [shape=diamond, label=<<font color="black">(&lt; viewSize (+ getIndex elementSize))</font>> color="black" fillcolor="white" style=filled]
  node15957 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15964 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">5:isLittleEndian = __x3__</td></tr>
      <tr><td align="left">6:let buffer = view.ViewedArrayBuffer</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15953 [shape=cds, label=<<font color="black">0:app __x0__ = (Type view)</font>> color="black" fillcolor="white" style=filled]
  node15970 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw RangeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15967 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15952 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node15961 [shape=cds, label=<<font color="black">4:app __x2__ = (ToNumber value)</font>> color="black" fillcolor="white" style=filled]
  node15968 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">8:let viewOffset = view.ByteOffset</td></tr>
      <tr><td align="left">9:let viewSize = view.ByteLength</td></tr>
      <tr><td align="left">10:??? &quot;Let id:{elementSize} be the Number value of the Element Size value specified in link:{unhandled: table-49} for Element Type id:{type} .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15966 [shape=diamond, label=<<font color="black">(= __x4__ true)</font>> color="black" fillcolor="white" style=filled]
  node15965 [shape=cds, label=<<font color="black">7:app __x4__ = (IsDetachedBuffer buffer)</font>> color="black" fillcolor="white" style=filled]
  node15973 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">13:return __x5__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15953 -> node15954 [ color="black"]
  node15963 -> node15964 [ color="black"]
  node15956 -> node15957 [label=<<font color="black">true</font>> color="black"]
  node15956 -> node15958 [label=<<font color="black">false</font>> color="black"]
  node15954 -> node15955 [label=<<font color="black">true</font>> color="black"]
  node15954 -> node15956 [label=<<font color="black">false</font>> color="black"]
  node15972 -> node15973 [ color="black"]
  node15968 -> node15969 [ color="black"]
  node15967 -> node15968 [ color="black"]
  node15962 -> node15963 [ color="black"]
  node15958 -> node15959 [ color="black"]
  node15955 -> node15956 [ color="black"]
  node15964 -> node15965 [ color="black"]
  node15971 -> node15972 [ color="black"]
  node15970 -> node15971 [ color="black"]
  node15966 -> node15967 [label=<<font color="black">true</font>> color="black"]
  node15966 -> node15968 [label=<<font color="black">false</font>> color="black"]
  node15969 -> node15970 [label=<<font color="black">true</font>> color="black"]
  node15969 -> node15971 [label=<<font color="black">false</font>> color="black"]
  node15959 -> node15960 [ color="black"]
  node15951 -> node15953 [ color="black"]
  node15965 -> node15966 [ color="black"]
  node15960 -> node15961 [ color="black"]
  node15973 -> node15952 [ color="black"]
  node15957 -> node15958 [ color="black"]
  node15961 -> node15962 [ color="black"]
}
