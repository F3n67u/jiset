digraph {
  node12500 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:??? &quot;If id:{A} does not contain exactly one character or id:{B} does not contain exactly one character , throw a value:{SyntaxError} exception .&quot;</td></tr>
      <tr><td align="left">1:let a = A[0i]</td></tr>
      <tr><td align="left">2:let b = B[0i]</td></tr>
      <tr><td align="left">3:let i = a</td></tr>
      <tr><td align="left">4:let j = b</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12499 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node12501 [shape=diamond, label=<<font color="black">(&lt; j i)</font>> color="black" fillcolor="white" style=filled]
  node12502 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw SyntaxError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12498 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node12503 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">6:??? &quot;Return the set containing all characters numbered id:{i} through id:{j} , inclusive .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12501 -> node12502 [label=<<font color="black">true</font>> color="black"]
  node12501 -> node12503 [label=<<font color="black">false</font>> color="black"]
  node12502 -> node12503 [ color="black"]
  node12503 -> node12499 [ color="black"]
  node12498 -> node12500 [ color="black"]
  node12500 -> node12501 [ color="black"]
}
