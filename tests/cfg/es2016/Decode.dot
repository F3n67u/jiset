digraph {
  node10244 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">5:let C = string[k]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10248 [shape=diamond, label=<<font color="black">(! (&lt; (+ k 2i) strLen))</font>> color="black" fillcolor="white" style=filled]
  node10251 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">47:let R = (+ R S)</td></tr>
      <tr><td align="left">48:k = (+ k 1i)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10238 [shape=cds, label=<<font color="black">app string = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node10243 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return R</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10247 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">9:let start = k</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10239 [shape=cds, label=<<font color="black">app reservedSet = (GetArgument argumentsList 1i)</font>> color="black" fillcolor="white" style=filled]
  node10242 [shape=diamond, label=<<font color="black">(= k strLen)</font>> color="black" fillcolor="white" style=filled]
  node10236 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node10240 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let strLen = string.length</td></tr>
      <tr><td align="left">1:let R = &quot;&quot;</td></tr>
      <tr><td align="left">2:let k = 0i</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10249 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw URIError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10246 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let S = C</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10241 [shape=diamond, label=<<font color="black">true</font>> color="black" fillcolor="white" style=filled]
  node10250 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">11:??? &quot;If the code units at index ( id:{k} + 1 ) and ( id:{k} + 2 ) within id:{string} do not represent hexadecimal digits , throw a value:{URIError} exception .&quot;</td></tr>
      <tr><td align="left">12:??? &quot;Let id:{B} be the 8 - bit value represented by the two hexadecimal digits at index ( id:{k} + 1 ) and ( id:{k} + 2 ) .&quot;</td></tr>
      <tr><td align="left">13:k = (+ k 2i)</td></tr>
      <tr><td align="left">14:??? &quot;If the most significant bit in id:{B} is 0 , then in:{} out:{}&quot;</td></tr>
      <tr><td align="left">20:??? &quot;Else the most significant bit in id:{B} is 1 , in:{} out:{}&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10237 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node10245 [shape=diamond, label=<<font color="black">(! (= C INTRINSIC_))</font>> color="black" fillcolor="white" style=filled]
  node10251 -> node10241 [ color="black"]
  node10249 -> node10250 [ color="black"]
  node10245 -> node10246 [label=<<font color="black">true</font>> color="black"]
  node10245 -> node10247 [label=<<font color="black">false</font>> color="black"]
  node10238 -> node10239 [ color="black"]
  node10240 -> node10241 [ color="black"]
  node10239 -> node10240 [ color="black"]
  node10236 -> node10238 [ color="black"]
  node10250 -> node10251 [ color="black"]
  node10246 -> node10251 [ color="black"]
  node10242 -> node10243 [label=<<font color="black">true</font>> color="black"]
  node10242 -> node10244 [label=<<font color="black">false</font>> color="black"]
  node10248 -> node10249 [label=<<font color="black">true</font>> color="black"]
  node10248 -> node10250 [label=<<font color="black">false</font>> color="black"]
  node10243 -> node10244 [ color="black"]
  node10244 -> node10245 [ color="black"]
  node10241 -> node10242 [label=<<font color="black">true</font>> color="black"]
  node10241 -> node10237 [label=<<font color="black">false</font>> color="black"]
  node10247 -> node10248 [ color="black"]
}
