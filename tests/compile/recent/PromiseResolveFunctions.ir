{
  [0] let F = GLOBAL_context.Function
  [2] let promise = F.Promise
  [3] let alreadyResolved = F.AlreadyResolved
  [4] if (= alreadyResolved.Value true) {
    app __x0__ = (WrapCompletion undefined)
    return __x0__
  } else [1] {}
  [5] alreadyResolved.Value = true
  [6] app __x1__ = (SameValue resolution promise)
  [6] if (= __x1__ true) {
    [7] let selfResolutionError = (new OrdinaryObject("Prototype" -> INTRINSIC_TypeError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap())))
    [8] app __x2__ = (RejectPromise promise selfResolutionError)
    [8] app __x3__ = (WrapCompletion __x2__)
    [8] return __x3__
  } else [1] {}
  [9] app __x4__ = (Type resolution)
  [9] if (! (= __x4__ Object)) {
    [10] app __x5__ = (FulfillPromise promise resolution)
    [10] app __x6__ = (WrapCompletion __x5__)
    [10] return __x6__
  } else [1] {}
  [11] app __x7__ = (Get resolution "then")
  [11] let then = __x7__
  [12] app __x8__ = (IsAbruptCompletion then)
  [12] if __x8__ {
    [13] app __x9__ = (RejectPromise promise then.Value)
    [13] app __x10__ = (WrapCompletion __x9__)
    [13] return __x10__
  } else [1] {}
  [14] let thenAction = then.Value
  [15] app __x11__ = (IsCallable thenAction)
  [15] if (= __x11__ false) {
    [16] app __x12__ = (FulfillPromise promise resolution)
    [16] app __x13__ = (WrapCompletion __x12__)
    [16] return __x13__
  } else [1] {}
  [17] app __x14__ = (HostMakeJobCallback thenAction)
  [17] let thenJobCallback = __x14__
  [18] app __x15__ = (NewPromiseResolveThenableJob promise resolution thenJobCallback)
  [18] let job = __x15__
  [19] app __x16__ = (HostEnqueuePromiseJob job.Job job.Realm)
  [19] __x16__
  [20] app __x17__ = (WrapCompletion undefined)
  [20] return __x17__
}