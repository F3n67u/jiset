{
  [0] assert (= (typeof env) "GlobalEnvironmentRecord")
  [1] access __x0__ = (script "LexicallyDeclaredNames")
  [1] let lexNames = __x0__
  [2] access __x1__ = (script "VarDeclaredNames")
  [2] let varNames = __x1__
  [3] let __x2__ = lexNames
  [3] let __x3__ = 0i
  [3] while (< __x3__ __x2__.length) {
    let name = __x2__[__x3__]
    [4] app __x4__ = (env.HasVarDeclaration env name)
    [4] if (= __x4__ true) {
      app __x5__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_SyntaxError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
      return __x5__
    } else [36] {}
    [5] app __x6__ = (env.HasLexicalDeclaration env name)
    [5] if (= __x6__ true) {
      app __x7__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_SyntaxError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
      return __x7__
    } else [36] {}
    [6] app __x8__ = (env.HasRestrictedGlobalProperty env name)
    [6] if (is-completion __x8__) if (= __x8__.Type CONST_normal) __x8__ = __x8__.Value else return __x8__ else [36] {}
    [6] let hasRestrictedGlobal = __x8__
    [7] if (= hasRestrictedGlobal true) {
      app __x9__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_SyntaxError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
      return __x9__
    } else [36] {}
    __x3__ = (+ __x3__ 1i)
  }
  [8] let __x10__ = varNames
  [8] let __x11__ = 0i
  [8] while (< __x11__ __x10__.length) {
    let name = __x10__[__x11__]
    [9] app __x12__ = (env.HasLexicalDeclaration env name)
    [9] if (= __x12__ true) {
      app __x13__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_SyntaxError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
      return __x13__
    } else [36] {}
    __x11__ = (+ __x11__ 1i)
  }
  [10] access __x14__ = (script "VarScopedDeclarations")
  [10] let varDeclarations = __x14__
  [11] let functionsToInitialize = (new [])
  [12] let declaredFunctionNames = (new [])
  [13] let __x15__ = varDeclarations
  [13] let __x16__ = __x15__.length
  [13] while (< 0i __x16__) {
    __x16__ = (- __x16__ 1i)
    let d = __x15__[__x16__]
    [14] if (! (|| (|| (is-instance-of d VariableDeclaration) (is-instance-of d ForBinding)) (is-instance-of d BindingIdentifier))) {
      [15] assert (|| (|| (|| (is-instance-of d FunctionDeclaration) (is-instance-of d GeneratorDeclaration)) (is-instance-of d AsyncFunctionDeclaration)) (is-instance-of d AsyncGeneratorDeclaration))
      [17] access __x17__ = (d "BoundNames")
      [17] let fn = __x17__[0i]
      [18] if (! (contains declaredFunctionNames fn)) {
        [19] app __x18__ = (env.CanDeclareGlobalFunction env fn)
        [19] if (is-completion __x18__) if (= __x18__.Type CONST_normal) __x18__ = __x18__.Value else return __x18__ else [36] {}
        [19] let fnDefinable = __x18__
        [20] if (= fnDefinable false) {
          app __x19__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_TypeError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
          return __x19__
        } else [36] {}
        [21] append fn -> declaredFunctionNames
        [22] prepend d -> functionsToInitialize
      } else [36] {}
    } else [36] {}
  }
  [23] let declaredVarNames = (new [])
  [24] let __x20__ = varDeclarations
  [24] let __x21__ = 0i
  [24] while (< __x21__ __x20__.length) {
    let d = __x20__[__x21__]
    [25] if (|| (|| (is-instance-of d VariableDeclaration) (is-instance-of d ForBinding)) (is-instance-of d BindingIdentifier)) {
      [26] access __x22__ = (d "BoundNames")
      [26] let __x23__ = __x22__
      [26] let __x24__ = 0i
      [26] while (< __x24__ __x23__.length) {
        let vn = __x23__[__x24__]
        [27] if (! (contains declaredFunctionNames vn)) {
          [28] app __x25__ = (env.CanDeclareGlobalVar env vn)
          [28] if (is-completion __x25__) if (= __x25__.Type CONST_normal) __x25__ = __x25__.Value else return __x25__ else [36] {}
          [28] let vnDefinable = __x25__
          [29] if (= vnDefinable false) {
            app __x26__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_TypeError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
            return __x26__
          } else [36] {}
          [30] if (! (contains declaredVarNames vn)) append vn -> declaredVarNames else [36] {}
        } else [36] {}
        __x24__ = (+ __x24__ 1i)
      }
    } else [36] {}
    __x21__ = (+ __x21__ 1i)
  }
  [34] access __x27__ = (script "LexicallyScopedDeclarations")
  [34] let lexDeclarations = __x27__
  [35] let __x28__ = lexDeclarations
  [35] let __x29__ = 0i
  [35] while (< __x29__ __x28__.length) {
    let d = __x28__[__x29__]
    [37] access __x30__ = (d "BoundNames")
    [37] let __x31__ = __x30__
    [37] let __x32__ = 0i
    [37] while (< __x32__ __x31__.length) {
      let dn = __x31__[__x32__]
      [40] access __x33__ = (d "IsConstantDeclaration")
      [40] if (= __x33__ true) {
        [39] app __x34__ = (env.CreateImmutableBinding env dn true)
        [39] if (is-completion __x34__) if (= __x34__.Type CONST_normal) __x34__ = __x34__.Value else return __x34__ else [36] {}
        [39] __x34__
      } else {
        [41] app __x35__ = (env.CreateMutableBinding env dn false)
        [41] if (is-completion __x35__) if (= __x35__.Type CONST_normal) __x35__ = __x35__.Value else return __x35__ else [36] {}
        [41] __x35__
      }
      __x32__ = (+ __x32__ 1i)
    }
    __x29__ = (+ __x29__ 1i)
  }
  [42] let __x36__ = functionsToInitialize
  [42] let __x37__ = 0i
  [42] while (< __x37__ __x36__.length) {
    let f = __x36__[__x37__]
    [43] access __x38__ = (f "BoundNames")
    [43] let fn = __x38__[0i]
    [44] access __x39__ = (f "InstantiateFunctionObject")
    [44] app __x40__ = (__x39__ env)
    [44] let fo = __x40__
    [45] app __x41__ = (env.CreateGlobalFunctionBinding env fn fo false)
    [45] if (is-completion __x41__) if (= __x41__.Type CONST_normal) __x41__ = __x41__.Value else return __x41__ else [36] {}
    [45] __x41__
    __x37__ = (+ __x37__ 1i)
  }
  [46] let __x42__ = declaredVarNames
  [46] let __x43__ = 0i
  [46] while (< __x43__ __x42__.length) {
    let vn = __x42__[__x43__]
    [47] app __x44__ = (env.CreateGlobalVarBinding env vn false)
    [47] if (is-completion __x44__) if (= __x44__.Type CONST_normal) __x44__ = __x44__.Value else return __x44__ else [36] {}
    [47] __x44__
    __x43__ = (+ __x43__ 1i)
  }
  [48] app __x45__ = (NormalCompletion CONST_empty)
  [48] app __x46__ = (WrapCompletion __x45__)
  [48] return __x46__
}