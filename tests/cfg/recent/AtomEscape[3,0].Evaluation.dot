digraph {
  node15104 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">3:return [! __x0__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15103 [shape=cds, label=<<font color="black">3:app __x0__ = (BackreferenceMatcher parenIndex direction)</font>> color="black" fillcolor="white" style=filled]
  node15101 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node15100 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node15102 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:??? &quot;Search the enclosing nt:{Pattern} for an instance of a nt:{GroupSpecifier} containing a nt:{RegExpIdentifierName} which has a StringValue equal to the StringValue of the nt:{RegExpIdentifierName} contained in nt:{GroupName} .&quot;</td></tr>
      <tr><td align="left">2:??? &quot;Let id:{parenIndex} be the number of left - capturing parentheses in the entire regular expression that occur to the left of the located nt:{GroupSpecifier} . This is the total number of grammar:{Atom4, [GroupSpecifier, Disjunction]} Parse Nodes prior to or enclosing the located nt:{GroupSpecifier} , including its immediately enclosing nt:{Atom} .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15100 -> node15102 [ color="black"]
  node15102 -> node15103 [ color="black"]
  node15103 -> node15104 [ color="black"]
  node15104 -> node15101 [ color="black"]
}
