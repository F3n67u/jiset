digraph {
  node16808 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node16816 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">2:return [? __x1__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16809 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node16815 [shape=cds, label=<<font color="black">2:app __x1__ = (AllocateSharedArrayBuffer NewTarget byteLength)</font>> color="black" fillcolor="white" style=filled]
  node16812 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16811 [shape=diamond, label=<<font color="black">(= NewTarget undefined)</font>> color="black" fillcolor="white" style=filled]
  node16814 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">1:let byteLength = [? __x0__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16813 [shape=cds, label=<<font color="black">1:app __x0__ = (ToIndex length)</font>> color="black" fillcolor="white" style=filled]
  node16810 [shape=cds, label=<<font color="black">app length = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node16813 -> node16814 [ color="black"]
  node16815 -> node16816 [ color="black"]
  node16814 -> node16815 [ color="black"]
  node16810 -> node16811 [ color="black"]
  node16808 -> node16810 [ color="black"]
  node16811 -> node16812 [label=<<font color="black">true</font>> color="black"]
  node16811 -> node16813 [label=<<font color="black">false</font>> color="black"]
  node16816 -> node16809 [ color="black"]
  node16812 -> node16813 [ color="black"]
}
