{
  access __x0__ = (GLOBAL_context "LexicalEnvironment")
  let env = __x0__
  app __x1__ = (NewDeclarativeEnvironment env)
  let classScope = __x1__
  if (! (= classBinding undefined)) {
    app __x2__ = (classScope.CreateImmutableBinding classScope classBinding true)
    __x2__
  } else {}
  if (= ClassHeritage absent) {
    let protoParent = INTRINSIC_Object_prototype
    let constructorParent = INTRINSIC_Function_prototype
  } else {
    GLOBAL_context.LexicalEnvironment = classScope
    access __x3__ = (ClassHeritage "Evaluation")
    let superclassRef = __x3__
    GLOBAL_context.LexicalEnvironment = env
    app __x4__ = (GetValue superclassRef)
    if (is-completion __x4__) if (= __x4__.Type CONST_normal) __x4__ = __x4__.Value else return __x4__ else {}
    let superclass = __x4__
    if (= superclass null) {
      let protoParent = null
      let constructorParent = INTRINSIC_Function_prototype
    } else {
      app __x5__ = (IsConstructor superclass)
      if (= __x5__ false) throw INTRINSIC_TypeError else {
        app __x6__ = (Get superclass "prototype")
        if (is-completion __x6__) if (= __x6__.Type CONST_normal) __x6__ = __x6__.Value else return __x6__ else {}
        let protoParent = __x6__
        app __x7__ = (Type protoParent)
        if (! (|| (= __x7__ Object) (= __x7__ Null))) throw INTRINSIC_TypeError else {}
        let constructorParent = superclass
      }
    }
  }
  app __x8__ = (OrdinaryObjectCreate protoParent)
  if (is-completion __x8__) if (= __x8__.Type CONST_normal) __x8__ = __x8__.Value else return __x8__ else {}
  let proto = __x8__
  if (= ClassBody absent) let constructor = CONST_empty else {
    access __x9__ = (ClassBody "ConstructorMethod")
    let constructor = __x9__
  }
  if (= constructor CONST_empty) {
    if (! (= ClassHeritage absent)) ??? "Let id:{constructorText} be the source text in:{} out:{}" else ??? "Let id:{constructorText} be the source text in:{} out:{}"
    ??? "Set id:{constructor} to ParseText ( id:{constructorText} , | MethodDefinition [ ~ Yield , ~ Await ] | ) ."
  } else {}
  GLOBAL_context.LexicalEnvironment = classScope
  access __x10__ = (constructor "DefineMethod")
  app __x11__ = (__x10__ proto constructorParent)
  if (is-completion __x11__) if (= __x11__.Type CONST_normal) __x11__ = __x11__.Value else return __x11__ else {}
  let constructorInfo = __x11__
  let F = constructorInfo.Closure
  app __x12__ = (SetFunctionName F className)
  __x12__
  app __x13__ = (MakeConstructor F false proto)
  __x13__
  if (! (= ClassHeritage absent)) F.ConstructorKind = CONST_derived else {}
  app __x14__ = (MakeClassConstructor F)
  __x14__
  app __x15__ = (CreateMethodProperty proto "constructor" F)
  __x15__
  if (= ClassBody absent) let methods = (new []) else {
    access __x16__ = (ClassBody "NonConstructorMethodDefinitions")
    let methods = __x16__
  }
  let __x17__ = methods
  let __x18__ = 0i
  while (< __x18__ __x17__.length) {
    let m = __x17__[__x18__]
    access __x19__ = (m "IsStatic")
    if (= __x19__ false) {
      access __x20__ = (m "PropertyDefinitionEvaluation")
      app __x21__ = (__x20__ proto false)
      let status = __x21__
    } else {
      access __x22__ = (m "PropertyDefinitionEvaluation")
      app __x23__ = (__x22__ F false)
      let status = __x23__
    }
    app __x24__ = (IsAbruptCompletion status)
    if __x24__ {
      GLOBAL_context.LexicalEnvironment = env
      app __x25__ = (Completion status)
      app __x26__ = (WrapCompletion __x25__)
      return __x26__
    } else {}
    __x18__ = (+ __x18__ 1i)
  }
  GLOBAL_context.LexicalEnvironment = env
  if (! (= classBinding undefined)) {
    app __x27__ = (classScope.InitializeBinding classScope classBinding F)
    __x27__
  } else {}
  app __x28__ = (WrapCompletion F)
  return __x28__
}