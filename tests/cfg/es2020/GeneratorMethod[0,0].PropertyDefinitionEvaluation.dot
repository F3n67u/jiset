digraph {
  node9324 [shape=cds, label=<<font color="black">3:app __x1__ = (OrdinaryFunctionCreate INTRINSIC_Generator UniqueFormalParameters GeneratorBody CONST_nonDASHlexicalDASHthis scope)</font>> color="black" fillcolor="white" style=filled]
  node9332 [shape=cds, label=<<font color="black">7:app __x5__ = (SetFunctionName closure propKey)</font>> color="black" fillcolor="white" style=filled]
  node9330 [shape=cds, label=<<font color="black">6:app __x4__ = (DefinePropertyOrThrow closure &quot;prototype&quot; (new PropertyDescriptor(&quot;Value&quot; -&gt; prototype, &quot;Writable&quot; -&gt; true, &quot;Enumerable&quot; -&gt; false, &quot;Configurable&quot; -&gt; false)))</font>> color="black" fillcolor="white" style=filled]
  node9323 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let propKey = __x0__</td></tr>
      <tr><td align="left">1:[? propKey]</td></tr>
      <tr><td align="left">2:let scope = GLOBAL_context.LexicalEnvironment</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node9320 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node9322 [shape=cds, label=<<font color="black">0:access __x0__ = (PropertyName &quot;Evaluation&quot;)</font>> color="black" fillcolor="white" style=filled]
  node9327 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">4:__x2__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node9334 [shape=cds, label=<<font color="black">10:app __x6__ = (DefinePropertyOrThrow object propKey desc)</font>> color="black" fillcolor="white" style=filled]
  node9326 [shape=cds, label=<<font color="black">4:app __x2__ = (MakeMethod closure object)</font>> color="black" fillcolor="white" style=filled]
  node9321 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node9328 [shape=cds, label=<<font color="black">5:app __x3__ = (OrdinaryObjectCreate INTRINSIC_Generator_prototype)</font>> color="black" fillcolor="white" style=filled]
  node9333 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">7:__x5__</td></tr>
      <tr><td align="left">8:closure.SourceText = (get-syntax GeneratorMethod)</td></tr>
      <tr><td align="left">9:let desc = (new PropertyDescriptor(&quot;Value&quot; -&gt; closure, &quot;Writable&quot; -&gt; true, &quot;Enumerable&quot; -&gt; enumerable, &quot;Configurable&quot; -&gt; true))</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node9329 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">5:let prototype = __x3__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node9331 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">6:__x4__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node9325 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">3:let closure = __x1__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node9335 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">10:return [? __x6__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node9334 -> node9335 [ color="black"]
  node9329 -> node9330 [ color="black"]
  node9323 -> node9324 [ color="black"]
  node9330 -> node9331 [ color="black"]
  node9335 -> node9321 [ color="black"]
  node9325 -> node9326 [ color="black"]
  node9328 -> node9329 [ color="black"]
  node9332 -> node9333 [ color="black"]
  node9320 -> node9322 [ color="black"]
  node9333 -> node9334 [ color="black"]
  node9331 -> node9332 [ color="black"]
  node9324 -> node9325 [ color="black"]
  node9322 -> node9323 [ color="black"]
  node9327 -> node9328 [ color="black"]
  node9326 -> node9327 [ color="black"]
}
