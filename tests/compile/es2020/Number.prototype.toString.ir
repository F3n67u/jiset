{
  app radix = (GetArgument argumentsList 0i)
  [0] app __x0__ = (thisNumberValue this)
  [0] if (is-completion __x0__) if (= __x0__.Type CONST_normal) __x0__ = __x0__.Value else return __x0__ else [2] {}
  [0] let x = __x0__
  [2] if (= radix undefined) let radixNumber = 10i else {
    app __x1__ = (ToInteger radix)
    if (is-completion __x1__) if (= __x1__.Type CONST_normal) __x1__ = __x1__.Value else return __x1__ else [2] {}
    let radixNumber = __x1__
  }
  [3] if (|| (< radixNumber 2i) (< 36i radixNumber)) {
    app __x2__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_RangeError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
    return __x2__
  } else [2] {}
  [4] if (== radixNumber 10i) {
    app __x3__ = (ToString x)
    if (is-completion __x3__) if (= __x3__.Type CONST_normal) __x3__ = __x3__.Value else return __x3__ else [2] {}
    app __x4__ = (WrapCompletion __x3__)
    return __x4__
  } else [2] {}
  [5] ??? "Return the String representation of this Number value using the radix specified by id:{radixNumber} . Letters code:{a} - code:{z} are used for digits with values 10 through 35 . The precise algorithm is implementation - dependent , however the algorithm should be a generalization of that specified in link:{} ."
}