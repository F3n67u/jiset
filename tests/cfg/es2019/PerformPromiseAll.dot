digraph {
  node0 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node5 [shape=cds, label=<<font color="black">0:app __x0__ = (IsConstructor constructor)</font>> color="black" fillcolor="white" style=filled]
  node10 [shape=cds, label=<<font color="black">7:app __x2__ = (IsAbruptCompletion next)</font>> color="black" fillcolor="white" style=filled]
  node14 [shape=diamond, label=<<font color="black">(= next false)</font>> color="black" fillcolor="white" style=filled]
  node1 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node6 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:assert (= __x0__ true)</td></tr>
      <tr><td align="left">1:assert (= (typeof resultCapability) &quot;PromiseCapabilityRecord&quot;)</td></tr>
      <tr><td align="left">2:let values = (new [])</td></tr>
      <tr><td align="left">3:let remainingElementsCount = (new Record(&quot;Value&quot; -&gt; 1i))</td></tr>
      <tr><td align="left">4:let index = 0i</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node9 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">6:let next = __x1__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node13 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">8:[? next]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node2 [shape=cds, label=<<font color="black">app iteratorRecord = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node12 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">iteratorRecord.Done = true</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node7 [shape=diamond, label=<<font color="black">true</font>> color="black" fillcolor="white" style=filled]
  node3 [shape=cds, label=<<font color="black">app constructor = (GetArgument argumentsList 1i)</font>> color="black" fillcolor="white" style=filled]
  node18 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">13:let valuesArray = __x3__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11 [shape=diamond, label=<<font color="black">__x2__</font>> color="black" fillcolor="white" style=filled]
  node8 [shape=cds, label=<<font color="black">6:app __x1__ = (IteratorStep iteratorRecord)</font>> color="black" fillcolor="white" style=filled]
  node4 [shape=cds, label=<<font color="black">app resultCapability = (GetArgument argumentsList 2i)</font>> color="black" fillcolor="white" style=filled]
  node15 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">10:iteratorRecord.Done = true</td></tr>
      <tr><td align="left">11:remainingElementsCount.Value = (- remainingElementsCount.Value 1i)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node24 [shape=cds, label=<<font color="black">17:app __x6__ = (IsAbruptCompletion nextValue)</font>> color="black" fillcolor="white" style=filled]
  node25 [shape=diamond, label=<<font color="black">__x6__</font>> color="black" fillcolor="white" style=filled]
  node20 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">14:[? __x4__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node29 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">20:let nextPromise = [? __x7__]</td></tr>
      <tr><td align="left">21:??? &quot;Let id:{steps} be the algorithm steps defined in link:{unhandled: sec-promise.all-resolve-element-functions} .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node28 [shape=cds, label=<<font color="black">20:app __x7__ = (Invoke constructor &quot;resolve&quot; (new [nextValue]))</font>> color="black" fillcolor="white" style=filled]
  node21 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">15:return resultCapability.Promise</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node33 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">29:[? __x9__]</td></tr>
      <tr><td align="left">30:index = (+ index 1i)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node32 [shape=cds, label=<<font color="black">29:app __x9__ = (Invoke nextPromise &quot;then&quot; (new [resolveElement, resultCapability.Reject]))</font>> color="black" fillcolor="white" style=filled]
  node17 [shape=cds, label=<<font color="black">13:app __x3__ = (CreateArrayFromList values)</font>> color="black" fillcolor="white" style=filled]
  node22 [shape=cds, label=<<font color="black">16:app __x5__ = (IteratorValue next)</font>> color="black" fillcolor="white" style=filled]
  node27 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">18:[? nextValue]</td></tr>
      <tr><td align="left">19:append undefined -&gt; values</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16 [shape=diamond, label=<<font color="black">(= remainingElementsCount.Value 0i)</font>> color="black" fillcolor="white" style=filled]
  node31 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">22:let resolveElement = __x8__</td></tr>
      <tr><td align="left">23:resolveElement.AlreadyCalled = (new Record(&quot;Value&quot; -&gt; false))</td></tr>
      <tr><td align="left">24:resolveElement.Index = index</td></tr>
      <tr><td align="left">25:resolveElement.Values = values</td></tr>
      <tr><td align="left">26:resolveElement.Capability = resultCapability</td></tr>
      <tr><td align="left">27:resolveElement.RemainingElements = remainingElementsCount</td></tr>
      <tr><td align="left">28:remainingElementsCount.Value = (+ remainingElementsCount.Value 1i)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node26 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">iteratorRecord.Done = true</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node23 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">16:let nextValue = __x5__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node30 [shape=cds, label=<<font color="black">22:app __x8__ = (CreateBuiltinFunction steps (new [&quot;AlreadyCalled&quot;, &quot;Index&quot;, &quot;Values&quot;, &quot;Capability&quot;, &quot;RemainingElements&quot;]))</font>> color="black" fillcolor="white" style=filled]
  node19 [shape=cds, label=<<font color="black">14:app __x4__ = (Call resultCapability.Resolve undefined (new [valuesArray]))</font>> color="black" fillcolor="white" style=filled]
  node12 -> node13 [ color="black"]
  node0 -> node2 [ color="black"]
  node9 -> node10 [ color="black"]
  node27 -> node28 [ color="black"]
  node30 -> node31 [ color="black"]
  node26 -> node27 [ color="black"]
  node10 -> node11 [ color="black"]
  node4 -> node5 [ color="black"]
  node14 -> node15 [label=<<font color="black">true</font>> color="black"]
  node14 -> node22 [label=<<font color="black">false</font>> color="black"]
  node7 -> node8 [label=<<font color="black">true</font>> color="black"]
  node7 -> node1 [label=<<font color="black">false</font>> color="black"]
  node5 -> node6 [ color="black"]
  node3 -> node4 [ color="black"]
  node28 -> node29 [ color="black"]
  node29 -> node30 [ color="black"]
  node33 -> node7 [ color="black"]
  node16 -> node17 [label=<<font color="black">true</font>> color="black"]
  node16 -> node21 [label=<<font color="black">false</font>> color="black"]
  node18 -> node19 [ color="black"]
  node2 -> node3 [ color="black"]
  node15 -> node16 [ color="black"]
  node11 -> node12 [label=<<font color="black">true</font>> color="black"]
  node11 -> node13 [label=<<font color="black">false</font>> color="black"]
  node25 -> node26 [label=<<font color="black">true</font>> color="black"]
  node25 -> node27 [label=<<font color="black">false</font>> color="black"]
  node19 -> node20 [ color="black"]
  node13 -> node14 [ color="black"]
  node22 -> node23 [ color="black"]
  node6 -> node7 [ color="black"]
  node23 -> node24 [ color="black"]
  node31 -> node32 [ color="black"]
  node8 -> node9 [ color="black"]
  node21 -> node22 [ color="black"]
  node20 -> node21 [ color="black"]
  node24 -> node25 [ color="black"]
  node32 -> node33 [ color="black"]
  node17 -> node18 [ color="black"]
}
