digraph {
  node14871 [shape=diamond, label=<<font color="black">(|| (= iterable undefined) (= iterable null))</font>> color="black" fillcolor="white" style=filled]
  node14864 [shape=cds, label=<<font color="black">app iterable = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node14881 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return set</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14874 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">6:let adder = [? __x1__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14879 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">8:let iter = [? __x3__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14870 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let iterable = undefined</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14866 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14875 [shape=cds, label=<<font color="black">7:app __x2__ = (IsCallable adder)</font>> color="black" fillcolor="white" style=filled]
  node14886 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return set</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14869 [shape=diamond, label=<<font color="black">(= iterable absent)</font>> color="black" fillcolor="white" style=filled]
  node14892 [shape=diamond, label=<<font color="black">__x7__</font>> color="black" fillcolor="white" style=filled]
  node14887 [shape=cds, label=<<font color="black">13:app __x5__ = (IteratorValue next)</font>> color="black" fillcolor="white" style=filled]
  node14883 [shape=cds, label=<<font color="black">11:app __x4__ = (IteratorStep iter)</font>> color="black" fillcolor="white" style=filled]
  node14868 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">1:let set = [? __x0__]</td></tr>
      <tr><td align="left">2:set.WeakSetData = (new [])</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14872 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let iter = undefined</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14891 [shape=cds, label=<<font color="black">15:app __x7__ = (IsAbruptCompletion status)</font>> color="black" fillcolor="white" style=filled]
  node14888 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">13:let nextValue = [? __x5__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14873 [shape=cds, label=<<font color="black">6:app __x1__ = (Get set &quot;add&quot;)</font>> color="black" fillcolor="white" style=filled]
  node14885 [shape=diamond, label=<<font color="black">(= next false)</font>> color="black" fillcolor="white" style=filled]
  node14890 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">14:let status = __x6__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14880 [shape=diamond, label=<<font color="black">(= iter undefined)</font>> color="black" fillcolor="white" style=filled]
  node14867 [shape=cds, label=<<font color="black">1:app __x0__ = (OrdinaryCreateFromConstructor NewTarget INTRINSIC_WeakSetPrototype (new [&quot;WeakSetData&quot;]))</font>> color="black" fillcolor="white" style=filled]
  node14889 [shape=cds, label=<<font color="black">14:app __x6__ = (Call adder set (new [nextValue]))</font>> color="black" fillcolor="white" style=filled]
  node14894 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return [? __x8__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14893 [shape=cds, label=<<font color="black">app __x8__ = (IteratorClose iter status)</font>> color="black" fillcolor="white" style=filled]
  node14882 [shape=diamond, label=<<font color="black">true</font>> color="black" fillcolor="white" style=filled]
  node14878 [shape=cds, label=<<font color="black">8:app __x3__ = (GetIterator iterable)</font>> color="black" fillcolor="white" style=filled]
  node14865 [shape=diamond, label=<<font color="black">(= NewTarget undefined)</font>> color="black" fillcolor="white" style=filled]
  node14876 [shape=diamond, label=<<font color="black">(= __x2__ false)</font>> color="black" fillcolor="white" style=filled]
  node14877 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14862 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node14863 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node14884 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">11:let next = [? __x4__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14892 -> node14893 [label=<<font color="black">true</font>> color="black"]
  node14892 -> node14882 [label=<<font color="black">false</font>> color="black"]
  node14872 -> node14880 [ color="black"]
  node14894 -> node14882 [ color="black"]
  node14878 -> node14879 [ color="black"]
  node14866 -> node14867 [ color="black"]
  node14877 -> node14878 [ color="black"]
  node14891 -> node14892 [ color="black"]
  node14871 -> node14872 [label=<<font color="black">true</font>> color="black"]
  node14871 -> node14873 [label=<<font color="black">false</font>> color="black"]
  node14888 -> node14889 [ color="black"]
  node14883 -> node14884 [ color="black"]
  node14880 -> node14881 [label=<<font color="black">true</font>> color="black"]
  node14880 -> node14882 [label=<<font color="black">false</font>> color="black"]
  node14886 -> node14887 [ color="black"]
  node14870 -> node14871 [ color="black"]
  node14885 -> node14886 [label=<<font color="black">true</font>> color="black"]
  node14885 -> node14887 [label=<<font color="black">false</font>> color="black"]
  node14887 -> node14888 [ color="black"]
  node14882 -> node14883 [label=<<font color="black">true</font>> color="black"]
  node14882 -> node14863 [label=<<font color="black">false</font>> color="black"]
  node14879 -> node14880 [ color="black"]
  node14867 -> node14868 [ color="black"]
  node14865 -> node14866 [label=<<font color="black">true</font>> color="black"]
  node14865 -> node14867 [label=<<font color="black">false</font>> color="black"]
  node14884 -> node14885 [ color="black"]
  node14875 -> node14876 [ color="black"]
  node14881 -> node14882 [ color="black"]
  node14876 -> node14877 [label=<<font color="black">true</font>> color="black"]
  node14876 -> node14878 [label=<<font color="black">false</font>> color="black"]
  node14869 -> node14870 [label=<<font color="black">true</font>> color="black"]
  node14869 -> node14871 [label=<<font color="black">false</font>> color="black"]
  node14893 -> node14894 [ color="black"]
  node14862 -> node14864 [ color="black"]
  node14890 -> node14891 [ color="black"]
  node14868 -> node14869 [ color="black"]
  node14874 -> node14875 [ color="black"]
  node14864 -> node14865 [ color="black"]
  node14873 -> node14874 [ color="black"]
  node14889 -> node14890 [ color="black"]
}
