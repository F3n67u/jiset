{
  let C = this
  app __x0__ = (NewPromiseCapability C)
  if (is-completion __x0__) if (= __x0__.Type CONST_normal) __x0__ = __x0__.Value else return __x0__ else {}
  let promiseCapability = __x0__
  app __x1__ = (GetPromiseResolve C)
  let promiseResolve = __x1__
  if (is-completion promiseResolve) if (= promiseResolve.Type CONST_normal) promiseResolve = promiseResolve.Value else {
    app __x2__ = (Call promiseCapability.Reject undefined (new [promiseResolve.Value]))
    if (&& (is-completion __x2__) (! (= __x2__.Type CONST_normal))) return __x2__ else {}
    return promiseCapability.Promise
  } else {}
  promiseResolve
  app __x3__ = (GetIterator iterable)
  let iteratorRecord = __x3__
  if (is-completion iteratorRecord) if (= iteratorRecord.Type CONST_normal) iteratorRecord = iteratorRecord.Value else {
    app __x4__ = (Call promiseCapability.Reject undefined (new [iteratorRecord.Value]))
    if (&& (is-completion __x4__) (! (= __x4__.Type CONST_normal))) return __x4__ else {}
    return promiseCapability.Promise
  } else {}
  iteratorRecord
  app __x5__ = (PerformPromiseRace iteratorRecord C promiseCapability promiseResolve)
  let result = __x5__
  app __x6__ = (IsAbruptCompletion result)
  if __x6__ {
    if (= iteratorRecord.Done false) {
      app __x7__ = (IteratorClose iteratorRecord result)
      result = __x7__
    } else {}
    if (is-completion result) if (= result.Type CONST_normal) result = result.Value else {
      app __x8__ = (Call promiseCapability.Reject undefined (new [result.Value]))
      if (&& (is-completion __x8__) (! (= __x8__.Type CONST_normal))) return __x8__ else {}
      return promiseCapability.Promise
    } else {}
    result
  } else {}
  app __x9__ = (Completion result)
  app __x10__ = (WrapCompletion __x9__)
  return __x10__
}