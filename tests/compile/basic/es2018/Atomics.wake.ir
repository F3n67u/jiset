{
  app __x0__ = (ValidateSharedIntegerTypedArray typedArray true)
  let buffer = [? __x0__]
  app __x1__ = (ValidateAtomicAccess typedArray index)
  let i = [? __x1__]
  if (= count undefined) let c = Infinity else {
    app __x2__ = (ToInteger count)
    let intCount = [? __x2__]
    app __x3__ = (max intCount 0i)
    let c = __x3__
  }
  let block = buffer.ArrayBufferData
  let offset = typedArray.ByteOffset
  let indexedPosition = (+ (* i 4i) offset)
  app __x4__ = (GetWaiterList block indexedPosition)
  let WL = __x4__
  let n = 0i
  app __x5__ = (EnterCriticalSection WL)
  __x5__
  app __x6__ = (RemoveWaiters WL c)
  let S = __x6__
  while (< 0i S.length) {
    let W = S[0i]
    (pop S 0i)
    app __x7__ = (WakeWaiter WL W)
    __x7__
    append 1i -> n
  }
  app __x8__ = (LeaveCriticalSection WL)
  __x8__
  return n
}