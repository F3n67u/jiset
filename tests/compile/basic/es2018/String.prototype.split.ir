{
  app __x0__ = (RequireObjectCoercible this)
  let O = [? __x0__]
  if (! (|| (= separator undefined) (= separator null))) {
    app __x1__ = (GetMethod separator SYMBOL_split)
    let splitter = [? __x1__]
    if (! (= splitter undefined)) {
      app __x2__ = (Call splitter separator (new [O, limit]))
      return [? __x2__]
    } else {}
  } else {}
  app __x3__ = (ToString O)
  let S = [? __x3__]
  app __x4__ = (ArrayCreate 0i)
  let A = [! __x4__]
  let lengthA = 0i
  if (= limit undefined) let lim = (- (** 2.0 32i) 1i) else {
    app __x5__ = (ToUint32 limit)
    let lim = [? __x5__]
  }
  let s = S.length
  let p = 0i
  app __x6__ = (ToString separator)
  let R = [? __x6__]
  if (== lim 0i) return A else {}
  if (= separator undefined) {
    app __x7__ = (CreateDataProperty A "0" S)
    [! __x7__]
    return A
  } else {}
  if (== s 0i) {
    app __x8__ = (SplitMatch S 0i R)
    let z = __x8__
    if (! (= z false)) return A else {}
    app __x9__ = (CreateDataProperty A "0" S)
    [! __x9__]
    return A
  } else {}
  let q = p
  while (! (== q s)) {
    app __x10__ = (SplitMatch S q R)
    let e = __x10__
    if (= e false) let q = (+ q 1i) else {}
    ??? "Else id:{e} is an integer index â‰¤ id:{s} , in:{} out:{}"
  }
  ??? "Let id:{T} be the String value equal to the substring of id:{S} consisting of the code units at indices id:{p} ( inclusive ) through id:{s} ( exclusive ) ."
  app __x11__ = (ToString lengthA)
  app __x12__ = (CreateDataProperty A [! __x11__] T)
  [! __x12__]
  return A
}