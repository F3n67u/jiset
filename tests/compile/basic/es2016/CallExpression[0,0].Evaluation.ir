{
  access __x0__ = (MemberExpression "Evaluation")
  let ref = __x0__
  app __x1__ = (GetValue ref)
  let func = [? __x1__]
  let __x2__ = true
  __x2__ = (= (typeof ref) Reference)
  if __x2__ {
    let __x3__ = true
    app __x4__ = (IsPropertyReference ref)
    __x3__ = (= __x4__ false)
    if __x3__ {
      app __x5__ = (GetReferencedName ref)
      __x3__ = (= __x5__ "eval")
    } else {}
    __x2__ = __x3__
  } else {}
  if __x2__ {
    app __x6__ = (SameValue func INTRINSIC_eval)
    if (= __x6__ true) {
      app __x7__ = (ArgumentListEvaluation Arguments)
      let argList = [? __x7__]
      if (= argList.length 0i) return undefined else {}
      let evalText = argList[0i]
      ??? "If the source code matching this nt:{CallExpression} is strict code , let id:{strictCaller} be value:{true} . Otherwise let id:{strictCaller} be value:{false} ."
      let evalRealm = REALM
      app __x8__ = (PerformEval evalText evalRealm strictCaller true)
      return [? __x8__]
    } else {}
  } else {}
  if (= (typeof ref) Reference) {
    app __x9__ = (IsPropertyReference ref)
    if (= __x9__ true) {
      app __x10__ = (GetThisValue ref)
      let thisValue = __x10__
    } else {}
    ??? "Else , the base of id:{ref} is an Environment Record in:{} out:{}"
  } else let thisValue = undefined
  let thisCall = this
  app __x11__ = (IsInTailPosition thisCall)
  let tailCall = __x11__
  app __x12__ = (EvaluateDirectCall func thisValue Arguments tailCall)
  return [? __x12__]
}