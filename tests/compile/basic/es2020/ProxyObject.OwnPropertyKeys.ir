{
  let handler = O.ProxyHandler
  if (= handler null) throw INTRINSIC_TypeError else {}
  app __x0__ = (Type handler)
  assert (= __x0__ Object)
  let target = O.ProxyTarget
  app __x1__ = (GetMethod handler "ownKeys")
  if (is-completion __x1__) if (= __x1__.Type CONST_normal) __x1__ = __x1__.Value else return __x1__ else {}
  let trap = __x1__
  if (= trap undefined) {
    app __x2__ = (target.OwnPropertyKeys target)
    if (is-completion __x2__) if (= __x2__.Type CONST_normal) __x2__ = __x2__.Value else return __x2__ else {}
    app __x3__ = (WrapCompletion __x2__)
    return __x3__
  } else {}
  app __x4__ = (Call trap handler (new [target]))
  if (is-completion __x4__) if (= __x4__.Type CONST_normal) __x4__ = __x4__.Value else return __x4__ else {}
  let trapResultArray = __x4__
  app __x5__ = (CreateListFromArrayLike trapResultArray (new [String, Symbol]))
  if (is-completion __x5__) if (= __x5__.Type CONST_normal) __x5__ = __x5__.Value else return __x5__ else {}
  let trapResult = __x5__
  app __x6__ = (IsDuplicate trapResult)
  if __x6__ throw INTRINSIC_TypeError else {}
  app __x7__ = (IsExtensible target)
  if (is-completion __x7__) if (= __x7__.Type CONST_normal) __x7__ = __x7__.Value else return __x7__ else {}
  let extensibleTarget = __x7__
  app __x8__ = (target.OwnPropertyKeys target)
  if (is-completion __x8__) if (= __x8__.Type CONST_normal) __x8__ = __x8__.Value else return __x8__ else {}
  let targetKeys = __x8__
  let targetConfigurableKeys = (new [])
  let targetNonconfigurableKeys = (new [])
  let __x9__ = targetKeys
  let __x10__ = 0i
  while (< __x10__ __x9__.length) {
    let key = __x9__[__x10__]
    app __x11__ = (target.GetOwnProperty target key)
    if (is-completion __x11__) if (= __x11__.Type CONST_normal) __x11__ = __x11__.Value else return __x11__ else {}
    let desc = __x11__
    if (&& (! (= desc undefined)) (= desc.Configurable false)) append key -> targetNonconfigurableKeys else append key -> targetConfigurableKeys
    __x10__ = (+ __x10__ 1i)
  }
  if (&& (= extensibleTarget true) (= targetNonconfigurableKeys.length 0i)) {
    app __x12__ = (WrapCompletion trapResult)
    return __x12__
  } else {}
  let uncheckedResultKeys = (copy-obj trapResult)
  let __x13__ = targetNonconfigurableKeys
  let __x14__ = 0i
  while (< __x14__ __x13__.length) {
    let key = __x13__[__x14__]
    if (! (contains uncheckedResultKeys key)) throw INTRINSIC_TypeError else {}
    let __x15__ = 0i
    while (< __x15__ uncheckedResultKeys.length) if (= uncheckedResultKeys[__x15__] key) (pop uncheckedResultKeys __x15__) else __x15__ = (+ __x15__ 1i)
    __x14__ = (+ __x14__ 1i)
  }
  if (= extensibleTarget true) {
    app __x16__ = (WrapCompletion trapResult)
    return __x16__
  } else {}
  let __x17__ = targetConfigurableKeys
  let __x18__ = 0i
  while (< __x18__ __x17__.length) {
    let key = __x17__[__x18__]
    if (! (contains uncheckedResultKeys key)) throw INTRINSIC_TypeError else {}
    let __x19__ = 0i
    while (< __x19__ uncheckedResultKeys.length) if (= uncheckedResultKeys[__x19__] key) (pop uncheckedResultKeys __x19__) else __x19__ = (+ __x19__ 1i)
    __x18__ = (+ __x18__ 1i)
  }
  if (< 0i uncheckedResultKeys.length) throw INTRINSIC_TypeError else {}
  app __x20__ = (WrapCompletion trapResult)
  return __x20__
}