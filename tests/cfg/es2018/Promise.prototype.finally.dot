digraph {
  node17510 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node17524 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">8:let stepsThenFinally = ThenFinallyFunctions</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17527 [shape=cds, label=<<font color="black">13:app __x5__ = (CreateBuiltinFunction stepsCatchFinally (new [&quot;Constructor&quot;, &quot;OnFinally&quot;]))</font>> color="black" fillcolor="white" style=filled]
  node17513 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let promise = this</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17518 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">2:let C = [? __x1__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17514 [shape=cds, label=<<font color="black">1:app __x0__ = (Type promise)</font>> color="black" fillcolor="white" style=filled]
  node17525 [shape=cds, label=<<font color="black">9:app __x4__ = (CreateBuiltinFunction stepsThenFinally (new [&quot;Constructor&quot;, &quot;OnFinally&quot;]))</font>> color="black" fillcolor="white" style=filled]
  node17522 [shape=diamond, label=<<font color="black">(= __x3__ false)</font>> color="black" fillcolor="white" style=filled]
  node17512 [shape=cds, label=<<font color="black">app onFinally = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node17515 [shape=diamond, label=<<font color="black">(! (= __x0__ Object))</font>> color="black" fillcolor="white" style=filled]
  node17519 [shape=cds, label=<<font color="black">3:app __x2__ = (IsConstructor C)</font>> color="black" fillcolor="white" style=filled]
  node17511 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node17516 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17530 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">16:return [? __x6__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17517 [shape=cds, label=<<font color="black">2:app __x1__ = (SpeciesConstructor promise INTRINSIC_Promise)</font>> color="black" fillcolor="white" style=filled]
  node17523 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">5:let thenFinally = onFinally</td></tr>
      <tr><td align="left">6:let catchFinally = onFinally</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17526 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">9:let thenFinally = __x4__</td></tr>
      <tr><td align="left">10:thenFinally.Constructor = C</td></tr>
      <tr><td align="left">11:thenFinally.OnFinally = onFinally</td></tr>
      <tr><td align="left">12:let stepsCatchFinally = CatchFinallyFunctions</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17521 [shape=cds, label=<<font color="black">7:app __x3__ = (IsCallable onFinally)</font>> color="black" fillcolor="white" style=filled]
  node17528 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">13:let catchFinally = __x5__</td></tr>
      <tr><td align="left">14:catchFinally.Constructor = C</td></tr>
      <tr><td align="left">15:catchFinally.OnFinally = onFinally</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17529 [shape=cds, label=<<font color="black">16:app __x6__ = (Invoke promise &quot;then&quot; (new [thenFinally, catchFinally]))</font>> color="black" fillcolor="white" style=filled]
  node17520 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">3:assert (= __x2__ true)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17518 -> node17519 [ color="black"]
  node17515 -> node17516 [label=<<font color="black">true</font>> color="black"]
  node17515 -> node17517 [label=<<font color="black">false</font>> color="black"]
  node17520 -> node17521 [ color="black"]
  node17513 -> node17514 [ color="black"]
  node17519 -> node17520 [ color="black"]
  node17514 -> node17515 [ color="black"]
  node17516 -> node17517 [ color="black"]
  node17517 -> node17518 [ color="black"]
  node17510 -> node17512 [ color="black"]
  node17522 -> node17523 [label=<<font color="black">true</font>> color="black"]
  node17522 -> node17524 [label=<<font color="black">false</font>> color="black"]
  node17527 -> node17528 [ color="black"]
  node17525 -> node17526 [ color="black"]
  node17524 -> node17525 [ color="black"]
  node17530 -> node17511 [ color="black"]
  node17512 -> node17513 [ color="black"]
  node17523 -> node17529 [ color="black"]
  node17528 -> node17529 [ color="black"]
  node17521 -> node17522 [ color="black"]
  node17526 -> node17527 [ color="black"]
  node17529 -> node17530 [ color="black"]
}
