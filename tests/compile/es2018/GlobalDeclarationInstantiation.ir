{
  [0] let envRec = env.EnvironmentRecord
  [1] assert (= (typeof envRec) "GlobalEnvironmentRecord")
  [2] access __x0__ = (script "LexicallyDeclaredNames")
  [2] let lexNames = __x0__
  [3] access __x1__ = (script "VarDeclaredNames")
  [3] let varNames = __x1__
  [4] let __x2__ = lexNames
  [4] let __x3__ = 0i
  [4] while (< __x3__ __x2__.length) {
    let name = __x2__[__x3__]
    [5] app __x4__ = (envRec.HasVarDeclaration envRec name)
    [5] if (= __x4__ true) {
      app __x5__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_SyntaxError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
      return __x5__
    } else [37] {}
    [6] app __x6__ = (envRec.HasLexicalDeclaration envRec name)
    [6] if (= __x6__ true) {
      app __x7__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_SyntaxError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
      return __x7__
    } else [37] {}
    [7] app __x8__ = (envRec.HasRestrictedGlobalProperty envRec name)
    [7] if (is-completion __x8__) if (= __x8__.Type CONST_normal) __x8__ = __x8__.Value else return __x8__ else [37] {}
    [7] let hasRestrictedGlobal = __x8__
    [8] if (= hasRestrictedGlobal true) {
      app __x9__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_SyntaxError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
      return __x9__
    } else [37] {}
    __x3__ = (+ __x3__ 1i)
  }
  [9] let __x10__ = varNames
  [9] let __x11__ = 0i
  [9] while (< __x11__ __x10__.length) {
    let name = __x10__[__x11__]
    [10] app __x12__ = (envRec.HasLexicalDeclaration envRec name)
    [10] if (= __x12__ true) {
      app __x13__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_SyntaxError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
      return __x13__
    } else [37] {}
    __x11__ = (+ __x11__ 1i)
  }
  [11] access __x14__ = (script "VarScopedDeclarations")
  [11] let varDeclarations = __x14__
  [12] let functionsToInitialize = (new [])
  [13] let declaredFunctionNames = (new [])
  [14] let __x15__ = varDeclarations
  [14] let __x16__ = __x15__.length
  [14] while (< 0i __x16__) {
    __x16__ = (- __x16__ 1i)
    let d = __x15__[__x16__]
    [15] if (! (|| (|| (is-instance-of d VariableDeclaration) (is-instance-of d ForBinding)) (is-instance-of d BindingIdentifier))) {
      [16] assert (|| (|| (|| (is-instance-of d FunctionDeclaration) (is-instance-of d GeneratorDeclaration)) (is-instance-of d AsyncFunctionDeclaration)) (is-instance-of d AsyncGeneratorDeclaration))
      [18] access __x17__ = (d "BoundNames")
      [18] let fn = __x17__[0i]
      [19] if (! (contains declaredFunctionNames fn)) {
        [20] app __x18__ = (envRec.CanDeclareGlobalFunction envRec fn)
        [20] if (is-completion __x18__) if (= __x18__.Type CONST_normal) __x18__ = __x18__.Value else return __x18__ else [37] {}
        [20] let fnDefinable = __x18__
        [21] if (= fnDefinable false) {
          app __x19__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_TypeError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
          return __x19__
        } else [37] {}
        [22] append fn -> declaredFunctionNames
        [23] prepend d -> functionsToInitialize
      } else [37] {}
    } else [37] {}
  }
  [24] let declaredVarNames = (new [])
  [25] let __x20__ = varDeclarations
  [25] let __x21__ = 0i
  [25] while (< __x21__ __x20__.length) {
    let d = __x20__[__x21__]
    [26] if (|| (|| (is-instance-of d VariableDeclaration) (is-instance-of d ForBinding)) (is-instance-of d BindingIdentifier)) {
      [27] access __x22__ = (d "BoundNames")
      [27] let __x23__ = __x22__
      [27] let __x24__ = 0i
      [27] while (< __x24__ __x23__.length) {
        let vn = __x23__[__x24__]
        [28] if (! (contains declaredFunctionNames vn)) {
          [29] app __x25__ = (envRec.CanDeclareGlobalVar envRec vn)
          [29] if (is-completion __x25__) if (= __x25__.Type CONST_normal) __x25__ = __x25__.Value else return __x25__ else [37] {}
          [29] let vnDefinable = __x25__
          [30] if (= vnDefinable false) {
            app __x26__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_TypeError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
            return __x26__
          } else [37] {}
          [31] if (! (contains declaredVarNames vn)) append vn -> declaredVarNames else [37] {}
        } else [37] {}
        __x24__ = (+ __x24__ 1i)
      }
    } else [37] {}
    __x21__ = (+ __x21__ 1i)
  }
  [35] access __x27__ = (script "LexicallyScopedDeclarations")
  [35] let lexDeclarations = __x27__
  [36] let __x28__ = lexDeclarations
  [36] let __x29__ = 0i
  [36] while (< __x29__ __x28__.length) {
    let d = __x28__[__x29__]
    [38] access __x30__ = (d "BoundNames")
    [38] let __x31__ = __x30__
    [38] let __x32__ = 0i
    [38] while (< __x32__ __x31__.length) {
      let dn = __x31__[__x32__]
      [41] access __x33__ = (d "IsConstantDeclaration")
      [41] if (= __x33__ true) {
        [40] app __x34__ = (envRec.CreateImmutableBinding envRec dn true)
        [40] if (is-completion __x34__) if (= __x34__.Type CONST_normal) __x34__ = __x34__.Value else return __x34__ else [37] {}
        [40] __x34__
      } else {
        [42] app __x35__ = (envRec.CreateMutableBinding envRec dn false)
        [42] if (is-completion __x35__) if (= __x35__.Type CONST_normal) __x35__ = __x35__.Value else return __x35__ else [37] {}
        [42] __x35__
      }
      __x32__ = (+ __x32__ 1i)
    }
    __x29__ = (+ __x29__ 1i)
  }
  [43] let __x36__ = functionsToInitialize
  [43] let __x37__ = 0i
  [43] while (< __x37__ __x36__.length) {
    let f = __x36__[__x37__]
    [44] access __x38__ = (f "BoundNames")
    [44] let fn = __x38__[0i]
    [45] access __x39__ = (f "InstantiateFunctionObject")
    [45] app __x40__ = (__x39__ env)
    [45] let fo = __x40__
    [46] app __x41__ = (envRec.CreateGlobalFunctionBinding envRec fn fo false)
    [46] if (is-completion __x41__) if (= __x41__.Type CONST_normal) __x41__ = __x41__.Value else return __x41__ else [37] {}
    [46] __x41__
    __x37__ = (+ __x37__ 1i)
  }
  [47] let __x42__ = declaredVarNames
  [47] let __x43__ = 0i
  [47] while (< __x43__ __x42__.length) {
    let vn = __x42__[__x43__]
    [48] app __x44__ = (envRec.CreateGlobalVarBinding envRec vn false)
    [48] if (is-completion __x44__) if (= __x44__.Type CONST_normal) __x44__ = __x44__.Value else return __x44__ else [37] {}
    [48] __x44__
    __x43__ = (+ __x43__ 1i)
  }
  [49] app __x45__ = (NormalCompletion CONST_empty)
  [49] app __x46__ = (WrapCompletion __x45__)
  [49] return __x46__
}