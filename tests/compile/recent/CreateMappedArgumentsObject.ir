{
  [1] let len = argumentsList.length
  [2] app __x0__ = (MakeBasicObject (new ["Prototype", "Extensible", "ParameterMap"]))
  [2] if (is-completion __x0__) if (= __x0__.Type CONST_normal) __x0__ = __x0__.Value else return __x0__ else [0] {}
  [2] let obj = __x0__
  [3] ??? "Set id:{obj} . [ [ GetOwnProperty ] ] as specified in link:{} ."
  [4] ??? "Set id:{obj} . [ [ DefineOwnProperty ] ] as specified in link:{} ."
  [5] ??? "Set id:{obj} . [ [ Get ] ] as specified in link:{} ."
  [6] ??? "Set id:{obj} . [ [ Set ] ] as specified in link:{} ."
  [7] ??? "Set id:{obj} . [ [ Delete ] ] as specified in link:{} ."
  [8] ??? "Set id:{obj} . [ [ Prototype ] ] to % Object . prototype % ."
  [9] app __x1__ = (OrdinaryObjectCreate null)
  [9] if (is-completion __x1__) if (= __x1__.Type CONST_normal) __x1__ = __x1__.Value else return __x1__ else [0] {}
  [9] let map = __x1__
  [10] obj.ParameterMap = map
  [11] access __x2__ = (formals "BoundNames")
  [11] let parameterNames = __x2__
  [12] let numberOfParameters = parameterNames.length
  [13] let index = 0i
  [14] while (< index len) {
    [15] let val = argumentsList[index]
    [16] ??? "Perform ! CreateDataPropertyOrThrow ( id:{obj} , ! ToString ( 𝔽 ( id:{index} ) ) , id:{val} ) ."
    [17] index = (+ index 1i)
  }
  [18] ??? "Perform ! DefinePropertyOrThrow ( id:{obj} , value:{\"length\"} , PropertyDescriptor { [ [ Value ] ] : 𝔽 ( id:{len} ) , [ [ Writable ] ] : value:{true} , [ [ Enumerable ] ] : value:{false} , [ [ Configurable ] ] : value:{true} } ) ."
  [19] let mappedNames = (new [])
  [20] let index = (- numberOfParameters 1i)
  [21] while (! (< index 0i)) {
    [22] let name = parameterNames[index]
    [23] if (! (contains mappedNames name)) {
      [24] append name -> mappedNames
      [25] if (< index len) {
        [26] app __x3__ = (MakeArgGetter name env)
        [26] let g = __x3__
        [27] app __x4__ = (MakeArgSetter name env)
        [27] let p = __x4__
        [28] ??? "Perform id:{map} . [ [ DefineOwnProperty ] ] ( ! ToString ( 𝔽 ( id:{index} ) ) , PropertyDescriptor { [ [ Set ] ] : id:{p} , [ [ Get ] ] : id:{g} , [ [ Enumerable ] ] : value:{false} , [ [ Configurable ] ] : value:{true} } ) ."
      } else [0] {}
    } else [0] {}
    [29] index = (- index 1i)
  }
  [30] ??? "Perform ! DefinePropertyOrThrow ( id:{obj} , @ @ iterator , PropertyDescriptor { [ [ Value ] ] : % Array . prototype . values % , [ [ Writable ] ] : value:{true} , [ [ Enumerable ] ] : value:{false} , [ [ Configurable ] ] : value:{true} } ) ."
  [31] app __x5__ = (DefinePropertyOrThrow obj "callee" (new PropertyDescriptor("Value" -> func, "Writable" -> true, "Enumerable" -> false, "Configurable" -> true)))
  [31] if (is-completion __x5__) if (= __x5__.Type CONST_normal) __x5__ = __x5__.Value else return __x5__ else [0] {}
  [31] __x5__
  [32] app __x6__ = (WrapCompletion obj)
  [32] return __x6__
}