digraph {
  node115 [shape=diamond, label=<<font color="black">(= op &quot;&amp;&quot;)</font>> color="black" fillcolor="white" style=filled]
  node110 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:assert (|| (|| (= op &quot;&amp;&quot;) (= op &quot;^&quot;)) (= op &quot;|&quot;))</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node116 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let result = (&amp; lbits rbits)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node117 [shape=diamond, label=<<font color="black">(= op &quot;^&quot;)</font>> color="black" fillcolor="white" style=filled]
  node109 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node118 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let result = (^ lbits rbits)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node113 [shape=cds, label=<<font color="black">2:app __x1__ = (ToInt32 y)</font>> color="black" fillcolor="white" style=filled]
  node108 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node112 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">1:let lnum = [! __x0__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node114 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">2:let rnum = [! __x1__]</td></tr>
      <tr><td align="left">3:??? &quot;Let id:{lbits} be the 32 - bit two ' s complement bit string representing ℝ ( id:{lnum} ) .&quot;</td></tr>
      <tr><td align="left">4:??? &quot;Let id:{rbits} be the 32 - bit two ' s complement bit string representing ℝ ( id:{rnum} ) .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node119 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">7:??? &quot;Else , id:{op} is code:{|} . Let id:{result} be the result of applying the bitwise inclusive OR operation to id:{lbits} and id:{rbits} .&quot;</td></tr>
      <tr><td align="left">8:??? &quot;Return the Number value for the integer represented by the 32 - bit two ' s complement bit string id:{result} .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node111 [shape=cds, label=<<font color="black">1:app __x0__ = (ToInt32 x)</font>> color="black" fillcolor="white" style=filled]
  node116 -> node119 [ color="black"]
  node115 -> node116 [label=<<font color="black">true</font>> color="black"]
  node115 -> node117 [label=<<font color="black">false</font>> color="black"]
  node118 -> node119 [ color="black"]
  node119 -> node109 [ color="black"]
  node113 -> node114 [ color="black"]
  node112 -> node113 [ color="black"]
  node110 -> node111 [ color="black"]
  node117 -> node118 [label=<<font color="black">true</font>> color="black"]
  node117 -> node119 [label=<<font color="black">false</font>> color="black"]
  node108 -> node110 [ color="black"]
  node114 -> node115 [ color="black"]
  node111 -> node112 [ color="black"]
}
