{
  let srcData = srcArray.ViewedArrayBuffer
  app __x0__ = (IsDetachedBuffer srcData)
  if (= __x0__ true) throw INTRINSIC_TypeError else {}
  let constructorName = O.TypedArrayName
  ??? "Let id:{elementType} be the Element Type value in link:{unhandled: table-the-typedarray-constructors} for id:{constructorName} ."
  let elementLength = srcArray.ArrayLength
  let srcName = srcArray.TypedArrayName
  ??? "Let id:{srcType} be the Element Type value in link:{unhandled: table-the-typedarray-constructors} for id:{srcName} ."
  ??? "Let id:{srcElementSize} be the Element Size value specified in link:{unhandled: table-the-typedarray-constructors} for id:{srcName} ."
  let srcByteOffset = srcArray.ByteOffset
  ??? "Let id:{elementSize} be the Element Size value specified in link:{unhandled: table-the-typedarray-constructors} for id:{constructorName} ."
  let byteLength = (* elementSize elementLength)
  app __x1__ = (IsSharedArrayBuffer srcData)
  if (= __x1__ false) {
    app __x2__ = (SpeciesConstructor srcData INTRINSIC_ArrayBuffer)
    let bufferConstructor = [? __x2__]
  } else let bufferConstructor = INTRINSIC_ArrayBuffer
  if (= elementType srcType) {
    app __x3__ = (CloneArrayBuffer srcData srcByteOffset byteLength bufferConstructor)
    let data = [? __x3__]
  } else {
    app __x4__ = (AllocateArrayBuffer bufferConstructor byteLength)
    let data = [? __x4__]
    app __x5__ = (IsDetachedBuffer srcData)
    if (= __x5__ true) throw INTRINSIC_TypeError else {}
    if (! (== srcArray.ContentType O.ContentType)) throw INTRINSIC_TypeError else {}
    let srcByteIndex = srcByteOffset
    let targetByteIndex = 0i
    let count = elementLength
    while (< 0i count) {
      app __x6__ = (GetValueFromBuffer srcData srcByteIndex srcType true CONST_Unordered)
      let value = __x6__
      app __x7__ = (SetValueInBuffer data targetByteIndex elementType value true CONST_Unordered)
      __x7__
      srcByteIndex = (+ srcByteIndex srcElementSize)
      targetByteIndex = (+ targetByteIndex elementSize)
      count = (- count 1i)
    }
  }
  O.ViewedArrayBuffer = data
  O.ByteLength = byteLength
  O.ByteOffset = 0i
  O.ArrayLength = elementLength
}