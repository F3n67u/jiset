digraph {
  node11164 [shape=cds, label=<<font color="black">5:app __x1__ = (ToInt32 radix)</font>> color="black" fillcolor="white" style=filled]
  node11175 [shape=diamond, label=<<font color="black">(= Z.length 0i)</font>> color="black" fillcolor="white" style=filled]
  node11160 [shape=cds, label=<<font color="black">app string = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node11171 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">R = 10i</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11178 [shape=diamond, label=<<font color="black">(== mathInt 0i)</font>> color="black" fillcolor="white" style=filled]
  node11174 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">16:??? &quot;If id:{S} contains a code unit that is not a radix - id:{R} digit , let id:{Z} be the substring of id:{S} consisting of all code units before the first such code unit ; otherwise , let id:{Z} be id:{S} .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11169 [shape=diamond, label=<<font color="black">(! (== R 16i))</font>> color="black" fillcolor="white" style=filled]
  node11158 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node11173 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">??? &quot;If the length of id:{S} is at least 2 and the first two code units of id:{S} are either code:{\&quot;0x\&quot;} or code:{\&quot;0X\&quot;} , then in:{} out:{}&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11161 [shape=cds, label=<<font color="black">app radix = (GetArgument argumentsList 1i)</font>> color="black" fillcolor="white" style=filled]
  node11181 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">21:return 0i</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11176 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return NaN</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11172 [shape=diamond, label=<<font color="black">(= stripPrefix true)</font>> color="black" fillcolor="white" style=filled]
  node11167 [shape=diamond, label=<<font color="black">(|| (&lt; R 2i) (&lt; 36i R))</font>> color="black" fillcolor="white" style=filled]
  node11162 [shape=cds, label=<<font color="black">0:app __x0__ = (ToString string)</font>> color="black" fillcolor="white" style=filled]
  node11163 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let inputString = [? __x0__]</td></tr>
      <tr><td align="left">1:??? &quot;Let id:{S} be a newly created substring of id:{inputString} consisting of the first code unit that is not a nt:{StrWhiteSpaceChar} and all code units following that code unit . ( In other words , remove leading white space . ) If id:{inputString} does not contain any such code unit , let id:{S} be the empty string .&quot;</td></tr>
      <tr><td align="left">2:let sign = 1i</td></tr>
      <tr><td align="left">3:??? &quot;If id:{S} is not empty and the first code unit of id:{S} is the code unit 0x002D ( HYPHEN - MINUS ) , set id:{sign} to - 1 .&quot;</td></tr>
      <tr><td align="left">4:??? &quot;If id:{S} is not empty and the first code unit of id:{S} is the code unit 0x002B ( PLUS SIGN ) or the code unit 0x002D ( HYPHEN - MINUS ) , remove the first code unit from id:{S} .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11168 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return NaN</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11159 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node11170 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">stripPrefix = false</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11165 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">5:let R = [? __x1__]</td></tr>
      <tr><td align="left">6:let stripPrefix = true</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11179 [shape=diamond, label=<<font color="black">(== sign -1i)</font>> color="black" fillcolor="white" style=filled]
  node11166 [shape=diamond, label=<<font color="black">(! (== R 0i))</font>> color="black" fillcolor="white" style=filled]
  node11180 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return -0.0</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11177 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">18:??? &quot;Let id:{mathInt} be the mathematical integer value that is represented by id:{Z} in radix - id:{R} notation , using the letters &lt; b &gt; A &lt; / b &gt; - &lt; b &gt; Z &lt; / b &gt; and &lt; b &gt; a &lt; / b &gt; - &lt; b &gt; z &lt; / b &gt; for digits with values 10 through 35 . ( However , if id:{R} is 10 and id:{Z} contains more than 20 significant digits , every significant digit after the 20th may be replaced by a 0 digit , at the option of the implementation ; and if id:{R} is not 2 , 4 , 8 , 10 , 16 , or 32 , then id:{mathInt} may be an implementation - dependent approximation to the mathematical integer value that is represented by id:{Z} in radix - id:{R} notation . )&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11182 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">22:let number = mathInt</td></tr>
      <tr><td align="left">23:return (* sign number)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11170 -> node11172 [ color="black"]
  node11178 -> node11179 [label=<<font color="black">true</font>> color="black"]
  node11178 -> node11182 [label=<<font color="black">false</font>> color="black"]
  node11165 -> node11166 [ color="black"]
  node11162 -> node11163 [ color="black"]
  node11158 -> node11160 [ color="black"]
  node11179 -> node11180 [label=<<font color="black">true</font>> color="black"]
  node11179 -> node11181 [label=<<font color="black">false</font>> color="black"]
  node11171 -> node11172 [ color="black"]
  node11167 -> node11168 [label=<<font color="black">true</font>> color="black"]
  node11167 -> node11169 [label=<<font color="black">false</font>> color="black"]
  node11175 -> node11176 [label=<<font color="black">true</font>> color="black"]
  node11175 -> node11177 [label=<<font color="black">false</font>> color="black"]
  node11160 -> node11161 [ color="black"]
  node11181 -> node11182 [ color="black"]
  node11182 -> node11159 [ color="black"]
  node11177 -> node11178 [ color="black"]
  node11163 -> node11164 [ color="black"]
  node11169 -> node11170 [label=<<font color="black">true</font>> color="black"]
  node11169 -> node11172 [label=<<font color="black">false</font>> color="black"]
  node11176 -> node11177 [ color="black"]
  node11172 -> node11173 [label=<<font color="black">true</font>> color="black"]
  node11172 -> node11174 [label=<<font color="black">false</font>> color="black"]
  node11180 -> node11181 [ color="black"]
  node11161 -> node11162 [ color="black"]
  node11166 -> node11167 [label=<<font color="black">true</font>> color="black"]
  node11166 -> node11171 [label=<<font color="black">false</font>> color="black"]
  node11168 -> node11169 [ color="black"]
  node11174 -> node11175 [ color="black"]
  node11173 -> node11174 [ color="black"]
  node11164 -> node11165 [ color="black"]
}
