{
  let rx = this
  app __x0__ = (Type rx)
  if (! (= __x0__ Object)) throw INTRINSIC_TypeError else {}
  app __x1__ = (ToString string)
  if (is-completion __x1__) if (= __x1__.Type CONST_normal) __x1__ = __x1__.Value else return __x1__ else {}
  let S = __x1__
  let lengthS = S.length
  app __x2__ = (IsCallable replaceValue)
  let functionalReplace = __x2__
  if (= functionalReplace false) {
    app __x3__ = (ToString replaceValue)
    if (is-completion __x3__) if (= __x3__.Type CONST_normal) __x3__ = __x3__.Value else return __x3__ else {}
    replaceValue = __x3__
  } else {}
  app __x4__ = (Get rx "global")
  if (is-completion __x4__) if (= __x4__.Type CONST_normal) __x4__ = __x4__.Value else return __x4__ else {}
  app __x5__ = (ToBoolean __x4__)
  if (is-completion __x5__) if (= __x5__.Type CONST_normal) __x5__ = __x5__.Value else return __x5__ else {}
  let global = __x5__
  if (= global true) {
    app __x6__ = (Get rx "unicode")
    if (is-completion __x6__) if (= __x6__.Type CONST_normal) __x6__ = __x6__.Value else return __x6__ else {}
    app __x7__ = (ToBoolean __x6__)
    if (is-completion __x7__) if (= __x7__.Type CONST_normal) __x7__ = __x7__.Value else return __x7__ else {}
    let fullUnicode = __x7__
    app __x8__ = (Set rx "lastIndex" 0i true)
    if (is-completion __x8__) if (= __x8__.Type CONST_normal) __x8__ = __x8__.Value else return __x8__ else {}
    __x8__
  } else {}
  let results = (new [])
  let done = false
  while (= done false) {
    app __x9__ = (RegExpExec rx S)
    if (is-completion __x9__) if (= __x9__.Type CONST_normal) __x9__ = __x9__.Value else return __x9__ else {}
    let result = __x9__
    if (= result null) done = true else {
      append result -> results
      if (= global false) done = true else {
        app __x10__ = (Get result "0")
        if (is-completion __x10__) if (= __x10__.Type CONST_normal) __x10__ = __x10__.Value else return __x10__ else {}
        app __x11__ = (ToString __x10__)
        if (is-completion __x11__) if (= __x11__.Type CONST_normal) __x11__ = __x11__.Value else return __x11__ else {}
        let matchStr = __x11__
        if (= matchStr "") {
          app __x12__ = (Get rx "lastIndex")
          if (is-completion __x12__) if (= __x12__.Type CONST_normal) __x12__ = __x12__.Value else return __x12__ else {}
          app __x13__ = (ToLength __x12__)
          if (is-completion __x13__) if (= __x13__.Type CONST_normal) __x13__ = __x13__.Value else return __x13__ else {}
          let thisIndex = __x13__
          app __x14__ = (AdvanceStringIndex S thisIndex fullUnicode)
          let nextIndex = __x14__
          app __x15__ = (Set rx "lastIndex" nextIndex true)
          if (is-completion __x15__) if (= __x15__.Type CONST_normal) __x15__ = __x15__.Value else return __x15__ else {}
          __x15__
        } else {}
      }
    }
  }
  let accumulatedResult = ""
  let nextSourcePosition = 0i
  let __x16__ = results
  let __x17__ = 0i
  while (< __x17__ __x16__.length) {
    let result = __x16__[__x17__]
    app __x18__ = (LengthOfArrayLike result)
    if (is-completion __x18__) if (= __x18__.Type CONST_normal) __x18__ = __x18__.Value else return __x18__ else {}
    let resultLength = __x18__
    app __x19__ = (max (- resultLength 1i) 0i)
    let nCaptures = __x19__
    app __x20__ = (Get result "0")
    if (is-completion __x20__) if (= __x20__.Type CONST_normal) __x20__ = __x20__.Value else return __x20__ else {}
    app __x21__ = (ToString __x20__)
    if (is-completion __x21__) if (= __x21__.Type CONST_normal) __x21__ = __x21__.Value else return __x21__ else {}
    let matched = __x21__
    let matchLength = matched.length
    app __x22__ = (Get result "index")
    if (is-completion __x22__) if (= __x22__.Type CONST_normal) __x22__ = __x22__.Value else return __x22__ else {}
    app __x23__ = (ToIntegerOrInfinity __x22__)
    if (is-completion __x23__) if (= __x23__.Type CONST_normal) __x23__ = __x23__.Value else return __x23__ else {}
    let position = __x23__
    ??? "Set id:{position} to the result of clamping id:{position} between 0 and id:{lengthS} ."
    let n = 1i
    let captures = (new [])
    while (! (< nCaptures n)) {
      app __x24__ = (ToString n)
      if (is-completion __x24__) if (= __x24__.Type CONST_normal) __x24__ = __x24__.Value else return __x24__ else {}
      app __x25__ = (Get result __x24__)
      if (is-completion __x25__) if (= __x25__.Type CONST_normal) __x25__ = __x25__.Value else return __x25__ else {}
      let capN = __x25__
      if (! (= capN undefined)) {
        app __x26__ = (ToString capN)
        if (is-completion __x26__) if (= __x26__.Type CONST_normal) __x26__ = __x26__.Value else return __x26__ else {}
        capN = __x26__
      } else {}
      append capN -> captures
      n = (+ n 1i)
    }
    app __x27__ = (Get result "groups")
    if (is-completion __x27__) if (= __x27__.Type CONST_normal) __x27__ = __x27__.Value else return __x27__ else {}
    let namedCaptures = __x27__
    if (= functionalReplace true) {
      let replacerArgs = (new [matched])
      let __x28__ = captures
      let __x29__ = 0i
      while (< __x29__ __x28__.length) {
        let __x30__ = __x28__[__x29__]
        append __x30__ -> replacerArgs
        __x29__ = (+ __x29__ 1i)
      }
      append position -> replacerArgs
      append S -> replacerArgs
      if (! (= namedCaptures undefined)) append namedCaptures -> replacerArgs else {}
      app __x31__ = (Call replaceValue undefined replacerArgs)
      if (is-completion __x31__) if (= __x31__.Type CONST_normal) __x31__ = __x31__.Value else return __x31__ else {}
      let replValue = __x31__
      app __x32__ = (ToString replValue)
      if (is-completion __x32__) if (= __x32__.Type CONST_normal) __x32__ = __x32__.Value else return __x32__ else {}
      let replacement = __x32__
    } else {
      if (! (= namedCaptures undefined)) {
        app __x33__ = (ToObject namedCaptures)
        if (is-completion __x33__) if (= __x33__.Type CONST_normal) __x33__ = __x33__.Value else return __x33__ else {}
        namedCaptures = __x33__
      } else {}
      app __x34__ = (GetSubstitution matched S position captures namedCaptures replaceValue)
      if (is-completion __x34__) if (= __x34__.Type CONST_normal) __x34__ = __x34__.Value else return __x34__ else {}
      let replacement = __x34__
    }
    if (! (< position nextSourcePosition)) {
      let __x35__ = ""
      let __x36__ = nextSourcePosition
      while (< __x36__ (+ position 1i)) {
        access __x37__ = (S __x36__)
        __x35__ = (+ __x35__ __x37__)
        __x36__ = (+ __x36__ 1i)
      }
      accumulatedResult = (+ (+ accumulatedResult __x35__) replacement)
      nextSourcePosition = (+ position matchLength)
    } else {}
    __x17__ = (+ __x17__ 1i)
  }
  if (! (< nextSourcePosition lengthS)) {
    app __x38__ = (WrapCompletion accumulatedResult)
    return __x38__
  } else {}
  ??? "Return the string - concatenation of id:{accumulatedResult} and the substring of id:{S} from id:{nextSourcePosition} ."
}