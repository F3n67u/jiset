digraph {
  node17285 [shape=cds, label=<<font color="black">18:app __x1__ = (CreateIteratorFromClosure closure &quot;%SetIteratorPrototype%&quot; INTRINSIC_SetIteratorPrototype)</font>> color="black" fillcolor="white" style=filled]
  node17286 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">18:return [! __x1__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17282 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:assert (|| (= kind CONST_keyPLUSvalue) (= kind CONST_value))</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17280 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node17281 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node17283 [shape=cds, label=<<font color="black">1:app __x0__ = (RequireInternalSlot set &quot;SetData&quot;)</font>> color="black" fillcolor="white" style=filled]
  node17284 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">1:[? __x0__]</td></tr>
      <tr><td align="left">2:??? &quot;Let id:{closure} be a new Abstract Closure with no parameters that captures id:{set} and id:{kind} and performs the following steps when called : in:{} out:{}&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17283 -> node17284 [ color="black"]
  node17286 -> node17281 [ color="black"]
  node17280 -> node17282 [ color="black"]
  node17285 -> node17286 [ color="black"]
  node17284 -> node17285 [ color="black"]
  node17282 -> node17283 [ color="black"]
}
