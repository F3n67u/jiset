<algorithm>
  <param>BindingIdentifier</param>
  <step-list>
    <step>Let <id>lhs</id> be ? ResolveBinding (StringValue of BindingIdentifier , <id>environment</id> ).</step>
    <step>Let <id>A</id> be ! ArrayCreate (0).</step>
    <step>Let <id>n</id> be 0.</step>
    <step>Repeat,     <step-list>
      <step>If <id>iteratorRecord</id> .[[Done]] is <value>false</value> , then       <step-list>
        <step>Let <id>next</id> be IteratorStep ( <id>iteratorRecord</id> ).</step>
        <step>If <id>next</id> is an abrupt completion , set <id>iteratorRecord</id> .[[Done]] to <value>true</value> .</step>
        <step>ReturnIfAbrupt ( <id>next</id> ).</step>
        <step>If <id>next</id> is <value>false</value> , set <id>iteratorRecord</id> .[[Done]] to <value>true</value> .</step>
      </step-list></step>
      <step>If <id>iteratorRecord</id> .[[Done]] is <value>true</value> , then       <step-list>
        <step>If <id>environment</id> is <value>undefined</value> , return ? PutValue ( <id>lhs</id> , <id>A</id> ).</step>
        <step>Return InitializeReferencedBinding ( <id>lhs</id> , <id>A</id> ).</step>
      </step-list></step>
      <step>Let <id>nextValue</id> be IteratorValue ( <id>next</id> ).</step>
      <step>If <id>nextValue</id> is an abrupt completion , set <id>iteratorRecord</id> .[[Done]] to <value>true</value> .</step>
      <step>ReturnIfAbrupt ( <id>nextValue</id> ).</step>
      <step>Let <id>status</id> be CreateDataProperty ( <id>A</id> , ! ToString ( <id>n</id> ), <id>nextValue</id> ).</step>
      <step>Assert : <id>status</id> is <value>true</value> .</step>
      <step>Increment <id>n</id> by 1.</step>
    </step-list></step>
  </step-list>
</algorithm>