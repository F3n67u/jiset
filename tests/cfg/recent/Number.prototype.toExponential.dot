digraph {
  node12575 [shape=diamond, label=<<font color="black">(== x 0i)</font>> color="black" fillcolor="white" style=filled]
  node12582 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">20:??? &quot;Let id:{a} be the first code unit of id:{m} .&quot;</td></tr>
      <tr><td align="left">21:??? &quot;Let id:{b} be the other id:{f} code units of id:{m} .&quot;</td></tr>
      <tr><td align="left">22:m = (+ (+ a &quot;.&quot;) b)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12571 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw RangeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12577 [shape=diamond, label=<<font color="black">(! (= fractionDigits undefined))</font>> color="black" fillcolor="white" style=filled]
  node12566 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">1:let f = [? __x1__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12584 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">24:let c = &quot;+&quot;</td></tr>
      <tr><td align="left">25:let d = &quot;0&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12580 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">18:??? &quot;Let id:{m} be the String value consisting of the digits of the decimal representation of id:{n} ( in order , with no leading zeroes ) .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12574 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">8:s = &quot;-&quot;</td></tr>
      <tr><td align="left">9:x = (- x)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12583 [shape=diamond, label=<<font color="black">(== e 0i)</font>> color="black" fillcolor="white" style=filled]
  node12560 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node12579 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">??? &quot;Let id:{e} , id:{n} , and id:{f} be integers such that id:{f} &ge; 0 , 10 sup:{id:{f}} &le; id:{n} &lt; 10 sup:{id:{f} + 1} , id:{n} &times; 10 sup:{id:{e} - id:{f}} is id:{x} , and id:{f} is as small as possible . Note that the decimal representation of id:{n} has id:{f} + 1 digits , id:{n} is not divisible by 10 , and the least significant digit of id:{n} is not necessarily uniquely determined by these criteria .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12564 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let x = [? __x0__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12570 [shape=diamond, label=<<font color="black">(|| (&lt; f 0i) (&lt; 100i f))</font>> color="black" fillcolor="white" style=filled]
  node12568 [shape=cds, label=<<font color="black">app __x2__ = (PRIMITIVE[Number].toString x)</font>> color="black" fillcolor="white" style=filled]
  node12585 [shape=diamond, label=<<font color="black">(&lt; 0i e)</font>> color="black" fillcolor="white" style=filled]
  node12589 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">33:m = (+ (+ (+ m &quot;e&quot;) c) d)</td></tr>
      <tr><td align="left">34:return (+ s m)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12578 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">??? &quot;Let id:{e} and id:{n} be integers such that 10 sup:{id:{f}} &le; id:{n} &lt; 10 sup:{id:{f} + 1} and for which id:{n} &times; 10 sup:{id:{e} - id:{n}} - id:{x} is as close to zero as possible . If there are two such sets of id:{e} and id:{n} , pick the id:{e} and id:{n} for which id:{n} &times; 10 sup:{id:{e} - id:{f}} is larger .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12586 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let c = &quot;+&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12581 [shape=diamond, label=<<font color="black">(! (== f 0i))</font>> color="black" fillcolor="white" style=filled]
  node12565 [shape=cds, label=<<font color="black">1:app __x1__ = (ToIntegerOrInfinity fractionDigits)</font>> color="black" fillcolor="white" style=filled]
  node12561 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node12576 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">11:??? &quot;Let id:{m} be the String value consisting of id:{f} + 1 occurrences of the code unit 0x0030 ( DIGIT ZERO ) .&quot;</td></tr>
      <tr><td align="left">12:let e = 0i</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12572 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">5:x = x</td></tr>
      <tr><td align="left">6:let s = &quot;&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12562 [shape=cds, label=<<font color="black">app fractionDigits = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node12587 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">29:assert (&lt; e 0i)</td></tr>
      <tr><td align="left">30:let c = &quot;-&quot;</td></tr>
      <tr><td align="left">31:e = (- e)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12573 [shape=diamond, label=<<font color="black">(&lt; x 0i)</font>> color="black" fillcolor="white" style=filled]
  node12563 [shape=cds, label=<<font color="black">0:app __x0__ = (thisNumberValue this)</font>> color="black" fillcolor="white" style=filled]
  node12569 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return [! __x2__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12588 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">32:??? &quot;Let id:{d} be the String value consisting of the digits of the decimal representation of id:{e} ( in order , with no leading zeroes ) .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12567 [shape=diamond, label=<<font color="black">(|| (= x Infinity) (= x -Infinity))</font>> color="black" fillcolor="white" style=filled]
  node12584 -> node12589 [ color="black"]
  node12563 -> node12564 [ color="black"]
  node12581 -> node12582 [label=<<font color="black">true</font>> color="black"]
  node12581 -> node12583 [label=<<font color="black">false</font>> color="black"]
  node12585 -> node12586 [label=<<font color="black">true</font>> color="black"]
  node12585 -> node12587 [label=<<font color="black">false</font>> color="black"]
  node12586 -> node12588 [ color="black"]
  node12565 -> node12566 [ color="black"]
  node12583 -> node12584 [label=<<font color="black">true</font>> color="black"]
  node12583 -> node12585 [label=<<font color="black">false</font>> color="black"]
  node12579 -> node12580 [ color="black"]
  node12568 -> node12569 [ color="black"]
  node12567 -> node12568 [label=<<font color="black">true</font>> color="black"]
  node12567 -> node12570 [label=<<font color="black">false</font>> color="black"]
  node12589 -> node12561 [ color="black"]
  node12564 -> node12565 [ color="black"]
  node12588 -> node12589 [ color="black"]
  node12573 -> node12574 [label=<<font color="black">true</font>> color="black"]
  node12573 -> node12575 [label=<<font color="black">false</font>> color="black"]
  node12576 -> node12581 [ color="black"]
  node12572 -> node12573 [ color="black"]
  node12562 -> node12563 [ color="black"]
  node12587 -> node12588 [ color="black"]
  node12580 -> node12581 [ color="black"]
  node12582 -> node12583 [ color="black"]
  node12569 -> node12570 [ color="black"]
  node12575 -> node12576 [label=<<font color="black">true</font>> color="black"]
  node12575 -> node12577 [label=<<font color="black">false</font>> color="black"]
  node12578 -> node12580 [ color="black"]
  node12566 -> node12567 [ color="black"]
  node12571 -> node12572 [ color="black"]
  node12570 -> node12571 [label=<<font color="black">true</font>> color="black"]
  node12570 -> node12572 [label=<<font color="black">false</font>> color="black"]
  node12560 -> node12562 [ color="black"]
  node12577 -> node12578 [label=<<font color="black">true</font>> color="black"]
  node12577 -> node12579 [label=<<font color="black">false</font>> color="black"]
  node12574 -> node12575 [ color="black"]
}
