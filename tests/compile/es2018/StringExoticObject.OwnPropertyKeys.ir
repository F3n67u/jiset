{
  [0] let keys = (new [])
  [1] let str = O.StringData
  [2] let len = str.length
  [3] let i = (+ 0i 0i)
  [3] let __x0__ = (+ len 0i)
  [3] while (< i __x0__) {
    [4] app __x1__ = (ToString i)
    [4] if (is-completion __x1__) if (= __x1__.Type CONST_normal) __x1__ = __x1__.Value else return __x1__ else [15] {}
    [4] append __x1__ -> keys
  }
  [5] ??? "For each own property key id:{P} of id:{O} such that id:{P} is an integer index and ToInteger ( id:{P} ) â‰¥ id:{len} , in ascending numeric index order , do step-list:{...}"
  [7] ??? "For each own property key id:{P} of id:{O} such that Type ( id:{P} ) is String and id:{P} is not an integer index , in ascending chronological order of property creation , do step-list:{...}"
  [9] ??? "For each own property key id:{P} of id:{O} such that Type ( id:{P} ) is Symbol , in ascending chronological order of property creation , do step-list:{...}"
  [11] app __x2__ = (WrapCompletion keys)
  [11] return __x2__
}