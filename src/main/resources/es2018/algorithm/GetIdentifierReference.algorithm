<algorithm>
  <param>lex</param>
  <param>name</param>
  <param>strict</param>
  <step-list>
    <step>If <id>lex</id> is the value <value>null</value> , then     <step-list>
      <step>Return a value of type Reference whose base value component is <value>undefined</value> , whose referenced name component is <id>name</id> , and whose strict reference flag is <id>strict</id> .</step>
    </step-list></step>
    <step>Let <id>envRec</id> be <id>lex</id> 's EnvironmentRecord .</step>
    <step>Let <id>exists</id> be ? <id>envRec</id> .HasBinding( <id>name</id> ).</step>
    <step>If <id>exists</id> is <value>true</value> , then     <step-list>
      <step>Return a value of type Reference whose base value component is <id>envRec</id> , whose referenced name component is <id>name</id> , and whose strict reference flag is <id>strict</id> .</step>
    </step-list></step>
    <step>Else,     <step-list>
      <step>Let <id>outer</id> be the value of <id>lex</id> 's outer environment reference.</step>
      <step>Return ? GetIdentifierReference ( <id>outer</id> , <id>name</id> , <id>strict</id> ).</step>
    </step-list></step>
  </step-list>
</algorithm>