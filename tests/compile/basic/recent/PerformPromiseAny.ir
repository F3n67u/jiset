{
  app __x0__ = (IsConstructor constructor)
  assert (= [! __x0__] true)
  app __x1__ = (IsCallable promiseResolve)
  assert (= [! __x1__] true)
  let errors = (new [])
  let remainingElementsCount = (new Record("Value" -> 1i))
  let index = 0i
  while true {
    app __x2__ = (IteratorStep iteratorRecord)
    let next = __x2__
    app __x3__ = (IsAbruptCompletion next)
    if __x3__ iteratorRecord.Done = true else {}
    [? next]
    if (= next false) {
      iteratorRecord.Done = true
      remainingElementsCount.Value = (- remainingElementsCount.Value 1i)
      if (= remainingElementsCount.Value 0i) {
        ??? "Let id:{error} be a newly created code:{AggregateError} object ."
        app __x4__ = (CreateArrayFromList errors)
        app __x5__ = (DefinePropertyOrThrow error "errors" (new PropertyDescriptor("Configurable" -> true, "Enumerable" -> false, "Writable" -> true, "Value" -> [! __x4__])))
        [! __x5__]
        app __x6__ = (ThrowCompletion error)
        return __x6__
      } else {}
      return resultCapability.Promise
    } else {}
    app __x7__ = (IteratorValue next)
    let nextValue = __x7__
    app __x8__ = (IsAbruptCompletion nextValue)
    if __x8__ iteratorRecord.Done = true else {}
    [? nextValue]
    append undefined -> errors
    app __x9__ = (Call promiseResolve constructor (new [nextValue]))
    let nextPromise = [? __x9__]
    ??? "Let id:{steps} be the algorithm steps defined in link:{unhandled: sec-promise.any-reject-element-functions} ."
    app __x10__ = (CreateBuiltinFunction steps (new ["AlreadyCalled", "Index", "Errors", "Capability", "RemainingElements"]))
    let rejectElement = [! __x10__]
    rejectElement.AlreadyCalled = false
    rejectElement.Index = index
    rejectElement.Errors = errors
    rejectElement.Capability = resultCapability
    rejectElement.RemainingElements = remainingElementsCount
    remainingElementsCount.Value = (+ remainingElementsCount.Value 1i)
    app __x11__ = (Invoke nextPromise "then" (new [resultCapability.Resolve, rejectElement]))
    [? __x11__]
    index = (+ index 1i)
  }
}