{
  let __x0__ = true
  __x0__ = (! (= comparefn undefined))
  if __x0__ {
    app __x1__ = (IsCallable comparefn)
    __x0__ = (= __x1__ false)
  } else {}
  if __x0__ throw TypeError else {}
  app __x2__ = (ToObject this)
  let obj = [? __x2__]
  app __x3__ = (LengthOfArrayLike obj)
  let len = [? __x3__]
  let items = (new [])
  let k = 0i
  while (< k len) {
    app __x4__ = (ToString k)
    let Pk = [! __x4__]
    app __x5__ = (HasProperty obj Pk)
    let kPresent = [? __x5__]
    if (= kPresent true) {
      app __x6__ = (Get obj Pk)
      let kValue = [? __x6__]
      append kValue -> items
    } else {}
    k = (+ k 1i)
  }
  let itemCount = items.length
  ??? "Sort id:{items} using an implementation - defined sequence of calls to SortCompare . If any such call returns an abrupt completion , stop before performing any further calls to SortCompare or steps in this algorithm and return that completion ."
  let j = 0i
  while (< j itemCount) {
    app __x7__ = (ToString j)
    app __x8__ = (Set obj [! __x7__] items[j] true)
    [? __x8__]
    j = (+ j 1i)
  }
  while (< j len) {
    app __x9__ = (ToString j)
    app __x10__ = (DeletePropertyOrThrow obj [! __x9__])
    [? __x10__]
    j = (+ j 1i)
  }
  return obj
}