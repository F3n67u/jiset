{
  assert (is-instance-of literal RegularExpressionLiteral)
  if AnyBool return false else {}
  access __x0__ = (literal "BodyText")
  let P = __x0__
  access __x1__ = (literal "FlagText")
  if (contains __x1__ ??? "u") ??? "Parse id:{P} using the grammars in link:{unhandled: sec-patterns} . The goal symbol for the parse is | Pattern [ + U , + N ] | . If id:{P} did not conform to the grammar , if any elements of id:{P} were not matched by the parse , or if any Early Error conditions exist , return value:{false} . Otherwise , return value:{true} ." else {}
  app __x2__ = (UTF16Encode P)
  let stringValue = __x2__
  ??? "Let id:{pText} be the sequence of code points resulting from interpreting each of the 16 - bit elements of id:{stringValue} as a Unicode BMP code point . UTF - 16 decoding is not applied to the elements ."
  ??? "Parse id:{pText} using the grammars in link:{unhandled: sec-patterns} . The goal symbol for the parse is | Pattern [ ~ U , ~ N ] | . If the result of parsing contains a nt:{GroupName} , reparse with the goal symbol | Pattern [ ~ U , + N ] | . If id:{P} did not conform to the grammar , if any elements of id:{P} were not matched by the parse , or if any Early Error conditions exist , return value:{false} . Otherwise , return value:{true} ."
}