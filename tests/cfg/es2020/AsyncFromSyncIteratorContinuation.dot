digraph {
  node0 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node5 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let done = __x0__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10 [shape=diamond, label=<<font color="black">(&amp;&amp; (is-completion __x1__) (! (= __x1__.Type CONST_normal)))</font>> color="black" fillcolor="white" style=filled]
  node14 [shape=cds, label=<<font color="black">2:app __x2__ = (IteratorValue result)</font>> color="black" fillcolor="white" style=filled]
  node1 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node6 [shape=diamond, label=<<font color="black">(is-completion done)</font>> color="black" fillcolor="white" style=filled]
  node9 [shape=cds, label=<<font color="black">app __x1__ = (Call promiseCapability.Reject undefined (new [done.Value]))</font>> color="black" fillcolor="white" style=filled]
  node13 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">1:done</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node2 [shape=cds, label=<<font color="black">app result = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node12 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return promiseCapability.Promise</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node7 [shape=diamond, label=<<font color="black">(= done.Type CONST_normal)</font>> color="black" fillcolor="white" style=filled]
  node18 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">value = value.Value</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return __x1__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node8 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">done = done.Value</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node4 [shape=cds, label=<<font color="black">0:app __x0__ = (IteratorComplete result)</font>> color="black" fillcolor="white" style=filled]
  node15 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">2:let value = __x2__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node24 [shape=cds, label=<<font color="black">4:app __x4__ = (PromiseResolve INTRINSIC_Promise value)</font>> color="black" fillcolor="white" style=filled]
  node37 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">9:[! __x7__]</td></tr>
      <tr><td align="left">10:return promiseCapability.Promise</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node25 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">4:let valueWrapper = __x4__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node20 [shape=diamond, label=<<font color="black">(&amp;&amp; (is-completion __x3__) (! (= __x3__.Type CONST_normal)))</font>> color="black" fillcolor="white" style=filled]
  node29 [shape=cds, label=<<font color="black">app __x5__ = (Call promiseCapability.Reject undefined (new [valueWrapper.Value]))</font>> color="black" fillcolor="white" style=filled]
  node28 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">valueWrapper = valueWrapper.Value</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node21 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return __x3__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node33 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">5:valueWrapper</td></tr>
      <tr><td align="left">6:??? &quot;Let id:{steps} be the algorithm steps defined in link:{unhandled: sec-async-from-sync-iterator-value-unwrap-functions} .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17 [shape=diamond, label=<<font color="black">(= value.Type CONST_normal)</font>> color="black" fillcolor="white" style=filled]
  node32 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return promiseCapability.Promise</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node34 [shape=cds, label=<<font color="black">7:app __x6__ = (CreateBuiltinFunction steps (new [&quot;Done&quot;]))</font>> color="black" fillcolor="white" style=filled]
  node22 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return promiseCapability.Promise</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node27 [shape=diamond, label=<<font color="black">(= valueWrapper.Type CONST_normal)</font>> color="black" fillcolor="white" style=filled]
  node3 [shape=cds, label=<<font color="black">app promiseCapability = (GetArgument argumentsList 1i)</font>> color="black" fillcolor="white" style=filled]
  node35 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">7:let onFulfilled = [! __x6__]</td></tr>
      <tr><td align="left">8:onFulfilled.Done = done</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16 [shape=diamond, label=<<font color="black">(is-completion value)</font>> color="black" fillcolor="white" style=filled]
  node31 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return __x5__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node26 [shape=diamond, label=<<font color="black">(is-completion valueWrapper)</font>> color="black" fillcolor="white" style=filled]
  node23 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">3:value</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node36 [shape=cds, label=<<font color="black">9:app __x7__ = (PerformPromiseThen valueWrapper onFulfilled undefined promiseCapability)</font>> color="black" fillcolor="white" style=filled]
  node30 [shape=diamond, label=<<font color="black">(&amp;&amp; (is-completion __x5__) (! (= __x5__.Type CONST_normal)))</font>> color="black" fillcolor="white" style=filled]
  node19 [shape=cds, label=<<font color="black">app __x3__ = (Call promiseCapability.Reject undefined (new [value.Value]))</font>> color="black" fillcolor="white" style=filled]
  node29 -> node30 [ color="black"]
  node34 -> node35 [ color="black"]
  node7 -> node8 [label=<<font color="black">true</font>> color="black"]
  node7 -> node9 [label=<<font color="black">false</font>> color="black"]
  node12 -> node13 [ color="black"]
  node0 -> node2 [ color="black"]
  node9 -> node10 [ color="black"]
  node30 -> node31 [label=<<font color="black">true</font>> color="black"]
  node30 -> node32 [label=<<font color="black">false</font>> color="black"]
  node8 -> node13 [ color="black"]
  node25 -> node26 [ color="black"]
  node24 -> node25 [ color="black"]
  node18 -> node23 [ color="black"]
  node5 -> node6 [ color="black"]
  node3 -> node4 [ color="black"]
  node10 -> node11 [label=<<font color="black">true</font>> color="black"]
  node10 -> node12 [label=<<font color="black">false</font>> color="black"]
  node37 -> node1 [ color="black"]
  node2 -> node3 [ color="black"]
  node15 -> node16 [ color="black"]
  node6 -> node7 [label=<<font color="black">true</font>> color="black"]
  node6 -> node13 [label=<<font color="black">false</font>> color="black"]
  node11 -> node12 [ color="black"]
  node19 -> node20 [ color="black"]
  node13 -> node14 [ color="black"]
  node35 -> node36 [ color="black"]
  node36 -> node37 [ color="black"]
  node22 -> node23 [ color="black"]
  node23 -> node24 [ color="black"]
  node14 -> node15 [ color="black"]
  node31 -> node32 [ color="black"]
  node28 -> node33 [ color="black"]
  node27 -> node28 [label=<<font color="black">true</font>> color="black"]
  node27 -> node29 [label=<<font color="black">false</font>> color="black"]
  node20 -> node21 [label=<<font color="black">true</font>> color="black"]
  node20 -> node22 [label=<<font color="black">false</font>> color="black"]
  node4 -> node5 [ color="black"]
  node26 -> node27 [label=<<font color="black">true</font>> color="black"]
  node26 -> node33 [label=<<font color="black">false</font>> color="black"]
  node21 -> node22 [ color="black"]
  node32 -> node33 [ color="black"]
  node16 -> node17 [label=<<font color="black">true</font>> color="black"]
  node16 -> node23 [label=<<font color="black">false</font>> color="black"]
  node33 -> node34 [ color="black"]
  node17 -> node18 [label=<<font color="black">true</font>> color="black"]
  node17 -> node19 [label=<<font color="black">false</font>> color="black"]
}
