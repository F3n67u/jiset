{
  app __x0__ = (NewPromiseCapability INTRINSIC_Promise)
  let promiseCapability = [! __x0__]
  app __x1__ = (AsyncGeneratorValidate generator generatorBrand)
  let check = __x1__
  app __x2__ = (IsAbruptCompletion check)
  if __x2__ {
    let badGeneratorError = (new OrdinaryObject())
    app __x3__ = (Call promiseCapability.Reject undefined (new [badGeneratorError]))
    [! __x3__]
    return promiseCapability.Promise
  } else {}
  let queue = generator.AsyncGeneratorQueue
  let request = (new AsyncGeneratorRequest("Completion" -> completion, "Capability" -> promiseCapability))
  append request -> queue
  let state = generator.AsyncGeneratorState
  if (! (= state CONST_executing)) {
    app __x4__ = (AsyncGeneratorResumeNext generator)
    [! __x4__]
  } else {}
  return promiseCapability.Promise
}