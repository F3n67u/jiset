{
  [0] app __x0__ = (Type x)
  [0] app __x1__ = (Type y)
  [0] if (= __x0__ __x1__) {
    [1] app __x2__ = (StrictEqualityComparison x y)
    [1] app __x3__ = (WrapCompletion __x2__)
    [1] return __x3__
  } else [23] {}
  [2] if (&& (= x null) (= y undefined)) {
    app __x4__ = (WrapCompletion true)
    return __x4__
  } else [23] {}
  [3] if (&& (= x undefined) (= y null)) {
    app __x5__ = (WrapCompletion true)
    return __x5__
  } else [23] {}
  [4] app __x6__ = (Type x)
  [4] let __x7__ = (= __x6__ Number)
  [4] if __x7__ {
    app __x8__ = (Type y)
    __x7__ = (= __x8__ String)
  } else [23] {}
  [4] if __x7__ {
    app __x9__ = (ToNumber y)
    if (is-completion __x9__) if (= __x9__.Type CONST_normal) __x9__ = __x9__.Value else return __x9__ else [23] {}
    app __x10__ = (AbstractEqualityComparison x __x9__)
    app __x11__ = (WrapCompletion __x10__)
    return __x11__
  } else [23] {}
  [5] app __x12__ = (Type x)
  [5] let __x13__ = (= __x12__ String)
  [5] if __x13__ {
    app __x14__ = (Type y)
    __x13__ = (= __x14__ Number)
  } else [23] {}
  [5] if __x13__ {
    app __x15__ = (ToNumber x)
    if (is-completion __x15__) if (= __x15__.Type CONST_normal) __x15__ = __x15__.Value else return __x15__ else [23] {}
    app __x16__ = (AbstractEqualityComparison __x15__ y)
    app __x17__ = (WrapCompletion __x16__)
    return __x17__
  } else [23] {}
  [6] app __x18__ = (Type x)
  [6] let __x19__ = (= __x18__ BigInt)
  [6] if __x19__ {
    app __x20__ = (Type y)
    __x19__ = (= __x20__ String)
  } else [23] {}
  [6] if __x19__ {
    [7] app __x21__ = (StringToBigInt y)
    [7] if (is-completion __x21__) if (= __x21__.Type CONST_normal) __x21__ = __x21__.Value else return __x21__ else [23] {}
    [7] let n = __x21__
    [8] if (= n NaN) {
      app __x22__ = (WrapCompletion false)
      return __x22__
    } else [23] {}
    [9] app __x23__ = (AbstractEqualityComparison x n)
    [9] app __x24__ = (WrapCompletion __x23__)
    [9] return __x24__
  } else [23] {}
  [10] app __x25__ = (Type x)
  [10] let __x26__ = (= __x25__ String)
  [10] if __x26__ {
    app __x27__ = (Type y)
    __x26__ = (= __x27__ BigInt)
  } else [23] {}
  [10] if __x26__ {
    app __x28__ = (AbstractEqualityComparison y x)
    app __x29__ = (WrapCompletion __x28__)
    return __x29__
  } else [23] {}
  [11] app __x30__ = (Type x)
  [11] if (= __x30__ Boolean) {
    app __x31__ = (ToNumber x)
    if (is-completion __x31__) if (= __x31__.Type CONST_normal) __x31__ = __x31__.Value else return __x31__ else [23] {}
    app __x32__ = (AbstractEqualityComparison __x31__ y)
    app __x33__ = (WrapCompletion __x32__)
    return __x33__
  } else [23] {}
  [12] app __x34__ = (Type y)
  [12] if (= __x34__ Boolean) {
    app __x35__ = (ToNumber y)
    if (is-completion __x35__) if (= __x35__.Type CONST_normal) __x35__ = __x35__.Value else return __x35__ else [23] {}
    app __x36__ = (AbstractEqualityComparison x __x35__)
    app __x37__ = (WrapCompletion __x36__)
    return __x37__
  } else [23] {}
  [13] app __x38__ = (Type x)
  [13] let __x39__ = (|| (|| (|| (= __x38__ String) (= __x38__ Number)) (= __x38__ BigInt)) (= __x38__ Symbol))
  [13] if __x39__ {
    app __x40__ = (Type y)
    __x39__ = (= __x40__ Object)
  } else [23] {}
  [13] if __x39__ {
    app __x41__ = (ToPrimitive y)
    app __x42__ = (AbstractEqualityComparison x __x41__)
    app __x43__ = (WrapCompletion __x42__)
    return __x43__
  } else [23] {}
  [14] app __x44__ = (Type x)
  [14] let __x45__ = (= __x44__ Object)
  [14] if __x45__ {
    app __x46__ = (Type y)
    __x45__ = (|| (|| (|| (= __x46__ String) (= __x46__ Number)) (= __x46__ BigInt)) (= __x46__ Symbol))
  } else [23] {}
  [14] if __x45__ {
    app __x47__ = (ToPrimitive x)
    app __x48__ = (AbstractEqualityComparison __x47__ y)
    app __x49__ = (WrapCompletion __x48__)
    return __x49__
  } else [23] {}
  [15] app __x50__ = (Type x)
  [15] let __x51__ = (= __x50__ BigInt)
  [15] if __x51__ {
    app __x52__ = (Type y)
    let __x53__ = (= __x52__ Number)
    if __x53__ [23] {} else {
      app __x54__ = (Type x)
      let __x55__ = (= __x54__ Number)
      if __x55__ {
        app __x56__ = (Type y)
        __x55__ = (= __x56__ BigInt)
      } else [23] {}
      __x53__ = __x55__
    }
    __x51__ = __x53__
  } else [23] {}
  [15] if __x51__ {
    [16] ??? "If id:{x} or id:{y} are any of value:{NaN} , value:{+∞} , or value:{-∞} , return value:{false} ."
    [17] ??? "If the mathematical value of id:{x} is equal to the mathematical value of id:{y} , return value:{true} ; otherwise return value:{false} ."
  } else [23] {}
  [18] app __x57__ = (WrapCompletion false)
  [18] return __x57__
}