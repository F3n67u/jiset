{
  let __x0__ = true
  access __x1__ = (AsyncFunctionBody "ContainsUseStrict")
  __x0__ = (= __x1__ true)
  if __x0__ {
    access __x2__ = (FormalParameters "IsSimpleParameterList")
    __x0__ = (= __x2__ false)
  } else {}
  if __x0__ throw SyntaxError else return undefined
  access __x3__ = (FormalParameters "Contains")
  app __x4__ = (__x3__ "AwaitExpression")
  if (= __x4__ true) throw SyntaxError else return undefined
  ??? "If the source code matching this production is strict code , the Early Error rules for grammar:{UniqueFormalParameters0, [FormalParameters]} are applied ."
  ??? "If the source code matching this production is strict code , it is a Syntax Error if nt:{BindingIdentifier} is the nt:{IdentifierName} code:{eval} or the nt:{IdentifierName} code:{arguments} ."
  access __x5__ = (FormalParameters "BoundNames")
  access __x6__ = (AsyncFunctionBody "LexicallyDeclaredNames")
  let __x7__ = __x5__
  let __x8__ = __x6__
  let __x9__ = 0i
  let __x10__ = 0i
  let __x11__ = false
  while (< __x9__ __x7__.length) {
    __x10__ = 0i
    while (< __x10__ __x8__.length) if (= __x7__[__x9__] __x8__[__x10__]) __x11__ = true else {}
  }
  if __x11__ throw SyntaxError else return undefined
  access __x12__ = (FormalParameters "Contains")
  app __x13__ = (__x12__ "SuperProperty")
  if (= __x13__ true) throw SyntaxError else return undefined
  access __x14__ = (AsyncFunctionBody "Contains")
  app __x15__ = (__x14__ "SuperProperty")
  if (= __x15__ true) throw SyntaxError else return undefined
  access __x16__ = (FormalParameters "Contains")
  app __x17__ = (__x16__ "SuperCall")
  if (= __x17__ true) throw SyntaxError else return undefined
  access __x18__ = (AsyncFunctionBody "Contains")
  app __x19__ = (__x18__ "SuperCall")
  if (= __x19__ true) throw SyntaxError else return undefined
}