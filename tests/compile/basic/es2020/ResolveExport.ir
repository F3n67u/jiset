{
  if (= resolveSet absent) resolveSet = (new []) else {}
  let module = this
  let __x0__ = resolveSet
  let __x1__ = 0i
  while (< __x1__ __x0__.length) {
    let r = __x0__[__x1__]
    let __x2__ = (= module r.Module)
    if __x2__ {
      app __x3__ = (SameValue exportName r.ExportName)
      __x2__ = (= __x3__ true)
    } else {}
    if __x2__ {
      app __x4__ = (WrapCompletion null)
      return __x4__
    } else {}
    __x1__ = (+ __x1__ 1i)
  }
  append (new Record("Module" -> module, "ExportName" -> exportName)) -> resolveSet
  let __x5__ = module.LocalExportEntries
  let __x6__ = 0i
  while (< __x6__ __x5__.length) {
    let e = __x5__[__x6__]
    app __x7__ = (SameValue exportName e.ExportName)
    if (= __x7__ true) {
      app __x8__ = (WrapCompletion (new ResolvedBindingRecord("Module" -> module, "BindingName" -> e.LocalName)))
      return __x8__
    } else {}
    __x6__ = (+ __x6__ 1i)
  }
  let __x9__ = module.IndirectExportEntries
  let __x10__ = 0i
  while (< __x10__ __x9__.length) {
    let e = __x9__[__x10__]
    app __x11__ = (SameValue exportName e.ExportName)
    if (= __x11__ true) {
      app __x12__ = (HostResolveImportedModule module e.ModuleRequest)
      if (is-completion __x12__) if (= __x12__.Type CONST_normal) __x12__ = __x12__.Value else return __x12__ else {}
      let importedModule = __x12__
      ??? "If id:{e} . [ [ ImportName ] ] is value:{\"\\} \" * , then in:{} out:{}"
      ??? "Else , in:{} out:{}"
    } else {}
    __x10__ = (+ __x10__ 1i)
  }
  app __x13__ = (SameValue exportName "default")
  if (= __x13__ true) {
    app __x14__ = (WrapCompletion null)
    return __x14__
  } else {}
  let starResolution = null
  let __x15__ = module.StarExportEntries
  let __x16__ = 0i
  while (< __x16__ __x15__.length) {
    let e = __x15__[__x16__]
    app __x17__ = (HostResolveImportedModule module e.ModuleRequest)
    if (is-completion __x17__) if (= __x17__.Type CONST_normal) __x17__ = __x17__.Value else return __x17__ else {}
    let importedModule = __x17__
    app __x18__ = (importedModule.ResolveExport importedModule exportName resolveSet)
    if (is-completion __x18__) if (= __x18__.Type CONST_normal) __x18__ = __x18__.Value else return __x18__ else {}
    let resolution = __x18__
    if (= resolution "ambiguous") {
      app __x19__ = (WrapCompletion "ambiguous")
      return __x19__
    } else {}
    if (! (= resolution null)) {
      assert (= (typeof resolution) "ResolvedBindingRecord")
      if (= starResolution null) starResolution = resolution else {
        let __x20__ = (! (= resolution.Module starResolution.Module))
        if __x20__ {} else {
          app __x21__ = (SameValue resolution.BindingName starResolution.BindingName)
          __x20__ = (= __x21__ false)
        }
        if __x20__ {
          app __x22__ = (WrapCompletion "ambiguous")
          return __x22__
        } else {}
      }
    } else {}
    __x16__ = (+ __x16__ 1i)
  }
  app __x23__ = (WrapCompletion starResolution)
  return __x23__
}