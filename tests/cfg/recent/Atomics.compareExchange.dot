digraph {
  node18284 [shape=cds, label=<<font color="black">8:app __x4__ = (ToIntegerOrInfinity expectedValue)</font>> color="black" fillcolor="white" style=filled]
  node18304 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">32:??? &quot;Let id:{rawBytesRead} be a List of length id:{elementSize} whose elements are the sequence of id:{elementSize} bytes starting with id:{block} [ id:{indexedPosition} ] .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18269 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node18292 [shape=cds, label=<<font color="black">15:app __x7__ = (NumericToRawBytes elementType expected isLittleEndian)</font>> color="black" fillcolor="white" style=filled]
  node18296 [shape=cds, label=<<font color="black">31:app __x9__ = (IsSharedArrayBuffer buffer)</font>> color="black" fillcolor="white" style=filled]
  node18286 [shape=cds, label=<<font color="black">9:app __x5__ = (ToIntegerOrInfinity replacementValue)</font>> color="black" fillcolor="white" style=filled]
  node18300 [shape=diamond, label=<<font color="black">(= __x10__ true)</font>> color="black" fillcolor="white" style=filled]
  node18283 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">6:let replacement = [? __x3__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18308 [shape=cds, label=<<font color="black">35:app __x12__ = (RawBytesToNumeric elementType rawBytesRead isLittleEndian)</font>> color="black" fillcolor="white" style=filled]
  node18280 [shape=cds, label=<<font color="black">5:app __x2__ = (ToBigInt expectedValue)</font>> color="black" fillcolor="white" style=filled]
  node18302 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let event = (new ReadSharedMemory(&quot;Order&quot; -&gt; CONST_SeqCst, &quot;NoTear&quot; -&gt; true, &quot;Block&quot; -&gt; block, &quot;ByteIndex&quot; -&gt; indexedPosition, &quot;ElementSize&quot; -&gt; elementSize))</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18282 [shape=cds, label=<<font color="black">6:app __x3__ = (ToBigInt replacementValue)</font>> color="black" fillcolor="white" style=filled]
  node18294 [shape=cds, label=<<font color="black">16:app __x8__ = (NumericToRawBytes elementType replacement isLittleEndian)</font>> color="black" fillcolor="white" style=filled]
  node18275 [shape=cds, label=<<font color="black">0:app __x0__ = (ValidateIntegerTypedArray typedArray)</font>> color="black" fillcolor="white" style=filled]
  node18290 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18295 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">16:let replacementBytes = __x8__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18281 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">5:let expected = [? __x2__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18288 [shape=cds, label=<<font color="black">10:app __x6__ = (IsDetachedBuffer buffer)</font>> color="black" fillcolor="white" style=filled]
  node18278 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">2:let indexedPosition = [? __x1__]</td></tr>
      <tr><td align="left">3:let arrayTypeName = typedArray.TypedArrayName</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18291 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">12:??? &quot;Let id:{elementType} be the Element Type value in link:{unhandled: table-the-typedarray-constructors} for id:{arrayTypeName} .&quot;</td></tr>
      <tr><td align="left">13:??? &quot;Let id:{elementSize} be the Element Size value specified in link:{unhandled: table-the-typedarray-constructors} for Element Type id:{elementType} .&quot;</td></tr>
      <tr><td align="left">14:let isLittleEndian = GLOBAL_agent.LittleEndian</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18285 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">8:let expected = [? __x4__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18279 [shape=diamond, label=<<font color="black">(= typedArray.ContentType CONST_BigInt)</font>> color="black" fillcolor="white" style=filled]
  node18272 [shape=cds, label=<<font color="black">app index = (GetArgument argumentsList 1i)</font>> color="black" fillcolor="white" style=filled]
  node18297 [shape=diamond, label=<<font color="black">(= __x9__ true)</font>> color="black" fillcolor="white" style=filled]
  node18273 [shape=cds, label=<<font color="black">app expectedValue = (GetArgument argumentsList 2i)</font>> color="black" fillcolor="white" style=filled]
  node18301 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">24:??? &quot;Let id:{second} be a new read - modify - write modification function with parameters ( id:{oldBytes} , id:{newBytes} ) that captures nothing and performs the following steps atomically when called : in:{} out:{}&quot;</td></tr>
      <tr><td align="left">26:let event = (new ReadModifyWriteSharedMemory(&quot;Order&quot; -&gt; CONST_SeqCst, &quot;NoTear&quot; -&gt; true, &quot;Block&quot; -&gt; block, &quot;ByteIndex&quot; -&gt; indexedPosition, &quot;ElementSize&quot; -&gt; elementSize, &quot;Payload&quot; -&gt; replacementBytes, &quot;ModifyOp&quot; -&gt; second))</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18293 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">15:let expectedBytes = __x7__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18303 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">29:append event -&gt; eventList</td></tr>
      <tr><td align="left">30:append (new ChosenValueRecord(&quot;Event&quot; -&gt; event, &quot;ChosenValue&quot; -&gt; rawBytesRead)) -&gt; execution.ChosenValues</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18306 [shape=diamond, label=<<font color="black">(= __x11__ true)</font>> color="black" fillcolor="white" style=filled]
  node18287 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">9:let replacement = [? __x5__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18289 [shape=diamond, label=<<font color="black">(= __x6__ true)</font>> color="black" fillcolor="white" style=filled]
  node18274 [shape=cds, label=<<font color="black">app replacementValue = (GetArgument argumentsList 3i)</font>> color="black" fillcolor="white" style=filled]
  node18276 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let buffer = [? __x0__]</td></tr>
      <tr><td align="left">1:let block = buffer.ArrayBufferData</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18299 [shape=cds, label=<<font color="black">27:app __x10__ = (ByteListEqual rawBytesRead expectedBytes)</font>> color="black" fillcolor="white" style=filled]
  node18309 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">35:return __x12__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18277 [shape=cds, label=<<font color="black">2:app __x1__ = (ValidateAtomicAccess typedArray index)</font>> color="black" fillcolor="white" style=filled]
  node18270 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node18271 [shape=cds, label=<<font color="black">app typedArray = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node18307 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">??? &quot;Store the individual bytes of id:{replacementBytes} into id:{block} , starting at id:{block} [ id:{indexedPosition} ] .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18298 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">18:let execution = GLOBAL_agent.CandidateExecution</td></tr>
      <tr><td align="left">19:??? &quot;Let id:{eventList} be the [ [ EventList ] ] field of the element in id:{execution} . [ [ EventsRecords ] ] whose [ [ AgentSignifier ] ] is AgentSignifier ( ) .&quot;</td></tr>
      <tr><td align="left">20:??? &quot;Let id:{rawBytesRead} be a List of length id:{elementSize} whose elements are nondeterministically chosen byte values .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18305 [shape=cds, label=<<font color="black">33:app __x11__ = (ByteListEqual rawBytesRead expectedBytes)</font>> color="black" fillcolor="white" style=filled]
  node18271 -> node18272 [ color="black"]
  node18293 -> node18294 [ color="black"]
  node18282 -> node18283 [ color="black"]
  node18286 -> node18287 [ color="black"]
  node18291 -> node18292 [ color="black"]
  node18306 -> node18307 [label=<<font color="black">true</font>> color="black"]
  node18306 -> node18308 [label=<<font color="black">false</font>> color="black"]
  node18309 -> node18270 [ color="black"]
  node18292 -> node18293 [ color="black"]
  node18280 -> node18281 [ color="black"]
  node18275 -> node18276 [ color="black"]
  node18303 -> node18308 [ color="black"]
  node18302 -> node18303 [ color="black"]
  node18283 -> node18288 [ color="black"]
  node18297 -> node18298 [label=<<font color="black">true</font>> color="black"]
  node18297 -> node18304 [label=<<font color="black">false</font>> color="black"]
  node18300 -> node18301 [label=<<font color="black">true</font>> color="black"]
  node18300 -> node18302 [label=<<font color="black">false</font>> color="black"]
  node18273 -> node18274 [ color="black"]
  node18294 -> node18295 [ color="black"]
  node18289 -> node18290 [label=<<font color="black">true</font>> color="black"]
  node18289 -> node18291 [label=<<font color="black">false</font>> color="black"]
  node18290 -> node18291 [ color="black"]
  node18308 -> node18309 [ color="black"]
  node18285 -> node18286 [ color="black"]
  node18295 -> node18296 [ color="black"]
  node18299 -> node18300 [ color="black"]
  node18284 -> node18285 [ color="black"]
  node18278 -> node18279 [ color="black"]
  node18269 -> node18271 [ color="black"]
  node18276 -> node18277 [ color="black"]
  node18305 -> node18306 [ color="black"]
  node18281 -> node18282 [ color="black"]
  node18272 -> node18273 [ color="black"]
  node18307 -> node18308 [ color="black"]
  node18301 -> node18303 [ color="black"]
  node18288 -> node18289 [ color="black"]
  node18277 -> node18278 [ color="black"]
  node18279 -> node18280 [label=<<font color="black">true</font>> color="black"]
  node18279 -> node18284 [label=<<font color="black">false</font>> color="black"]
  node18298 -> node18299 [ color="black"]
  node18304 -> node18305 [ color="black"]
  node18287 -> node18288 [ color="black"]
  node18274 -> node18275 [ color="black"]
  node18296 -> node18297 [ color="black"]
}
