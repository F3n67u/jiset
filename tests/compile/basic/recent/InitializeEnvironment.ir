{
  let __x0__ = module.IndirectExportEntries
  let __x1__ = 0i
  while (< __x1__ __x0__.length) {
    let e = __x0__[__x1__]
    app __x2__ = (module.ResolveExport module e.ExportName)
    if (is-completion __x2__) if (= __x2__.Type CONST_normal) __x2__ = __x2__.Value else return __x2__ else {}
    let resolution = __x2__
    if (|| (= resolution null) (= resolution "ambiguous")) {
      app __x3__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_SyntaxError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
      return __x3__
    } else {}
    assert (= (typeof resolution) "ResolvedBindingRecord")
    __x1__ = (+ __x1__ 1i)
  }
  let realm = module.Realm
  assert (! (= realm undefined))
  app __x4__ = (NewModuleEnvironment realm.GlobalEnv)
  let env = __x4__
  module.Environment = env
  let __x5__ = module.ImportEntries
  let __x6__ = 0i
  while (< __x6__ __x5__.length) {
    let in = __x5__[__x6__]
    app __x7__ = (HostResolveImportedModule module in.ModuleRequest)
    if (is-completion __x7__) if (= __x7__.Type CONST_normal) __x7__ = __x7__.Value else return __x7__ else {}
    let importedModule = __x7__
    ??? "If id:{in} . [ [ ImportName ] ] is value:{\"\\} \" * , then step-list:{...}"
    ??? "Else , step-list:{...}"
    __x6__ = (+ __x6__ 1i)
  }
  let moduleContext = (new ExecutionContext("SubMap" -> (new SubMap())))
  moduleContext.Function = null
  assert (! (= module.Realm undefined))
  moduleContext.Realm = module.Realm
  moduleContext.ScriptOrModule = module
  moduleContext.VariableEnvironment = module.Environment
  moduleContext.LexicalEnvironment = module.Environment
  module.Context = moduleContext
  append moduleContext -> GLOBAL_executionStack
  GLOBAL_context = GLOBAL_executionStack[(- GLOBAL_executionStack.length 1i)]
  let code = module.ECMAScriptCode
  access __x8__ = (code "VarScopedDeclarations")
  let varDeclarations = __x8__
  let declaredVarNames = (new [])
  let __x9__ = varDeclarations
  let __x10__ = 0i
  while (< __x10__ __x9__.length) {
    let d = __x9__[__x10__]
    access __x11__ = (d "BoundNames")
    let __x12__ = __x11__
    let __x13__ = 0i
    while (< __x13__ __x12__.length) {
      let dn = __x12__[__x13__]
      if (! (contains declaredVarNames dn)) {
        app __x14__ = (env.CreateMutableBinding env dn false)
        if (is-completion __x14__) if (= __x14__.Type CONST_normal) __x14__ = __x14__.Value else return __x14__ else {}
        __x14__
        app __x15__ = (env.InitializeBinding env dn undefined)
        __x15__
        append dn -> declaredVarNames
      } else {}
      __x13__ = (+ __x13__ 1i)
    }
    __x10__ = (+ __x10__ 1i)
  }
  access __x16__ = (code "LexicallyScopedDeclarations")
  let lexDeclarations = __x16__
  let __x17__ = lexDeclarations
  let __x18__ = 0i
  while (< __x18__ __x17__.length) {
    let d = __x17__[__x18__]
    access __x19__ = (d "BoundNames")
    let __x20__ = __x19__
    let __x21__ = 0i
    while (< __x21__ __x20__.length) {
      let dn = __x20__[__x21__]
      access __x22__ = (d "IsConstantDeclaration")
      if (= __x22__ true) {
        app __x23__ = (env.CreateImmutableBinding env dn true)
        if (is-completion __x23__) if (= __x23__.Type CONST_normal) __x23__ = __x23__.Value else return __x23__ else {}
        __x23__
      } else {
        app __x24__ = (env.CreateMutableBinding env dn false)
        if (is-completion __x24__) if (= __x24__.Type CONST_normal) __x24__ = __x24__.Value else return __x24__ else {}
        __x24__
      }
      if (|| (|| (|| (is-instance-of d FunctionDeclaration) (is-instance-of d GeneratorDeclaration)) (is-instance-of d AsyncFunctionDeclaration)) (is-instance-of d AsyncGeneratorDeclaration)) {
        access __x25__ = (d "InstantiateFunctionObject")
        app __x26__ = (__x25__ env)
        let fo = __x26__
        app __x27__ = (env.InitializeBinding env dn fo)
        __x27__
      } else {}
      __x21__ = (+ __x21__ 1i)
    }
    __x18__ = (+ __x18__ 1i)
  }
  ??? "Remove id:{moduleContext} from the execution context stack ."
  app __x28__ = (NormalCompletion CONST_empty)
  app __x29__ = (WrapCompletion __x28__)
  return __x29__
}