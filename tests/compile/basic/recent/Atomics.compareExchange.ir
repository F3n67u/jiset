{
  app __x0__ = (ValidateIntegerTypedArray typedArray)
  if (is-completion __x0__) if (= __x0__.Type CONST_normal) __x0__ = __x0__.Value else return __x0__ else {}
  let buffer = __x0__
  let block = buffer.ArrayBufferData
  app __x1__ = (ValidateAtomicAccess typedArray index)
  if (is-completion __x1__) if (= __x1__.Type CONST_normal) __x1__ = __x1__.Value else return __x1__ else {}
  let indexedPosition = __x1__
  let arrayTypeName = typedArray.TypedArrayName
  if (= typedArray.ContentType CONST_BigInt) {
    app __x2__ = (ToBigInt expectedValue)
    if (is-completion __x2__) if (= __x2__.Type CONST_normal) __x2__ = __x2__.Value else return __x2__ else {}
    let expected = __x2__
    app __x3__ = (ToBigInt replacementValue)
    if (is-completion __x3__) if (= __x3__.Type CONST_normal) __x3__ = __x3__.Value else return __x3__ else {}
    let replacement = __x3__
  } else {
    app __x4__ = (ToIntegerOrInfinity expectedValue)
    if (is-completion __x4__) if (= __x4__.Type CONST_normal) __x4__ = __x4__.Value else return __x4__ else {}
    let expected = __x4__
    app __x5__ = (ToIntegerOrInfinity replacementValue)
    if (is-completion __x5__) if (= __x5__.Type CONST_normal) __x5__ = __x5__.Value else return __x5__ else {}
    let replacement = __x5__
  }
  app __x6__ = (IsDetachedBuffer buffer)
  if (= __x6__ true) {
    app __x7__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_TypeError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
    return __x7__
  } else {}
  ??? "Let id:{elementType} be the Element Type value in link:{unhandled: table-the-typedarray-constructors} for id:{arrayTypeName} ."
  ??? "Let id:{elementSize} be the Element Size value specified in link:{unhandled: table-the-typedarray-constructors} for Element Type id:{elementType} ."
  let isLittleEndian = GLOBAL_agent.LittleEndian
  app __x8__ = (NumericToRawBytes elementType expected isLittleEndian)
  let expectedBytes = __x8__
  app __x9__ = (NumericToRawBytes elementType replacement isLittleEndian)
  let replacementBytes = __x9__
  app __x10__ = (IsSharedArrayBuffer buffer)
  if (= __x10__ true) {
    let execution = GLOBAL_agent.CandidateExecution
    ??? "Let id:{eventList} be the [ [ EventList ] ] field of the element in id:{execution} . [ [ EventsRecords ] ] whose [ [ AgentSignifier ] ] is AgentSignifier ( ) ."
    ??? "Let id:{rawBytesRead} be a List of length id:{elementSize} whose elements are nondeterministically chosen byte values ."
    app __x11__ = (ByteListEqual rawBytesRead expectedBytes)
    if (= __x11__ true) {
      ??? "Let id:{second} be a new read - modify - write modification function with parameters ( id:{oldBytes} , id:{newBytes} ) that captures nothing and performs the following steps atomically when called : in:{} out:{}"
      let event = (new ReadModifyWriteSharedMemory("Order" -> CONST_SeqCst, "NoTear" -> true, "Block" -> block, "ByteIndex" -> indexedPosition, "ElementSize" -> elementSize, "Payload" -> replacementBytes, "ModifyOp" -> second))
    } else let event = (new ReadSharedMemory("Order" -> CONST_SeqCst, "NoTear" -> true, "Block" -> block, "ByteIndex" -> indexedPosition, "ElementSize" -> elementSize))
    append event -> eventList
    append (new ChosenValueRecord("Event" -> event, "ChosenValue" -> rawBytesRead)) -> execution.ChosenValues
  } else {
    ??? "Let id:{rawBytesRead} be a List of length id:{elementSize} whose elements are the sequence of id:{elementSize} bytes starting with id:{block} [ id:{indexedPosition} ] ."
    app __x12__ = (ByteListEqual rawBytesRead expectedBytes)
    if (= __x12__ true) ??? "Store the individual bytes of id:{replacementBytes} into id:{block} , starting at id:{block} [ id:{indexedPosition} ] ." else {}
  }
  app __x13__ = (RawBytesToNumeric elementType rawBytesRead isLittleEndian)
  app __x14__ = (WrapCompletion __x13__)
  return __x14__
}