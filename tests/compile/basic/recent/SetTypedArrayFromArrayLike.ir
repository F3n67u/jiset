{
  let targetBuffer = target.ViewedArrayBuffer
  app __x0__ = (IsDetachedBuffer targetBuffer)
  if (= __x0__ true) throw INTRINSIC_TypeError else {}
  let targetLength = target.ArrayLength
  let targetName = target.TypedArrayName
  ??? "Let id:{targetElementSize} be the Element Size value specified in link:{unhandled: table-the-typedarray-constructors} for id:{targetName} ."
  ??? "Let id:{targetType} be the Element Type value in link:{unhandled: table-the-typedarray-constructors} for id:{targetName} ."
  let targetByteOffset = target.ByteOffset
  app __x1__ = (ToObject source)
  let src = [? __x1__]
  app __x2__ = (LengthOfArrayLike src)
  let srcLength = [? __x2__]
  if (= targetOffset Infinity) throw INTRINSIC_RangeError else {}
  if (< targetLength (+ srcLength targetOffset)) throw INTRINSIC_RangeError else {}
  let targetByteIndex = (+ (* targetOffset targetElementSize) targetByteOffset)
  let k = 0i
  let limit = (* (+ targetByteIndex targetElementSize) srcLength)
  while (< targetByteIndex limit) {
    app __x3__ = (ToString k)
    let Pk = [! __x3__]
    app __x4__ = (Get src Pk)
    let value = [? __x4__]
    if (= target.ContentType CONST_BigInt) {
      app __x5__ = (ToBigInt value)
      value = [? __x5__]
    } else {
      app __x6__ = (ToNumber value)
      value = [? __x6__]
    }
    app __x7__ = (IsDetachedBuffer targetBuffer)
    if (= __x7__ true) throw INTRINSIC_TypeError else {}
    app __x8__ = (SetValueInBuffer targetBuffer targetByteIndex targetType value true CONST_Unordered)
    __x8__
    k = (+ k 1i)
    targetByteIndex = (+ targetByteIndex targetElementSize)
  }
}