digraph {
  node12286 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">14:return __x3__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12291 [shape=cds, label=<<font color="black">17:app __x5__ = (c x)</font>> color="black" fillcolor="white" style=filled]
  node12275 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return __x0__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12279 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return __x1__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12282 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">12:let z = __x2__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12277 [shape=diamond, label=<<font color="black">(! (= min 0i))</font>> color="black" fillcolor="white" style=filled]
  node12273 [shape=diamond, label=<<font color="black">(= max 0i)</font>> color="black" fillcolor="white" style=filled]
  node12281 [shape=cds, label=<<font color="black">12:app __x2__ = (c x)</font>> color="black" fillcolor="white" style=filled]
  node12276 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">1:??? &quot;Create an internal Continuation closure id:{d} that takes one State argument id:{y} and performs the following steps when evaluated : in:{} out:{}&quot;</td></tr>
      <tr><td align="left">6:??? &quot;Let id:{cap} be a fresh copy of id:{x} ' s id:{captures} List .&quot;</td></tr>
      <tr><td align="left">7:??? &quot;For every integer id:{k} that satisfies id:{parenIndex} &lt; id:{k} and id:{k} &le; id:{parenIndex} + id:{parenCount} , set id:{cap} [ id:{k} ] to value:{undefined} .&quot;</td></tr>
      <tr><td align="left">8:let e = x.endIndex</td></tr>
      <tr><td align="left">9:let xr = (new [e, cap])</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12290 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return z</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12287 [shape=cds, label=<<font color="black">15:app __x4__ = (m xr d)</font>> color="black" fillcolor="white" style=filled]
  node12280 [shape=diamond, label=<<font color="black">(= greedy false)</font>> color="black" fillcolor="white" style=filled]
  node12278 [shape=cds, label=<<font color="black">app __x1__ = (m xr d)</font>> color="black" fillcolor="white" style=filled]
  node12284 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return z</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12274 [shape=cds, label=<<font color="black">app __x0__ = (c x)</font>> color="black" fillcolor="white" style=filled]
  node12288 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">15:let z = __x4__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12283 [shape=diamond, label=<<font color="black">(! (= z CONST_failure))</font>> color="black" fillcolor="white" style=filled]
  node12289 [shape=diamond, label=<<font color="black">(! (= z CONST_failure))</font>> color="black" fillcolor="white" style=filled]
  node12271 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node12292 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">17:return __x5__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12285 [shape=cds, label=<<font color="black">14:app __x3__ = (m xr d)</font>> color="black" fillcolor="white" style=filled]
  node12272 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node12271 -> node12273 [ color="black"]
  node12291 -> node12292 [ color="black"]
  node12288 -> node12289 [ color="black"]
  node12274 -> node12275 [ color="black"]
  node12276 -> node12277 [ color="black"]
  node12275 -> node12276 [ color="black"]
  node12281 -> node12282 [ color="black"]
  node12273 -> node12274 [label=<<font color="black">true</font>> color="black"]
  node12273 -> node12276 [label=<<font color="black">false</font>> color="black"]
  node12290 -> node12291 [ color="black"]
  node12284 -> node12285 [ color="black"]
  node12289 -> node12290 [label=<<font color="black">true</font>> color="black"]
  node12289 -> node12291 [label=<<font color="black">false</font>> color="black"]
  node12277 -> node12278 [label=<<font color="black">true</font>> color="black"]
  node12277 -> node12280 [label=<<font color="black">false</font>> color="black"]
  node12279 -> node12280 [ color="black"]
  node12278 -> node12279 [ color="black"]
  node12287 -> node12288 [ color="black"]
  node12292 -> node12272 [ color="black"]
  node12280 -> node12281 [label=<<font color="black">true</font>> color="black"]
  node12280 -> node12287 [label=<<font color="black">false</font>> color="black"]
  node12286 -> node12287 [ color="black"]
  node12282 -> node12283 [ color="black"]
  node12285 -> node12286 [ color="black"]
  node12283 -> node12284 [label=<<font color="black">true</font>> color="black"]
  node12283 -> node12285 [label=<<font color="black">false</font>> color="black"]
}
