{
  [1] let callerContext = GLOBAL_executionStack[(- GLOBAL_executionStack.length 2i)]
  [2] let callerRealm = callerContext.Realm
  [3] let calleeRealm = REALM
  [4] app __x0__ = (HostEnsureCanCompileStrings callerRealm calleeRealm)
  [4] if (is-completion __x0__) if (= __x0__.Type CONST_normal) __x0__ = __x0__.Value else return __x0__ else [73] {}
  [4] __x0__
  [5] if (= newTarget undefined) newTarget = constructor else [73] {}
  [18] if (= kind CONST_normal) {
    [7] ??? "Let id:{goal} be the grammar symbol | FunctionBody [ ~ Yield , ~ Await ] | ."
    [8] ??? "Let id:{parameterGoal} be the grammar symbol | FormalParameters [ ~ Yield , ~ Await ] | ."
    [9] let fallbackProto = "%Function.prototype%"
  } else if (= kind CONST_generator) {
    [11] let goal = "GeneratorBody"
    [12] ??? "Let id:{parameterGoal} be the grammar symbol | FormalParameters [ + Yield , ~ Await ] | ."
    [13] let fallbackProto = "%GeneratorFunction.prototype%"
  } else if (= kind CONST_async) {
    [15] let goal = "AsyncFunctionBody"
    [16] ??? "Let id:{parameterGoal} be the grammar symbol | FormalParameters [ ~ Yield , + Await ] | ."
    [17] let fallbackProto = "%AsyncFunction.prototype%"
  } else {
    [19] assert (= kind CONST_asyncGenerator)
    [20] let goal = "AsyncGeneratorBody"
    [21] ??? "Let id:{parameterGoal} be the grammar symbol | FormalParameters [ + Yield , + Await ] | ."
    [22] let fallbackProto = "%AsyncGeneratorFunction.prototype%"
  }
  [23] let argCount = args.length
  [24] let P = ""
  [27] if (== argCount 0i) let bodyArg = "" else if (== argCount 1i) let bodyArg = args[0i] else {
    [28] assert (< 1i argCount)
    [29] let firstArg = args[0i]
    [30] app __x1__ = (ToString firstArg)
    [30] if (is-completion __x1__) if (= __x1__.Type CONST_normal) __x1__ = __x1__.Value else return __x1__ else [73] {}
    [30] P = __x1__
    [31] let k = 1i
    [32] while (< k (- argCount 1i)) {
      [33] let nextArg = args[k]
      [34] app __x2__ = (ToString nextArg)
      [34] if (is-completion __x2__) if (= __x2__.Type CONST_normal) __x2__ = __x2__.Value else return __x2__ else [73] {}
      [34] let nextArgString = __x2__
      [35] ??? "Set id:{P} to the string - concatenation of id:{P} , value:{\",\"} ( a comma ) , and id:{nextArgString} ."
      [36] k = (+ k 1i)
    }
    [37] let bodyArg = args[k]
  }
  [38] app __x3__ = (ToString bodyArg)
  [38] if (is-completion __x3__) if (= __x3__.Type CONST_normal) __x3__ = __x3__.Value else return __x3__ else [73] {}
  [38] let bodyString = (+ (+ "\n" __x3__) "\n")
  [39] ??? "Let id:{prefix} be the prefix associated with id:{kind} in link:{} ."
  [40] ??? "Let id:{sourceString} be the string - concatenation of id:{prefix} , * \" anonymous ( \" * , id:{P} , 0x000A ( LINE FEED ) , * \" ) { \" * , id:{bodyString} , and value:{\"}\"} ."
  [41] app __x4__ = (StringToCodePoints sourceString)
  [41] if (is-completion __x4__) if (= __x4__.Type CONST_normal) __x4__ = __x4__.Value else return __x4__ else [73] {}
  [41] let sourceText = __x4__
  [42] ??? "Perform the following substeps in an implementation - defined order , possibly interleaving parsing and error detection : step-list:{...}"
  [61] app __x5__ = (GetPrototypeFromConstructor newTarget fallbackProto)
  [61] if (is-completion __x5__) if (= __x5__.Type CONST_normal) __x5__ = __x5__.Value else return __x5__ else [73] {}
  [61] let proto = __x5__
  [62] let realmF = REALM
  [63] let scope = realmF.GlobalEnv
  [64] app __x6__ = (OrdinaryFunctionCreate proto sourceText parameters body CONST_nonDASHlexicalDASHthis scope)
  [64] if (is-completion __x6__) if (= __x6__.Type CONST_normal) __x6__ = __x6__.Value else return __x6__ else [73] {}
  [64] let F = __x6__
  [65] app __x7__ = (SetFunctionName F "anonymous")
  [65] __x7__
  [72] if (= kind CONST_generator) {
    [67] ??? "Let id:{prototype} be ! OrdinaryObjectCreate ( % GeneratorFunction . prototype . prototype % ) ."
    [68] app __x8__ = (DefinePropertyOrThrow F "prototype" (new PropertyDescriptor("Value" -> prototype, "Writable" -> true, "Enumerable" -> false, "Configurable" -> false)))
    [68] __x8__
  } else if (= kind CONST_asyncGenerator) {
    [70] ??? "Let id:{prototype} be ! OrdinaryObjectCreate ( % AsyncGeneratorFunction . prototype . prototype % ) ."
    [71] app __x9__ = (DefinePropertyOrThrow F "prototype" (new PropertyDescriptor("Value" -> prototype, "Writable" -> true, "Enumerable" -> false, "Configurable" -> false)))
    [71] __x9__
  } else if (= kind CONST_normal) {
    app __x10__ = (MakeConstructor F)
    __x10__
  } else [73] {}
  [74] app __x11__ = (WrapCompletion F)
  [74] return __x11__
}