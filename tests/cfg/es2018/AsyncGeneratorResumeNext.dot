digraph {
  node17175 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">29:assert (= completion.Type CONST_throw)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17164 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">16:let promiseCapability = [! __x1__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17158 [shape=diamond, label=<<font color="black">(= state &quot;suspendedStart&quot;)</font>> color="black" fillcolor="white" style=filled]
  node17157 [shape=diamond, label=<<font color="black">__x0__</font>> color="black" fillcolor="white" style=filled]
  node17174 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">26:[! __x6__]</td></tr>
      <tr><td align="left">27:return undefined</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17165 [shape=cds, label=<<font color="black">17:app __x2__ = (Call promiseCapability.Resolve undefined (new [completion.Value]))</font>> color="black" fillcolor="white" style=filled]
  node17170 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">22:let onRejected = __x4__</td></tr>
      <tr><td align="left">23:onRejected.Generator = generator</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17150 [shape=diamond, label=<<font color="black">(= state &quot;awaiting-return&quot;)</font>> color="black" fillcolor="white" style=filled]
  node17160 [shape=diamond, label=<<font color="black">(= state &quot;completed&quot;)</font>> color="black" fillcolor="white" style=filled]
  node17179 [shape=cds, label=<<font color="black">app __x8__ = (AsyncGeneratorResolve generator undefined true)</font>> color="black" fillcolor="white" style=filled]
  node17156 [shape=cds, label=<<font color="black">32:app __x0__ = (IsAbruptCompletion completion)</font>> color="black" fillcolor="white" style=filled]
  node17166 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">17:[! __x2__]</td></tr>
      <tr><td align="left">18:let stepsFulfilled = AsyncGeneratorResumeNextReturnProcessorFulfilledFunctions</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17155 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">6:let next = queue[0i]</td></tr>
      <tr><td align="left">8:let completion = next.Completion</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17167 [shape=cds, label=<<font color="black">19:app __x3__ = (CreateBuiltinFunction stepsFulfilled (new [&quot;Generator&quot;]))</font>> color="black" fillcolor="white" style=filled]
  node17168 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">19:let onFulfilled = __x3__</td></tr>
      <tr><td align="left">20:onFulfilled.Generator = generator</td></tr>
      <tr><td align="left">21:let stepsRejected = AsyncGeneratorResumeNextReturnProcessorRejectedFunctions</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17149 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">1:let state = generator.AsyncGeneratorState</td></tr>
      <tr><td align="left">2:assert (! (= state &quot;executing&quot;))</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17154 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return undefined</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17181 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">33:assert (|| (= state &quot;suspendedStart&quot;) (= state &quot;suspendedYield&quot;))</td></tr>
      <tr><td align="left">34:let genContext = generator.AsyncGeneratorContext</td></tr>
      <tr><td align="left">35:let callerContext = GLOBAL_context</td></tr>
      <tr><td align="left">36:GLOBAL_context = null</td></tr>
      <tr><td align="left">37:generator.AsyncGeneratorState = &quot;executing&quot;</td></tr>
      <tr><td align="left">38:append genContext -&gt; GLOBAL_executionStack</td></tr>
      <tr><td align="left">38:GLOBAL_context = GLOBAL_executionStack[(- GLOBAL_executionStack.length 1i)]</td></tr>
      <tr><td align="left">39:??? &quot;Resume the suspended evaluation of id:{genContext} using id:{completion} as the result of the operation that suspended it . Let id:{result} be the completion record returned by the resumed computation .&quot;</td></tr>
      <tr><td align="left">42:return undefined</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17171 [shape=cds, label=<<font color="black">24:app __x5__ = (NewPromiseCapability INTRINSIC_Promise)</font>> color="black" fillcolor="white" style=filled]
  node17161 [shape=diamond, label=<<font color="black">(= completion.Type CONST_return)</font>> color="black" fillcolor="white" style=filled]
  node17178 [shape=diamond, label=<<font color="black">(= state &quot;completed&quot;)</font>> color="black" fillcolor="white" style=filled]
  node17146 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node17162 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">15:generator.AsyncGeneratorState = &quot;awaiting-return&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17173 [shape=cds, label=<<font color="black">26:app __x6__ = (PerformPromiseThen promiseCapability.Promise onFulfilled onRejected throwawayCapability)</font>> color="black" fillcolor="white" style=filled]
  node17169 [shape=cds, label=<<font color="black">22:app __x4__ = (CreateBuiltinFunction stepsRejected (new [&quot;Generator&quot;]))</font>> color="black" fillcolor="white" style=filled]
  node17147 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node17163 [shape=cds, label=<<font color="black">16:app __x1__ = (NewPromiseCapability INTRINSIC_Promise)</font>> color="black" fillcolor="white" style=filled]
  node17151 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return undefined</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17176 [shape=cds, label=<<font color="black">30:app __x7__ = (AsyncGeneratorReject generator completion.Value)</font>> color="black" fillcolor="white" style=filled]
  node17148 [shape=cds, label=<<font color="black">app generator = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node17180 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return [! __x8__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17152 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">4:let queue = generator.AsyncGeneratorQueue</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17153 [shape=diamond, label=<<font color="black">(= queue.length 0i)</font>> color="black" fillcolor="white" style=filled]
  node17159 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">11:generator.AsyncGeneratorState = &quot;completed&quot;</td></tr>
      <tr><td align="left">12:state = &quot;completed&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17172 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">24:let throwawayCapability = [! __x5__]</td></tr>
      <tr><td align="left">25:throwawayCapability.Promise.PromiseIsHandled = true</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17177 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">30:[! __x7__]</td></tr>
      <tr><td align="left">31:return undefined</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17167 -> node17168 [ color="black"]
  node17165 -> node17166 [ color="black"]
  node17178 -> node17179 [label=<<font color="black">true</font>> color="black"]
  node17178 -> node17181 [label=<<font color="black">false</font>> color="black"]
  node17179 -> node17180 [ color="black"]
  node17155 -> node17156 [ color="black"]
  node17156 -> node17157 [ color="black"]
  node17150 -> node17151 [label=<<font color="black">true</font>> color="black"]
  node17150 -> node17152 [label=<<font color="black">false</font>> color="black"]
  node17151 -> node17152 [ color="black"]
  node17146 -> node17148 [ color="black"]
  node17163 -> node17164 [ color="black"]
  node17157 -> node17158 [label=<<font color="black">true</font>> color="black"]
  node17157 -> node17178 [label=<<font color="black">false</font>> color="black"]
  node17154 -> node17155 [ color="black"]
  node17161 -> node17162 [label=<<font color="black">true</font>> color="black"]
  node17161 -> node17175 [label=<<font color="black">false</font>> color="black"]
  node17180 -> node17181 [ color="black"]
  node17173 -> node17174 [ color="black"]
  node17158 -> node17159 [label=<<font color="black">true</font>> color="black"]
  node17158 -> node17160 [label=<<font color="black">false</font>> color="black"]
  node17164 -> node17165 [ color="black"]
  node17168 -> node17169 [ color="black"]
  node17181 -> node17147 [ color="black"]
  node17153 -> node17154 [label=<<font color="black">true</font>> color="black"]
  node17153 -> node17155 [label=<<font color="black">false</font>> color="black"]
  node17160 -> node17161 [label=<<font color="black">true</font>> color="black"]
  node17160 -> node17181 [label=<<font color="black">false</font>> color="black"]
  node17176 -> node17177 [ color="black"]
  node17171 -> node17172 [ color="black"]
  node17169 -> node17170 [ color="black"]
  node17149 -> node17150 [ color="black"]
  node17175 -> node17176 [ color="black"]
  node17159 -> node17160 [ color="black"]
  node17170 -> node17171 [ color="black"]
  node17148 -> node17149 [ color="black"]
  node17166 -> node17167 [ color="black"]
  node17174 -> node17181 [ color="black"]
  node17177 -> node17181 [ color="black"]
  node17172 -> node17173 [ color="black"]
  node17152 -> node17153 [ color="black"]
  node17162 -> node17163 [ color="black"]
}
