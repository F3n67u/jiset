digraph {
  node17495 [shape=cds, label=<<font color="black">4:app __x2__ = (ToBigInt expectedValue)</font>> color="black" fillcolor="white" style=filled]
  node17492 [shape=cds, label=<<font color="black">1:app __x1__ = (ValidateAtomicAccess typedArray index)</font>> color="black" fillcolor="white" style=filled]
  node17486 [shape=cds, label=<<font color="black">app typedArray = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node17491 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let buffer = [? __x0__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17503 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">9:??? &quot;Let id:{elementType} be the Element Type value in link:{unhandled: table-the-typedarray-constructors} for id:{arrayTypeName} .&quot;</td></tr>
      <tr><td align="left">10:let isLittleEndian = GLOBAL_agent.LittleEndian</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17499 [shape=cds, label=<<font color="black">7:app __x4__ = (ToInteger expectedValue)</font>> color="black" fillcolor="white" style=filled]
  node17494 [shape=diamond, label=<<font color="black">(= typedArray.ContentType CONST_BigInt)</font>> color="black" fillcolor="white" style=filled]
  node17500 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">7:let expected = [? __x4__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17489 [shape=cds, label=<<font color="black">app replacementValue = (GetArgument argumentsList 3i)</font>> color="black" fillcolor="white" style=filled]
  node17488 [shape=cds, label=<<font color="black">app expectedValue = (GetArgument argumentsList 2i)</font>> color="black" fillcolor="white" style=filled]
  node17502 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">8:let replacement = [? __x5__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17507 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">16:return __x7__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17505 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">11:let expectedBytes = __x6__</td></tr>
      <tr><td align="left">12:??? &quot;Let id:{elementSize} be the Element Size value specified in link:{unhandled: table-the-typedarray-constructors} for id:{arrayTypeName} .&quot;</td></tr>
      <tr><td align="left">13:let offset = typedArray.ByteOffset</td></tr>
      <tr><td align="left">14:let indexedPosition = (+ (* i elementSize) offset)</td></tr>
      <tr><td align="left">15:??? &quot;Let code:{compareExchange} denote a semantic function of two List of byte values arguments that returns the second argument if the first argument is element - wise equal to id:{expectedBytes} .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17485 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node17498 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">5:let replacement = [? __x3__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17490 [shape=cds, label=<<font color="black">0:app __x0__ = (ValidateSharedIntegerTypedArray typedArray)</font>> color="black" fillcolor="white" style=filled]
  node17493 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">1:let i = [? __x1__]</td></tr>
      <tr><td align="left">2:let arrayTypeName = typedArray.TypedArrayName</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17487 [shape=cds, label=<<font color="black">app index = (GetArgument argumentsList 1i)</font>> color="black" fillcolor="white" style=filled]
  node17504 [shape=cds, label=<<font color="black">11:app __x6__ = (NumericToRawBytes elementType expected isLittleEndian)</font>> color="black" fillcolor="white" style=filled]
  node17496 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">4:let expected = [? __x2__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17501 [shape=cds, label=<<font color="black">8:app __x5__ = (ToInteger replacementValue)</font>> color="black" fillcolor="white" style=filled]
  node17506 [shape=cds, label=<<font color="black">16:app __x7__ = (GetModifySetValueInBuffer buffer indexedPosition elementType replacement ??? &quot;compareExchange&quot;)</font>> color="black" fillcolor="white" style=filled]
  node17484 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node17497 [shape=cds, label=<<font color="black">5:app __x3__ = (ToBigInt replacementValue)</font>> color="black" fillcolor="white" style=filled]
  node17503 -> node17504 [ color="black"]
  node17489 -> node17490 [ color="black"]
  node17486 -> node17487 [ color="black"]
  node17506 -> node17507 [ color="black"]
  node17502 -> node17503 [ color="black"]
  node17494 -> node17495 [label=<<font color="black">true</font>> color="black"]
  node17494 -> node17499 [label=<<font color="black">false</font>> color="black"]
  node17488 -> node17489 [ color="black"]
  node17499 -> node17500 [ color="black"]
  node17484 -> node17486 [ color="black"]
  node17500 -> node17501 [ color="black"]
  node17498 -> node17503 [ color="black"]
  node17496 -> node17497 [ color="black"]
  node17487 -> node17488 [ color="black"]
  node17495 -> node17496 [ color="black"]
  node17497 -> node17498 [ color="black"]
  node17490 -> node17491 [ color="black"]
  node17492 -> node17493 [ color="black"]
  node17491 -> node17492 [ color="black"]
  node17493 -> node17494 [ color="black"]
  node17507 -> node17485 [ color="black"]
  node17505 -> node17506 [ color="black"]
  node17501 -> node17502 [ color="black"]
  node17504 -> node17505 [ color="black"]
}
