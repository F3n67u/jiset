{
  let rx = this
  app __x0__ = (Type rx)
  if (! (= __x0__ Object)) throw INTRINSIC_TypeError else {}
  app __x1__ = (ToString string)
  let S = [? __x1__]
  app __x2__ = (SpeciesConstructor rx INTRINSIC_RegExp)
  let C = [? __x2__]
  app __x3__ = (Get rx "flags")
  app __x4__ = (ToString [? __x3__])
  let flags = [? __x4__]
  if (contains flags "u") let unicodeMatching = true else let unicodeMatching = false
  if (contains flags "y") let newFlags = flags else let newFlags = (+ flags "y")
  app __x5__ = (Construct C (new [rx, newFlags]))
  let splitter = [? __x5__]
  app __x6__ = (ArrayCreate 0i)
  let A = __x6__
  let lengthA = 0i
  if (= limit undefined) let lim = (- (** 2.0 32i) 1i) else {
    app __x7__ = (ToUint32 limit)
    let lim = [? __x7__]
  }
  let size = S.length
  let p = 0i
  if (== lim 0i) return A else {}
  if (== size 0i) {
    app __x8__ = (RegExpExec splitter S)
    let z = [? __x8__]
    if (! (= z null)) return A else {}
    app __x9__ = (CreateDataProperty A "0" S)
    [! __x9__]
    return A
  } else {}
  let q = p
  while (< q size) {
    app __x10__ = (Set splitter "lastIndex" q true)
    [? __x10__]
    app __x11__ = (RegExpExec splitter S)
    let z = [? __x11__]
    if (= z null) {
      app __x12__ = (AdvanceStringIndex S q unicodeMatching)
      let q = __x12__
    } else {
      app __x13__ = (Get splitter "lastIndex")
      app __x14__ = (ToLength [? __x13__])
      let e = [? __x14__]
      app __x15__ = (min e size)
      let e = __x15__
      if (== e p) {
        app __x16__ = (AdvanceStringIndex S q unicodeMatching)
        let q = __x16__
      } else {
        ??? "Let id:{T} be a String value equal to the substring of id:{S} consisting of the elements at indices id:{p} ( inclusive ) through id:{q} ( exclusive ) ."
        app __x17__ = (ToString lengthA)
        app __x18__ = (CreateDataProperty A [! __x17__] T)
        [! __x18__]
        let lengthA = (+ lengthA 1i)
        if (== lengthA lim) return A else {}
        let p = e
        app __x19__ = (Get z "length")
        app __x20__ = (ToLength [? __x19__])
        let numberOfCaptures = [? __x20__]
        app __x21__ = (max (- numberOfCaptures 1i) 0i)
        let numberOfCaptures = __x21__
        let i = 1i
        while (! (< numberOfCaptures i)) {
          app __x22__ = (ToString i)
          app __x23__ = (Get z [! __x22__])
          let nextCapture = [? __x23__]
          app __x24__ = (ToString lengthA)
          app __x25__ = (CreateDataProperty A [! __x24__] nextCapture)
          [! __x25__]
          let i = (+ i 1i)
          let lengthA = (+ lengthA 1i)
          if (== lengthA lim) return A else {}
        }
        let q = p
      }
    }
  }
  ??? "Let id:{T} be a String value equal to the substring of id:{S} consisting of the elements at indices id:{p} ( inclusive ) through id:{size} ( exclusive ) ."
  app __x26__ = (ToString lengthA)
  app __x27__ = (CreateDataProperty A [! __x26__] T)
  [! __x27__]
  return A
}