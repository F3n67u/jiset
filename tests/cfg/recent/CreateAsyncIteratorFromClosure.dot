digraph {
  node19374 [shape=cds, label=<<font color="black">2:app __x0__ = (OrdinaryObjectCreate generatorPrototype internalSlotsList)</font>> color="black" fillcolor="white" style=filled]
  node19373 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">1:let internalSlotsList = (new [&quot;AsyncGeneratorState&quot;, &quot;AsyncGeneratorContext&quot;, &quot;AsyncGeneratorQueue&quot;, &quot;GeneratorBrand&quot;])</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node19376 [shape=cds, label=<<font color="black">5:app __x1__ = (AsyncGeneratorStart generator closure)</font>> color="black" fillcolor="white" style=filled]
  node19372 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node19377 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">5:[! __x1__]</td></tr>
      <tr><td align="left">6:return generator</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node19375 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">2:let generator = [! __x0__]</td></tr>
      <tr><td align="left">3:generator.GeneratorBrand = generatorBrand</td></tr>
      <tr><td align="left">4:generator.AsyncGeneratorState = undefined</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node19371 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node19374 -> node19375 [ color="black"]
  node19375 -> node19376 [ color="black"]
  node19376 -> node19377 [ color="black"]
  node19371 -> node19373 [ color="black"]
  node19377 -> node19372 [ color="black"]
  node19373 -> node19374 [ color="black"]
}
