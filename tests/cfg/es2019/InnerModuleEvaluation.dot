digraph {
  node10282 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">14:let requiredModule = [! __x3__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10286 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">20:assert (= (typeof requiredModule) &quot;CyclicModuleRecord&quot;)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10292 [shape=diamond, label=<<font color="black">(= module.DFSAncestorIndex module.DFSIndex)</font>> color="black" fillcolor="white" style=filled]
  node10271 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">1:[? __x0__]</td></tr>
      <tr><td align="left">2:return index</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10273 [shape=diamond, label=<<font color="black">(= module.EvaluationError undefined)</font>> color="black" fillcolor="white" style=filled]
  node10278 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">7:assert (= module.Status &quot;instantiated&quot;)</td></tr>
      <tr><td align="left">8:module.Status = &quot;evaluating&quot;</td></tr>
      <tr><td align="left">9:module.DFSIndex = index</td></tr>
      <tr><td align="left">10:module.DFSAncestorIndex = index</td></tr>
      <tr><td align="left">11:index = (+ index 1i)</td></tr>
      <tr><td align="left">12:append module -&gt; stack</td></tr>
      <tr><td align="left">13:let __x1__ = module.RequestedModules</td></tr>
      <tr><td align="left">13:let __x2__ = 0i</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10284 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">16:index = [? __x4__]</td></tr>
      <tr><td align="left">17:assert (|| (= requiredModule.Status &quot;evaluating&quot;) (= requiredModule.Status &quot;evaluated&quot;))</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10275 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return module.EvaluationError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10269 [shape=diamond, label=<<font color="black">(! (= (typeof module) &quot;CyclicModuleRecord&quot;))</font>> color="black" fillcolor="white" style=filled]
  node10290 [shape=cds, label=<<font color="black">22:app __x6__ = (module.ExecuteModule module)</font>> color="black" fillcolor="white" style=filled]
  node10288 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">21:module.DFSAncestorIndex = __x5__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10268 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node10267 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node10272 [shape=diamond, label=<<font color="black">(= module.Status &quot;evaluated&quot;)</font>> color="black" fillcolor="white" style=filled]
  node10277 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return index</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10294 [shape=diamond, label=<<font color="black">(= done false)</font>> color="black" fillcolor="white" style=filled]
  node10295 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">28:let requiredModule = stack[(- stack.length 1i)]</td></tr>
      <tr><td align="left">29:(pop stack (- stack.length 1i))</td></tr>
      <tr><td align="left">30:requiredModule.Status = &quot;evaluated&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10281 [shape=cds, label=<<font color="black">14:app __x3__ = (HostResolveImportedModule module required)</font>> color="black" fillcolor="white" style=filled]
  node10298 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">32:return index</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10285 [shape=diamond, label=<<font color="black">(= requiredModule.Status &quot;evaluating&quot;)</font>> color="black" fillcolor="white" style=filled]
  node10270 [shape=cds, label=<<font color="black">1:app __x0__ = (module.Evaluate module)</font>> color="black" fillcolor="white" style=filled]
  node10289 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">__x2__ = (+ __x2__ 1i)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10274 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return index</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10297 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">done = true</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10279 [shape=diamond, label=<<font color="black">(&lt; __x2__ __x1__.length)</font>> color="black" fillcolor="white" style=filled]
  node10296 [shape=diamond, label=<<font color="black">(= requiredModule module)</font>> color="black" fillcolor="white" style=filled]
  node10293 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">26:let done = false</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10283 [shape=cds, label=<<font color="black">16:app __x4__ = (InnerModuleEvaluation requiredModule stack index)</font>> color="black" fillcolor="white" style=filled]
  node10291 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">22:[? __x6__]</td></tr>
      <tr><td align="left">24:assert (! (&lt; module.DFSIndex module.DFSAncestorIndex))</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10280 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let required = __x1__[__x2__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10287 [shape=cds, label=<<font color="black">21:app __x5__ = (min module.DFSAncestorIndex requiredModule.DFSAncestorIndex)</font>> color="black" fillcolor="white" style=filled]
  node10276 [shape=diamond, label=<<font color="black">(= module.Status &quot;evaluating&quot;)</font>> color="black" fillcolor="white" style=filled]
  node10297 -> node10294 [ color="black"]
  node10275 -> node10276 [ color="black"]
  node10283 -> node10284 [ color="black"]
  node10286 -> node10287 [ color="black"]
  node10296 -> node10297 [label=<<font color="black">true</font>> color="black"]
  node10296 -> node10294 [label=<<font color="black">false</font>> color="black"]
  node10289 -> node10279 [ color="black"]
  node10274 -> node10276 [ color="black"]
  node10279 -> node10280 [label=<<font color="black">true</font>> color="black"]
  node10279 -> node10290 [label=<<font color="black">false</font>> color="black"]
  node10273 -> node10274 [label=<<font color="black">true</font>> color="black"]
  node10273 -> node10275 [label=<<font color="black">false</font>> color="black"]
  node10285 -> node10286 [label=<<font color="black">true</font>> color="black"]
  node10285 -> node10289 [label=<<font color="black">false</font>> color="black"]
  node10270 -> node10271 [ color="black"]
  node10282 -> node10283 [ color="black"]
  node10287 -> node10288 [ color="black"]
  node10278 -> node10279 [ color="black"]
  node10292 -> node10293 [label=<<font color="black">true</font>> color="black"]
  node10292 -> node10298 [label=<<font color="black">false</font>> color="black"]
  node10269 -> node10270 [label=<<font color="black">true</font>> color="black"]
  node10269 -> node10272 [label=<<font color="black">false</font>> color="black"]
  node10291 -> node10292 [ color="black"]
  node10276 -> node10277 [label=<<font color="black">true</font>> color="black"]
  node10276 -> node10278 [label=<<font color="black">false</font>> color="black"]
  node10294 -> node10295 [label=<<font color="black">true</font>> color="black"]
  node10294 -> node10298 [label=<<font color="black">false</font>> color="black"]
  node10271 -> node10272 [ color="black"]
  node10295 -> node10296 [ color="black"]
  node10267 -> node10269 [ color="black"]
  node10298 -> node10268 [ color="black"]
  node10290 -> node10291 [ color="black"]
  node10293 -> node10294 [ color="black"]
  node10277 -> node10278 [ color="black"]
  node10284 -> node10285 [ color="black"]
  node10272 -> node10273 [label=<<font color="black">true</font>> color="black"]
  node10272 -> node10276 [label=<<font color="black">false</font>> color="black"]
  node10288 -> node10289 [ color="black"]
  node10280 -> node10281 [ color="black"]
  node10281 -> node10282 [ color="black"]
}
