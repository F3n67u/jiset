digraph {
  node17677 [shape=diamond, label=<<font color="black">(|| (! (= __x1__ Object)) (= generator.AsyncGeneratorState absent))</font>> color="black" fillcolor="white" style=filled]
  node17674 [shape=cds, label=<<font color="black">1:app __x0__ = (NewPromiseCapability INTRINSIC_Promise)</font>> color="black" fillcolor="white" style=filled]
  node17669 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node17682 [shape=diamond, label=<<font color="black">(! (= state &quot;executing&quot;))</font>> color="black" fillcolor="white" style=filled]
  node17685 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">12:return promiseCapability.Promise</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17671 [shape=cds, label=<<font color="black">app generator = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node17684 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">11:[! __x3__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17670 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node17683 [shape=cds, label=<<font color="black">11:app __x3__ = (AsyncGeneratorResumeNext generator)</font>> color="black" fillcolor="white" style=filled]
  node17678 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">3:let badGeneratorError = ??? &quot;TypeError&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17675 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">1:let promiseCapability = [! __x0__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17679 [shape=cds, label=<<font color="black">4:app __x2__ = (Call promiseCapability.Reject undefined (new [badGeneratorError]))</font>> color="black" fillcolor="white" style=filled]
  node17676 [shape=cds, label=<<font color="black">2:app __x1__ = (Type generator)</font>> color="black" fillcolor="white" style=filled]
  node17672 [shape=cds, label=<<font color="black">app completion = (GetArgument argumentsList 1i)</font>> color="black" fillcolor="white" style=filled]
  node17681 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">6:let queue = generator.AsyncGeneratorQueue</td></tr>
      <tr><td align="left">7:let request = (new AsyncGeneratorRequest(&quot;Completion&quot; -&gt; completion, &quot;Capability&quot; -&gt; promiseCapability))</td></tr>
      <tr><td align="left">8:append request -&gt; queue</td></tr>
      <tr><td align="left">9:let state = generator.AsyncGeneratorState</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17680 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">4:[! __x2__]</td></tr>
      <tr><td align="left">5:return promiseCapability.Promise</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17673 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:assert (is-completion completion)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17678 -> node17679 [ color="black"]
  node17682 -> node17683 [label=<<font color="black">true</font>> color="black"]
  node17682 -> node17685 [label=<<font color="black">false</font>> color="black"]
  node17674 -> node17675 [ color="black"]
  node17685 -> node17670 [ color="black"]
  node17681 -> node17682 [ color="black"]
  node17671 -> node17672 [ color="black"]
  node17673 -> node17674 [ color="black"]
  node17676 -> node17677 [ color="black"]
  node17679 -> node17680 [ color="black"]
  node17675 -> node17676 [ color="black"]
  node17680 -> node17681 [ color="black"]
  node17672 -> node17673 [ color="black"]
  node17669 -> node17671 [ color="black"]
  node17683 -> node17684 [ color="black"]
  node17677 -> node17678 [label=<<font color="black">true</font>> color="black"]
  node17677 -> node17681 [label=<<font color="black">false</font>> color="black"]
  node17684 -> node17685 [ color="black"]
}
