digraph {
  node6918 [shape=cds, label=<<font color="black">1:access __x0__ = (Statement &quot;VarScopedDeclarations&quot;)</font>> color="black" fillcolor="white" style=filled]
  node6915 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node6919 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">1:let __x1__ = __x0__</td></tr>
      <tr><td align="left">1:let __x2__ = 0i</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node6922 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">2:return declarations</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node6916 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node6920 [shape=diamond, label=<<font color="black">(&lt; __x2__ __x1__.length)</font>> color="black" fillcolor="white" style=filled]
  node6921 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let __x3__ = __x1__[__x2__]</td></tr>
      <tr><td align="left">append __x3__ -&gt; declarations</td></tr>
      <tr><td align="left">__x2__ = (+ __x2__ 1i)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node6917 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let declarations = (new [ForBinding])</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node6918 -> node6919 [ color="black"]
  node6921 -> node6920 [ color="black"]
  node6920 -> node6921 [label=<<font color="black">true</font>> color="black"]
  node6920 -> node6922 [label=<<font color="black">false</font>> color="black"]
  node6922 -> node6916 [ color="black"]
  node6917 -> node6918 [ color="black"]
  node6919 -> node6920 [ color="black"]
  node6915 -> node6917 [ color="black"]
}
