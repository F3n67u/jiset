{
  let R = this
  app __x0__ = (Type R)
  if (! (= __x0__ Object)) {
    app __x1__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_TypeError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
    return __x1__
  } else {}
  app __x2__ = (ToString string)
  if (is-completion __x2__) if (= __x2__.Type CONST_normal) __x2__ = __x2__.Value else return __x2__ else {}
  let S = __x2__
  app __x3__ = (SpeciesConstructor R INTRINSIC_RegExp)
  if (is-completion __x3__) if (= __x3__.Type CONST_normal) __x3__ = __x3__.Value else return __x3__ else {}
  let C = __x3__
  app __x4__ = (Get R "flags")
  if (is-completion __x4__) if (= __x4__.Type CONST_normal) __x4__ = __x4__.Value else return __x4__ else {}
  app __x5__ = (ToString __x4__)
  if (is-completion __x5__) if (= __x5__.Type CONST_normal) __x5__ = __x5__.Value else return __x5__ else {}
  let flags = __x5__
  app __x6__ = (Construct C (new [R, flags]))
  if (is-completion __x6__) if (= __x6__.Type CONST_normal) __x6__ = __x6__.Value else return __x6__ else {}
  let matcher = __x6__
  app __x7__ = (Get R "lastIndex")
  if (is-completion __x7__) if (= __x7__.Type CONST_normal) __x7__ = __x7__.Value else return __x7__ else {}
  app __x8__ = (ToLength __x7__)
  if (is-completion __x8__) if (= __x8__.Type CONST_normal) __x8__ = __x8__.Value else return __x8__ else {}
  let lastIndex = __x8__
  app __x9__ = (Set matcher "lastIndex" lastIndex true)
  if (is-completion __x9__) if (= __x9__.Type CONST_normal) __x9__ = __x9__.Value else return __x9__ else {}
  __x9__
  if (contains flags "g") let global = true else let global = false
  if (contains flags "u") let fullUnicode = true else let fullUnicode = false
  app __x10__ = (CreateRegExpStringIterator matcher S global fullUnicode)
  if (is-completion __x10__) if (= __x10__.Type CONST_normal) __x10__ = __x10__.Value else return __x10__ else {}
  app __x11__ = (WrapCompletion __x10__)
  return __x11__
}