digraph {
  node14944 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let iterable = undefined</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14937 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node14954 [shape=diamond, label=<<font color="black">(= iter undefined)</font>> color="black" fillcolor="white" style=filled]
  node14968 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return [? __x8__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14949 [shape=cds, label=<<font color="black">7:app __x2__ = (IsCallable adder)</font>> color="black" fillcolor="white" style=filled]
  node14936 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node14945 [shape=diamond, label=<<font color="black">(|| (= iterable undefined) (= iterable null))</font>> color="black" fillcolor="white" style=filled]
  node14961 [shape=cds, label=<<font color="black">13:app __x5__ = (IteratorValue next)</font>> color="black" fillcolor="white" style=filled]
  node14946 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let iter = undefined</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14947 [shape=cds, label=<<font color="black">6:app __x1__ = (Get set &quot;add&quot;)</font>> color="black" fillcolor="white" style=filled]
  node14951 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14962 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">13:let nextValue = [? __x5__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14948 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">6:let adder = [? __x1__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14963 [shape=cds, label=<<font color="black">14:app __x6__ = (Call adder set (new [nextValue.Value]))</font>> color="black" fillcolor="white" style=filled]
  node14967 [shape=cds, label=<<font color="black">app __x8__ = (IteratorClose iter status)</font>> color="black" fillcolor="white" style=filled]
  node14956 [shape=diamond, label=<<font color="black">true</font>> color="black" fillcolor="white" style=filled]
  node14959 [shape=diamond, label=<<font color="black">(= next false)</font>> color="black" fillcolor="white" style=filled]
  node14964 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">14:let status = __x6__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14958 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">11:let next = [? __x4__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14943 [shape=diamond, label=<<font color="black">(= iterable absent)</font>> color="black" fillcolor="white" style=filled]
  node14941 [shape=cds, label=<<font color="black">1:app __x0__ = (OrdinaryCreateFromConstructor NewTarget INTRINSIC_SetPrototype (new [&quot;SetData&quot;]))</font>> color="black" fillcolor="white" style=filled]
  node14953 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">8:let iter = [? __x3__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14950 [shape=diamond, label=<<font color="black">(= __x2__ false)</font>> color="black" fillcolor="white" style=filled]
  node14965 [shape=cds, label=<<font color="black">15:app __x7__ = (IsAbruptCompletion status)</font>> color="black" fillcolor="white" style=filled]
  node14957 [shape=cds, label=<<font color="black">11:app __x4__ = (IteratorStep iter)</font>> color="black" fillcolor="white" style=filled]
  node14942 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">1:let set = [? __x0__]</td></tr>
      <tr><td align="left">2:set.SetData = (new [])</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14966 [shape=diamond, label=<<font color="black">__x7__</font>> color="black" fillcolor="white" style=filled]
  node14940 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14938 [shape=cds, label=<<font color="black">app iterable = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node14960 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return set</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14955 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return set</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14952 [shape=cds, label=<<font color="black">8:app __x3__ = (GetIterator iterable)</font>> color="black" fillcolor="white" style=filled]
  node14939 [shape=diamond, label=<<font color="black">(= NewTarget undefined)</font>> color="black" fillcolor="white" style=filled]
  node14945 -> node14946 [label=<<font color="black">true</font>> color="black"]
  node14945 -> node14947 [label=<<font color="black">false</font>> color="black"]
  node14944 -> node14945 [ color="black"]
  node14965 -> node14966 [ color="black"]
  node14949 -> node14950 [ color="black"]
  node14960 -> node14961 [ color="black"]
  node14941 -> node14942 [ color="black"]
  node14961 -> node14962 [ color="black"]
  node14946 -> node14954 [ color="black"]
  node14939 -> node14940 [label=<<font color="black">true</font>> color="black"]
  node14939 -> node14941 [label=<<font color="black">false</font>> color="black"]
  node14938 -> node14939 [ color="black"]
  node14963 -> node14964 [ color="black"]
  node14957 -> node14958 [ color="black"]
  node14942 -> node14943 [ color="black"]
  node14936 -> node14938 [ color="black"]
  node14959 -> node14960 [label=<<font color="black">true</font>> color="black"]
  node14959 -> node14961 [label=<<font color="black">false</font>> color="black"]
  node14954 -> node14955 [label=<<font color="black">true</font>> color="black"]
  node14954 -> node14956 [label=<<font color="black">false</font>> color="black"]
  node14958 -> node14959 [ color="black"]
  node14952 -> node14953 [ color="black"]
  node14943 -> node14944 [label=<<font color="black">true</font>> color="black"]
  node14943 -> node14945 [label=<<font color="black">false</font>> color="black"]
  node14953 -> node14954 [ color="black"]
  node14940 -> node14941 [ color="black"]
  node14947 -> node14948 [ color="black"]
  node14951 -> node14952 [ color="black"]
  node14950 -> node14951 [label=<<font color="black">true</font>> color="black"]
  node14950 -> node14952 [label=<<font color="black">false</font>> color="black"]
  node14948 -> node14949 [ color="black"]
  node14964 -> node14965 [ color="black"]
  node14968 -> node14956 [ color="black"]
  node14962 -> node14963 [ color="black"]
  node14967 -> node14968 [ color="black"]
  node14956 -> node14957 [label=<<font color="black">true</font>> color="black"]
  node14956 -> node14937 [label=<<font color="black">false</font>> color="black"]
  node14955 -> node14956 [ color="black"]
  node14966 -> node14967 [label=<<font color="black">true</font>> color="black"]
  node14966 -> node14956 [label=<<font color="black">false</font>> color="black"]
}
