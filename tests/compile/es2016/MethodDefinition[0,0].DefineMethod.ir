{
  [0] access __x0__ = (PropertyName "Evaluation")
  [0] let propKey = __x0__
  [1] if (is-completion propKey) if (= propKey.Type CONST_normal) propKey = propKey.Value else return propKey else [20] {}
  [1] propKey
  [2] if true let strict = true else let strict = false
  [3] let scope = GLOBAL_context.LexicalEnvironment
  [4] if (! (= functionPrototype absent)) let kind = CONST_Normal else let kind = CONST_Method
  [5] ??? "Let id:{closure} be FunctionCreate ( id:{kind} , nt:{StrictFormalParameters} , nt:{FunctionBody} , id:{scope} , id:{strict} ) . If id:{functionPrototype} was passed as a parameter , then pass its value as the id:{prototype} optional argument of FunctionCreate ."
  [6] app __x1__ = (MakeMethod closure object)
  [6] __x1__
  [7] app __x2__ = (WrapCompletion (new Record("Key" -> propKey, "Closure" -> closure)))
  [7] return __x2__
}