{
  let asyncContext = GLOBAL_context
  app __x0__ = (NewPromiseCapability INTRINSIC_Promise)
  let promiseCapability = [! __x0__]
  app __x1__ = (Call promiseCapability.Resolve undefined (new [value]))
  let resolveResult = [! __x1__]
  let onFulfilled = (new BuiltinFunctionObject("SubMap" -> (new SubMap())))
  let onRejected = (new BuiltinFunctionObject("SubMap" -> (new SubMap())))
  onFulfilled.AsyncContext = asyncContext
  onRejected.AsyncContext = asyncContext
  app __x2__ = (NewPromiseCapability INTRINSIC_Promise)
  let throwawayCapability = [! __x2__]
  throwawayCapability.Promise.PromiseIsHandled = true
  app __x3__ = (PerformPromiseThen promiseCapability.Promise onFulfilled onRejected throwawayCapability)
  [! __x3__]
  if (= GLOBAL_executionStack[(- GLOBAL_executionStack.length 1i)] asyncContext) {
    let __x4__ = (- GLOBAL_executionStack.length 1i)
    (pop GLOBAL_executionStack __x4__)
  } else {}
  GLOBAL_context = GLOBAL_executionStack[(- GLOBAL_executionStack.length 1i)]
  ??? "Set the code evaluation state of id:{asyncContext} such that when evaluation is resumed with a Completion id:{resumptionValue} the following steps will be performed : in:{} out:{}"
  return undefined
}