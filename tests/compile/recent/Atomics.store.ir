{
  app typedArray = (GetArgument argumentsList 0i)
  app index = (GetArgument argumentsList 1i)
  app value = (GetArgument argumentsList 2i)
  [0] app __x0__ = (ValidateIntegerTypedArray typedArray)
  [0] if (is-completion __x0__) if (= __x0__.Type CONST_normal) __x0__ = __x0__.Value else return __x0__ else [6] {}
  [0] let buffer = __x0__
  [1] app __x1__ = (ValidateAtomicAccess typedArray index)
  [1] if (is-completion __x1__) if (= __x1__.Type CONST_normal) __x1__ = __x1__.Value else return __x1__ else [6] {}
  [1] let indexedPosition = __x1__
  [2] let arrayTypeName = typedArray.TypedArrayName
  [3] if (|| (= arrayTypeName "BigUint64Array") (= arrayTypeName "BigInt64Array")) {
    app __x2__ = (ToBigInt value)
    if (is-completion __x2__) if (= __x2__.Type CONST_normal) __x2__ = __x2__.Value else return __x2__ else [6] {}
    let v = __x2__
  } else [6] {}
  [4] ??? "Otherwise , let id:{v} be 𝔽 ( ? ToIntegerOrInfinity ( id:{value} ) ) ."
  [5] app __x3__ = (IsDetachedBuffer buffer)
  [5] if (= __x3__ true) {
    app __x4__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_TypeError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
    return __x4__
  } else [6] {}
  [7] ??? "Let id:{elementType} be the Element Type value in link:{} for id:{arrayTypeName} ."
  [8] app __x5__ = (SetValueInBuffer buffer indexedPosition elementType v true CONST_SeqCst)
  [8] __x5__
  [9] app __x6__ = (WrapCompletion v)
  [9] return __x6__
}