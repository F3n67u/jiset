digraph {
  node12392 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node12394 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let func = this</td></tr>
      <tr><td align="left">1:??? &quot;If id:{func} is a &lt; emu - xref href = \&quot; # sec - bound - function - exotic - objects \&quot; &gt; bound function exotic object &lt; / emu - xref &gt; or a &lt; emu - xref href = \&quot; # sec - built - in - function - objects \&quot; &gt; built - in function object &lt; / emu - xref &gt; , then return an implementation - dependent String source code representation of id:{func} . The representation must have the syntax of a nt:{NativeFunction} . Additionally , if id:{func} is a &lt; emu - xref href = \&quot; # sec - well - known - intrinsic - objects \&quot; &gt; Well - known Intrinsic Object &lt; / emu - xref &gt; and is not identified as an anonymous function , the portion of the returned String that would be matched by nt:{PropertyName} must be the initial value of the value:{\&quot;name\&quot;} property of id:{func} .&quot;</td></tr>
      <tr><td align="left">2:??? &quot;If Type ( id:{func} ) is Object and id:{func} has a [ [ SourceText ] ] internal slot and id:{func} . [ [ SourceText ] ] is a sequence of Unicode code points and ! HostHasSourceTextAvailable ( id:{func} ) is value:{true} , then in:{} out:{}&quot;</td></tr>
      <tr><td align="left">4:??? &quot;If Type ( id:{func} ) is Object and IsCallable ( id:{func} ) is value:{true} , then return an implementation - dependent String source code representation of id:{func} . The representation must have the syntax of a nt:{NativeFunction} .&quot;</td></tr>
      <tr><td align="left">5:throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12393 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node12392 -> node12394 [ color="black"]
  node12394 -> node12393 [ color="black"]
}
