digraph {
  node234 [shape=diamond, label=<<font color="black">(= GLOBAL_executionStack[(- GLOBAL_executionStack.length 1i)] asyncContext)</font>> color="black" fillcolor="white" style=filled]
  node228 [shape=cds, label=<<font color="black">3:app __x1__ = (CreateBuiltinFunction stepsFulfilled (new [&quot;AsyncContext&quot;]))</font>> color="black" fillcolor="white" style=filled]
  node233 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">8:[! __x3__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node225 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let asyncContext = GLOBAL_context</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node236 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">9:GLOBAL_context = GLOBAL_executionStack[(- GLOBAL_executionStack.length 1i)]</td></tr>
      <tr><td align="left">10:??? &quot;Set the code evaluation state of id:{asyncContext} such that when evaluation is resumed with a Completion id:{completion} , the following steps of the algorithm that invoked Await will be performed , with id:{completion} available .&quot;</td></tr>
      <tr><td align="left">11:return undefined</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node230 [shape=cds, label=<<font color="black">6:app __x2__ = (CreateBuiltinFunction stepsRejected (new [&quot;AsyncContext&quot;]))</font>> color="black" fillcolor="white" style=filled]
  node231 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">6:let onRejected = [! __x2__]</td></tr>
      <tr><td align="left">7:onRejected.AsyncContext = asyncContext</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node235 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let __x4__ = (- GLOBAL_executionStack.length 1i)</td></tr>
      <tr><td align="left">(pop GLOBAL_executionStack __x4__)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node229 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">3:let onFulfilled = [! __x1__]</td></tr>
      <tr><td align="left">4:onFulfilled.AsyncContext = asyncContext</td></tr>
      <tr><td align="left">5:let stepsRejected = AwaitRejectedFunctions</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node224 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node223 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node226 [shape=cds, label=<<font color="black">1:app __x0__ = (PromiseResolve INTRINSIC_Promise value)</font>> color="black" fillcolor="white" style=filled]
  node227 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">1:let promise = [? __x0__]</td></tr>
      <tr><td align="left">2:let stepsFulfilled = AwaitFulfilledFunctions</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node232 [shape=cds, label=<<font color="black">8:app __x3__ = (PerformPromiseThen promise onFulfilled onRejected)</font>> color="black" fillcolor="white" style=filled]
  node233 -> node234 [ color="black"]
  node229 -> node230 [ color="black"]
  node227 -> node228 [ color="black"]
  node225 -> node226 [ color="black"]
  node235 -> node236 [ color="black"]
  node228 -> node229 [ color="black"]
  node232 -> node233 [ color="black"]
  node226 -> node227 [ color="black"]
  node230 -> node231 [ color="black"]
  node223 -> node225 [ color="black"]
  node234 -> node235 [label=<<font color="black">true</font>> color="black"]
  node234 -> node236 [label=<<font color="black">false</font>> color="black"]
  node236 -> node224 [ color="black"]
  node231 -> node232 [ color="black"]
}
