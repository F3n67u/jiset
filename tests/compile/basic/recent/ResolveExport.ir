{
  if (= resolveSet absent) resolveSet = (new []) else {}
  let __x0__ = resolveSet
  let __x1__ = 0i
  while (< __x1__ __x0__.length) {
    let r = __x0__[__x1__]
    let __x2__ = (= module r.Module)
    if __x2__ {
      app __x3__ = (SameValue exportName r.ExportName)
      __x2__ = (= __x3__ true)
    } else {}
    if __x2__ {
      app __x4__ = (WrapCompletion null)
      return __x4__
    } else {}
    __x1__ = (+ __x1__ 1i)
  }
  append (new Record("Module" -> module, "ExportName" -> exportName)) -> resolveSet
  let __x5__ = module.LocalExportEntries
  let __x6__ = 0i
  while (< __x6__ __x5__.length) {
    let e = __x5__[__x6__]
    app __x7__ = (SameValue exportName e.ExportName)
    if (= __x7__ true) {
      app __x8__ = (WrapCompletion (new ResolvedBindingRecord("Module" -> module, "BindingName" -> e.LocalName)))
      return __x8__
    } else {}
    __x6__ = (+ __x6__ 1i)
  }
  let __x9__ = module.IndirectExportEntries
  let __x10__ = 0i
  while (< __x10__ __x9__.length) {
    let e = __x9__[__x10__]
    app __x11__ = (SameValue exportName e.ExportName)
    if (= __x11__ true) {
      app __x12__ = (HostResolveImportedModule module e.ModuleRequest)
      if (is-completion __x12__) if (= __x12__.Type CONST_normal) __x12__ = __x12__.Value else return __x12__ else {}
      let importedModule = __x12__
      if (= e.ImportName "*") {
        app __x13__ = (WrapCompletion (new ResolvedBindingRecord("Module" -> importedModule, "BindingName" -> "*namespace*")))
        return __x13__
      } else {
        app __x14__ = (importedModule.ResolveExport importedModule e.ImportName resolveSet)
        app __x15__ = (WrapCompletion __x14__)
        return __x15__
      }
    } else {}
    __x10__ = (+ __x10__ 1i)
  }
  app __x16__ = (SameValue exportName "default")
  if (= __x16__ true) {
    app __x17__ = (WrapCompletion null)
    return __x17__
  } else {}
  let starResolution = null
  let __x18__ = module.StarExportEntries
  let __x19__ = 0i
  while (< __x19__ __x18__.length) {
    let e = __x18__[__x19__]
    app __x20__ = (HostResolveImportedModule module e.ModuleRequest)
    if (is-completion __x20__) if (= __x20__.Type CONST_normal) __x20__ = __x20__.Value else return __x20__ else {}
    let importedModule = __x20__
    app __x21__ = (importedModule.ResolveExport importedModule exportName resolveSet)
    if (is-completion __x21__) if (= __x21__.Type CONST_normal) __x21__ = __x21__.Value else return __x21__ else {}
    let resolution = __x21__
    if (= resolution "ambiguous") {
      app __x22__ = (WrapCompletion "ambiguous")
      return __x22__
    } else {}
    if (! (= resolution null)) {
      assert (= (typeof resolution) "ResolvedBindingRecord")
      if (= starResolution null) starResolution = resolution else {
        let __x23__ = (! (= resolution.Module starResolution.Module))
        if __x23__ {} else {
          app __x24__ = (SameValue resolution.BindingName starResolution.BindingName)
          __x23__ = (= __x24__ false)
        }
        if __x23__ {
          app __x25__ = (WrapCompletion "ambiguous")
          return __x25__
        } else {}
      }
    } else {}
    __x19__ = (+ __x19__ 1i)
  }
  app __x26__ = (WrapCompletion starResolution)
  return __x26__
}