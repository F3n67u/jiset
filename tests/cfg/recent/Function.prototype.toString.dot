digraph {
  node0 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node2 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let func = this</td></tr>
      <tr><td align="left">1:??? &quot;If Type ( id:{func} ) is Object and id:{func} has a [ [ SourceText ] ] internal slot and id:{func} . [ [ SourceText ] ] is a sequence of Unicode code points and ! HostHasSourceTextAvailable ( id:{func} ) is value:{true} , then in:{} out:{}&quot;</td></tr>
      <tr><td align="left">3:??? &quot;If id:{func} is a &lt; emu - xref href = \&quot; # sec - built - in - function - objects \&quot; &gt; built - in function object &lt; / emu - xref &gt; , return an implementation - defined String source code representation of id:{func} . The representation must have the syntax of a nt:{NativeFunction} . Additionally , if id:{func} has an [ [ InitialName ] ] internal slot and id:{func} . [ [ InitialName ] ] is a String , the portion of the returned String that would be matched by nt:{NativeFunctionAccessor?} nt:{PropertyName} must be the value of id:{func} . [ [ InitialName ] ] .&quot;</td></tr>
      <tr><td align="left">4:??? &quot;If Type ( id:{func} ) is Object and IsCallable ( id:{func} ) is value:{true} , return an implementation - defined String source code representation of id:{func} . The representation must have the syntax of a nt:{NativeFunction} .&quot;</td></tr>
      <tr><td align="left">5:throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node1 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node0 -> node2 [ color="black"]
  node2 -> node1 [ color="black"]
}
