[{
  "tokens": ["Assert", ":", "If", {
    "id": "direct"
  }, "is", {
    "value": "false"
  }, ",", "then", {
    "id": "strictCaller"
  }, "is", "also", {
    "value": "false"
  }, "."]
}, {
  "tokens": ["If", "Type", "(", {
    "id": "x"
  }, ")", "is", "not", "String", ",", "return", {
    "id": "x"
  }, "."]
}, {
  "tokens": ["Let", {
    "id": "script"
  }, "be", "the", "ECMAScript", "code", "that", "is", "the", "result", "of", "parsing", {
    "id": "x"
  }, ",", "interpreted", "as", "UTF", "-", "16", "encoded", "Unicode", "text", "as", "described", "in", {
    "link": ""
  }, ",", "for", "the", "goal", "symbol", {
    "nt": "Script"
  }, ".", "If", "the", "parse", "fails", ",", "throw", "a", {
    "value": "SyntaxError"
  }, "exception", ".", "If", "any", "early", "errors", "are", "detected", ",", "throw", "a", {
    "value": "SyntaxError"
  }, "or", "a", {
    "value": "ReferenceError"
  }, "exception", ",", "depending", "on", "the", "type", "of", "the", "error", "(", "but", "see", "also", "clause", {
    "link": ""
  }, ")", ".", "Parsing", "and", "early", "error", "detection", "may", "be", "interweaved", "in", "an", "implementation", "dependent", "manner", "."]
}, {
  "tokens": ["If", {
    "id": "script"
  }, "Contains", {
    "nt": "ScriptBody"
  }, "is", {
    "value": "false"
  }, ",", "return", {
    "value": "undefined"
  }, "."]
}, {
  "tokens": ["Let", {
    "id": "body"
  }, "be", "the", {
    "nt": "ScriptBody"
  }, "of", {
    "id": "script"
  }, "."]
}, {
  "tokens": ["If", {
    "id": "strictCaller"
  }, "is", {
    "value": "true"
  }, ",", "let", {
    "id": "strictEval"
  }, "be", {
    "value": "true"
  }, "."]
}, {
  "tokens": ["Else", ",", "let", {
    "id": "strictEval"
  }, "be", "IsStrict", "of", {
    "id": "script"
  }, "."]
}, {
  "tokens": ["Let", {
    "id": "ctx"
  }, "be", "the", "running", "execution", "context", ".", "If", {
    "id": "direct"
  }, "is", {
    "value": "true"
  }, ",", {
    "id": "ctx"
  }, "will", "be", "the", "execution", "context", "that", "performed", "the", "direct", "eval", ".", "If", {
    "id": "direct"
  }, "is", {
    "value": "false"
  }, ",", {
    "id": "ctx"
  }, "will", "be", "the", "execution", "context", "for", "the", "invocation", "of", "the", {
    "code": "eval"
  }, "function", "."]
}, {
  "tokens": ["If", {
    "id": "direct"
  }, "is", {
    "value": "true"
  }, ",", "then"]
}, {
  "tokens": ["Let", {
    "id": "lexEnv"
  }, "be", "NewDeclarativeEnvironment", "(", {
    "id": "ctx"
  }, "'", "s", "LexicalEnvironment", ")", "."]
}, {
  "tokens": ["Let", {
    "id": "varEnv"
  }, "be", {
    "id": "ctx"
  }, "'", "s", "VariableEnvironment", "."]
}, {
  "tokens": ["Else", ","]
}, {
  "tokens": ["Let", {
    "id": "lexEnv"
  }, "be", "NewDeclarativeEnvironment", "(", {
    "id": "evalRealm"
  }, ".", "[", "[", "GlobalEnv", "]", "]", ")", "."]
}, {
  "tokens": ["Let", {
    "id": "varEnv"
  }, "be", {
    "id": "evalRealm"
  }, ".", "[", "[", "GlobalEnv", "]", "]", "."]
}, {
  "tokens": ["If", {
    "id": "strictEval"
  }, "is", {
    "value": "true"
  }, ",", "let", {
    "id": "varEnv"
  }, "be", {
    "id": "lexEnv"
  }, "."]
}, {
  "tokens": ["If", {
    "id": "ctx"
  }, "is", "not", "already", "suspended", ",", "suspend", {
    "id": "ctx"
  }, "."]
}, {
  "tokens": ["Let", {
    "id": "evalCxt"
  }, "be", "a", "new", "ECMAScript", "code", "execution", "context", "."]
}, {
  "tokens": ["Set", "the", {
    "id": "evalCxt"
  }, "'", "s", "Function", "to", {
    "value": "null"
  }, "."]
}, {
  "tokens": ["Set", "the", {
    "id": "evalCxt"
  }, "'", "s", "Realm", "to", {
    "id": "evalRealm"
  }, "."]
}, {
  "tokens": ["Set", "the", {
    "id": "evalCxt"
  }, "'", "s", "ScriptOrModule", "to", {
    "id": "ctx"
  }, "'", "s", "ScriptOrModule", "."]
}, {
  "tokens": ["Set", "the", {
    "id": "evalCxt"
  }, "'", "s", "VariableEnvironment", "to", {
    "id": "varEnv"
  }, "."]
}, {
  "tokens": ["Set", "the", {
    "id": "evalCxt"
  }, "'", "s", "LexicalEnvironment", "to", {
    "id": "lexEnv"
  }, "."]
}, {
  "tokens": ["Push", {
    "id": "evalCxt"
  }, "on", "to", "the", "execution", "context", "stack", ";", {
    "id": "evalCxt"
  }, "is", "now", "the", "running", "execution", "context", "."]
}, {
  "tokens": ["Let", {
    "id": "result"
  }, "be", "EvalDeclarationInstantiation", "(", {
    "id": "body"
  }, ",", {
    "id": "varEnv"
  }, ",", {
    "id": "lexEnv"
  }, ",", {
    "id": "strictEval"
  }, ")", "."]
}, {
  "tokens": ["If", {
    "id": "result"
  }, ".", "[", "[", "Type", "]", "]", "is", {
    "const": "normal"
  }, ",", "then"]
}, {
  "tokens": ["Let", {
    "id": "result"
  }, "be", "the", "result", "of", "evaluating", {
    "id": "body"
  }, "."]
}, {
  "tokens": ["If", {
    "id": "result"
  }, ".", "[", "[", "Type", "]", "]", "is", {
    "const": "normal"
  }, "and", {
    "id": "result"
  }, ".", "[", "[", "Value", "]", "]", "is", {
    "const": "empty"
  }, ",", "then"]
}, {
  "tokens": ["Let", {
    "id": "result"
  }, "be", "NormalCompletion", "(", {
    "value": "undefined"
  }, ")", "."]
}, {
  "tokens": ["Suspend", {
    "id": "evalCxt"
  }, "and", "remove", "it", "from", "the", "execution", "context", "stack", "."]
}, {
  "tokens": ["Resume", "the", "context", "that", "is", "now", "on", "the", "top", "of", "the", "execution", "context", "stack", "as", "the", "running", "execution", "context", "."]
}, {
  "tokens": ["Return", "Completion", "(", {
    "id": "result"
  }, ")", "."]
}]