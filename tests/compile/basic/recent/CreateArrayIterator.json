["Assert", ":", "Type", "(", {
  "id": "array"
}, ")", "is", "Object", ".", {
  "k": 0
}, "Assert", ":", {
  "id": "kind"
}, "is", {
  "const": "key+value"
}, ",", {
  "const": "key"
}, ",", "or", {
  "const": "value"
}, ".", {
  "k": 1
}, "Let", {
  "id": "closure"
}, "be", "a", "new", "Abstract", "Closure", "with", "no", "parameters", "that", "captures", {
  "id": "kind"
}, "and", {
  "id": "array"
}, "and", "performs", "the", "following", "steps", "when", "called", ":", {
  "in": null
}, "Let", {
  "id": "index"
}, "be", "0", ".", {
  "k": 3
}, "Repeat", ",", {
  "in": null
}, "If", {
  "id": "array"
}, "has", "a", "[", "[", "TypedArrayName", "]", "]", "internal", "slot", ",", "then", {
  "in": null
}, "If", "IsDetachedBuffer", "(", {
  "id": "array"
}, ".", "[", "[", "ViewedArrayBuffer", "]", "]", ")", "is", {
  "value": "true"
}, ",", "throw", "a", {
  "value": "TypeError"
}, "exception", ".", {
  "k": 6
}, "Let", {
  "id": "len"
}, "be", {
  "id": "array"
}, ".", "[", "[", "ArrayLength", "]", "]", ".", {
  "k": 7
}, {
  "out": null
}, {
  "k": 5
}, "Else", ",", {
  "in": null
}, "Let", {
  "id": "len"
}, "be", "?", "LengthOfArrayLike", "(", {
  "id": "array"
}, ")", ".", {
  "k": 9
}, {
  "out": null
}, {
  "k": 8
}, "If", {
  "id": "index"
}, "‚â•", {
  "id": "len"
}, ",", "return", {
  "value": "undefined"
}, ".", {
  "k": 10
}, "If", {
  "id": "kind"
}, "is", {
  "const": "key"
}, ",", "perform", "?", "Yield", "(", "ùîΩ", "(", {
  "id": "index"
}, ")", ")", ".", {
  "k": 11
}, "Else", ",", {
  "in": null
}, "Let", {
  "id": "elementKey"
}, "be", "!", "ToString", "(", "ùîΩ", "(", {
  "id": "index"
}, ")", ")", ".", {
  "k": 13
}, "Let", {
  "id": "elementValue"
}, "be", "?", "Get", "(", {
  "id": "array"
}, ",", {
  "id": "elementKey"
}, ")", ".", {
  "k": 14
}, "If", {
  "id": "kind"
}, "is", {
  "const": "value"
}, ",", "perform", "?", "Yield", "(", {
  "id": "elementValue"
}, ")", ".", {
  "k": 15
}, "Else", ",", {
  "in": null
}, "Assert", ":", {
  "id": "kind"
}, "is", {
  "const": "key+value"
}, ".", {
  "k": 17
}, "Perform", "?", "Yield", "(", "!", "CreateArrayFromList", "(", "¬´", "ùîΩ", "(", {
  "id": "index"
}, ")", ",", {
  "id": "elementValue"
}, "¬ª", ")", ")", ".", {
  "k": 18
}, {
  "out": null
}, {
  "k": 16
}, {
  "out": null
}, {
  "k": 12
}, "Set", {
  "id": "index"
}, "to", {
  "id": "index"
}, "+", "1", ".", {
  "k": 19
}, {
  "out": null
}, {
  "k": 4
}, {
  "out": null
}, {
  "k": 2
}, "Return", "!", "CreateIteratorFromClosure", "(", {
  "id": "closure"
}, ",", {
  "value": "\"%ArrayIteratorPrototype%\""
}, ",", "%", "ArrayIteratorPrototype", "%", ")", ".", {
  "k": 20
}]