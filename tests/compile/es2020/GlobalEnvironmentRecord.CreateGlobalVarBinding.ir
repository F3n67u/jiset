{
  [1] let ObjRec = envRec.ObjectRecord
  [2] let globalObject = ObjRec.BindingObject
  [3] app __x0__ = (HasOwnProperty globalObject N)
  [3] if (is-completion __x0__) if (= __x0__.Type CONST_normal) __x0__ = __x0__.Value else return __x0__ else [4] {}
  [3] let hasProperty = __x0__
  [4] app __x1__ = (IsExtensible globalObject)
  [4] if (is-completion __x1__) if (= __x1__.Type CONST_normal) __x1__ = __x1__.Value else return __x1__ else [4] {}
  [4] let extensible = __x1__
  [5] if (&& (= hasProperty false) (= extensible true)) {
    [6] app __x2__ = (ObjRec.CreateMutableBinding ObjRec N D)
    [6] if (is-completion __x2__) if (= __x2__.Type CONST_normal) __x2__ = __x2__.Value else return __x2__ else [4] {}
    [6] __x2__
    [7] app __x3__ = (ObjRec.InitializeBinding ObjRec N undefined)
    [7] if (is-completion __x3__) if (= __x3__.Type CONST_normal) __x3__ = __x3__.Value else return __x3__ else [4] {}
    [7] __x3__
  } else [4] {}
  [8] let varDeclaredNames = envRec.VarNames
  [9] if (! (contains varDeclaredNames N)) append N -> varDeclaredNames else [4] {}
  [11] app __x4__ = (NormalCompletion CONST_empty)
  [11] app __x5__ = (WrapCompletion __x4__)
  [11] return __x5__
}