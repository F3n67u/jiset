{
  ??? "If the source code matching this production is strict mode code , the Early Error rules for grammar:{UniqueFormalParameters0, [FormalParameters]} are applied ."
  ??? "If the source code matching this production is strict mode code , it is a Syntax Error if nt:{BindingIdentifier} is present and the StringValue of nt:{BindingIdentifier} is code:{\"eval\"} or code:{\"arguments\"} ."
  let __x0__ = true
  access __x1__ = (FunctionBody "ContainsUseStrict")
  __x0__ = (= __x1__ true)
  if __x0__ {
    access __x2__ = (FormalParameters "IsSimpleParameterList")
    __x0__ = (= __x2__ false)
  } else {}
  if __x0__ throw INTRINSIC_SyntaxError else return undefined
  access __x3__ = (FormalParameters "BoundNames")
  access __x4__ = (FunctionBody "LexicallyDeclaredNames")
  let __x5__ = __x3__
  let __x6__ = __x4__
  let __x7__ = 0i
  let __x8__ = 0i
  let __x9__ = false
  while (< __x7__ __x5__.length) {
    __x8__ = 0i
    while (< __x8__ __x6__.length) if (= __x5__[__x7__] __x6__[__x8__]) __x9__ = true else {}
  }
  if __x9__ throw INTRINSIC_SyntaxError else return undefined
  access __x10__ = (FormalParameters "Contains")
  app __x11__ = (__x10__ "SuperProperty")
  if (= __x11__ true) throw INTRINSIC_SyntaxError else return undefined
  access __x12__ = (FunctionBody "Contains")
  app __x13__ = (__x12__ "SuperProperty")
  if (= __x13__ true) throw INTRINSIC_SyntaxError else return undefined
  access __x14__ = (FormalParameters "Contains")
  app __x15__ = (__x14__ "SuperCall")
  if (= __x15__ true) throw INTRINSIC_SyntaxError else return undefined
  access __x16__ = (FunctionBody "Contains")
  app __x17__ = (__x16__ "SuperCall")
  if (= __x17__ true) throw INTRINSIC_SyntaxError else return undefined
}