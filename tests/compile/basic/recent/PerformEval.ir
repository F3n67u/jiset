{
  if (! (= (typeof x) String)) return x else {}
  let evalRealm = REALM
  app __x0__ = (HostEnsureCanCompileStrings callerRealm evalRealm)
  [? __x0__]
  let inFunction = false
  let inMethod = false
  let inDerivedConstructor = false
  if (= direct true) {
    app __x1__ = (GetThisEnvironment)
    let thisEnvRec = [! __x1__]
    if (is-instance-of thisEnvRec FunctionEnvironmentRecord) {
      let F = thisEnvRec.FunctionObject
      inFunction = true
      app __x2__ = (thisEnvRec.HasSuperBinding thisEnvRec)
      inMethod = __x2__
      if (= F.ConstructorKind CONST_derived) inDerivedConstructor = true else {}
    } else {}
  } else {}
  let parameterGoal = FormalParameters
  let script = Script
  let body = ScriptBody
  if (= strictCaller true) let strictEval = true else {
    access __x3__ = (script "IsStrict")
    let strictEval = __x3__
  }
  let runningContext = CONTEXT
  if (= direct true) {
    app __x4__ = (NewDeclarativeEnvironment runningContext.LexicalEnvironment)
    let lexEnv = __x4__
    let varEnv = runningContext.VariableEnvironment
  } else {
    app __x5__ = (NewDeclarativeEnvironment evalRealm.GlobalEnv)
    let lexEnv = __x5__
    let varEnv = evalRealm.GlobalEnv
  }
  if (= strictEval true) varEnv = lexEnv else {}
  if (= runningContext null) CONTEXT = null else {}
  let evalContext = (new ExecutionContext("SubMap" -> (new SubMap())))
  evalContext.Function = null
  evalContext.Realm = evalRealm
  evalContext.ScriptOrModule = runningContext.ScriptOrModule
  evalContext.VariableEnvironment = varEnv
  evalContext.LexicalEnvironment = lexEnv
  append evalContext -> EXECUTION_STACK
  CONTEXT = EXECUTION_STACK[(- EXECUTION_STACK.length 1i)]
  app __x6__ = (EvalDeclarationInstantiation body varEnv lexEnv strictEval)
  let result = __x6__
  if (= result.Type CONST_normal) {
    access __x7__ = (body "Evaluation")
    result = __x7__
  } else {}
  if (&& (= result.Type CONST_normal) (= result.Value CONST_empty)) {
    app __x8__ = (NormalCompletion undefined)
    result = __x8__
  } else {}
  CONTEXT = null
  if (= EXECUTION_STACK[(- EXECUTION_STACK.length 1i)] evalContext) (pop EXECUTION_STACK (- EXECUTION_STACK.length 1i)) else {}
  CONTEXT = EXECUTION_STACK[(- EXECUTION_STACK.length 1i)]
  return result
}