{
  app __x0__ = (GetArgument argumentsList 0i)
  let target = __x0__
  app __x1__ = (GetArgument argumentsList 1i)
  let start = __x1__
  app __x2__ = (GetArgument argumentsList 2i)
  let end = __x2__
  app __x3__ = (ToObject this)
  let O = [? __x3__]
  app __x4__ = (LengthOfArrayLike O)
  let len = [? __x4__]
  app __x5__ = (ToInteger target)
  let relativeTarget = [? __x5__]
  if (< relativeTarget 0i) {
    app __x6__ = (max (+ len relativeTarget) 0i)
    let to = __x6__
  } else {
    app __x7__ = (min relativeTarget len)
    let to = __x7__
  }
  app __x8__ = (ToInteger start)
  let relativeStart = [? __x8__]
  if (< relativeStart 0i) {
    app __x9__ = (max (+ len relativeStart) 0i)
    let from = __x9__
  } else {
    app __x10__ = (min relativeStart len)
    let from = __x10__
  }
  if (= end undefined) let relativeEnd = len else {
    app __x11__ = (ToInteger end)
    let relativeEnd = [? __x11__]
  }
  if (< relativeEnd 0i) {
    app __x12__ = (max (+ len relativeEnd) 0i)
    let final = __x12__
  } else {
    app __x13__ = (min relativeEnd len)
    let final = __x13__
  }
  app __x14__ = (min (- final from) (- len to))
  let count = __x14__
  if (&& (< from to) (< to (+ from count))) {
    let direction = -1i
    from = (- (+ from count) 1i)
    to = (- (+ to count) 1i)
  } else let direction = 1i
  while (< 0i count) {
    app __x15__ = (ToString from)
    let fromKey = [! __x15__]
    app __x16__ = (ToString to)
    let toKey = [! __x16__]
    app __x17__ = (HasProperty O fromKey)
    let fromPresent = [? __x17__]
    if (= fromPresent true) {
      app __x18__ = (Get O fromKey)
      let fromVal = [? __x18__]
      app __x19__ = (Set O toKey fromVal true)
      [? __x19__]
    } else {
      assert (= fromPresent false)
      app __x20__ = (DeletePropertyOrThrow O toKey)
      [? __x20__]
    }
    from = (+ from direction)
    to = (+ to direction)
    count = (- count 1i)
  }
  return O
}