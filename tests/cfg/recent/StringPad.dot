digraph {
  node14117 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return S</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14113 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let filler = &quot; &quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14116 [shape=diamond, label=<<font color="black">(= filler &quot;&quot;)</font>> color="black" fillcolor="white" style=filled]
  node14107 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">1:let S = [? __x0__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14119 [shape=diamond, label=<<font color="black">(= placement CONST_start)</font>> color="black" fillcolor="white" style=filled]
  node14115 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let filler = [? __x2__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14106 [shape=cds, label=<<font color="black">1:app __x0__ = (ToString O)</font>> color="black" fillcolor="white" style=filled]
  node14111 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return S</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14118 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">8:let fillLen = (- intMaxLength stringLength)</td></tr>
      <tr><td align="left">9:??? &quot;Let id:{truncatedStringFiller} be the String value consisting of repeated concatenations of id:{filler} truncated to length id:{fillLen} .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14108 [shape=cds, label=<<font color="black">2:app __x1__ = (ToLength maxLength)</font>> color="black" fillcolor="white" style=filled]
  node14105 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:assert (|| (= placement CONST_start) (= placement CONST_end))</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14114 [shape=cds, label=<<font color="black">app __x2__ = (ToString fillString)</font>> color="black" fillcolor="white" style=filled]
  node14112 [shape=diamond, label=<<font color="black">(= fillString undefined)</font>> color="black" fillcolor="white" style=filled]
  node14103 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node14109 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">2:let intMaxLength = [? __x1__]</td></tr>
      <tr><td align="left">3:let stringLength = S.length</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14121 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return (+ S truncatedStringFiller)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14120 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return (+ truncatedStringFiller S)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14110 [shape=diamond, label=<<font color="black">(! (&lt; stringLength intMaxLength))</font>> color="black" fillcolor="white" style=filled]
  node14104 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node14106 -> node14107 [ color="black"]
  node14119 -> node14120 [label=<<font color="black">true</font>> color="black"]
  node14119 -> node14121 [label=<<font color="black">false</font>> color="black"]
  node14103 -> node14105 [ color="black"]
  node14121 -> node14104 [ color="black"]
  node14113 -> node14116 [ color="black"]
  node14118 -> node14119 [ color="black"]
  node14105 -> node14106 [ color="black"]
  node14111 -> node14112 [ color="black"]
  node14112 -> node14113 [label=<<font color="black">true</font>> color="black"]
  node14112 -> node14114 [label=<<font color="black">false</font>> color="black"]
  node14120 -> node14104 [ color="black"]
  node14109 -> node14110 [ color="black"]
  node14110 -> node14111 [label=<<font color="black">true</font>> color="black"]
  node14110 -> node14112 [label=<<font color="black">false</font>> color="black"]
  node14107 -> node14108 [ color="black"]
  node14108 -> node14109 [ color="black"]
  node14115 -> node14116 [ color="black"]
  node14116 -> node14117 [label=<<font color="black">true</font>> color="black"]
  node14116 -> node14118 [label=<<font color="black">false</font>> color="black"]
  node14114 -> node14115 [ color="black"]
  node14117 -> node14118 [ color="black"]
}
