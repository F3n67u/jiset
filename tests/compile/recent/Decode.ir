{
  [0] let strLen = string.length
  [1] let R = ""
  [2] let k = 0i
  [3] while true {
    [4] if (== k strLen) {
      app __x0__ = (WrapCompletion R)
      return __x0__
    } else [71] {}
    [5] let C = string[k]
    [8] if (! (= C "%")) let S = C else {
      [9] let start = k
      [10] if (! (< (+ k 2i) strLen)) {
        app __x1__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_URIError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
        return __x1__
      } else [71] {}
      [11] ??? "If the code units at index ( id:{k} + 1 ) and ( id:{k} + 2 ) within id:{string} do not represent hexadecimal digits , throw a value:{URIError} exception ."
      [12] ??? "Let id:{B} be the 8 - bit value represented by the two hexadecimal digits at index ( id:{k} + 1 ) and ( id:{k} + 2 ) ."
      [13] k = (+ k 2i)
      [14] ??? "Let id:{n} be the number of leading 1 bits in id:{B} ."
      [21] if (== n 0i) {
        [16] let C = B
        [19] if (! (contains reservedSet C)) let S = C else ??? "Let id:{S} be the substring of id:{string} from id:{start} to id:{k} + 1 ."
      } else {
        [22] if (|| (== n 1i) (< 4i n)) {
          app __x2__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_URIError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
          return __x2__
        } else [71] {}
        [23] if (! (< (+ k (* 3i (- n 1i))) strLen)) {
          app __x3__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_URIError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
          return __x3__
        } else [71] {}
        [24] ??? "Let id:{Octets} be a List whose sole element is id:{B} ."
        [25] let j = 1i
        [26] while (< j n) {
          [27] k = (+ k 1i)
          [28] if (! (= string[k] "%")) {
            app __x4__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_URIError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
            return __x4__
          } else [71] {}
          [29] ??? "If the code units at index ( id:{k} + 1 ) and ( id:{k} + 2 ) within id:{string} do not represent hexadecimal digits , throw a value:{URIError} exception ."
          [30] ??? "Let id:{B} be the 8 - bit value represented by the two hexadecimal digits at index ( id:{k} + 1 ) and ( id:{k} + 2 ) ."
          [31] k = (+ k 2i)
          [32] append B -> Octets
          [33] j = (+ j 1i)
        }
        [34] assert (= Octets.length n)
        [35] ??? "If id:{Octets} does not contain a valid UTF - 8 encoding of a Unicode code point , throw a value:{URIError} exception ."
        [36] ??? "Let id:{V} be the code point obtained by applying the UTF - 8 transformation to id:{Octets} , that is , from a List of octets into a 21 - bit value ."
        [37] app __x5__ = (UTF16EncodeCodePoint V)
        [37] let S = __x5__
      }
    }
    [38] R = (+ R S)
    [39] k = (+ k 1i)
  }
}