{
  app __x0__ = (IsConstructor constructor)
  if (is-completion __x0__) if (= __x0__.Type CONST_normal) __x0__ = __x0__.Value else return __x0__ else {}
  assert (= __x0__ true)
  let values = (new [])
  let remainingElementsCount = (new Record("Value" -> 1i))
  let index = 0i
  app __x1__ = (Get constructor "resolve")
  if (is-completion __x1__) if (= __x1__.Type CONST_normal) __x1__ = __x1__.Value else return __x1__ else {}
  let promiseResolve = __x1__
  app __x2__ = (IsCallable promiseResolve)
  if (= __x2__ false) throw INTRINSIC_TypeError else {}
  while true {
    app __x3__ = (IteratorStep iteratorRecord)
    let next = __x3__
    app __x4__ = (IsAbruptCompletion next)
    if __x4__ iteratorRecord.Done = true else {}
    if (is-completion next) if (= next.Type CONST_normal) next = next.Value else return next else {}
    next
    if (= next false) {
      iteratorRecord.Done = true
      remainingElementsCount.Value = (- remainingElementsCount.Value 1i)
      if (= remainingElementsCount.Value 0i) {
        app __x5__ = (CreateArrayFromList values)
        if (is-completion __x5__) if (= __x5__.Type CONST_normal) __x5__ = __x5__.Value else return __x5__ else {}
        let valuesArray = __x5__
        app __x6__ = (Call resultCapability.Resolve undefined (new [valuesArray]))
        if (is-completion __x6__) if (= __x6__.Type CONST_normal) __x6__ = __x6__.Value else return __x6__ else {}
        __x6__
      } else {}
      app __x7__ = (WrapCompletion resultCapability.Promise)
      return __x7__
    } else {}
    app __x8__ = (IteratorValue next)
    let nextValue = __x8__
    app __x9__ = (IsAbruptCompletion nextValue)
    if __x9__ iteratorRecord.Done = true else {}
    if (is-completion nextValue) if (= nextValue.Type CONST_normal) nextValue = nextValue.Value else return nextValue else {}
    nextValue
    append undefined -> values
    app __x10__ = (Call promiseResolve constructor (new [nextValue]))
    if (is-completion __x10__) if (= __x10__.Type CONST_normal) __x10__ = __x10__.Value else return __x10__ else {}
    let nextPromise = __x10__
    ??? "Let id:{steps} be the algorithm steps defined in link:{unhandled: sec-promise.allsettled-resolve-element-functions} ."
    app __x11__ = (CreateBuiltinFunction steps (new ["AlreadyCalled", "Index", "Values", "Capability", "RemainingElements"]))
    if (is-completion __x11__) if (= __x11__.Type CONST_normal) __x11__ = __x11__.Value else return __x11__ else {}
    let resolveElement = __x11__
    let alreadyCalled = (new Record("Value" -> false))
    resolveElement.AlreadyCalled = alreadyCalled
    resolveElement.Index = index
    resolveElement.Values = values
    resolveElement.Capability = resultCapability
    resolveElement.RemainingElements = remainingElementsCount
    ??? "Let id:{rejectSteps} be the algorithm steps defined in link:{unhandled: sec-promise.allsettled-reject-element-functions} ."
    app __x12__ = (CreateBuiltinFunction rejectSteps (new ["AlreadyCalled", "Index", "Values", "Capability", "RemainingElements"]))
    if (is-completion __x12__) if (= __x12__.Type CONST_normal) __x12__ = __x12__.Value else return __x12__ else {}
    let rejectElement = __x12__
    rejectElement.AlreadyCalled = alreadyCalled
    rejectElement.Index = index
    rejectElement.Values = values
    rejectElement.Capability = resultCapability
    rejectElement.RemainingElements = remainingElementsCount
    remainingElementsCount.Value = (+ remainingElementsCount.Value 1i)
    app __x13__ = (Invoke nextPromise "then" (new [resolveElement, rejectElement]))
    if (is-completion __x13__) if (= __x13__.Type CONST_normal) __x13__ = __x13__.Value else return __x13__ else {}
    __x13__
    index = (+ index 1i)
  }
}