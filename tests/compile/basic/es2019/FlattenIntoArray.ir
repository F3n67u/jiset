{
  let targetIndex = start
  let sourceIndex = 0i
  while (< sourceIndex sourceLen) {
    app __x0__ = (ToString sourceIndex)
    let P = [! __x0__]
    app __x1__ = (HasProperty source P)
    let exists = [? __x1__]
    if (= exists true) {
      app __x2__ = (Get source P)
      let element = [? __x2__]
      if (! (= mapperFunction absent)) {
        assert (! (= thisArg absent))
        app __x3__ = (Call mapperFunction thisArg (new [element, sourceIndex, source]))
        element = [? __x3__]
      } else {}
      let shouldFlatten = false
      if (< 0i depth) {
        app __x4__ = (IsArray element)
        shouldFlatten = [? __x4__]
      } else {}
      if (= shouldFlatten true) {
        app __x5__ = (Get element "length")
        app __x6__ = (ToLength [? __x5__])
        let elementLen = [? __x6__]
        app __x7__ = (FlattenIntoArray target element elementLen targetIndex (- depth 1i))
        targetIndex = [? __x7__]
      } else {
        if (! (< targetIndex (- (** 2.0 53i) 1i))) throw TypeError else {}
        app __x8__ = (ToString targetIndex)
        app __x9__ = (CreateDataPropertyOrThrow target [! __x8__] element)
        [? __x9__]
        targetIndex = (+ targetIndex 1i)
      }
    } else {}
    sourceIndex = (+ sourceIndex 1i)
  }
  return targetIndex
}