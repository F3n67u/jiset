{
  let Target = this
  app __x0__ = (IsCallable Target)
  if (= __x0__ false) throw TypeError else {}
  app __x1__ = (BoundFunctionCreate Target thisArg args)
  let F = [? __x1__]
  let L = 0i
  app __x2__ = (HasOwnProperty Target "length")
  let targetHasLength = [? __x2__]
  if (= targetHasLength true) {
    app __x3__ = (Get Target "length")
    let targetLen = [? __x3__]
    app __x4__ = (Type targetLen)
    if (= __x4__ Number) if (= targetLen Infinity) L = Infinity else if (= targetLen -Infinity) L = 0i else {
      app __x5__ = (ToIntegerOrInfinity targetLen)
      let targetLenAsInt = [! __x5__]
      assert (! (|| (= targetLenAsInt Infinity) (= targetLenAsInt -Infinity)))
      let argCount = args.length
      app __x6__ = (max (- targetLenAsInt argCount) 0i)
      L = __x6__
    } else {}
  } else {}
  app __x7__ = (SetFunctionLength F L)
  [! __x7__]
  app __x8__ = (Get Target "name")
  let targetName = [? __x8__]
  app __x9__ = (Type targetName)
  if (! (= __x9__ String)) targetName = "" else {}
  app __x10__ = (SetFunctionName F targetName "bound")
  __x10__
  return F
}