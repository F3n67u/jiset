{
  [0] app __x0__ = (Type index)
  [0] assert (= __x0__ Number)
  [2] app __x1__ = (ToNumber value)
  [2] if (is-completion __x1__) if (= __x1__.Type CONST_normal) __x1__ = __x1__.Value else return __x1__ else [1] {}
  [2] let numValue = __x1__
  [3] let buffer = O.ViewedArrayBuffer
  [4] app __x2__ = (IsDetachedBuffer buffer)
  [4] if (= __x2__ true) {
    app __x3__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_TypeError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
    return __x3__
  } else [1] {}
  [5] app __x4__ = (IsInteger index)
  [5] if (= __x4__ false) {
    app __x5__ = (WrapCompletion false)
    return __x5__
  } else [1] {}
  [6] if (== index -0.0) {
    app __x6__ = (WrapCompletion false)
    return __x6__
  } else [1] {}
  [7] let length = O.ArrayLength
  [8] if (|| (< index 0i) (! (< index length))) {
    app __x7__ = (WrapCompletion false)
    return __x7__
  } else [1] {}
  [9] let offset = O.ByteOffset
  [10] let arrayTypeName = O.TypedArrayName
  [11] ??? "Let id:{elementSize} be the Number value of the Element Size value specified in link:{} for id:{arrayTypeName} ."
  [12] let indexedPosition = (+ (* index elementSize) offset)
  [13] ??? "Let id:{elementType} be the String value of the Element Type value in link:{} for id:{arrayTypeName} ."
  [14] app __x8__ = (SetValueInBuffer buffer indexedPosition elementType numValue)
  [14] __x8__
  [15] app __x9__ = (WrapCompletion true)
  [15] return __x9__
}