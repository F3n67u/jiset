{
  app separator = (GetArgument argumentsList 0i)
  app limit = (GetArgument argumentsList 1i)
  [0] app __x0__ = (RequireObjectCoercible this)
  [0] if (is-completion __x0__) if (= __x0__.Type CONST_normal) __x0__ = __x0__.Value else return __x0__ else [25] {}
  [0] let O = __x0__
  [1] if (! (|| (= separator undefined) (= separator null))) {
    [2] app __x1__ = (GetMethod separator SYMBOL_split)
    [2] if (is-completion __x1__) if (= __x1__.Type CONST_normal) __x1__ = __x1__.Value else return __x1__ else [25] {}
    [2] let splitter = __x1__
    [3] if (! (= splitter undefined)) {
      [4] app __x2__ = (Call splitter separator (new [O, limit]))
      [4] if (is-completion __x2__) if (= __x2__.Type CONST_normal) __x2__ = __x2__.Value else return __x2__ else [25] {}
      [4] app __x3__ = (WrapCompletion __x2__)
      [4] return __x3__
    } else [25] {}
  } else [25] {}
  [5] app __x4__ = (ToString O)
  [5] if (is-completion __x4__) if (= __x4__.Type CONST_normal) __x4__ = __x4__.Value else return __x4__ else [25] {}
  [5] let S = __x4__
  [6] app __x5__ = (ArrayCreate 0i)
  [6] if (is-completion __x5__) if (= __x5__.Type CONST_normal) __x5__ = __x5__.Value else return __x5__ else [25] {}
  [6] let A = __x5__
  [7] let lengthA = 0i
  [8] ??? "If id:{limit} is value:{undefined} , let id:{lim} be 2 sup:{32 } - 1 ; else let id:{lim} be ‚Ñù ( ? ToUint32 ( id:{limit} ) ) ."
  [9] app __x6__ = (ToString separator)
  [9] if (is-completion __x6__) if (= __x6__.Type CONST_normal) __x6__ = __x6__.Value else return __x6__ else [25] {}
  [9] let R = __x6__
  [10] if (== lim 0i) {
    app __x7__ = (WrapCompletion A)
    return __x7__
  } else [25] {}
  [11] if (= separator undefined) {
    [12] app __x8__ = (CreateDataPropertyOrThrow A "0" S)
    [12] if (is-completion __x8__) if (= __x8__.Type CONST_normal) __x8__ = __x8__.Value else return __x8__ else [25] {}
    [12] __x8__
    [13] app __x9__ = (WrapCompletion A)
    [13] return __x9__
  } else [25] {}
  [14] let s = S.length
  [15] if (== s 0i) {
    [16] if (! (= R "")) {
      [17] app __x10__ = (CreateDataPropertyOrThrow A "0" S)
      [17] if (is-completion __x10__) if (= __x10__.Type CONST_normal) __x10__ = __x10__.Value else return __x10__ else [25] {}
      [17] __x10__
    } else [25] {}
    [18] app __x11__ = (WrapCompletion A)
    [18] return __x11__
  } else [25] {}
  [19] let p = 0i
  [20] let q = p
  [21] while (! (== q s)) {
    [22] app __x12__ = (SplitMatch S q R)
    [22] let e = __x12__
    [24] if (= e CONST_notDASHmatched) q = (+ q 1i) else if (== e p) q = (+ q 1i) else {
      [28] ??? "Let id:{T} be the substring of id:{S} from id:{p} to id:{q} ."
      [29] ??? "Perform ! CreateDataPropertyOrThrow ( id:{A} , ! ToString ( ùîΩ ( id:{lengthA} ) ) , id:{T} ) ."
      [30] lengthA = (+ lengthA 1i)
      [31] if (== lengthA lim) {
        app __x13__ = (WrapCompletion A)
        return __x13__
      } else [25] {}
      [32] p = e
      [33] q = p
    }
  }
  [34] ??? "Let id:{T} be the substring of id:{S} from id:{p} to id:{s} ."
  [35] ??? "Perform ! CreateDataPropertyOrThrow ( id:{A} , ! ToString ( ùîΩ ( id:{lengthA} ) ) , id:{T} ) ."
  [36] app __x14__ = (WrapCompletion A)
  [36] return __x14__
}