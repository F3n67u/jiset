{
  app __x0__ = (ToObject this)
  let O = [? __x0__]
  app __x1__ = (Get O "length")
  app __x2__ = (ToLength [? __x1__])
  let len = [? __x2__]
  app __x3__ = (ToInteger start)
  let relativeStart = [? __x3__]
  if (< relativeStart 0i) {
    app __x4__ = (max (+ len relativeStart) 0i)
    let actualStart = __x4__
  } else {
    app __x5__ = (min relativeStart len)
    let actualStart = __x5__
  }
  if (= argumentsList.length 0i) {
    let insertCount = 0i
    let actualDeleteCount = 0i
  } else if (= argumentsList.length 1i) {
    let insertCount = 0i
    let actualDeleteCount = (- len actualStart)
  } else {
    let insertCount = (- argumentsList.length 2i)
    app __x6__ = (ToInteger deleteCount)
    let dc = [? __x6__]
    app __x7__ = (max dc 0i)
    app __x8__ = (min __x7__ (- len actualStart))
    let actualDeleteCount = __x8__
  }
  if (< (- (** 2.0 53i) 1i) (- (+ len insertCount) actualDeleteCount)) throw TypeError else {}
  app __x9__ = (ArraySpeciesCreate O actualDeleteCount)
  let A = [? __x9__]
  let k = 0i
  while (< k actualDeleteCount) {
    app __x10__ = (ToString (+ actualStart k))
    let from = [! __x10__]
    app __x11__ = (HasProperty O from)
    let fromPresent = [? __x11__]
    if (= fromPresent true) {
      app __x12__ = (Get O from)
      let fromValue = [? __x12__]
      app __x13__ = (ToString k)
      app __x14__ = (CreateDataPropertyOrThrow A [! __x13__] fromValue)
      [? __x14__]
    } else {}
    k = (+ k 1i)
  }
  app __x15__ = (Set A "length" actualDeleteCount true)
  [? __x15__]
  ??? "Let id:{items} be a List whose elements are , in left to right order , the portion of the actual argument list starting with the third argument . The list is empty if fewer than three arguments were passed ."
  let itemCount = items.length
  if (< itemCount actualDeleteCount) {
    let k = actualStart
    while (< k (- len actualDeleteCount)) {
      app __x16__ = (ToString (+ k actualDeleteCount))
      let from = [! __x16__]
      app __x17__ = (ToString (+ k itemCount))
      let to = [! __x17__]
      app __x18__ = (HasProperty O from)
      let fromPresent = [? __x18__]
      if (= fromPresent true) {
        app __x19__ = (Get O from)
        let fromValue = [? __x19__]
        app __x20__ = (Set O to fromValue true)
        [? __x20__]
      } else {
        app __x21__ = (DeletePropertyOrThrow O to)
        [? __x21__]
      }
      k = (+ k 1i)
    }
    let k = len
    while (< (+ (- len actualDeleteCount) itemCount) k) {
      app __x22__ = (ToString (- k 1i))
      app __x23__ = (DeletePropertyOrThrow O [! __x22__])
      [? __x23__]
      k = (- k 1i)
    }
  } else if (< actualDeleteCount itemCount) {
    let k = (- len actualDeleteCount)
    while (< actualStart k) {
      app __x24__ = (ToString (- (+ k actualDeleteCount) 1i))
      let from = [! __x24__]
      app __x25__ = (ToString (- (+ k itemCount) 1i))
      let to = [! __x25__]
      app __x26__ = (HasProperty O from)
      let fromPresent = [? __x26__]
      if (= fromPresent true) {
        app __x27__ = (Get O from)
        let fromValue = [? __x27__]
        app __x28__ = (Set O to fromValue true)
        [? __x28__]
      } else {
        app __x29__ = (DeletePropertyOrThrow O to)
        [? __x29__]
      }
      k = (- k 1i)
    }
  } else {}
  let k = actualStart
  while (< 0i items.length) {
    let E = (pop items 0i)
    app __x30__ = (ToString k)
    app __x31__ = (Set O [! __x30__] E true)
    [? __x31__]
    k = (+ k 1i)
  }
  app __x32__ = (Set O "length" (+ (- len actualDeleteCount) itemCount) true)
  [? __x32__]
  return A
}