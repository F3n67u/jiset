{
  if (contains stack value) throw INTRINSIC_TypeError else {}
  append value -> stack
  let stepback = indent
  indent = (+ indent gap)
  let partial = (new [])
  app __x0__ = (Get value "length")
  app __x1__ = (ToLength [? __x0__])
  let len = [? __x1__]
  let index = 0i
  while (< index len) {
    app __x2__ = (ToString index)
    app __x3__ = (SerializeJSONProperty [! __x2__] value)
    let strP = [? __x3__]
    if (= strP undefined) append "null" -> partial else append strP -> partial
    index = (+ index 1i)
  }
  if (= partial.length 0i) let final = "[]" else if (= gap "") {
    ??? "Let id:{properties} be a String formed by concatenating all the element Strings of id:{partial} with each adjacent pair of Strings separated with code unit 0x002C ( COMMA ) . A comma is not inserted either before the first String or after the last String ."
    let final = (+ (+ "[" properties) "]")
  } else {
    let separator = (+ (+ "," "\n") indent)
    ??? "Let id:{properties} be a String formed by concatenating all the element Strings of id:{partial} with each adjacent pair of Strings separated with id:{separator} . The id:{separator} String is not inserted either before the first String or after the last String ."
    let final = (+ (+ (+ (+ (+ (+ "[" "\n") indent) properties) "\n") stepback) "]")
  }
  (pop stack (- stack.length 1i))
  indent = stepback
  return final
}