{
  [0] app __x0__ = (IsPromise promise)
  [0] assert (= __x0__ true)
  [1] if (= resultCapability absent) resultCapability = undefined else [10] {}
  [5] app __x1__ = (IsCallable onFulfilled)
  [5] if (= __x1__ false) let onFulfilledJobCallback = CONST_empty else {
    [6] app __x2__ = (HostMakeJobCallback onFulfilled)
    [6] let onFulfilledJobCallback = __x2__
  }
  [9] app __x3__ = (IsCallable onRejected)
  [9] if (= __x3__ false) let onRejectedJobCallback = CONST_empty else {
    [10] app __x4__ = (HostMakeJobCallback onRejected)
    [10] let onRejectedJobCallback = __x4__
  }
  [11] let fulfillReaction = (new PromiseReaction("Capability" -> resultCapability, "Type" -> CONST_Fulfill, "Handler" -> onFulfilledJobCallback))
  [12] let rejectReaction = (new PromiseReaction("Capability" -> resultCapability, "Type" -> CONST_Reject, "Handler" -> onRejectedJobCallback))
  [20] if (= promise.PromiseState CONST_pending) {
    [14] append fulfillReaction -> promise.PromiseFulfillReactions
    [15] append rejectReaction -> promise.PromiseRejectReactions
  } else if (= promise.PromiseState CONST_fulfilled) {
    [17] let value = promise.PromiseResult
    [18] app __x5__ = (NewPromiseReactionJob fulfillReaction value)
    [18] let fulfillJob = __x5__
    [19] app __x6__ = (HostEnqueuePromiseJob fulfillJob.Job fulfillJob.Realm)
    [19] __x6__
  } else {
    [21] assert (= promise.PromiseState CONST_rejected)
    [22] let reason = promise.PromiseResult
    [23] if (= promise.PromiseIsHandled false) {
      app __x7__ = (HostPromiseRejectionTracker promise "handle")
      __x7__
    } else [10] {}
    [24] app __x8__ = (NewPromiseReactionJob rejectReaction reason)
    [24] let rejectJob = __x8__
    [25] app __x9__ = (HostEnqueuePromiseJob rejectJob.Job rejectJob.Realm)
    [25] __x9__
  }
  [26] promise.PromiseIsHandled = true
  [29] if (= resultCapability undefined) {
    [28] app __x10__ = (WrapCompletion undefined)
    [28] return __x10__
  } else {
    [30] app __x11__ = (WrapCompletion resultCapability.Promise)
    [30] return __x11__
  }
}