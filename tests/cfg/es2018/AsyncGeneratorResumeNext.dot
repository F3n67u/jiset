digraph {
  node17411 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">1:let state = generator.AsyncGeneratorState</td></tr>
      <tr><td align="left">2:assert (! (= state &quot;executing&quot;))</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17415 [shape=diamond, label=<<font color="black">(= queue.length 0i)</font>> color="black" fillcolor="white" style=filled]
  node17432 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">22:let onRejected = __x4__</td></tr>
      <tr><td align="left">23:onRejected.Generator = generator</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17410 [shape=cds, label=<<font color="black">app generator = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node17423 [shape=diamond, label=<<font color="black">(= completion.Type CONST_return)</font>> color="black" fillcolor="white" style=filled]
  node17440 [shape=diamond, label=<<font color="black">(= state &quot;completed&quot;)</font>> color="black" fillcolor="white" style=filled]
  node17412 [shape=diamond, label=<<font color="black">(= state &quot;awaiting-return&quot;)</font>> color="black" fillcolor="white" style=filled]
  node17436 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">26:[! __x6__]</td></tr>
      <tr><td align="left">27:return undefined</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17418 [shape=cds, label=<<font color="black">32:app __x0__ = (IsAbruptCompletion completion)</font>> color="black" fillcolor="white" style=filled]
  node17430 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">19:let onFulfilled = __x3__</td></tr>
      <tr><td align="left">20:onFulfilled.Generator = generator</td></tr>
      <tr><td align="left">21:let stepsRejected = AsyncGeneratorResumeNextReturnProcessorRejectedFunctions</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17413 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return undefined</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17435 [shape=cds, label=<<font color="black">26:app __x6__ = (PerformPromiseThen promiseCapability.Promise onFulfilled onRejected throwawayCapability)</font>> color="black" fillcolor="white" style=filled]
  node17438 [shape=cds, label=<<font color="black">30:app __x7__ = (AsyncGeneratorReject generator completion.Value)</font>> color="black" fillcolor="white" style=filled]
  node17417 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">6:let next = queue[0i]</td></tr>
      <tr><td align="left">8:let completion = next.Completion</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17443 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">33:assert (|| (= state &quot;suspendedStart&quot;) (= state &quot;suspendedYield&quot;))</td></tr>
      <tr><td align="left">34:let genContext = generator.AsyncGeneratorContext</td></tr>
      <tr><td align="left">35:let callerContext = GLOBAL_context</td></tr>
      <tr><td align="left">36:GLOBAL_context = null</td></tr>
      <tr><td align="left">37:generator.AsyncGeneratorState = &quot;executing&quot;</td></tr>
      <tr><td align="left">38:append genContext -&gt; GLOBAL_executionStack</td></tr>
      <tr><td align="left">38:GLOBAL_context = GLOBAL_executionStack[(- GLOBAL_executionStack.length 1i)]</td></tr>
      <tr><td align="left">39:??? &quot;Resume the suspended evaluation of id:{genContext} using id:{completion} as the result of the operation that suspended it . Let id:{result} be the completion record returned by the resumed computation .&quot;</td></tr>
      <tr><td align="left">42:return undefined</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17437 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">29:assert (= completion.Type CONST_throw)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17424 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">15:generator.AsyncGeneratorState = &quot;awaiting-return&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17433 [shape=cds, label=<<font color="black">24:app __x5__ = (NewPromiseCapability INTRINSIC_Promise)</font>> color="black" fillcolor="white" style=filled]
  node17428 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">17:[! __x2__]</td></tr>
      <tr><td align="left">18:let stepsFulfilled = AsyncGeneratorResumeNextReturnProcessorFulfilledFunctions</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17425 [shape=cds, label=<<font color="black">16:app __x1__ = (NewPromiseCapability INTRINSIC_Promise)</font>> color="black" fillcolor="white" style=filled]
  node17420 [shape=diamond, label=<<font color="black">(= state &quot;suspendedStart&quot;)</font>> color="black" fillcolor="white" style=filled]
  node17442 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return [! __x8__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17429 [shape=cds, label=<<font color="black">19:app __x3__ = (CreateBuiltinFunction stepsFulfilled (new [&quot;Generator&quot;]))</font>> color="black" fillcolor="white" style=filled]
  node17416 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return undefined</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17419 [shape=diamond, label=<<font color="black">__x0__</font>> color="black" fillcolor="white" style=filled]
  node17426 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">16:let promiseCapability = [! __x1__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17439 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">30:[! __x7__]</td></tr>
      <tr><td align="left">31:return undefined</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17422 [shape=diamond, label=<<font color="black">(= state &quot;completed&quot;)</font>> color="black" fillcolor="white" style=filled]
  node17421 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">11:generator.AsyncGeneratorState = &quot;completed&quot;</td></tr>
      <tr><td align="left">12:state = &quot;completed&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17408 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node17427 [shape=cds, label=<<font color="black">17:app __x2__ = (Call promiseCapability.Resolve undefined (new [completion.Value]))</font>> color="black" fillcolor="white" style=filled]
  node17434 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">24:let throwawayCapability = [! __x5__]</td></tr>
      <tr><td align="left">25:throwawayCapability.Promise.PromiseIsHandled = true</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17431 [shape=cds, label=<<font color="black">22:app __x4__ = (CreateBuiltinFunction stepsRejected (new [&quot;Generator&quot;]))</font>> color="black" fillcolor="white" style=filled]
  node17414 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">4:let queue = generator.AsyncGeneratorQueue</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17409 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node17441 [shape=cds, label=<<font color="black">app __x8__ = (AsyncGeneratorResolve generator undefined true)</font>> color="black" fillcolor="white" style=filled]
  node17415 -> node17416 [label=<<font color="black">true</font>> color="black"]
  node17415 -> node17417 [label=<<font color="black">false</font>> color="black"]
  node17416 -> node17417 [ color="black"]
  node17436 -> node17443 [ color="black"]
  node17412 -> node17413 [label=<<font color="black">true</font>> color="black"]
  node17412 -> node17414 [label=<<font color="black">false</font>> color="black"]
  node17432 -> node17433 [ color="black"]
  node17434 -> node17435 [ color="black"]
  node17422 -> node17423 [label=<<font color="black">true</font>> color="black"]
  node17422 -> node17443 [label=<<font color="black">false</font>> color="black"]
  node17426 -> node17427 [ color="black"]
  node17421 -> node17422 [ color="black"]
  node17417 -> node17418 [ color="black"]
  node17438 -> node17439 [ color="black"]
  node17439 -> node17443 [ color="black"]
  node17414 -> node17415 [ color="black"]
  node17429 -> node17430 [ color="black"]
  node17418 -> node17419 [ color="black"]
  node17442 -> node17443 [ color="black"]
  node17443 -> node17409 [ color="black"]
  node17425 -> node17426 [ color="black"]
  node17427 -> node17428 [ color="black"]
  node17433 -> node17434 [ color="black"]
  node17428 -> node17429 [ color="black"]
  node17423 -> node17424 [label=<<font color="black">true</font>> color="black"]
  node17423 -> node17437 [label=<<font color="black">false</font>> color="black"]
  node17410 -> node17411 [ color="black"]
  node17430 -> node17431 [ color="black"]
  node17440 -> node17441 [label=<<font color="black">true</font>> color="black"]
  node17440 -> node17443 [label=<<font color="black">false</font>> color="black"]
  node17424 -> node17425 [ color="black"]
  node17435 -> node17436 [ color="black"]
  node17437 -> node17438 [ color="black"]
  node17419 -> node17420 [label=<<font color="black">true</font>> color="black"]
  node17419 -> node17440 [label=<<font color="black">false</font>> color="black"]
  node17441 -> node17442 [ color="black"]
  node17408 -> node17410 [ color="black"]
  node17413 -> node17414 [ color="black"]
  node17411 -> node17412 [ color="black"]
  node17431 -> node17432 [ color="black"]
  node17420 -> node17421 [label=<<font color="black">true</font>> color="black"]
  node17420 -> node17422 [label=<<font color="black">false</font>> color="black"]
}
