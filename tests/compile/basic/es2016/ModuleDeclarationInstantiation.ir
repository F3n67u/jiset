{
  let module = this
  let realm = module.Realm
  assert (! (= realm undefined))
  let code = module.ECMAScriptCode
  if (! (= module.Environment undefined)) {
    app __x0__ = (NormalCompletion CONST_empty)
    app __x1__ = (WrapCompletion __x0__)
    return __x1__
  } else {}
  app __x2__ = (NewModuleEnvironment realm.GlobalEnv)
  let env = __x2__
  module.Environment = env
  let __x3__ = module.RequestedModules
  let __x4__ = 0i
  while (< __x4__ __x3__.length) {
    let required = __x3__[__x4__]
    app __x5__ = (HostResolveImportedModule module required)
    if (is-completion __x5__) if (= __x5__.Type CONST_normal) __x5__ = __x5__.Value else return __x5__ else {}
    let requiredModule = __x5__
    app __x6__ = (requiredModule.ModuleDeclarationInstantiation requiredModule)
    if (is-completion __x6__) if (= __x6__.Type CONST_normal) __x6__ = __x6__.Value else return __x6__ else {}
    __x6__
    __x4__ = (+ __x4__ 1i)
  }
  let __x7__ = module.IndirectExportEntries
  let __x8__ = 0i
  while (< __x8__ __x7__.length) {
    let e = __x7__[__x8__]
    app __x9__ = (module.ResolveExport module e.ExportName (new []) (new []))
    if (is-completion __x9__) if (= __x9__.Type CONST_normal) __x9__ = __x9__.Value else return __x9__ else {}
    let resolution = __x9__
    if (|| (= resolution null) (= resolution "ambiguous")) throw INTRINSIC_SyntaxError else {}
    __x8__ = (+ __x8__ 1i)
  }
  let envRec = env.EnvironmentRecord
  let __x10__ = module.ImportEntries
  let __x11__ = 0i
  while (< __x11__ __x10__.length) {
    let in = __x10__[__x11__]
    app __x12__ = (HostResolveImportedModule module in.ModuleRequest)
    if (is-completion __x12__) if (= __x12__.Type CONST_normal) __x12__ = __x12__.Value else return __x12__ else {}
    let importedModule = __x12__
    if (= in.ImportName "*") {
      app __x13__ = (GetModuleNamespace importedModule)
      if (is-completion __x13__) if (= __x13__.Type CONST_normal) __x13__ = __x13__.Value else return __x13__ else {}
      let namespace = __x13__
      app __x14__ = (envRec.CreateImmutableBinding envRec in.LocalName true)
      if (is-completion __x14__) if (= __x14__.Type CONST_normal) __x14__ = __x14__.Value else return __x14__ else {}
      __x14__
      app __x15__ = (envRec.InitializeBinding envRec in.LocalName namespace)
      __x15__
    } else {
      app __x16__ = (importedModule.ResolveExport importedModule in.ImportName (new []) (new []))
      if (is-completion __x16__) if (= __x16__.Type CONST_normal) __x16__ = __x16__.Value else return __x16__ else {}
      let resolution = __x16__
      if (|| (= resolution null) (= resolution "ambiguous")) throw INTRINSIC_SyntaxError else {}
      app __x17__ = (envRec.CreateImportBinding envRec in.LocalName resolution.Module resolution.BindingName)
      __x17__
    }
    __x11__ = (+ __x11__ 1i)
  }
  access __x18__ = (code "VarScopedDeclarations")
  let varDeclarations = __x18__
  let declaredVarNames = (new [])
  let __x19__ = varDeclarations
  let __x20__ = 0i
  while (< __x20__ __x19__.length) {
    let d = __x19__[__x20__]
    access __x21__ = (d "BoundNames")
    let __x22__ = __x21__
    let __x23__ = 0i
    while (< __x23__ __x22__.length) {
      let dn = __x22__[__x23__]
      if (! (contains declaredVarNames dn)) {
        app __x24__ = (envRec.CreateMutableBinding envRec dn false)
        if (is-completion __x24__) if (= __x24__.Type CONST_normal) __x24__ = __x24__.Value else return __x24__ else {}
        __x24__
        app __x25__ = (envRec.InitializeBinding envRec dn undefined)
        __x25__
        append dn -> declaredVarNames
      } else {}
      __x23__ = (+ __x23__ 1i)
    }
    __x20__ = (+ __x20__ 1i)
  }
  access __x26__ = (code "LexicallyScopedDeclarations")
  let lexDeclarations = __x26__
  let __x27__ = lexDeclarations
  let __x28__ = 0i
  while (< __x28__ __x27__.length) {
    let d = __x27__[__x28__]
    access __x29__ = (d "BoundNames")
    let __x30__ = __x29__
    let __x31__ = 0i
    while (< __x31__ __x30__.length) {
      let dn = __x30__[__x31__]
      access __x32__ = (d "IsConstantDeclaration")
      if (= __x32__ true) {
        app __x33__ = (envRec.CreateImmutableBinding envRec dn true)
        if (is-completion __x33__) if (= __x33__.Type CONST_normal) __x33__ = __x33__.Value else return __x33__ else {}
        __x33__
      } else {
        app __x34__ = (envRec.CreateMutableBinding envRec dn false)
        if (is-completion __x34__) if (= __x34__.Type CONST_normal) __x34__ = __x34__.Value else return __x34__ else {}
        __x34__
      }
      ??? "If id:{d} is a nt:{GeneratorDeclaration} production or a nt:{FunctionDeclaration} production , then in:{} out:{}"
      __x31__ = (+ __x31__ 1i)
    }
    __x28__ = (+ __x28__ 1i)
  }
  app __x35__ = (NormalCompletion CONST_empty)
  app __x36__ = (WrapCompletion __x35__)
  return __x36__
}