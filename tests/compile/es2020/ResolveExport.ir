{
  [0] if (= resolveSet absent) resolveSet = (new []) else [34] {}
  [2] let module = this
  [3] let __x0__ = resolveSet
  [3] let __x1__ = 0i
  [3] while (< __x1__ __x0__.length) {
    let r = __x0__[__x1__]
    [4] let __x2__ = (= module r.Module)
    [4] if __x2__ {
      app __x3__ = (SameValue exportName r.ExportName)
      __x2__ = (= __x3__ true)
    } else [34] {}
    [4] if __x2__ {
      [6] app __x4__ = (WrapCompletion null)
      [6] return __x4__
    } else [34] {}
    __x1__ = (+ __x1__ 1i)
  }
  [7] append (new Record("Module" -> module, "ExportName" -> exportName)) -> resolveSet
  [8] let __x5__ = module.LocalExportEntries
  [8] let __x6__ = 0i
  [8] while (< __x6__ __x5__.length) {
    let e = __x5__[__x6__]
    [9] app __x7__ = (SameValue exportName e.ExportName)
    [9] if (= __x7__ true) {
      [11] app __x8__ = (WrapCompletion (new ResolvedBindingRecord("Module" -> module, "BindingName" -> e.LocalName)))
      [11] return __x8__
    } else [34] {}
    __x6__ = (+ __x6__ 1i)
  }
  [12] let __x9__ = module.IndirectExportEntries
  [12] let __x10__ = 0i
  [12] while (< __x10__ __x9__.length) {
    let e = __x9__[__x10__]
    [13] app __x11__ = (SameValue exportName e.ExportName)
    [13] if (= __x11__ true) {
      [14] app __x12__ = (HostResolveImportedModule module e.ModuleRequest)
      [14] if (is-completion __x12__) if (= __x12__.Type CONST_normal) __x12__ = __x12__.Value else return __x12__ else [34] {}
      [14] let importedModule = __x12__
      [15] ??? "If id:{e} . [ [ ImportName ] ] is value:{\"\\} \" * , then step-list:{...}"
      [18] ??? "Else , step-list:{...}"
    } else [34] {}
    __x10__ = (+ __x10__ 1i)
  }
  [21] app __x13__ = (SameValue exportName "default")
  [21] if (= __x13__ true) {
    [23] app __x14__ = (WrapCompletion null)
    [23] return __x14__
  } else [34] {}
  [25] let starResolution = null
  [26] let __x15__ = module.StarExportEntries
  [26] let __x16__ = 0i
  [26] while (< __x16__ __x15__.length) {
    let e = __x15__[__x16__]
    [27] app __x17__ = (HostResolveImportedModule module e.ModuleRequest)
    [27] if (is-completion __x17__) if (= __x17__.Type CONST_normal) __x17__ = __x17__.Value else return __x17__ else [34] {}
    [27] let importedModule = __x17__
    [28] app __x18__ = (importedModule.ResolveExport importedModule exportName resolveSet)
    [28] if (is-completion __x18__) if (= __x18__.Type CONST_normal) __x18__ = __x18__.Value else return __x18__ else [34] {}
    [28] let resolution = __x18__
    [29] if (= resolution "ambiguous") {
      app __x19__ = (WrapCompletion "ambiguous")
      return __x19__
    } else [34] {}
    [30] if (! (= resolution null)) {
      [31] assert (= (typeof resolution) "ResolvedBindingRecord")
      [33] if (= starResolution null) starResolution = resolution else {
        [35] let __x20__ = (! (= resolution.Module starResolution.Module))
        [35] if __x20__ [34] {} else {
          app __x21__ = (SameValue resolution.BindingName starResolution.BindingName)
          __x20__ = (= __x21__ false)
        }
        [35] if __x20__ {
          app __x22__ = (WrapCompletion "ambiguous")
          return __x22__
        } else [34] {}
      }
    } else [34] {}
    __x16__ = (+ __x16__ 1i)
  }
  [36] app __x23__ = (WrapCompletion starResolution)
  [36] return __x23__
}