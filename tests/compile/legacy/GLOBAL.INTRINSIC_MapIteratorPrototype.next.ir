{
  let O = this
  app __x0__ = (Type O)
  if (! (= __x0__ Object)) throw INTRINSIC_TypeError else {}
  ??? "If id:{O} does not have all of the internal slots of a Map Iterator Instance ( 23 . 1 . 5 . 3 ) , throw a value:{TypeError} exception ."
  let m = O.IteratedMap
  let index = O.MapNextIndex
  let itemKind = O.MapIterationKind
  if (= m undefined) {
    app __x1__ = (CreateIterResultObject undefined true)
    app __x2__ = (WrapCompletion __x1__)
    return __x2__
  } else {}
  assert (! (= m.MapData absent))
  let entries = m.MapData
  let numEntries = entries.length
  while (< index numEntries) {
    ??? "Let id:{e} be the Record { [ [ Key ] ] , [ [ Value ] ] } that is the value of id:{entries} [ id:{index} ] ."
    index = (+ index 1i)
    O.MapNextIndex = index
    if (! (= e.Key CONST_empty)) {
      if (= itemKind CONST_key) let result = e.Key else if (= itemKind CONST_value) let result = e.Value else {
        assert (= itemKind CONST_keyPLUSvalue)
        app __x3__ = (CreateArrayFromList (new [e.Key, e.Value]))
        if (is-completion __x3__) if (= __x3__.Type CONST_normal) __x3__ = __x3__.Value else return __x3__ else {}
        let result = __x3__
      }
      app __x4__ = (CreateIterResultObject result false)
      app __x5__ = (WrapCompletion __x4__)
      return __x5__
    } else {}
  }
  O.IteratedMap = undefined
  app __x6__ = (CreateIterResultObject undefined true)
  app __x7__ = (WrapCompletion __x6__)
  return __x7__
}