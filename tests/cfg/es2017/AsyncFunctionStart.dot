digraph {
  node16962 [shape=cds, label=<<font color="black">app asyncFunctionBody = (GetArgument argumentsList 1i)</font>> color="black" fillcolor="white" style=filled]
  node16959 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node16961 [shape=cds, label=<<font color="black">app promiseCapability = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node16963 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let runningContext = GLOBAL_context</td></tr>
      <tr><td align="left">1:let asyncContext = (copy-obj runningContext)</td></tr>
      <tr><td align="left">2:??? &quot;Set the code evaluation state of id:{asyncContext} such that when evaluation is resumed for that execution context the following steps will be performed : in:{} out:{}&quot;</td></tr>
      <tr><td align="left">14:append asyncContext -&gt; GLOBAL_executionStack</td></tr>
      <tr><td align="left">14:GLOBAL_context = GLOBAL_executionStack[(- GLOBAL_executionStack.length 1i)]</td></tr>
      <tr><td align="left">15:??? &quot;Resume the suspended evaluation of id:{asyncContext} . Let id:{result} be the value returned by the resumed computation .&quot;</td></tr>
      <tr><td align="left">18:return undefined</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16960 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node16959 -> node16961 [ color="black"]
  node16961 -> node16962 [ color="black"]
  node16962 -> node16963 [ color="black"]
  node16963 -> node16960 [ color="black"]
}
