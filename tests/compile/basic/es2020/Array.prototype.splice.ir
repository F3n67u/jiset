{
  app __x0__ = (ToObject this)
  if (is-completion __x0__) if (= __x0__.Type CONST_normal) __x0__ = __x0__.Value else return __x0__ else {}
  let O = __x0__
  app __x1__ = (LengthOfArrayLike O)
  if (is-completion __x1__) if (= __x1__.Type CONST_normal) __x1__ = __x1__.Value else return __x1__ else {}
  let len = __x1__
  app __x2__ = (ToInteger start)
  if (is-completion __x2__) if (= __x2__.Type CONST_normal) __x2__ = __x2__.Value else return __x2__ else {}
  let relativeStart = __x2__
  if (< relativeStart 0i) {
    app __x3__ = (max (+ len relativeStart) 0i)
    let actualStart = __x3__
  } else {
    app __x4__ = (min relativeStart len)
    let actualStart = __x4__
  }
  if (= argumentsList.length 0i) {
    let insertCount = 0i
    let actualDeleteCount = 0i
  } else if (= argumentsList.length 1i) {
    let insertCount = 0i
    let actualDeleteCount = (- len actualStart)
  } else {
    let insertCount = (- argumentsList.length 2i)
    app __x5__ = (ToInteger deleteCount)
    if (is-completion __x5__) if (= __x5__.Type CONST_normal) __x5__ = __x5__.Value else return __x5__ else {}
    let dc = __x5__
    app __x6__ = (max dc 0i)
    app __x7__ = (min __x6__ (- len actualStart))
    let actualDeleteCount = __x7__
  }
  if (< (- (** 2.0 53i) 1i) (- (+ len insertCount) actualDeleteCount)) throw INTRINSIC_TypeError else {}
  app __x8__ = (ArraySpeciesCreate O actualDeleteCount)
  if (is-completion __x8__) if (= __x8__.Type CONST_normal) __x8__ = __x8__.Value else return __x8__ else {}
  let A = __x8__
  let k = 0i
  while (< k actualDeleteCount) {
    app __x9__ = (ToString (+ actualStart k))
    if (is-completion __x9__) if (= __x9__.Type CONST_normal) __x9__ = __x9__.Value else return __x9__ else {}
    let from = __x9__
    app __x10__ = (HasProperty O from)
    if (is-completion __x10__) if (= __x10__.Type CONST_normal) __x10__ = __x10__.Value else return __x10__ else {}
    let fromPresent = __x10__
    if (= fromPresent true) {
      app __x11__ = (Get O from)
      if (is-completion __x11__) if (= __x11__.Type CONST_normal) __x11__ = __x11__.Value else return __x11__ else {}
      let fromValue = __x11__
      app __x12__ = (ToString k)
      if (is-completion __x12__) if (= __x12__.Type CONST_normal) __x12__ = __x12__.Value else return __x12__ else {}
      app __x13__ = (CreateDataPropertyOrThrow A __x12__ fromValue)
      if (is-completion __x13__) if (= __x13__.Type CONST_normal) __x13__ = __x13__.Value else return __x13__ else {}
      __x13__
    } else {}
    k = (+ k 1i)
  }
  app __x14__ = (Set A "length" actualDeleteCount true)
  if (is-completion __x14__) if (= __x14__.Type CONST_normal) __x14__ = __x14__.Value else return __x14__ else {}
  __x14__
  ??? "Let id:{items} be a List whose elements are , in left to right order , the portion of the actual argument list starting with the third argument . The list is empty if fewer than three arguments were passed ."
  let itemCount = items.length
  if (< itemCount actualDeleteCount) {
    k = actualStart
    while (< k (- len actualDeleteCount)) {
      app __x15__ = (ToString (+ k actualDeleteCount))
      if (is-completion __x15__) if (= __x15__.Type CONST_normal) __x15__ = __x15__.Value else return __x15__ else {}
      let from = __x15__
      app __x16__ = (ToString (+ k itemCount))
      if (is-completion __x16__) if (= __x16__.Type CONST_normal) __x16__ = __x16__.Value else return __x16__ else {}
      let to = __x16__
      app __x17__ = (HasProperty O from)
      if (is-completion __x17__) if (= __x17__.Type CONST_normal) __x17__ = __x17__.Value else return __x17__ else {}
      let fromPresent = __x17__
      if (= fromPresent true) {
        app __x18__ = (Get O from)
        if (is-completion __x18__) if (= __x18__.Type CONST_normal) __x18__ = __x18__.Value else return __x18__ else {}
        let fromValue = __x18__
        app __x19__ = (Set O to fromValue true)
        if (is-completion __x19__) if (= __x19__.Type CONST_normal) __x19__ = __x19__.Value else return __x19__ else {}
        __x19__
      } else {
        assert (= fromPresent false)
        app __x20__ = (DeletePropertyOrThrow O to)
        if (is-completion __x20__) if (= __x20__.Type CONST_normal) __x20__ = __x20__.Value else return __x20__ else {}
        __x20__
      }
      k = (+ k 1i)
    }
    k = len
    while (< (+ (- len actualDeleteCount) itemCount) k) {
      app __x21__ = (ToString (- k 1i))
      if (is-completion __x21__) if (= __x21__.Type CONST_normal) __x21__ = __x21__.Value else return __x21__ else {}
      app __x22__ = (DeletePropertyOrThrow O __x21__)
      if (is-completion __x22__) if (= __x22__.Type CONST_normal) __x22__ = __x22__.Value else return __x22__ else {}
      __x22__
      k = (- k 1i)
    }
  } else if (< actualDeleteCount itemCount) {
    k = (- len actualDeleteCount)
    while (< actualStart k) {
      app __x23__ = (ToString (- (+ k actualDeleteCount) 1i))
      if (is-completion __x23__) if (= __x23__.Type CONST_normal) __x23__ = __x23__.Value else return __x23__ else {}
      let from = __x23__
      app __x24__ = (ToString (- (+ k itemCount) 1i))
      if (is-completion __x24__) if (= __x24__.Type CONST_normal) __x24__ = __x24__.Value else return __x24__ else {}
      let to = __x24__
      app __x25__ = (HasProperty O from)
      if (is-completion __x25__) if (= __x25__.Type CONST_normal) __x25__ = __x25__.Value else return __x25__ else {}
      let fromPresent = __x25__
      if (= fromPresent true) {
        app __x26__ = (Get O from)
        if (is-completion __x26__) if (= __x26__.Type CONST_normal) __x26__ = __x26__.Value else return __x26__ else {}
        let fromValue = __x26__
        app __x27__ = (Set O to fromValue true)
        if (is-completion __x27__) if (= __x27__.Type CONST_normal) __x27__ = __x27__.Value else return __x27__ else {}
        __x27__
      } else {
        assert (= fromPresent false)
        app __x28__ = (DeletePropertyOrThrow O to)
        if (is-completion __x28__) if (= __x28__.Type CONST_normal) __x28__ = __x28__.Value else return __x28__ else {}
        __x28__
      }
      k = (- k 1i)
    }
  } else {}
  k = actualStart
  while (< 0i items.length) {
    let E = (pop items 0i)
    app __x29__ = (ToString k)
    if (is-completion __x29__) if (= __x29__.Type CONST_normal) __x29__ = __x29__.Value else return __x29__ else {}
    app __x30__ = (Set O __x29__ E true)
    if (is-completion __x30__) if (= __x30__.Type CONST_normal) __x30__ = __x30__.Value else return __x30__ else {}
    __x30__
    k = (+ k 1i)
  }
  app __x31__ = (Set O "length" (+ (- len actualDeleteCount) itemCount) true)
  if (is-completion __x31__) if (= __x31__.Type CONST_normal) __x31__ = __x31__.Value else return __x31__ else {}
  __x31__
  app __x32__ = (WrapCompletion A)
  return __x32__
}