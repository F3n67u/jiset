digraph {
  node0 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node1 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node2 [shape=cds, label=<<font color="black">app P = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node3 [shape=cds, label=<<font color="black">app F = (GetArgument argumentsList 1i)</font>> color="black" fillcolor="white" style=filled]
  node4 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:??? &quot;Let id:{S} be a String in the form of a nt:{Pattern[~U]} ( nt:{Pattern[+U]} if id:{F} contains code:{\&quot;u\&quot;} ) equivalent to id:{P} interpreted as UTF - 16 encoded Unicode code points ( link:{unhandled: sec-ecmascript-language-types-string-type} ) , in which certain code points are escaped as described below . id:{S} may or may not be identical to id:{P} ; however , the internal procedure that would result from evaluating id:{S} as a nt:{Pattern[~U]} ( nt:{Pattern[+U]} if id:{F} contains code:{\&quot;u\&quot;} ) must behave identically to the internal procedure given by the constructed object ' s [ [ RegExpMatcher ] ] internal slot . Multiple calls to this abstract operation using the same values for id:{P} and id:{F} must produce identical results .&quot;</td></tr>
      <tr><td align="left">1:??? &quot;The code points code:{/} or any nt:{LineTerminator} occurring in the pattern shall be escaped in id:{S} as necessary to ensure that the string - concatenation of code:{\&quot;/\&quot;} , id:{S} , code:{\&quot;/\&quot;} , and id:{F} can be parsed ( in an appropriate lexical context ) as a nt:{RegularExpressionLiteral} that behaves identically to the constructed regular expression . For example , if id:{P} is code:{\&quot;/\&quot;} , then id:{S} could be code:{\&quot;\\\\/\&quot;} or code:{\&quot;\\\\u002F\&quot;} , among other possibilities , but not code:{\&quot;/\&quot;} , because code:{///} followed by id:{F} would be parsed as a nt:{SingleLineComment} rather than a nt:{RegularExpressionLiteral} . If id:{P} is the empty String , this specification can be met by letting id:{S} be code:{\&quot;(?:)\&quot;} .&quot;</td></tr>
      <tr><td align="left">2:return S</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node0 -> node2 [ color="black"]
  node2 -> node3 [ color="black"]
  node3 -> node4 [ color="black"]
  node4 -> node1 [ color="black"]
}
