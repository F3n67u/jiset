{
  let module = this
  let realm = module.Realm
  assert (! (= realm undefined))
  let code = module.ECMAScriptCode
  if (! (= module.Environment undefined)) return CONST_empty else {}
  app __x0__ = (NewModuleEnvironment realm.GlobalEnv)
  let env = __x0__
  module.Environment = env
  let __x1__ = module.RequestedModules
  let __x2__ = 0i
  while (< __x2__ __x1__.length) {
    let required = __x1__[__x2__]
    app __x3__ = (HostResolveImportedModule module required)
    let requiredModule = [? __x3__]
    app __x4__ = (requiredModule.ModuleDeclarationInstantiation requiredModule)
    [? __x4__]
    __x2__ = (+ __x2__ 1i)
  }
  let __x5__ = module.IndirectExportEntries
  let __x6__ = 0i
  while (< __x6__ __x5__.length) {
    let e = __x5__[__x6__]
    app __x7__ = (module.ResolveExport module e.ExportName (new []))
    let resolution = [? __x7__]
    if (|| (= resolution null) (= resolution "ambiguous")) throw SyntaxError else {}
    __x6__ = (+ __x6__ 1i)
  }
  let envRec = env.EnvironmentRecord
  let __x8__ = module.ImportEntries
  let __x9__ = 0i
  while (< __x9__ __x8__.length) {
    let in = __x8__[__x9__]
    app __x10__ = (HostResolveImportedModule module in.ModuleRequest)
    let importedModule = [! __x10__]
    if (= in.ImportName "*") {
      app __x11__ = (GetModuleNamespace importedModule)
      let namespace = [? __x11__]
      app __x12__ = (envRec.CreateImmutableBinding envRec in.LocalName true)
      [! __x12__]
      app __x13__ = (envRec.InitializeBinding envRec in.LocalName namespace)
      __x13__
    } else {
      app __x14__ = (importedModule.ResolveExport importedModule in.ImportName (new []))
      let resolution = [? __x14__]
      if (|| (= resolution null) (= resolution "ambiguous")) throw SyntaxError else {}
      app __x15__ = (envRec.CreateImportBinding envRec in.LocalName resolution.Module resolution.BindingName)
      __x15__
    }
    __x9__ = (+ __x9__ 1i)
  }
  access __x16__ = (code "VarScopedDeclarations")
  let varDeclarations = __x16__
  let declaredVarNames = (new [])
  let __x17__ = varDeclarations
  let __x18__ = 0i
  while (< __x18__ __x17__.length) {
    let d = __x17__[__x18__]
    access __x19__ = (d "BoundNames")
    let __x20__ = __x19__
    let __x21__ = 0i
    while (< __x21__ __x20__.length) {
      let dn = __x20__[__x21__]
      if (! (contains declaredVarNames dn)) {
        app __x22__ = (envRec.CreateMutableBinding envRec dn false)
        [! __x22__]
        app __x23__ = (envRec.InitializeBinding envRec dn undefined)
        __x23__
        append dn -> declaredVarNames
      } else {}
      __x21__ = (+ __x21__ 1i)
    }
    __x18__ = (+ __x18__ 1i)
  }
  access __x24__ = (code "LexicallyScopedDeclarations")
  let lexDeclarations = __x24__
  let __x25__ = lexDeclarations
  let __x26__ = 0i
  while (< __x26__ __x25__.length) {
    let d = __x25__[__x26__]
    access __x27__ = (d "BoundNames")
    let __x28__ = __x27__
    let __x29__ = 0i
    while (< __x29__ __x28__.length) {
      let dn = __x28__[__x29__]
      access __x30__ = (d "IsConstantDeclaration")
      if (= __x30__ true) {
        app __x31__ = (envRec.CreateImmutableBinding envRec dn true)
        [! __x31__]
      } else {
        app __x32__ = (envRec.CreateMutableBinding envRec dn false)
        [! __x32__]
      }
      if (|| (|| (is-instance-of d FunctionDeclaration) (is-instance-of d GeneratorDeclaration)) (is-instance-of d AsyncFunctionDeclaration)) {
        access __x33__ = (d "InstantiateFunctionObject" env)
        let fo = __x33__
        app __x34__ = (envRec.InitializeBinding envRec dn fo)
        __x34__
      } else {}
      __x29__ = (+ __x29__ 1i)
    }
    __x26__ = (+ __x26__ 1i)
  }
  return CONST_empty
}