{
  app __x0__ = (CreateRealm )
  let realm = __x0__
  let newContext = (new ExecutionContext("SubMap" -> (new SubMap())))
  newContext.Function = null
  newContext.Realm = realm
  newContext.ScriptOrModule = null
  append newContext -> GLOBAL_executionStack
  GLOBAL_context = GLOBAL_executionStack[(- GLOBAL_executionStack.length 1i)]
  ??? "If the host requires use of an exotic object to serve as id:{realm} ' s global object , let id:{global} be such an object created in an implementation defined manner . Otherwise , let id:{global} be value:{undefined} , indicating that an ordinary object should be created as the global object ."
  ??? "If the host requires that the code:{this} binding in id:{realm} ' s global scope return an object other than the global object , let id:{thisValue} be such an object created in an implementation defined manner . Otherwise , let id:{thisValue} be value:{undefined} , indicating that id:{realm} ' s global code:{this} binding should be the global object ."
  app __x1__ = (SetRealmGlobalObject realm global thisValue)
  __x1__
  app __x2__ = (SetDefaultGlobalBindings realm)
  if (is-completion __x2__) if (= __x2__.Type CONST_normal) __x2__ = __x2__.Value else return __x2__ else {}
  let globalObj = __x2__
  ??? "Create any implementation defined global object properties on id:{globalObj} ."
  ??? "In an implementation dependent manner , obtain the ECMAScript source texts ( see clause link:{unhandled: sec-ecmascript-language-source-code} ) and any associated host - defined values for zero or more ECMAScript scripts and / or ECMAScript modules . For each such id:{sourceText} and id:{hostDefined} , in:{} out:{}"
  ??? "NextJob NormalCompletion ( value:{undefined} ) ."
}