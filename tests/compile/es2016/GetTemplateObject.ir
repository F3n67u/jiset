{
  [0] access __x0__ = (templateLiteral "TemplateStrings")
  [0] app __x1__ = (__x0__ true)
  [0] let rawStrings = __x1__
  [1] let realm = REALM
  [2] let templateRegistry = realm.TemplateMap
  [3] let __x2__ = templateRegistry
  [3] let __x3__ = 0i
  [3] while (< __x3__ __x2__.length) {
    let e = __x2__[__x3__]
    [4] ??? "If id:{e} . [ [ Strings ] ] and id:{rawStrings} contain the same values in the same order , then step-list:{...}"
    __x3__ = (+ __x3__ 1i)
  }
  [6] access __x4__ = (templateLiteral "TemplateStrings")
  [6] app __x5__ = (__x4__ false)
  [6] let cookedStrings = __x5__
  [7] let count = cookedStrings.length
  [8] app __x6__ = (ArrayCreate count)
  [8] let template = __x6__
  [9] app __x7__ = (ArrayCreate count)
  [9] let rawObj = __x7__
  [10] let index = 0i
  [11] while (< index count) {
    [12] app __x8__ = (ToString index)
    [12] if (is-completion __x8__) if (= __x8__.Type CONST_normal) __x8__ = __x8__.Value else return __x8__ else [6] {}
    [12] let prop = __x8__
    [13] let cookedValue = cookedStrings[index]
    [14] app __x9__ = (template.DefineOwnProperty template prop (new PropertyDescriptor("Value" -> cookedValue, "Writable" -> false, "Enumerable" -> true, "Configurable" -> false)))
    [14] __x9__
    [15] let rawValue = rawStrings[index]
    [16] app __x10__ = (rawObj.DefineOwnProperty rawObj prop (new PropertyDescriptor("Value" -> rawValue, "Writable" -> false, "Enumerable" -> true, "Configurable" -> false)))
    [16] __x10__
    [17] let index = (+ index 1i)
  }
  [18] app __x11__ = (SetIntegrityLevel rawObj "frozen")
  [18] __x11__
  [19] app __x12__ = (template.DefineOwnProperty template "raw" (new PropertyDescriptor("Value" -> rawObj, "Writable" -> false, "Enumerable" -> false, "Configurable" -> false)))
  [19] __x12__
  [20] app __x13__ = (SetIntegrityLevel template "frozen")
  [20] __x13__
  [21] append (new Record("Strings" -> rawStrings, "Array" -> template)) -> templateRegistry
  [22] app __x14__ = (WrapCompletion template)
  [22] return __x14__
}