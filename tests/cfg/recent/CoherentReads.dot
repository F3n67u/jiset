digraph {
  node19640 [shape=cds, label=<<font color="black">1:app __x3__ = (execution.ReadsBytesFrom execution R)</font>> color="black" fillcolor="white" style=filled]
  node19636 [shape=cds, label=<<font color="black">0:app __x0__ = (SharedDataBlockEventSet execution)</font>> color="black" fillcolor="white" style=filled]
  node19643 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let W = __x4__[__x5__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node19639 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let R = __x1__[__x2__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node19635 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node19647 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">__x2__ = (+ __x2__ 1i)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node19644 [shape=diamond, label=<<font color="black">(contains execution.HappensBefore (new [R, W]))</font>> color="black" fillcolor="white" style=filled]
  node19638 [shape=diamond, label=<<font color="black">(&lt; __x2__ __x1__.length)</font>> color="black" fillcolor="white" style=filled]
  node19634 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node19648 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">9:return true</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node19641 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">1:let Ws = __x3__</td></tr>
      <tr><td align="left">2:let byteLocation = R.ByteIndex</td></tr>
      <tr><td align="left">3:let __x4__ = Ws</td></tr>
      <tr><td align="left">3:let __x5__ = 0i</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node19646 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">6:??? &quot;If there is a WriteSharedMemory or ReadModifyWriteSharedMemory event id:{V} that has id:{byteLocation} in its range such that the pairs ( id:{W} , id:{V} ) and ( id:{V} , id:{R} ) are in id:{execution} . [ [ HappensBefore ] ] , then in:{} out:{}&quot;</td></tr>
      <tr><td align="left">8:byteLocation = (+ byteLocation 1i)</td></tr>
      <tr><td align="left">__x5__ = (+ __x5__ 1i)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node19637 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let __x1__ = __x0__</td></tr>
      <tr><td align="left">0:let __x2__ = 0i</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node19642 [shape=diamond, label=<<font color="black">(&lt; __x5__ __x4__.length)</font>> color="black" fillcolor="white" style=filled]
  node19645 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return false</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node19638 -> node19639 [label=<<font color="black">true</font>> color="black"]
  node19638 -> node19648 [label=<<font color="black">false</font>> color="black"]
  node19642 -> node19643 [label=<<font color="black">true</font>> color="black"]
  node19642 -> node19647 [label=<<font color="black">false</font>> color="black"]
  node19637 -> node19638 [ color="black"]
  node19634 -> node19636 [ color="black"]
  node19647 -> node19638 [ color="black"]
  node19640 -> node19641 [ color="black"]
  node19639 -> node19640 [ color="black"]
  node19644 -> node19645 [label=<<font color="black">true</font>> color="black"]
  node19644 -> node19646 [label=<<font color="black">false</font>> color="black"]
  node19648 -> node19635 [ color="black"]
  node19646 -> node19642 [ color="black"]
  node19636 -> node19637 [ color="black"]
  node19643 -> node19644 [ color="black"]
  node19645 -> node19646 [ color="black"]
  node19641 -> node19642 [ color="black"]
}
