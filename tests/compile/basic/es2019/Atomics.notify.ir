{
  app __x0__ = (ValidateSharedIntegerTypedArray typedArray true)
  if (is-completion __x0__) if (= __x0__.Type CONST_normal) __x0__ = __x0__.Value else return __x0__ else {}
  let buffer = __x0__
  app __x1__ = (ValidateAtomicAccess typedArray index)
  if (is-completion __x1__) if (= __x1__.Type CONST_normal) __x1__ = __x1__.Value else return __x1__ else {}
  let i = __x1__
  if (= count undefined) let c = Infinity else {
    app __x2__ = (ToInteger count)
    if (is-completion __x2__) if (= __x2__.Type CONST_normal) __x2__ = __x2__.Value else return __x2__ else {}
    let intCount = __x2__
    app __x3__ = (max intCount 0i)
    let c = __x3__
  }
  let block = buffer.ArrayBufferData
  let offset = typedArray.ByteOffset
  let indexedPosition = (+ (* i 4i) offset)
  app __x4__ = (GetWaiterList block indexedPosition)
  let WL = __x4__
  let n = 0i
  app __x5__ = (EnterCriticalSection WL)
  __x5__
  app __x6__ = (RemoveWaiters WL c)
  let S = __x6__
  while (< 0i S.length) {
    let W = S[0i]
    (pop S 0i)
    app __x7__ = (NotifyWaiter WL W)
    __x7__
    append 1i -> n
  }
  app __x8__ = (LeaveCriticalSection WL)
  __x8__
  app __x9__ = (WrapCompletion n)
  return __x9__
}