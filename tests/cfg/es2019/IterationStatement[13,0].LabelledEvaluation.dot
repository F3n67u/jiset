digraph {
  node7032 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node7036 [shape=cds, label=<<font color="black">1:app __x2__ = (ForInOfBodyEvaluation ForDeclaration Statement keyResult CONST_iterate CONST_lexicalBinding labelSet CONST_async)</font>> color="black" fillcolor="white" style=filled]
  node7037 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">1:return [? __x2__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node7031 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node7033 [shape=cds, label=<<font color="black">0:access __x0__ = (ForDeclaration &quot;BoundNames&quot;)</font>> color="black" fillcolor="white" style=filled]
  node7034 [shape=cds, label=<<font color="black">0:app __x1__ = (ForInOfHeadEvaluation __x0__ AssignmentExpression CONST_asyncDASHiterate)</font>> color="black" fillcolor="white" style=filled]
  node7035 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let keyResult = [? __x1__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node7031 -> node7033 [ color="black"]
  node7034 -> node7035 [ color="black"]
  node7035 -> node7036 [ color="black"]
  node7037 -> node7032 [ color="black"]
  node7033 -> node7034 [ color="black"]
  node7036 -> node7037 [ color="black"]
}
