{
  app text = (GetArgument argumentsList 0i)
  app reviver = (GetArgument argumentsList 1i)
  [0] app __x0__ = (ToString text)
  [0] if (is-completion __x0__) if (= __x0__.Type CONST_normal) __x0__ = __x0__.Value else return __x0__ else [5] {}
  [0] let jsonString = __x0__
  [1] ??? "Parse ! UTF16DecodeString ( id:{jsonString} ) as a JSON text as specified in ECMA - 404 . Throw a value:{SyntaxError} exception if it is not a valid JSON text as defined in that specification ."
  [2] let scriptString = (+ (+ "(" jsonString) ");")
  [3] ??? "Let id:{completion} be the result of parsing and evaluating ! UTF16DecodeString ( id:{scriptString} ) as if it was the source text of an ECMAScript nt:{Script} . The extended PropertyDefinitionEvaluation semantics defined in link:{} must not be used during the evaluation ."
  [4] let unfiltered = completion.Value
  [11] app __x1__ = (IsCallable reviver)
  [11] if (= __x1__ true) {
    [7] ??? "Let id:{root} be OrdinaryObjectCreate ( % Object . prototype % ) ."
    [8] let rootName = ""
    [9] app __x2__ = (CreateDataPropertyOrThrow root rootName unfiltered)
    [9] if (is-completion __x2__) if (= __x2__.Type CONST_normal) __x2__ = __x2__.Value else return __x2__ else [5] {}
    [9] __x2__
    [10] app __x3__ = (InternalizeJSONProperty root rootName reviver)
    [10] if (is-completion __x3__) if (= __x3__.Type CONST_normal) __x3__ = __x3__.Value else return __x3__ else [5] {}
    [10] app __x4__ = (WrapCompletion __x3__)
    [10] return __x4__
  } else {
    [12] app __x5__ = (WrapCompletion unfiltered)
    [12] return __x5__
  }
}