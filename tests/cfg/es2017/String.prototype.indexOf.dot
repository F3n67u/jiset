digraph {
  node12366 [shape=cds, label=<<font color="black">0:app __x0__ = (RequireObjectCoercible this)</font>> color="black" fillcolor="white" style=filled]
  node12362 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node12375 [shape=cds, label=<<font color="black">5:app __x5__ = (min __x4__ len)</font>> color="black" fillcolor="white" style=filled]
  node12365 [shape=cds, label=<<font color="black">app position = (GetArgument argumentsList 1i)</font>> color="black" fillcolor="white" style=filled]
  node12372 [shape=cds, label=<<font color="black">3:app __x3__ = (ToInteger position)</font>> color="black" fillcolor="white" style=filled]
  node12369 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">1:let S = [? __x1__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12373 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">3:let pos = [? __x3__]</td></tr>
      <tr><td align="left">4:let len = S.length</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12368 [shape=cds, label=<<font color="black">1:app __x1__ = (ToString O)</font>> color="black" fillcolor="white" style=filled]
  node12364 [shape=cds, label=<<font color="black">app searchString = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node12370 [shape=cds, label=<<font color="black">2:app __x2__ = (ToString searchString)</font>> color="black" fillcolor="white" style=filled]
  node12367 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let O = [? __x0__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12374 [shape=cds, label=<<font color="black">5:app __x4__ = (max pos 0i)</font>> color="black" fillcolor="white" style=filled]
  node12363 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node12376 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">5:let start = __x5__</td></tr>
      <tr><td align="left">6:let searchLen = searchStr.length</td></tr>
      <tr><td align="left">7:??? &quot;Return the smallest possible integer id:{k} not smaller than id:{start} such that id:{k} + id:{searchLen} is not greater than id:{len} , and for all nonnegative integers id:{j} less than id:{searchLen} , the code unit at index id:{k} + id:{j} of id:{S} is the same as the code unit at index id:{j} of id:{searchStr} ; but if there is no such integer id:{k} , return the value - 1 .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12371 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">2:let searchStr = [? __x2__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12370 -> node12371 [ color="black"]
  node12375 -> node12376 [ color="black"]
  node12365 -> node12366 [ color="black"]
  node12369 -> node12370 [ color="black"]
  node12366 -> node12367 [ color="black"]
  node12364 -> node12365 [ color="black"]
  node12371 -> node12372 [ color="black"]
  node12362 -> node12364 [ color="black"]
  node12372 -> node12373 [ color="black"]
  node12367 -> node12368 [ color="black"]
  node12374 -> node12375 [ color="black"]
  node12373 -> node12374 [ color="black"]
  node12368 -> node12369 [ color="black"]
  node12376 -> node12363 [ color="black"]
}
