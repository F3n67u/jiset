digraph {
  node16455 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node16472 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">8:let viewOffset = view.ByteOffset</td></tr>
      <tr><td align="left">9:let viewSize = view.ByteLength</td></tr>
      <tr><td align="left">10:??? &quot;Let id:{elementSize} be the Number value of the Element Size value specified in link:{unhandled: table-49} for Element Type id:{type} .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16471 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16457 [shape=cds, label=<<font color="black">0:app __x0__ = (Type view)</font>> color="black" fillcolor="white" style=filled]
  node16461 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16475 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">12:let bufferIndex = (+ getIndex viewOffset)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16470 [shape=diamond, label=<<font color="black">(= __x4__ true)</font>> color="black" fillcolor="white" style=filled]
  node16458 [shape=diamond, label=<<font color="black">(! (= __x0__ Object))</font>> color="black" fillcolor="white" style=filled]
  node16462 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">2:assert (! (= view.ViewedArrayBuffer absent))</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16466 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">4:let numberValue = [? __x2__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16459 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16456 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node16469 [shape=cds, label=<<font color="black">7:app __x4__ = (IsDetachedBuffer buffer)</font>> color="black" fillcolor="white" style=filled]
  node16463 [shape=cds, label=<<font color="black">3:app __x1__ = (ToIndex requestIndex)</font>> color="black" fillcolor="white" style=filled]
  node16476 [shape=cds, label=<<font color="black">13:app __x5__ = (SetValueInBuffer buffer bufferIndex type numberValue false &quot;Unordered&quot; isLittleEndian)</font>> color="black" fillcolor="white" style=filled]
  node16460 [shape=diamond, label=<<font color="black">(= view.DataView absent)</font>> color="black" fillcolor="white" style=filled]
  node16465 [shape=cds, label=<<font color="black">4:app __x2__ = (ToNumber value)</font>> color="black" fillcolor="white" style=filled]
  node16468 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">5:isLittleEndian = __x3__</td></tr>
      <tr><td align="left">6:let buffer = view.ViewedArrayBuffer</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16473 [shape=diamond, label=<<font color="black">(&lt; viewSize (+ getIndex elementSize))</font>> color="black" fillcolor="white" style=filled]
  node16464 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">3:let getIndex = [? __x1__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16477 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">13:return __x5__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16474 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw RangeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16467 [shape=cds, label=<<font color="black">5:app __x3__ = (ToBoolean isLittleEndian)</font>> color="black" fillcolor="white" style=filled]
  node16460 -> node16461 [label=<<font color="black">true</font>> color="black"]
  node16460 -> node16462 [label=<<font color="black">false</font>> color="black"]
  node16471 -> node16472 [ color="black"]
  node16473 -> node16474 [label=<<font color="black">true</font>> color="black"]
  node16473 -> node16475 [label=<<font color="black">false</font>> color="black"]
  node16458 -> node16459 [label=<<font color="black">true</font>> color="black"]
  node16458 -> node16460 [label=<<font color="black">false</font>> color="black"]
  node16462 -> node16463 [ color="black"]
  node16468 -> node16469 [ color="black"]
  node16469 -> node16470 [ color="black"]
  node16463 -> node16464 [ color="black"]
  node16465 -> node16466 [ color="black"]
  node16464 -> node16465 [ color="black"]
  node16470 -> node16471 [label=<<font color="black">true</font>> color="black"]
  node16470 -> node16472 [label=<<font color="black">false</font>> color="black"]
  node16472 -> node16473 [ color="black"]
  node16474 -> node16475 [ color="black"]
  node16461 -> node16462 [ color="black"]
  node16466 -> node16467 [ color="black"]
  node16477 -> node16456 [ color="black"]
  node16475 -> node16476 [ color="black"]
  node16457 -> node16458 [ color="black"]
  node16476 -> node16477 [ color="black"]
  node16467 -> node16468 [ color="black"]
  node16455 -> node16457 [ color="black"]
  node16459 -> node16460 [ color="black"]
}
