digraph {
  node12319 [shape=diamond, label=<<font color="black">(! (== f 0i))</font>> color="black" fillcolor="white" style=filled]
  node12314 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">7:s = &quot;-&quot;</td></tr>
      <tr><td align="left">8:x = (- x)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12310 [shape=diamond, label=<<font color="black">(= x NaN)</font>> color="black" fillcolor="white" style=filled]
  node12313 [shape=diamond, label=<<font color="black">(&lt; x 0i)</font>> color="black" fillcolor="white" style=filled]
  node12302 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node12323 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">20:??? &quot;Let id:{a} be the first id:{k} - id:{f} code units of id:{m} , and let id:{b} be the remaining id:{f} code units of id:{m} .&quot;</td></tr>
      <tr><td align="left">21:m = (+ (+ a &quot;.&quot;) b)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12316 [shape=cds, label=<<font color="black">10:app __x2__ = (ToString x)</font>> color="black" fillcolor="white" style=filled]
  node12303 [shape=cds, label=<<font color="black">app fractionDigits = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node12324 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">22:return (+ s m)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12311 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return &quot;NaN&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12315 [shape=diamond, label=<<font color="black">(! (&lt; x (** 10.0 21i)))</font>> color="black" fillcolor="white" style=filled]
  node12306 [shape=cds, label=<<font color="black">1:app __x1__ = (ToInteger fractionDigits)</font>> color="black" fillcolor="white" style=filled]
  node12321 [shape=diamond, label=<<font color="black">(! (&lt; f k))</font>> color="black" fillcolor="white" style=filled]
  node12304 [shape=cds, label=<<font color="black">0:app __x0__ = (thisNumberValue this)</font>> color="black" fillcolor="white" style=filled]
  node12305 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let x = [? __x0__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12318 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">12:??? &quot;Let id:{n} be an integer for which the exact mathematical value of id:{n} &divide; 10 sup:{id:{f}} - id:{x} is as close to zero as possible . If there are two such id:{n} , pick the larger id:{n} .&quot;</td></tr>
      <tr><td align="left">13:??? &quot;If id:{n} = 0 , let id:{m} be the String code:{\&quot;0\&quot;} . Otherwise , let id:{m} be the String value consisting of the digits of the decimal representation of id:{n} ( in order , with no leading zeroes ) .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12317 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">10:let m = [! __x2__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12301 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node12322 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">17:??? &quot;Let id:{z} be the String value consisting of id:{f} + 1 - id:{k} occurrences of the code unit 0x0030 ( DIGIT ZERO ) .&quot;</td></tr>
      <tr><td align="left">18:m = (+ z m)</td></tr>
      <tr><td align="left">19:k = (+ f 1i)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12309 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw RangeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12308 [shape=diamond, label=<<font color="black">(|| (&lt; f 0i) (&lt; 100i f))</font>> color="black" fillcolor="white" style=filled]
  node12312 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">5:let s = &quot;&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12307 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">1:let f = [? __x1__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12320 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">15:let k = m.length</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12301 -> node12303 [ color="black"]
  node12307 -> node12308 [ color="black"]
  node12303 -> node12304 [ color="black"]
  node12309 -> node12310 [ color="black"]
  node12314 -> node12315 [ color="black"]
  node12306 -> node12307 [ color="black"]
  node12311 -> node12312 [ color="black"]
  node12305 -> node12306 [ color="black"]
  node12323 -> node12324 [ color="black"]
  node12317 -> node12324 [ color="black"]
  node12310 -> node12311 [label=<<font color="black">true</font>> color="black"]
  node12310 -> node12312 [label=<<font color="black">false</font>> color="black"]
  node12313 -> node12314 [label=<<font color="black">true</font>> color="black"]
  node12313 -> node12315 [label=<<font color="black">false</font>> color="black"]
  node12308 -> node12309 [label=<<font color="black">true</font>> color="black"]
  node12308 -> node12310 [label=<<font color="black">false</font>> color="black"]
  node12322 -> node12323 [ color="black"]
  node12304 -> node12305 [ color="black"]
  node12316 -> node12317 [ color="black"]
  node12321 -> node12322 [label=<<font color="black">true</font>> color="black"]
  node12321 -> node12323 [label=<<font color="black">false</font>> color="black"]
  node12319 -> node12320 [label=<<font color="black">true</font>> color="black"]
  node12319 -> node12324 [label=<<font color="black">false</font>> color="black"]
  node12312 -> node12313 [ color="black"]
  node12315 -> node12316 [label=<<font color="black">true</font>> color="black"]
  node12315 -> node12318 [label=<<font color="black">false</font>> color="black"]
  node12320 -> node12321 [ color="black"]
  node12324 -> node12302 [ color="black"]
  node12318 -> node12319 [ color="black"]
}
