digraph {
  node9565 [shape=cds, label=<<font color="black">3:app __x1__ = (OrdinaryFunctionCreate INTRINSIC_AsyncGenerator UniqueFormalParameters AsyncGeneratorBody CONST_nonDASHlexicalDASHthis scope)</font>> color="black" fillcolor="white" style=filled]
  node9561 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node9571 [shape=cds, label=<<font color="black">6:app __x4__ = (DefinePropertyOrThrow closure &quot;prototype&quot; (new PropertyDescriptor(&quot;Value&quot; -&gt; prototype, &quot;Writable&quot; -&gt; true, &quot;Enumerable&quot; -&gt; false, &quot;Configurable&quot; -&gt; false)))</font>> color="black" fillcolor="white" style=filled]
  node9576 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">10:return [? __x6__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node9566 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">3:let closure = [! __x1__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node9562 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node9563 [shape=cds, label=<<font color="black">0:access __x0__ = (PropertyName &quot;Evaluation&quot;)</font>> color="black" fillcolor="white" style=filled]
  node9567 [shape=cds, label=<<font color="black">4:app __x2__ = (MakeMethod closure object)</font>> color="black" fillcolor="white" style=filled]
  node9574 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">7:[! __x5__]</td></tr>
      <tr><td align="left">8:closure.SourceText = (get-syntax AsyncGeneratorMethod)</td></tr>
      <tr><td align="left">9:let desc = (new PropertyDescriptor(&quot;Value&quot; -&gt; closure, &quot;Writable&quot; -&gt; true, &quot;Enumerable&quot; -&gt; enumerable, &quot;Configurable&quot; -&gt; true))</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node9569 [shape=cds, label=<<font color="black">5:app __x3__ = (OrdinaryObjectCreate INTRINSIC_AsyncGenerator_prototype)</font>> color="black" fillcolor="white" style=filled]
  node9564 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let propKey = __x0__</td></tr>
      <tr><td align="left">1:[? propKey]</td></tr>
      <tr><td align="left">2:let scope = GLOBAL_context.LexicalEnvironment</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node9568 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">4:[! __x2__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node9573 [shape=cds, label=<<font color="black">7:app __x5__ = (SetFunctionName closure propKey)</font>> color="black" fillcolor="white" style=filled]
  node9572 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">6:[! __x4__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node9575 [shape=cds, label=<<font color="black">10:app __x6__ = (DefinePropertyOrThrow object propKey desc)</font>> color="black" fillcolor="white" style=filled]
  node9570 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">5:let prototype = [! __x3__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node9565 -> node9566 [ color="black"]
  node9573 -> node9574 [ color="black"]
  node9564 -> node9565 [ color="black"]
  node9568 -> node9569 [ color="black"]
  node9572 -> node9573 [ color="black"]
  node9574 -> node9575 [ color="black"]
  node9575 -> node9576 [ color="black"]
  node9576 -> node9562 [ color="black"]
  node9561 -> node9563 [ color="black"]
  node9567 -> node9568 [ color="black"]
  node9566 -> node9567 [ color="black"]
  node9569 -> node9570 [ color="black"]
  node9563 -> node9564 [ color="black"]
  node9570 -> node9571 [ color="black"]
  node9571 -> node9572 [ color="black"]
}
