{
  if (= LeftFirst true) {
    app __x0__ = (ToPrimitive x Number)
    let px = [? __x0__]
    app __x1__ = (ToPrimitive y Number)
    let py = [? __x1__]
  } else {
    app __x2__ = (ToPrimitive y Number)
    let py = [? __x2__]
    app __x3__ = (ToPrimitive x Number)
    let px = [? __x3__]
  }
  if (&& (= px Strings) (= py Strings)) {
    ??? "If id:{py} is a prefix of id:{px} , return value:{false} . ( A String value id:{p} is a prefix of String value id:{q} if id:{q} can be the result of concatenating id:{p} and some other String id:{r} . Note that any String is a prefix of itself , because id:{r} may be the empty String . )"
    ??? "If id:{px} is a prefix of id:{py} , return value:{true} ."
    ??? "Let id:{k} be the smallest nonnegative integer such that the code unit at index id:{k} within id:{px} is different from the code unit at index id:{k} within id:{py} . ( There must be such a id:{k} , for neither String is a prefix of the other . )"
    ??? "Let id:{m} be the integer that is the code unit value at index id:{k} within id:{px} ."
    ??? "Let id:{n} be the integer that is the code unit value at index id:{k} within id:{py} ."
    if (< m n) return true else return false
  } else {
    ??? "Let id:{nx} be ? ToNumber ( id:{px} ) . Because id:{px} and id:{py} are primitive values evaluation order is not important ."
    app __x4__ = (ToNumber py)
    let ny = [? __x4__]
    if (= nx NaN) return undefined else {}
    if (= ny NaN) return undefined else {}
    if (= nx ny) return false else {}
    if (&& (= nx 0i) (= ny -0.0)) return false else {}
    if (&& (= nx -0.0) (= ny 0i)) return false else {}
    if (= nx Infinity) return false else {}
    if (= ny Infinity) return true else {}
    if (= ny -Infinity) return false else {}
    if (= nx -Infinity) return true else {}
    ??? "If the mathematical value of id:{nx} is less than the mathematical value of id:{ny} — note that these mathematical values are both finite and not both zero — return value:{true} . Otherwise , return value:{false} ."
  }
}