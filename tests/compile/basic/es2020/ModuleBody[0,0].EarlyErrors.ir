{
  access __x0__ = (ModuleItemList "LexicallyDeclaredNames")
  app __x1__ = (IsDuplicate __x0__)
  if __x1__ {
    app __x2__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_SyntaxError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
    return __x2__
  } else {
    app __x3__ = (NormalCompletion undefined)
    return __x3__
  }
  access __x4__ = (ModuleItemList "LexicallyDeclaredNames")
  access __x5__ = (ModuleItemList "VarDeclaredNames")
  let __x6__ = __x4__
  let __x7__ = __x5__
  let __x8__ = 0i
  let __x9__ = 0i
  let __x10__ = false
  while (< __x8__ __x6__.length) {
    __x9__ = 0i
    while (< __x9__ __x7__.length) if (= __x6__[__x8__] __x7__[__x9__]) __x10__ = true else {}
  }
  if __x10__ {
    app __x11__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_SyntaxError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
    return __x11__
  } else {
    app __x12__ = (NormalCompletion undefined)
    return __x12__
  }
  access __x13__ = (ModuleItemList "ExportedNames")
  app __x14__ = (IsDuplicate __x13__)
  if __x14__ {
    app __x15__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_SyntaxError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
    return __x15__
  } else {
    app __x16__ = (NormalCompletion undefined)
    return __x16__
  }
  access __x17__ = (ModuleItemList "ExportedBindings")
  access __x18__ = (ModuleItemList "VarDeclaredNames")
  access __x19__ = (ModuleItemList "LexicallyDeclaredNames")
  let __x20__ = __x17__
  let __x21__ = __x18__
  let __x22__ = __x19__
  let __x23__ = 0i
  let __x24__ = 0i
  let __x25__ = false
  while (< __x23__ __x20__.length) {
    __x24__ = 0i
    while (< __x24__ __x21__.length) if (= __x20__[__x23__] __x21__[__x24__]) __x25__ = true else {}
    __x24__ = 0i
    while (< __x24__ __x22__.length) if (= __x20__[__x23__] __x22__[__x24__]) __x25__ = true else {}
  }
  if __x25__ {
    app __x26__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_SyntaxError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
    return __x26__
  } else {
    app __x27__ = (NormalCompletion undefined)
    return __x27__
  }
  if (contains ModuleItemList "super") {
    app __x28__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_SyntaxError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
    return __x28__
  } else {
    app __x29__ = (NormalCompletion undefined)
    return __x29__
  }
  access __x30__ = (ModuleItemList "Contains")
  app __x31__ = (__x30__ "NewTarget")
  if __x31__ {
    app __x32__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_SyntaxError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
    return __x32__
  } else {
    app __x33__ = (NormalCompletion undefined)
    return __x33__
  }
  access __x34__ = (ModuleItemList "ContainsDuplicateLabels")
  app __x35__ = (__x34__ (new []))
  if (= __x35__ true) {
    app __x36__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_SyntaxError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
    return __x36__
  } else {
    app __x37__ = (NormalCompletion undefined)
    return __x37__
  }
  access __x38__ = (ModuleItemList "ContainsUndefinedBreakTarget")
  app __x39__ = (__x38__ (new []))
  if (= __x39__ true) {
    app __x40__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_SyntaxError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
    return __x40__
  } else {
    app __x41__ = (NormalCompletion undefined)
    return __x41__
  }
  access __x42__ = (ModuleItemList "ContainsUndefinedContinueTarget")
  app __x43__ = (__x42__ (new []) (new []))
  if (= __x43__ true) {
    app __x44__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_SyntaxError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
    return __x44__
  } else {
    app __x45__ = (NormalCompletion undefined)
    return __x45__
  }
}