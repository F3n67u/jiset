{
  app __x0__ = (IsPropertyKey P)
  assert (= __x0__ true)
  if (= (typeof P) Symbol) {
    app __x1__ = (OrdinaryGet O P Receiver)
    return [? __x1__]
  } else {}
  let exports = O.Exports
  if (! (contains exports P)) return undefined else {}
  let m = O.Module
  app __x2__ = (m.ResolveExport m P (new []) (new []))
  let binding = [? __x2__]
  assert (! (|| (= binding null) (= binding "ambiguous")))
  let targetModule = binding.Module
  assert (! (= targetModule undefined))
  let targetEnv = targetModule.Environment
  if (= targetEnv undefined) throw ReferenceError else {}
  let targetEnvRec = targetEnv.EnvironmentRecord
  app __x3__ = (targetEnvRec.GetBindingValue targetEnvRec binding.BindingName true)
  return [? __x3__]
}