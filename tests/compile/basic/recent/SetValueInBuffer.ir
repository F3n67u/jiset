{
  app __x0__ = (IsDetachedBuffer arrayBuffer)
  assert (= __x0__ false)
  let block = arrayBuffer.ArrayBufferData
  let elementSize = AnyNum
  if (= isLittleEndian absent) isLittleEndian = AGENT.LittleEndian else {}
  app __x1__ = (NumericToRawBytes type value isLittleEndian)
  let rawBytes = __x1__
  app __x2__ = (IsSharedArrayBuffer arrayBuffer)
  if (= __x2__ true) {
    let execution = AGENT.CandidateExecution
    ??? "Let id:{eventList} be the [ [ EventList ] ] field of the element in id:{execution} . [ [ EventsRecords ] ] whose [ [ AgentSignifier ] ] is AgentSignifier ( ) ."
    let __x3__ = true
    __x3__ = (= isTypedArray true)
    if __x3__ {
      app __x4__ = (IsNoTearConfiguration type order)
      __x3__ = (= __x4__ true)
    } else {}
    if __x3__ let noTear = true else let noTear = false
    append (new WriteSharedMemory("Order" -> order, "NoTear" -> noTear, "Block" -> block, "ByteIndex" -> byteIndex, "ElementSize" -> elementSize, "Payload" -> rawBytes)) -> eventList
  } else {}
  ??? "Else , store the individual bytes of id:{rawBytes} into id:{block} , starting at id:{block} [ id:{byteIndex} ] ."
  return undefined
}