{
  app __x0__ = (Type index)
  assert (= __x0__ Number)
  let buffer = O.ViewedArrayBuffer
  app __x1__ = (IsDetachedBuffer buffer)
  if (= __x1__ true) throw INTRINSIC_TypeError else {}
  app __x2__ = (IsInteger index)
  if (= __x2__ false) return undefined else {}
  if (== index -0.0) return undefined else {}
  let length = O.ArrayLength
  if (|| (< index 0i) (! (< index length))) return undefined else {}
  let offset = O.ByteOffset
  let arrayTypeName = O.TypedArrayName
  ??? "Let id:{elementSize} be the Number value of the Element Size value specified in link:{unhandled: table-49} for id:{arrayTypeName} ."
  let indexedPosition = (+ (* index elementSize) offset)
  ??? "Let id:{elementType} be the String value of the Element Type value in link:{unhandled: table-49} for id:{arrayTypeName} ."
  app __x3__ = (GetValueFromBuffer buffer indexedPosition elementType true "Unordered")
  return __x3__
}