{
  ??? "If the source code matching this production is strict code , the Early Error rules for grammar:{StrictFormalParameters0, [FormalParameters]} are applied ."
  ??? "If the source code matching this production is strict code , it is a Syntax Error if nt:{BindingIdentifier} is the nt:{IdentifierName} code:{eval} or the nt:{IdentifierName} code:{arguments} ."
  let __x0__ = true
  access __x1__ = (FunctionBody "ContainsUseStrict")
  __x0__ = (= __x1__ true)
  if __x0__ {
    access __x2__ = (FormalParameters "IsSimpleParameterList")
    __x0__ = (= __x2__ false)
  } else {}
  if __x0__ throw INTRINSIC_SyntaxError else {
    app __x3__ = (NormalCompletion undefined)
    return __x3__
  }
  access __x4__ = (FormalParameters "BoundNames")
  access __x5__ = (FunctionBody "LexicallyDeclaredNames")
  let __x6__ = __x4__
  let __x7__ = __x5__
  let __x8__ = 0i
  let __x9__ = 0i
  let __x10__ = false
  while (< __x8__ __x6__.length) {
    __x9__ = 0i
    while (< __x9__ __x7__.length) if (= __x6__[__x8__] __x7__[__x9__]) __x10__ = true else {}
  }
  if __x10__ throw INTRINSIC_SyntaxError else {
    app __x11__ = (NormalCompletion undefined)
    return __x11__
  }
  access __x12__ = (FormalParameters "Contains")
  app __x13__ = (__x12__ "SuperProperty")
  if (= __x13__ true) throw INTRINSIC_SyntaxError else {
    app __x14__ = (NormalCompletion undefined)
    return __x14__
  }
  access __x15__ = (FunctionBody "Contains")
  app __x16__ = (__x15__ "SuperProperty")
  if (= __x16__ true) throw INTRINSIC_SyntaxError else {
    app __x17__ = (NormalCompletion undefined)
    return __x17__
  }
  access __x18__ = (FormalParameters "Contains")
  app __x19__ = (__x18__ "SuperCall")
  if (= __x19__ true) throw INTRINSIC_SyntaxError else {
    app __x20__ = (NormalCompletion undefined)
    return __x20__
  }
  access __x21__ = (FunctionBody "Contains")
  app __x22__ = (__x21__ "SuperCall")
  if (= __x22__ true) throw INTRINSIC_SyntaxError else {
    app __x23__ = (NormalCompletion undefined)
    return __x23__
  }
}