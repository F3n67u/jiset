{
  [0] let R = this
  [1] app __x0__ = (Type R)
  [1] if (! (= __x0__ Object)) {
    app __x1__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_TypeError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
    return __x1__
  } else [51] {}
  [2] if (= R.OriginalSource absent) {
    [4] app __x2__ = (SameValue R INTRINSIC_RegExpPrototype)
    [4] if (= __x2__ true) {
      app __x3__ = (WrapCompletion "(?:)")
      return __x3__
    } else {
      app __x4__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_TypeError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
      return __x4__
    }
  } else [51] {}
  [5] assert (! (= R.OriginalFlags absent))
  [6] let src = R.OriginalSource
  [7] let flags = R.OriginalFlags
  [8] app __x5__ = (EscapeRegExpPattern src flags)
  [8] app __x6__ = (WrapCompletion __x5__)
  [8] return __x6__
}