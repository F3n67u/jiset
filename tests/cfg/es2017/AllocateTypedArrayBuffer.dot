digraph {
  node15019 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node15018 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node15022 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">6:let data = [? __x0__]</td></tr>
      <tr><td align="left">7:O.ViewedArrayBuffer = data</td></tr>
      <tr><td align="left">8:O.ByteLength = byteLength</td></tr>
      <tr><td align="left">9:O.ByteOffset = 0i</td></tr>
      <tr><td align="left">10:O.ArrayLength = length</td></tr>
      <tr><td align="left">11:return O</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15021 [shape=cds, label=<<font color="black">6:app __x0__ = (AllocateArrayBuffer INTRINSIC_ArrayBuffer byteLength)</font>> color="black" fillcolor="white" style=filled]
  node15020 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">1:assert (= O.ViewedArrayBuffer undefined)</td></tr>
      <tr><td align="left">2:assert (! (&lt; length 0i))</td></tr>
      <tr><td align="left">3:let constructorName = O.TypedArrayName</td></tr>
      <tr><td align="left">4:??? &quot;Let id:{elementSize} be the Element Size value in link:{unhandled: table-49} for id:{constructorName} .&quot;</td></tr>
      <tr><td align="left">5:let byteLength = (* elementSize length)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15018 -> node15020 [ color="black"]
  node15020 -> node15021 [ color="black"]
  node15021 -> node15022 [ color="black"]
  node15022 -> node15019 [ color="black"]
}
