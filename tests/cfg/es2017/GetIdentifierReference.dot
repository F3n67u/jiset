digraph {
  node1383 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return (new Reference(&quot;BaseValue&quot; -&gt; undefined, &quot;ReferencedName&quot; -&gt; name, &quot;StrictReference&quot; -&gt; strict))</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node1387 [shape=diamond, label=<<font color="black">(= exists true)</font>> color="black" fillcolor="white" style=filled]
  node1382 [shape=diamond, label=<<font color="black">(= lex null)</font>> color="black" fillcolor="white" style=filled]
  node1381 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node1390 [shape=cds, label=<<font color="black">8:app __x1__ = (GetIdentifierReference outer name strict)</font>> color="black" fillcolor="white" style=filled]
  node1385 [shape=cds, label=<<font color="black">3:app __x0__ = (envRec.HasBinding envRec name)</font>> color="black" fillcolor="white" style=filled]
  node1380 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node1384 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">2:let envRec = lex.EnvironmentRecord</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node1391 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">8:return [? __x1__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node1386 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">3:let exists = [? __x0__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node1389 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">7:let outer = lex.Outer</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node1388 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return (new Reference(&quot;BaseValue&quot; -&gt; envRec, &quot;ReferencedName&quot; -&gt; name, &quot;StrictReference&quot; -&gt; strict))</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node1386 -> node1387 [ color="black"]
  node1382 -> node1383 [label=<<font color="black">true</font>> color="black"]
  node1382 -> node1384 [label=<<font color="black">false</font>> color="black"]
  node1385 -> node1386 [ color="black"]
  node1388 -> node1381 [ color="black"]
  node1391 -> node1381 [ color="black"]
  node1384 -> node1385 [ color="black"]
  node1387 -> node1388 [label=<<font color="black">true</font>> color="black"]
  node1387 -> node1389 [label=<<font color="black">false</font>> color="black"]
  node1389 -> node1390 [ color="black"]
  node1380 -> node1382 [ color="black"]
  node1383 -> node1384 [ color="black"]
  node1390 -> node1391 [ color="black"]
}
