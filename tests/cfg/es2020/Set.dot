digraph {
  node16604 [shape=cds, label=<<font color="black">1:app __x0__ = (OrdinaryCreateFromConstructor NewTarget &quot;%Set.prototype%&quot; (new [&quot;SetData&quot;]))</font>> color="black" fillcolor="white" style=filled]
  node16619 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return set</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16613 [shape=cds, label=<<font color="black">6:app __x3__ = (GetIterator iterable)</font>> color="black" fillcolor="white" style=filled]
  node16623 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">11:let status = __x6__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16608 [shape=cds, label=<<font color="black">4:app __x1__ = (Get set &quot;add&quot;)</font>> color="black" fillcolor="white" style=filled]
  node16616 [shape=cds, label=<<font color="black">8:app __x4__ = (IteratorStep iteratorRecord)</font>> color="black" fillcolor="white" style=filled]
  node16617 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">8:let next = [? __x4__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16600 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node16602 [shape=diamond, label=<<font color="black">(= NewTarget undefined)</font>> color="black" fillcolor="white" style=filled]
  node16599 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node16621 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">10:let nextValue = [? __x5__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16610 [shape=cds, label=<<font color="black">5:app __x2__ = (IsCallable adder)</font>> color="black" fillcolor="white" style=filled]
  node16626 [shape=cds, label=<<font color="black">app __x8__ = (IteratorClose iteratorRecord status)</font>> color="black" fillcolor="white" style=filled]
  node16609 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">4:let adder = [? __x1__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16601 [shape=cds, label=<<font color="black">app iterable = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node16620 [shape=cds, label=<<font color="black">10:app __x5__ = (IteratorValue next)</font>> color="black" fillcolor="white" style=filled]
  node16605 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">1:let set = [? __x0__]</td></tr>
      <tr><td align="left">2:set.SetData = (new [])</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16625 [shape=diamond, label=<<font color="black">__x7__</font>> color="black" fillcolor="white" style=filled]
  node16624 [shape=cds, label=<<font color="black">12:app __x7__ = (IsAbruptCompletion status)</font>> color="black" fillcolor="white" style=filled]
  node16615 [shape=diamond, label=<<font color="black">true</font>> color="black" fillcolor="white" style=filled]
  node16612 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16611 [shape=diamond, label=<<font color="black">(= __x2__ false)</font>> color="black" fillcolor="white" style=filled]
  node16606 [shape=diamond, label=<<font color="black">(|| (= iterable undefined) (= iterable null))</font>> color="black" fillcolor="white" style=filled]
  node16607 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return set</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16618 [shape=diamond, label=<<font color="black">(= next false)</font>> color="black" fillcolor="white" style=filled]
  node16603 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16614 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">6:let iteratorRecord = [? __x3__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16627 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return [? __x8__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16622 [shape=cds, label=<<font color="black">11:app __x6__ = (Call adder set (new [nextValue]))</font>> color="black" fillcolor="white" style=filled]
  node16624 -> node16625 [ color="black"]
  node16610 -> node16611 [ color="black"]
  node16607 -> node16608 [ color="black"]
  node16617 -> node16618 [ color="black"]
  node16626 -> node16627 [ color="black"]
  node16599 -> node16601 [ color="black"]
  node16608 -> node16609 [ color="black"]
  node16606 -> node16607 [label=<<font color="black">true</font>> color="black"]
  node16606 -> node16608 [label=<<font color="black">false</font>> color="black"]
  node16615 -> node16616 [label=<<font color="black">true</font>> color="black"]
  node16615 -> node16600 [label=<<font color="black">false</font>> color="black"]
  node16605 -> node16606 [ color="black"]
  node16620 -> node16621 [ color="black"]
  node16622 -> node16623 [ color="black"]
  node16613 -> node16614 [ color="black"]
  node16621 -> node16622 [ color="black"]
  node16602 -> node16603 [label=<<font color="black">true</font>> color="black"]
  node16602 -> node16604 [label=<<font color="black">false</font>> color="black"]
  node16611 -> node16612 [label=<<font color="black">true</font>> color="black"]
  node16611 -> node16613 [label=<<font color="black">false</font>> color="black"]
  node16612 -> node16613 [ color="black"]
  node16601 -> node16602 [ color="black"]
  node16609 -> node16610 [ color="black"]
  node16614 -> node16615 [ color="black"]
  node16604 -> node16605 [ color="black"]
  node16625 -> node16626 [label=<<font color="black">true</font>> color="black"]
  node16625 -> node16615 [label=<<font color="black">false</font>> color="black"]
  node16627 -> node16615 [ color="black"]
  node16619 -> node16620 [ color="black"]
  node16616 -> node16617 [ color="black"]
  node16603 -> node16604 [ color="black"]
  node16618 -> node16619 [label=<<font color="black">true</font>> color="black"]
  node16618 -> node16620 [label=<<font color="black">false</font>> color="black"]
  node16623 -> node16624 [ color="black"]
}
