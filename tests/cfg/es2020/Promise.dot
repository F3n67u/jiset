digraph {
  node18210 [shape=diamond, label=<<font color="black">__x4__</font>> color="black" fillcolor="white" style=filled]
  node18207 [shape=cds, label=<<font color="black">8:app __x3__ = (Call executor undefined (new [resolvingFunctions.Resolve, resolvingFunctions.Reject]))</font>> color="black" fillcolor="white" style=filled]
  node18197 [shape=cds, label=<<font color="black">app executor = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node18212 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">10:[? __x5__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18196 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node18199 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18202 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18200 [shape=cds, label=<<font color="black">1:app __x0__ = (IsCallable executor)</font>> color="black" fillcolor="white" style=filled]
  node18209 [shape=cds, label=<<font color="black">9:app __x4__ = (IsAbruptCompletion completion)</font>> color="black" fillcolor="white" style=filled]
  node18204 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">2:let promise = [? __x1__]</td></tr>
      <tr><td align="left">3:promise.PromiseState = CONST_pending</td></tr>
      <tr><td align="left">4:promise.PromiseFulfillReactions = (new [])</td></tr>
      <tr><td align="left">5:promise.PromiseRejectReactions = (new [])</td></tr>
      <tr><td align="left">6:promise.PromiseIsHandled = false</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18205 [shape=cds, label=<<font color="black">7:app __x2__ = (CreateResolvingFunctions promise)</font>> color="black" fillcolor="white" style=filled]
  node18208 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">8:let completion = __x3__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18201 [shape=diamond, label=<<font color="black">(= __x0__ false)</font>> color="black" fillcolor="white" style=filled]
  node18195 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node18213 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">11:return promise</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18198 [shape=diamond, label=<<font color="black">(= NewTarget undefined)</font>> color="black" fillcolor="white" style=filled]
  node18211 [shape=cds, label=<<font color="black">10:app __x5__ = (Call resolvingFunctions.Reject undefined (new [completion.Value]))</font>> color="black" fillcolor="white" style=filled]
  node18206 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">7:let resolvingFunctions = __x2__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18203 [shape=cds, label=<<font color="black">2:app __x1__ = (OrdinaryCreateFromConstructor NewTarget &quot;%Promise.prototype%&quot; (new [&quot;PromiseState&quot;, &quot;PromiseResult&quot;, &quot;PromiseFulfillReactions&quot;, &quot;PromiseRejectReactions&quot;, &quot;PromiseIsHandled&quot;]))</font>> color="black" fillcolor="white" style=filled]
  node18206 -> node18207 [ color="black"]
  node18208 -> node18209 [ color="black"]
  node18195 -> node18197 [ color="black"]
  node18197 -> node18198 [ color="black"]
  node18209 -> node18210 [ color="black"]
  node18203 -> node18204 [ color="black"]
  node18202 -> node18203 [ color="black"]
  node18212 -> node18213 [ color="black"]
  node18211 -> node18212 [ color="black"]
  node18198 -> node18199 [label=<<font color="black">true</font>> color="black"]
  node18198 -> node18200 [label=<<font color="black">false</font>> color="black"]
  node18210 -> node18211 [label=<<font color="black">true</font>> color="black"]
  node18210 -> node18213 [label=<<font color="black">false</font>> color="black"]
  node18207 -> node18208 [ color="black"]
  node18213 -> node18196 [ color="black"]
  node18204 -> node18205 [ color="black"]
  node18200 -> node18201 [ color="black"]
  node18205 -> node18206 [ color="black"]
  node18199 -> node18200 [ color="black"]
  node18201 -> node18202 [label=<<font color="black">true</font>> color="black"]
  node18201 -> node18203 [label=<<font color="black">false</font>> color="black"]
}
