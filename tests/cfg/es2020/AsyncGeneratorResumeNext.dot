digraph {
  node18052 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node18056 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return undefined</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18075 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">23:[! __x4__]</td></tr>
      <tr><td align="left">24:return undefined</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18065 [shape=diamond, label=<<font color="black">(= state CONST_completed)</font>> color="black" fillcolor="white" style=filled]
  node18068 [shape=cds, label=<<font color="black">16:app __x1__ = (PromiseResolve INTRINSIC_Promise completion.Value)</font>> color="black" fillcolor="white" style=filled]
  node18073 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">21:let onRejected = [! __x3__]</td></tr>
      <tr><td align="left">22:onRejected.Generator = generator</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18055 [shape=diamond, label=<<font color="black">(= state CONST_awaitingDASHreturn)</font>> color="black" fillcolor="white" style=filled]
  node18076 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">26:assert (= completion.Type CONST_throw)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18059 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return undefined</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18080 [shape=cds, label=<<font color="black">app __x6__ = (AsyncGeneratorResolve generator undefined true)</font>> color="black" fillcolor="white" style=filled]
  node18064 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">11:generator.AsyncGeneratorState = CONST_completed</td></tr>
      <tr><td align="left">12:state = CONST_completed</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18077 [shape=cds, label=<<font color="black">27:app __x5__ = (AsyncGeneratorReject generator completion.Value)</font>> color="black" fillcolor="white" style=filled]
  node18067 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">15:generator.AsyncGeneratorState = CONST_awaitingDASHreturn</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18057 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">4:let queue = generator.AsyncGeneratorQueue</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18071 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">18:let onFulfilled = [! __x2__]</td></tr>
      <tr><td align="left">19:onFulfilled.Generator = generator</td></tr>
      <tr><td align="left">20:let stepsRejected = AsyncGeneratorResumeNextReturnProcessorRejectedFunctions</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18060 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">6:let next = queue[0i]</td></tr>
      <tr><td align="left">8:let completion = next.Completion</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18054 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">1:let state = generator.AsyncGeneratorState</td></tr>
      <tr><td align="left">2:assert (! (= state CONST_executing))</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18066 [shape=diamond, label=<<font color="black">(= completion.Type CONST_return)</font>> color="black" fillcolor="white" style=filled]
  node18061 [shape=cds, label=<<font color="black">29:app __x0__ = (IsAbruptCompletion completion)</font>> color="black" fillcolor="white" style=filled]
  node18078 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">27:[! __x5__]</td></tr>
      <tr><td align="left">28:return undefined</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18051 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node18074 [shape=cds, label=<<font color="black">23:app __x4__ = (PerformPromiseThen promise onFulfilled onRejected)</font>> color="black" fillcolor="white" style=filled]
  node18053 [shape=cds, label=<<font color="black">app generator = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node18070 [shape=cds, label=<<font color="black">18:app __x2__ = (CreateBuiltinFunction stepsFulfilled (new [&quot;Generator&quot;]))</font>> color="black" fillcolor="white" style=filled]
  node18082 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">30:assert (|| (= state CONST_suspendedStart) (= state CONST_suspendedYield))</td></tr>
      <tr><td align="left">31:let genContext = generator.AsyncGeneratorContext</td></tr>
      <tr><td align="left">32:let callerContext = GLOBAL_context</td></tr>
      <tr><td align="left">33:GLOBAL_context = null</td></tr>
      <tr><td align="left">34:generator.AsyncGeneratorState = CONST_executing</td></tr>
      <tr><td align="left">35:append genContext -&gt; GLOBAL_executionStack</td></tr>
      <tr><td align="left">35:GLOBAL_context = GLOBAL_executionStack[(- GLOBAL_executionStack.length 1i)]</td></tr>
      <tr><td align="left">36:??? &quot;Resume the suspended evaluation of id:{genContext} using id:{completion} as the result of the operation that suspended it . Let id:{result} be the completion record returned by the resumed computation .&quot;</td></tr>
      <tr><td align="left">39:return undefined</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18079 [shape=diamond, label=<<font color="black">(= state CONST_completed)</font>> color="black" fillcolor="white" style=filled]
  node18062 [shape=diamond, label=<<font color="black">__x0__</font>> color="black" fillcolor="white" style=filled]
  node18072 [shape=cds, label=<<font color="black">21:app __x3__ = (CreateBuiltinFunction stepsRejected (new [&quot;Generator&quot;]))</font>> color="black" fillcolor="white" style=filled]
  node18058 [shape=diamond, label=<<font color="black">(= queue.length 0i)</font>> color="black" fillcolor="white" style=filled]
  node18069 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">16:let promise = [? __x1__]</td></tr>
      <tr><td align="left">17:let stepsFulfilled = AsyncGeneratorResumeNextReturnProcessorFulfilledFunctions</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18081 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return [! __x6__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18063 [shape=diamond, label=<<font color="black">(= state CONST_suspendedStart)</font>> color="black" fillcolor="white" style=filled]
  node18059 -> node18060 [ color="black"]
  node18063 -> node18064 [label=<<font color="black">true</font>> color="black"]
  node18063 -> node18065 [label=<<font color="black">false</font>> color="black"]
  node18061 -> node18062 [ color="black"]
  node18067 -> node18068 [ color="black"]
  node18058 -> node18059 [label=<<font color="black">true</font>> color="black"]
  node18058 -> node18060 [label=<<font color="black">false</font>> color="black"]
  node18076 -> node18077 [ color="black"]
  node18055 -> node18056 [label=<<font color="black">true</font>> color="black"]
  node18055 -> node18057 [label=<<font color="black">false</font>> color="black"]
  node18068 -> node18069 [ color="black"]
  node18077 -> node18078 [ color="black"]
  node18056 -> node18057 [ color="black"]
  node18072 -> node18073 [ color="black"]
  node18082 -> node18052 [ color="black"]
  node18065 -> node18066 [label=<<font color="black">true</font>> color="black"]
  node18065 -> node18082 [label=<<font color="black">false</font>> color="black"]
  node18069 -> node18070 [ color="black"]
  node18064 -> node18065 [ color="black"]
  node18053 -> node18054 [ color="black"]
  node18070 -> node18071 [ color="black"]
  node18051 -> node18053 [ color="black"]
  node18073 -> node18074 [ color="black"]
  node18060 -> node18061 [ color="black"]
  node18075 -> node18082 [ color="black"]
  node18074 -> node18075 [ color="black"]
  node18079 -> node18080 [label=<<font color="black">true</font>> color="black"]
  node18079 -> node18082 [label=<<font color="black">false</font>> color="black"]
  node18062 -> node18063 [label=<<font color="black">true</font>> color="black"]
  node18062 -> node18079 [label=<<font color="black">false</font>> color="black"]
  node18057 -> node18058 [ color="black"]
  node18081 -> node18082 [ color="black"]
  node18080 -> node18081 [ color="black"]
  node18078 -> node18082 [ color="black"]
  node18054 -> node18055 [ color="black"]
  node18066 -> node18067 [label=<<font color="black">true</font>> color="black"]
  node18066 -> node18076 [label=<<font color="black">false</font>> color="black"]
  node18071 -> node18072 [ color="black"]
}
