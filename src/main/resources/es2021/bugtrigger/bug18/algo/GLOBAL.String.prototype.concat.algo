def [BUILTIN] String.prototype.concat(...args) = 0:{
  0:app __x0__ = (RequireObjectCoercible this)
  0:let O = [? __x0__]
  1:app __x1__ = (ToString O)
  1:let S = [? __x1__]
  2:let args = argumentsList
  3:let R = S
  4:let __x2__ = args
  4:let __x3__ = 0i
  4:while (< __x3__ __x2__.length) 4:{
    4:let next = __x2__[__x3__]
    4:__x3__ = (+ __x3__ 1i)
    5:app __x4__ = (ToString next)
    5:let nextString = [? __x4__]
    6:R = (+ R nextString)
  }
  7:return R
}
- id: "sec-string.prototype.concat"
- code:
          1. Let _O_ be ? RequireObjectCoercible(*this* value).
          1. Let _S_ be ? ToString(_O_).
          1. Let _args_ be a List whose elements are the arguments passed to this function.
          1. Let _R_ be _S_.
          1. For each element _next_ of _args_, do
            1. Let _nextString_ be ? ToString(_next_).
            1. Set _R_ to the string-concatenation of _R_ and _nextString_.
          1. Return _R_.