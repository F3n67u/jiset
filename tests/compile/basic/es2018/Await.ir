{
  let asyncContext = GLOBAL_context
  app __x0__ = (NewPromiseCapability INTRINSIC_Promise)
  let promiseCapability = [! __x0__]
  app __x1__ = (Call promiseCapability.Resolve undefined (new [promise]))
  [! __x1__]
  let stepsFulfilled = AwaitFulfilledFunctions
  app __x2__ = (CreateBuiltinFunction stepsFulfilled (new ["AsyncContext"]))
  let onFulfilled = __x2__
  onFulfilled.AsyncContext = asyncContext
  let stepsRejected = AwaitRejectedFunctions
  app __x3__ = (CreateBuiltinFunction stepsRejected (new ["AsyncContext"]))
  let onRejected = __x3__
  onRejected.AsyncContext = asyncContext
  app __x4__ = (NewPromiseCapability INTRINSIC_Promise)
  let throwawayCapability = [! __x4__]
  throwawayCapability.Promise.PromiseIsHandled = true
  app __x5__ = (PerformPromiseThen promiseCapability.Promise onFulfilled onRejected throwawayCapability)
  [! __x5__]
  if (= GLOBAL_executionStack[(- GLOBAL_executionStack.length 1i)] asyncContext) {
    let __x6__ = (- GLOBAL_executionStack.length 1i)
    (pop GLOBAL_executionStack __x6__)
  } else {}
  GLOBAL_context = GLOBAL_executionStack[(- GLOBAL_executionStack.length 1i)]
  ??? "Set the code evaluation state of id:{asyncContext} such that when evaluation is resumed with a Completion id:{completion} , the following steps of the algorithm that invoked Await will be performed , with id:{completion} available ."
}