{
  app __x0__ = (Type Obj)
  if (! (= __x0__ Object)) throw INTRINSIC_TypeError else {}
  let desc = (new PropertyDescriptor("SubMap" -> (new SubMap())))
  app __x1__ = (HasProperty Obj "enumerable")
  let hasEnumerable = [? __x1__]
  if (= hasEnumerable true) {
    app __x2__ = (Get Obj "enumerable")
    app __x3__ = (ToBoolean [? __x2__])
    let enumerable = __x3__
    desc.Enumerable = enumerable
  } else {}
  app __x4__ = (HasProperty Obj "configurable")
  let hasConfigurable = [? __x4__]
  if (= hasConfigurable true) {
    app __x5__ = (Get Obj "configurable")
    app __x6__ = (ToBoolean [? __x5__])
    let configurable = __x6__
    desc.Configurable = configurable
  } else {}
  app __x7__ = (HasProperty Obj "value")
  let hasValue = [? __x7__]
  if (= hasValue true) {
    app __x8__ = (Get Obj "value")
    let value = [? __x8__]
    desc.Value = value
  } else {}
  app __x9__ = (HasProperty Obj "writable")
  let hasWritable = [? __x9__]
  if (= hasWritable true) {
    app __x10__ = (Get Obj "writable")
    app __x11__ = (ToBoolean [? __x10__])
    let writable = __x11__
    desc.Writable = writable
  } else {}
  app __x12__ = (HasProperty Obj "get")
  let hasGet = [? __x12__]
  if (= hasGet true) {
    app __x13__ = (Get Obj "get")
    let getter = [? __x13__]
    app __x14__ = (IsCallable getter)
    if (&& (= __x14__ false) (! (= getter undefined))) throw INTRINSIC_TypeError else {}
    desc.Get = getter
  } else {}
  app __x15__ = (HasProperty Obj "set")
  let hasSet = [? __x15__]
  if (= hasSet true) {
    app __x16__ = (Get Obj "set")
    let setter = [? __x16__]
    app __x17__ = (IsCallable setter)
    if (&& (= __x17__ false) (! (= setter undefined))) throw INTRINSIC_TypeError else {}
    desc.Set = setter
  } else {}
  if (|| (! (= desc.Get absent)) (! (= desc.Set absent))) if (|| (! (= desc.Value absent)) (! (= desc.Writable absent))) throw INTRINSIC_TypeError else {} else {}
  return desc
}