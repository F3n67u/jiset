digraph {
  node15859 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node15863 [shape=cds, label=<<font color="black">1:app __x0__ = (ToIndex length)</font>> color="black" fillcolor="white" style=filled]
  node15866 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">2:return [? __x1__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15858 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node15862 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15861 [shape=diamond, label=<<font color="black">(= NewTarget undefined)</font>> color="black" fillcolor="white" style=filled]
  node15860 [shape=cds, label=<<font color="black">app length = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node15864 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">1:let byteLength = [? __x0__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15865 [shape=cds, label=<<font color="black">2:app __x1__ = (AllocateSharedArrayBuffer NewTarget byteLength)</font>> color="black" fillcolor="white" style=filled]
  node15862 -> node15863 [ color="black"]
  node15866 -> node15859 [ color="black"]
  node15858 -> node15860 [ color="black"]
  node15865 -> node15866 [ color="black"]
  node15861 -> node15862 [label=<<font color="black">true</font>> color="black"]
  node15861 -> node15863 [label=<<font color="black">false</font>> color="black"]
  node15864 -> node15865 [ color="black"]
  node15860 -> node15861 [ color="black"]
  node15863 -> node15864 [ color="black"]
}
