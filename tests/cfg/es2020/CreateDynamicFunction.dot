digraph {
  node0 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node5 [shape=diamond, label=<<font color="black">(= newTarget undefined)</font>> color="black" fillcolor="white" style=filled]
  node10 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">11:let goal = &quot;GeneratorBody&quot;</td></tr>
      <tr><td align="left">12:??? &quot;Let id:{parameterGoal} be the grammar symbol | FormalParameters [ + Yield , ~ Await ] | .&quot;</td></tr>
      <tr><td align="left">13:let fallbackProto = &quot;%Generator%&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">23:let argCount = args.length</td></tr>
      <tr><td align="left">24:let P = &quot;&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node1 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node6 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">newTarget = constructor</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node9 [shape=diamond, label=<<font color="black">(= kind CONST_generator)</font>> color="black" fillcolor="white" style=filled]
  node2 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">1:let callerContext = GLOBAL_executionStack[(- GLOBAL_executionStack.length 2i)]</td></tr>
      <tr><td align="left">2:let callerRealm = callerContext.Realm</td></tr>
      <tr><td align="left">3:let calleeRealm = REALM</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node8 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">7:??? &quot;Let id:{goal} be the grammar symbol | FunctionBody [ ~ Yield , ~ Await ] | .&quot;</td></tr>
      <tr><td align="left">8:??? &quot;Let id:{parameterGoal} be the grammar symbol | FormalParameters [ ~ Yield , ~ Await ] | .&quot;</td></tr>
      <tr><td align="left">9:let fallbackProto = &quot;%Function.prototype%&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node4 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">4:[? __x0__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node42 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">65:__x9__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node24 [shape=cds, label=<<font color="black">34:app __x2__ = (ToString nextArg)</font>> color="black" fillcolor="white" style=filled]
  node37 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">62:__x7__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node25 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">34:let nextArgString = [? __x2__]</td></tr>
      <tr><td align="left">35:??? &quot;Set id:{P} to the string - concatenation of the previous value of id:{P} , value:{\&quot;,\&quot;} ( a comma ) , and id:{nextArgString} .&quot;</td></tr>
      <tr><td align="left">36:k = (+ k 1i)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node20 [shape=cds, label=<<font color="black">30:app __x1__ = (ToString firstArg)</font>> color="black" fillcolor="white" style=filled]
  node46 [shape=cds, label=<<font color="black">68:app __x11__ = (SetFunctionName F &quot;anonymous&quot;)</font>> color="black" fillcolor="white" style=filled]
  node29 [shape=cds, label=<<font color="black">56:app __x4__ = (GetPrototypeFromConstructor newTarget fallbackProto)</font>> color="black" fillcolor="white" style=filled]
  node21 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">30:P = [? __x1__]</td></tr>
      <tr><td align="left">31:let k = 1i</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node33 [shape=diamond, label=<<font color="black">(= kind CONST_generator)</font>> color="black" fillcolor="white" style=filled]
  node28 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">38:let bodyString = (+ (+ &quot;\n&quot; [? __x3__]) &quot;\n&quot;)</td></tr>
      <tr><td align="left">39:??? &quot;Perform the following substeps in an implementation - dependent order , possibly interleaving parsing and error detection : in:{} out:{}&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node38 [shape=diamond, label=<<font color="black">(= kind CONST_asyncGenerator)</font>> color="black" fillcolor="white" style=filled]
  node13 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">19:assert (= kind CONST_asyncGenerator)</td></tr>
      <tr><td align="left">20:let goal = &quot;AsyncGeneratorBody&quot;</td></tr>
      <tr><td align="left">21:??? &quot;Let id:{parameterGoal} be the grammar symbol | FormalParameters [ + Yield , + Await ] | .&quot;</td></tr>
      <tr><td align="left">22:let fallbackProto = &quot;%AsyncGenerator%&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node41 [shape=cds, label=<<font color="black">65:app __x9__ = (DefinePropertyOrThrow F &quot;prototype&quot; (new PropertyDescriptor(&quot;Value&quot; -&gt; prototype, &quot;Writable&quot; -&gt; true, &quot;Enumerable&quot; -&gt; false, &quot;Configurable&quot; -&gt; false)))</font>> color="black" fillcolor="white" style=filled]
  node45 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">__x10__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17 [shape=diamond, label=<<font color="black">(== argCount 1i)</font>> color="black" fillcolor="white" style=filled]
  node32 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">59:let F = [! __x5__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node34 [shape=cds, label=<<font color="black">61:app __x6__ = (OrdinaryObjectCreate INTRINSIC_Generator_prototype)</font>> color="black" fillcolor="white" style=filled]
  node22 [shape=diamond, label=<<font color="black">(&lt; k (- argCount 1i))</font>> color="black" fillcolor="white" style=filled]
  node44 [shape=cds, label=<<font color="black">app __x10__ = (MakeConstructor F)</font>> color="black" fillcolor="white" style=filled]
  node27 [shape=cds, label=<<font color="black">38:app __x3__ = (ToString bodyArg)</font>> color="black" fillcolor="white" style=filled]
  node12 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">15:let goal = &quot;AsyncFunctionBody&quot;</td></tr>
      <tr><td align="left">16:??? &quot;Let id:{parameterGoal} be the grammar symbol | FormalParameters [ ~ Yield , + Await ] | .&quot;</td></tr>
      <tr><td align="left">17:let fallbackProto = &quot;%AsyncFunction.prototype%&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node49 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">71:F.SourceText = [! __x12__]</td></tr>
      <tr><td align="left">72:return F</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node7 [shape=diamond, label=<<font color="black">(= kind CONST_normal)</font>> color="black" fillcolor="white" style=filled]
  node39 [shape=cds, label=<<font color="black">64:app __x8__ = (OrdinaryObjectCreate INTRINSIC_AsyncGenerator_prototype)</font>> color="black" fillcolor="white" style=filled]
  node3 [shape=cds, label=<<font color="black">4:app __x0__ = (HostEnsureCanCompileStrings callerRealm calleeRealm)</font>> color="black" fillcolor="white" style=filled]
  node35 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">61:let prototype = __x6__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node48 [shape=cds, label=<<font color="black">71:app __x12__ = (UTF16DecodeString sourceString)</font>> color="black" fillcolor="white" style=filled]
  node18 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let bodyArg = args[0i]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let bodyArg = &quot;&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node31 [shape=cds, label=<<font color="black">59:app __x5__ = (OrdinaryFunctionCreate proto parameters body CONST_nonDASHlexicalDASHthis scope)</font>> color="black" fillcolor="white" style=filled]
  node11 [shape=diamond, label=<<font color="black">(= kind CONST_async)</font>> color="black" fillcolor="white" style=filled]
  node43 [shape=diamond, label=<<font color="black">(= kind CONST_normal)</font>> color="black" fillcolor="white" style=filled]
  node40 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">64:let prototype = __x8__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node26 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">37:let bodyArg = args[k]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node23 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">33:let nextArg = args[k]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node36 [shape=cds, label=<<font color="black">62:app __x7__ = (DefinePropertyOrThrow F &quot;prototype&quot; (new PropertyDescriptor(&quot;Value&quot; -&gt; prototype, &quot;Writable&quot; -&gt; true, &quot;Enumerable&quot; -&gt; false, &quot;Configurable&quot; -&gt; false)))</font>> color="black" fillcolor="white" style=filled]
  node30 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">56:let proto = [? __x4__]</td></tr>
      <tr><td align="left">57:let realmF = REALM</td></tr>
      <tr><td align="left">58:let scope = realmF.GlobalEnv</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node19 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">28:assert (&lt; 1i argCount)</td></tr>
      <tr><td align="left">29:let firstArg = args[0i]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node47 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">68:__x11__</td></tr>
      <tr><td align="left">69:??? &quot;Let id:{prefix} be the prefix associated with id:{kind} in link:{unhandled: table-dynamic-function-sourcetext-prefixes} .&quot;</td></tr>
      <tr><td align="left">70:let sourceString = (+ (+ (+ (+ (+ (+ prefix &quot;anonymous(&quot;) P) &quot;\n&quot;) &quot;) {&quot;) bodyString) &quot;}&quot;)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15 [shape=diamond, label=<<font color="black">(== argCount 0i)</font>> color="black" fillcolor="white" style=filled]
  node3 -> node4 [ color="black"]
  node7 -> node8 [label=<<font color="black">true</font>> color="black"]
  node7 -> node9 [label=<<font color="black">false</font>> color="black"]
  node47 -> node48 [ color="black"]
  node49 -> node1 [ color="black"]
  node21 -> node22 [ color="black"]
  node43 -> node44 [label=<<font color="black">true</font>> color="black"]
  node43 -> node46 [label=<<font color="black">false</font>> color="black"]
  node38 -> node39 [label=<<font color="black">true</font>> color="black"]
  node38 -> node43 [label=<<font color="black">false</font>> color="black"]
  node32 -> node33 [ color="black"]
  node28 -> node29 [ color="black"]
  node42 -> node46 [ color="black"]
  node29 -> node30 [ color="black"]
  node39 -> node40 [ color="black"]
  node34 -> node35 [ color="black"]
  node18 -> node27 [ color="black"]
  node37 -> node46 [ color="black"]
  node25 -> node22 [ color="black"]
  node2 -> node3 [ color="black"]
  node11 -> node12 [label=<<font color="black">true</font>> color="black"]
  node11 -> node13 [label=<<font color="black">false</font>> color="black"]
  node9 -> node10 [label=<<font color="black">true</font>> color="black"]
  node9 -> node11 [label=<<font color="black">false</font>> color="black"]
  node19 -> node20 [ color="black"]
  node13 -> node14 [ color="black"]
  node35 -> node36 [ color="black"]
  node45 -> node46 [ color="black"]
  node0 -> node2 [ color="black"]
  node36 -> node37 [ color="black"]
  node6 -> node7 [ color="black"]
  node15 -> node16 [label=<<font color="black">true</font>> color="black"]
  node15 -> node17 [label=<<font color="black">false</font>> color="black"]
  node16 -> node27 [ color="black"]
  node44 -> node45 [ color="black"]
  node27 -> node28 [ color="black"]
  node23 -> node24 [ color="black"]
  node14 -> node15 [ color="black"]
  node31 -> node32 [ color="black"]
  node40 -> node41 [ color="black"]
  node30 -> node31 [ color="black"]
  node33 -> node34 [label=<<font color="black">true</font>> color="black"]
  node33 -> node38 [label=<<font color="black">false</font>> color="black"]
  node26 -> node27 [ color="black"]
  node8 -> node14 [ color="black"]
  node10 -> node14 [ color="black"]
  node4 -> node5 [ color="black"]
  node20 -> node21 [ color="black"]
  node24 -> node25 [ color="black"]
  node5 -> node6 [label=<<font color="black">true</font>> color="black"]
  node5 -> node7 [label=<<font color="black">false</font>> color="black"]
  node46 -> node47 [ color="black"]
  node22 -> node23 [label=<<font color="black">true</font>> color="black"]
  node22 -> node26 [label=<<font color="black">false</font>> color="black"]
  node48 -> node49 [ color="black"]
  node12 -> node14 [ color="black"]
  node17 -> node18 [label=<<font color="black">true</font>> color="black"]
  node17 -> node19 [label=<<font color="black">false</font>> color="black"]
  node41 -> node42 [ color="black"]
}
