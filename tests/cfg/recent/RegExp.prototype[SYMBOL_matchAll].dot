digraph {
  node15222 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">5:let matcher = [? __x5__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15214 [shape=cds, label=<<font color="black">2:app __x1__ = (ToString string)</font>> color="black" fillcolor="white" style=filled]
  node15225 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">6:let lastIndex = [? __x7__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15221 [shape=cds, label=<<font color="black">5:app __x5__ = (Construct C (new [R, flags]))</font>> color="black" fillcolor="white" style=filled]
  node15211 [shape=cds, label=<<font color="black">1:app __x0__ = (Type R)</font>> color="black" fillcolor="white" style=filled]
  node15215 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">2:let S = [? __x1__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15226 [shape=cds, label=<<font color="black">7:app __x8__ = (Set matcher &quot;lastIndex&quot; lastIndex true)</font>> color="black" fillcolor="white" style=filled]
  node15224 [shape=cds, label=<<font color="black">6:app __x7__ = (ToLength [? __x6__])</font>> color="black" fillcolor="white" style=filled]
  node15212 [shape=diamond, label=<<font color="black">(! (= __x0__ Object))</font>> color="black" fillcolor="white" style=filled]
  node15227 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">7:[? __x8__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15220 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">4:let flags = [? __x4__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15208 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node15223 [shape=cds, label=<<font color="black">6:app __x6__ = (Get R &quot;lastIndex&quot;)</font>> color="black" fillcolor="white" style=filled]
  node15228 [shape=diamond, label=<<font color="black">(contains flags &quot;g&quot;)</font>> color="black" fillcolor="white" style=filled]
  node15218 [shape=cds, label=<<font color="black">4:app __x3__ = (Get R &quot;flags&quot;)</font>> color="black" fillcolor="white" style=filled]
  node15230 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let global = false</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15213 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15209 [shape=cds, label=<<font color="black">app string = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node15219 [shape=cds, label=<<font color="black">4:app __x4__ = (ToString [? __x3__])</font>> color="black" fillcolor="white" style=filled]
  node15217 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">3:let C = [? __x2__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15207 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node15229 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let global = true</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15231 [shape=diamond, label=<<font color="black">(contains flags &quot;u&quot;)</font>> color="black" fillcolor="white" style=filled]
  node15210 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let R = this</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15235 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">12:return [! __x9__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15234 [shape=cds, label=<<font color="black">12:app __x9__ = (CreateRegExpStringIterator matcher S global fullUnicode)</font>> color="black" fillcolor="white" style=filled]
  node15232 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let fullUnicode = true</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15233 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let fullUnicode = false</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15216 [shape=cds, label=<<font color="black">3:app __x2__ = (SpeciesConstructor R INTRINSIC_RegExp)</font>> color="black" fillcolor="white" style=filled]
  node15211 -> node15212 [ color="black"]
  node15217 -> node15218 [ color="black"]
  node15210 -> node15211 [ color="black"]
  node15209 -> node15210 [ color="black"]
  node15225 -> node15226 [ color="black"]
  node15207 -> node15209 [ color="black"]
  node15221 -> node15222 [ color="black"]
  node15223 -> node15224 [ color="black"]
  node15218 -> node15219 [ color="black"]
  node15227 -> node15228 [ color="black"]
  node15232 -> node15234 [ color="black"]
  node15234 -> node15235 [ color="black"]
  node15222 -> node15223 [ color="black"]
  node15215 -> node15216 [ color="black"]
  node15220 -> node15221 [ color="black"]
  node15230 -> node15231 [ color="black"]
  node15228 -> node15229 [label=<<font color="black">true</font>> color="black"]
  node15228 -> node15230 [label=<<font color="black">false</font>> color="black"]
  node15212 -> node15213 [label=<<font color="black">true</font>> color="black"]
  node15212 -> node15214 [label=<<font color="black">false</font>> color="black"]
  node15224 -> node15225 [ color="black"]
  node15226 -> node15227 [ color="black"]
  node15233 -> node15234 [ color="black"]
  node15231 -> node15232 [label=<<font color="black">true</font>> color="black"]
  node15231 -> node15233 [label=<<font color="black">false</font>> color="black"]
  node15219 -> node15220 [ color="black"]
  node15214 -> node15215 [ color="black"]
  node15213 -> node15214 [ color="black"]
  node15229 -> node15231 [ color="black"]
  node15216 -> node15217 [ color="black"]
  node15235 -> node15208 [ color="black"]
}
