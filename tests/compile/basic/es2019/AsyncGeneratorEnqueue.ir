{
  assert (is-completion completion)
  app __x0__ = (NewPromiseCapability INTRINSIC_Promise)
  let promiseCapability = [! __x0__]
  app __x1__ = (Type generator)
  if (|| (! (= __x1__ Object)) (= generator.AsyncGeneratorState absent)) {
    let badGeneratorError = ??? "TypeError"
    app __x2__ = (Call promiseCapability.Reject undefined (new [badGeneratorError]))
    [! __x2__]
    return promiseCapability.Promise
  } else {}
  let queue = generator.AsyncGeneratorQueue
  let request = (new AsyncGeneratorRequest("Completion" -> completion, "Capability" -> promiseCapability))
  append request -> queue
  let state = generator.AsyncGeneratorState
  if (! (= state "executing")) {
    app __x3__ = (AsyncGeneratorResumeNext generator)
    [! __x3__]
  } else {}
  return promiseCapability.Promise
}