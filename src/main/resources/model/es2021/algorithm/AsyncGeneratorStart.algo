def AsyncGeneratorStart(generator, generatorBody) = {
  1:assert (= generator.AsyncGeneratorState undefined)
  2:let genContext = CONTEXT
  3:genContext.Generator = generator
  4:genContext.ResumeCont = () [=>] {
    5:??? "If id:{generatorBody} is a Parse Node , then in:{} out:{}"
    7:??? "Else , in:{} out:{}"
    11:if (= EXECUTION_STACK[(- EXECUTION_STACK.length 1i)] genContext) {
      let __x0__ = (- EXECUTION_STACK.length 1i)
      (pop EXECUTION_STACK __x0__)
    } else {}
    11:CONTEXT = EXECUTION_STACK[(- EXECUTION_STACK.length 1i)]
    12:generator.AsyncGeneratorState = CONST_completed
    14:if (&& (is-completion result) (= result.Type CONST_normal)) let resultValue = undefined else {
      15:let resultValue = result.Value
      16:if (! (= result.Type CONST_return)) {
        17:app __x1__ = (AsyncGeneratorReject generator resultValue)
        17:return [! __x1__]
      } else 10:{}
    }
    18:app __x2__ = (AsyncGeneratorResolve generator resultValue true)
    18:return [! __x2__]
  }
  19:generator.AsyncGeneratorContext = genContext
  20:generator.AsyncGeneratorState = CONST_suspendedStart
  21:generator.AsyncGeneratorQueue = (new [])
  22:return undefined
}
- id: "sec-asyncgeneratorstart"
- code:
          1. Assert: _generator_ is an AsyncGenerator instance.
          1. Assert: _generator_.[[AsyncGeneratorState]] is *undefined*.
          1. Let _genContext_ be the running execution context.
          1. Set the Generator component of _genContext_ to _generator_.
          1. Set the code evaluation state of _genContext_ such that when evaluation is resumed for that execution context the following steps will be performed:
            1. If _generatorBody_ is a Parse Node, then
              1. Let _result_ be the result of evaluating _generatorBody_.
            1. Else,
              1. Assert: _generatorBody_ is an Abstract Closure with no parameters.
              1. Let _result_ be _generatorBody_().
            1. Assert: If we return here, the async generator either threw an exception or performed either an implicit or explicit return.
            1. Remove _genContext_ from the execution context stack and restore the execution context that is at the top of the execution context stack as the running execution context.
            1. Set _generator_.[[AsyncGeneratorState]] to ~completed~.
            1. If _result_ is a normal completion, let _resultValue_ be *undefined*.
            1. Else,
              1. Let _resultValue_ be _result_.[[Value]].
              1. If _result_.[[Type]] is not ~return~, then
                1. Return ! AsyncGeneratorReject(_generator_, _resultValue_).
            1. Return ! AsyncGeneratorResolve(_generator_, _resultValue_, *true*).
          1. Set _generator_.[[AsyncGeneratorContext]] to _genContext_.
          1. Set _generator_.[[AsyncGeneratorState]] to ~suspendedStart~.
          1. Set _generator_.[[AsyncGeneratorQueue]] to a new empty List.
          1. Return *undefined*.