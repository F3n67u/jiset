digraph {
  node12221 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let O = [? __x0__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12225 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">2:let isRegExp = [? __x2__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12229 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">4:let searchStr = [? __x3__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12232 [shape=cds, label=<<font color="black">7:app __x5__ = (max pos 0i)</font>> color="black" fillcolor="white" style=filled]
  node12228 [shape=cds, label=<<font color="black">4:app __x3__ = (ToString searchString)</font>> color="black" fillcolor="white" style=filled]
  node12223 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">1:let S = [? __x1__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12218 [shape=cds, label=<<font color="black">app searchString = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node12233 [shape=cds, label=<<font color="black">7:app __x6__ = (min __x5__ len)</font>> color="black" fillcolor="white" style=filled]
  node12227 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12224 [shape=cds, label=<<font color="black">2:app __x2__ = (IsRegExp searchString)</font>> color="black" fillcolor="white" style=filled]
  node12234 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">7:let start = __x6__</td></tr>
      <tr><td align="left">8:let searchLength = searchStr.length</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12219 [shape=cds, label=<<font color="black">app position = (GetArgument argumentsList 1i)</font>> color="black" fillcolor="white" style=filled]
  node12226 [shape=diamond, label=<<font color="black">(= isRegExp true)</font>> color="black" fillcolor="white" style=filled]
  node12230 [shape=cds, label=<<font color="black">5:app __x4__ = (ToInteger position)</font>> color="black" fillcolor="white" style=filled]
  node12237 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">10:??? &quot;If the sequence of elements of id:{S} starting at id:{start} of length id:{searchLength} is the same as the full element sequence of id:{searchStr} , return value:{true} .&quot;</td></tr>
      <tr><td align="left">11:??? &quot;Otherwise , return value:{false} .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12236 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return false</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12217 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node12222 [shape=cds, label=<<font color="black">1:app __x1__ = (ToString O)</font>> color="black" fillcolor="white" style=filled]
  node12216 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node12231 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">5:let pos = [? __x4__]</td></tr>
      <tr><td align="left">6:let len = S.length</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12220 [shape=cds, label=<<font color="black">0:app __x0__ = (RequireObjectCoercible this)</font>> color="black" fillcolor="white" style=filled]
  node12235 [shape=diamond, label=<<font color="black">(&lt; len (+ searchLength start))</font>> color="black" fillcolor="white" style=filled]
  node12227 -> node12228 [ color="black"]
  node12216 -> node12218 [ color="black"]
  node12223 -> node12224 [ color="black"]
  node12231 -> node12232 [ color="black"]
  node12234 -> node12235 [ color="black"]
  node12233 -> node12234 [ color="black"]
  node12218 -> node12219 [ color="black"]
  node12236 -> node12237 [ color="black"]
  node12228 -> node12229 [ color="black"]
  node12230 -> node12231 [ color="black"]
  node12229 -> node12230 [ color="black"]
  node12219 -> node12220 [ color="black"]
  node12220 -> node12221 [ color="black"]
  node12226 -> node12227 [label=<<font color="black">true</font>> color="black"]
  node12226 -> node12228 [label=<<font color="black">false</font>> color="black"]
  node12222 -> node12223 [ color="black"]
  node12237 -> node12217 [ color="black"]
  node12232 -> node12233 [ color="black"]
  node12225 -> node12226 [ color="black"]
  node12235 -> node12236 [label=<<font color="black">true</font>> color="black"]
  node12235 -> node12237 [label=<<font color="black">false</font>> color="black"]
  node12224 -> node12225 [ color="black"]
  node12221 -> node12222 [ color="black"]
}
