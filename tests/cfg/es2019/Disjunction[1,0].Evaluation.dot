digraph {
  node13815 [shape=cds, label=<<font color="black">0:app __x1__ = (__x0__ direction)</font>> color="black" fillcolor="white" style=filled]
  node13818 [shape=cds, label=<<font color="black">1:app __x3__ = (__x2__ direction)</font>> color="black" fillcolor="white" style=filled]
  node13814 [shape=cds, label=<<font color="black">0:access __x0__ = (Alternative &quot;Evaluation&quot;)</font>> color="black" fillcolor="white" style=filled]
  node13813 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node13812 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node13816 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let m1 = __x1__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node13819 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">1:let m2 = __x3__</td></tr>
      <tr><td align="left">2:??? &quot;Return an internal Matcher closure that takes two arguments , a State id:{x} and a Continuation id:{c} , and performs the following steps when evaluated : in:{} out:{}&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node13817 [shape=cds, label=<<font color="black">1:access __x2__ = (Disjunction &quot;Evaluation&quot;)</font>> color="black" fillcolor="white" style=filled]
  node13815 -> node13816 [ color="black"]
  node13819 -> node13813 [ color="black"]
  node13812 -> node13814 [ color="black"]
  node13814 -> node13815 [ color="black"]
  node13818 -> node13819 [ color="black"]
  node13816 -> node13817 [ color="black"]
  node13817 -> node13818 [ color="black"]
}
