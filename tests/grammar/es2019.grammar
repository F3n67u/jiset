[Lexical Productions]
BinaryDigit:
  `0`
  `1`

BinaryDigits:
  BinaryDigit
  BinaryDigits BinaryDigit

BinaryIntegerLiteral:
  `0b` BinaryDigits
  `0B` BinaryDigits

BooleanLiteral:
  `true`
  `false`

CharacterEscapeSequence:
  SingleEscapeCharacter
  NonEscapeCharacter

CodePoint:
  <CodePoint>

Comment:
  MultiLineComment
  SingleLineComment

CommonToken:
  IdentifierName
  Punctuator
  NumericLiteral
  StringLiteral
  Template

DecimalDigit:
  `0`
  `1`
  `2`
  `3`
  `4`
  `5`
  `6`
  `7`
  `8`
  `9`

DecimalDigits:
  DecimalDigit
  DecimalDigits DecimalDigit

DecimalIntegerLiteral:
  `0`
  NonZeroDigit DecimalDigits?

DecimalLiteral:
  DecimalIntegerLiteral `.` DecimalDigits? ExponentPart?
  `.` DecimalDigits ExponentPart?
  DecimalIntegerLiteral ExponentPart?

DivPunctuator:
  `/`
  `/=`

DoubleStringCharacter:
  SourceCharacter but not `"` or `\` or LineTerminator
  <LS>
  <PS>
  `\` EscapeSequence
  LineContinuation

DoubleStringCharacters:
  DoubleStringCharacter DoubleStringCharacters?

EscapeCharacter:
  SingleEscapeCharacter
  DecimalDigit
  `x`
  `u`

EscapeSequence:
  CharacterEscapeSequence
  `0` [lookahead <! {DecimalDigit}]
  HexEscapeSequence
  UnicodeEscapeSequence

ExponentIndicator:
  `e`
  `E`

ExponentPart:
  ExponentIndicator SignedInteger

FutureReservedWord:
  `enum`

Hex4Digits:
  HexDigit HexDigit HexDigit HexDigit

HexDigit:
  `0`
  `1`
  `2`
  `3`
  `4`
  `5`
  `6`
  `7`
  `8`
  `9`
  `a`
  `b`
  `c`
  `d`
  `e`
  `f`
  `A`
  `B`
  `C`
  `D`
  `E`
  `F`

HexDigits:
  HexDigit
  HexDigits HexDigit

HexEscapeSequence:
  `x` HexDigit HexDigit

HexIntegerLiteral:
  `0x` HexDigits
  `0X` HexDigits

IdentifierName:
  IdentifierStart
  IdentifierName IdentifierPart

IdentifierPart:
  UnicodeIDContinue
  `$`
  `\` UnicodeEscapeSequence
  <ZWNJ>
  <ZWJ>

IdentifierStart:
  UnicodeIDStart
  `$`
  `_`
  `\` UnicodeEscapeSequence

InputElementDiv:
  WhiteSpace
  LineTerminator
  Comment
  CommonToken
  DivPunctuator
  RightBracePunctuator

InputElementRegExp:
  WhiteSpace
  LineTerminator
  Comment
  CommonToken
  RightBracePunctuator
  RegularExpressionLiteral

InputElementRegExpOrTemplateTail:
  WhiteSpace
  LineTerminator
  Comment
  CommonToken
  RegularExpressionLiteral
  TemplateSubstitutionTail

InputElementTemplateTail:
  WhiteSpace
  LineTerminator
  Comment
  CommonToken
  DivPunctuator
  TemplateSubstitutionTail

Keyword:
  `await`
  `break`
  `case`
  `catch`
  `class`
  `const`
  `continue`
  `debugger`
  `default`
  `delete`
  `do`
  `else`
  `export`
  `extends`
  `finally`
  `for`
  `function`
  `if`
  `import`
  `in`
  `instanceof`
  `new`
  `return`
  `super`
  `switch`
  `this`
  `throw`
  `try`
  `typeof`
  `var`
  `void`
  `while`
  `with`
  `yield`

LineContinuation:
  `\` LineTerminatorSequence

LineTerminator:
  <LF>
  <CR>
  <LS>
  <PS>

LineTerminatorSequence:
  <LF>
  <CR> [lookahead <! {<LF>}]
  <LS>
  <PS>
  <CR> <LF>

MultiLineComment:
  `/*` MultiLineCommentChars? `*/`

MultiLineCommentChars:
  MultiLineNotAsteriskChar MultiLineCommentChars?
  `*` PostAsteriskCommentChars?

MultiLineNotAsteriskChar:
  SourceCharacter but not `*`

MultiLineNotForwardSlashOrAsteriskChar:
  SourceCharacter but not `/` or `*`

NoSubstitutionTemplate:
  ``` TemplateCharacters? ```

NonEscapeCharacter:
  SourceCharacter but not EscapeCharacter or LineTerminator

NonZeroDigit:
  `1`
  `2`
  `3`
  `4`
  `5`
  `6`
  `7`
  `8`
  `9`

NotCodePoint:
  <NotCodePoint>

NotEscapeSequence:
  `0` DecimalDigit
  DecimalDigit but not `0`
  `x` [lookahead <! {HexDigit}]
  `x` HexDigit [lookahead <! {HexDigit}]
  `u` [lookahead <! {HexDigit}] [lookahead <! {`{`}]
  `u` HexDigit [lookahead <! {HexDigit}]
  `u` HexDigit HexDigit [lookahead <! {HexDigit}]
  `u` HexDigit HexDigit HexDigit [lookahead <! {HexDigit}]
  `u` `{` [lookahead <! {HexDigit}]
  `u` `{` NotCodePoint [lookahead <! {HexDigit}]
  `u` `{` CodePoint [lookahead <! {HexDigit}] [lookahead <! {`}`}]

NullLiteral:
  `null`

NumericLiteral:
  DecimalLiteral
  BinaryIntegerLiteral
  OctalIntegerLiteral
  HexIntegerLiteral

OctalDigit:
  `0`
  `1`
  `2`
  `3`
  `4`
  `5`
  `6`
  `7`

OctalDigits:
  OctalDigit
  OctalDigits OctalDigit

OctalIntegerLiteral:
  `0o` OctalDigits
  `0O` OctalDigits

PostAsteriskCommentChars:
  MultiLineNotForwardSlashOrAsteriskChar MultiLineCommentChars?
  `*` PostAsteriskCommentChars?

Punctuator:
  `{`
  `(`
  `)`
  `[`
  `]`
  `.`
  `...`
  `;`
  `,`
  `<`
  `>`
  `<=`
  `>=`
  `==`
  `!=`
  `===`
  `!==`
  `+`
  `-`
  `*`
  `%`
  `**`
  `++`
  `--`
  `<<`
  `>>`
  `>>>`
  `&`
  `|`
  `^`
  `!`
  `~`
  `&&`
  `||`
  `?`
  `:`
  `=`
  `+=`
  `-=`
  `*=`
  `%=`
  `**=`
  `<<=`
  `>>=`
  `>>>=`
  `&=`
  `|=`
  `^=`
  `=>`

RegularExpressionBackslashSequence:
  `\` RegularExpressionNonTerminator

RegularExpressionBody:
  RegularExpressionFirstChar RegularExpressionChars

RegularExpressionChar:
  RegularExpressionNonTerminator but not `\` or `/` or `[`
  RegularExpressionBackslashSequence
  RegularExpressionClass

RegularExpressionChars:
  [empty]
  RegularExpressionChars RegularExpressionChar

RegularExpressionClass:
  `[` RegularExpressionClassChars `]`

RegularExpressionClassChar:
  RegularExpressionNonTerminator but not `]` or `\`
  RegularExpressionBackslashSequence

RegularExpressionClassChars:
  [empty]
  RegularExpressionClassChars RegularExpressionClassChar

RegularExpressionFirstChar:
  RegularExpressionNonTerminator but not `*` or `\` or `/` or `[`
  RegularExpressionBackslashSequence
  RegularExpressionClass

RegularExpressionFlags:
  [empty]
  RegularExpressionFlags IdentifierPart

RegularExpressionLiteral:
  `/` RegularExpressionBody `/` RegularExpressionFlags

RegularExpressionNonTerminator:
  SourceCharacter but not LineTerminator

ReservedWord:
  Keyword
  FutureReservedWord
  NullLiteral
  BooleanLiteral

RightBracePunctuator:
  `}`

SignedInteger:
  DecimalDigits
  `+` DecimalDigits
  `-` DecimalDigits

SingleEscapeCharacter:
  `'`
  `"`
  `\`
  `b`
  `f`
  `n`
  `r`
  `t`
  `v`

SingleLineComment:
  `//` SingleLineCommentChars?

SingleLineCommentChar:
  SourceCharacter but not LineTerminator

SingleLineCommentChars:
  SingleLineCommentChar SingleLineCommentChars?

SingleStringCharacter:
  SourceCharacter but not `'` or `\` or LineTerminator
  <LS>
  <PS>
  `\` EscapeSequence
  LineContinuation

SingleStringCharacters:
  SingleStringCharacter SingleStringCharacters?

SourceCharacter:
  <UnicodeAny>

StringLiteral:
  `"` DoubleStringCharacters? `"`
  `'` SingleStringCharacters? `'`

Template:
  NoSubstitutionTemplate
  TemplateHead

TemplateCharacter:
  `$` [lookahead <! {`{`}]
  `\` EscapeSequence
  `\` NotEscapeSequence
  LineContinuation
  LineTerminatorSequence
  SourceCharacter but not ``` or `\` or `$` or LineTerminator

TemplateCharacters:
  TemplateCharacter TemplateCharacters?

TemplateHead:
  ``` TemplateCharacters? `${`

TemplateMiddle:
  `}` TemplateCharacters? `${`

TemplateSubstitutionTail:
  TemplateMiddle
  TemplateTail

TemplateTail:
  `}` TemplateCharacters? ```

UnicodeEscapeSequence:
  `u` Hex4Digits
  `u{` CodePoint `}`

UnicodeIDContinue:
  <UnicodeAny>

UnicodeIDStart:
  <UnicodeAny>

WhiteSpace:
  <TAB>
  <VT>
  <FF>
  <SP>
  <NBSP>
  <ZWNBSP>
  <USP>
[Syntactic Productions]
AdditiveExpression[Yield, Await]:
  MultiplicativeExpression[?Yield, ?Await]
  AdditiveExpression[?Yield, ?Await] `+` MultiplicativeExpression[?Yield, ?Await]
  AdditiveExpression[?Yield, ?Await] `-` MultiplicativeExpression[?Yield, ?Await]

Alternative[U, N]:
  [empty]
  Alternative[?U, ?N] Term[?U, ?N]

ArgumentList[Yield, Await]:
  AssignmentExpression[+In, ?Yield, ?Await]
  `...` AssignmentExpression[+In, ?Yield, ?Await]
  ArgumentList[?Yield, ?Await] `,` AssignmentExpression[+In, ?Yield, ?Await]
  ArgumentList[?Yield, ?Await] `,` `...` AssignmentExpression[+In, ?Yield, ?Await]

Arguments[Yield, Await]:
  `(` `)`
  `(` ArgumentList[?Yield, ?Await] `)`
  `(` ArgumentList[?Yield, ?Await] `,` `)`

ArrayAssignmentPattern[Yield, Await]:
  `[` Elision? AssignmentRestElement[?Yield, ?Await]? `]`
  `[` AssignmentElementList[?Yield, ?Await] `]`
  `[` AssignmentElementList[?Yield, ?Await] `,` Elision? AssignmentRestElement[?Yield, ?Await]? `]`

ArrayBindingPattern[Yield, Await]:
  `[` Elision? BindingRestElement[?Yield, ?Await]? `]`
  `[` BindingElementList[?Yield, ?Await] `]`
  `[` BindingElementList[?Yield, ?Await] `,` Elision? BindingRestElement[?Yield, ?Await]? `]`

ArrayLiteral[Yield, Await]:
  `[` Elision? `]`
  `[` ElementList[?Yield, ?Await] `]`
  `[` ElementList[?Yield, ?Await] `,` Elision? `]`

ArrowFormalParameters[Yield, Await]:
  `(` UniqueFormalParameters[?Yield, ?Await] `)`

ArrowFunction[In, Yield, Await]:
  ArrowParameters[?Yield, ?Await] [no LineTerminator here] `=>` ConciseBody[?In]

ArrowParameters[Yield, Await]:
  BindingIdentifier[?Yield, ?Await]
  CoverParenthesizedExpressionAndArrowParameterList[?Yield, ?Await]

Assertion[U, N]:
  `^`
  `$`
  `\` `b`
  `\` `B`
  `(` `?` `=` Disjunction[?U, ?N] `)`
  `(` `?` `!` Disjunction[?U, ?N] `)`
  `(` `?` `<=` Disjunction[?U, ?N] `)`
  `(` `?` `<!` Disjunction[?U, ?N] `)`

AssignmentElement[Yield, Await]:
  DestructuringAssignmentTarget[?Yield, ?Await] Initializer[+In, ?Yield, ?Await]?

AssignmentElementList[Yield, Await]:
  AssignmentElisionElement[?Yield, ?Await]
  AssignmentElementList[?Yield, ?Await] `,` AssignmentElisionElement[?Yield, ?Await]

AssignmentElisionElement[Yield, Await]:
  Elision? AssignmentElement[?Yield, ?Await]

AssignmentExpression[In, Yield, Await]:
  ConditionalExpression[?In, ?Yield, ?Await]
  [+Yield] YieldExpression[?In, ?Await]
  ArrowFunction[?In, ?Yield, ?Await]
  AsyncArrowFunction[?In, ?Yield, ?Await]
  LeftHandSideExpression[?Yield, ?Await] `=` AssignmentExpression[?In, ?Yield, ?Await]
  LeftHandSideExpression[?Yield, ?Await] AssignmentOperator AssignmentExpression[?In, ?Yield, ?Await]

AssignmentOperator:
  `*=`
  `/=`
  `%=`
  `+=`
  `-=`
  `<<=`
  `>>=`
  `>>>=`
  `&=`
  `^=`
  `|=`
  `**=`

AssignmentPattern[Yield, Await]:
  ObjectAssignmentPattern[?Yield, ?Await]
  ArrayAssignmentPattern[?Yield, ?Await]

AssignmentProperty[Yield, Await]:
  IdentifierReference[?Yield, ?Await] Initializer[+In, ?Yield, ?Await]?
  PropertyName[?Yield, ?Await] `:` AssignmentElement[?Yield, ?Await]

AssignmentPropertyList[Yield, Await]:
  AssignmentProperty[?Yield, ?Await]
  AssignmentPropertyList[?Yield, ?Await] `,` AssignmentProperty[?Yield, ?Await]

AssignmentRestElement[Yield, Await]:
  `...` DestructuringAssignmentTarget[?Yield, ?Await]

AssignmentRestProperty[Yield, Await]:
  `...` DestructuringAssignmentTarget[?Yield, ?Await]

AsyncArrowBindingIdentifier[Yield]:
  BindingIdentifier[?Yield, +Await]

AsyncArrowFunction[In, Yield, Await]:
  `async` [no LineTerminator here] AsyncArrowBindingIdentifier[?Yield] [no LineTerminator here] `=>` AsyncConciseBody[?In]
  CoverCallExpressionAndAsyncArrowHead[?Yield, ?Await] [no LineTerminator here] `=>` AsyncConciseBody[?In]

AsyncArrowHead:
  `async` [no LineTerminator here] ArrowFormalParameters[~Yield, +Await]

AsyncConciseBody[In]:
  [lookahead <! {`{`}] AssignmentExpression[?In, ~Yield, +Await]
  `{` AsyncFunctionBody `}`

AsyncFunctionBody:
  FunctionBody[~Yield, +Await]

AsyncFunctionDeclaration[Yield, Await, Default]:
  `async` [no LineTerminator here] `function` BindingIdentifier[?Yield, ?Await] `(` FormalParameters[~Yield, +Await] `)` `{` AsyncFunctionBody `}`
  [+Default] `async` [no LineTerminator here] `function` `(` FormalParameters[~Yield, +Await] `)` `{` AsyncFunctionBody `}`

AsyncFunctionExpression:
  `async` [no LineTerminator here] `function` `(` FormalParameters[~Yield, +Await] `)` `{` AsyncFunctionBody `}`
  `async` [no LineTerminator here] `function` BindingIdentifier[~Yield, +Await] `(` FormalParameters[~Yield, +Await] `)` `{` AsyncFunctionBody `}`

AsyncGeneratorBody:
  FunctionBody[+Yield, +Await]

AsyncGeneratorDeclaration[Yield, Await, Default]:
  `async` [no LineTerminator here] `function` `*` BindingIdentifier[?Yield, ?Await] `(` FormalParameters[+Yield, +Await] `)` `{` AsyncGeneratorBody `}`
  [+Default] `async` [no LineTerminator here] `function` `*` `(` FormalParameters[+Yield, +Await] `)` `{` AsyncGeneratorBody `}`

AsyncGeneratorExpression:
  `async` [no LineTerminator here] `function` `*` BindingIdentifier[+Yield, +Await]? `(` FormalParameters[+Yield, +Await] `)` `{` AsyncGeneratorBody `}`

AsyncGeneratorMethod[Yield, Await]:
  `async` [no LineTerminator here] `*` PropertyName[?Yield, ?Await] `(` UniqueFormalParameters[+Yield, +Await] `)` `{` AsyncGeneratorBody `}`

AsyncMethod[Yield, Await]:
  `async` [no LineTerminator here] PropertyName[?Yield, ?Await] `(` UniqueFormalParameters[~Yield, +Await] `)` `{` AsyncFunctionBody `}`

Atom[U, N]:
  PatternCharacter
  `.`
  `\` AtomEscape[?U, ?N]
  CharacterClass[?U]
  `(` GroupSpecifier[?U] Disjunction[?U, ?N] `)`
  `(` `?` `:` Disjunction[?U, ?N] `)`

AtomEscape[U, N]:
  DecimalEscape
  CharacterClassEscape[?U]
  CharacterEscape[?U]
  [+N] `k` GroupName[?U]

AwaitExpression[Yield]:
  `await` UnaryExpression[?Yield, +Await]

BindingElement[Yield, Await]:
  SingleNameBinding[?Yield, ?Await]
  BindingPattern[?Yield, ?Await] Initializer[+In, ?Yield, ?Await]?

BindingElementList[Yield, Await]:
  BindingElisionElement[?Yield, ?Await]
  BindingElementList[?Yield, ?Await] `,` BindingElisionElement[?Yield, ?Await]

BindingElisionElement[Yield, Await]:
  Elision? BindingElement[?Yield, ?Await]

BindingIdentifier[Yield, Await]:
  Identifier
  `yield`
  `await`

BindingList[In, Yield, Await]:
  LexicalBinding[?In, ?Yield, ?Await]
  BindingList[?In, ?Yield, ?Await] `,` LexicalBinding[?In, ?Yield, ?Await]

BindingPattern[Yield, Await]:
  ObjectBindingPattern[?Yield, ?Await]
  ArrayBindingPattern[?Yield, ?Await]

BindingProperty[Yield, Await]:
  SingleNameBinding[?Yield, ?Await]
  PropertyName[?Yield, ?Await] `:` BindingElement[?Yield, ?Await]

BindingPropertyList[Yield, Await]:
  BindingProperty[?Yield, ?Await]
  BindingPropertyList[?Yield, ?Await] `,` BindingProperty[?Yield, ?Await]

BindingRestElement[Yield, Await]:
  `...` BindingIdentifier[?Yield, ?Await]
  `...` BindingPattern[?Yield, ?Await]

BindingRestProperty[Yield, Await]:
  `...` BindingIdentifier[?Yield, ?Await]

BitwiseANDExpression[In, Yield, Await]:
  EqualityExpression[?In, ?Yield, ?Await]
  BitwiseANDExpression[?In, ?Yield, ?Await] `&` EqualityExpression[?In, ?Yield, ?Await]

BitwiseORExpression[In, Yield, Await]:
  BitwiseXORExpression[?In, ?Yield, ?Await]
  BitwiseORExpression[?In, ?Yield, ?Await] `|` BitwiseXORExpression[?In, ?Yield, ?Await]

BitwiseXORExpression[In, Yield, Await]:
  BitwiseANDExpression[?In, ?Yield, ?Await]
  BitwiseXORExpression[?In, ?Yield, ?Await] `^` BitwiseANDExpression[?In, ?Yield, ?Await]

Block[Yield, Await, Return]:
  `{` StatementList[?Yield, ?Await, ?Return]? `}`

BlockStatement[Yield, Await, Return]:
  Block[?Yield, ?Await, ?Return]

BreakStatement[Yield, Await]:
  `break` `;`
  `break` [no LineTerminator here] LabelIdentifier[?Yield, ?Await] `;`

BreakableStatement[Yield, Await, Return]:
  IterationStatement[?Yield, ?Await, ?Return]
  SwitchStatement[?Yield, ?Await, ?Return]

CallExpression[Yield, Await]:
  CoverCallExpressionAndAsyncArrowHead[?Yield, ?Await]
  SuperCall[?Yield, ?Await]
  CallExpression[?Yield, ?Await] Arguments[?Yield, ?Await]
  CallExpression[?Yield, ?Await] `[` Expression[+In, ?Yield, ?Await] `]`
  CallExpression[?Yield, ?Await] `.` IdentifierName
  CallExpression[?Yield, ?Await] TemplateLiteral[?Yield, ?Await, +Tagged]

CallMemberExpression[Yield, Await]:
  MemberExpression[?Yield, ?Await] Arguments[?Yield, ?Await]

CaseBlock[Yield, Await, Return]:
  `{` CaseClauses[?Yield, ?Await, ?Return]? `}`
  `{` CaseClauses[?Yield, ?Await, ?Return]? DefaultClause[?Yield, ?Await, ?Return] CaseClauses[?Yield, ?Await, ?Return]? `}`

CaseClause[Yield, Await, Return]:
  `case` Expression[+In, ?Yield, ?Await] `:` StatementList[?Yield, ?Await, ?Return]?

CaseClauses[Yield, Await, Return]:
  CaseClause[?Yield, ?Await, ?Return]
  CaseClauses[?Yield, ?Await, ?Return] CaseClause[?Yield, ?Await, ?Return]

Catch[Yield, Await, Return]:
  `catch` `(` CatchParameter[?Yield, ?Await] `)` Block[?Yield, ?Await, ?Return]
  `catch` Block[?Yield, ?Await, ?Return]

CatchParameter[Yield, Await]:
  BindingIdentifier[?Yield, ?Await]
  BindingPattern[?Yield, ?Await]

CharacterClass[U]:
  `[` [lookahead <! {`^`}] ClassRanges[?U] `]`
  `[` `^` ClassRanges[?U] `]`

CharacterClassEscape[U]:
  `d`
  `D`
  `s`
  `S`
  `w`
  `W`
  [+U] `p{` UnicodePropertyValueExpression `}`
  [+U] `P{` UnicodePropertyValueExpression `}`

CharacterEscape[U]:
  ControlEscape
  `c` ControlLetter
  `0` [lookahead <! {DecimalDigit}]
  HexEscapeSequence
  RegExpUnicodeEscapeSequence[?U]
  IdentityEscape[?U]

ClassAtom[U]:
  `-`
  ClassAtomNoDash[?U]

ClassAtomNoDash[U]:
  SourceCharacter but not `\` or `]` or `-`
  `\` ClassEscape[?U]

ClassBody[Yield, Await]:
  ClassElementList[?Yield, ?Await]

ClassDeclaration[Yield, Await, Default]:
  `class` BindingIdentifier[?Yield, ?Await] ClassTail[?Yield, ?Await]
  [+Default] `class` ClassTail[?Yield, ?Await]

ClassElement[Yield, Await]:
  MethodDefinition[?Yield, ?Await]
  `static` MethodDefinition[?Yield, ?Await]
  `;`

ClassElementList[Yield, Await]:
  ClassElement[?Yield, ?Await]
  ClassElementList[?Yield, ?Await] ClassElement[?Yield, ?Await]

ClassEscape[U]:
  `b`
  [+U] `-`
  CharacterClassEscape[?U]
  CharacterEscape[?U]

ClassExpression[Yield, Await]:
  `class` BindingIdentifier[?Yield, ?Await]? ClassTail[?Yield, ?Await]

ClassHeritage[Yield, Await]:
  `extends` LeftHandSideExpression[?Yield, ?Await]

ClassRanges[U]:
  [empty]
  NonemptyClassRanges[?U]

ClassTail[Yield, Await]:
  ClassHeritage[?Yield, ?Await]? `{` ClassBody[?Yield, ?Await]? `}`

ComputedPropertyName[Yield, Await]:
  `[` AssignmentExpression[+In, ?Yield, ?Await] `]`

ConciseBody[In]:
  [lookahead <! {`{`}] AssignmentExpression[?In, ~Yield, ~Await]
  `{` FunctionBody[~Yield, ~Await] `}`

ConditionalExpression[In, Yield, Await]:
  LogicalORExpression[?In, ?Yield, ?Await]
  LogicalORExpression[?In, ?Yield, ?Await] `?` AssignmentExpression[+In, ?Yield, ?Await] `:` AssignmentExpression[?In, ?Yield, ?Await]

ContinueStatement[Yield, Await]:
  `continue` `;`
  `continue` [no LineTerminator here] LabelIdentifier[?Yield, ?Await] `;`

ControlEscape:
  `f`
  `n`
  `r`
  `t`
  `v`

ControlLetter:
  `a`
  `b`
  `c`
  `d`
  `e`
  `f`
  `g`
  `h`
  `i`
  `j`
  `k`
  `l`
  `m`
  `n`
  `o`
  `p`
  `q`
  `r`
  `s`
  `t`
  `u`
  `v`
  `w`
  `x`
  `y`
  `z`
  `A`
  `B`
  `C`
  `D`
  `E`
  `F`
  `G`
  `H`
  `I`
  `J`
  `K`
  `L`
  `M`
  `N`
  `O`
  `P`
  `Q`
  `R`
  `S`
  `T`
  `U`
  `V`
  `W`
  `X`
  `Y`
  `Z`

CoverCallExpressionAndAsyncArrowHead[Yield, Await]:
  MemberExpression[?Yield, ?Await] Arguments[?Yield, ?Await]

CoverInitializedName[Yield, Await]:
  IdentifierReference[?Yield, ?Await] Initializer[+In, ?Yield, ?Await]

CoverParenthesizedExpressionAndArrowParameterList[Yield, Await]:
  `(` Expression[+In, ?Yield, ?Await] `)`
  `(` Expression[+In, ?Yield, ?Await] `,` `)`
  `(` `)`
  `(` `...` BindingIdentifier[?Yield, ?Await] `)`
  `(` `...` BindingPattern[?Yield, ?Await] `)`
  `(` Expression[+In, ?Yield, ?Await] `,` `...` BindingIdentifier[?Yield, ?Await] `)`
  `(` Expression[+In, ?Yield, ?Await] `,` `...` BindingPattern[?Yield, ?Await] `)`

DebuggerStatement:
  `debugger` `;`

DecimalEscape:
  NonZeroDigit DecimalDigits? [lookahead <! {DecimalDigit}]

Declaration[Yield, Await]:
  HoistableDeclaration[?Yield, ?Await, ~Default]
  ClassDeclaration[?Yield, ?Await, ~Default]
  LexicalDeclaration[+In, ?Yield, ?Await]

DefaultClause[Yield, Await, Return]:
  `default` `:` StatementList[?Yield, ?Await, ?Return]?

DestructuringAssignmentTarget[Yield, Await]:
  LeftHandSideExpression[?Yield, ?Await]

Disjunction[U, N]:
  Alternative[?U, ?N]
  Alternative[?U, ?N] `|` Disjunction[?U, ?N]

ElementList[Yield, Await]:
  Elision? AssignmentExpression[+In, ?Yield, ?Await]
  Elision? SpreadElement[?Yield, ?Await]
  ElementList[?Yield, ?Await] `,` Elision? AssignmentExpression[+In, ?Yield, ?Await]
  ElementList[?Yield, ?Await] `,` Elision? SpreadElement[?Yield, ?Await]

Elision:
  `,`
  Elision `,`

EmptyStatement:
  `;`

EqualityExpression[In, Yield, Await]:
  RelationalExpression[?In, ?Yield, ?Await]
  EqualityExpression[?In, ?Yield, ?Await] `==` RelationalExpression[?In, ?Yield, ?Await]
  EqualityExpression[?In, ?Yield, ?Await] `!=` RelationalExpression[?In, ?Yield, ?Await]
  EqualityExpression[?In, ?Yield, ?Await] `===` RelationalExpression[?In, ?Yield, ?Await]
  EqualityExpression[?In, ?Yield, ?Await] `!==` RelationalExpression[?In, ?Yield, ?Await]

ExponentiationExpression[Yield, Await]:
  UnaryExpression[?Yield, ?Await]
  UpdateExpression[?Yield, ?Await] `**` ExponentiationExpression[?Yield, ?Await]

ExportClause:
  `{` `}`
  `{` ExportsList `}`
  `{` ExportsList `,` `}`

ExportDeclaration:
  `export` `*` FromClause `;`
  `export` ExportClause FromClause `;`
  `export` ExportClause `;`
  `export` VariableStatement[~Yield, ~Await]
  `export` Declaration[~Yield, ~Await]
  `export` `default` HoistableDeclaration[~Yield, ~Await, +Default]
  `export` `default` ClassDeclaration[~Yield, ~Await, +Default]
  `export` `default` [lookahead <! {`function`, `async` [no LineTerminator here] `function`, `class`}] AssignmentExpression[+In, ~Yield, ~Await] `;`

ExportSpecifier:
  IdentifierName
  IdentifierName `as` IdentifierName

ExportsList:
  ExportSpecifier
  ExportsList `,` ExportSpecifier

Expression[In, Yield, Await]:
  AssignmentExpression[?In, ?Yield, ?Await]
  Expression[?In, ?Yield, ?Await] `,` AssignmentExpression[?In, ?Yield, ?Await]

ExpressionStatement[Yield, Await]:
  [lookahead <! {`{`, `function`, `async` [no LineTerminator here] `function`, `class`, `let` `[`}] Expression[+In, ?Yield, ?Await] `;`

Finally[Yield, Await, Return]:
  `finally` Block[?Yield, ?Await, ?Return]

ForBinding[Yield, Await]:
  BindingIdentifier[?Yield, ?Await]
  BindingPattern[?Yield, ?Await]

ForDeclaration[Yield, Await]:
  LetOrConst ForBinding[?Yield, ?Await]

FormalParameter[Yield, Await]:
  BindingElement[?Yield, ?Await]

FormalParameterList[Yield, Await]:
  FormalParameter[?Yield, ?Await]
  FormalParameterList[?Yield, ?Await] `,` FormalParameter[?Yield, ?Await]

FormalParameters[Yield, Await]:
  [empty]
  FunctionRestParameter[?Yield, ?Await]
  FormalParameterList[?Yield, ?Await]
  FormalParameterList[?Yield, ?Await] `,`
  FormalParameterList[?Yield, ?Await] `,` FunctionRestParameter[?Yield, ?Await]

FromClause:
  `from` ModuleSpecifier

FunctionBody[Yield, Await]:
  FunctionStatementList[?Yield, ?Await]

FunctionDeclaration[Yield, Await, Default]:
  `function` BindingIdentifier[?Yield, ?Await] `(` FormalParameters[~Yield, ~Await] `)` `{` FunctionBody[~Yield, ~Await] `}`
  [+Default] `function` `(` FormalParameters[~Yield, ~Await] `)` `{` FunctionBody[~Yield, ~Await] `}`

FunctionExpression:
  `function` BindingIdentifier[~Yield, ~Await]? `(` FormalParameters[~Yield, ~Await] `)` `{` FunctionBody[~Yield, ~Await] `}`

FunctionRestParameter[Yield, Await]:
  BindingRestElement[?Yield, ?Await]

FunctionStatementList[Yield, Await]:
  StatementList[?Yield, ?Await, +Return]?

GeneratorBody:
  FunctionBody[+Yield, ~Await]

GeneratorDeclaration[Yield, Await, Default]:
  `function` `*` BindingIdentifier[?Yield, ?Await] `(` FormalParameters[+Yield, ~Await] `)` `{` GeneratorBody `}`
  [+Default] `function` `*` `(` FormalParameters[+Yield, ~Await] `)` `{` GeneratorBody `}`

GeneratorExpression:
  `function` `*` BindingIdentifier[+Yield, ~Await]? `(` FormalParameters[+Yield, ~Await] `)` `{` GeneratorBody `}`

GeneratorMethod[Yield, Await]:
  `*` PropertyName[?Yield, ?Await] `(` UniqueFormalParameters[+Yield, ~Await] `)` `{` GeneratorBody `}`

GroupName[U]:
  `<` RegExpIdentifierName[?U] `>`

GroupSpecifier[U]:
  [empty]
  `?` GroupName[?U]

HoistableDeclaration[Yield, Await, Default]:
  FunctionDeclaration[?Yield, ?Await, ?Default]
  GeneratorDeclaration[?Yield, ?Await, ?Default]
  AsyncFunctionDeclaration[?Yield, ?Await, ?Default]
  AsyncGeneratorDeclaration[?Yield, ?Await, ?Default]

Identifier:
  IdentifierName but not ReservedWord

IdentifierReference[Yield, Await]:
  Identifier
  [~Yield] `yield`
  [~Await] `await`

IdentityEscape[U]:
  [+U] SyntaxCharacter
  [+U] `/`
  [~U] SourceCharacter but not UnicodeIDContinue

IfStatement[Yield, Await, Return]:
  `if` `(` Expression[+In, ?Yield, ?Await] `)` Statement[?Yield, ?Await, ?Return] `else` Statement[?Yield, ?Await, ?Return]
  `if` `(` Expression[+In, ?Yield, ?Await] `)` Statement[?Yield, ?Await, ?Return]

ImportClause:
  ImportedDefaultBinding
  NameSpaceImport
  NamedImports
  ImportedDefaultBinding `,` NameSpaceImport
  ImportedDefaultBinding `,` NamedImports

ImportDeclaration:
  `import` ImportClause FromClause `;`
  `import` ModuleSpecifier `;`

ImportSpecifier:
  ImportedBinding
  IdentifierName `as` ImportedBinding

ImportedBinding:
  BindingIdentifier[~Yield, ~Await]

ImportedDefaultBinding:
  ImportedBinding

ImportsList:
  ImportSpecifier
  ImportsList `,` ImportSpecifier

Initializer[In, Yield, Await]:
  `=` AssignmentExpression[?In, ?Yield, ?Await]

IterationStatement[Yield, Await, Return]:
  `do` Statement[?Yield, ?Await, ?Return] `while` `(` Expression[+In, ?Yield, ?Await] `)` `;`
  `while` `(` Expression[+In, ?Yield, ?Await] `)` Statement[?Yield, ?Await, ?Return]
  `for` `(` [lookahead <! {`let` `[`}] Expression[~In, ?Yield, ?Await]? `;` Expression[+In, ?Yield, ?Await]? `;` Expression[+In, ?Yield, ?Await]? `)` Statement[?Yield, ?Await, ?Return]
  `for` `(` `var` VariableDeclarationList[~In, ?Yield, ?Await] `;` Expression[+In, ?Yield, ?Await]? `;` Expression[+In, ?Yield, ?Await]? `)` Statement[?Yield, ?Await, ?Return]
  `for` `(` LexicalDeclaration[~In, ?Yield, ?Await] Expression[+In, ?Yield, ?Await]? `;` Expression[+In, ?Yield, ?Await]? `)` Statement[?Yield, ?Await, ?Return]
  `for` `(` [lookahead <! {`let` `[`}] LeftHandSideExpression[?Yield, ?Await] `in` Expression[+In, ?Yield, ?Await] `)` Statement[?Yield, ?Await, ?Return]
  `for` `(` `var` ForBinding[?Yield, ?Await] `in` Expression[+In, ?Yield, ?Await] `)` Statement[?Yield, ?Await, ?Return]
  `for` `(` ForDeclaration[?Yield, ?Await] `in` Expression[+In, ?Yield, ?Await] `)` Statement[?Yield, ?Await, ?Return]
  `for` `(` [lookahead <! {`let`}] LeftHandSideExpression[?Yield, ?Await] `of` AssignmentExpression[+In, ?Yield, ?Await] `)` Statement[?Yield, ?Await, ?Return]
  `for` `(` `var` ForBinding[?Yield, ?Await] `of` AssignmentExpression[+In, ?Yield, ?Await] `)` Statement[?Yield, ?Await, ?Return]
  `for` `(` ForDeclaration[?Yield, ?Await] `of` AssignmentExpression[+In, ?Yield, ?Await] `)` Statement[?Yield, ?Await, ?Return]
  [+Await] `for` `await` `(` [lookahead <! {`let`}] LeftHandSideExpression[?Yield, ?Await] `of` AssignmentExpression[+In, ?Yield, ?Await] `)` Statement[?Yield, ?Await, ?Return]
  [+Await] `for` `await` `(` `var` ForBinding[?Yield, ?Await] `of` AssignmentExpression[+In, ?Yield, ?Await] `)` Statement[?Yield, ?Await, ?Return]
  [+Await] `for` `await` `(` ForDeclaration[?Yield, ?Await] `of` AssignmentExpression[+In, ?Yield, ?Await] `)` Statement[?Yield, ?Await, ?Return]

LabelIdentifier[Yield, Await]:
  Identifier
  [~Yield] `yield`
  [~Await] `await`

LabelledItem[Yield, Await, Return]:
  Statement[?Yield, ?Await, ?Return]
  FunctionDeclaration[?Yield, ?Await, ~Default]

LabelledStatement[Yield, Await, Return]:
  LabelIdentifier[?Yield, ?Await] `:` LabelledItem[?Yield, ?Await, ?Return]

LeadSurrogate:
  <HexLeadSurrogate>

LeftHandSideExpression[Yield, Await]:
  NewExpression[?Yield, ?Await]
  CallExpression[?Yield, ?Await]

LetOrConst:
  `let`
  `const`

LexicalBinding[In, Yield, Await]:
  BindingIdentifier[?Yield, ?Await] Initializer[?In, ?Yield, ?Await]?
  BindingPattern[?Yield, ?Await] Initializer[?In, ?Yield, ?Await]

LexicalDeclaration[In, Yield, Await]:
  LetOrConst BindingList[?In, ?Yield, ?Await] `;`

Literal:
  NullLiteral
  BooleanLiteral
  NumericLiteral
  StringLiteral

LiteralPropertyName:
  IdentifierName
  StringLiteral
  NumericLiteral

LogicalANDExpression[In, Yield, Await]:
  BitwiseORExpression[?In, ?Yield, ?Await]
  LogicalANDExpression[?In, ?Yield, ?Await] `&&` BitwiseORExpression[?In, ?Yield, ?Await]

LogicalORExpression[In, Yield, Await]:
  LogicalANDExpression[?In, ?Yield, ?Await]
  LogicalORExpression[?In, ?Yield, ?Await] `||` LogicalANDExpression[?In, ?Yield, ?Await]

LoneUnicodePropertyNameOrValue:
  UnicodePropertyValueCharacters

MemberExpression[Yield, Await]:
  PrimaryExpression[?Yield, ?Await]
  MemberExpression[?Yield, ?Await] `[` Expression[+In, ?Yield, ?Await] `]`
  MemberExpression[?Yield, ?Await] `.` IdentifierName
  MemberExpression[?Yield, ?Await] TemplateLiteral[?Yield, ?Await, +Tagged]
  SuperProperty[?Yield, ?Await]
  MetaProperty
  `new` MemberExpression[?Yield, ?Await] Arguments[?Yield, ?Await]

MetaProperty:
  NewTarget

MethodDefinition[Yield, Await]:
  PropertyName[?Yield, ?Await] `(` UniqueFormalParameters[~Yield, ~Await] `)` `{` FunctionBody[~Yield, ~Await] `}`
  GeneratorMethod[?Yield, ?Await]
  AsyncMethod[?Yield, ?Await]
  AsyncGeneratorMethod[?Yield, ?Await]
  `get` PropertyName[?Yield, ?Await] `(` `)` `{` FunctionBody[~Yield, ~Await] `}`
  `set` PropertyName[?Yield, ?Await] `(` PropertySetParameterList `)` `{` FunctionBody[~Yield, ~Await] `}`

Module:
  ModuleBody?

ModuleBody:
  ModuleItemList

ModuleItem:
  ImportDeclaration
  ExportDeclaration
  StatementListItem[~Yield, ~Await, ~Return]

ModuleItemList:
  ModuleItem
  ModuleItemList ModuleItem

ModuleSpecifier:
  StringLiteral

MultiplicativeExpression[Yield, Await]:
  ExponentiationExpression[?Yield, ?Await]
  MultiplicativeExpression[?Yield, ?Await] MultiplicativeOperator ExponentiationExpression[?Yield, ?Await]

MultiplicativeOperator:
  `*`
  `/`
  `%`

NameSpaceImport:
  `*` `as` ImportedBinding

NamedImports:
  `{` `}`
  `{` ImportsList `}`
  `{` ImportsList `,` `}`

NewExpression[Yield, Await]:
  MemberExpression[?Yield, ?Await]
  `new` NewExpression[?Yield, ?Await]

NewTarget:
  `new` `.` `target`

NonSurrogate:
  <HexNonSurrogate>

NonemptyClassRanges[U]:
  ClassAtom[?U]
  ClassAtom[?U] NonemptyClassRangesNoDash[?U]
  ClassAtom[?U] `-` ClassAtom[?U] ClassRanges[?U]

NonemptyClassRangesNoDash[U]:
  ClassAtom[?U]
  ClassAtomNoDash[?U] NonemptyClassRangesNoDash[?U]
  ClassAtomNoDash[?U] `-` ClassAtom[?U] ClassRanges[?U]

ObjectAssignmentPattern[Yield, Await]:
  `{` `}`
  `{` AssignmentRestProperty[?Yield, ?Await] `}`
  `{` AssignmentPropertyList[?Yield, ?Await] `}`
  `{` AssignmentPropertyList[?Yield, ?Await] `,` AssignmentRestProperty[?Yield, ?Await]? `}`

ObjectBindingPattern[Yield, Await]:
  `{` `}`
  `{` BindingRestProperty[?Yield, ?Await] `}`
  `{` BindingPropertyList[?Yield, ?Await] `}`
  `{` BindingPropertyList[?Yield, ?Await] `,` BindingRestProperty[?Yield, ?Await]? `}`

ObjectLiteral[Yield, Await]:
  `{` `}`
  `{` PropertyDefinitionList[?Yield, ?Await] `}`
  `{` PropertyDefinitionList[?Yield, ?Await] `,` `}`

ParenthesizedExpression[Yield, Await]:
  `(` Expression[+In, ?Yield, ?Await] `)`

Pattern[U, N]:
  Disjunction[?U, ?N]

PatternCharacter:
  SourceCharacter but not SyntaxCharacter

PrimaryExpression[Yield, Await]:
  `this`
  IdentifierReference[?Yield, ?Await]
  Literal
  ArrayLiteral[?Yield, ?Await]
  ObjectLiteral[?Yield, ?Await]
  FunctionExpression
  ClassExpression[?Yield, ?Await]
  GeneratorExpression
  AsyncFunctionExpression
  AsyncGeneratorExpression
  RegularExpressionLiteral
  TemplateLiteral[?Yield, ?Await, ~Tagged]
  CoverParenthesizedExpressionAndArrowParameterList[?Yield, ?Await]

PropertyDefinition[Yield, Await]:
  IdentifierReference[?Yield, ?Await]
  CoverInitializedName[?Yield, ?Await]
  PropertyName[?Yield, ?Await] `:` AssignmentExpression[+In, ?Yield, ?Await]
  MethodDefinition[?Yield, ?Await]
  `...` AssignmentExpression[+In, ?Yield, ?Await]

PropertyDefinitionList[Yield, Await]:
  PropertyDefinition[?Yield, ?Await]
  PropertyDefinitionList[?Yield, ?Await] `,` PropertyDefinition[?Yield, ?Await]

PropertyName[Yield, Await]:
  LiteralPropertyName
  ComputedPropertyName[?Yield, ?Await]

PropertySetParameterList:
  FormalParameter[~Yield, ~Await]

Quantifier:
  QuantifierPrefix
  QuantifierPrefix `?`

QuantifierPrefix:
  `*`
  `+`
  `?`
  `{` DecimalDigits `}`
  `{` DecimalDigits `,` `}`
  `{` DecimalDigits `,` DecimalDigits `}`

RegExpIdentifierName[U]:
  RegExpIdentifierStart[?U]
  RegExpIdentifierName[?U] RegExpIdentifierPart[?U]

RegExpIdentifierPart[U]:
  UnicodeIDContinue
  `$`
  `\` RegExpUnicodeEscapeSequence[?U]
  <ZWNJ>
  <ZWJ>

RegExpIdentifierStart[U]:
  UnicodeIDStart
  `$`
  `_`
  `\` RegExpUnicodeEscapeSequence[?U]

RegExpUnicodeEscapeSequence[U]:
  [+U] `u` LeadSurrogate `\u` TrailSurrogate
  [+U] `u` LeadSurrogate
  [+U] `u` TrailSurrogate
  [+U] `u` NonSurrogate
  [~U] `u` Hex4Digits
  [+U] `u{` CodePoint `}`

RelationalExpression[In, Yield, Await]:
  ShiftExpression[?Yield, ?Await]
  RelationalExpression[?In, ?Yield, ?Await] `<` ShiftExpression[?Yield, ?Await]
  RelationalExpression[?In, ?Yield, ?Await] `>` ShiftExpression[?Yield, ?Await]
  RelationalExpression[?In, ?Yield, ?Await] `<=` ShiftExpression[?Yield, ?Await]
  RelationalExpression[?In, ?Yield, ?Await] `>=` ShiftExpression[?Yield, ?Await]
  RelationalExpression[?In, ?Yield, ?Await] `instanceof` ShiftExpression[?Yield, ?Await]
  [+In] RelationalExpression[+In, ?Yield, ?Await] `in` ShiftExpression[?Yield, ?Await]

ReturnStatement[Yield, Await]:
  `return` `;`
  `return` [no LineTerminator here] Expression[+In, ?Yield, ?Await] `;`

Script:
  ScriptBody?

ScriptBody:
  StatementList[~Yield, ~Await, ~Return]

ShiftExpression[Yield, Await]:
  AdditiveExpression[?Yield, ?Await]
  ShiftExpression[?Yield, ?Await] `<<` AdditiveExpression[?Yield, ?Await]
  ShiftExpression[?Yield, ?Await] `>>` AdditiveExpression[?Yield, ?Await]
  ShiftExpression[?Yield, ?Await] `>>>` AdditiveExpression[?Yield, ?Await]

SingleNameBinding[Yield, Await]:
  BindingIdentifier[?Yield, ?Await] Initializer[+In, ?Yield, ?Await]?

SpreadElement[Yield, Await]:
  `...` AssignmentExpression[+In, ?Yield, ?Await]

Statement[Yield, Await, Return]:
  BlockStatement[?Yield, ?Await, ?Return]
  VariableStatement[?Yield, ?Await]
  EmptyStatement
  ExpressionStatement[?Yield, ?Await]
  IfStatement[?Yield, ?Await, ?Return]
  BreakableStatement[?Yield, ?Await, ?Return]
  ContinueStatement[?Yield, ?Await]
  BreakStatement[?Yield, ?Await]
  [+Return] ReturnStatement[?Yield, ?Await]
  WithStatement[?Yield, ?Await, ?Return]
  LabelledStatement[?Yield, ?Await, ?Return]
  ThrowStatement[?Yield, ?Await]
  TryStatement[?Yield, ?Await, ?Return]
  DebuggerStatement

StatementList[Yield, Await, Return]:
  StatementListItem[?Yield, ?Await, ?Return]
  StatementList[?Yield, ?Await, ?Return] StatementListItem[?Yield, ?Await, ?Return]

StatementListItem[Yield, Await, Return]:
  Statement[?Yield, ?Await, ?Return]
  Declaration[?Yield, ?Await]

StrDecimalLiteral:
  StrUnsignedDecimalLiteral
  `+` StrUnsignedDecimalLiteral
  `-` StrUnsignedDecimalLiteral

StrNumericLiteral:
  StrDecimalLiteral
  BinaryIntegerLiteral
  OctalIntegerLiteral
  HexIntegerLiteral

StrUnsignedDecimalLiteral:
  `Infinity`
  DecimalDigits `.` DecimalDigits? ExponentPart?
  `.` DecimalDigits ExponentPart?
  DecimalDigits ExponentPart?

StrWhiteSpace:
  StrWhiteSpaceChar StrWhiteSpace?

StrWhiteSpaceChar:
  WhiteSpace
  LineTerminator

StringNumericLiteral:
  StrWhiteSpace?
  StrWhiteSpace? StrNumericLiteral StrWhiteSpace?

SubstitutionTemplate[Yield, Await, Tagged]:
  TemplateHead Expression[+In, ?Yield, ?Await] TemplateSpans[?Yield, ?Await, ?Tagged]

SuperCall[Yield, Await]:
  `super` Arguments[?Yield, ?Await]

SuperProperty[Yield, Await]:
  `super` `[` Expression[+In, ?Yield, ?Await] `]`
  `super` `.` IdentifierName

SwitchStatement[Yield, Await, Return]:
  `switch` `(` Expression[+In, ?Yield, ?Await] `)` CaseBlock[?Yield, ?Await, ?Return]

SyntaxCharacter:
  `^`
  `$`
  `\`
  `.`
  `*`
  `+`
  `?`
  `(`
  `)`
  `[`
  `]`
  `{`
  `}`
  `|`

TemplateLiteral[Yield, Await, Tagged]:
  NoSubstitutionTemplate
  SubstitutionTemplate[?Yield, ?Await, ?Tagged]

TemplateMiddleList[Yield, Await, Tagged]:
  TemplateMiddle Expression[+In, ?Yield, ?Await]
  TemplateMiddleList[?Yield, ?Await, ?Tagged] TemplateMiddle Expression[+In, ?Yield, ?Await]

TemplateSpans[Yield, Await, Tagged]:
  TemplateTail
  TemplateMiddleList[?Yield, ?Await, ?Tagged] TemplateTail

Term[U, N]:
  Assertion[?U, ?N]
  Atom[?U, ?N]
  Atom[?U, ?N] Quantifier

ThrowStatement[Yield, Await]:
  `throw` [no LineTerminator here] Expression[+In, ?Yield, ?Await] `;`

TrailSurrogate:
  <HexTrailSurrogate>

TryStatement[Yield, Await, Return]:
  `try` Block[?Yield, ?Await, ?Return] Catch[?Yield, ?Await, ?Return]
  `try` Block[?Yield, ?Await, ?Return] Finally[?Yield, ?Await, ?Return]
  `try` Block[?Yield, ?Await, ?Return] Catch[?Yield, ?Await, ?Return] Finally[?Yield, ?Await, ?Return]

UnaryExpression[Yield, Await]:
  UpdateExpression[?Yield, ?Await]
  `delete` UnaryExpression[?Yield, ?Await]
  `void` UnaryExpression[?Yield, ?Await]
  `typeof` UnaryExpression[?Yield, ?Await]
  `+` UnaryExpression[?Yield, ?Await]
  `-` UnaryExpression[?Yield, ?Await]
  `~` UnaryExpression[?Yield, ?Await]
  `!` UnaryExpression[?Yield, ?Await]
  [+Await] AwaitExpression[?Yield]

UnicodePropertyName:
  UnicodePropertyNameCharacters

UnicodePropertyNameCharacter:
  ControlLetter
  `_`

UnicodePropertyNameCharacters:
  UnicodePropertyNameCharacter UnicodePropertyNameCharacters?

UnicodePropertyValue:
  UnicodePropertyValueCharacters

UnicodePropertyValueCharacter:
  UnicodePropertyNameCharacter
  `0`
  `1`
  `2`
  `3`
  `4`
  `5`
  `6`
  `7`
  `8`
  `9`

UnicodePropertyValueCharacters:
  UnicodePropertyValueCharacter UnicodePropertyValueCharacters?

UnicodePropertyValueExpression:
  UnicodePropertyName `=` UnicodePropertyValue
  LoneUnicodePropertyNameOrValue

UniqueFormalParameters[Yield, Await]:
  FormalParameters[?Yield, ?Await]

UpdateExpression[Yield, Await]:
  LeftHandSideExpression[?Yield, ?Await]
  LeftHandSideExpression[?Yield, ?Await] [no LineTerminator here] `++`
  LeftHandSideExpression[?Yield, ?Await] [no LineTerminator here] `--`
  `++` UnaryExpression[?Yield, ?Await]
  `--` UnaryExpression[?Yield, ?Await]

VariableDeclaration[In, Yield, Await]:
  BindingIdentifier[?Yield, ?Await] Initializer[?In, ?Yield, ?Await]?
  BindingPattern[?Yield, ?Await] Initializer[?In, ?Yield, ?Await]

VariableDeclarationList[In, Yield, Await]:
  VariableDeclaration[?In, ?Yield, ?Await]
  VariableDeclarationList[?In, ?Yield, ?Await] `,` VariableDeclaration[?In, ?Yield, ?Await]

VariableStatement[Yield, Await]:
  `var` VariableDeclarationList[+In, ?Yield, ?Await] `;`

WithStatement[Yield, Await, Return]:
  `with` `(` Expression[+In, ?Yield, ?Await] `)` Statement[?Yield, ?Await, ?Return]

YieldExpression[In, Await]:
  `yield`
  `yield` [no LineTerminator here] AssignmentExpression[?In, +Yield, ?Await]
  `yield` [no LineTerminator here] `*` AssignmentExpression[?In, +Yield, ?Await]

uri:
  uriCharacters?

uriAlpha:
  `a`
  `b`
  `c`
  `d`
  `e`
  `f`
  `g`
  `h`
  `i`
  `j`
  `k`
  `l`
  `m`
  `n`
  `o`
  `p`
  `q`
  `r`
  `s`
  `t`
  `u`
  `v`
  `w`
  `x`
  `y`
  `z`
  `A`
  `B`
  `C`
  `D`
  `E`
  `F`
  `G`
  `H`
  `I`
  `J`
  `K`
  `L`
  `M`
  `N`
  `O`
  `P`
  `Q`
  `R`
  `S`
  `T`
  `U`
  `V`
  `W`
  `X`
  `Y`
  `Z`

uriCharacter:
  uriReserved
  uriUnescaped
  uriEscaped

uriCharacters:
  uriCharacter uriCharacters?

uriEscaped:
  `%` HexDigit HexDigit

uriMark:
  `-`
  `_`
  `.`
  `!`
  `~`
  `*`
  `'`
  `(`
  `)`

uriReserved:
  `;`
  `/`
  `?`
  `:`
  `@`
  `&`
  `=`
  `+`
  `$`
  `,`

uriUnescaped:
  uriAlpha
  DecimalDigit
  uriMark