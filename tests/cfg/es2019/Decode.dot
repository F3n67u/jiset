digraph {
  node11527 [shape=diamond, label=<<font color="black">(! (= C &quot;%&quot;))</font>> color="black" fillcolor="white" style=filled]
  node11533 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">39:R = (+ R S)</td></tr>
      <tr><td align="left">40:k = (+ k 1i)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11523 [shape=diamond, label=<<font color="black">true</font>> color="black" fillcolor="white" style=filled]
  node11528 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let S = C</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11520 [shape=cds, label=<<font color="black">app string = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node11532 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">11:??? &quot;If the code units at index ( id:{k} + 1 ) and ( id:{k} + 2 ) within id:{string} do not represent hexadecimal digits , throw a value:{URIError} exception .&quot;</td></tr>
      <tr><td align="left">12:??? &quot;Let id:{B} be the 8 - bit value represented by the two hexadecimal digits at index ( id:{k} + 1 ) and ( id:{k} + 2 ) .&quot;</td></tr>
      <tr><td align="left">13:k = (+ k 2i)</td></tr>
      <tr><td align="left">14:??? &quot;If the most significant bit in id:{B} is 0 , then in:{} out:{}&quot;</td></tr>
      <tr><td align="left">20:??? &quot;Else the most significant bit in id:{B} is 1 , in:{} out:{}&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11524 [shape=diamond, label=<<font color="black">(= k strLen)</font>> color="black" fillcolor="white" style=filled]
  node11525 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return R</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11531 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw URIError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11518 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node11530 [shape=diamond, label=<<font color="black">(! (&lt; (+ k 2i) strLen))</font>> color="black" fillcolor="white" style=filled]
  node11526 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">5:let C = string[k]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11522 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let strLen = string.length</td></tr>
      <tr><td align="left">1:let R = &quot;&quot;</td></tr>
      <tr><td align="left">2:let k = 0i</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11529 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">9:let start = k</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11519 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node11521 [shape=cds, label=<<font color="black">app reservedSet = (GetArgument argumentsList 1i)</font>> color="black" fillcolor="white" style=filled]
  node11523 -> node11524 [label=<<font color="black">true</font>> color="black"]
  node11523 -> node11519 [label=<<font color="black">false</font>> color="black"]
  node11520 -> node11521 [ color="black"]
  node11533 -> node11523 [ color="black"]
  node11521 -> node11522 [ color="black"]
  node11529 -> node11530 [ color="black"]
  node11526 -> node11527 [ color="black"]
  node11527 -> node11528 [label=<<font color="black">true</font>> color="black"]
  node11527 -> node11529 [label=<<font color="black">false</font>> color="black"]
  node11525 -> node11526 [ color="black"]
  node11528 -> node11533 [ color="black"]
  node11532 -> node11533 [ color="black"]
  node11524 -> node11525 [label=<<font color="black">true</font>> color="black"]
  node11524 -> node11526 [label=<<font color="black">false</font>> color="black"]
  node11531 -> node11532 [ color="black"]
  node11522 -> node11523 [ color="black"]
  node11530 -> node11531 [label=<<font color="black">true</font>> color="black"]
  node11530 -> node11532 [label=<<font color="black">false</font>> color="black"]
  node11518 -> node11520 [ color="black"]
}
