digraph {
  node16501 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">10:let viewByteLength = [? __x3__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16480 [shape=cds, label=<<font color="black">app buffer = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node16495 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">5:let bufferByteLength = buffer.ArrayBufferByteLength</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16497 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw RangeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16504 [shape=cds, label=<<font color="black">12:app __x4__ = (OrdinaryCreateFromConstructor NewTarget INTRINSIC_DataViewPrototype (new [&quot;DataView&quot;, &quot;ViewedArrayBuffer&quot;, &quot;ByteLength&quot;, &quot;ByteOffset&quot;]))</font>> color="black" fillcolor="white" style=filled]
  node16492 [shape=cds, label=<<font color="black">4:app __x2__ = (IsDetachedBuffer buffer)</font>> color="black" fillcolor="white" style=filled]
  node16486 [shape=diamond, label=<<font color="black">(! (= __x0__ Object))</font>> color="black" fillcolor="white" style=filled]
  node16493 [shape=diamond, label=<<font color="black">(= __x2__ true)</font>> color="black" fillcolor="white" style=filled]
  node16489 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16482 [shape=cds, label=<<font color="black">app byteLength = (GetArgument argumentsList 2i)</font>> color="black" fillcolor="white" style=filled]
  node16494 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16481 [shape=cds, label=<<font color="black">app byteOffset = (GetArgument argumentsList 1i)</font>> color="black" fillcolor="white" style=filled]
  node16498 [shape=diamond, label=<<font color="black">(|| (= byteLength absent) (= byteLength undefined))</font>> color="black" fillcolor="white" style=filled]
  node16491 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">3:let offset = [? __x1__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16488 [shape=diamond, label=<<font color="black">(= buffer.ArrayBufferData absent)</font>> color="black" fillcolor="white" style=filled]
  node16487 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16484 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16483 [shape=diamond, label=<<font color="black">(= NewTarget undefined)</font>> color="black" fillcolor="white" style=filled]
  node16505 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">12:let O = [? __x4__]</td></tr>
      <tr><td align="left">13:O.ViewedArrayBuffer = buffer</td></tr>
      <tr><td align="left">14:O.ByteLength = viewByteLength</td></tr>
      <tr><td align="left">15:O.ByteOffset = offset</td></tr>
      <tr><td align="left">16:return O</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16496 [shape=diamond, label=<<font color="black">(&lt; bufferByteLength offset)</font>> color="black" fillcolor="white" style=filled]
  node16503 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw RangeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16500 [shape=cds, label=<<font color="black">10:app __x3__ = (ToIndex byteLength)</font>> color="black" fillcolor="white" style=filled]
  node16499 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let viewByteLength = (- bufferByteLength offset)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16478 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node16485 [shape=cds, label=<<font color="black">1:app __x0__ = (Type buffer)</font>> color="black" fillcolor="white" style=filled]
  node16502 [shape=diamond, label=<<font color="black">(&lt; bufferByteLength (+ offset viewByteLength))</font>> color="black" fillcolor="white" style=filled]
  node16479 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node16490 [shape=cds, label=<<font color="black">3:app __x1__ = (ToIndex byteOffset)</font>> color="black" fillcolor="white" style=filled]
  node16487 -> node16488 [ color="black"]
  node16488 -> node16489 [label=<<font color="black">true</font>> color="black"]
  node16488 -> node16490 [label=<<font color="black">false</font>> color="black"]
  node16481 -> node16482 [ color="black"]
  node16493 -> node16494 [label=<<font color="black">true</font>> color="black"]
  node16493 -> node16495 [label=<<font color="black">false</font>> color="black"]
  node16504 -> node16505 [ color="black"]
  node16495 -> node16496 [ color="black"]
  node16486 -> node16487 [label=<<font color="black">true</font>> color="black"]
  node16486 -> node16488 [label=<<font color="black">false</font>> color="black"]
  node16489 -> node16490 [ color="black"]
  node16483 -> node16484 [label=<<font color="black">true</font>> color="black"]
  node16483 -> node16485 [label=<<font color="black">false</font>> color="black"]
  node16490 -> node16491 [ color="black"]
  node16499 -> node16504 [ color="black"]
  node16498 -> node16499 [label=<<font color="black">true</font>> color="black"]
  node16498 -> node16500 [label=<<font color="black">false</font>> color="black"]
  node16500 -> node16501 [ color="black"]
  node16502 -> node16503 [label=<<font color="black">true</font>> color="black"]
  node16502 -> node16504 [label=<<font color="black">false</font>> color="black"]
  node16492 -> node16493 [ color="black"]
  node16505 -> node16479 [ color="black"]
  node16497 -> node16498 [ color="black"]
  node16501 -> node16502 [ color="black"]
  node16480 -> node16481 [ color="black"]
  node16494 -> node16495 [ color="black"]
  node16485 -> node16486 [ color="black"]
  node16496 -> node16497 [label=<<font color="black">true</font>> color="black"]
  node16496 -> node16498 [label=<<font color="black">false</font>> color="black"]
  node16491 -> node16492 [ color="black"]
  node16503 -> node16504 [ color="black"]
  node16484 -> node16485 [ color="black"]
  node16478 -> node16480 [ color="black"]
  node16482 -> node16483 [ color="black"]
}
