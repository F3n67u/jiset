{
  assert (= (typeof S) String)
  let length = S.length
  app __x0__ = (Get R "lastIndex")
  app __x1__ = (ToLength [? __x0__])
  let lastIndex = [? __x1__]
  let flags = R.OriginalFlags
  if (contains flags "g") let global = true else let global = false
  if (contains flags "y") let sticky = true else let sticky = false
  if (&& (= global false) (= sticky false)) lastIndex = 0i else {}
  let matcher = R.RegExpMatcher
  if (contains flags "u") let fullUnicode = true else let fullUnicode = false
  let matchSucceeded = false
  while (= matchSucceeded false) {
    if (< length lastIndex) {
      if (|| (= global true) (= sticky true)) {
        app __x2__ = (Set R "lastIndex" 0i true)
        [? __x2__]
      } else {}
      return null
    } else {}
    app __x3__ = (matcher S lastIndex)
    let r = __x3__
    if (= r CONST_failure) {
      if (= sticky true) {
        app __x4__ = (Set R "lastIndex" 0i true)
        [? __x4__]
        return null
      } else {}
      app __x5__ = (AdvanceStringIndex S lastIndex fullUnicode)
      lastIndex = __x5__
    } else matchSucceeded = true
  }
  let e = r.endIndex
  if (= fullUnicode true) {
    ??? "id:{e} is an index into the id:{Input} character list , derived from id:{S} , matched by id:{matcher} . Let id:{eUTF} be the smallest index into id:{S} that corresponds to the character at element id:{e} of id:{Input} . If id:{e} is greater than or equal to the length of id:{Input} , then id:{eUTF} is the number of code units in id:{S} ."
    e = eUTF
  } else {}
  if (|| (= global true) (= sticky true)) {
    app __x6__ = (Set R "lastIndex" e true)
    [? __x6__]
  } else {}
  ??? "Let id:{n} be the length of id:{r} ' s id:{captures} List . ( This is the same value as link:{unhandled: sec-notation} ' s id:{NcapturingParens} . )"
  app __x7__ = (ArrayCreate (+ n 1i))
  let A = [! __x7__]
  let matchIndex = lastIndex
  app __x8__ = (CreateDataProperty A "index" matchIndex)
  [! __x8__]
  app __x9__ = (CreateDataProperty A "input" S)
  [! __x9__]
  ??? "Let id:{matchedSubstr} be the matched substring ( i . e . the portion of id:{S} between offset id:{lastIndex} inclusive and offset id:{e} exclusive ) ."
  app __x10__ = (CreateDataProperty A "0" matchedSubstr)
  [! __x10__]
  let i = (+ 0i 1i)
  let __x11__ = (+ n 1i)
  while (< i __x11__) {
    ??? "Let id:{captureI} be id:{i} sup:{th} element of id:{r} ' s id:{captures} List ."
    if (= captureI undefined) let capturedValue = undefined else if (= fullUnicode true) ??? "Let id:{capturedValue} be a String value whose code units are the UTF16Encoding of the code points of id:{captureI} ." else let capturedValue = captureI
    app __x12__ = (ToString i)
    app __x13__ = (CreateDataProperty A [! __x12__] capturedValue)
    [! __x13__]
  }
  return A
}