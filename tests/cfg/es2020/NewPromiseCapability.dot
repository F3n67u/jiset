digraph {
  node18210 [shape=cds, label=<<font color="black">8:app __x4__ = (IsCallable promiseCapability.Reject)</font>> color="black" fillcolor="white" style=filled]
  node18207 [shape=cds, label=<<font color="black">7:app __x3__ = (IsCallable promiseCapability.Resolve)</font>> color="black" fillcolor="white" style=filled]
  node18197 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node18212 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18213 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">9:promiseCapability.Promise = promise</td></tr>
      <tr><td align="left">10:return promiseCapability</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18199 [shape=cds, label=<<font color="black">0:app __x0__ = (IsConstructor C)</font>> color="black" fillcolor="white" style=filled]
  node18202 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">2:let promiseCapability = (new PromiseCapability(&quot;Promise&quot; -&gt; undefined, &quot;Resolve&quot; -&gt; undefined, &quot;Reject&quot; -&gt; undefined))</td></tr>
      <tr><td align="left">3:let steps = GetCapabilitiesExecutorFunctions</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18200 [shape=diamond, label=<<font color="black">(= __x0__ false)</font>> color="black" fillcolor="white" style=filled]
  node18209 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18204 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">4:let executor = [! __x1__]</td></tr>
      <tr><td align="left">5:executor.Capability = promiseCapability</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18205 [shape=cds, label=<<font color="black">6:app __x2__ = (Construct C (new [executor]))</font>> color="black" fillcolor="white" style=filled]
  node18208 [shape=diamond, label=<<font color="black">(= __x3__ false)</font>> color="black" fillcolor="white" style=filled]
  node18201 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18198 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node18211 [shape=diamond, label=<<font color="black">(= __x4__ false)</font>> color="black" fillcolor="white" style=filled]
  node18206 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">6:let promise = [? __x2__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18203 [shape=cds, label=<<font color="black">4:app __x1__ = (CreateBuiltinFunction steps (new [&quot;Capability&quot;]))</font>> color="black" fillcolor="white" style=filled]
  node18206 -> node18207 [ color="black"]
  node18210 -> node18211 [ color="black"]
  node18213 -> node18198 [ color="black"]
  node18207 -> node18208 [ color="black"]
  node18209 -> node18210 [ color="black"]
  node18202 -> node18203 [ color="black"]
  node18204 -> node18205 [ color="black"]
  node18200 -> node18201 [label=<<font color="black">true</font>> color="black"]
  node18200 -> node18202 [label=<<font color="black">false</font>> color="black"]
  node18212 -> node18213 [ color="black"]
  node18208 -> node18209 [label=<<font color="black">true</font>> color="black"]
  node18208 -> node18210 [label=<<font color="black">false</font>> color="black"]
  node18201 -> node18202 [ color="black"]
  node18197 -> node18199 [ color="black"]
  node18203 -> node18204 [ color="black"]
  node18211 -> node18212 [label=<<font color="black">true</font>> color="black"]
  node18211 -> node18213 [label=<<font color="black">false</font>> color="black"]
  node18205 -> node18206 [ color="black"]
  node18199 -> node18200 [ color="black"]
}
