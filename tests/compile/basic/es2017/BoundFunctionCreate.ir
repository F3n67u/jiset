{
  app __x0__ = (Type targetFunction)
  assert (= __x0__ Object)
  app __x1__ = (targetFunction.GetPrototypeOf targetFunction)
  if (is-completion __x1__) if (= __x1__.Type CONST_normal) __x1__ = __x1__.Value else return __x1__ else {}
  let proto = __x1__
  let obj = (new OrdinaryObject("SubMap" -> (new SubMap())))
  ??? "Set id:{obj} . [ [ Call ] ] as described in link:{} ."
  if (! (= targetFunction.Construct absent)) ??? "Set id:{obj} . [ [ Construct ] ] as described in link:{} ." else {}
  obj.Prototype = proto
  obj.Extensible = true
  obj.BoundTargetFunction = targetFunction
  obj.BoundThis = boundThis
  obj.BoundArguments = boundArgs
  app __x2__ = (WrapCompletion obj)
  return __x2__
}