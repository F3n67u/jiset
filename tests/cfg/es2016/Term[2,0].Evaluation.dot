digraph {
  node12330 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">1:let min = __x1__[0i]</td></tr>
      <tr><td align="left">1:let max = __x1__[1i]</td></tr>
      <tr><td align="left">1:let greedy = __x1__[2i]</td></tr>
      <tr><td align="left">2:??? &quot;If id:{max} is finite and less than id:{min} , throw a value:{SyntaxError} exception .&quot;</td></tr>
      <tr><td align="left">3:??? &quot;Let id:{parenIndex} be the number of left capturing parentheses in the entire regular expression that occur to the left of this production expansion ' s nt:{Term} . This is the total number of times the grammar:{Atom4, [Disjunction]} production is expanded prior to this production ' s nt:{Term} plus the total number of grammar:{Atom4, [Disjunction]} productions enclosing this nt:{Term} .&quot;</td></tr>
      <tr><td align="left">4:??? &quot;Let id:{parenCount} be the number of left capturing parentheses in the expansion of this production ' s nt:{Atom} . This is the total number of grammar:{Atom4, [Disjunction]} productions enclosed by this production ' s nt:{Atom} .&quot;</td></tr>
      <tr><td align="left">5:??? &quot;Return an internal Matcher closure that takes two arguments , a State id:{x} and a Continuation id:{c} , and performs the following steps when evaluated : in:{} out:{}&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12325 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node12329 [shape=cds, label=<<font color="black">1:access __x1__ = (Quantifier &quot;Evaluation&quot;)</font>> color="black" fillcolor="white" style=filled]
  node12327 [shape=cds, label=<<font color="black">0:access __x0__ = (Atom &quot;Evaluation&quot;)</font>> color="black" fillcolor="white" style=filled]
  node12326 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node12328 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let m = __x0__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12327 -> node12328 [ color="black"]
  node12329 -> node12330 [ color="black"]
  node12328 -> node12329 [ color="black"]
  node12325 -> node12327 [ color="black"]
  node12330 -> node12326 [ color="black"]
}
