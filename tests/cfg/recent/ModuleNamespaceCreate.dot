digraph {
  node3140 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node3142 [shape=cds, label=<<font color="black">4:app __x0__ = (MakeBasicObject internalSlotsList)</font>> color="black" fillcolor="white" style=filled]
  node3139 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node3141 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">1:assert (= module.Namespace undefined)</td></tr>
      <tr><td align="left">3:??? &quot;Let id:{internalSlotsList} be the internal slots listed in link:{unhandled: table-internal-slots-of-module-namespace-exotic-objects} .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node3143 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">4:let M = [! __x0__]</td></tr>
      <tr><td align="left">6:M.Prototype = null</td></tr>
      <tr><td align="left">7:M.Module = module</td></tr>
      <tr><td align="left">8:??? &quot;Let id:{sortedExports} be a List whose elements are the elements of id:{exports} ordered as if an Array of the same values had been sorted using % Array . prototype . sort % using value:{undefined} as id:{comparefn} .&quot;</td></tr>
      <tr><td align="left">9:M.Exports = sortedExports</td></tr>
      <tr><td align="left">10:??? &quot;Create own properties of id:{M} corresponding to the definitions in link:{unhandled: sec-module-namespace-objects} .&quot;</td></tr>
      <tr><td align="left">11:module.Namespace = M</td></tr>
      <tr><td align="left">12:return M</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node3139 -> node3141 [ color="black"]
  node3141 -> node3142 [ color="black"]
  node3142 -> node3143 [ color="black"]
  node3143 -> node3140 [ color="black"]
}
