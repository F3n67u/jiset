{
  app __x0__ = (ValidateSharedIntegerTypedArray typedArray true)
  let buffer = [? __x0__]
  app __x1__ = (ValidateAtomicAccess typedArray index)
  let i = [? __x1__]
  app __x2__ = (ToInt32 value)
  let v = [? __x2__]
  app __x3__ = (ToNumber timeout)
  let q = [? __x3__]
  if (= q NaN) let t = Infinity else {
    app __x4__ = (max q 0i)
    let t = __x4__
  }
  app __x5__ = (AgentCanSuspend)
  let B = __x5__
  if (= B false) throw TypeError else {}
  let block = buffer.ArrayBufferData
  let offset = typedArray.ByteOffset
  let indexedPosition = (+ (* i 4i) offset)
  app __x6__ = (GetWaiterList block indexedPosition)
  let WL = __x6__
  app __x7__ = (EnterCriticalSection WL)
  __x7__
  app __x8__ = (AtomicLoad typedArray i)
  let w = [! __x8__]
  if (! (= v w)) {
    app __x9__ = (LeaveCriticalSection WL)
    __x9__
    return "not-equal"
  } else {}
  app __x10__ = (AgentSignifier)
  let W = __x10__
  app __x11__ = (AddWaiter WL W)
  __x11__
  app __x12__ = (Suspend WL W t)
  let notified = __x12__
  if (= notified true) {} else {
    app __x13__ = (RemoveWaiter WL W)
    __x13__
  }
  app __x14__ = (LeaveCriticalSection WL)
  __x14__
  if (= notified true) return "ok" else {}
  return "timed-out"
}