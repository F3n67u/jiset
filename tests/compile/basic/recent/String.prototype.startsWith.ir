{
  app __x0__ = (RequireObjectCoercible this)
  if (is-completion __x0__) if (= __x0__.Type CONST_normal) __x0__ = __x0__.Value else return __x0__ else {}
  let O = __x0__
  app __x1__ = (ToString O)
  if (is-completion __x1__) if (= __x1__.Type CONST_normal) __x1__ = __x1__.Value else return __x1__ else {}
  let S = __x1__
  app __x2__ = (IsRegExp searchString)
  if (is-completion __x2__) if (= __x2__.Type CONST_normal) __x2__ = __x2__.Value else return __x2__ else {}
  let isRegExp = __x2__
  if (= isRegExp true) {
    app __x3__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_TypeError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
    return __x3__
  } else {}
  app __x4__ = (ToString searchString)
  if (is-completion __x4__) if (= __x4__.Type CONST_normal) __x4__ = __x4__.Value else return __x4__ else {}
  let searchStr = __x4__
  let len = S.length
  if (= position undefined) let pos = 0i else {
    app __x5__ = (ToIntegerOrInfinity position)
    if (is-completion __x5__) if (= __x5__.Type CONST_normal) __x5__ = __x5__.Value else return __x5__ else {}
    let pos = __x5__
  }
  ??? "Let id:{start} be the result of clamping id:{pos} between 0 and id:{len} ."
  let searchLength = searchStr.length
  if (== searchLength 0i) {
    app __x6__ = (WrapCompletion true)
    return __x6__
  } else {}
  let end = (+ start searchLength)
  if (< len end) {
    app __x7__ = (WrapCompletion false)
    return __x7__
  } else {}
  let __x8__ = ""
  let __x9__ = start
  while (< __x9__ (+ end 1i)) {
    access __x10__ = (S __x9__)
    __x8__ = (+ __x8__ __x10__)
    __x9__ = (+ __x9__ 1i)
  }
  let substring = __x8__
  app __x11__ = (SameValueNonNumeric substring searchStr)
  if (is-completion __x11__) if (= __x11__.Type CONST_normal) __x11__ = __x11__.Value else return __x11__ else {}
  app __x12__ = (WrapCompletion __x11__)
  return __x12__
}