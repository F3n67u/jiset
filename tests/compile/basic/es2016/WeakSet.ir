{
  if (= NewTarget undefined) {
    app __x0__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_TypeError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
    return __x0__
  } else {}
  app __x1__ = (OrdinaryCreateFromConstructor NewTarget INTRINSIC_WeakSetPrototype (new ["WeakSetData"]))
  if (is-completion __x1__) if (= __x1__.Type CONST_normal) __x1__ = __x1__.Value else return __x1__ else {}
  let set = __x1__
  set.WeakSetData = (new [])
  if (= iterable absent) let iterable = undefined else {}
  if (|| (= iterable undefined) (= iterable null)) let iter = undefined else {
    app __x2__ = (Get set "add")
    if (is-completion __x2__) if (= __x2__.Type CONST_normal) __x2__ = __x2__.Value else return __x2__ else {}
    let adder = __x2__
    app __x3__ = (IsCallable adder)
    if (= __x3__ false) {
      app __x4__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_TypeError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
      return __x4__
    } else {}
    app __x5__ = (GetIterator iterable)
    if (is-completion __x5__) if (= __x5__.Type CONST_normal) __x5__ = __x5__.Value else return __x5__ else {}
    let iter = __x5__
  }
  if (= iter undefined) {
    app __x6__ = (WrapCompletion set)
    return __x6__
  } else {}
  while true {
    app __x7__ = (IteratorStep iter)
    if (is-completion __x7__) if (= __x7__.Type CONST_normal) __x7__ = __x7__.Value else return __x7__ else {}
    let next = __x7__
    if (= next false) {
      app __x8__ = (WrapCompletion set)
      return __x8__
    } else {}
    app __x9__ = (IteratorValue next)
    if (is-completion __x9__) if (= __x9__.Type CONST_normal) __x9__ = __x9__.Value else return __x9__ else {}
    let nextValue = __x9__
    app __x10__ = (Call adder set (new [nextValue]))
    let status = __x10__
    app __x11__ = (IsAbruptCompletion status)
    if __x11__ {
      app __x12__ = (IteratorClose iter status)
      if (is-completion __x12__) if (= __x12__.Type CONST_normal) __x12__ = __x12__.Value else return __x12__ else {}
      app __x13__ = (WrapCompletion __x12__)
      return __x13__
    } else {}
  }
}