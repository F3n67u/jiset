{
  app start = (GetArgument argumentsList 0i)
  app end = (GetArgument argumentsList 1i)
  [0] app __x0__ = (ToObject this)
  [0] if (is-completion __x0__) if (= __x0__.Type CONST_normal) __x0__ = __x0__.Value else return __x0__ else [4] {}
  [0] let O = __x0__
  [1] app __x1__ = (LengthOfArrayLike O)
  [1] if (is-completion __x1__) if (= __x1__.Type CONST_normal) __x1__ = __x1__.Value else return __x1__ else [4] {}
  [1] let len = __x1__
  [2] app __x2__ = (ToInteger start)
  [2] if (is-completion __x2__) if (= __x2__.Type CONST_normal) __x2__ = __x2__.Value else return __x2__ else [4] {}
  [2] let relativeStart = __x2__
  [3] if (< relativeStart 0i) {
    app __x3__ = (max (+ len relativeStart) 0i)
    let k = __x3__
  } else {
    app __x4__ = (min relativeStart len)
    let k = __x4__
  }
  [4] if (= end undefined) let relativeEnd = len else {
    app __x5__ = (ToInteger end)
    if (is-completion __x5__) if (= __x5__.Type CONST_normal) __x5__ = __x5__.Value else return __x5__ else [4] {}
    let relativeEnd = __x5__
  }
  [5] if (< relativeEnd 0i) {
    app __x6__ = (max (+ len relativeEnd) 0i)
    let final = __x6__
  } else {
    app __x7__ = (min relativeEnd len)
    let final = __x7__
  }
  [6] app __x8__ = (max (- final k) 0i)
  [6] let count = __x8__
  [7] app __x9__ = (ArraySpeciesCreate O count)
  [7] if (is-completion __x9__) if (= __x9__.Type CONST_normal) __x9__ = __x9__.Value else return __x9__ else [4] {}
  [7] let A = __x9__
  [8] let n = 0i
  [9] while (< k final) {
    [10] app __x10__ = (ToString k)
    [10] if (is-completion __x10__) if (= __x10__.Type CONST_normal) __x10__ = __x10__.Value else return __x10__ else [4] {}
    [10] let Pk = __x10__
    [11] app __x11__ = (HasProperty O Pk)
    [11] if (is-completion __x11__) if (= __x11__.Type CONST_normal) __x11__ = __x11__.Value else return __x11__ else [4] {}
    [11] let kPresent = __x11__
    [12] if (= kPresent true) {
      [13] app __x12__ = (Get O Pk)
      [13] if (is-completion __x12__) if (= __x12__.Type CONST_normal) __x12__ = __x12__.Value else return __x12__ else [4] {}
      [13] let kValue = __x12__
      [14] app __x13__ = (ToString n)
      [14] if (is-completion __x13__) if (= __x13__.Type CONST_normal) __x13__ = __x13__.Value else return __x13__ else [4] {}
      [14] app __x14__ = (CreateDataPropertyOrThrow A __x13__ kValue)
      [14] if (is-completion __x14__) if (= __x14__.Type CONST_normal) __x14__ = __x14__.Value else return __x14__ else [4] {}
      [14] __x14__
    } else [4] {}
    [15] k = (+ k 1i)
    [16] n = (+ n 1i)
  }
  [17] app __x15__ = (Set A "length" n true)
  [17] if (is-completion __x15__) if (= __x15__.Type CONST_normal) __x15__ = __x15__.Value else return __x15__ else [4] {}
  [17] __x15__
  [18] app __x16__ = (WrapCompletion A)
  [18] return __x16__
}