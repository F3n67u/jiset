digraph {
  node10081 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let dn = __x28__[__x29__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10062 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let d = __x17__[__x18__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10084 [shape=cds, label=<<font color="black">39:app __x31__ = (envRec.CreateImmutableBinding envRec dn true)</font>> color="black" fillcolor="white" style=filled]
  node10094 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">__x29__ = (+ __x29__ 1i)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10068 [shape=cds, label=<<font color="black">32:app __x22__ = (envRec.CreateMutableBinding envRec dn false)</font>> color="black" fillcolor="white" style=filled]
  node10091 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">43:let fo = __x34__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10061 [shape=diamond, label=<<font color="black">(&lt; __x18__ __x17__.length)</font>> color="black" fillcolor="white" style=filled]
  node10039 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">__x6__ = (+ __x6__ 1i)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10093 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">44:__x35__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10049 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">21:[! __x12__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10022 [shape=diamond, label=<<font color="black">(! (= module.Environment undefined))</font>> color="black" fillcolor="white" style=filled]
  node10078 [shape=cds, label=<<font color="black">37:access __x27__ = (d &quot;BoundNames&quot;)</font>> color="black" fillcolor="white" style=filled]
  node10071 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">33:__x23__</td></tr>
      <tr><td align="left">34:append dn -&gt; declaredVarNames</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10042 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let in = __x8__[__x9__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10089 [shape=cds, label=<<font color="black">43:access __x33__ = (d &quot;InstantiateFunctionObject&quot;)</font>> color="black" fillcolor="white" style=filled]
  node10053 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">24:let resolution = [? __x14__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10074 [shape=cds, label=<<font color="black">35:access __x24__ = (code &quot;LexicallyScopedDeclarations&quot;)</font>> color="black" fillcolor="white" style=filled]
  node10025 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">5:let env = __x0__</td></tr>
      <tr><td align="left">6:module.Environment = env</td></tr>
      <tr><td align="left">7:let __x1__ = module.RequestedModules</td></tr>
      <tr><td align="left">7:let __x2__ = 0i</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10046 [shape=cds, label=<<font color="black">20:app __x11__ = (GetModuleNamespace importedModule)</font>> color="black" fillcolor="white" style=filled]
  node10085 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">39:[! __x31__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10070 [shape=cds, label=<<font color="black">33:app __x23__ = (envRec.InitializeBinding envRec dn undefined)</font>> color="black" fillcolor="white" style=filled]
  node10057 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">26:__x15__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10029 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">9:let requiredModule = [? __x3__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10038 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw SyntaxError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10067 [shape=diamond, label=<<font color="black">(! (contains declaredVarNames dn))</font>> color="black" fillcolor="white" style=filled]
  node10035 [shape=cds, label=<<font color="black">12:app __x7__ = (module.ResolveExport module e.ExportName (new []))</font>> color="black" fillcolor="white" style=filled]
  node10021 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let module = this</td></tr>
      <tr><td align="left">1:let realm = module.Realm</td></tr>
      <tr><td align="left">2:assert (! (= realm undefined))</td></tr>
      <tr><td align="left">3:let code = module.ECMAScriptCode</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10052 [shape=cds, label=<<font color="black">24:app __x14__ = (importedModule.ResolveExport importedModule in.ImportName (new []))</font>> color="black" fillcolor="white" style=filled]
  node10026 [shape=diamond, label=<<font color="black">(&lt; __x2__ __x1__.length)</font>> color="black" fillcolor="white" style=filled]
  node10047 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">20:let namespace = [? __x11__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10075 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">35:let lexDeclarations = __x24__</td></tr>
      <tr><td align="left">36:let __x25__ = lexDeclarations</td></tr>
      <tr><td align="left">36:let __x26__ = 0i</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10058 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">__x9__ = (+ __x9__ 1i)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10069 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">32:[! __x22__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10090 [shape=cds, label=<<font color="black">43:app __x34__ = (__x33__ env)</font>> color="black" fillcolor="white" style=filled]
  node10030 [shape=cds, label=<<font color="black">10:app __x4__ = (requiredModule.ModuleDeclarationInstantiation requiredModule)</font>> color="black" fillcolor="white" style=filled]
  node10079 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">37:let __x28__ = __x27__</td></tr>
      <tr><td align="left">37:let __x29__ = 0i</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10043 [shape=cds, label=<<font color="black">17:app __x10__ = (HostResolveImportedModule module in.ModuleRequest)</font>> color="black" fillcolor="white" style=filled]
  node10044 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">17:let importedModule = [! __x10__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10034 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let e = __x5__[__x6__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10083 [shape=diamond, label=<<font color="black">(= __x30__ true)</font>> color="black" fillcolor="white" style=filled]
  node10051 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">22:__x13__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10024 [shape=cds, label=<<font color="black">5:app __x0__ = (NewModuleEnvironment realm.GlobalEnv)</font>> color="black" fillcolor="white" style=filled]
  node10056 [shape=cds, label=<<font color="black">26:app __x15__ = (envRec.CreateImportBinding envRec in.LocalName resolution.Module resolution.BindingName)</font>> color="black" fillcolor="white" style=filled]
  node10088 [shape=diamond, label=<<font color="black">(|| (|| (is-instance-of d FunctionDeclaration) (is-instance-of d GeneratorDeclaration)) (is-instance-of d AsyncFunctionDeclaration))</font>> color="black" fillcolor="white" style=filled]
  node10066 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let dn = __x20__[__x21__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10037 [shape=diamond, label=<<font color="black">(|| (= resolution null) (= resolution &quot;ambiguous&quot;))</font>> color="black" fillcolor="white" style=filled]
  node10019 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node10020 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node10076 [shape=diamond, label=<<font color="black">(&lt; __x26__ __x25__.length)</font>> color="black" fillcolor="white" style=filled]
  node10063 [shape=cds, label=<<font color="black">30:access __x19__ = (d &quot;BoundNames&quot;)</font>> color="black" fillcolor="white" style=filled]
  node10031 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">10:[? __x4__]</td></tr>
      <tr><td align="left">__x2__ = (+ __x2__ 1i)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10080 [shape=diamond, label=<<font color="black">(&lt; __x29__ __x28__.length)</font>> color="black" fillcolor="white" style=filled]
  node10059 [shape=cds, label=<<font color="black">27:access __x16__ = (code &quot;VarScopedDeclarations&quot;)</font>> color="black" fillcolor="white" style=filled]
  node10027 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let required = __x1__[__x2__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10048 [shape=cds, label=<<font color="black">21:app __x12__ = (envRec.CreateImmutableBinding envRec in.LocalName true)</font>> color="black" fillcolor="white" style=filled]
  node10055 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw SyntaxError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10095 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">__x26__ = (+ __x26__ 1i)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10023 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return CONST_empty</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10028 [shape=cds, label=<<font color="black">9:app __x3__ = (HostResolveImportedModule module required)</font>> color="black" fillcolor="white" style=filled]
  node10082 [shape=cds, label=<<font color="black">40:access __x30__ = (d &quot;IsConstantDeclaration&quot;)</font>> color="black" fillcolor="white" style=filled]
  node10033 [shape=diamond, label=<<font color="black">(&lt; __x6__ __x5__.length)</font>> color="black" fillcolor="white" style=filled]
  node10072 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">__x21__ = (+ __x21__ 1i)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10077 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let d = __x25__[__x26__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10050 [shape=cds, label=<<font color="black">22:app __x13__ = (envRec.InitializeBinding envRec in.LocalName namespace)</font>> color="black" fillcolor="white" style=filled]
  node10040 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">15:let envRec = env.EnvironmentRecord</td></tr>
      <tr><td align="left">16:let __x8__ = module.ImportEntries</td></tr>
      <tr><td align="left">16:let __x9__ = 0i</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10065 [shape=diamond, label=<<font color="black">(&lt; __x21__ __x20__.length)</font>> color="black" fillcolor="white" style=filled]
  node10087 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">41:[! __x32__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10041 [shape=diamond, label=<<font color="black">(&lt; __x9__ __x8__.length)</font>> color="black" fillcolor="white" style=filled]
  node10054 [shape=diamond, label=<<font color="black">(|| (= resolution null) (= resolution &quot;ambiguous&quot;))</font>> color="black" fillcolor="white" style=filled]
  node10073 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">__x18__ = (+ __x18__ 1i)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10064 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">30:let __x20__ = __x19__</td></tr>
      <tr><td align="left">30:let __x21__ = 0i</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10036 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">12:let resolution = [? __x7__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10092 [shape=cds, label=<<font color="black">44:app __x35__ = (envRec.InitializeBinding envRec dn fo)</font>> color="black" fillcolor="white" style=filled]
  node10032 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">11:let __x5__ = module.IndirectExportEntries</td></tr>
      <tr><td align="left">11:let __x6__ = 0i</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10045 [shape=diamond, label=<<font color="black">(= in.ImportName &quot;*&quot;)</font>> color="black" fillcolor="white" style=filled]
  node10060 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">27:let varDeclarations = __x16__</td></tr>
      <tr><td align="left">28:let declaredVarNames = (new [])</td></tr>
      <tr><td align="left">29:let __x17__ = varDeclarations</td></tr>
      <tr><td align="left">29:let __x18__ = 0i</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10086 [shape=cds, label=<<font color="black">41:app __x32__ = (envRec.CreateMutableBinding envRec dn false)</font>> color="black" fillcolor="white" style=filled]
  node10096 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">45:return CONST_empty</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10022 -> node10023 [label=<<font color="black">true</font>> color="black"]
  node10022 -> node10024 [label=<<font color="black">false</font>> color="black"]
  node10033 -> node10034 [label=<<font color="black">true</font>> color="black"]
  node10033 -> node10040 [label=<<font color="black">false</font>> color="black"]
  node10079 -> node10080 [ color="black"]
  node10082 -> node10083 [ color="black"]
  node10019 -> node10021 [ color="black"]
  node10067 -> node10068 [label=<<font color="black">true</font>> color="black"]
  node10067 -> node10072 [label=<<font color="black">false</font>> color="black"]
  node10043 -> node10044 [ color="black"]
  node10037 -> node10038 [label=<<font color="black">true</font>> color="black"]
  node10037 -> node10039 [label=<<font color="black">false</font>> color="black"]
  node10074 -> node10075 [ color="black"]
  node10042 -> node10043 [ color="black"]
  node10035 -> node10036 [ color="black"]
  node10034 -> node10035 [ color="black"]
  node10046 -> node10047 [ color="black"]
  node10027 -> node10028 [ color="black"]
  node10080 -> node10081 [label=<<font color="black">true</font>> color="black"]
  node10080 -> node10095 [label=<<font color="black">false</font>> color="black"]
  node10061 -> node10062 [label=<<font color="black">true</font>> color="black"]
  node10061 -> node10074 [label=<<font color="black">false</font>> color="black"]
  node10054 -> node10055 [label=<<font color="black">true</font>> color="black"]
  node10054 -> node10056 [label=<<font color="black">false</font>> color="black"]
  node10064 -> node10065 [ color="black"]
  node10040 -> node10041 [ color="black"]
  node10078 -> node10079 [ color="black"]
  node10091 -> node10092 [ color="black"]
  node10071 -> node10072 [ color="black"]
  node10058 -> node10041 [ color="black"]
  node10030 -> node10031 [ color="black"]
  node10090 -> node10091 [ color="black"]
  node10065 -> node10066 [label=<<font color="black">true</font>> color="black"]
  node10065 -> node10073 [label=<<font color="black">false</font>> color="black"]
  node10084 -> node10085 [ color="black"]
  node10048 -> node10049 [ color="black"]
  node10031 -> node10026 [ color="black"]
  node10068 -> node10069 [ color="black"]
  node10053 -> node10054 [ color="black"]
  node10096 -> node10020 [ color="black"]
  node10070 -> node10071 [ color="black"]
  node10085 -> node10088 [ color="black"]
  node10025 -> node10026 [ color="black"]
  node10088 -> node10089 [label=<<font color="black">true</font>> color="black"]
  node10088 -> node10094 [label=<<font color="black">false</font>> color="black"]
  node10095 -> node10076 [ color="black"]
  node10076 -> node10077 [label=<<font color="black">true</font>> color="black"]
  node10076 -> node10096 [label=<<font color="black">false</font>> color="black"]
  node10038 -> node10039 [ color="black"]
  node10039 -> node10033 [ color="black"]
  node10077 -> node10078 [ color="black"]
  node10075 -> node10076 [ color="black"]
  node10063 -> node10064 [ color="black"]
  node10052 -> node10053 [ color="black"]
  node10086 -> node10087 [ color="black"]
  node10032 -> node10033 [ color="black"]
  node10073 -> node10061 [ color="black"]
  node10023 -> node10024 [ color="black"]
  node10024 -> node10025 [ color="black"]
  node10089 -> node10090 [ color="black"]
  node10069 -> node10070 [ color="black"]
  node10062 -> node10063 [ color="black"]
  node10021 -> node10022 [ color="black"]
  node10028 -> node10029 [ color="black"]
  node10045 -> node10046 [label=<<font color="black">true</font>> color="black"]
  node10045 -> node10052 [label=<<font color="black">false</font>> color="black"]
  node10050 -> node10051 [ color="black"]
  node10083 -> node10084 [label=<<font color="black">true</font>> color="black"]
  node10083 -> node10086 [label=<<font color="black">false</font>> color="black"]
  node10087 -> node10088 [ color="black"]
  node10094 -> node10080 [ color="black"]
  node10093 -> node10094 [ color="black"]
  node10066 -> node10067 [ color="black"]
  node10041 -> node10042 [label=<<font color="black">true</font>> color="black"]
  node10041 -> node10059 [label=<<font color="black">false</font>> color="black"]
  node10059 -> node10060 [ color="black"]
  node10047 -> node10048 [ color="black"]
  node10055 -> node10056 [ color="black"]
  node10026 -> node10027 [label=<<font color="black">true</font>> color="black"]
  node10026 -> node10032 [label=<<font color="black">false</font>> color="black"]
  node10029 -> node10030 [ color="black"]
  node10057 -> node10058 [ color="black"]
  node10060 -> node10061 [ color="black"]
  node10072 -> node10065 [ color="black"]
  node10051 -> node10058 [ color="black"]
  node10044 -> node10045 [ color="black"]
  node10092 -> node10093 [ color="black"]
  node10081 -> node10082 [ color="black"]
  node10056 -> node10057 [ color="black"]
  node10049 -> node10050 [ color="black"]
  node10036 -> node10037 [ color="black"]
}
