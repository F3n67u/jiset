{
  [1] app __x0__ = (Type input)
  [1] if (= __x0__ Object) {
    [2] if (= PreferredType absent) let hint = "default" else [0] {}
    [3] ??? "Else if id:{PreferredType} is hint String , let id:{hint} be code:{\"string\"} ."
    [4] ??? "Else id:{PreferredType} is hint Number , let id:{hint} be code:{\"number\"} ."
    [5] app __x1__ = (GetMethod input SYMBOL_toPrimitive)
    [5] if (is-completion __x1__) if (= __x1__.Type CONST_normal) __x1__ = __x1__.Value else return __x1__ else [0] {}
    [5] let exoticToPrim = __x1__
    [6] if (! (= exoticToPrim undefined)) {
      [7] app __x2__ = (Call exoticToPrim input (new [hint]))
      [7] if (is-completion __x2__) if (= __x2__.Type CONST_normal) __x2__ = __x2__.Value else return __x2__ else [0] {}
      [7] let result = __x2__
      [8] app __x3__ = (Type result)
      [8] if (! (= __x3__ Object)) {
        app __x4__ = (WrapCompletion result)
        return __x4__
      } else [0] {}
      [9] app __x5__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_TypeError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
      [9] return __x5__
    } else [0] {}
    [10] if (= hint "default") hint = "number" else [0] {}
    [11] app __x6__ = (OrdinaryToPrimitive input hint)
    [11] if (is-completion __x6__) if (= __x6__.Type CONST_normal) __x6__ = __x6__.Value else return __x6__ else [0] {}
    [11] app __x7__ = (WrapCompletion __x6__)
    [11] return __x7__
  } else [0] {}
  [12] app __x8__ = (WrapCompletion input)
  [12] return __x8__
}