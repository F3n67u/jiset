{
  [0] if true let strict = true else let strict = false
  [1] access __x0__ = (GLOBAL_context "LexicalEnvironment")
  [1] let scope = __x0__
  [2] app __x1__ = (AsyncGeneratorFunctionCreate CONST_Normal FormalParameters AsyncGeneratorBody scope strict)
  [2] if (is-completion __x1__) if (= __x1__.Type CONST_normal) __x1__ = __x1__.Value else return __x1__ else [33] {}
  [2] let closure = __x1__
  [3] app __x2__ = (ObjectCreate INTRINSIC_AsyncGeneratorPrototype)
  [3] if (is-completion __x2__) if (= __x2__.Type CONST_normal) __x2__ = __x2__.Value else return __x2__ else [33] {}
  [3] let prototype = __x2__
  [4] app __x3__ = (DefinePropertyOrThrow closure "prototype" (new PropertyDescriptor("Value" -> prototype, "Writable" -> true, "Enumerable" -> false, "Configurable" -> false)))
  [4] if (is-completion __x3__) if (= __x3__.Type CONST_normal) __x3__ = __x3__.Value else return __x3__ else [33] {}
  [4] __x3__
  [5] closure.SourceText = (get-syntax AsyncGeneratorExpression)
  [6] app __x4__ = (WrapCompletion closure)
  [6] return __x4__
}