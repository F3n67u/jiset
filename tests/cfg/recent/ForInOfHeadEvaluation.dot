digraph {
  node7669 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">9:let exprValue = [? __x5__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node7677 [shape=cds, label=<<font color="black">15:app __x8__ = (GetV iterator &quot;next&quot;)</font>> color="black" fillcolor="white" style=filled]
  node7663 [shape=cds, label=<<font color="black">5:app __x3__ = (newEnv.CreateMutableBinding newEnv name false)</font>> color="black" fillcolor="white" style=filled]
  node7682 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let iteratorHint = CONST_sync</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node7668 [shape=cds, label=<<font color="black">9:app __x5__ = (GetValue exprRef)</font>> color="black" fillcolor="white" style=filled]
  node7670 [shape=diamond, label=<<font color="black">(= iterationKind CONST_enumerate)</font>> color="black" fillcolor="white" style=filled]
  node7680 [shape=diamond, label=<<font color="black">(= iterationKind CONST_asyncDASHiterate)</font>> color="black" fillcolor="white" style=filled]
  node7666 [shape=cds, label=<<font color="black">7:access __x4__ = (expr &quot;Evaluation&quot;)</font>> color="black" fillcolor="white" style=filled]
  node7684 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">21:return [? __x9__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node7673 [shape=cds, label=<<font color="black">13:app __x6__ = (ToObject exprValue)</font>> color="black" fillcolor="white" style=filled]
  node7660 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">3:let newEnv = __x0__</td></tr>
      <tr><td align="left">4:let __x1__ = uninitializedBoundNames</td></tr>
      <tr><td align="left">4:let __x2__ = 0i</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node7683 [shape=cds, label=<<font color="black">21:app __x9__ = (GetIterator exprValue iteratorHint)</font>> color="black" fillcolor="white" style=filled]
  node7665 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">6:GLOBAL_context.LexicalEnvironment = newEnv</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node7674 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">13:let obj = [! __x6__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node7657 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let oldEnv = GLOBAL_context.LexicalEnvironment</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node7661 [shape=diamond, label=<<font color="black">(&lt; __x2__ __x1__.length)</font>> color="black" fillcolor="white" style=filled]
  node7678 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">15:let nextMethod = [! __x8__]</td></tr>
      <tr><td align="left">16:return (new Record(&quot;Iterator&quot; -&gt; iterator, &quot;NextMethod&quot; -&gt; nextMethod, &quot;Done&quot; -&gt; false))</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node7656 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node7671 [shape=diamond, label=<<font color="black">(|| (= exprValue undefined) (= exprValue null))</font>> color="black" fillcolor="white" style=filled]
  node7658 [shape=diamond, label=<<font color="black">(&lt; 0i uninitializedBoundNames.length)</font>> color="black" fillcolor="white" style=filled]
  node7664 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">5:[! __x3__]</td></tr>
      <tr><td align="left">__x2__ = (+ __x2__ 1i)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node7675 [shape=cds, label=<<font color="black">14:app __x7__ = (EnumerateObjectProperties obj)</font>> color="black" fillcolor="white" style=filled]
  node7681 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let iteratorHint = CONST_async</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node7679 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">18:assert (|| (= iterationKind CONST_iterate) (= iterationKind CONST_asyncDASHiterate))</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node7672 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return (new Completion(&quot;Type&quot; -&gt; CONST_break, &quot;Value&quot; -&gt; CONST_empty, &quot;Target&quot; -&gt; CONST_empty))</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node7655 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node7667 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">7:let exprRef = __x4__</td></tr>
      <tr><td align="left">8:GLOBAL_context.LexicalEnvironment = oldEnv</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node7662 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let name = __x1__[__x2__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node7659 [shape=cds, label=<<font color="black">3:app __x0__ = (NewDeclarativeEnvironment oldEnv)</font>> color="black" fillcolor="white" style=filled]
  node7676 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">14:let iterator = [? __x7__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node7674 -> node7675 [ color="black"]
  node7678 -> node7656 [ color="black"]
  node7661 -> node7662 [label=<<font color="black">true</font>> color="black"]
  node7661 -> node7665 [label=<<font color="black">false</font>> color="black"]
  node7675 -> node7676 [ color="black"]
  node7657 -> node7658 [ color="black"]
  node7662 -> node7663 [ color="black"]
  node7663 -> node7664 [ color="black"]
  node7673 -> node7674 [ color="black"]
  node7683 -> node7684 [ color="black"]
  node7671 -> node7672 [label=<<font color="black">true</font>> color="black"]
  node7671 -> node7673 [label=<<font color="black">false</font>> color="black"]
  node7658 -> node7659 [label=<<font color="black">true</font>> color="black"]
  node7658 -> node7666 [label=<<font color="black">false</font>> color="black"]
  node7677 -> node7678 [ color="black"]
  node7676 -> node7677 [ color="black"]
  node7672 -> node7673 [ color="black"]
  node7669 -> node7670 [ color="black"]
  node7680 -> node7681 [label=<<font color="black">true</font>> color="black"]
  node7680 -> node7682 [label=<<font color="black">false</font>> color="black"]
  node7655 -> node7657 [ color="black"]
  node7681 -> node7683 [ color="black"]
  node7670 -> node7671 [label=<<font color="black">true</font>> color="black"]
  node7670 -> node7679 [label=<<font color="black">false</font>> color="black"]
  node7668 -> node7669 [ color="black"]
  node7684 -> node7656 [ color="black"]
  node7667 -> node7668 [ color="black"]
  node7664 -> node7661 [ color="black"]
  node7660 -> node7661 [ color="black"]
  node7659 -> node7660 [ color="black"]
  node7682 -> node7683 [ color="black"]
  node7665 -> node7666 [ color="black"]
  node7666 -> node7667 [ color="black"]
  node7679 -> node7680 [ color="black"]
}
