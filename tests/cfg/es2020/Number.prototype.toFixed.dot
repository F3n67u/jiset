digraph {
  node12649 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw RangeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12653 [shape=diamond, label=<<font color="black">(&lt; x 0i)</font>> color="black" fillcolor="white" style=filled]
  node12645 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let x = [? __x0__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12641 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node12663 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">20:??? &quot;Let id:{a} be the first id:{k} - id:{f} code units of id:{m} , and let id:{b} be the remaining id:{f} code units of id:{m} .&quot;</td></tr>
      <tr><td align="left">21:m = (+ (+ a &quot;.&quot;) b)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12662 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">17:??? &quot;Let id:{z} be the String value consisting of id:{f} + 1 - id:{k} occurrences of the code unit 0x0030 ( DIGIT ZERO ) .&quot;</td></tr>
      <tr><td align="left">18:m = (+ z m)</td></tr>
      <tr><td align="left">19:k = (+ f 1i)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12658 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">12:??? &quot;Let id:{n} be an integer for which ℝ ( id:{n} ) &divide; 10 sub:{ℝ} sup:{ℝ ( id:{f} )} - ℝ ( id:{x} ) is as close to zero as possible . If there are two such id:{n} , pick the larger id:{n} .&quot;</td></tr>
      <tr><td align="left">13:??? &quot;If id:{n} = 0 , let id:{m} be the String value:{\&quot;0\&quot;} . Otherwise , let id:{m} be the String value consisting of the digits of the decimal representation of id:{n} ( in order , with no leading zeroes ) .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12643 [shape=cds, label=<<font color="black">app fractionDigits = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node12646 [shape=cds, label=<<font color="black">1:app __x1__ = (ToInteger fractionDigits)</font>> color="black" fillcolor="white" style=filled]
  node12661 [shape=diamond, label=<<font color="black">(! (&lt; f k))</font>> color="black" fillcolor="white" style=filled]
  node12642 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node12657 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">10:let m = [! __x2__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12664 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">22:return (+ s m)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12650 [shape=diamond, label=<<font color="black">(= x NaN)</font>> color="black" fillcolor="white" style=filled]
  node12660 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">15:let k = m.length</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12654 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">7:s = &quot;-&quot;</td></tr>
      <tr><td align="left">8:x = (- x)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12651 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return &quot;NaN&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12656 [shape=cds, label=<<font color="black">10:app __x2__ = (ToString x)</font>> color="black" fillcolor="white" style=filled]
  node12655 [shape=diamond, label=<<font color="black">(! (&lt; x (** 10.0 21i)))</font>> color="black" fillcolor="white" style=filled]
  node12644 [shape=cds, label=<<font color="black">0:app __x0__ = (thisNumberValue this)</font>> color="black" fillcolor="white" style=filled]
  node12648 [shape=diamond, label=<<font color="black">(|| (&lt; f 0i) (&lt; 100i f))</font>> color="black" fillcolor="white" style=filled]
  node12659 [shape=diamond, label=<<font color="black">(! (== f 0i))</font>> color="black" fillcolor="white" style=filled]
  node12647 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">1:let f = [? __x1__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12652 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">5:let s = &quot;&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12656 -> node12657 [ color="black"]
  node12663 -> node12664 [ color="black"]
  node12650 -> node12651 [label=<<font color="black">true</font>> color="black"]
  node12650 -> node12652 [label=<<font color="black">false</font>> color="black"]
  node12647 -> node12648 [ color="black"]
  node12653 -> node12654 [label=<<font color="black">true</font>> color="black"]
  node12653 -> node12655 [label=<<font color="black">false</font>> color="black"]
  node12664 -> node12642 [ color="black"]
  node12654 -> node12655 [ color="black"]
  node12660 -> node12661 [ color="black"]
  node12645 -> node12646 [ color="black"]
  node12646 -> node12647 [ color="black"]
  node12649 -> node12650 [ color="black"]
  node12651 -> node12652 [ color="black"]
  node12641 -> node12643 [ color="black"]
  node12648 -> node12649 [label=<<font color="black">true</font>> color="black"]
  node12648 -> node12650 [label=<<font color="black">false</font>> color="black"]
  node12662 -> node12663 [ color="black"]
  node12661 -> node12662 [label=<<font color="black">true</font>> color="black"]
  node12661 -> node12663 [label=<<font color="black">false</font>> color="black"]
  node12655 -> node12656 [label=<<font color="black">true</font>> color="black"]
  node12655 -> node12658 [label=<<font color="black">false</font>> color="black"]
  node12657 -> node12664 [ color="black"]
  node12652 -> node12653 [ color="black"]
  node12658 -> node12659 [ color="black"]
  node12643 -> node12644 [ color="black"]
  node12659 -> node12660 [label=<<font color="black">true</font>> color="black"]
  node12659 -> node12664 [label=<<font color="black">false</font>> color="black"]
  node12644 -> node12645 [ color="black"]
}
