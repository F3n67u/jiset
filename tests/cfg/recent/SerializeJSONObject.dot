digraph {
  node18678 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">12:let member = __x4__</td></tr>
      <tr><td align="left">13:member = (+ member &quot;:&quot;)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18674 [shape=cds, label=<<font color="black">10:app __x3__ = (SerializeJSONProperty state P value)</font>> color="black" fillcolor="white" style=filled]
  node18681 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">16:member = (+ member strP)</td></tr>
      <tr><td align="left">17:append member -&gt; partial</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18664 [shape=diamond, label=<<font color="black">(contains state.Stack value)</font>> color="black" fillcolor="white" style=filled]
  node18677 [shape=cds, label=<<font color="black">12:app __x4__ = (QuoteJSONString P)</font>> color="black" fillcolor="white" style=filled]
  node18682 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">__x2__ = (+ __x2__ 1i)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18665 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18686 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">22:??? &quot;Let id:{properties} be the String value formed by concatenating all the element Strings of id:{partial} with each adjacent pair of Strings separated with the code unit 0x002C ( COMMA ) . A comma is not inserted either before the first String or after the last String .&quot;</td></tr>
      <tr><td align="left">23:let final = (+ (+ &quot;{&quot; properties) &quot;}&quot;)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18676 [shape=diamond, label=<<font color="black">(! (= strP undefined))</font>> color="black" fillcolor="white" style=filled]
  node18679 [shape=diamond, label=<<font color="black">(! (= state.Gap &quot;&quot;))</font>> color="black" fillcolor="white" style=filled]
  node18662 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node18683 [shape=diamond, label=<<font color="black">(= partial.length 0i)</font>> color="black" fillcolor="white" style=filled]
  node18675 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">10:let strP = [? __x3__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18667 [shape=diamond, label=<<font color="black">(! (= state.PropertyList undefined))</font>> color="black" fillcolor="white" style=filled]
  node18684 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let final = &quot;{}&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18671 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">8:let partial = (new [])</td></tr>
      <tr><td align="left">9:let __x1__ = K</td></tr>
      <tr><td align="left">9:let __x2__ = 0i</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18688 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">28:??? &quot;Remove the last element of id:{state} . [ [ Stack ] ] .&quot;</td></tr>
      <tr><td align="left">29:state.Indent = stepback</td></tr>
      <tr><td align="left">30:return final</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18673 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let P = __x1__[__x2__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18668 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let K = state.PropertyList</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18685 [shape=diamond, label=<<font color="black">(= state.Gap &quot;&quot;)</font>> color="black" fillcolor="white" style=filled]
  node18672 [shape=diamond, label=<<font color="black">(&lt; __x2__ __x1__.length)</font>> color="black" fillcolor="white" style=filled]
  node18663 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node18680 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">member = (+ member &quot; &quot;)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18669 [shape=cds, label=<<font color="black">7:app __x0__ = (EnumerableOwnPropertyNames value CONST_key)</font>> color="black" fillcolor="white" style=filled]
  node18666 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">1:append value -&gt; state.Stack</td></tr>
      <tr><td align="left">2:let stepback = state.Indent</td></tr>
      <tr><td align="left">3:state.Indent = (+ state.Indent state.Gap)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18687 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">25:let separator = (+ (+ &quot;,&quot; &quot;\n&quot;) state.Indent)</td></tr>
      <tr><td align="left">26:??? &quot;Let id:{properties} be the String value formed by concatenating all the element Strings of id:{partial} with each adjacent pair of Strings separated with id:{separator} . The id:{separator} String is not inserted either before the first String or after the last String .&quot;</td></tr>
      <tr><td align="left">27:let final = (+ (+ (+ (+ (+ (+ &quot;{&quot; &quot;\n&quot;) state.Indent) properties) &quot;\n&quot;) stepback) &quot;}&quot;)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18670 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">7:let K = [? __x0__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18669 -> node18670 [ color="black"]
  node18665 -> node18666 [ color="black"]
  node18668 -> node18671 [ color="black"]
  node18670 -> node18671 [ color="black"]
  node18678 -> node18679 [ color="black"]
  node18687 -> node18688 [ color="black"]
  node18676 -> node18677 [label=<<font color="black">true</font>> color="black"]
  node18676 -> node18682 [label=<<font color="black">false</font>> color="black"]
  node18686 -> node18688 [ color="black"]
  node18682 -> node18672 [ color="black"]
  node18664 -> node18665 [label=<<font color="black">true</font>> color="black"]
  node18664 -> node18666 [label=<<font color="black">false</font>> color="black"]
  node18662 -> node18664 [ color="black"]
  node18666 -> node18667 [ color="black"]
  node18684 -> node18688 [ color="black"]
  node18674 -> node18675 [ color="black"]
  node18683 -> node18684 [label=<<font color="black">true</font>> color="black"]
  node18683 -> node18685 [label=<<font color="black">false</font>> color="black"]
  node18673 -> node18674 [ color="black"]
  node18672 -> node18673 [label=<<font color="black">true</font>> color="black"]
  node18672 -> node18683 [label=<<font color="black">false</font>> color="black"]
  node18680 -> node18681 [ color="black"]
  node18675 -> node18676 [ color="black"]
  node18681 -> node18682 [ color="black"]
  node18677 -> node18678 [ color="black"]
  node18679 -> node18680 [label=<<font color="black">true</font>> color="black"]
  node18679 -> node18681 [label=<<font color="black">false</font>> color="black"]
  node18667 -> node18668 [label=<<font color="black">true</font>> color="black"]
  node18667 -> node18669 [label=<<font color="black">false</font>> color="black"]
  node18685 -> node18686 [label=<<font color="black">true</font>> color="black"]
  node18685 -> node18687 [label=<<font color="black">false</font>> color="black"]
  node18671 -> node18672 [ color="black"]
  node18688 -> node18663 [ color="black"]
}
