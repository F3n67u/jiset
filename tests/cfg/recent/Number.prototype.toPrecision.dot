digraph {
  node12629 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return [! __x3__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12625 [shape=cds, label=<<font color="black">2:app __x2__ = (ToIntegerOrInfinity precision)</font>> color="black" fillcolor="white" style=filled]
  node12638 [shape=diamond, label=<<font color="black">(|| (&lt; e -6i) (! (&lt; e p)))</font>> color="black" fillcolor="white" style=filled]
  node12623 [shape=cds, label=<<font color="black">app __x1__ = (ToString x)</font>> color="black" fillcolor="white" style=filled]
  node12645 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">28:??? &quot;Let id:{d} be the String value consisting of the digits of the decimal representation of id:{e} ( in order , with no leading zeroes ) .&quot;</td></tr>
      <tr><td align="left">29:return (+ (+ (+ (+ s m) &quot;e&quot;) c) d)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12628 [shape=cds, label=<<font color="black">app __x3__ = (PRIMITIVE[Number].toString x)</font>> color="black" fillcolor="white" style=filled]
  node12636 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">11:??? &quot;Let id:{m} be the String value consisting of id:{p} occurrences of the code unit 0x0030 ( DIGIT ZERO ) .&quot;</td></tr>
      <tr><td align="left">12:let e = 0i</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12624 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return [! __x1__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12631 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw RangeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12644 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">25:assert (&lt; e 0i)</td></tr>
      <tr><td align="left">26:let c = &quot;-&quot;</td></tr>
      <tr><td align="left">27:e = (- e)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12627 [shape=diamond, label=<<font color="black">(|| (= x Infinity) (= x -Infinity))</font>> color="black" fillcolor="white" style=filled]
  node12648 [shape=diamond, label=<<font color="black">(! (&lt; e 0i))</font>> color="black" fillcolor="white" style=filled]
  node12633 [shape=diamond, label=<<font color="black">(&lt; x 0i)</font>> color="black" fillcolor="white" style=filled]
  node12620 [shape=cds, label=<<font color="black">0:app __x0__ = (thisNumberValue this)</font>> color="black" fillcolor="white" style=filled]
  node12637 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">14:??? &quot;Let id:{e} and id:{n} be integers such that 10 sup:{id:{p} - 1} &le; id:{n} &lt; 10 sup:{id:{p}} and for which id:{n} &times; 10 sup:{id:{e} - id:{p} + 1} - id:{x} is as close to zero as possible . If there are two such sets of id:{e} and id:{n} , pick the id:{e} and id:{n} for which id:{n} &times; 10 sup:{id:{e} - id:{p} + 1} is larger .&quot;</td></tr>
      <tr><td align="left">15:??? &quot;Let id:{m} be the String value consisting of the digits of the decimal representation of id:{n} ( in order , with no leading zeroes ) .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12634 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">8:s = &quot;-&quot;</td></tr>
      <tr><td align="left">9:x = (- x)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12649 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">??? &quot;Set id:{m} to the string - concatenation of the first id:{e} + 1 code units of id:{m} , the code unit 0x002E ( FULL STOP ) , and the remaining id:{p} - ( id:{e} + 1 ) code units of id:{m} .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12617 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node12646 [shape=diamond, label=<<font color="black">(== e (- p 1i))</font>> color="black" fillcolor="white" style=filled]
  node12642 [shape=diamond, label=<<font color="black">(&lt; 0i e)</font>> color="black" fillcolor="white" style=filled]
  node12621 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let x = [? __x0__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12635 [shape=diamond, label=<<font color="black">(== x 0i)</font>> color="black" fillcolor="white" style=filled]
  node12650 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">??? &quot;Set id:{m} to the string - concatenation of the code unit 0x0030 ( DIGIT ZERO ) , the code unit 0x002E ( FULL STOP ) , - ( id:{e} + 1 ) occurrences of the code unit 0x0030 ( DIGIT ZERO ) , and the String id:{m} .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12640 [shape=diamond, label=<<font color="black">(! (== p 1i))</font>> color="black" fillcolor="white" style=filled]
  node12618 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node12639 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">17:assert (! (== e 0i))</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12622 [shape=diamond, label=<<font color="black">(= precision undefined)</font>> color="black" fillcolor="white" style=filled]
  node12632 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">5:x = x</td></tr>
      <tr><td align="left">6:let s = &quot;&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12641 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">19:??? &quot;Let id:{a} be the first code unit of id:{m} .&quot;</td></tr>
      <tr><td align="left">20:??? &quot;Let id:{b} be the other id:{p} - 1 code units of id:{m} .&quot;</td></tr>
      <tr><td align="left">21:m = (+ (+ a &quot;.&quot;) b)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12651 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">35:return (+ s m)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12619 [shape=cds, label=<<font color="black">app precision = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node12647 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return (+ s m)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12630 [shape=diamond, label=<<font color="black">(|| (&lt; p 1i) (&lt; 100i p))</font>> color="black" fillcolor="white" style=filled]
  node12626 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">2:let p = [? __x2__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12643 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let c = &quot;+&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12628 -> node12629 [ color="black"]
  node12626 -> node12627 [ color="black"]
  node12633 -> node12634 [label=<<font color="black">true</font>> color="black"]
  node12633 -> node12635 [label=<<font color="black">false</font>> color="black"]
  node12634 -> node12635 [ color="black"]
  node12644 -> node12645 [ color="black"]
  node12637 -> node12638 [ color="black"]
  node12650 -> node12651 [ color="black"]
  node12623 -> node12624 [ color="black"]
  node12643 -> node12645 [ color="black"]
  node12646 -> node12647 [label=<<font color="black">true</font>> color="black"]
  node12646 -> node12648 [label=<<font color="black">false</font>> color="black"]
  node12625 -> node12626 [ color="black"]
  node12617 -> node12619 [ color="black"]
  node12639 -> node12640 [ color="black"]
  node12621 -> node12622 [ color="black"]
  node12631 -> node12632 [ color="black"]
  node12636 -> node12646 [ color="black"]
  node12632 -> node12633 [ color="black"]
  node12648 -> node12649 [label=<<font color="black">true</font>> color="black"]
  node12648 -> node12650 [label=<<font color="black">false</font>> color="black"]
  node12630 -> node12631 [label=<<font color="black">true</font>> color="black"]
  node12630 -> node12632 [label=<<font color="black">false</font>> color="black"]
  node12641 -> node12642 [ color="black"]
  node12619 -> node12620 [ color="black"]
  node12647 -> node12648 [ color="black"]
  node12651 -> node12618 [ color="black"]
  node12642 -> node12643 [label=<<font color="black">true</font>> color="black"]
  node12642 -> node12644 [label=<<font color="black">false</font>> color="black"]
  node12638 -> node12639 [label=<<font color="black">true</font>> color="black"]
  node12638 -> node12646 [label=<<font color="black">false</font>> color="black"]
  node12635 -> node12636 [label=<<font color="black">true</font>> color="black"]
  node12635 -> node12637 [label=<<font color="black">false</font>> color="black"]
  node12620 -> node12621 [ color="black"]
  node12649 -> node12651 [ color="black"]
  node12629 -> node12630 [ color="black"]
  node12624 -> node12625 [ color="black"]
  node12640 -> node12641 [label=<<font color="black">true</font>> color="black"]
  node12640 -> node12642 [label=<<font color="black">false</font>> color="black"]
  node12622 -> node12623 [label=<<font color="black">true</font>> color="black"]
  node12622 -> node12625 [label=<<font color="black">false</font>> color="black"]
  node12627 -> node12628 [label=<<font color="black">true</font>> color="black"]
  node12627 -> node12630 [label=<<font color="black">false</font>> color="black"]
  node12645 -> node12646 [ color="black"]
}
