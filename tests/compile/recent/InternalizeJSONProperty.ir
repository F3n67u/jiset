{
  app holder = (GetArgument argumentsList 0i)
  app name = (GetArgument argumentsList 1i)
  app reviver = (GetArgument argumentsList 2i)
  [0] app __x0__ = (Get holder name)
  [0] if (is-completion __x0__) if (= __x0__.Type CONST_normal) __x0__ = __x0__.Value else return __x0__ else [7] {}
  [0] let val = __x0__
  [1] app __x1__ = (Type val)
  [1] if (= __x1__ Object) {
    [2] app __x2__ = (IsArray val)
    [2] if (is-completion __x2__) if (= __x2__.Type CONST_normal) __x2__ = __x2__.Value else return __x2__ else [7] {}
    [2] let isArray = __x2__
    [14] if (= isArray true) {
      [4] let I = 0i
      [5] app __x3__ = (LengthOfArrayLike val)
      [5] if (is-completion __x3__) if (= __x3__.Type CONST_normal) __x3__ = __x3__.Value else return __x3__ else [7] {}
      [5] let len = __x3__
      [6] while (< I len) {
        [7] ??? "Let id:{prop} be ! ToString ( 𝔽 ( id:{I} ) ) ."
        [8] app __x4__ = (InternalizeJSONProperty val prop reviver)
        [8] if (is-completion __x4__) if (= __x4__.Type CONST_normal) __x4__ = __x4__.Value else return __x4__ else [7] {}
        [8] let newElement = __x4__
        [11] if (= newElement undefined) {
          [10] app __x5__ = (val.Delete val prop)
          [10] if (is-completion __x5__) if (= __x5__.Type CONST_normal) __x5__ = __x5__.Value else return __x5__ else [7] {}
          [10] __x5__
        } else {
          [12] app __x6__ = (CreateDataProperty val prop newElement)
          [12] if (is-completion __x6__) if (= __x6__.Type CONST_normal) __x6__ = __x6__.Value else return __x6__ else [7] {}
          [12] __x6__
        }
        [13] I = (+ I 1i)
      }
    } else {
      [15] app __x7__ = (EnumerableOwnPropertyNames val CONST_key)
      [15] if (is-completion __x7__) if (= __x7__.Type CONST_normal) __x7__ = __x7__.Value else return __x7__ else [7] {}
      [15] let keys = __x7__
      [16] let __x8__ = keys
      [16] let __x9__ = 0i
      [16] while (< __x9__ __x8__.length) {
        let P = __x8__[__x9__]
        [17] app __x10__ = (InternalizeJSONProperty val P reviver)
        [17] if (is-completion __x10__) if (= __x10__.Type CONST_normal) __x10__ = __x10__.Value else return __x10__ else [7] {}
        [17] let newElement = __x10__
        [20] if (= newElement undefined) {
          [19] app __x11__ = (val.Delete val P)
          [19] if (is-completion __x11__) if (= __x11__.Type CONST_normal) __x11__ = __x11__.Value else return __x11__ else [7] {}
          [19] __x11__
        } else {
          [21] app __x12__ = (CreateDataProperty val P newElement)
          [21] if (is-completion __x12__) if (= __x12__.Type CONST_normal) __x12__ = __x12__.Value else return __x12__ else [7] {}
          [21] __x12__
        }
        __x9__ = (+ __x9__ 1i)
      }
    }
  } else [7] {}
  [22] app __x13__ = (Call reviver holder (new [name, val]))
  [22] if (is-completion __x13__) if (= __x13__.Type CONST_normal) __x13__ = __x13__.Value else return __x13__ else [7] {}
  [22] app __x14__ = (WrapCompletion __x13__)
  [22] return __x14__
}