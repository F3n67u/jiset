digraph {
  node11122 [shape=diamond, label=<<font color="black">(! (== R 16i))</font>> color="black" fillcolor="white" style=filled]
  node11112 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node11111 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node11119 [shape=diamond, label=<<font color="black">(! (== R 0i))</font>> color="black" fillcolor="white" style=filled]
  node11121 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return NaN</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11116 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let inputString = [? __x0__]</td></tr>
      <tr><td align="left">1:??? &quot;Let id:{S} be a newly created substring of id:{inputString} consisting of the first code unit that is not a nt:{StrWhiteSpaceChar} and all code units following that code unit . ( In other words , remove leading white space . ) If id:{inputString} does not contain any such code unit , let id:{S} be the empty string .&quot;</td></tr>
      <tr><td align="left">2:let sign = 1i</td></tr>
      <tr><td align="left">3:??? &quot;If id:{S} is not empty and the first code unit of id:{S} is the code unit 0x002D ( HYPHEN - MINUS ) , let id:{sign} be - 1 .&quot;</td></tr>
      <tr><td align="left">4:??? &quot;If id:{S} is not empty and the first code unit of id:{S} is the code unit 0x002B ( PLUS SIGN ) or the code unit 0x002D ( HYPHEN - MINUS ) , remove the first code unit from id:{S} .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11129 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return NaN</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11124 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let R = 10i</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11126 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">??? &quot;If the length of id:{S} is at least 2 and the first two code units of id:{S} are either code:{\&quot;0x\&quot;} or code:{\&quot;0X\&quot;} , remove the first two code units from id:{S} and let id:{R} be 16 .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11123 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let stripPrefix = false</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11118 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">5:let R = [? __x1__]</td></tr>
      <tr><td align="left">6:let stripPrefix = true</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11131 [shape=diamond, label=<<font color="black">(== mathInt 0i)</font>> color="black" fillcolor="white" style=filled]
  node11114 [shape=cds, label=<<font color="black">app radix = (GetArgument argumentsList 1i)</font>> color="black" fillcolor="white" style=filled]
  node11135 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">20:let number = mathInt</td></tr>
      <tr><td align="left">21:return (* sign number)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11115 [shape=cds, label=<<font color="black">0:app __x0__ = (ToString string)</font>> color="black" fillcolor="white" style=filled]
  node11132 [shape=diamond, label=<<font color="black">(== sign -1i)</font>> color="black" fillcolor="white" style=filled]
  node11133 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return -0.0</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11128 [shape=diamond, label=<<font color="black">(= Z.length 0i)</font>> color="black" fillcolor="white" style=filled]
  node11125 [shape=diamond, label=<<font color="black">(= stripPrefix true)</font>> color="black" fillcolor="white" style=filled]
  node11120 [shape=diamond, label=<<font color="black">(|| (&lt; R 2i) (&lt; 36i R))</font>> color="black" fillcolor="white" style=filled]
  node11134 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">19:return 0i</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11127 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">14:??? &quot;If id:{S} contains a code unit that is not a radix - id:{R} digit , let id:{Z} be the substring of id:{S} consisting of all code units before the first such code unit ; otherwise , let id:{Z} be id:{S} .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11117 [shape=cds, label=<<font color="black">5:app __x1__ = (ToInt32 radix)</font>> color="black" fillcolor="white" style=filled]
  node11113 [shape=cds, label=<<font color="black">app string = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node11130 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">16:??? &quot;Let id:{mathInt} be the mathematical integer value that is represented by id:{Z} in radix - id:{R} notation , using the letters &lt; b &gt; A &lt; / b &gt; - &lt; b &gt; Z &lt; / b &gt; and &lt; b &gt; a &lt; / b &gt; - &lt; b &gt; z &lt; / b &gt; for digits with values 10 through 35 . ( However , if id:{R} is 10 and id:{Z} contains more than 20 significant digits , every significant digit after the 20th may be replaced by a 0 digit , at the option of the implementation ; and if id:{R} is not 2 , 4 , 8 , 10 , 16 , or 32 , then id:{mathInt} may be an implementation - dependent approximation to the mathematical integer value that is represented by id:{Z} in radix - id:{R} notation . )&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11120 -> node11121 [label=<<font color="black">true</font>> color="black"]
  node11120 -> node11122 [label=<<font color="black">false</font>> color="black"]
  node11116 -> node11117 [ color="black"]
  node11125 -> node11126 [label=<<font color="black">true</font>> color="black"]
  node11125 -> node11127 [label=<<font color="black">false</font>> color="black"]
  node11122 -> node11123 [label=<<font color="black">true</font>> color="black"]
  node11122 -> node11125 [label=<<font color="black">false</font>> color="black"]
  node11131 -> node11132 [label=<<font color="black">true</font>> color="black"]
  node11131 -> node11135 [label=<<font color="black">false</font>> color="black"]
  node11114 -> node11115 [ color="black"]
  node11111 -> node11113 [ color="black"]
  node11113 -> node11114 [ color="black"]
  node11124 -> node11125 [ color="black"]
  node11123 -> node11125 [ color="black"]
  node11129 -> node11130 [ color="black"]
  node11119 -> node11120 [label=<<font color="black">true</font>> color="black"]
  node11119 -> node11124 [label=<<font color="black">false</font>> color="black"]
  node11130 -> node11131 [ color="black"]
  node11128 -> node11129 [label=<<font color="black">true</font>> color="black"]
  node11128 -> node11130 [label=<<font color="black">false</font>> color="black"]
  node11134 -> node11135 [ color="black"]
  node11132 -> node11133 [label=<<font color="black">true</font>> color="black"]
  node11132 -> node11134 [label=<<font color="black">false</font>> color="black"]
  node11117 -> node11118 [ color="black"]
  node11121 -> node11122 [ color="black"]
  node11135 -> node11112 [ color="black"]
  node11115 -> node11116 [ color="black"]
  node11126 -> node11127 [ color="black"]
  node11118 -> node11119 [ color="black"]
  node11127 -> node11128 [ color="black"]
  node11133 -> node11134 [ color="black"]
}
