{
  [0] assert (= (typeof env) "DeclarativeEnvironmentRecord")
  [1] access __x0__ = (code "LexicallyScopedDeclarations")
  [1] let declarations = __x0__
  [2] let __x1__ = declarations
  [2] let __x2__ = 0i
  [2] while (< __x2__ __x1__.length) {
    let d = __x1__[__x2__]
    [3] access __x3__ = (d "BoundNames")
    [3] let __x4__ = __x3__
    [3] let __x5__ = 0i
    [3] while (< __x5__ __x4__.length) {
      let dn = __x4__[__x5__]
      [6] access __x6__ = (d "IsConstantDeclaration")
      [6] if (= __x6__ true) {
        [5] app __x7__ = (env.CreateImmutableBinding env dn true)
        [5] if (is-completion __x7__) if (= __x7__.Type CONST_normal) __x7__ = __x7__.Value else return __x7__ else [9] {}
        [5] __x7__
      } else {
        [7] app __x8__ = (env.CreateMutableBinding env dn false)
        [7] if (is-completion __x8__) if (= __x8__.Type CONST_normal) __x8__ = __x8__.Value else return __x8__ else [9] {}
        [7] __x8__
      }
      __x5__ = (+ __x5__ 1i)
    }
    [8] if (|| (|| (|| (is-instance-of d FunctionDeclaration) (is-instance-of d GeneratorDeclaration)) (is-instance-of d AsyncFunctionDeclaration)) (is-instance-of d AsyncGeneratorDeclaration)) {
      [9] access __x9__ = (d "BoundNames")
      [9] let fn = __x9__[0i]
      [10] access __x10__ = (d "InstantiateFunctionObject")
      [10] app __x11__ = (__x10__ env)
      [10] let fo = __x11__
      [11] app __x12__ = (env.InitializeBinding env fn fo)
      [11] __x12__
    } else [9] {}
    __x2__ = (+ __x2__ 1i)
  }
}