digraph {
  node12148 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let intEnd = len</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12158 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let to = __x6__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12141 [shape=cds, label=<<font color="black">0:app __x0__ = (RequireObjectCoercible this)</font>> color="black" fillcolor="white" style=filled]
  node12137 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node12159 [shape=cds, label=<<font color="black">app __x7__ = (min intEnd len)</font>> color="black" fillcolor="white" style=filled]
  node12147 [shape=diamond, label=<<font color="black">(= end undefined)</font>> color="black" fillcolor="white" style=filled]
  node12142 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let O = [? __x0__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12151 [shape=diamond, label=<<font color="black">(&lt; intStart 0i)</font>> color="black" fillcolor="white" style=filled]
  node12138 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node12155 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let from = __x5__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12143 [shape=cds, label=<<font color="black">1:app __x1__ = (ToString O)</font>> color="black" fillcolor="white" style=filled]
  node12146 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">3:let intStart = [? __x2__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12156 [shape=diamond, label=<<font color="black">(&lt; intEnd 0i)</font>> color="black" fillcolor="white" style=filled]
  node12139 [shape=cds, label=<<font color="black">app start = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node12145 [shape=cds, label=<<font color="black">3:app __x2__ = (ToInteger start)</font>> color="black" fillcolor="white" style=filled]
  node12157 [shape=cds, label=<<font color="black">app __x6__ = (max (+ len intEnd) 0i)</font>> color="black" fillcolor="white" style=filled]
  node12152 [shape=cds, label=<<font color="black">app __x4__ = (max (+ len intStart) 0i)</font>> color="black" fillcolor="white" style=filled]
  node12144 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">1:let S = [? __x1__]</td></tr>
      <tr><td align="left">2:let len = S.length</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12149 [shape=cds, label=<<font color="black">app __x3__ = (ToInteger end)</font>> color="black" fillcolor="white" style=filled]
  node12154 [shape=cds, label=<<font color="black">app __x5__ = (min intStart len)</font>> color="black" fillcolor="white" style=filled]
  node12161 [shape=cds, label=<<font color="black">7:app __x8__ = (max (- to from) 0i)</font>> color="black" fillcolor="white" style=filled]
  node12160 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let to = __x7__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12150 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let intEnd = [? __x3__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12153 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let from = __x4__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12162 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">7:let span = __x8__</td></tr>
      <tr><td align="left">8:??? &quot;Return a String value containing id:{span} consecutive elements from id:{S} beginning with the element at index id:{from} .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12140 [shape=cds, label=<<font color="black">app end = (GetArgument argumentsList 1i)</font>> color="black" fillcolor="white" style=filled]
  node12160 -> node12161 [ color="black"]
  node12146 -> node12147 [ color="black"]
  node12148 -> node12151 [ color="black"]
  node12140 -> node12141 [ color="black"]
  node12155 -> node12156 [ color="black"]
  node12151 -> node12152 [label=<<font color="black">true</font>> color="black"]
  node12151 -> node12154 [label=<<font color="black">false</font>> color="black"]
  node12153 -> node12156 [ color="black"]
  node12137 -> node12139 [ color="black"]
  node12154 -> node12155 [ color="black"]
  node12147 -> node12148 [label=<<font color="black">true</font>> color="black"]
  node12147 -> node12149 [label=<<font color="black">false</font>> color="black"]
  node12139 -> node12140 [ color="black"]
  node12142 -> node12143 [ color="black"]
  node12157 -> node12158 [ color="black"]
  node12145 -> node12146 [ color="black"]
  node12158 -> node12161 [ color="black"]
  node12141 -> node12142 [ color="black"]
  node12161 -> node12162 [ color="black"]
  node12156 -> node12157 [label=<<font color="black">true</font>> color="black"]
  node12156 -> node12159 [label=<<font color="black">false</font>> color="black"]
  node12152 -> node12153 [ color="black"]
  node12149 -> node12150 [ color="black"]
  node12144 -> node12145 [ color="black"]
  node12159 -> node12160 [ color="black"]
  node12162 -> node12138 [ color="black"]
  node12150 -> node12151 [ color="black"]
  node12143 -> node12144 [ color="black"]
}
