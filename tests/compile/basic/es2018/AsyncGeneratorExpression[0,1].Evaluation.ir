{
  if true let strict = true else let strict = false
  let scope = GLOBAL_context.LexicalEnvironment
  app __x0__ = (NewDeclarativeEnvironment scope)
  let funcEnv = [! __x0__]
  let envRec = funcEnv.EnvironmentRecord
  access __x1__ = (BindingIdentifier "StringValue")
  let name = __x1__
  app __x2__ = (envRec.CreateImmutableBinding envRec name)
  [! __x2__]
  app __x3__ = (AsyncGeneratorFunctionCreate CONST_Normal FormalParameters AsyncGeneratorBody funcEnv strict)
  let closure = [! __x3__]
  app __x4__ = (ObjectCreate INTRINSIC_AsyncGeneratorPrototype)
  let prototype = [! __x4__]
  app __x5__ = (DefinePropertyOrThrow closure "prototype" (new PropertyDescriptor("Value" -> prototype, "Writable" -> true, "Enumerable" -> false, "Configurable" -> false)))
  [! __x5__]
  app __x6__ = (SetFunctionName closure name)
  [! __x6__]
  app __x7__ = (envRec.InitializeBinding envRec name closure)
  [! __x7__]
  return closure
}