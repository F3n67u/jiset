digraph {
  node8475 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node8487 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">7:__x3__</td></tr>
      <tr><td align="left">8:let desc = (new PropertyDescriptor(&quot;Get&quot; -&gt; closure, &quot;Enumerable&quot; -&gt; enumerable, &quot;Configurable&quot; -&gt; true))</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node8483 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">5:let closure = __x1__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node8479 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let strict = true</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node8476 [shape=cds, label=<<font color="black">0:access __x0__ = (PropertyName &quot;Evaluation&quot;)</font>> color="black" fillcolor="white" style=filled]
  node8482 [shape=cds, label=<<font color="black">5:app __x1__ = (FunctionCreate CONST_Method formalParameterList FunctionBody scope strict)</font>> color="black" fillcolor="white" style=filled]
  node8480 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let strict = false</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node8485 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">6:__x2__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node8477 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let propKey = __x0__</td></tr>
      <tr><td align="left">1:[? propKey]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node8474 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node8488 [shape=cds, label=<<font color="black">9:app __x4__ = (DefinePropertyOrThrow object propKey desc)</font>> color="black" fillcolor="white" style=filled]
  node8484 [shape=cds, label=<<font color="black">6:app __x2__ = (MakeMethod closure object)</font>> color="black" fillcolor="white" style=filled]
  node8486 [shape=cds, label=<<font color="black">7:app __x3__ = (SetFunctionName closure propKey &quot;get&quot;)</font>> color="black" fillcolor="white" style=filled]
  node8481 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">3:let scope = GLOBAL_context.LexicalEnvironment</td></tr>
      <tr><td align="left">4:??? &quot;Let id:{formalParameterList} be an instance of the production grammar:{FormalParameters0, []} .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node8478 [shape=diamond, label=<<font color="black">true</font>> color="black" fillcolor="white" style=filled]
  node8489 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">9:return [? __x4__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node8487 -> node8488 [ color="black"]
  node8483 -> node8484 [ color="black"]
  node8477 -> node8478 [ color="black"]
  node8485 -> node8486 [ color="black"]
  node8481 -> node8482 [ color="black"]
  node8474 -> node8476 [ color="black"]
  node8486 -> node8487 [ color="black"]
  node8484 -> node8485 [ color="black"]
  node8478 -> node8479 [label=<<font color="black">true</font>> color="black"]
  node8478 -> node8480 [label=<<font color="black">false</font>> color="black"]
  node8488 -> node8489 [ color="black"]
  node8479 -> node8481 [ color="black"]
  node8489 -> node8475 [ color="black"]
  node8476 -> node8477 [ color="black"]
  node8482 -> node8483 [ color="black"]
  node8480 -> node8481 [ color="black"]
}
