{
  let R = this
  app __x0__ = (Type R)
  if (! (= __x0__ Object)) {
    app __x1__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_TypeError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
    return __x1__
  } else {}
  if (= R.RegExpMatcher absent) {
    app __x2__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_TypeError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
    return __x2__
  } else {}
  app __x3__ = (ToString string)
  if (is-completion __x3__) if (= __x3__.Type CONST_normal) __x3__ = __x3__.Value else return __x3__ else {}
  let S = __x3__
  app __x4__ = (RegExpBuiltinExec R S)
  if (is-completion __x4__) if (= __x4__.Type CONST_normal) __x4__ = __x4__.Value else return __x4__ else {}
  app __x5__ = (WrapCompletion __x4__)
  return __x5__
}