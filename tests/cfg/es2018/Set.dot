digraph {
  node15767 [shape=cds, label=<<font color="black">6:app __x2__ = (IsCallable adder)</font>> color="black" fillcolor="white" style=filled]
  node15776 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return set</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15759 [shape=cds, label=<<font color="black">1:app __x0__ = (OrdinaryCreateFromConstructor NewTarget INTRINSIC_SetPrototype (new [&quot;SetData&quot;]))</font>> color="black" fillcolor="white" style=filled]
  node15763 [shape=diamond, label=<<font color="black">(|| (= iterable undefined) (= iterable null))</font>> color="black" fillcolor="white" style=filled]
  node15761 [shape=diamond, label=<<font color="black">(= iterable absent)</font>> color="black" fillcolor="white" style=filled]
  node15760 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">1:let set = [? __x0__]</td></tr>
      <tr><td align="left">2:set.SetData = (new [])</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15783 [shape=cds, label=<<font color="black">app __x8__ = (IteratorClose iteratorRecord status)</font>> color="black" fillcolor="white" style=filled]
  node15765 [shape=cds, label=<<font color="black">5:app __x1__ = (Get set &quot;add&quot;)</font>> color="black" fillcolor="white" style=filled]
  node15782 [shape=diamond, label=<<font color="black">__x7__</font>> color="black" fillcolor="white" style=filled]
  node15757 [shape=diamond, label=<<font color="black">(= NewTarget undefined)</font>> color="black" fillcolor="white" style=filled]
  node15770 [shape=cds, label=<<font color="black">7:app __x3__ = (GetIterator iterable)</font>> color="black" fillcolor="white" style=filled]
  node15780 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">12:let status = __x6__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15755 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node15762 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let iterable = undefined</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15784 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return [? __x8__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15774 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">9:let next = [? __x4__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15779 [shape=cds, label=<<font color="black">12:app __x6__ = (Call adder set (new [nextValue.Value]))</font>> color="black" fillcolor="white" style=filled]
  node15766 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">5:let adder = [? __x1__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15756 [shape=cds, label=<<font color="black">app iterable = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node15771 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">7:let iteratorRecord = [? __x3__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15772 [shape=diamond, label=<<font color="black">true</font>> color="black" fillcolor="white" style=filled]
  node15778 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">11:let nextValue = [? __x5__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15754 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node15768 [shape=diamond, label=<<font color="black">(= __x2__ false)</font>> color="black" fillcolor="white" style=filled]
  node15777 [shape=cds, label=<<font color="black">11:app __x5__ = (IteratorValue next)</font>> color="black" fillcolor="white" style=filled]
  node15775 [shape=diamond, label=<<font color="black">(= next false)</font>> color="black" fillcolor="white" style=filled]
  node15781 [shape=cds, label=<<font color="black">13:app __x7__ = (IsAbruptCompletion status)</font>> color="black" fillcolor="white" style=filled]
  node15773 [shape=cds, label=<<font color="black">9:app __x4__ = (IteratorStep iteratorRecord)</font>> color="black" fillcolor="white" style=filled]
  node15758 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15764 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return set</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15769 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15764 -> node15765 [ color="black"]
  node15778 -> node15779 [ color="black"]
  node15783 -> node15784 [ color="black"]
  node15772 -> node15773 [label=<<font color="black">true</font>> color="black"]
  node15772 -> node15755 [label=<<font color="black">false</font>> color="black"]
  node15760 -> node15761 [ color="black"]
  node15781 -> node15782 [ color="black"]
  node15766 -> node15767 [ color="black"]
  node15759 -> node15760 [ color="black"]
  node15771 -> node15772 [ color="black"]
  node15761 -> node15762 [label=<<font color="black">true</font>> color="black"]
  node15761 -> node15763 [label=<<font color="black">false</font>> color="black"]
  node15757 -> node15758 [label=<<font color="black">true</font>> color="black"]
  node15757 -> node15759 [label=<<font color="black">false</font>> color="black"]
  node15777 -> node15778 [ color="black"]
  node15769 -> node15770 [ color="black"]
  node15756 -> node15757 [ color="black"]
  node15768 -> node15769 [label=<<font color="black">true</font>> color="black"]
  node15768 -> node15770 [label=<<font color="black">false</font>> color="black"]
  node15767 -> node15768 [ color="black"]
  node15784 -> node15772 [ color="black"]
  node15765 -> node15766 [ color="black"]
  node15770 -> node15771 [ color="black"]
  node15773 -> node15774 [ color="black"]
  node15780 -> node15781 [ color="black"]
  node15762 -> node15763 [ color="black"]
  node15763 -> node15764 [label=<<font color="black">true</font>> color="black"]
  node15763 -> node15765 [label=<<font color="black">false</font>> color="black"]
  node15775 -> node15776 [label=<<font color="black">true</font>> color="black"]
  node15775 -> node15777 [label=<<font color="black">false</font>> color="black"]
  node15774 -> node15775 [ color="black"]
  node15754 -> node15756 [ color="black"]
  node15776 -> node15777 [ color="black"]
  node15782 -> node15783 [label=<<font color="black">true</font>> color="black"]
  node15782 -> node15772 [label=<<font color="black">false</font>> color="black"]
  node15758 -> node15759 [ color="black"]
  node15779 -> node15780 [ color="black"]
}
