{
  app __x0__ = (IsPropertyKey P)
  assert (= __x0__ true)
  let handler = O.ProxyHandler
  if (= handler null) throw INTRINSIC_TypeError else {}
  app __x1__ = (Type handler)
  assert (= __x1__ Object)
  let target = O.ProxyTarget
  app __x2__ = (GetMethod handler "has")
  if (is-completion __x2__) if (= __x2__.Type CONST_normal) __x2__ = __x2__.Value else return __x2__ else {}
  let trap = __x2__
  if (= trap undefined) {
    app __x3__ = (target.HasProperty target P)
    if (is-completion __x3__) if (= __x3__.Type CONST_normal) __x3__ = __x3__.Value else return __x3__ else {}
    app __x4__ = (WrapCompletion __x3__)
    return __x4__
  } else {}
  app __x5__ = (Call trap handler (new [target, P]))
  if (is-completion __x5__) if (= __x5__.Type CONST_normal) __x5__ = __x5__.Value else return __x5__ else {}
  app __x6__ = (ToBoolean __x5__)
  if (is-completion __x6__) if (= __x6__.Type CONST_normal) __x6__ = __x6__.Value else return __x6__ else {}
  let booleanTrapResult = __x6__
  if (= booleanTrapResult false) {
    app __x7__ = (target.GetOwnProperty target P)
    if (is-completion __x7__) if (= __x7__.Type CONST_normal) __x7__ = __x7__.Value else return __x7__ else {}
    let targetDesc = __x7__
    if (! (= targetDesc undefined)) {
      if (= targetDesc.Configurable false) throw INTRINSIC_TypeError else {}
      app __x8__ = (IsExtensible target)
      if (is-completion __x8__) if (= __x8__.Type CONST_normal) __x8__ = __x8__.Value else return __x8__ else {}
      let extensibleTarget = __x8__
      if (= extensibleTarget false) throw INTRINSIC_TypeError else {}
    } else {}
  } else {}
  app __x9__ = (WrapCompletion booleanTrapResult)
  return __x9__
}