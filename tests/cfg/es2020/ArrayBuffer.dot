digraph {
  node17118 [shape=diamond, label=<<font color="black">(= NewTarget undefined)</font>> color="black" fillcolor="white" style=filled]
  node17115 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node17119 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17116 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node17123 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">2:return [? __x1__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17117 [shape=cds, label=<<font color="black">app length = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node17122 [shape=cds, label=<<font color="black">2:app __x1__ = (AllocateArrayBuffer NewTarget byteLength)</font>> color="black" fillcolor="white" style=filled]
  node17121 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">1:let byteLength = [? __x0__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17120 [shape=cds, label=<<font color="black">1:app __x0__ = (ToIndex length)</font>> color="black" fillcolor="white" style=filled]
  node17121 -> node17122 [ color="black"]
  node17117 -> node17118 [ color="black"]
  node17115 -> node17117 [ color="black"]
  node17123 -> node17116 [ color="black"]
  node17118 -> node17119 [label=<<font color="black">true</font>> color="black"]
  node17118 -> node17120 [label=<<font color="black">false</font>> color="black"]
  node17119 -> node17120 [ color="black"]
  node17122 -> node17123 [ color="black"]
  node17120 -> node17121 [ color="black"]
}
