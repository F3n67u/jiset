<algorithm>
  <step-list>
    <step>Let <id>V</id> be <value>undefined</value> .</step>
    <step>If the first CaseClauses is present, then     <step-list>
      <step>Let <id>A</id> be the List of CaseClause items in the first CaseClauses , in source text order.</step>
    </step-list></step>
    <step>Else,     <step-list>
      <step>Let <id>A</id> be « ».</step>
    </step-list></step>
    <step>Let <id>found</id> be <value>false</value> .</step>
    <step>For each CaseClause  <id>C</id> in <id>A</id> , do     <step-list>
      <step>If <id>found</id> is <value>false</value> , then       <step-list>
        <step>Set <id>found</id> to ? CaseClauseIsSelected ( <id>C</id> , <id>input</id> ).</step>
      </step-list></step>
      <step>If <id>found</id> is <value>true</value> , then       <step-list>
        <step>Let <id>R</id> be the result of evaluating <id>C</id> .</step>
        <step>If <id>R</id> .[[Value]] is not <value>empty</value> , set <id>V</id> to <id>R</id> .[[Value]].</step>
        <step>If <id>R</id> is an abrupt completion , return Completion ( UpdateEmpty ( <id>R</id> , <id>V</id> )).</step>
      </step-list></step>
    </step-list></step>
    <step>Let <id>foundInB</id> be <value>false</value> .</step>
    <step>If the second CaseClauses is present, then     <step-list>
      <step>Let <id>B</id> be the List of CaseClause items in the second CaseClauses , in source text order.</step>
    </step-list></step>
    <step>Else,     <step-list>
      <step>Let <id>B</id> be « ».</step>
    </step-list></step>
    <step>If <id>found</id> is <value>false</value> , then     <step-list>
      <step>For each CaseClause  <id>C</id> in <id>B</id> , do       <step-list>
        <step>If <id>foundInB</id> is <value>false</value> , then         <step-list>
          <step>Set <id>foundInB</id> to ? CaseClauseIsSelected ( <id>C</id> , <id>input</id> ).</step>
        </step-list></step>
        <step>If <id>foundInB</id> is <value>true</value> , then         <step-list>
          <step>Let <id>R</id> be the result of evaluating CaseClause  <id>C</id> .</step>
          <step>If <id>R</id> .[[Value]] is not <value>empty</value> , set <id>V</id> to <id>R</id> .[[Value]].</step>
          <step>If <id>R</id> is an abrupt completion , return Completion ( UpdateEmpty ( <id>R</id> , <id>V</id> )).</step>
        </step-list></step>
      </step-list></step>
    </step-list></step>
    <step>If <id>foundInB</id> is <value>true</value> , return NormalCompletion ( <id>V</id> ).</step>
    <step>Let <id>R</id> be the result of evaluating DefaultClause .</step>
    <step>If <id>R</id> .[[Value]] is not <value>empty</value> , set <id>V</id> to <id>R</id> .[[Value]].</step>
    <step>If <id>R</id> is an abrupt completion , return Completion ( UpdateEmpty ( <id>R</id> , <id>V</id> )).</step>
    <step>For each CaseClause  <id>C</id> in <id>B</id> (NOTE: this is another complete iteration of the second CaseClauses ), do     <step-list>
      <step>Let <id>R</id> be the result of evaluating CaseClause  <id>C</id> .</step>
      <step>If <id>R</id> .[[Value]] is not <value>empty</value> , set <id>V</id> to <id>R</id> .[[Value]].</step>
      <step>If <id>R</id> is an abrupt completion , return Completion ( UpdateEmpty ( <id>R</id> , <id>V</id> )).</step>
    </step-list></step>
    <step>Return NormalCompletion ( <id>V</id> ).</step>
  </step-list>
</algorithm>