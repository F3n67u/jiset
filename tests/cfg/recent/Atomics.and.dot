digraph {
  node18265 [shape=cds, label=<<font color="black">app value = (GetArgument argumentsList 2i)</font>> color="black" fillcolor="white" style=filled]
  node18264 [shape=cds, label=<<font color="black">app index = (GetArgument argumentsList 1i)</font>> color="black" fillcolor="white" style=filled]
  node18261 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node18268 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">2:return [? __x0__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18262 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node18267 [shape=cds, label=<<font color="black">2:app __x0__ = (AtomicReadModifyWrite typedArray index value and)</font>> color="black" fillcolor="white" style=filled]
  node18266 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:??? &quot;Let id:{and} be a new read - modify - write modification function with parameters ( id:{xBytes} , id:{yBytes} ) that captures nothing and performs the following steps atomically when called : in:{} out:{}&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18263 [shape=cds, label=<<font color="black">app typedArray = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node18263 -> node18264 [ color="black"]
  node18264 -> node18265 [ color="black"]
  node18268 -> node18262 [ color="black"]
  node18266 -> node18267 [ color="black"]
  node18267 -> node18268 [ color="black"]
  node18261 -> node18263 [ color="black"]
  node18265 -> node18266 [ color="black"]
}
