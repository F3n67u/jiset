{
  [0] app __x0__ = (Type O)
  [0] assert (= __x0__ Object)
  [4] if (= hint "string") let methodNames = (new ["toString", "valueOf"]) else let methodNames = (new ["valueOf", "toString"])
  [6] let __x1__ = methodNames
  [6] let __x2__ = 0i
  [6] while (< __x2__ __x1__.length) {
    let name = __x1__[__x2__]
    [7] app __x3__ = (Get O name)
    [7] if (is-completion __x3__) if (= __x3__.Type CONST_normal) __x3__ = __x3__.Value else return __x3__ else [1] {}
    [7] let method = __x3__
    [8] app __x4__ = (IsCallable method)
    [8] if (= __x4__ true) {
      [9] app __x5__ = (Call method O)
      [9] if (is-completion __x5__) if (= __x5__.Type CONST_normal) __x5__ = __x5__.Value else return __x5__ else [1] {}
      [9] let result = __x5__
      [10] app __x6__ = (Type result)
      [10] if (! (= __x6__ Object)) {
        app __x7__ = (WrapCompletion result)
        return __x7__
      } else [1] {}
    } else [1] {}
    __x2__ = (+ __x2__ 1i)
  }
  [11] app __x8__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_TypeError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
  [11] return __x8__
}