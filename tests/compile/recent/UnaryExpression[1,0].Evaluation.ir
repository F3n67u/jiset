{
  [0] access __x0__ = (UnaryExpression "Evaluation")
  [0] let ref = __x0__
  [1] if (is-completion ref) if (= ref.Type CONST_normal) ref = ref.Value else return ref else [14] {}
  [1] ref
  [2] ??? "If id:{ref} is not a Reference Record , return value:{true} ."
  [3] app __x1__ = (IsUnresolvableReference ref)
  [3] if (= __x1__ true) {
    [4] assert (= ref.Strict false)
    [5] app __x2__ = (WrapCompletion true)
    [5] return __x2__
  } else [14] {}
  [12] app __x3__ = (IsPropertyReference ref)
  [12] if (= __x3__ true) {
    [7] app __x4__ = (IsSuperReference ref)
    [7] if (= __x4__ true) {
      app __x5__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_ReferenceError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
      return __x5__
    } else [14] {}
    [8] app __x6__ = (ToObject ref.Base)
    [8] if (is-completion __x6__) if (= __x6__.Type CONST_normal) __x6__ = __x6__.Value else return __x6__ else [14] {}
    [8] let baseObj = __x6__
    [9] app __x7__ = (baseObj.Delete baseObj ref.ReferencedName)
    [9] if (is-completion __x7__) if (= __x7__.Type CONST_normal) __x7__ = __x7__.Value else return __x7__ else [14] {}
    [9] let deleteStatus = __x7__
    [10] if (&& (= deleteStatus false) (= ref.Strict true)) {
      app __x8__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_TypeError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
      return __x8__
    } else [14] {}
    [11] app __x9__ = (WrapCompletion deleteStatus)
    [11] return __x9__
  } else {
    [13] let base = ref.Base
    [15] app __x10__ = (base.DeleteBinding base ref.ReferencedName)
    [15] if (is-completion __x10__) if (= __x10__.Type CONST_normal) __x10__ = __x10__.Value else return __x10__ else [14] {}
    [15] app __x11__ = (WrapCompletion __x10__)
    [15] return __x11__
  }
}