{
  app __x0__ = (Type index)
  assert (= __x0__ Number)
  let buffer = O.ViewedArrayBuffer
  app __x1__ = (IsDetachedBuffer buffer)
  if (= __x1__ true) throw INTRINSIC_TypeError else {}
  app __x2__ = (IsValidIntegerIndex O index)
  if (is-completion __x2__) if (= __x2__.Type CONST_normal) __x2__ = __x2__.Value else return __x2__ else {}
  if (= __x2__ false) {
    app __x3__ = (WrapCompletion undefined)
    return __x3__
  } else {}
  let offset = O.ByteOffset
  let arrayTypeName = O.TypedArrayName
  ??? "Let id:{elementSize} be the Element Size value specified in link:{unhandled: table-the-typedarray-constructors} for id:{arrayTypeName} ."
  let indexedPosition = (+ (* index elementSize) offset)
  ??? "Let id:{elementType} be the Element Type value in link:{unhandled: table-the-typedarray-constructors} for id:{arrayTypeName} ."
  app __x4__ = (GetValueFromBuffer buffer indexedPosition elementType true CONST_Unordered)
  app __x5__ = (WrapCompletion __x4__)
  return __x5__
}