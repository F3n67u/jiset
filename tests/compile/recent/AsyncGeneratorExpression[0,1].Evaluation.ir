{
  [0] let scope = GLOBAL_context.LexicalEnvironment
  [1] app __x0__ = (NewDeclarativeEnvironment scope)
  [1] if (is-completion __x0__) if (= __x0__.Type CONST_normal) __x0__ = __x0__.Value else return __x0__ else [33] {}
  [1] let funcEnv = __x0__
  [2] access __x1__ = (BindingIdentifier "StringValue")
  [2] let name = __x1__
  [3] app __x2__ = (funcEnv.CreateImmutableBinding funcEnv name false)
  [3] if (is-completion __x2__) if (= __x2__.Type CONST_normal) __x2__ = __x2__.Value else return __x2__ else [33] {}
  [3] __x2__
  [4] let sourceText = (get-syntax AsyncGeneratorExpression)
  [5] ??? "Let id:{closure} be ! OrdinaryFunctionCreate ( % AsyncGeneratorFunction . prototype % , id:{sourceText} , nt:{FormalParameters} , nt:{AsyncGeneratorBody} , const:{non-lexical-this} , id:{funcEnv} ) ."
  [6] app __x3__ = (SetFunctionName closure name)
  [6] if (is-completion __x3__) if (= __x3__.Type CONST_normal) __x3__ = __x3__.Value else return __x3__ else [33] {}
  [6] __x3__
  [7] ??? "Let id:{prototype} be ! OrdinaryObjectCreate ( % AsyncGeneratorFunction . prototype . prototype % ) ."
  [8] app __x4__ = (DefinePropertyOrThrow closure "prototype" (new PropertyDescriptor("Value" -> prototype, "Writable" -> true, "Enumerable" -> false, "Configurable" -> false)))
  [8] if (is-completion __x4__) if (= __x4__.Type CONST_normal) __x4__ = __x4__.Value else return __x4__ else [33] {}
  [8] __x4__
  [9] app __x5__ = (funcEnv.InitializeBinding funcEnv name closure)
  [9] if (is-completion __x5__) if (= __x5__.Type CONST_normal) __x5__ = __x5__.Value else return __x5__ else [33] {}
  [9] __x5__
  [10] app __x6__ = (WrapCompletion closure)
  [10] return __x6__
}