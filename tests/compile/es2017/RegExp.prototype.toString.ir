{
  [0] let R = this
  [1] app __x0__ = (Type R)
  [1] if (! (= __x0__ Object)) {
    app __x1__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_TypeError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
    return __x1__
  } else [51] {}
  [2] app __x2__ = (Get R "source")
  [2] if (is-completion __x2__) if (= __x2__.Type CONST_normal) __x2__ = __x2__.Value else return __x2__ else [51] {}
  [2] app __x3__ = (ToString __x2__)
  [2] if (is-completion __x3__) if (= __x3__.Type CONST_normal) __x3__ = __x3__.Value else return __x3__ else [51] {}
  [2] let pattern = __x3__
  [3] app __x4__ = (Get R "flags")
  [3] if (is-completion __x4__) if (= __x4__.Type CONST_normal) __x4__ = __x4__.Value else return __x4__ else [51] {}
  [3] app __x5__ = (ToString __x4__)
  [3] if (is-completion __x5__) if (= __x5__.Type CONST_normal) __x5__ = __x5__.Value else return __x5__ else [51] {}
  [3] let flags = __x5__
  [4] let result = (+ (+ (+ "/" pattern) "/") flags)
  [5] app __x6__ = (WrapCompletion result)
  [5] return __x6__
}