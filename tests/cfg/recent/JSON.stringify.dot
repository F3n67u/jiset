digraph {
  node18575 [shape=diamond, label=<<font color="black">(= __x13__ Number)</font>> color="black" fillcolor="white" style=filled]
  node18536 [shape=cds, label=<<font color="black">app replacer = (GetArgument argumentsList 1i)</font>> color="black" fillcolor="white" style=filled]
  node18540 [shape=diamond, label=<<font color="black">(= __x0__ Object)</font>> color="black" fillcolor="white" style=filled]
  node18544 [shape=cds, label=<<font color="black">7:app __x2__ = (IsArray replacer)</font>> color="black" fillcolor="white" style=filled]
  node18548 [shape=cds, label=<<font color="black">10:app __x3__ = (LengthOfArrayLike replacer)</font>> color="black" fillcolor="white" style=filled]
  node18573 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">27:space = [? __x12__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18567 [shape=diamond, label=<<font color="black">(= __x10__ Object)</font>> color="black" fillcolor="white" style=filled]
  node18537 [shape=cds, label=<<font color="black">app space = (GetArgument argumentsList 2i)</font>> color="black" fillcolor="white" style=filled]
  node18533 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node18542 [shape=diamond, label=<<font color="black">(= __x1__ true)</font>> color="black" fillcolor="white" style=filled]
  node18538 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let stack = (new [])</td></tr>
      <tr><td align="left">1:let indent = &quot;&quot;</td></tr>
      <tr><td align="left">2:let PropertyList = undefined</td></tr>
      <tr><td align="left">2:let ReplacerFunction = undefined</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18587 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">37:[! __x18__]</td></tr>
      <tr><td align="left">38:let state = (new Record(&quot;ReplacerFunction&quot; -&gt; ReplacerFunction, &quot;Stack&quot; -&gt; stack, &quot;Indent&quot; -&gt; indent, &quot;Gap&quot; -&gt; gap, &quot;PropertyList&quot; -&gt; PropertyList))</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18549 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">10:let len = [? __x3__]</td></tr>
      <tr><td align="left">11:let k = 0i</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18546 [shape=diamond, label=<<font color="black">(= isArray true)</font>> color="black" fillcolor="white" style=filled]
  node18563 [shape=diamond, label=<<font color="black">(= __x9__ Object)</font>> color="black" fillcolor="white" style=filled]
  node18585 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">36:let wrapper = [! __x17__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18539 [shape=cds, label=<<font color="black">3:app __x0__ = (Type replacer)</font>> color="black" fillcolor="white" style=filled]
  node18556 [shape=diamond, label=<<font color="black">(= __x6__ String)</font>> color="black" fillcolor="white" style=filled]
  node18565 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">20:??? &quot;If id:{item} is not value:{undefined} and id:{item} is not currently an element of id:{PropertyList} , then in:{} out:{}&quot;</td></tr>
      <tr><td align="left">22:k = (+ k 1i)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18582 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">??? &quot;If the length of id:{space} is 10 or less , let id:{gap} be id:{space} ; otherwise let id:{gap} be the substring of id:{space} from 0 to 10 .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18543 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">ReplacerFunction = replacer</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18571 [shape=diamond, label=<<font color="black">(! (= space.StringData absent))</font>> color="black" fillcolor="white" style=filled]
  node18560 [shape=cds, label=<<font color="black">app __x8__ = (ToString v)</font>> color="black" fillcolor="white" style=filled]
  node18578 [shape=cds, label=<<font color="black">30:app __x15__ = (min 10i spaceMV)</font>> color="black" fillcolor="white" style=filled]
  node18550 [shape=diamond, label=<<font color="black">(&lt; k len)</font>> color="black" fillcolor="white" style=filled]
  node18589 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">39:return [? __x19__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18576 [shape=cds, label=<<font color="black">29:app __x14__ = (ToIntegerOrInfinity space)</font>> color="black" fillcolor="white" style=filled]
  node18535 [shape=cds, label=<<font color="black">app value = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node18557 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">item = v</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18552 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">13:let prop = [! __x4__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18569 [shape=cds, label=<<font color="black">25:app __x11__ = (ToNumber space)</font>> color="black" fillcolor="white" style=filled]
  node18545 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">7:let isArray = [? __x2__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18586 [shape=cds, label=<<font color="black">37:app __x18__ = (CreateDataPropertyOrThrow wrapper &quot;&quot; value)</font>> color="black" fillcolor="white" style=filled]
  node18568 [shape=diamond, label=<<font color="black">(! (= space.NumberData absent))</font>> color="black" fillcolor="white" style=filled]
  node18581 [shape=diamond, label=<<font color="black">(= __x16__ String)</font>> color="black" fillcolor="white" style=filled]
  node18553 [shape=cds, label=<<font color="black">14:app __x5__ = (Get replacer prop)</font>> color="black" fillcolor="white" style=filled]
  node18572 [shape=cds, label=<<font color="black">27:app __x12__ = (ToString space)</font>> color="black" fillcolor="white" style=filled]
  node18562 [shape=cds, label=<<font color="black">app __x9__ = (Type v)</font>> color="black" fillcolor="white" style=filled]
  node18577 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">29:let spaceMV = [! __x14__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18551 [shape=cds, label=<<font color="black">13:app __x4__ = (ToString k)</font>> color="black" fillcolor="white" style=filled]
  node18570 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">25:space = [? __x11__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18558 [shape=cds, label=<<font color="black">app __x7__ = (Type v)</font>> color="black" fillcolor="white" style=filled]
  node18580 [shape=cds, label=<<font color="black">app __x16__ = (Type space)</font>> color="black" fillcolor="white" style=filled]
  node18541 [shape=cds, label=<<font color="black">6:app __x1__ = (IsCallable replacer)</font>> color="black" fillcolor="white" style=filled]
  node18554 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">14:let v = [? __x5__]</td></tr>
      <tr><td align="left">15:let item = undefined</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18584 [shape=cds, label=<<font color="black">36:app __x17__ = (OrdinaryObjectCreate INTRINSIC_Object_prototype)</font>> color="black" fillcolor="white" style=filled]
  node18561 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">item = [! __x8__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18547 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">9:PropertyList = (new [])</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18588 [shape=cds, label=<<font color="black">39:app __x19__ = (SerializeJSONProperty state &quot;&quot; wrapper)</font>> color="black" fillcolor="white" style=filled]
  node18574 [shape=cds, label=<<font color="black">34:app __x13__ = (Type space)</font>> color="black" fillcolor="white" style=filled]
  node18579 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">30:spaceMV = __x15__</td></tr>
      <tr><td align="left">31:??? &quot;If id:{spaceMV} &lt; 1 , let id:{gap} be the empty String ; otherwise let id:{gap} be the String value containing id:{spaceMV} occurrences of the code unit 0x0020 ( SPACE ) .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18564 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">??? &quot;If id:{v} has a [ [ StringData ] ] or [ [ NumberData ] ] internal slot , set id:{item} to ? ToString ( id:{v} ) .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18555 [shape=cds, label=<<font color="black">18:app __x6__ = (Type v)</font>> color="black" fillcolor="white" style=filled]
  node18566 [shape=cds, label=<<font color="black">23:app __x10__ = (Type space)</font>> color="black" fillcolor="white" style=filled]
  node18583 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let gap = &quot;&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18559 [shape=diamond, label=<<font color="black">(= __x7__ Number)</font>> color="black" fillcolor="white" style=filled]
  node18534 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node18576 -> node18577 [ color="black"]
  node18533 -> node18535 [ color="black"]
  node18543 -> node18566 [ color="black"]
  node18554 -> node18555 [ color="black"]
  node18558 -> node18559 [ color="black"]
  node18583 -> node18584 [ color="black"]
  node18572 -> node18573 [ color="black"]
  node18589 -> node18534 [ color="black"]
  node18563 -> node18564 [label=<<font color="black">true</font>> color="black"]
  node18563 -> node18565 [label=<<font color="black">false</font>> color="black"]
  node18586 -> node18587 [ color="black"]
  node18540 -> node18541 [label=<<font color="black">true</font>> color="black"]
  node18540 -> node18566 [label=<<font color="black">false</font>> color="black"]
  node18556 -> node18557 [label=<<font color="black">true</font>> color="black"]
  node18556 -> node18558 [label=<<font color="black">false</font>> color="black"]
  node18561 -> node18565 [ color="black"]
  node18573 -> node18574 [ color="black"]
  node18544 -> node18545 [ color="black"]
  node18571 -> node18572 [label=<<font color="black">true</font>> color="black"]
  node18571 -> node18574 [label=<<font color="black">false</font>> color="black"]
  node18577 -> node18578 [ color="black"]
  node18564 -> node18565 [ color="black"]
  node18548 -> node18549 [ color="black"]
  node18547 -> node18548 [ color="black"]
  node18535 -> node18536 [ color="black"]
  node18536 -> node18537 [ color="black"]
  node18587 -> node18588 [ color="black"]
  node18562 -> node18563 [ color="black"]
  node18537 -> node18538 [ color="black"]
  node18546 -> node18547 [label=<<font color="black">true</font>> color="black"]
  node18546 -> node18566 [label=<<font color="black">false</font>> color="black"]
  node18559 -> node18560 [label=<<font color="black">true</font>> color="black"]
  node18559 -> node18562 [label=<<font color="black">false</font>> color="black"]
  node18550 -> node18551 [label=<<font color="black">true</font>> color="black"]
  node18550 -> node18566 [label=<<font color="black">false</font>> color="black"]
  node18538 -> node18539 [ color="black"]
  node18570 -> node18574 [ color="black"]
  node18575 -> node18576 [label=<<font color="black">true</font>> color="black"]
  node18575 -> node18580 [label=<<font color="black">false</font>> color="black"]
  node18549 -> node18550 [ color="black"]
  node18585 -> node18586 [ color="black"]
  node18579 -> node18584 [ color="black"]
  node18545 -> node18546 [ color="black"]
  node18566 -> node18567 [ color="black"]
  node18551 -> node18552 [ color="black"]
  node18580 -> node18581 [ color="black"]
  node18578 -> node18579 [ color="black"]
  node18541 -> node18542 [ color="black"]
  node18565 -> node18550 [ color="black"]
  node18539 -> node18540 [ color="black"]
  node18569 -> node18570 [ color="black"]
  node18555 -> node18556 [ color="black"]
  node18542 -> node18543 [label=<<font color="black">true</font>> color="black"]
  node18542 -> node18544 [label=<<font color="black">false</font>> color="black"]
  node18557 -> node18565 [ color="black"]
  node18588 -> node18589 [ color="black"]
  node18552 -> node18553 [ color="black"]
  node18584 -> node18585 [ color="black"]
  node18574 -> node18575 [ color="black"]
  node18560 -> node18561 [ color="black"]
  node18582 -> node18584 [ color="black"]
  node18568 -> node18569 [label=<<font color="black">true</font>> color="black"]
  node18568 -> node18571 [label=<<font color="black">false</font>> color="black"]
  node18581 -> node18582 [label=<<font color="black">true</font>> color="black"]
  node18581 -> node18583 [label=<<font color="black">false</font>> color="black"]
  node18567 -> node18568 [label=<<font color="black">true</font>> color="black"]
  node18567 -> node18574 [label=<<font color="black">false</font>> color="black"]
  node18553 -> node18554 [ color="black"]
}
