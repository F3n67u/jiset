digraph {
  node2808 [shape=cds, label=<<font color="black">13:app __x4__ = (targetEnvRec.GetBindingValue targetEnvRec binding.BindingName true)</font>> color="black" fillcolor="white" style=filled]
  node2794 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:assert (= __x0__ true)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node2805 [shape=diamond, label=<<font color="black">(= targetEnv undefined)</font>> color="black" fillcolor="white" style=filled]
  node2801 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return undefined</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node2798 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">2:return [? __x2__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node2793 [shape=cds, label=<<font color="black">0:app __x0__ = (IsPropertyKey P)</font>> color="black" fillcolor="white" style=filled]
  node2802 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">5:let m = O.Module</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node2797 [shape=cds, label=<<font color="black">2:app __x2__ = (OrdinaryGet O P Receiver)</font>> color="black" fillcolor="white" style=filled]
  node2807 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">12:let targetEnvRec = targetEnv.EnvironmentRecord</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node2792 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node2796 [shape=diamond, label=<<font color="black">(= __x1__ Symbol)</font>> color="black" fillcolor="white" style=filled]
  node2803 [shape=cds, label=<<font color="black">6:app __x3__ = (m.ResolveExport m P (new []))</font>> color="black" fillcolor="white" style=filled]
  node2809 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">13:return [? __x4__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node2799 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">3:let exports = O.Exports</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node2804 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">6:let binding = [! __x3__]</td></tr>
      <tr><td align="left">7:assert (= (typeof binding) &quot;ResolvedBindingRecord&quot;)</td></tr>
      <tr><td align="left">8:let targetModule = binding.Module</td></tr>
      <tr><td align="left">9:assert (! (= targetModule undefined))</td></tr>
      <tr><td align="left">10:let targetEnv = targetModule.Environment</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node2791 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node2806 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw ReferenceError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node2800 [shape=diamond, label=<<font color="black">(! (contains exports P))</font>> color="black" fillcolor="white" style=filled]
  node2795 [shape=cds, label=<<font color="black">1:app __x1__ = (Type P)</font>> color="black" fillcolor="white" style=filled]
  node2791 -> node2793 [ color="black"]
  node2802 -> node2803 [ color="black"]
  node2800 -> node2801 [label=<<font color="black">true</font>> color="black"]
  node2800 -> node2802 [label=<<font color="black">false</font>> color="black"]
  node2805 -> node2806 [label=<<font color="black">true</font>> color="black"]
  node2805 -> node2807 [label=<<font color="black">false</font>> color="black"]
  node2798 -> node2799 [ color="black"]
  node2801 -> node2802 [ color="black"]
  node2804 -> node2805 [ color="black"]
  node2797 -> node2798 [ color="black"]
  node2806 -> node2807 [ color="black"]
  node2803 -> node2804 [ color="black"]
  node2807 -> node2808 [ color="black"]
  node2794 -> node2795 [ color="black"]
  node2799 -> node2800 [ color="black"]
  node2793 -> node2794 [ color="black"]
  node2795 -> node2796 [ color="black"]
  node2809 -> node2792 [ color="black"]
  node2808 -> node2809 [ color="black"]
  node2796 -> node2797 [label=<<font color="black">true</font>> color="black"]
  node2796 -> node2799 [label=<<font color="black">false</font>> color="black"]
}
