{
  let handler = O.ProxyHandler
  if (= handler null) throw TypeError else {}
  app __x0__ = (Type handler)
  assert (= __x0__ Object)
  let target = O.ProxyTarget
  app __x1__ = (GetMethod handler "setPrototypeOf")
  let trap = [? __x1__]
  if (= trap undefined) {
    app __x2__ = (target.SetPrototypeOf target V)
    return [? __x2__]
  } else {}
  app __x3__ = (Call trap handler (new [target, V]))
  app __x4__ = (ToBoolean [? __x3__])
  let booleanTrapResult = __x4__
  if (= booleanTrapResult false) return false else {}
  app __x5__ = (IsExtensible target)
  let extensibleTarget = [? __x5__]
  if (= extensibleTarget true) return true else {}
  app __x6__ = (target.GetPrototypeOf target)
  let targetProto = [? __x6__]
  app __x7__ = (SameValue V targetProto)
  if (= __x7__ false) throw TypeError else {}
  return true
}