digraph {
  node12629 [shape=cds, label=<<font color="black">app position = (GetArgument argumentsList 1i)</font>> color="black" fillcolor="white" style=filled]
  node12634 [shape=cds, label=<<font color="black">2:app __x2__ = (IsRegExp searchString)</font>> color="black" fillcolor="white" style=filled]
  node12646 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return false</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12642 [shape=cds, label=<<font color="black">7:app __x5__ = (max pos 0i)</font>> color="black" fillcolor="white" style=filled]
  node12638 [shape=cds, label=<<font color="black">4:app __x3__ = (ToString searchString)</font>> color="black" fillcolor="white" style=filled]
  node12635 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">2:let isRegExp = [? __x2__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12640 [shape=cds, label=<<font color="black">5:app __x4__ = (ToInteger position)</font>> color="black" fillcolor="white" style=filled]
  node12645 [shape=diamond, label=<<font color="black">(&lt; len (+ searchLength start))</font>> color="black" fillcolor="white" style=filled]
  node12639 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">4:let searchStr = [? __x3__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12628 [shape=cds, label=<<font color="black">app searchString = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node12636 [shape=diamond, label=<<font color="black">(= isRegExp true)</font>> color="black" fillcolor="white" style=filled]
  node12631 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let O = [? __x0__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12644 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">7:let start = __x6__</td></tr>
      <tr><td align="left">8:let searchLength = searchStr.length</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12627 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node12633 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">1:let S = [? __x1__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12637 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12632 [shape=cds, label=<<font color="black">1:app __x1__ = (ToString O)</font>> color="black" fillcolor="white" style=filled]
  node12641 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">5:let pos = [? __x4__]</td></tr>
      <tr><td align="left">6:let len = S.length</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12647 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">10:??? &quot;If the sequence of elements of id:{S} starting at id:{start} of length id:{searchLength} is the same as the full element sequence of id:{searchStr} , return value:{true} .&quot;</td></tr>
      <tr><td align="left">11:??? &quot;Otherwise , return value:{false} .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12630 [shape=cds, label=<<font color="black">0:app __x0__ = (RequireObjectCoercible this)</font>> color="black" fillcolor="white" style=filled]
  node12626 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node12643 [shape=cds, label=<<font color="black">7:app __x6__ = (min __x5__ len)</font>> color="black" fillcolor="white" style=filled]
  node12628 -> node12629 [ color="black"]
  node12642 -> node12643 [ color="black"]
  node12647 -> node12627 [ color="black"]
  node12635 -> node12636 [ color="black"]
  node12626 -> node12628 [ color="black"]
  node12643 -> node12644 [ color="black"]
  node12644 -> node12645 [ color="black"]
  node12637 -> node12638 [ color="black"]
  node12636 -> node12637 [label=<<font color="black">true</font>> color="black"]
  node12636 -> node12638 [label=<<font color="black">false</font>> color="black"]
  node12629 -> node12630 [ color="black"]
  node12646 -> node12647 [ color="black"]
  node12639 -> node12640 [ color="black"]
  node12631 -> node12632 [ color="black"]
  node12638 -> node12639 [ color="black"]
  node12632 -> node12633 [ color="black"]
  node12640 -> node12641 [ color="black"]
  node12645 -> node12646 [label=<<font color="black">true</font>> color="black"]
  node12645 -> node12647 [label=<<font color="black">false</font>> color="black"]
  node12641 -> node12642 [ color="black"]
  node12630 -> node12631 [ color="black"]
  node12633 -> node12634 [ color="black"]
  node12634 -> node12635 [ color="black"]
}
