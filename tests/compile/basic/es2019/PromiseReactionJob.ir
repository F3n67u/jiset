{
  let promiseCapability = reaction.Capability
  let type = reaction.Type
  let handler = reaction.Handler
  if (= handler undefined) if (= type "Fulfill") {
    app __x0__ = (NormalCompletion argument)
    let handlerResult = __x0__
  } else {
    assert (= type "Reject")
    app __x1__ = (ThrowCompletion argument)
    let handlerResult = __x1__
  } else {
    app __x2__ = (Call handler undefined (new [argument]))
    let handlerResult = __x2__
  }
  if (= promiseCapability undefined) {
    app __x3__ = (IsAbruptCompletion handlerResult)
    assert (! __x3__)
    app __x4__ = (NormalCompletion CONST_empty)
    return __x4__
  } else {}
  app __x5__ = (IsAbruptCompletion handlerResult)
  if __x5__ {
    app __x6__ = (Call promiseCapability.Reject undefined (new [handlerResult.Value]))
    let status = __x6__
  } else {
    app __x7__ = (Call promiseCapability.Resolve undefined (new [handlerResult.Value]))
    let status = __x7__
  }
  app __x8__ = (Completion status)
  return __x8__
}