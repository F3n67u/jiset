{
  [? V]
  if (! (= (typeof V) Reference)) return V else {}
  app __x0__ = (GetBase V)
  let base = __x0__
  app __x1__ = (IsUnresolvableReference V)
  if (= __x1__ true) throw ReferenceError else {}
  app __x2__ = (IsPropertyReference V)
  if (= __x2__ true) {
    app __x3__ = (HasPrimitiveBase V)
    if (= __x3__ true) {
      app __x4__ = (ToObject base)
      base = [! __x4__]
    } else {}
    app __x5__ = (GetReferencedName V)
    app __x6__ = (GetThisValue V)
    app __x7__ = (base.Get base __x5__ __x6__)
    return [? __x7__]
  } else {
    assert (is-instance-of base EnvironmentRecord)
    app __x8__ = (GetReferencedName V)
    app __x9__ = (IsStrictReference V)
    app __x10__ = (base.GetBindingValue base __x8__ __x9__)
    return [? __x10__]
  }
}