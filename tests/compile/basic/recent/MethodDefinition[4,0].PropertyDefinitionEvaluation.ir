{
  access __x0__ = (PropertyName "Evaluation")
  let propKey = __x0__
  if (is-completion propKey) if (= propKey.Type CONST_normal) propKey = propKey.Value else return propKey else {}
  propKey
  let scope = GLOBAL_context.LexicalEnvironment
  let sourceText = (get-syntax MethodDefinition)
  ??? "Let id:{formalParameterList} be an instance of the production grammar:{FormalParameters0} ."
  ??? "Let id:{closure} be OrdinaryFunctionCreate ( % Function . prototype % , id:{sourceText} , id:{formalParameterList} , nt:{FunctionBody} , const:{non-lexical-this} , id:{scope} ) ."
  app __x1__ = (MakeMethod closure object)
  __x1__
  app __x2__ = (SetFunctionName closure propKey "get")
  __x2__
  let desc = (new PropertyDescriptor("Get" -> closure, "Enumerable" -> enumerable, "Configurable" -> true))
  app __x3__ = (DefinePropertyOrThrow object propKey desc)
  if (is-completion __x3__) if (= __x3__.Type CONST_normal) __x3__ = __x3__.Value else return __x3__ else {}
  app __x4__ = (WrapCompletion __x3__)
  return __x4__
}