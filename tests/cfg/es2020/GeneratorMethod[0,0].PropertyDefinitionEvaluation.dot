digraph {
  node9590 [shape=cds, label=<<font color="black">7:app __x5__ = (SetFunctionName closure propKey)</font>> color="black" fillcolor="white" style=filled]
  node9580 [shape=cds, label=<<font color="black">0:access __x0__ = (PropertyName &quot;Evaluation&quot;)</font>> color="black" fillcolor="white" style=filled]
  node9593 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">10:return [? __x6__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node9588 [shape=cds, label=<<font color="black">6:app __x4__ = (DefinePropertyOrThrow closure &quot;prototype&quot; (new PropertyDescriptor(&quot;Value&quot; -&gt; prototype, &quot;Writable&quot; -&gt; true, &quot;Enumerable&quot; -&gt; false, &quot;Configurable&quot; -&gt; false)))</font>> color="black" fillcolor="white" style=filled]
  node9586 [shape=cds, label=<<font color="black">5:app __x3__ = (OrdinaryObjectCreate INTRINSIC_Generator_prototype)</font>> color="black" fillcolor="white" style=filled]
  node9581 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let propKey = __x0__</td></tr>
      <tr><td align="left">1:[? propKey]</td></tr>
      <tr><td align="left">2:let scope = GLOBAL_context.LexicalEnvironment</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node9585 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">4:__x2__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node9587 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">5:let prototype = __x3__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node9592 [shape=cds, label=<<font color="black">10:app __x6__ = (DefinePropertyOrThrow object propKey desc)</font>> color="black" fillcolor="white" style=filled]
  node9582 [shape=cds, label=<<font color="black">3:app __x1__ = (OrdinaryFunctionCreate INTRINSIC_Generator UniqueFormalParameters GeneratorBody CONST_nonDASHlexicalDASHthis scope)</font>> color="black" fillcolor="white" style=filled]
  node9578 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node9591 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">7:__x5__</td></tr>
      <tr><td align="left">8:closure.SourceText = (get-syntax GeneratorMethod)</td></tr>
      <tr><td align="left">9:let desc = (new PropertyDescriptor(&quot;Value&quot; -&gt; closure, &quot;Writable&quot; -&gt; true, &quot;Enumerable&quot; -&gt; enumerable, &quot;Configurable&quot; -&gt; true))</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node9579 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node9583 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">3:let closure = __x1__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node9589 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">6:__x4__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node9584 [shape=cds, label=<<font color="black">4:app __x2__ = (MakeMethod closure object)</font>> color="black" fillcolor="white" style=filled]
  node9592 -> node9593 [ color="black"]
  node9583 -> node9584 [ color="black"]
  node9581 -> node9582 [ color="black"]
  node9578 -> node9580 [ color="black"]
  node9591 -> node9592 [ color="black"]
  node9580 -> node9581 [ color="black"]
  node9584 -> node9585 [ color="black"]
  node9590 -> node9591 [ color="black"]
  node9589 -> node9590 [ color="black"]
  node9588 -> node9589 [ color="black"]
  node9585 -> node9586 [ color="black"]
  node9582 -> node9583 [ color="black"]
  node9587 -> node9588 [ color="black"]
  node9586 -> node9587 [ color="black"]
  node9593 -> node9579 [ color="black"]
}
