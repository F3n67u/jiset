["Let", {
  "id": "string"
}, "be", "GetArgument", "(", {
  "id": "argumentsList"
}, ",", "0", ")", ".", {
  "k": 0
}, "Let", {
  "id": "inputString"
}, "be", "?", "ToString", "(", {
  "id": "string"
}, ")", ".", {
  "k": 1
}, "Let", {
  "id": "trimmedString"
}, "be", "!", "TrimString", "(", {
  "id": "inputString"
}, ",", {
  "const": "start"
}, ")", ".", {
  "k": 2
}, "If", "neither", {
  "id": "trimmedString"
}, "nor", "any", "prefix", "of", {
  "id": "trimmedString"
}, "satisfies", "the", "syntax", "of", "a", {
  "nt": "StrDecimalLiteral"
}, "(", "see", "7", ".", "1", ".", "4", ".", "1", ")", ",", "return", {
  "value": "NaN"
}, ".", {
  "k": 3
}, "Let", {
  "id": "numberString"
}, "be", "the", "longest", "prefix", "of", {
  "id": "trimmedString"
}, ",", "which", "might", "be", {
  "id": "trimmedString"
}, "itself", ",", "that", "satisfies", "the", "syntax", "of", "a", {
  "nt": "StrDecimalLiteral"
}, ".", {
  "k": 4
}, "Let", {
  "id": "mathFloat"
}, "be", "MV", "of", {
  "id": "numberString"
}, ".", {
  "k": 5
}, "If", {
  "id": "mathFloat"
}, "=", "0", "‚Ñù", ",", "then", {
  "in": null
}, "If", "the", "first", "code", "unit", "of", {
  "id": "trimmedString"
}, "is", "the", "code", "unit", "0x002D", "(", "HYPHEN", "-", "MINUS", ")", ",", "return", {
  "value": "-0"
}, ".", {
  "k": 7
}, "Return", {
  "value": "+0"
}, ".", {
  "k": 8
}, {
  "out": null
}, {
  "k": 6
}, "Return", "the", "Number", "value", "for", {
  "id": "mathFloat"
}, ".", {
  "k": 9
}]
