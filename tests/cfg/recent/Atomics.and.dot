digraph {
  node17903 [shape=cds, label=<<font color="black">app typedArray = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node17907 [shape=cds, label=<<font color="black">2:app __x0__ = (AtomicReadModifyWrite typedArray index value and)</font>> color="black" fillcolor="white" style=filled]
  node17902 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node17908 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">2:return [? __x0__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17905 [shape=cds, label=<<font color="black">app value = (GetArgument argumentsList 2i)</font>> color="black" fillcolor="white" style=filled]
  node17901 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node17906 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:??? &quot;Let id:{and} be a new read - modify - write modification function with parameters ( id:{xBytes} , id:{yBytes} ) that captures nothing and performs the following steps atomically when called : in:{} out:{}&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17904 [shape=cds, label=<<font color="black">app index = (GetArgument argumentsList 1i)</font>> color="black" fillcolor="white" style=filled]
  node17908 -> node17902 [ color="black"]
  node17901 -> node17903 [ color="black"]
  node17906 -> node17907 [ color="black"]
  node17903 -> node17904 [ color="black"]
  node17905 -> node17906 [ color="black"]
  node17907 -> node17908 [ color="black"]
  node17904 -> node17905 [ color="black"]
}
