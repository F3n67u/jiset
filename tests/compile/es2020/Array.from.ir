{
  app items = (GetArgument argumentsList 0i)
  app mapfn = (GetArgument argumentsList 1i)
  app thisArg = (GetArgument argumentsList 2i)
  [0] let C = this
  [2] if (= mapfn undefined) let mapping = false else {
    [3] app __x0__ = (IsCallable mapfn)
    [3] if (= __x0__ false) {
      app __x1__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_TypeError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
      return __x1__
    } else [31] {}
    [4] let mapping = true
  }
  [5] app __x2__ = (GetMethod items SYMBOL_iterator)
  [5] if (is-completion __x2__) if (= __x2__.Type CONST_normal) __x2__ = __x2__.Value else return __x2__ else [31] {}
  [5] let usingIterator = __x2__
  [6] if (! (= usingIterator undefined)) {
    [9] app __x3__ = (IsConstructor C)
    [9] if (= __x3__ true) {
      [8] app __x4__ = (Construct C)
      [8] if (is-completion __x4__) if (= __x4__.Type CONST_normal) __x4__ = __x4__.Value else return __x4__ else [31] {}
      [8] let A = __x4__
    } else {
      [10] app __x5__ = (ArrayCreate 0i)
      [10] if (is-completion __x5__) if (= __x5__.Type CONST_normal) __x5__ = __x5__.Value else return __x5__ else [31] {}
      [10] let A = __x5__
    }
    [11] app __x6__ = (GetIterator items CONST_sync usingIterator)
    [11] if (is-completion __x6__) if (= __x6__.Type CONST_normal) __x6__ = __x6__.Value else return __x6__ else [31] {}
    [11] let iteratorRecord = __x6__
    [12] let k = 0i
    [13] while true {
      [14] if (! (< k (- 9007199254740992i 1i))) {
        [15] app __x7__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_TypeError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
        [15] let error = __x7__
        [16] app __x8__ = (IteratorClose iteratorRecord error)
        [16] if (is-completion __x8__) if (= __x8__.Type CONST_normal) __x8__ = __x8__.Value else return __x8__ else [31] {}
        [16] app __x9__ = (WrapCompletion __x8__)
        [16] return __x9__
      } else [31] {}
      [17] app __x10__ = (ToString k)
      [17] if (is-completion __x10__) if (= __x10__.Type CONST_normal) __x10__ = __x10__.Value else return __x10__ else [31] {}
      [17] let Pk = __x10__
      [18] app __x11__ = (IteratorStep iteratorRecord)
      [18] if (is-completion __x11__) if (= __x11__.Type CONST_normal) __x11__ = __x11__.Value else return __x11__ else [31] {}
      [18] let next = __x11__
      [19] if (= next false) {
        [20] app __x12__ = (Set A "length" k true)
        [20] if (is-completion __x12__) if (= __x12__.Type CONST_normal) __x12__ = __x12__.Value else return __x12__ else [31] {}
        [20] __x12__
        [21] app __x13__ = (WrapCompletion A)
        [21] return __x13__
      } else [31] {}
      [22] app __x14__ = (IteratorValue next)
      [22] if (is-completion __x14__) if (= __x14__.Type CONST_normal) __x14__ = __x14__.Value else return __x14__ else [31] {}
      [22] let nextValue = __x14__
      [27] if (= mapping true) {
        [24] app __x15__ = (Call mapfn thisArg (new [nextValue, k]))
        [24] let mappedValue = __x15__
        [25] app __x16__ = (IsAbruptCompletion mappedValue)
        [25] if __x16__ {
          app __x17__ = (IteratorClose iteratorRecord mappedValue)
          if (is-completion __x17__) if (= __x17__.Type CONST_normal) __x17__ = __x17__.Value else return __x17__ else [31] {}
          app __x18__ = (WrapCompletion __x17__)
          return __x18__
        } else [31] {}
        [26] mappedValue = mappedValue.Value
      } else let mappedValue = nextValue
      [28] app __x19__ = (CreateDataPropertyOrThrow A Pk mappedValue)
      [28] let defineStatus = __x19__
      [29] app __x20__ = (IsAbruptCompletion defineStatus)
      [29] if __x20__ {
        app __x21__ = (IteratorClose iteratorRecord defineStatus)
        if (is-completion __x21__) if (= __x21__.Type CONST_normal) __x21__ = __x21__.Value else return __x21__ else [31] {}
        app __x22__ = (WrapCompletion __x21__)
        return __x22__
      } else [31] {}
      [30] k = (+ k 1i)
    }
  } else [31] {}
  [32] app __x23__ = (ToObject items)
  [32] if (is-completion __x23__) if (= __x23__.Type CONST_normal) __x23__ = __x23__.Value else return __x23__ else [31] {}
  [32] let arrayLike = __x23__
  [33] app __x24__ = (LengthOfArrayLike arrayLike)
  [33] if (is-completion __x24__) if (= __x24__.Type CONST_normal) __x24__ = __x24__.Value else return __x24__ else [31] {}
  [33] let len = __x24__
  [36] app __x25__ = (IsConstructor C)
  [36] if (= __x25__ true) {
    [35] app __x26__ = (Construct C (new [len]))
    [35] if (is-completion __x26__) if (= __x26__.Type CONST_normal) __x26__ = __x26__.Value else return __x26__ else [31] {}
    [35] let A = __x26__
  } else {
    [37] app __x27__ = (ArrayCreate len)
    [37] if (is-completion __x27__) if (= __x27__.Type CONST_normal) __x27__ = __x27__.Value else return __x27__ else [31] {}
    [37] let A = __x27__
  }
  [38] let k = 0i
  [39] while (< k len) {
    [40] app __x28__ = (ToString k)
    [40] if (is-completion __x28__) if (= __x28__.Type CONST_normal) __x28__ = __x28__.Value else return __x28__ else [31] {}
    [40] let Pk = __x28__
    [41] app __x29__ = (Get arrayLike Pk)
    [41] if (is-completion __x29__) if (= __x29__.Type CONST_normal) __x29__ = __x29__.Value else return __x29__ else [31] {}
    [41] let kValue = __x29__
    [44] if (= mapping true) {
      [43] app __x30__ = (Call mapfn thisArg (new [kValue, k]))
      [43] if (is-completion __x30__) if (= __x30__.Type CONST_normal) __x30__ = __x30__.Value else return __x30__ else [31] {}
      [43] let mappedValue = __x30__
    } else let mappedValue = kValue
    [45] app __x31__ = (CreateDataPropertyOrThrow A Pk mappedValue)
    [45] if (is-completion __x31__) if (= __x31__.Type CONST_normal) __x31__ = __x31__.Value else return __x31__ else [31] {}
    [45] __x31__
    [46] k = (+ k 1i)
  }
  [47] app __x32__ = (Set A "length" len true)
  [47] if (is-completion __x32__) if (= __x32__.Type CONST_normal) __x32__ = __x32__.Value else return __x32__ else [31] {}
  [47] __x32__
  [48] app __x33__ = (WrapCompletion A)
  [48] return __x33__
}