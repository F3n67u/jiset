{
  let module = this
  ??? "For each Record { [ [ Module ] ] , [ [ ExportName ] ] } id:{r} in id:{resolveSet} , do : in:{} out:{}"
  append (new Record("Module" -> module, "ExportName" -> exportName)) -> resolveSet
  let __x0__ = module.LocalExportEntries
  let __x1__ = 0i
  while (< __x1__ __x0__.length) {
    let e = __x0__[__x1__]
    app __x2__ = (SameValue exportName e.ExportName)
    if (= __x2__ true) {
      app __x3__ = (WrapCompletion (new Record("Module" -> module, "BindingName" -> e.LocalName)))
      return __x3__
    } else {}
    __x1__ = (+ __x1__ 1i)
  }
  let __x4__ = module.IndirectExportEntries
  let __x5__ = 0i
  while (< __x5__ __x4__.length) {
    let e = __x4__[__x5__]
    app __x6__ = (SameValue exportName e.ExportName)
    if (= __x6__ true) {
      app __x7__ = (HostResolveImportedModule module e.ModuleRequest)
      if (is-completion __x7__) if (= __x7__.Type CONST_normal) __x7__ = __x7__.Value else return __x7__ else {}
      let importedModule = __x7__
      app __x8__ = (importedModule.ResolveExport importedModule e.ImportName resolveSet exportStarSet)
      if (is-completion __x8__) if (= __x8__.Type CONST_normal) __x8__ = __x8__.Value else return __x8__ else {}
      let indirectResolution = __x8__
      if (! (= indirectResolution null)) {
        app __x9__ = (WrapCompletion indirectResolution)
        return __x9__
      } else {}
    } else {}
    __x5__ = (+ __x5__ 1i)
  }
  app __x10__ = (SameValue exportName "default")
  if (= __x10__ true) throw INTRINSIC_SyntaxError else {}
  if (contains exportStarSet module) {
    app __x11__ = (WrapCompletion null)
    return __x11__
  } else {}
  append module -> exportStarSet
  let starResolution = null
  let __x12__ = module.StarExportEntries
  let __x13__ = 0i
  while (< __x13__ __x12__.length) {
    let e = __x12__[__x13__]
    app __x14__ = (HostResolveImportedModule module e.ModuleRequest)
    if (is-completion __x14__) if (= __x14__.Type CONST_normal) __x14__ = __x14__.Value else return __x14__ else {}
    let importedModule = __x14__
    app __x15__ = (importedModule.ResolveExport importedModule exportName resolveSet exportStarSet)
    if (is-completion __x15__) if (= __x15__.Type CONST_normal) __x15__ = __x15__.Value else return __x15__ else {}
    let resolution = __x15__
    if (= resolution "ambiguous") {
      app __x16__ = (WrapCompletion "ambiguous")
      return __x16__
    } else {}
    if (! (= resolution null)) if (= starResolution null) let starResolution = resolution else {
      let __x17__ = true
      __x17__ = (! (= resolution.Module starResolution.Module))
      if __x17__ {} else {
        app __x18__ = (SameValue resolution.BindingName starResolution.BindingName)
        __x17__ = (= __x18__ false)
      }
      if __x17__ {
        app __x19__ = (WrapCompletion "ambiguous")
        return __x19__
      } else {}
    } else {}
    __x13__ = (+ __x13__ 1i)
  }
  app __x20__ = (WrapCompletion starResolution)
  return __x20__
}