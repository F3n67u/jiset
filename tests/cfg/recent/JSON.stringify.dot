digraph {
  node18187 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">9:PropertyList = (new [])</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18207 [shape=diamond, label=<<font color="black">(= __x10__ Object)</font>> color="black" fillcolor="white" style=filled]
  node18197 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">item = v</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18183 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">ReplacerFunction = replacer</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18188 [shape=cds, label=<<font color="black">10:app __x3__ = (LengthOfArrayLike replacer)</font>> color="black" fillcolor="white" style=filled]
  node18199 [shape=diamond, label=<<font color="black">(= __x7__ Number)</font>> color="black" fillcolor="white" style=filled]
  node18189 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">10:let len = [? __x3__]</td></tr>
      <tr><td align="left">11:let k = 0i</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18173 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node18192 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">13:let prop = [! __x4__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18202 [shape=cds, label=<<font color="black">app __x9__ = (Type v)</font>> color="black" fillcolor="white" style=filled]
  node18179 [shape=cds, label=<<font color="black">3:app __x0__ = (Type replacer)</font>> color="black" fillcolor="white" style=filled]
  node18180 [shape=diamond, label=<<font color="black">(= __x0__ Object)</font>> color="black" fillcolor="white" style=filled]
  node18228 [shape=cds, label=<<font color="black">39:app __x19__ = (SerializeJSONProperty state &quot;&quot; wrapper)</font>> color="black" fillcolor="white" style=filled]
  node18193 [shape=cds, label=<<font color="black">14:app __x5__ = (Get replacer prop)</font>> color="black" fillcolor="white" style=filled]
  node18223 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let gap = &quot;&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18210 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">25:space = [? __x11__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18178 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let stack = (new [])</td></tr>
      <tr><td align="left">1:let indent = &quot;&quot;</td></tr>
      <tr><td align="left">2:let PropertyList = undefined</td></tr>
      <tr><td align="left">2:let ReplacerFunction = undefined</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18184 [shape=cds, label=<<font color="black">7:app __x2__ = (IsArray replacer)</font>> color="black" fillcolor="white" style=filled]
  node18190 [shape=diamond, label=<<font color="black">(&lt; k len)</font>> color="black" fillcolor="white" style=filled]
  node18215 [shape=diamond, label=<<font color="black">(= __x13__ Number)</font>> color="black" fillcolor="white" style=filled]
  node18175 [shape=cds, label=<<font color="black">app value = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node18212 [shape=cds, label=<<font color="black">27:app __x12__ = (ToString space)</font>> color="black" fillcolor="white" style=filled]
  node18177 [shape=cds, label=<<font color="black">app space = (GetArgument argumentsList 2i)</font>> color="black" fillcolor="white" style=filled]
  node18200 [shape=cds, label=<<font color="black">app __x8__ = (ToString v)</font>> color="black" fillcolor="white" style=filled]
  node18209 [shape=cds, label=<<font color="black">25:app __x11__ = (ToNumber space)</font>> color="black" fillcolor="white" style=filled]
  node18204 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">??? &quot;If id:{v} has a [ [ StringData ] ] or [ [ NumberData ] ] internal slot , set id:{item} to ? ToString ( id:{v} ) .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18222 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">??? &quot;If the length of id:{space} is 10 or less , let id:{gap} be id:{space} ; otherwise let id:{gap} be the substring of id:{space} from 0 to 10 .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18205 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">20:??? &quot;If id:{item} is not value:{undefined} and id:{item} is not currently an element of id:{PropertyList} , then in:{} out:{}&quot;</td></tr>
      <tr><td align="left">22:k = (+ k 1i)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18219 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">30:spaceMV = __x15__</td></tr>
      <tr><td align="left">31:??? &quot;If id:{spaceMV} &lt; 1 , let id:{gap} be the empty String ; otherwise let id:{gap} be the String value containing id:{spaceMV} occurrences of the code unit 0x0020 ( SPACE ) .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18208 [shape=diamond, label=<<font color="black">(! (= space.NumberData absent))</font>> color="black" fillcolor="white" style=filled]
  node18225 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">36:let wrapper = [! __x17__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18176 [shape=cds, label=<<font color="black">app replacer = (GetArgument argumentsList 1i)</font>> color="black" fillcolor="white" style=filled]
  node18201 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">item = [! __x8__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18216 [shape=cds, label=<<font color="black">29:app __x14__ = (ToIntegerOrInfinity space)</font>> color="black" fillcolor="white" style=filled]
  node18191 [shape=cds, label=<<font color="black">13:app __x4__ = (ToString k)</font>> color="black" fillcolor="white" style=filled]
  node18196 [shape=diamond, label=<<font color="black">(= __x6__ String)</font>> color="black" fillcolor="white" style=filled]
  node18229 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">39:return [? __x19__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18195 [shape=cds, label=<<font color="black">18:app __x6__ = (Type v)</font>> color="black" fillcolor="white" style=filled]
  node18213 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">27:space = [? __x12__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18182 [shape=diamond, label=<<font color="black">(= __x1__ true)</font>> color="black" fillcolor="white" style=filled]
  node18218 [shape=cds, label=<<font color="black">30:app __x15__ = (min 10i spaceMV)</font>> color="black" fillcolor="white" style=filled]
  node18226 [shape=cds, label=<<font color="black">37:app __x18__ = (CreateDataPropertyOrThrow wrapper &quot;&quot; value)</font>> color="black" fillcolor="white" style=filled]
  node18185 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">7:let isArray = [? __x2__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18198 [shape=cds, label=<<font color="black">app __x7__ = (Type v)</font>> color="black" fillcolor="white" style=filled]
  node18211 [shape=diamond, label=<<font color="black">(! (= space.StringData absent))</font>> color="black" fillcolor="white" style=filled]
  node18224 [shape=cds, label=<<font color="black">36:app __x17__ = (OrdinaryObjectCreate INTRINSIC_Object_prototype)</font>> color="black" fillcolor="white" style=filled]
  node18217 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">29:let spaceMV = [! __x14__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18194 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">14:let v = [? __x5__]</td></tr>
      <tr><td align="left">15:let item = undefined</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18206 [shape=cds, label=<<font color="black">23:app __x10__ = (Type space)</font>> color="black" fillcolor="white" style=filled]
  node18220 [shape=cds, label=<<font color="black">app __x16__ = (Type space)</font>> color="black" fillcolor="white" style=filled]
  node18203 [shape=diamond, label=<<font color="black">(= __x9__ Object)</font>> color="black" fillcolor="white" style=filled]
  node18221 [shape=diamond, label=<<font color="black">(= __x16__ String)</font>> color="black" fillcolor="white" style=filled]
  node18227 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">37:[! __x18__]</td></tr>
      <tr><td align="left">38:let state = (new Record(&quot;ReplacerFunction&quot; -&gt; ReplacerFunction, &quot;Stack&quot; -&gt; stack, &quot;Indent&quot; -&gt; indent, &quot;Gap&quot; -&gt; gap, &quot;PropertyList&quot; -&gt; PropertyList))</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18174 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node18186 [shape=diamond, label=<<font color="black">(= isArray true)</font>> color="black" fillcolor="white" style=filled]
  node18214 [shape=cds, label=<<font color="black">34:app __x13__ = (Type space)</font>> color="black" fillcolor="white" style=filled]
  node18181 [shape=cds, label=<<font color="black">6:app __x1__ = (IsCallable replacer)</font>> color="black" fillcolor="white" style=filled]
  node18219 -> node18224 [ color="black"]
  node18223 -> node18224 [ color="black"]
  node18175 -> node18176 [ color="black"]
  node18194 -> node18195 [ color="black"]
  node18198 -> node18199 [ color="black"]
  node18211 -> node18212 [label=<<font color="black">true</font>> color="black"]
  node18211 -> node18214 [label=<<font color="black">false</font>> color="black"]
  node18181 -> node18182 [ color="black"]
  node18221 -> node18222 [label=<<font color="black">true</font>> color="black"]
  node18221 -> node18223 [label=<<font color="black">false</font>> color="black"]
  node18206 -> node18207 [ color="black"]
  node18178 -> node18179 [ color="black"]
  node18225 -> node18226 [ color="black"]
  node18191 -> node18192 [ color="black"]
  node18199 -> node18200 [label=<<font color="black">true</font>> color="black"]
  node18199 -> node18202 [label=<<font color="black">false</font>> color="black"]
  node18192 -> node18193 [ color="black"]
  node18189 -> node18190 [ color="black"]
  node18208 -> node18209 [label=<<font color="black">true</font>> color="black"]
  node18208 -> node18211 [label=<<font color="black">false</font>> color="black"]
  node18201 -> node18205 [ color="black"]
  node18229 -> node18174 [ color="black"]
  node18180 -> node18181 [label=<<font color="black">true</font>> color="black"]
  node18180 -> node18206 [label=<<font color="black">false</font>> color="black"]
  node18177 -> node18178 [ color="black"]
  node18218 -> node18219 [ color="black"]
  node18215 -> node18216 [label=<<font color="black">true</font>> color="black"]
  node18215 -> node18220 [label=<<font color="black">false</font>> color="black"]
  node18176 -> node18177 [ color="black"]
  node18205 -> node18190 [ color="black"]
  node18209 -> node18210 [ color="black"]
  node18183 -> node18206 [ color="black"]
  node18193 -> node18194 [ color="black"]
  node18214 -> node18215 [ color="black"]
  node18210 -> node18214 [ color="black"]
  node18213 -> node18214 [ color="black"]
  node18186 -> node18187 [label=<<font color="black">true</font>> color="black"]
  node18186 -> node18206 [label=<<font color="black">false</font>> color="black"]
  node18202 -> node18203 [ color="black"]
  node18196 -> node18197 [label=<<font color="black">true</font>> color="black"]
  node18196 -> node18198 [label=<<font color="black">false</font>> color="black"]
  node18203 -> node18204 [label=<<font color="black">true</font>> color="black"]
  node18203 -> node18205 [label=<<font color="black">false</font>> color="black"]
  node18204 -> node18205 [ color="black"]
  node18200 -> node18201 [ color="black"]
  node18228 -> node18229 [ color="black"]
  node18227 -> node18228 [ color="black"]
  node18184 -> node18185 [ color="black"]
  node18216 -> node18217 [ color="black"]
  node18190 -> node18191 [label=<<font color="black">true</font>> color="black"]
  node18190 -> node18206 [label=<<font color="black">false</font>> color="black"]
  node18197 -> node18205 [ color="black"]
  node18173 -> node18175 [ color="black"]
  node18220 -> node18221 [ color="black"]
  node18188 -> node18189 [ color="black"]
  node18212 -> node18213 [ color="black"]
  node18185 -> node18186 [ color="black"]
  node18222 -> node18224 [ color="black"]
  node18224 -> node18225 [ color="black"]
  node18195 -> node18196 [ color="black"]
  node18207 -> node18208 [label=<<font color="black">true</font>> color="black"]
  node18207 -> node18214 [label=<<font color="black">false</font>> color="black"]
  node18187 -> node18188 [ color="black"]
  node18217 -> node18218 [ color="black"]
  node18179 -> node18180 [ color="black"]
  node18182 -> node18183 [label=<<font color="black">true</font>> color="black"]
  node18182 -> node18184 [label=<<font color="black">false</font>> color="black"]
  node18226 -> node18227 [ color="black"]
}
