{
  let O = this
  assert (&& (= (typeof O) Object) (! (= O.SyncIteratorRecord absent)))
  app __x0__ = (NewPromiseCapability INTRINSIC_Promise)
  let promiseCapability = [! __x0__]
  let syncIterator = O.SyncIteratorRecord.Iterator
  app __x1__ = (GetMethod syncIterator "return")
  let return = __x1__
  if (is-completion return) if (= return.Type CONST_normal) return = return.Value else {
    app __x2__ = (Call promiseCapability.Reject undefined (new [return.Value]))
    if (&& (is-completion __x2__) (! (= __x2__.Type CONST_normal))) return __x2__ else {}
    return promiseCapability.Promise
  } else {}
  return
  if (= return undefined) {
    app __x3__ = (CreateIterResultObject value true)
    let iterResult = [! __x3__]
    app __x4__ = (Call promiseCapability.Resolve undefined (new [iterResult]))
    [! __x4__]
    return promiseCapability.Promise
  } else {}
  app __x5__ = (Call return syncIterator (new [value]))
  let result = __x5__
  if (is-completion result) if (= result.Type CONST_normal) result = result.Value else {
    app __x6__ = (Call promiseCapability.Reject undefined (new [result.Value]))
    if (&& (is-completion __x6__) (! (= __x6__.Type CONST_normal))) return __x6__ else {}
    return promiseCapability.Promise
  } else {}
  result
  if (! (= (typeof result) Object)) {
    app __x7__ = (Call promiseCapability.Reject undefined (new [??? "TypeError"]))
    [! __x7__]
    return promiseCapability.Promise
  } else {}
  app __x8__ = (AsyncFromSyncIteratorContinuation result promiseCapability)
  return [! __x8__]
}