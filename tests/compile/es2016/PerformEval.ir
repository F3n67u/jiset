{
  [1] app __x0__ = (Type x)
  [1] if (! (= __x0__ String)) {
    app __x1__ = (WrapCompletion x)
    return __x1__
  } else [0] {}
  [2] ??? "Let id:{script} be the ECMAScript code that is the result of parsing id:{x} , interpreted as UTF - 16 encoded Unicode text as described in link:{} , for the goal symbol nt:{Script} . If the parse fails , throw a value:{SyntaxError} exception . If any early errors are detected , throw a value:{SyntaxError} or a value:{ReferenceError} exception , depending on the type of the error ( but see also clause link:{} ) . Parsing and early error detection may be interweaved in an implementation dependent manner ."
  [3] access __x2__ = (script "Contains")
  [3] app __x3__ = (__x2__ "ScriptBody")
  [3] if (= __x3__ false) {
    app __x4__ = (WrapCompletion undefined)
    return __x4__
  } else [0] {}
  [4] access __x5__ = (script "ScriptBody")
  [4] let body = __x5__
  [6] if (= strictCaller true) let strictEval = true else {
    access __x6__ = (script "IsStrict")
    let strictEval = __x6__
  }
  [7] ??? "Let id:{ctx} be the running execution context . If id:{direct} is value:{true} , id:{ctx} will be the execution context that performed the direct eval . If id:{direct} is value:{false} , id:{ctx} will be the execution context for the invocation of the code:{eval} function ."
  [11] if (= direct true) {
    [9] app __x7__ = (NewDeclarativeEnvironment ctx.LexicalEnvironment)
    [9] let lexEnv = __x7__
    [10] let varEnv = ctx.VariableEnvironment
  } else {
    [12] app __x8__ = (NewDeclarativeEnvironment evalRealm.GlobalEnv)
    [12] let lexEnv = __x8__
    [13] let varEnv = evalRealm.GlobalEnv
  }
  [14] if (= strictEval true) let varEnv = lexEnv else [0] {}
  [15] if (= ctx null) GLOBAL_context = null else [0] {}
  [16] let evalCxt = (new ExecutionContext("SubMap" -> (new SubMap())))
  [17] evalCxt.Function = null
  [18] evalCxt.Realm = evalRealm
  [19] evalCxt.ScriptOrModule = ctx.ScriptOrModule
  [20] evalCxt.VariableEnvironment = varEnv
  [21] evalCxt.LexicalEnvironment = lexEnv
  [22] append evalCxt -> GLOBAL_executionStack
  [22] GLOBAL_context = GLOBAL_executionStack[(- GLOBAL_executionStack.length 1i)]
  [23] app __x9__ = (EvalDeclarationInstantiation body varEnv lexEnv strictEval)
  [23] let result = __x9__
  [24] if (= result.Type CONST_normal) {
    [25] access __x10__ = (body "Evaluation")
    [25] let result = __x10__
  } else [0] {}
  [26] if (&& (= result.Type CONST_normal) (= result.Value CONST_empty)) {
    [27] app __x11__ = (NormalCompletion undefined)
    [27] let result = __x11__
  } else [0] {}
  [28] GLOBAL_context = null
  [28] if (= GLOBAL_executionStack[(- GLOBAL_executionStack.length 1i)] evalCxt) (pop GLOBAL_executionStack (- GLOBAL_executionStack.length 1i)) else [0] {}
  [29] ??? "Resume the context that is now on the top of the execution context stack as the running execution context ."
  [30] app __x12__ = (Completion result)
  [30] app __x13__ = (WrapCompletion __x12__)
  [30] return __x13__
}