digraph {
  node18090 [shape=cds, label=<<font color="black">2:app __x0__ = (IsCallable onFinally)</font>> color="black" fillcolor="white" style=filled]
  node18094 [shape=cds, label=<<font color="black">5:app __x2__ = (IsConstructor C)</font>> color="black" fillcolor="white" style=filled]
  node18097 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">6:let promise = [? __x3__]</td></tr>
      <tr><td align="left">7:??? &quot;Let id:{thrower} be equivalent to a function that throws id:{reason} .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18091 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">2:assert (= __x0__ true)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18087 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node18095 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">5:assert (= __x2__ true)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18096 [shape=cds, label=<<font color="black">6:app __x3__ = (PromiseResolve C result)</font>> color="black" fillcolor="white" style=filled]
  node18092 [shape=cds, label=<<font color="black">3:app __x1__ = (Call onFinally undefined)</font>> color="black" fillcolor="white" style=filled]
  node18088 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node18093 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">3:let result = [? __x1__]</td></tr>
      <tr><td align="left">4:let C = F.Constructor</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18098 [shape=cds, label=<<font color="black">8:app __x4__ = (Invoke promise &quot;then&quot; (new [thrower]))</font>> color="black" fillcolor="white" style=filled]
  node18099 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">8:return [? __x4__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18089 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let F = GLOBAL_context.Function</td></tr>
      <tr><td align="left">1:let onFinally = F.OnFinally</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18099 -> node18088 [ color="black"]
  node18098 -> node18099 [ color="black"]
  node18090 -> node18091 [ color="black"]
  node18092 -> node18093 [ color="black"]
  node18097 -> node18098 [ color="black"]
  node18094 -> node18095 [ color="black"]
  node18093 -> node18094 [ color="black"]
  node18095 -> node18096 [ color="black"]
  node18091 -> node18092 [ color="black"]
  node18096 -> node18097 [ color="black"]
  node18087 -> node18089 [ color="black"]
  node18089 -> node18090 [ color="black"]
}
