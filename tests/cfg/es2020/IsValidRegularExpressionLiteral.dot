digraph {
  node4124 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node4130 [shape=diamond, label=<<font color="black">(contains __x1__ ??? &quot;u&quot;)</font>> color="black" fillcolor="white" style=filled]
  node4128 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">2:let P = __x0__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node4131 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">??? &quot;Parse id:{P} using the grammars in link:{unhandled: sec-patterns} . The goal symbol for the parse is | Pattern [ + U , + N ] | . If id:{P} did not conform to the grammar , if any elements of id:{P} were not matched by the parse , or if any Early Error conditions exist , return value:{false} . Otherwise , return value:{true} .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node4127 [shape=cds, label=<<font color="black">2:access __x0__ = (literal &quot;BodyText&quot;)</font>> color="black" fillcolor="white" style=filled]
  node4132 [shape=cds, label=<<font color="black">5:app __x2__ = (UTF16Encode P)</font>> color="black" fillcolor="white" style=filled]
  node4133 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">5:let stringValue = __x2__</td></tr>
      <tr><td align="left">6:??? &quot;Let id:{pText} be the sequence of code points resulting from interpreting each of the 16 - bit elements of id:{stringValue} as a Unicode BMP code point . UTF - 16 decoding is not applied to the elements .&quot;</td></tr>
      <tr><td align="left">7:??? &quot;Parse id:{pText} using the grammars in link:{unhandled: sec-patterns} . The goal symbol for the parse is | Pattern [ ~ U , ~ N ] | . If the result of parsing contains a nt:{GroupName} , reparse with the goal symbol | Pattern [ ~ U , + N ] | . If id:{P} did not conform to the grammar , if any elements of id:{P} were not matched by the parse , or if any Early Error conditions exist , return value:{false} . Otherwise , return value:{true} .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node4126 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:assert (is-instance-of literal RegularExpressionLiteral)</td></tr>
      <tr><td align="left">1:??? &quot;If FlagText of id:{literal} contains any code points other than code:{g} , code:{i} , code:{m} , code:{s} , code:{u} , or code:{y} , or if it contains the same code point more than once , return value:{false} .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node4125 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node4129 [shape=cds, label=<<font color="black">3:access __x1__ = (literal &quot;FlagText&quot;)</font>> color="black" fillcolor="white" style=filled]
  node4128 -> node4129 [ color="black"]
  node4130 -> node4131 [label=<<font color="black">true</font>> color="black"]
  node4130 -> node4132 [label=<<font color="black">false</font>> color="black"]
  node4126 -> node4127 [ color="black"]
  node4131 -> node4132 [ color="black"]
  node4124 -> node4126 [ color="black"]
  node4133 -> node4125 [ color="black"]
  node4127 -> node4128 [ color="black"]
  node4132 -> node4133 [ color="black"]
  node4129 -> node4130 [ color="black"]
}
