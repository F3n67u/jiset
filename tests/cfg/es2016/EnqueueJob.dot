digraph {
  node0 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node2 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">3:let callerContext = GLOBAL_context</td></tr>
      <tr><td align="left">4:let callerRealm = callerContext.Realm</td></tr>
      <tr><td align="left">5:let callerScriptOrModule = callerContext.ScriptOrModule</td></tr>
      <tr><td align="left">6:let pending = (new PendingJob(&quot;Job&quot; -&gt; job, &quot;Arguments&quot; -&gt; arguments, &quot;Realm&quot; -&gt; callerRealm, &quot;ScriptOrModule&quot; -&gt; callerScriptOrModule, &quot;HostDefined&quot; -&gt; undefined))</td></tr>
      <tr><td align="left">8:??? &quot;Add id:{pending} at the back of the Job Queue named by id:{queueName} .&quot;</td></tr>
      <tr><td align="left">9:return CONST_empty</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node1 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node0 -> node2 [ color="black"]
  node2 -> node1 [ color="black"]
}
