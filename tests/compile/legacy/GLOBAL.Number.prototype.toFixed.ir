{
  app __x0__ = (GetArgument argumentsList 0i)
  let fractionDigits = __x0__
  app __x1__ = (thisNumberValue this)
  if (is-completion __x1__) if (= __x1__.Type CONST_normal) __x1__ = __x1__.Value else return __x1__ else {}
  let x = __x1__
  app __x2__ = (ToInteger fractionDigits)
  if (is-completion __x2__) if (= __x2__.Type CONST_normal) __x2__ = __x2__.Value else return __x2__ else {}
  let f = __x2__
  if (|| (< f 0i) (< 100i f)) {
    app __x3__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_RangeError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
    return __x3__
  } else {}
  if (= x NaN) {
    app __x4__ = (WrapCompletion "NaN")
    return __x4__
  } else {}
  let s = ""
  if (< x 0i) {
    s = "-"
    x = (- x)
  } else {}
  if (! (< x (** 10.0 21i))) {
    app __x5__ = (ToString x)
    if (is-completion __x5__) if (= __x5__.Type CONST_normal) __x5__ = __x5__.Value else return __x5__ else {}
    let m = __x5__
  } else {
    ??? "Let id:{n} be an integer for which ℝ ( id:{n} ) ÷ 10 ℝ sup:{ℝ ( id:{f} ) } - ℝ ( id:{x} ) is as close to zero as possible . If there are two such id:{n} , pick the larger id:{n} ."
    ??? "If id:{n} = 0 , let id:{m} be the String value:{\"0\"} . Otherwise , let id:{m} be the String value consisting of the digits of the decimal representation of id:{n} ( in order , with no leading zeroes ) ."
    if (! (== f 0i)) {
      let k = m.length
      if (! (< f k)) {
        ??? "Let id:{z} be the String value consisting of id:{f} + 1 - id:{k} occurrences of the code unit 0x0030 ( DIGIT ZERO ) ."
        m = (+ z m)
        k = (+ f 1i)
      } else {}
      ??? "Let id:{a} be the first id:{k} - id:{f} code units of id:{m} , and let id:{b} be the remaining id:{f} code units of id:{m} ."
      m = (+ (+ a ".") b)
    } else {}
  }
  app __x6__ = (WrapCompletion (+ s m))
  return __x6__
}