{
  [1] app __x0__ = (Type newTarget)
  [1] assert (= __x0__ Object)
  [2] let callerContext = GLOBAL_context
  [3] let kind = F.ConstructorKind
  [4] if (= kind CONST_base) {
    [5] app __x1__ = (OrdinaryCreateFromConstructor newTarget "%Object.prototype%")
    [5] if (is-completion __x1__) if (= __x1__.Type CONST_normal) __x1__ = __x1__.Value else return __x1__ else [7] {}
    [5] let thisArgument = __x1__
  } else [7] {}
  [6] app __x2__ = (PrepareForOrdinaryCall F newTarget)
  [6] let calleeContext = __x2__
  [8] if (= kind CONST_base) {
    app __x3__ = (OrdinaryCallBindThis F calleeContext thisArgument)
    __x3__
  } else [7] {}
  [9] access __x4__ = (calleeContext "LexicalEnvironment")
  [9] let constructorEnv = __x4__
  [10] let envRec = constructorEnv.EnvironmentRecord
  [11] app __x5__ = (OrdinaryCallEvaluateBody F argumentsList)
  [11] let result = __x5__
  [12] if (= GLOBAL_executionStack[(- GLOBAL_executionStack.length 1i)] calleeContext) {
    let __x6__ = (- GLOBAL_executionStack.length 1i)
    (pop GLOBAL_executionStack __x6__)
  } else {}
  [12] GLOBAL_context = GLOBAL_executionStack[(- GLOBAL_executionStack.length 1i)]
  [17] if (= result.Type CONST_return) {
    [14] app __x7__ = (Type result.Value)
    [14] if (= __x7__ Object) {
      app __x8__ = (NormalCompletion result.Value)
      app __x9__ = (WrapCompletion __x8__)
      return __x9__
    } else [7] {}
    [15] if (= kind CONST_base) {
      app __x10__ = (NormalCompletion thisArgument)
      app __x11__ = (WrapCompletion __x10__)
      return __x11__
    } else [7] {}
    [16] if (! (= result.Value undefined)) {
      app __x12__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_TypeError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
      return __x12__
    } else [7] {}
  } else {
    if (is-completion result) if (= result.Type CONST_normal) result = result.Value else return result else [7] {}
    result
  }
  [18] app __x13__ = (envRec.GetThisBinding envRec)
  [18] if (is-completion __x13__) if (= __x13__.Type CONST_normal) __x13__ = __x13__.Value else return __x13__ else [7] {}
  [18] app __x14__ = (WrapCompletion __x13__)
  [18] return __x14__
}