{
  if (= waitable absent) waitable = false else {}
  app __x0__ = (ValidateTypedArray typedArray)
  if (is-completion __x0__) if (= __x0__.Type CONST_normal) __x0__ = __x0__.Value else return __x0__ else {}
  let buffer = __x0__
  let typeName = typedArray.TypedArrayName
  ??? "Let id:{type} be the Element Type value in link:{unhandled: table-the-typedarray-constructors} for id:{typeName} ."
  if (= waitable true) if (! (|| (= typeName "Int32Array") (= typeName "BigInt64Array"))) {
    app __x1__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_TypeError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
    return __x1__
  } else {} else {
    let __x2__ = true
    app __x3__ = (IsUnclampedIntegerElementType type)
    if (is-completion __x3__) if (= __x3__.Type CONST_normal) __x3__ = __x3__.Value else return __x3__ else {}
    __x2__ = (= __x3__ false)
    if __x2__ {
      app __x4__ = (IsBigIntElementType type)
      if (is-completion __x4__) if (= __x4__.Type CONST_normal) __x4__ = __x4__.Value else return __x4__ else {}
      __x2__ = (= __x4__ false)
    } else {}
    if __x2__ {
      app __x5__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_TypeError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
      return __x5__
    } else {}
  }
  app __x6__ = (WrapCompletion buffer)
  return __x6__
}