{
  app searchString = (GetArgument argumentsList 0i)
  app position = (GetArgument argumentsList 1i)
  [0] app __x0__ = (RequireObjectCoercible this)
  [0] if (is-completion __x0__) if (= __x0__.Type CONST_normal) __x0__ = __x0__.Value else return __x0__ else [2] {}
  [0] let O = __x0__
  [1] app __x1__ = (ToString O)
  [1] if (is-completion __x1__) if (= __x1__.Type CONST_normal) __x1__ = __x1__.Value else return __x1__ else [2] {}
  [1] let S = __x1__
  [2] app __x2__ = (IsRegExp searchString)
  [2] if (is-completion __x2__) if (= __x2__.Type CONST_normal) __x2__ = __x2__.Value else return __x2__ else [2] {}
  [2] let isRegExp = __x2__
  [3] if (= isRegExp true) {
    app __x3__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_TypeError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
    return __x3__
  } else [2] {}
  [4] app __x4__ = (ToString searchString)
  [4] if (is-completion __x4__) if (= __x4__.Type CONST_normal) __x4__ = __x4__.Value else return __x4__ else [2] {}
  [4] let searchStr = __x4__
  [5] app __x5__ = (ToInteger position)
  [5] if (is-completion __x5__) if (= __x5__.Type CONST_normal) __x5__ = __x5__.Value else return __x5__ else [2] {}
  [5] let pos = __x5__
  [6] let len = S.length
  [7] app __x6__ = (max pos 0i)
  [7] app __x7__ = (min __x6__ len)
  [7] let start = __x7__
  [8] let searchLen = searchStr.length
  [9] ??? "If there exists any integer id:{k} not smaller than id:{start} such that id:{k} + id:{searchLen} is not greater than id:{len} , and for all nonnegative integers id:{j} less than id:{searchLen} , the code unit at index id:{k} + id:{j} of id:{S} is the same as the code unit at index id:{j} of id:{searchStr} , return value:{true} ; but if there is no such integer id:{k} , return value:{false} ."
}