digraph {
  node15838 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">19:promise.PromiseIsHandled = true</td></tr>
      <tr><td align="left">20:return resultCapability.Promise</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15823 [shape=diamond, label=<<font color="black">(= __x2__ false)</font>> color="black" fillcolor="white" style=filled]
  node15834 [shape=cds, label=<<font color="black">app __x4__ = (HostPromiseRejectionTracker promise &quot;handle&quot;)</font>> color="black" fillcolor="white" style=filled]
  node15831 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">13:__x3__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15826 [shape=diamond, label=<<font color="black">(= promise.PromiseState &quot;pending&quot;)</font>> color="black" fillcolor="white" style=filled]
  node15830 [shape=cds, label=<<font color="black">13:app __x3__ = (EnqueueJob &quot;PromiseJobs&quot; PromiseReactionJob (new [fulfillReaction, value]))</font>> color="black" fillcolor="white" style=filled]
  node15835 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">__x4__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15821 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let onFulfilled = &quot;Identity&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15825 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">6:let fulfillReaction = (new PromiseReaction(&quot;Capabilities&quot; -&gt; resultCapability, &quot;Handler&quot; -&gt; onFulfilled))</td></tr>
      <tr><td align="left">7:let rejectReaction = (new PromiseReaction(&quot;Capabilities&quot; -&gt; resultCapability, &quot;Handler&quot; -&gt; onRejected))</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15829 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">12:let value = promise.PromiseResult</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15817 [shape=cds, label=<<font color="black">0:app __x0__ = (IsPromise promise)</font>> color="black" fillcolor="white" style=filled]
  node15836 [shape=cds, label=<<font color="black">18:app __x5__ = (EnqueueJob &quot;PromiseJobs&quot; PromiseReactionJob (new [rejectReaction, reason]))</font>> color="black" fillcolor="white" style=filled]
  node15832 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">15:assert (= promise.PromiseState &quot;rejected&quot;)</td></tr>
      <tr><td align="left">16:let reason = promise.PromiseResult</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15816 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node15827 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">9:append fulfillReaction -&gt; promise.PromiseFulfillReactions</td></tr>
      <tr><td align="left">10:append rejectReaction -&gt; promise.PromiseRejectReactions</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15819 [shape=cds, label=<<font color="black">2:app __x1__ = (IsCallable onFulfilled)</font>> color="black" fillcolor="white" style=filled]
  node15824 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let onRejected = &quot;Thrower&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15815 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node15820 [shape=diamond, label=<<font color="black">(= __x1__ false)</font>> color="black" fillcolor="white" style=filled]
  node15828 [shape=diamond, label=<<font color="black">(= promise.PromiseState &quot;fulfilled&quot;)</font>> color="black" fillcolor="white" style=filled]
  node15837 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">18:__x5__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15822 [shape=cds, label=<<font color="black">4:app __x2__ = (IsCallable onRejected)</font>> color="black" fillcolor="white" style=filled]
  node15833 [shape=diamond, label=<<font color="black">(= promise.PromiseIsHandled false)</font>> color="black" fillcolor="white" style=filled]
  node15818 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:assert (= __x0__ true)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15820 -> node15821 [label=<<font color="black">true</font>> color="black"]
  node15820 -> node15822 [label=<<font color="black">false</font>> color="black"]
  node15835 -> node15836 [ color="black"]
  node15833 -> node15834 [label=<<font color="black">true</font>> color="black"]
  node15833 -> node15836 [label=<<font color="black">false</font>> color="black"]
  node15827 -> node15838 [ color="black"]
  node15824 -> node15825 [ color="black"]
  node15817 -> node15818 [ color="black"]
  node15819 -> node15820 [ color="black"]
  node15834 -> node15835 [ color="black"]
  node15829 -> node15830 [ color="black"]
  node15832 -> node15833 [ color="black"]
  node15815 -> node15817 [ color="black"]
  node15837 -> node15838 [ color="black"]
  node15821 -> node15822 [ color="black"]
  node15822 -> node15823 [ color="black"]
  node15830 -> node15831 [ color="black"]
  node15836 -> node15837 [ color="black"]
  node15823 -> node15824 [label=<<font color="black">true</font>> color="black"]
  node15823 -> node15825 [label=<<font color="black">false</font>> color="black"]
  node15825 -> node15826 [ color="black"]
  node15831 -> node15838 [ color="black"]
  node15818 -> node15819 [ color="black"]
  node15826 -> node15827 [label=<<font color="black">true</font>> color="black"]
  node15826 -> node15828 [label=<<font color="black">false</font>> color="black"]
  node15828 -> node15829 [label=<<font color="black">true</font>> color="black"]
  node15828 -> node15832 [label=<<font color="black">false</font>> color="black"]
  node15838 -> node15816 [ color="black"]
}
