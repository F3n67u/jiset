{
  app target = (GetArgument argumentsList 0i)
  app start = (GetArgument argumentsList 1i)
  app end = (GetArgument argumentsList 2i)
  [0] app __x0__ = (ToObject this)
  [0] if (is-completion __x0__) if (= __x0__.Type CONST_normal) __x0__ = __x0__.Value else return __x0__ else [19] {}
  [0] let O = __x0__
  [1] app __x1__ = (LengthOfArrayLike O)
  [1] if (is-completion __x1__) if (= __x1__.Type CONST_normal) __x1__ = __x1__.Value else return __x1__ else [19] {}
  [1] let len = __x1__
  [2] app __x2__ = (ToIntegerOrInfinity target)
  [2] if (is-completion __x2__) if (= __x2__.Type CONST_normal) __x2__ = __x2__.Value else return __x2__ else [19] {}
  [2] let relativeTarget = __x2__
  [3] ??? "If id:{relativeTarget} is - ∞ , let id:{to} be 0 ."
  [4] ??? "Else if id:{relativeTarget} < 0 , let id:{to} be max ( id:{len} + id:{relativeTarget} , 0 ) ."
  [5] ??? "Else , let id:{to} be min ( id:{relativeTarget} , id:{len} ) ."
  [6] app __x3__ = (ToIntegerOrInfinity start)
  [6] if (is-completion __x3__) if (= __x3__.Type CONST_normal) __x3__ = __x3__.Value else return __x3__ else [19] {}
  [6] let relativeStart = __x3__
  [7] ??? "If id:{relativeStart} is - ∞ , let id:{from} be 0 ."
  [8] ??? "Else if id:{relativeStart} < 0 , let id:{from} be max ( id:{len} + id:{relativeStart} , 0 ) ."
  [9] ??? "Else , let id:{from} be min ( id:{relativeStart} , id:{len} ) ."
  [10] if (= end undefined) let relativeEnd = len else {
    app __x4__ = (ToIntegerOrInfinity end)
    if (is-completion __x4__) if (= __x4__.Type CONST_normal) __x4__ = __x4__.Value else return __x4__ else [19] {}
    let relativeEnd = __x4__
  }
  [11] ??? "If id:{relativeEnd} is - ∞ , let id:{final} be 0 ."
  [12] ??? "Else if id:{relativeEnd} < 0 , let id:{final} be max ( id:{len} + id:{relativeEnd} , 0 ) ."
  [13] ??? "Else , let id:{final} be min ( id:{relativeEnd} , id:{len} ) ."
  [14] app __x5__ = (min (- final from) (- len to))
  [14] let count = __x5__
  [19] if (&& (< from to) (< to (+ from count))) {
    [16] let direction = -1i
    [17] from = (- (+ from count) 1i)
    [18] to = (- (+ to count) 1i)
  } else let direction = 1i
  [21] while (< 0i count) {
    [22] ??? "Let id:{fromKey} be ! ToString ( 𝔽 ( id:{from} ) ) ."
    [23] ??? "Let id:{toKey} be ! ToString ( 𝔽 ( id:{to} ) ) ."
    [24] app __x6__ = (HasProperty O fromKey)
    [24] if (is-completion __x6__) if (= __x6__.Type CONST_normal) __x6__ = __x6__.Value else return __x6__ else [19] {}
    [24] let fromPresent = __x6__
    [28] if (= fromPresent true) {
      [26] app __x7__ = (Get O fromKey)
      [26] if (is-completion __x7__) if (= __x7__.Type CONST_normal) __x7__ = __x7__.Value else return __x7__ else [19] {}
      [26] let fromVal = __x7__
      [27] app __x8__ = (Set O toKey fromVal true)
      [27] if (is-completion __x8__) if (= __x8__.Type CONST_normal) __x8__ = __x8__.Value else return __x8__ else [19] {}
      [27] __x8__
    } else {
      [29] assert (= fromPresent false)
      [30] app __x9__ = (DeletePropertyOrThrow O toKey)
      [30] if (is-completion __x9__) if (= __x9__.Type CONST_normal) __x9__ = __x9__.Value else return __x9__ else [19] {}
      [30] __x9__
    }
    [31] from = (+ from direction)
    [32] to = (+ to direction)
    [33] count = (- count 1i)
  }
  [34] app __x10__ = (WrapCompletion O)
  [34] return __x10__
}