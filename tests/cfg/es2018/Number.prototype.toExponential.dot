digraph {
  node11917 [shape=diamond, label=<<font color="black">(== e 0i)</font>> color="black" fillcolor="white" style=filled]
  node11913 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">??? &quot;Let id:{e} , id:{n} , and id:{f} be integers such that id:{f} &ge; 0 , 10 sup:{id:{f}} &le; id:{n} &lt; 10 sup:{id:{f} + 1} , the Number value for id:{n} &times; 10 sup:{id:{e} - id:{f}} is id:{x} , and id:{f} is as small as possible . Note that the decimal representation of id:{n} has id:{f} + 1 digits , id:{n} is not divisible by 10 , and the least significant digit of id:{n} is not necessarily uniquely determined by these criteria .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11911 [shape=diamond, label=<<font color="black">(! (= fractionDigits undefined))</font>> color="black" fillcolor="white" style=filled]
  node11902 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">4:let s = &quot;&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11897 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let x = [? __x0__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11908 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw RangeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11923 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">32:let m = (+ (+ (+ m &quot;e&quot;) c) d)</td></tr>
      <tr><td align="left">33:return (+ s m)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11916 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">21:??? &quot;Let id:{a} be the first element of id:{m} , and let id:{b} be the remaining id:{f} elements of id:{m} .&quot;</td></tr>
      <tr><td align="left">22:let m = (+ (+ a &quot;.&quot;) b)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11901 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return &quot;NaN&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11920 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let c = &quot;+&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11905 [shape=diamond, label=<<font color="black">(== x Infinity)</font>> color="black" fillcolor="white" style=filled]
  node11893 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node11909 [shape=diamond, label=<<font color="black">(== x 0i)</font>> color="black" fillcolor="white" style=filled]
  node11915 [shape=diamond, label=<<font color="black">(! (== f 0i))</font>> color="black" fillcolor="white" style=filled]
  node11918 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">24:let c = &quot;+&quot;</td></tr>
      <tr><td align="left">25:let d = &quot;0&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11914 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">19:??? &quot;Let id:{m} be the String value consisting of the digits of the decimal representation of id:{n} ( in order , with no leading zeroes ) .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11903 [shape=diamond, label=<<font color="black">(&lt; x 0i)</font>> color="black" fillcolor="white" style=filled]
  node11910 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">12:??? &quot;Let id:{m} be the String value consisting of id:{f} + 1 occurrences of the code unit 0x0030 ( DIGIT ZERO ) .&quot;</td></tr>
      <tr><td align="left">13:let e = 0i</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11896 [shape=cds, label=<<font color="black">0:app __x0__ = (thisNumberValue this)</font>> color="black" fillcolor="white" style=filled]
  node11895 [shape=cds, label=<<font color="black">app fractionDigits = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node11922 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">31:??? &quot;Let id:{d} be the String value consisting of the digits of the decimal representation of id:{e} ( in order , with no leading zeroes ) .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11898 [shape=cds, label=<<font color="black">1:app __x1__ = (ToInteger fractionDigits)</font>> color="black" fillcolor="white" style=filled]
  node11907 [shape=diamond, label=<<font color="black">(|| (&lt; f 0i) (&lt; 100i f))</font>> color="black" fillcolor="white" style=filled]
  node11912 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">??? &quot;Let id:{e} and id:{n} be integers such that 10 sup:{id:{f}} &le; id:{n} &lt; 10 sup:{id:{f} + 1} and for which the exact mathematical value of id:{n} &times; 10 sup:{id:{e} - id:{f}} - id:{x} is as close to zero as possible . If there are two such sets of id:{e} and id:{n} , pick the id:{e} and id:{n} for which id:{n} &times; 10 sup:{id:{e} - id:{f}} is larger .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11919 [shape=diamond, label=<<font color="black">(&lt; 0i e)</font>> color="black" fillcolor="white" style=filled]
  node11900 [shape=diamond, label=<<font color="black">(= x NaN)</font>> color="black" fillcolor="white" style=filled]
  node11906 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return (+ s &quot;Infinity&quot;)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11921 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">29:let c = &quot;-&quot;</td></tr>
      <tr><td align="left">30:let e = (- e)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11899 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">1:let f = [? __x1__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11904 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">6:let s = &quot;-&quot;</td></tr>
      <tr><td align="left">7:let x = (- x)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11894 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node11897 -> node11898 [ color="black"]
  node11922 -> node11923 [ color="black"]
  node11911 -> node11912 [label=<<font color="black">true</font>> color="black"]
  node11911 -> node11913 [label=<<font color="black">false</font>> color="black"]
  node11920 -> node11922 [ color="black"]
  node11921 -> node11922 [ color="black"]
  node11916 -> node11917 [ color="black"]
  node11902 -> node11903 [ color="black"]
  node11909 -> node11910 [label=<<font color="black">true</font>> color="black"]
  node11909 -> node11911 [label=<<font color="black">false</font>> color="black"]
  node11910 -> node11915 [ color="black"]
  node11914 -> node11915 [ color="black"]
  node11915 -> node11916 [label=<<font color="black">true</font>> color="black"]
  node11915 -> node11917 [label=<<font color="black">false</font>> color="black"]
  node11893 -> node11895 [ color="black"]
  node11903 -> node11904 [label=<<font color="black">true</font>> color="black"]
  node11903 -> node11905 [label=<<font color="black">false</font>> color="black"]
  node11900 -> node11901 [label=<<font color="black">true</font>> color="black"]
  node11900 -> node11902 [label=<<font color="black">false</font>> color="black"]
  node11905 -> node11906 [label=<<font color="black">true</font>> color="black"]
  node11905 -> node11907 [label=<<font color="black">false</font>> color="black"]
  node11917 -> node11918 [label=<<font color="black">true</font>> color="black"]
  node11917 -> node11919 [label=<<font color="black">false</font>> color="black"]
  node11904 -> node11905 [ color="black"]
  node11923 -> node11894 [ color="black"]
  node11912 -> node11914 [ color="black"]
  node11898 -> node11899 [ color="black"]
  node11906 -> node11907 [ color="black"]
  node11919 -> node11920 [label=<<font color="black">true</font>> color="black"]
  node11919 -> node11921 [label=<<font color="black">false</font>> color="black"]
  node11918 -> node11923 [ color="black"]
  node11913 -> node11914 [ color="black"]
  node11895 -> node11896 [ color="black"]
  node11896 -> node11897 [ color="black"]
  node11901 -> node11902 [ color="black"]
  node11908 -> node11909 [ color="black"]
  node11907 -> node11908 [label=<<font color="black">true</font>> color="black"]
  node11907 -> node11909 [label=<<font color="black">false</font>> color="black"]
  node11899 -> node11900 [ color="black"]
}
