{
  app __x0__ = (Type input)
  if (= __x0__ Object) {
    app __x1__ = (GetMethod input SYMBOL_toPrimitive)
    if (is-completion __x1__) if (= __x1__.Type CONST_normal) __x1__ = __x1__.Value else return __x1__ else {}
    let exoticToPrim = __x1__
    if (! (= exoticToPrim undefined)) {
      if (= preferredType absent) let hint = "default" else if (= preferredType CONST_string) let hint = "string" else {
        assert (= preferredType CONST_number)
        let hint = "number"
      }
      app __x2__ = (Call exoticToPrim input (new [hint]))
      if (is-completion __x2__) if (= __x2__.Type CONST_normal) __x2__ = __x2__.Value else return __x2__ else {}
      let result = __x2__
      app __x3__ = (Type result)
      if (! (= __x3__ Object)) {
        app __x4__ = (WrapCompletion result)
        return __x4__
      } else {}
      app __x5__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_TypeError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
      return __x5__
    } else {}
    if (= preferredType absent) let preferredType = CONST_number else {}
    app __x6__ = (OrdinaryToPrimitive input preferredType)
    if (is-completion __x6__) if (= __x6__.Type CONST_normal) __x6__ = __x6__.Value else return __x6__ else {}
    app __x7__ = (WrapCompletion __x6__)
    return __x7__
  } else {}
  app __x8__ = (WrapCompletion input)
  return __x8__
}