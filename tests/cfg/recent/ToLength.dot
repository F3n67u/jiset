digraph {
  node670 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node669 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node674 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return 0i</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node672 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let len = [? __x0__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node675 [shape=cds, label=<<font color="black">2:app __x1__ = (min len (- (** 2.0 53i) 1i))</font>> color="black" fillcolor="white" style=filled]
  node673 [shape=diamond, label=<<font color="black">(! (&lt; 0i len))</font>> color="black" fillcolor="white" style=filled]
  node671 [shape=cds, label=<<font color="black">0:app __x0__ = (ToIntegerOrInfinity argument)</font>> color="black" fillcolor="white" style=filled]
  node676 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">2:return __x1__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node676 -> node670 [ color="black"]
  node671 -> node672 [ color="black"]
  node672 -> node673 [ color="black"]
  node674 -> node675 [ color="black"]
  node669 -> node671 [ color="black"]
  node673 -> node674 [label=<<font color="black">true</font>> color="black"]
  node673 -> node675 [label=<<font color="black">false</font>> color="black"]
  node675 -> node676 [ color="black"]
}
