digraph {
  node12949 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let pos = Infinity</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12939 [shape=cds, label=<<font color="black">app position = (GetArgument argumentsList 1i)</font>> color="black" fillcolor="white" style=filled]
  node12943 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">1:let S = [? __x1__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12942 [shape=cds, label=<<font color="black">1:app __x1__ = (ToString O)</font>> color="black" fillcolor="white" style=filled]
  node12938 [shape=cds, label=<<font color="black">app searchString = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node12953 [shape=cds, label=<<font color="black">6:app __x5__ = (max pos 0i)</font>> color="black" fillcolor="white" style=filled]
  node12951 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let pos = __x4__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12936 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node12941 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let O = [? __x0__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12937 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node12952 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">5:let len = S.length</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12940 [shape=cds, label=<<font color="black">0:app __x0__ = (RequireObjectCoercible this)</font>> color="black" fillcolor="white" style=filled]
  node12944 [shape=cds, label=<<font color="black">2:app __x2__ = (ToString searchString)</font>> color="black" fillcolor="white" style=filled]
  node12948 [shape=diamond, label=<<font color="black">(= numPos NaN)</font>> color="black" fillcolor="white" style=filled]
  node12950 [shape=cds, label=<<font color="black">app __x4__ = (ToInteger numPos)</font>> color="black" fillcolor="white" style=filled]
  node12945 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">2:let searchStr = [? __x2__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12955 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">6:let start = __x6__</td></tr>
      <tr><td align="left">7:let searchLen = searchStr.length</td></tr>
      <tr><td align="left">8:??? &quot;Return the largest possible nonnegative integer id:{k} not larger than id:{start} such that id:{k} + id:{searchLen} is not greater than id:{len} , and for all nonnegative integers id:{j} less than id:{searchLen} , the code unit at index id:{k} + id:{j} within id:{S} is the same as the code unit at index id:{j} within id:{searchStr} ; but if there is no such integer id:{k} , return the value - 1 .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12946 [shape=cds, label=<<font color="black">3:app __x3__ = (ToNumber position)</font>> color="black" fillcolor="white" style=filled]
  node12947 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">3:let numPos = [? __x3__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12954 [shape=cds, label=<<font color="black">6:app __x6__ = (min __x5__ len)</font>> color="black" fillcolor="white" style=filled]
  node12952 -> node12953 [ color="black"]
  node12945 -> node12946 [ color="black"]
  node12949 -> node12952 [ color="black"]
  node12946 -> node12947 [ color="black"]
  node12953 -> node12954 [ color="black"]
  node12941 -> node12942 [ color="black"]
  node12942 -> node12943 [ color="black"]
  node12940 -> node12941 [ color="black"]
  node12944 -> node12945 [ color="black"]
  node12947 -> node12948 [ color="black"]
  node12943 -> node12944 [ color="black"]
  node12948 -> node12949 [label=<<font color="black">true</font>> color="black"]
  node12948 -> node12950 [label=<<font color="black">false</font>> color="black"]
  node12950 -> node12951 [ color="black"]
  node12936 -> node12938 [ color="black"]
  node12954 -> node12955 [ color="black"]
  node12939 -> node12940 [ color="black"]
  node12938 -> node12939 [ color="black"]
  node12955 -> node12937 [ color="black"]
  node12951 -> node12952 [ color="black"]
}
