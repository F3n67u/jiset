{
  let body = sourceText
  access __x0__ = (body "ModuleRequests")
  let requestedModules = __x0__
  access __x1__ = (body "ImportEntries")
  let importEntries = __x1__
  app __x2__ = (ImportedLocalNames importEntries)
  let importedBoundNames = __x2__
  let indirectExportEntries = (new [])
  let localExportEntries = (new [])
  let starExportEntries = (new [])
  access __x3__ = (body "ExportEntries")
  let exportEntries = __x3__
  let __x4__ = exportEntries
  let __x5__ = 0i
  while (< __x5__ __x4__.length) {
    let ee = __x4__[__x5__]
    if (= ee.ModuleRequest null) if (! (contains importedBoundNames ee.LocalName)) append ee -> localExportEntries else {
      ??? "Let id:{ie} be the element of id:{importEntries} whose [ [ LocalName ] ] is the same as id:{ee} . [ [ LocalName ] ] ."
      if (= ie.ImportName "*") append ee -> localExportEntries else append (new ExportEntryRecord("ModuleRequest" -> ie.ModuleRequest, "ImportName" -> ie.ImportName, "LocalName" -> null, "ExportName" -> ee.ExportName)) -> indirectExportEntries
    } else if (&& (= ee.ImportName "*") (= ee.ExportName null)) append ee -> starExportEntries else append ee -> indirectExportEntries
    __x5__ = (+ __x5__ 1i)
  }
  return (new SourceTextModuleRecord("Realm" -> realm, "Environment" -> undefined, "Namespace" -> undefined, "Status" -> CONST_unlinked, "EvaluationError" -> undefined, "HostDefined" -> hostDefined, "ECMAScriptCode" -> body, "Context" -> CONST_empty, "ImportMeta" -> CONST_empty, "RequestedModules" -> requestedModules, "ImportEntries" -> importEntries, "LocalExportEntries" -> localExportEntries, "IndirectExportEntries" -> indirectExportEntries, "StarExportEntries" -> starExportEntries, "DFSIndex" -> undefined, "DFSAncestorIndex" -> undefined))
}