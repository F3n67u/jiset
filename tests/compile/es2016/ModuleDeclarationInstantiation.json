[{
  "tokens": ["Let", {
    "id": "module"
  }, "be", "this", "Source", "Text", "Module", "Record", "."]
}, {
  "tokens": ["Let", {
    "id": "realm"
  }, "be", {
    "id": "module"
  }, ".", "[", "[", "Realm", "]", "]", "."]
}, {
  "tokens": ["Assert", ":", {
    "id": "realm"
  }, "is", "not", {
    "value": "undefined"
  }, "."]
}, {
  "tokens": ["Let", {
    "id": "code"
  }, "be", {
    "id": "module"
  }, ".", "[", "[", "ECMAScriptCode", "]", "]", "."]
}, {
  "tokens": ["If", {
    "id": "module"
  }, ".", "[", "[", "Environment", "]", "]", "is", "not", {
    "value": "undefined"
  }, ",", "return", "NormalCompletion", "(", {
    "const": "empty"
  }, ")", "."]
}, {
  "tokens": ["Let", {
    "id": "env"
  }, "be", "NewModuleEnvironment", "(", {
    "id": "realm"
  }, ".", "[", "[", "GlobalEnv", "]", "]", ")", "."]
}, {
  "tokens": ["Set", {
    "id": "module"
  }, ".", "[", "[", "Environment", "]", "]", "to", {
    "id": "env"
  }, "."]
}, {
  "tokens": ["For", "each", "String", {
    "id": "required"
  }, "that", "is", "an", "element", "of", {
    "id": "module"
  }, ".", "[", "[", "RequestedModules", "]", "]", "do", ","]
}, {
  "tokens": ["NOTE", ":", "Before", "instantiating", "a", "module", ",", "all", "of", "the", "modules", "it", "requested", "must", "be", "available", ".", "An", "implementation", "may", "perform", "this", "test", "at", "any", "time", "prior", "to", "this", "point", "."]
}, {
  "tokens": ["Let", {
    "id": "requiredModule"
  }, "be", "?", "HostResolveImportedModule", "(", {
    "id": "module"
  }, ",", {
    "id": "required"
  }, ")", "."]
}, {
  "tokens": ["Perform", "?", {
    "id": "requiredModule"
  }, ".", "ModuleDeclarationInstantiation", "(", ")", "."]
}, {
  "tokens": ["For", "each", "ExportEntry", "Record", {
    "id": "e"
  }, "in", {
    "id": "module"
  }, ".", "[", "[", "IndirectExportEntries", "]", "]", ",", "do"]
}, {
  "tokens": ["Let", {
    "id": "resolution"
  }, "be", "?", {
    "id": "module"
  }, ".", "ResolveExport", "(", {
    "id": "e"
  }, ".", "[", "[", "ExportName", "]", "]", ",", "«", "»", ",", "«", "»", ")", "."]
}, {
  "tokens": ["If", {
    "id": "resolution"
  }, "is", {
    "value": "null"
  }, "or", {
    "id": "resolution"
  }, "is", {
    "code": "\"ambiguous\""
  }, ",", "throw", "a", {
    "value": "SyntaxError"
  }, "exception", "."]
}, {
  "tokens": ["Assert", ":", "all", "named", "exports", "from", {
    "id": "module"
  }, "are", "resolvable", "."]
}, {
  "tokens": ["Let", {
    "id": "envRec"
  }, "be", {
    "id": "env"
  }, "'", "s", "EnvironmentRecord", "."]
}, {
  "tokens": ["For", "each", "ImportEntry", "Record", {
    "id": "in"
  }, "in", {
    "id": "module"
  }, ".", "[", "[", "ImportEntries", "]", "]", ",", "do"]
}, {
  "tokens": ["Let", {
    "id": "importedModule"
  }, "be", "?", "HostResolveImportedModule", "(", {
    "id": "module"
  }, ",", {
    "id": "in"
  }, ".", "[", "[", "ModuleRequest", "]", "]", ")", "."]
}, {
  "tokens": ["If", {
    "id": "in"
  }, ".", "[", "[", "ImportName", "]", "]", "is", {
    "code": "\"*\""
  }, ",", "then"]
}, {
  "tokens": ["Let", {
    "id": "namespace"
  }, "be", "?", "GetModuleNamespace", "(", {
    "id": "importedModule"
  }, ")", "."]
}, {
  "tokens": ["Perform", "!", {
    "id": "envRec"
  }, ".", "CreateImmutableBinding", "(", {
    "id": "in"
  }, ".", "[", "[", "LocalName", "]", "]", ",", {
    "value": "true"
  }, ")", "."]
}, {
  "tokens": ["Call", {
    "id": "envRec"
  }, ".", "InitializeBinding", "(", {
    "id": "in"
  }, ".", "[", "[", "LocalName", "]", "]", ",", {
    "id": "namespace"
  }, ")", "."]
}, {
  "tokens": ["Else", ","]
}, {
  "tokens": ["Let", {
    "id": "resolution"
  }, "be", "?", {
    "id": "importedModule"
  }, ".", "ResolveExport", "(", {
    "id": "in"
  }, ".", "[", "[", "ImportName", "]", "]", ",", "«", "»", ",", "«", "»", ")", "."]
}, {
  "tokens": ["If", {
    "id": "resolution"
  }, "is", {
    "value": "null"
  }, "or", {
    "id": "resolution"
  }, "is", {
    "code": "\"ambiguous\""
  }, ",", "throw", "a", {
    "value": "SyntaxError"
  }, "exception", "."]
}, {
  "tokens": ["Call", {
    "id": "envRec"
  }, ".", "CreateImportBinding", "(", {
    "id": "in"
  }, ".", "[", "[", "LocalName", "]", "]", ",", {
    "id": "resolution"
  }, ".", "[", "[", "Module", "]", "]", ",", {
    "id": "resolution"
  }, ".", "[", "[", "BindingName", "]", "]", ")", "."]
}, {
  "tokens": ["Let", {
    "id": "varDeclarations"
  }, "be", "the", "VarScopedDeclarations", "of", {
    "id": "code"
  }, "."]
}, {
  "tokens": ["Let", {
    "id": "declaredVarNames"
  }, "be", "a", "new", "empty", "List", "."]
}, {
  "tokens": ["For", "each", "element", {
    "id": "d"
  }, "in", {
    "id": "varDeclarations"
  }, "do"]
}, {
  "tokens": ["For", "each", "element", {
    "id": "dn"
  }, "of", "the", "BoundNames", "of", {
    "id": "d"
  }, "do"]
}, {
  "tokens": ["If", {
    "id": "dn"
  }, "is", "not", "an", "element", "of", {
    "id": "declaredVarNames"
  }, ",", "then"]
}, {
  "tokens": ["Perform", "!", {
    "id": "envRec"
  }, ".", "CreateMutableBinding", "(", {
    "id": "dn"
  }, ",", {
    "value": "false"
  }, ")", "."]
}, {
  "tokens": ["Call", {
    "id": "envRec"
  }, ".", "InitializeBinding", "(", {
    "id": "dn"
  }, ",", {
    "value": "undefined"
  }, ")", "."]
}, {
  "tokens": ["Append", {
    "id": "dn"
  }, "to", {
    "id": "declaredVarNames"
  }, "."]
}, {
  "tokens": ["Let", {
    "id": "lexDeclarations"
  }, "be", "the", "LexicallyScopedDeclarations", "of", {
    "id": "code"
  }, "."]
}, {
  "tokens": ["For", "each", "element", {
    "id": "d"
  }, "in", {
    "id": "lexDeclarations"
  }, "do"]
}, {
  "tokens": ["For", "each", "element", {
    "id": "dn"
  }, "of", "the", "BoundNames", "of", {
    "id": "d"
  }, "do"]
}, {
  "tokens": ["If", "IsConstantDeclaration", "of", {
    "id": "d"
  }, "is", {
    "value": "true"
  }, ",", "then"]
}, {
  "tokens": ["Perform", "!", {
    "id": "envRec"
  }, ".", "CreateImmutableBinding", "(", {
    "id": "dn"
  }, ",", {
    "value": "true"
  }, ")", "."]
}, {
  "tokens": ["Else", ","]
}, {
  "tokens": ["Perform", "!", {
    "id": "envRec"
  }, ".", "CreateMutableBinding", "(", {
    "id": "dn"
  }, ",", {
    "value": "false"
  }, ")", "."]
}, {
  "tokens": ["If", {
    "id": "d"
  }, "is", "a", {
    "nt": "GeneratorDeclaration"
  }, "production", "or", "a", {
    "nt": "FunctionDeclaration"
  }, "production", ",", "then"]
}, {
  "tokens": ["Let", {
    "id": "fo"
  }, "be", "the", "result", "of", "performing", "InstantiateFunctionObject", "for", {
    "id": "d"
  }, "with", "argument", {
    "id": "env"
  }, "."]
}, {
  "tokens": ["Call", {
    "id": "envRec"
  }, ".", "InitializeBinding", "(", {
    "id": "dn"
  }, ",", {
    "id": "fo"
  }, ")", "."]
}, {
  "tokens": ["Return", "NormalCompletion", "(", {
    "const": "empty"
  }, ")", "."]
}]