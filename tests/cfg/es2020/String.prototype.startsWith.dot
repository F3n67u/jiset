digraph {
  node14367 [shape=cds, label=<<font color="black">0:app __x0__ = (RequireObjectCoercible this)</font>> color="black" fillcolor="white" style=filled]
  node14377 [shape=cds, label=<<font color="black">5:app __x4__ = (ToInteger position)</font>> color="black" fillcolor="white" style=filled]
  node14382 [shape=diamond, label=<<font color="black">(&lt; len (+ searchLength start))</font>> color="black" fillcolor="white" style=filled]
  node14376 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">4:let searchStr = [? __x3__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14372 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">2:let isRegExp = [? __x2__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14363 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node14369 [shape=cds, label=<<font color="black">1:app __x1__ = (ToString O)</font>> color="black" fillcolor="white" style=filled]
  node14373 [shape=diamond, label=<<font color="black">(= isRegExp true)</font>> color="black" fillcolor="white" style=filled]
  node14384 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">11:??? &quot;If the sequence of code units of id:{S} starting at id:{start} of length id:{searchLength} is the same as the full code unit sequence of id:{searchStr} , return value:{true} .&quot;</td></tr>
      <tr><td align="left">12:??? &quot;Otherwise , return value:{false} .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14365 [shape=cds, label=<<font color="black">app searchString = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node14370 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">1:let S = [? __x1__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14374 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14368 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let O = [? __x0__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14375 [shape=cds, label=<<font color="black">4:app __x3__ = (ToString searchString)</font>> color="black" fillcolor="white" style=filled]
  node14371 [shape=cds, label=<<font color="black">2:app __x2__ = (IsRegExp searchString)</font>> color="black" fillcolor="white" style=filled]
  node14380 [shape=cds, label=<<font color="black">8:app __x6__ = (min __x5__ len)</font>> color="black" fillcolor="white" style=filled]
  node14381 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">8:let start = __x6__</td></tr>
      <tr><td align="left">9:let searchLength = searchStr.length</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14366 [shape=cds, label=<<font color="black">app position = (GetArgument argumentsList 1i)</font>> color="black" fillcolor="white" style=filled]
  node14364 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node14379 [shape=cds, label=<<font color="black">8:app __x5__ = (max pos 0i)</font>> color="black" fillcolor="white" style=filled]
  node14378 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">5:let pos = [? __x4__]</td></tr>
      <tr><td align="left">7:let len = S.length</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14383 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return false</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14370 -> node14371 [ color="black"]
  node14363 -> node14365 [ color="black"]
  node14377 -> node14378 [ color="black"]
  node14373 -> node14374 [label=<<font color="black">true</font>> color="black"]
  node14373 -> node14375 [label=<<font color="black">false</font>> color="black"]
  node14378 -> node14379 [ color="black"]
  node14368 -> node14369 [ color="black"]
  node14374 -> node14375 [ color="black"]
  node14372 -> node14373 [ color="black"]
  node14371 -> node14372 [ color="black"]
  node14382 -> node14383 [label=<<font color="black">true</font>> color="black"]
  node14382 -> node14384 [label=<<font color="black">false</font>> color="black"]
  node14384 -> node14364 [ color="black"]
  node14376 -> node14377 [ color="black"]
  node14375 -> node14376 [ color="black"]
  node14365 -> node14366 [ color="black"]
  node14381 -> node14382 [ color="black"]
  node14380 -> node14381 [ color="black"]
  node14379 -> node14380 [ color="black"]
  node14367 -> node14368 [ color="black"]
  node14383 -> node14384 [ color="black"]
  node14369 -> node14370 [ color="black"]
  node14366 -> node14367 [ color="black"]
}
