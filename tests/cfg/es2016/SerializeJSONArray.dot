digraph {
  node15440 [shape=diamond, label=<<font color="black">(&lt; index len)</font>> color="black" fillcolor="white" style=filled]
  node15450 [shape=diamond, label=<<font color="black">(= gap &quot;&quot;)</font>> color="black" fillcolor="white" style=filled]
  node15435 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15441 [shape=cds, label=<<font color="black">8:app __x2__ = (ToString index)</font>> color="black" fillcolor="white" style=filled]
  node15445 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">append &quot;null&quot; -&gt; partial</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15449 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let final = &quot;[]&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15442 [shape=cds, label=<<font color="black">8:app __x3__ = (SerializeJSONProperty [! __x2__] value)</font>> color="black" fillcolor="white" style=filled]
  node15446 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">append strP -&gt; partial</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15433 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node15438 [shape=cds, label=<<font color="black">5:app __x1__ = (ToLength [? __x0__])</font>> color="black" fillcolor="white" style=filled]
  node15432 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node15447 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">13:index = (+ index 1i)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15443 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">8:let strP = [? __x3__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15451 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">18:??? &quot;Let id:{properties} be a String formed by concatenating all the element Strings of id:{partial} with each adjacent pair of Strings separated with code unit 0x002C ( COMMA ) . A comma is not inserted either before the first String or after the last String .&quot;</td></tr>
      <tr><td align="left">19:let final = (+ (+ &quot;[&quot; properties) &quot;]&quot;)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15448 [shape=diamond, label=<<font color="black">(= partial.length 0i)</font>> color="black" fillcolor="white" style=filled]
  node15444 [shape=diamond, label=<<font color="black">(= strP undefined)</font>> color="black" fillcolor="white" style=filled]
  node15434 [shape=diamond, label=<<font color="black">(contains stack value)</font>> color="black" fillcolor="white" style=filled]
  node15439 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">5:let len = [? __x1__]</td></tr>
      <tr><td align="left">6:let index = 0i</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15452 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">21:let separator = (+ (+ &quot;,&quot; &quot;\n&quot;) indent)</td></tr>
      <tr><td align="left">22:??? &quot;Let id:{properties} be a String formed by concatenating all the element Strings of id:{partial} with each adjacent pair of Strings separated with id:{separator} . The id:{separator} String is not inserted either before the first String or after the last String .&quot;</td></tr>
      <tr><td align="left">23:let final = (+ (+ (+ (+ (+ (+ &quot;[&quot; &quot;\n&quot;) indent) properties) &quot;\n&quot;) stepback) &quot;]&quot;)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15453 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">24:(pop stack (- stack.length 1i))</td></tr>
      <tr><td align="left">25:let indent = stepback</td></tr>
      <tr><td align="left">26:return final</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15436 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">1:append value -&gt; stack</td></tr>
      <tr><td align="left">2:let stepback = indent</td></tr>
      <tr><td align="left">3:let indent = (+ indent gap)</td></tr>
      <tr><td align="left">4:let partial = (new [])</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15437 [shape=cds, label=<<font color="black">5:app __x0__ = (Get value &quot;length&quot;)</font>> color="black" fillcolor="white" style=filled]
  node15449 -> node15453 [ color="black"]
  node15438 -> node15439 [ color="black"]
  node15443 -> node15444 [ color="black"]
  node15435 -> node15436 [ color="black"]
  node15451 -> node15453 [ color="black"]
  node15446 -> node15447 [ color="black"]
  node15434 -> node15435 [label=<<font color="black">true</font>> color="black"]
  node15434 -> node15436 [label=<<font color="black">false</font>> color="black"]
  node15442 -> node15443 [ color="black"]
  node15436 -> node15437 [ color="black"]
  node15441 -> node15442 [ color="black"]
  node15432 -> node15434 [ color="black"]
  node15440 -> node15441 [label=<<font color="black">true</font>> color="black"]
  node15440 -> node15448 [label=<<font color="black">false</font>> color="black"]
  node15450 -> node15451 [label=<<font color="black">true</font>> color="black"]
  node15450 -> node15452 [label=<<font color="black">false</font>> color="black"]
  node15445 -> node15447 [ color="black"]
  node15439 -> node15440 [ color="black"]
  node15447 -> node15440 [ color="black"]
  node15452 -> node15453 [ color="black"]
  node15453 -> node15433 [ color="black"]
  node15437 -> node15438 [ color="black"]
  node15448 -> node15449 [label=<<font color="black">true</font>> color="black"]
  node15448 -> node15450 [label=<<font color="black">false</font>> color="black"]
  node15444 -> node15445 [label=<<font color="black">true</font>> color="black"]
  node15444 -> node15446 [label=<<font color="black">false</font>> color="black"]
}
