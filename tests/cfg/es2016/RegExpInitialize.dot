digraph {
  node12661 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let F = [? __x1__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12657 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let P = [? __x0__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12667 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">7:??? &quot;Parse id:{P} using the grammars in link:{unhandled: sec-patterns} and interpreting each of its 16 - bit elements as a Unicode BMP code point . UTF - 16 decoding is not applied to the elements . The goal symbol for the parse is nt:{Pattern} . Throw a value:{SyntaxError} exception if id:{P} did not conform to the grammar , if any elements of id:{P} were not matched by the parse , or if any Early Error conditions exist .&quot;</td></tr>
      <tr><td align="left">8:??? &quot;Let id:{patternCharacters} be a List whose elements are the code unit elements of id:{P} .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12671 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">15:[? __x2__]</td></tr>
      <tr><td align="left">16:return obj</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12663 [shape=diamond, label=<<font color="black">(contains F &quot;u&quot;)</font>> color="black" fillcolor="white" style=filled]
  node12655 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let P = &quot;&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12659 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let F = &quot;&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12662 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">4:??? &quot;If id:{F} contains any code unit other than code:{\&quot;g\&quot;} , code:{\&quot;i\&quot;} , code:{\&quot;m\&quot;} , code:{\&quot;u\&quot;} , or code:{\&quot;y\&quot;} or if it contains the same code unit more than once , throw a value:{SyntaxError} exception .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12658 [shape=diamond, label=<<font color="black">(= flags undefined)</font>> color="black" fillcolor="white" style=filled]
  node12669 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">12:obj.OriginalSource = P</td></tr>
      <tr><td align="left">13:obj.OriginalFlags = F</td></tr>
      <tr><td align="left">14:??? &quot;Set id:{obj} ' s [ [ RegExpMatcher ] ] internal slot to the internal procedure that evaluates the above parse of id:{P} by applying the semantics provided in link:{unhandled: sec-pattern-semantics} using id:{patternCharacters} as the pattern ' s List of nt:{SourceCharacter} values and id:{F} as the flag parameters .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12649 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node12666 [shape=diamond, label=<<font color="black">(= BMP true)</font>> color="black" fillcolor="white" style=filled]
  node12653 [shape=cds, label=<<font color="black">app flags = (GetArgument argumentsList 2i)</font>> color="black" fillcolor="white" style=filled]
  node12670 [shape=cds, label=<<font color="black">15:app __x2__ = (Set obj &quot;lastIndex&quot; 0i true)</font>> color="black" fillcolor="white" style=filled]
  node12664 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let BMP = false</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12650 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node12660 [shape=cds, label=<<font color="black">app __x1__ = (ToString flags)</font>> color="black" fillcolor="white" style=filled]
  node12654 [shape=diamond, label=<<font color="black">(= pattern undefined)</font>> color="black" fillcolor="white" style=filled]
  node12656 [shape=cds, label=<<font color="black">app __x0__ = (ToString pattern)</font>> color="black" fillcolor="white" style=filled]
  node12651 [shape=cds, label=<<font color="black">app obj = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node12668 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">10:??? &quot;Parse id:{P} using the grammars in link:{unhandled: sec-patterns} and interpreting id:{P} as UTF - 16 encoded Unicode code points ( link:{unhandled: sec-ecmascript-language-types-string-type} ) . The goal symbol for the parse is nt:{Pattern[U]} . Throw a value:{SyntaxError} exception if id:{P} did not conform to the grammar , if any elements of id:{P} were not matched by the parse , or if any Early Error conditions exist .&quot;</td></tr>
      <tr><td align="left">11:??? &quot;Let id:{patternCharacters} be a List whose elements are the code points resulting from applying UTF - 16 decoding to id:{P} ' s sequence of elements .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12652 [shape=cds, label=<<font color="black">app pattern = (GetArgument argumentsList 1i)</font>> color="black" fillcolor="white" style=filled]
  node12665 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let BMP = true</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12651 -> node12652 [ color="black"]
  node12669 -> node12670 [ color="black"]
  node12662 -> node12663 [ color="black"]
  node12657 -> node12658 [ color="black"]
  node12652 -> node12653 [ color="black"]
  node12654 -> node12655 [label=<<font color="black">true</font>> color="black"]
  node12654 -> node12656 [label=<<font color="black">false</font>> color="black"]
  node12653 -> node12654 [ color="black"]
  node12656 -> node12657 [ color="black"]
  node12665 -> node12666 [ color="black"]
  node12667 -> node12669 [ color="black"]
  node12671 -> node12650 [ color="black"]
  node12655 -> node12658 [ color="black"]
  node12661 -> node12662 [ color="black"]
  node12668 -> node12669 [ color="black"]
  node12658 -> node12659 [label=<<font color="black">true</font>> color="black"]
  node12658 -> node12660 [label=<<font color="black">false</font>> color="black"]
  node12666 -> node12667 [label=<<font color="black">true</font>> color="black"]
  node12666 -> node12668 [label=<<font color="black">false</font>> color="black"]
  node12664 -> node12666 [ color="black"]
  node12659 -> node12662 [ color="black"]
  node12649 -> node12651 [ color="black"]
  node12670 -> node12671 [ color="black"]
  node12663 -> node12664 [label=<<font color="black">true</font>> color="black"]
  node12663 -> node12665 [label=<<font color="black">false</font>> color="black"]
  node12660 -> node12661 [ color="black"]
}
