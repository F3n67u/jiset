digraph {
  node19649 [shape=diamond, label=<<font color="black">(= GLOBAL_executionStack[(- GLOBAL_executionStack.length 1i)] genContext)</font>> color="black" fillcolor="white" style=filled]
  node19653 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">14:return [! __x3__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node19643 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node19652 [shape=cds, label=<<font color="black">14:app __x3__ = (AsyncGeneratorResolve generator value false)</font>> color="black" fillcolor="white" style=filled]
  node19647 [shape=cds, label=<<font color="black">4:app __x1__ = (Await value)</font>> color="black" fillcolor="white" style=filled]
  node19644 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let genContext = GLOBAL_context</td></tr>
      <tr><td align="left">2:let generator = genContext.Generator</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node19648 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">4:value = [? __x1__]</td></tr>
      <tr><td align="left">5:generator.AsyncGeneratorState = CONST_suspendedYield</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node19651 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">6:GLOBAL_context = GLOBAL_executionStack[(- GLOBAL_executionStack.length 1i)]</td></tr>
      <tr><td align="left">7:??? &quot;Set the code evaluation state of id:{genContext} such that when evaluation is resumed with a Completion id:{resumptionValue} the following steps will be performed : in:{} out:{}&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node19650 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let __x2__ = (- GLOBAL_executionStack.length 1i)</td></tr>
      <tr><td align="left">(pop GLOBAL_executionStack __x2__)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node19646 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">3:assert (= __x0__ CONST_async)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node19642 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node19645 [shape=cds, label=<<font color="black">3:app __x0__ = (GetGeneratorKind )</font>> color="black" fillcolor="white" style=filled]
  node19649 -> node19650 [label=<<font color="black">true</font>> color="black"]
  node19649 -> node19651 [label=<<font color="black">false</font>> color="black"]
  node19644 -> node19645 [ color="black"]
  node19650 -> node19651 [ color="black"]
  node19652 -> node19653 [ color="black"]
  node19648 -> node19649 [ color="black"]
  node19646 -> node19647 [ color="black"]
  node19647 -> node19648 [ color="black"]
  node19645 -> node19646 [ color="black"]
  node19642 -> node19644 [ color="black"]
  node19653 -> node19643 [ color="black"]
  node19651 -> node19652 [ color="black"]
}
