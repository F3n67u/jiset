{
  access __x0__ = (UnaryExpression "Evaluation")
  let ref = __x0__
  [? ref]
  if (! (= (typeof ref) Reference)) return true else {}
  app __x1__ = (IsUnresolvableReference ref)
  if (= __x1__ true) {
    app __x2__ = (IsStrictReference ref)
    assert (= __x2__ false)
    return true
  } else {}
  app __x3__ = (IsPropertyReference ref)
  if (= __x3__ true) {
    app __x4__ = (IsSuperReference ref)
    if (= __x4__ true) throw ReferenceError else {}
    app __x5__ = (GetBase ref)
    app __x6__ = (ToObject __x5__)
    let baseObj = [! __x6__]
    app __x7__ = (GetReferencedName ref)
    app __x8__ = (baseObj.Delete baseObj __x7__)
    let deleteStatus = [? __x8__]
    let __x9__ = true
    __x9__ = (= deleteStatus false)
    if __x9__ {
      app __x10__ = (IsStrictReference ref)
      __x9__ = (= __x10__ true)
    } else {}
    if __x9__ throw TypeError else {}
    return deleteStatus
  } else {
    app __x11__ = (GetBase ref)
    let bindings = __x11__
    app __x12__ = (GetReferencedName ref)
    app __x13__ = (bindings.DeleteBinding bindings __x12__)
    return [? __x13__]
  }
}