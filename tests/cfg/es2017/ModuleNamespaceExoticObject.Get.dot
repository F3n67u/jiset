digraph {
  node2612 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node2622 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">5:let m = O.Module</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node2627 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">12:let targetEnvRec = targetEnv.EnvironmentRecord</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node2616 [shape=diamond, label=<<font color="black">(= __x1__ Symbol)</font>> color="black" fillcolor="white" style=filled]
  node2618 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">2:return [? __x2__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node2621 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return undefined</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node2628 [shape=cds, label=<<font color="black">13:app __x4__ = (targetEnvRec.GetBindingValue targetEnvRec binding.BindingName true)</font>> color="black" fillcolor="white" style=filled]
  node2613 [shape=cds, label=<<font color="black">0:app __x0__ = (IsPropertyKey P)</font>> color="black" fillcolor="white" style=filled]
  node2617 [shape=cds, label=<<font color="black">2:app __x2__ = (OrdinaryGet O P Receiver)</font>> color="black" fillcolor="white" style=filled]
  node2624 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">6:let binding = [? __x3__]</td></tr>
      <tr><td align="left">7:assert (! (|| (= binding null) (= binding &quot;ambiguous&quot;)))</td></tr>
      <tr><td align="left">8:let targetModule = binding.Module</td></tr>
      <tr><td align="left">9:assert (! (= targetModule undefined))</td></tr>
      <tr><td align="left">10:let targetEnv = targetModule.Environment</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node2625 [shape=diamond, label=<<font color="black">(= targetEnv undefined)</font>> color="black" fillcolor="white" style=filled]
  node2620 [shape=diamond, label=<<font color="black">(! (contains exports P))</font>> color="black" fillcolor="white" style=filled]
  node2623 [shape=cds, label=<<font color="black">6:app __x3__ = (m.ResolveExport m P (new []))</font>> color="black" fillcolor="white" style=filled]
  node2619 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">3:let exports = O.Exports</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node2615 [shape=cds, label=<<font color="black">1:app __x1__ = (Type P)</font>> color="black" fillcolor="white" style=filled]
  node2614 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:assert (= __x0__ true)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node2629 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">13:return [? __x4__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node2626 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw ReferenceError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node2611 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node2629 -> node2612 [ color="black"]
  node2615 -> node2616 [ color="black"]
  node2627 -> node2628 [ color="black"]
  node2616 -> node2617 [label=<<font color="black">true</font>> color="black"]
  node2616 -> node2619 [label=<<font color="black">false</font>> color="black"]
  node2625 -> node2626 [label=<<font color="black">true</font>> color="black"]
  node2625 -> node2627 [label=<<font color="black">false</font>> color="black"]
  node2620 -> node2621 [label=<<font color="black">true</font>> color="black"]
  node2620 -> node2622 [label=<<font color="black">false</font>> color="black"]
  node2628 -> node2629 [ color="black"]
  node2613 -> node2614 [ color="black"]
  node2614 -> node2615 [ color="black"]
  node2611 -> node2613 [ color="black"]
  node2619 -> node2620 [ color="black"]
  node2623 -> node2624 [ color="black"]
  node2617 -> node2618 [ color="black"]
  node2622 -> node2623 [ color="black"]
  node2624 -> node2625 [ color="black"]
  node2618 -> node2619 [ color="black"]
  node2626 -> node2627 [ color="black"]
  node2621 -> node2622 [ color="black"]
}
