digraph {
  node0 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node5 [shape=cds, label=<<font color="black">app replacementValue = (GetArgument argumentsList 3i)</font>> color="black" fillcolor="white" style=filled]
  node10 [shape=diamond, label=<<font color="black">(= typedArray.ContentType CONST_BigInt)</font>> color="black" fillcolor="white" style=filled]
  node14 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">6:let replacement = [? __x3__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node1 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node6 [shape=cds, label=<<font color="black">0:app __x0__ = (ValidateIntegerTypedArray typedArray)</font>> color="black" fillcolor="white" style=filled]
  node9 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">2:let indexedPosition = [? __x1__]</td></tr>
      <tr><td align="left">3:let arrayTypeName = typedArray.TypedArrayName</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node13 [shape=cds, label=<<font color="black">6:app __x3__ = (ToBigInt replacementValue)</font>> color="black" fillcolor="white" style=filled]
  node2 [shape=cds, label=<<font color="black">app typedArray = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node12 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">5:let expected = [? __x2__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">9:let replacement = [? __x5__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11 [shape=cds, label=<<font color="black">5:app __x2__ = (ToBigInt expectedValue)</font>> color="black" fillcolor="white" style=filled]
  node8 [shape=cds, label=<<font color="black">2:app __x1__ = (ValidateAtomicAccess typedArray index)</font>> color="black" fillcolor="white" style=filled]
  node4 [shape=cds, label=<<font color="black">app expectedValue = (GetArgument argumentsList 2i)</font>> color="black" fillcolor="white" style=filled]
  node15 [shape=cds, label=<<font color="black">8:app __x4__ = (ToIntegerOrInfinity expectedValue)</font>> color="black" fillcolor="white" style=filled]
  node24 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">15:let expectedBytes = __x7__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node37 [shape=diamond, label=<<font color="black">(= __x11__ true)</font>> color="black" fillcolor="white" style=filled]
  node25 [shape=cds, label=<<font color="black">16:app __x8__ = (NumericToRawBytes elementType replacement isLittleEndian)</font>> color="black" fillcolor="white" style=filled]
  node20 [shape=diamond, label=<<font color="black">(= __x6__ true)</font>> color="black" fillcolor="white" style=filled]
  node29 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">18:let execution = AGENT.CandidateExecution</td></tr>
      <tr><td align="left">19:??? &quot;Let id:{eventList} be the [ [ EventList ] ] field of the element in id:{execution} . [ [ EventsRecords ] ] whose [ [ AgentSignifier ] ] is AgentSignifier ( ) .&quot;</td></tr>
      <tr><td align="left">20:??? &quot;Let id:{rawBytesRead} be a List of length id:{elementSize} whose elements are nondeterministically chosen byte values .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node21 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node33 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let event = (new ReadSharedMemory(&quot;Order&quot; -&gt; CONST_SeqCst, &quot;NoTear&quot; -&gt; true, &quot;Block&quot; -&gt; block, &quot;ByteIndex&quot; -&gt; indexedPosition, &quot;ElementSize&quot; -&gt; elementSize))</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node28 [shape=diamond, label=<<font color="black">(= __x9__ true)</font>> color="black" fillcolor="white" style=filled]
  node38 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">??? &quot;Store the individual bytes of id:{replacementBytes} into id:{block} , starting at id:{block} [ id:{indexedPosition} ] .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17 [shape=cds, label=<<font color="black">9:app __x5__ = (ToIntegerOrInfinity replacementValue)</font>> color="black" fillcolor="white" style=filled]
  node32 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">24:??? &quot;Let id:{second} be a new read - modify - write modification function with parameters ( id:{oldBytes} , id:{newBytes} ) that captures nothing and performs the following steps atomically when called : in:{} out:{}&quot;</td></tr>
      <tr><td align="left">26:let event = (new ReadModifyWriteSharedMemory(&quot;Order&quot; -&gt; CONST_SeqCst, &quot;NoTear&quot; -&gt; true, &quot;Block&quot; -&gt; block, &quot;ByteIndex&quot; -&gt; indexedPosition, &quot;ElementSize&quot; -&gt; elementSize, &quot;Payload&quot; -&gt; replacementBytes, &quot;ModifyOp&quot; -&gt; second))</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node34 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">29:append event -&gt; eventList</td></tr>
      <tr><td align="left">30:append (new ChosenValueRecord(&quot;Event&quot; -&gt; event, &quot;ChosenValue&quot; -&gt; rawBytesRead)) -&gt; execution.ChosenValues</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node22 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">12:let elementType = CONST_Int8</td></tr>
      <tr><td align="left">13:??? &quot;Let id:{elementSize} be the Element Size value specified in link:{unhandled: table-the-typedarray-constructors} for Element Type id:{elementType} .&quot;</td></tr>
      <tr><td align="left">14:let isLittleEndian = AGENT.LittleEndian</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node27 [shape=cds, label=<<font color="black">31:app __x9__ = (IsSharedArrayBuffer buffer)</font>> color="black" fillcolor="white" style=filled]
  node7 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let buffer = [? __x0__]</td></tr>
      <tr><td align="left">1:let block = buffer.ArrayBufferData</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node39 [shape=cds, label=<<font color="black">35:app __x12__ = (RawBytesToNumeric elementType rawBytesRead isLittleEndian)</font>> color="black" fillcolor="white" style=filled]
  node3 [shape=cds, label=<<font color="black">app index = (GetArgument argumentsList 1i)</font>> color="black" fillcolor="white" style=filled]
  node35 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">32:??? &quot;Let id:{rawBytesRead} be a List of length id:{elementSize} whose elements are the sequence of id:{elementSize} bytes starting with id:{block} [ id:{indexedPosition} ] .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">8:let expected = [? __x4__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node31 [shape=diamond, label=<<font color="black">(= __x10__ true)</font>> color="black" fillcolor="white" style=filled]
  node40 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">35:return __x12__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node26 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">16:let replacementBytes = __x8__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node23 [shape=cds, label=<<font color="black">15:app __x7__ = (NumericToRawBytes elementType expected isLittleEndian)</font>> color="black" fillcolor="white" style=filled]
  node36 [shape=cds, label=<<font color="black">33:app __x11__ = (ByteListEqual rawBytesRead expectedBytes)</font>> color="black" fillcolor="white" style=filled]
  node30 [shape=cds, label=<<font color="black">27:app __x10__ = (ByteListEqual rawBytesRead expectedBytes)</font>> color="black" fillcolor="white" style=filled]
  node19 [shape=cds, label=<<font color="black">10:app __x6__ = (IsDetachedBuffer buffer)</font>> color="black" fillcolor="white" style=filled]
  node29 -> node30 [ color="black"]
  node11 -> node12 [ color="black"]
  node0 -> node2 [ color="black"]
  node9 -> node10 [ color="black"]
  node27 -> node28 [ color="black"]
  node30 -> node31 [ color="black"]
  node26 -> node27 [ color="black"]
  node40 -> node1 [ color="black"]
  node10 -> node11 [label=<<font color="black">true</font>> color="black"]
  node10 -> node15 [label=<<font color="black">false</font>> color="black"]
  node16 -> node17 [ color="black"]
  node17 -> node18 [ color="black"]
  node33 -> node34 [ color="black"]
  node5 -> node6 [ color="black"]
  node3 -> node4 [ color="black"]
  node39 -> node40 [ color="black"]
  node7 -> node8 [ color="black"]
  node18 -> node19 [ color="black"]
  node2 -> node3 [ color="black"]
  node15 -> node16 [ color="black"]
  node19 -> node20 [ color="black"]
  node13 -> node14 [ color="black"]
  node35 -> node36 [ color="black"]
  node37 -> node38 [label=<<font color="black">true</font>> color="black"]
  node37 -> node39 [label=<<font color="black">false</font>> color="black"]
  node12 -> node13 [ color="black"]
  node36 -> node37 [ color="black"]
  node34 -> node39 [ color="black"]
  node22 -> node23 [ color="black"]
  node6 -> node7 [ color="black"]
  node32 -> node34 [ color="black"]
  node23 -> node24 [ color="black"]
  node20 -> node21 [label=<<font color="black">true</font>> color="black"]
  node20 -> node22 [label=<<font color="black">false</font>> color="black"]
  node4 -> node5 [ color="black"]
  node25 -> node26 [ color="black"]
  node31 -> node32 [label=<<font color="black">true</font>> color="black"]
  node31 -> node33 [label=<<font color="black">false</font>> color="black"]
  node8 -> node9 [ color="black"]
  node21 -> node22 [ color="black"]
  node24 -> node25 [ color="black"]
  node14 -> node19 [ color="black"]
  node28 -> node29 [label=<<font color="black">true</font>> color="black"]
  node28 -> node35 [label=<<font color="black">false</font>> color="black"]
  node38 -> node39 [ color="black"]
}
