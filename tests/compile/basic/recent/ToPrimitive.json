["Assert", ":", {
  "id": "input"
}, "is", "an", "ECMAScript", "language", "value", ".", {
  "k": 0
}, "If", "Type", "(", {
  "id": "input"
}, ")", "is", "Object", ",", "then", true, "Let", {
  "id": "exoticToPrim"
}, "be", "?", "GetMethod", "(", {
  "id": "input"
}, ",", "@", "@", "toPrimitive", ")", ".", {
  "k": 2
}, "If", {
  "id": "exoticToPrim"
}, "is", "not", {
  "value": "undefined"
}, ",", "then", true, "If", {
  "id": "preferredType"
}, "is", "not", "present", ",", "let", {
  "id": "hint"
}, "be", {
  "value": "\"default\""
}, ".", {
  "k": 4
}, "Else", "if", {
  "id": "preferredType"
}, "is", {
  "const": "string"
}, ",", "let", {
  "id": "hint"
}, "be", {
  "value": "\"string\""
}, ".", {
  "k": 5
}, "Else", ",", true, "Assert", ":", {
  "id": "preferredType"
}, "is", {
  "const": "number"
}, ".", {
  "k": 7
}, "Let", {
  "id": "hint"
}, "be", {
  "value": "\"number\""
}, ".", {
  "k": 8
}, false, {
  "k": 6
}, "Let", {
  "id": "result"
}, "be", "?", "Call", "(", {
  "id": "exoticToPrim"
}, ",", {
  "id": "input"
}, ",", "«", {
  "id": "hint"
}, "»", ")", ".", {
  "k": 9
}, "If", "Type", "(", {
  "id": "result"
}, ")", "is", "not", "Object", ",", "return", {
  "id": "result"
}, ".", {
  "k": 10
}, "Throw", "a", {
  "value": "TypeError"
}, "exception", ".", {
  "k": 11
}, false, {
  "k": 3
}, "If", {
  "id": "preferredType"
}, "is", "not", "present", ",", "let", {
  "id": "preferredType"
}, "be", {
  "const": "number"
}, ".", {
  "k": 12
}, "Return", "?", "OrdinaryToPrimitive", "(", {
  "id": "input"
}, ",", {
  "id": "preferredType"
}, ")", ".", {
  "k": 13
}, false, {
  "k": 1
}, "Return", {
  "id": "input"
}, ".", {
  "k": 14
}]