{
  app typedArray = (GetArgument argumentsList 0i)
  app index = (GetArgument argumentsList 1i)
  app count = (GetArgument argumentsList 2i)
  [0] app __x0__ = (ValidateSharedIntegerTypedArray typedArray true)
  [0] if (is-completion __x0__) if (= __x0__.Type CONST_normal) __x0__ = __x0__.Value else return __x0__ else [20] {}
  [0] let buffer = __x0__
  [1] app __x1__ = (ValidateAtomicAccess typedArray index)
  [1] if (is-completion __x1__) if (= __x1__.Type CONST_normal) __x1__ = __x1__.Value else return __x1__ else [20] {}
  [1] let i = __x1__
  [3] if (= count undefined) let c = Infinity else {
    [4] app __x2__ = (ToInteger count)
    [4] if (is-completion __x2__) if (= __x2__.Type CONST_normal) __x2__ = __x2__.Value else return __x2__ else [20] {}
    [4] let intCount = __x2__
    [5] app __x3__ = (max intCount 0i)
    [5] let c = __x3__
  }
  [6] let block = buffer.ArrayBufferData
  [7] let offset = typedArray.ByteOffset
  [8] let indexedPosition = (+ (* i 4i) offset)
  [9] app __x4__ = (GetWaiterList block indexedPosition)
  [9] let WL = __x4__
  [10] let n = 0i
  [11] app __x5__ = (EnterCriticalSection WL)
  [11] __x5__
  [12] app __x6__ = (RemoveWaiters WL c)
  [12] let S = __x6__
  [13] while (< 0i S.length) {
    [14] let W = S[0i]
    [15] (pop S 0i)
    [16] app __x7__ = (NotifyWaiter WL W)
    [16] __x7__
    [17] append 1i -> n
  }
  [18] app __x8__ = (LeaveCriticalSection WL)
  [18] __x8__
  [19] app __x9__ = (WrapCompletion n)
  [19] return __x9__
}