{
  [0] let F = GLOBAL_context.Function
  [1] let onFinally = F.OnFinally
  [2] app __x0__ = (IsCallable onFinally)
  [2] assert (= __x0__ true)
  [3] app __x1__ = (Call onFinally undefined)
  [3] if (is-completion __x1__) if (= __x1__.Type CONST_normal) __x1__ = __x1__.Value else return __x1__ else [10] {}
  [3] let result = __x1__
  [4] let C = F.Constructor
  [5] app __x2__ = (IsConstructor C)
  [5] assert (= __x2__ true)
  [6] app __x3__ = (PromiseResolve C result)
  [6] if (is-completion __x3__) if (= __x3__.Type CONST_normal) __x3__ = __x3__.Value else return __x3__ else [10] {}
  [6] let promise = __x3__
  [7] ??? "Let id:{valueThunk} be equivalent to a function that returns id:{value} ."
  [8] app __x4__ = (Invoke promise "then" (new [valueThunk]))
  [8] if (is-completion __x4__) if (= __x4__.Type CONST_normal) __x4__ = __x4__.Value else return __x4__ else [10] {}
  [8] app __x5__ = (WrapCompletion __x4__)
  [8] return __x5__
}