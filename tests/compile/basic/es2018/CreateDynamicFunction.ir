{
  let callerContext = GLOBAL_executionStack[(- GLOBAL_executionStack.length 2i)]
  let callerRealm = callerContext.Realm
  let calleeRealm = REALM
  app __x0__ = (HostEnsureCanCompileStrings callerRealm calleeRealm)
  if (is-completion __x0__) if (= __x0__.Type CONST_normal) __x0__ = __x0__.Value else return __x0__ else {}
  __x0__
  if (= newTarget undefined) newTarget = constructor else {}
  if (= kind "normal") {
    ??? "Let id:{goal} be the grammar symbol | FunctionBody [ ~ Yield , ~ Await ] | ."
    ??? "Let id:{parameterGoal} be the grammar symbol | FormalParameters [ ~ Yield , ~ Await ] | ."
    let fallbackProto = INTRINSIC_FunctionPrototype
  } else if (= kind "generator") {
    let goal = "GeneratorBody"
    ??? "Let id:{parameterGoal} be the grammar symbol | FormalParameters [ + Yield , ~ Await ] | ."
    let fallbackProto = INTRINSIC_Generator
  } else if (= kind "async") {
    assert (= kind "async")
    let goal = "AsyncFunctionBody"
    ??? "Let id:{parameterGoal} be the grammar symbol | FormalParameters [ ~ Yield , + Await ] | ."
    let fallbackProto = INTRINSIC_AsyncFunctionPrototype
  } else {
    let goal = "AsyncGeneratorBody"
    ??? "Let id:{parameterGoal} be the grammar symbol | FormalParameters [ + Yield , + Await ] | ."
    let fallbackProto = INTRINSIC_AsyncGenerator
  }
  let argCount = args.length
  let P = ""
  if (== argCount 0i) let bodyText = "" else if (== argCount 1i) let bodyText = args[0i] else {
    let firstArg = args[0i]
    app __x1__ = (ToString firstArg)
    if (is-completion __x1__) if (= __x1__.Type CONST_normal) __x1__ = __x1__.Value else return __x1__ else {}
    P = __x1__
    let k = 1i
    while (< k (- argCount 1i)) {
      let nextArg = args[k]
      app __x2__ = (ToString nextArg)
      if (is-completion __x2__) if (= __x2__.Type CONST_normal) __x2__ = __x2__.Value else return __x2__ else {}
      let nextArgString = __x2__
      P = (+ (+ P ",") nextArgString)
      k = (+ k 1i)
    }
    let bodyText = args[k]
  }
  app __x3__ = (ToString bodyText)
  if (is-completion __x3__) if (= __x3__.Type CONST_normal) __x3__ = __x3__.Value else return __x3__ else {}
  bodyText = __x3__
  ??? "Let id:{parameters} be the result of parsing id:{P} , interpreted as UTF - 16 encoded Unicode text as described in link:{} , using id:{parameterGoal} as the goal symbol . Throw a value:{SyntaxError} exception if the parse fails ."
  ??? "Let id:{body} be the result of parsing id:{bodyText} , interpreted as UTF - 16 encoded Unicode text as described in link:{} , using id:{goal} as the goal symbol . Throw a value:{SyntaxError} exception if the parse fails ."
  access __x4__ = (body "ContainsUseStrict")
  let strict = __x4__
  ??? "If any static semantics errors are detected for id:{parameters} or id:{body} , throw a value:{SyntaxError} or a value:{ReferenceError} exception , depending on the type of the error . If id:{strict} is value:{true} , the Early Error rules for grammar:{UniqueFormalParameters0} are applied . Parsing and early error detection may be interweaved in an implementation - dependent manner ."
  let __x5__ = (= strict true)
  if __x5__ {
    access __x6__ = (parameters "IsSimpleParameterList")
    __x5__ = (= __x6__ false)
  } else {}
  if __x5__ {
    app __x7__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_SyntaxError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
    return __x7__
  } else {}
  ??? "If any element of the BoundNames of id:{parameters} also occurs in the LexicallyDeclaredNames of id:{body} , throw a value:{SyntaxError} exception ."
  access __x8__ = (body "Contains")
  app __x9__ = (__x8__ "SuperCall")
  if (= __x9__ true) {
    app __x10__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_SyntaxError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
    return __x10__
  } else {}
  access __x11__ = (parameters "Contains")
  app __x12__ = (__x11__ "SuperCall")
  if (= __x12__ true) {
    app __x13__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_SyntaxError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
    return __x13__
  } else {}
  access __x14__ = (body "Contains")
  app __x15__ = (__x14__ "SuperProperty")
  if (= __x15__ true) {
    app __x16__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_SyntaxError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
    return __x16__
  } else {}
  access __x17__ = (parameters "Contains")
  app __x18__ = (__x17__ "SuperProperty")
  if (= __x18__ true) {
    app __x19__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_SyntaxError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
    return __x19__
  } else {}
  ??? "If id:{kind} is code:{\"generator\"} or ` \" async generator \" ` , then step-list:{...}"
  ??? "If id:{kind} is code:{\"async\"} or ` \" async generator \" ` , then step-list:{...}"
  if (= strict true) ??? "If BoundNames of id:{parameters} contains any duplicate elements , throw a value:{SyntaxError} exception ." else {}
  app __x20__ = (GetPrototypeFromConstructor newTarget fallbackProto)
  if (is-completion __x20__) if (= __x20__.Type CONST_normal) __x20__ = __x20__.Value else return __x20__ else {}
  let proto = __x20__
  app __x21__ = (FunctionAllocate proto strict kind)
  let F = __x21__
  let realmF = F.Realm
  let scope = realmF.GlobalEnv
  app __x22__ = (FunctionInitialize F CONST_Normal parameters body scope)
  __x22__
  if (= kind "generator") {
    app __x23__ = (ObjectCreate INTRINSIC_GeneratorPrototype)
    let prototype = __x23__
    app __x24__ = (DefinePropertyOrThrow F "prototype" (new PropertyDescriptor("Value" -> prototype, "Writable" -> true, "Enumerable" -> false, "Configurable" -> false)))
    __x24__
  } else {}
  ??? "Else if id:{kind} is ` \" async generator \" ` , then step-list:{...}"
  ??? "Else if id:{kind} is code:{\"normal\"} , perform MakeConstructor ( id:{F} ) ."
  app __x25__ = (SetFunctionName F "anonymous")
  __x25__
  app __x26__ = (WrapCompletion F)
  return __x26__
}