{
  let genContext = CONTEXT
  let generator = genContext.Generator
  app __x0__ = (GetGeneratorKind)
  assert (= __x0__ CONST_async)
  app __x1__ = (Await value)
  value = [? __x1__]
  generator.AsyncGeneratorState = CONST_suspendedYield
  if (= EXECUTION_STACK[(- EXECUTION_STACK.length 1i)] genContext) {
    let __x2__ = (- EXECUTION_STACK.length 1i)
    (pop EXECUTION_STACK __x2__)
  } else {}
  CONTEXT = EXECUTION_STACK[(- EXECUTION_STACK.length 1i)]
  genContext.ResumeCont = (resumptionValue) [=>] {
    if (! (= resumptionValue.Type CONST_return)) return resumptionValue else {}
    app __x3__ = (Await resumptionValue.Value)
    let awaited = __x3__
    if (= awaited.Type CONST_throw) return awaited else {}
    assert (= awaited.Type CONST_normal)
    return (new Completion("Type" -> CONST_return, "Value" -> awaited.Value, "Target" -> CONST_empty))
  }
  app __x4__ = (AsyncGeneratorResolve generator value false)
  return [! __x4__]
}