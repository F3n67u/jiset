{
  if (= hint absent) hint = CONST_sync else {}
  assert (|| (= hint CONST_sync) (= hint CONST_async))
  if (= method absent) if (= hint CONST_async) {
    app __x0__ = (GetMethod obj SYMBOL_asyncIterator)
    method = [? __x0__]
    if (= method undefined) {
      app __x1__ = (GetMethod obj SYMBOL_iterator)
      let syncMethod = [? __x1__]
      app __x2__ = (GetIterator obj CONST_sync syncMethod)
      let syncIteratorRecord = [? __x2__]
      app __x3__ = (CreateAsyncFromSyncIterator syncIteratorRecord)
      return [? __x3__]
    } else {}
  } else {
    app __x4__ = (GetMethod obj SYMBOL_iterator)
    method = [? __x4__]
  } else {}
  app __x5__ = (Call method obj)
  let iterator = [? __x5__]
  app __x6__ = (Type iterator)
  if (! (= __x6__ Object)) throw TypeError else {}
  app __x7__ = (GetV iterator "next")
  let nextMethod = [? __x7__]
  let iteratorRecord = (new Record("Iterator" -> iterator, "NextMethod" -> nextMethod, "Done" -> false))
  return iteratorRecord
}