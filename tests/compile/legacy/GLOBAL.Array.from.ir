{
  app __x0__ = (GetArgument argumentsList 0i)
  let items = __x0__
  app __x1__ = (GetArgument argumentsList 1i)
  let mapfn = __x1__
  app __x2__ = (GetArgument argumentsList 2i)
  let thisArg = __x2__
  let C = this
  if (= mapfn undefined) let mapping = false else {
    app __x3__ = (IsCallable mapfn)
    if (= __x3__ false) throw TypeError else {}
    let mapping = true
  }
  app __x4__ = (GetMethod items SYMBOL_iterator)
  let usingIterator = [? __x4__]
  if (! (= usingIterator undefined)) {
    app __x5__ = (IsConstructor C)
    if (= __x5__ true) {
      app __x6__ = (Construct C)
      let A = [? __x6__]
    } else {
      app __x7__ = (ArrayCreate 0i)
      let A = [! __x7__]
    }
    app __x8__ = (GetIterator items CONST_sync usingIterator)
    let iteratorRecord = [? __x8__]
    let k = 0i
    while true {
      if (! (< k (- (** 2.0 53i) 1i))) {
        app __x9__ = (ThrowCompletion ??? "TypeError")
        let error = __x9__
        app __x10__ = (IteratorClose iteratorRecord error)
        return [? __x10__]
      } else {}
      app __x11__ = (ToString k)
      let Pk = [! __x11__]
      app __x12__ = (IteratorStep iteratorRecord)
      let next = [? __x12__]
      if (= next false) {
        app __x13__ = (Set A "length" k true)
        [? __x13__]
        return A
      } else {}
      app __x14__ = (IteratorValue next)
      let nextValue = [? __x14__]
      if (= mapping true) {
        app __x15__ = (Call mapfn thisArg (new [nextValue, k]))
        let mappedValue = __x15__
        app __x16__ = (IsAbruptCompletion mappedValue)
        if __x16__ {
          app __x17__ = (IteratorClose iteratorRecord mappedValue)
          return [? __x17__]
        } else {}
      } else let mappedValue = nextValue
      app __x18__ = (CreateDataPropertyOrThrow A Pk mappedValue)
      let defineStatus = __x18__
      app __x19__ = (IsAbruptCompletion defineStatus)
      if __x19__ {
        app __x20__ = (IteratorClose iteratorRecord defineStatus)
        return [? __x20__]
      } else {}
      k = (+ k 1i)
    }
  } else {}
  app __x21__ = (ToObject items)
  let arrayLike = [! __x21__]
  app __x22__ = (LengthOfArrayLike arrayLike)
  let len = [? __x22__]
  app __x23__ = (IsConstructor C)
  if (= __x23__ true) {
    app __x24__ = (Construct C (new [len]))
    let A = [? __x24__]
  } else {
    app __x25__ = (ArrayCreate len)
    let A = [? __x25__]
  }
  let k = 0i
  while (< k len) {
    app __x26__ = (ToString k)
    let Pk = [! __x26__]
    app __x27__ = (Get arrayLike Pk)
    let kValue = [? __x27__]
    if (= mapping true) {
      app __x28__ = (Call mapfn thisArg (new [kValue, k]))
      let mappedValue = [? __x28__]
    } else let mappedValue = kValue
    app __x29__ = (CreateDataPropertyOrThrow A Pk mappedValue)
    [? __x29__]
    k = (+ k 1i)
  }
  app __x30__ = (Set A "length" len true)
  [? __x30__]
  return A
}