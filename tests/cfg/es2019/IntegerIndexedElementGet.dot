digraph {
  node2723 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node2730 [shape=diamond, label=<<font color="black">(|| (&lt; index 0i) (! (&lt; index length)))</font>> color="black" fillcolor="white" style=filled]
  node2718 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node2733 [shape=cds, label=<<font color="black">13:app __x3__ = (GetValueFromBuffer buffer indexedPosition elementType true &quot;Unordered&quot;)</font>> color="black" fillcolor="white" style=filled]
  node2727 [shape=diamond, label=<<font color="black">(== index -0.0)</font>> color="black" fillcolor="white" style=filled]
  node2721 [shape=cds, label=<<font color="black">3:app __x1__ = (IsDetachedBuffer buffer)</font>> color="black" fillcolor="white" style=filled]
  node2725 [shape=diamond, label=<<font color="black">(= __x2__ false)</font>> color="black" fillcolor="white" style=filled]
  node2719 [shape=cds, label=<<font color="black">0:app __x0__ = (Type index)</font>> color="black" fillcolor="white" style=filled]
  node2731 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return undefined</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node2726 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return undefined</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node2724 [shape=cds, label=<<font color="black">4:app __x2__ = (IsInteger index)</font>> color="black" fillcolor="white" style=filled]
  node2729 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">6:let length = O.ArrayLength</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node2717 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node2734 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">13:return __x3__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node2732 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">8:let offset = O.ByteOffset</td></tr>
      <tr><td align="left">9:let arrayTypeName = O.TypedArrayName</td></tr>
      <tr><td align="left">10:??? &quot;Let id:{elementSize} be the Number value of the Element Size value specified in link:{unhandled: table-49} for id:{arrayTypeName} .&quot;</td></tr>
      <tr><td align="left">11:let indexedPosition = (+ (* index elementSize) offset)</td></tr>
      <tr><td align="left">12:??? &quot;Let id:{elementType} be the String value of the Element Type value in link:{unhandled: table-49} for id:{arrayTypeName} .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node2720 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:assert (= __x0__ Number)</td></tr>
      <tr><td align="left">2:let buffer = O.ViewedArrayBuffer</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node2722 [shape=diamond, label=<<font color="black">(= __x1__ true)</font>> color="black" fillcolor="white" style=filled]
  node2728 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return undefined</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node2719 -> node2720 [ color="black"]
  node2724 -> node2725 [ color="black"]
  node2721 -> node2722 [ color="black"]
  node2717 -> node2719 [ color="black"]
  node2731 -> node2732 [ color="black"]
  node2722 -> node2723 [label=<<font color="black">true</font>> color="black"]
  node2722 -> node2724 [label=<<font color="black">false</font>> color="black"]
  node2726 -> node2727 [ color="black"]
  node2732 -> node2733 [ color="black"]
  node2728 -> node2729 [ color="black"]
  node2723 -> node2724 [ color="black"]
  node2729 -> node2730 [ color="black"]
  node2727 -> node2728 [label=<<font color="black">true</font>> color="black"]
  node2727 -> node2729 [label=<<font color="black">false</font>> color="black"]
  node2733 -> node2734 [ color="black"]
  node2720 -> node2721 [ color="black"]
  node2725 -> node2726 [label=<<font color="black">true</font>> color="black"]
  node2725 -> node2727 [label=<<font color="black">false</font>> color="black"]
  node2734 -> node2718 [ color="black"]
  node2730 -> node2731 [label=<<font color="black">true</font>> color="black"]
  node2730 -> node2732 [label=<<font color="black">false</font>> color="black"]
}
