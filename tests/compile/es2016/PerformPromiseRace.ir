{
  app iteratorRecord = (GetArgument argumentsList 0i)
  app promiseCapability = (GetArgument argumentsList 1i)
  app C = (GetArgument argumentsList 2i)
  while true {
    [1] app __x0__ = (IteratorStep iteratorRecord.Iterator)
    [1] let next = __x0__
    [2] app __x1__ = (IsAbruptCompletion next)
    [2] if __x1__ iteratorRecord.Done = true else [1] {}
    [3] if (is-completion next) if (= next.Type CONST_normal) next = next.Value else return next else [1] {}
    [3] next
    [4] if (= next false) {
      [5] iteratorRecord.Done = true
      [6] app __x2__ = (WrapCompletion promiseCapability.Promise)
      [6] return __x2__
    } else [1] {}
    [7] app __x3__ = (IteratorValue next)
    [7] let nextValue = __x3__
    [8] app __x4__ = (IsAbruptCompletion nextValue)
    [8] if __x4__ iteratorRecord.Done = true else [1] {}
    [9] if (is-completion nextValue) if (= nextValue.Type CONST_normal) nextValue = nextValue.Value else return nextValue else [1] {}
    [9] nextValue
    [10] app __x5__ = (Invoke C "resolve" (new [nextValue]))
    [10] if (is-completion __x5__) if (= __x5__.Type CONST_normal) __x5__ = __x5__.Value else return __x5__ else [1] {}
    [10] let nextPromise = __x5__
    [11] app __x6__ = (Invoke nextPromise "then" (new [promiseCapability.Resolve, promiseCapability.Reject]))
    [11] if (is-completion __x6__) if (= __x6__.Type CONST_normal) __x6__ = __x6__.Value else return __x6__ else [1] {}
    [11] __x6__
  }
}