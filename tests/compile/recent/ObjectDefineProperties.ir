{
  [0] app __x0__ = (Type O)
  [0] assert (= __x0__ Object)
  [1] app __x1__ = (ToObject Properties)
  [1] if (is-completion __x1__) if (= __x1__.Type CONST_normal) __x1__ = __x1__.Value else return __x1__ else [71] {}
  [1] let props = __x1__
  [2] app __x2__ = (props.OwnPropertyKeys props)
  [2] if (is-completion __x2__) if (= __x2__.Type CONST_normal) __x2__ = __x2__.Value else return __x2__ else [71] {}
  [2] let keys = __x2__
  [3] let descriptors = (new [])
  [4] let __x3__ = keys
  [4] let __x4__ = 0i
  [4] while (< __x4__ __x3__.length) {
    let nextKey = __x3__[__x4__]
    [5] app __x5__ = (props.GetOwnProperty props nextKey)
    [5] if (is-completion __x5__) if (= __x5__.Type CONST_normal) __x5__ = __x5__.Value else return __x5__ else [71] {}
    [5] let propDesc = __x5__
    [6] if (&& (! (= propDesc undefined)) (= propDesc.Enumerable true)) {
      [7] app __x6__ = (Get props nextKey)
      [7] if (is-completion __x6__) if (= __x6__.Type CONST_normal) __x6__ = __x6__.Value else return __x6__ else [71] {}
      [7] let descObj = __x6__
      [8] app __x7__ = (ToPropertyDescriptor descObj)
      [8] if (is-completion __x7__) if (= __x7__.Type CONST_normal) __x7__ = __x7__.Value else return __x7__ else [71] {}
      [8] let desc = __x7__
      [9] append (new [nextKey, desc]) -> descriptors
    } else [71] {}
    __x4__ = (+ __x4__ 1i)
  }
  [10] let __x8__ = descriptors
  [10] let __x9__ = 0i
  [10] while (< __x9__ __x8__.length) {
    let pair = __x8__[__x9__]
    [11] let P = pair[0i]
    [12] let desc = pair[1i]
    [13] app __x10__ = (DefinePropertyOrThrow O P desc)
    [13] if (is-completion __x10__) if (= __x10__.Type CONST_normal) __x10__ = __x10__.Value else return __x10__ else [71] {}
    [13] __x10__
    __x9__ = (+ __x9__ 1i)
  }
  [14] app __x11__ = (WrapCompletion O)
  [14] return __x11__
}