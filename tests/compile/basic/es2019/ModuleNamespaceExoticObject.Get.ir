{
  app __x0__ = (IsPropertyKey P)
  assert (= __x0__ true)
  app __x1__ = (Type P)
  if (= __x1__ Symbol) {
    app __x2__ = (OrdinaryGet O P Receiver)
    return [? __x2__]
  } else {}
  let exports = O.Exports
  if (! (contains exports P)) return undefined else {}
  let m = O.Module
  app __x3__ = (m.ResolveExport m P (new []))
  let binding = [! __x3__]
  assert (= (typeof binding) "ResolvedBindingRecord")
  let targetModule = binding.Module
  assert (! (= targetModule undefined))
  let targetEnv = targetModule.Environment
  if (= targetEnv undefined) throw INTRINSIC_ReferenceError else {}
  let targetEnvRec = targetEnv.EnvironmentRecord
  app __x4__ = (targetEnvRec.GetBindingValue targetEnvRec binding.BindingName true)
  return [? __x4__]
}