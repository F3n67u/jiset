{
  access __x0__ = (MultiplicativeExpression "Evaluation")
  let left = __x0__
  app __x1__ = (GetValue left)
  let leftValue = [? __x1__]
  access __x2__ = (ExponentiationExpression "Evaluation")
  let right = __x2__
  app __x3__ = (GetValue right)
  let rightValue = [? __x3__]
  app __x4__ = (ToNumeric leftValue)
  let lnum = [? __x4__]
  app __x5__ = (ToNumeric rightValue)
  let rnum = [? __x5__]
  app __x6__ = (Type lnum)
  app __x7__ = (Type rnum)
  if (! (= __x6__ __x7__)) throw TypeError else {}
  app __x8__ = (Type lnum)
  let T = __x8__
  if (= MultiplicativeOperator ??? "*") {
    app __x9__ = (PRIMITIVE[T].multiply lnum rnum)
    return __x9__
  } else {}
  if (= MultiplicativeOperator ??? "/") {
    app __x10__ = (PRIMITIVE[T].divide lnum rnum)
    return __x10__
  } else {
    assert (= MultiplicativeOperator ??? "%")
    app __x11__ = (PRIMITIVE[T].remainder lnum rnum)
    return __x11__
  }
}