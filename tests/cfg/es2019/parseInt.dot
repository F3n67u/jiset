digraph {
  node11485 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">5:let R = [? __x1__]</td></tr>
      <tr><td align="left">6:let stripPrefix = true</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11495 [shape=diamond, label=<<font color="black">(= Z.length 0i)</font>> color="black" fillcolor="white" style=filled]
  node11500 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return -0.0</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11499 [shape=diamond, label=<<font color="black">(== sign -1i)</font>> color="black" fillcolor="white" style=filled]
  node11484 [shape=cds, label=<<font color="black">5:app __x1__ = (ToInt32 radix)</font>> color="black" fillcolor="white" style=filled]
  node11492 [shape=diamond, label=<<font color="black">(= stripPrefix true)</font>> color="black" fillcolor="white" style=filled]
  node11488 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return NaN</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11496 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return NaN</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11483 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let inputString = [? __x0__]</td></tr>
      <tr><td align="left">1:??? &quot;Let id:{S} be a newly created substring of id:{inputString} consisting of the first code unit that is not a nt:{StrWhiteSpaceChar} and all code units following that code unit . ( In other words , remove leading white space . ) If id:{inputString} does not contain any such code unit , let id:{S} be the empty string .&quot;</td></tr>
      <tr><td align="left">2:let sign = 1i</td></tr>
      <tr><td align="left">3:??? &quot;If id:{S} is not empty and the first code unit of id:{S} is the code unit 0x002D ( HYPHEN - MINUS ) , set id:{sign} to - 1 .&quot;</td></tr>
      <tr><td align="left">4:??? &quot;If id:{S} is not empty and the first code unit of id:{S} is the code unit 0x002B ( PLUS SIGN ) or the code unit 0x002D ( HYPHEN - MINUS ) , remove the first code unit from id:{S} .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11502 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">22:let number = mathInt</td></tr>
      <tr><td align="left">23:return (* sign number)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11487 [shape=diamond, label=<<font color="black">(|| (&lt; R 2i) (&lt; 36i R))</font>> color="black" fillcolor="white" style=filled]
  node11498 [shape=diamond, label=<<font color="black">(== mathInt 0i)</font>> color="black" fillcolor="white" style=filled]
  node11493 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">??? &quot;If the length of id:{S} is at least 2 and the first two code units of id:{S} are either code:{\&quot;0x\&quot;} or code:{\&quot;0X\&quot;} , then in:{} out:{}&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11486 [shape=diamond, label=<<font color="black">(! (== R 0i))</font>> color="black" fillcolor="white" style=filled]
  node11501 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">21:return 0i</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11482 [shape=cds, label=<<font color="black">0:app __x0__ = (ToString string)</font>> color="black" fillcolor="white" style=filled]
  node11497 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">18:??? &quot;Let id:{mathInt} be the mathematical integer value that is represented by id:{Z} in radix - id:{R} notation , using the letters &lt; b &gt; A &lt; / b &gt; - &lt; b &gt; Z &lt; / b &gt; and &lt; b &gt; a &lt; / b &gt; - &lt; b &gt; z &lt; / b &gt; for digits with values 10 through 35 . ( However , if id:{R} is 10 and id:{Z} contains more than 20 significant digits , every significant digit after the 20th may be replaced by a 0 digit , at the option of the implementation ; and if id:{R} is not 2 , 4 , 8 , 10 , 16 , or 32 , then id:{mathInt} may be an implementation - dependent approximation to the mathematical integer value that is represented by id:{Z} in radix - id:{R} notation . )&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11494 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">16:??? &quot;If id:{S} contains a code unit that is not a radix - id:{R} digit , let id:{Z} be the substring of id:{S} consisting of all code units before the first such code unit ; otherwise , let id:{Z} be id:{S} .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11481 [shape=cds, label=<<font color="black">app radix = (GetArgument argumentsList 1i)</font>> color="black" fillcolor="white" style=filled]
  node11491 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">R = 10i</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11480 [shape=cds, label=<<font color="black">app string = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node11478 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node11490 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">stripPrefix = false</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11479 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node11489 [shape=diamond, label=<<font color="black">(! (== R 16i))</font>> color="black" fillcolor="white" style=filled]
  node11500 -> node11501 [ color="black"]
  node11490 -> node11492 [ color="black"]
  node11497 -> node11498 [ color="black"]
  node11498 -> node11499 [label=<<font color="black">true</font>> color="black"]
  node11498 -> node11502 [label=<<font color="black">false</font>> color="black"]
  node11487 -> node11488 [label=<<font color="black">true</font>> color="black"]
  node11487 -> node11489 [label=<<font color="black">false</font>> color="black"]
  node11501 -> node11502 [ color="black"]
  node11478 -> node11480 [ color="black"]
  node11488 -> node11489 [ color="black"]
  node11484 -> node11485 [ color="black"]
  node11492 -> node11493 [label=<<font color="black">true</font>> color="black"]
  node11492 -> node11494 [label=<<font color="black">false</font>> color="black"]
  node11485 -> node11486 [ color="black"]
  node11494 -> node11495 [ color="black"]
  node11502 -> node11479 [ color="black"]
  node11482 -> node11483 [ color="black"]
  node11489 -> node11490 [label=<<font color="black">true</font>> color="black"]
  node11489 -> node11492 [label=<<font color="black">false</font>> color="black"]
  node11480 -> node11481 [ color="black"]
  node11496 -> node11497 [ color="black"]
  node11483 -> node11484 [ color="black"]
  node11491 -> node11492 [ color="black"]
  node11486 -> node11487 [label=<<font color="black">true</font>> color="black"]
  node11486 -> node11491 [label=<<font color="black">false</font>> color="black"]
  node11493 -> node11494 [ color="black"]
  node11495 -> node11496 [label=<<font color="black">true</font>> color="black"]
  node11495 -> node11497 [label=<<font color="black">false</font>> color="black"]
  node11499 -> node11500 [label=<<font color="black">true</font>> color="black"]
  node11499 -> node11501 [label=<<font color="black">false</font>> color="black"]
  node11481 -> node11482 [ color="black"]
}
