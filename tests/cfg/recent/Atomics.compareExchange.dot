digraph {
  node18005 [shape=cds, label=<<font color="black">10:app __x6__ = (IsDetachedBuffer buffer)</font>> color="black" fillcolor="white" style=filled]
  node18011 [shape=cds, label=<<font color="black">16:app __x8__ = (NumericToRawBytes elementType replacement isLittleEndian)</font>> color="black" fillcolor="white" style=filled]
  node18022 [shape=cds, label=<<font color="black">33:app __x11__ = (ByteListEqual rawBytesRead expectedBytes)</font>> color="black" fillcolor="white" style=filled]
  node18004 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">9:let replacement = [? __x5__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18016 [shape=cds, label=<<font color="black">27:app __x10__ = (ByteListEqual rawBytesRead expectedBytes)</font>> color="black" fillcolor="white" style=filled]
  node17995 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">2:let indexedPosition = [? __x1__]</td></tr>
      <tr><td align="left">3:let arrayTypeName = typedArray.TypedArrayName</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18012 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">16:let replacementBytes = __x8__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17991 [shape=cds, label=<<font color="black">app replacementValue = (GetArgument argumentsList 3i)</font>> color="black" fillcolor="white" style=filled]
  node18013 [shape=cds, label=<<font color="black">31:app __x9__ = (IsSharedArrayBuffer buffer)</font>> color="black" fillcolor="white" style=filled]
  node18003 [shape=cds, label=<<font color="black">9:app __x5__ = (ToIntegerOrInfinity replacementValue)</font>> color="black" fillcolor="white" style=filled]
  node18006 [shape=diamond, label=<<font color="black">(= __x6__ true)</font>> color="black" fillcolor="white" style=filled]
  node18000 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">6:let replacement = [? __x3__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18009 [shape=cds, label=<<font color="black">15:app __x7__ = (NumericToRawBytes elementType expected isLittleEndian)</font>> color="black" fillcolor="white" style=filled]
  node18002 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">8:let expected = [? __x4__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18019 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let event = (new ReadSharedMemory(&quot;Order&quot; -&gt; CONST_SeqCst, &quot;NoTear&quot; -&gt; true, &quot;Block&quot; -&gt; block, &quot;ByteIndex&quot; -&gt; indexedPosition, &quot;ElementSize&quot; -&gt; elementSize))</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18024 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">??? &quot;Store the individual bytes of id:{replacementBytes} into id:{block} , starting at id:{block} [ id:{indexedPosition} ] .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17989 [shape=cds, label=<<font color="black">app index = (GetArgument argumentsList 1i)</font>> color="black" fillcolor="white" style=filled]
  node18014 [shape=diamond, label=<<font color="black">(= __x9__ true)</font>> color="black" fillcolor="white" style=filled]
  node18008 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">12:??? &quot;Let id:{elementType} be the Element Type value in link:{unhandled: table-the-typedarray-constructors} for id:{arrayTypeName} .&quot;</td></tr>
      <tr><td align="left">13:??? &quot;Let id:{elementSize} be the Element Size value specified in link:{unhandled: table-the-typedarray-constructors} for Element Type id:{elementType} .&quot;</td></tr>
      <tr><td align="left">14:let isLittleEndian = GLOBAL_agent.LittleEndian</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17986 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node17998 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">5:let expected = [? __x2__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18018 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">24:??? &quot;Let id:{second} be a new read - modify - write modification function with parameters ( id:{oldBytes} , id:{newBytes} ) that captures nothing and performs the following steps atomically when called : in:{} out:{}&quot;</td></tr>
      <tr><td align="left">26:let event = (new ReadModifyWriteSharedMemory(&quot;Order&quot; -&gt; CONST_SeqCst, &quot;NoTear&quot; -&gt; true, &quot;Block&quot; -&gt; block, &quot;ByteIndex&quot; -&gt; indexedPosition, &quot;ElementSize&quot; -&gt; elementSize, &quot;Payload&quot; -&gt; replacementBytes, &quot;ModifyOp&quot; -&gt; second))</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18020 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">29:append event -&gt; eventList</td></tr>
      <tr><td align="left">30:append (new ChosenValueRecord(&quot;Event&quot; -&gt; event, &quot;ChosenValue&quot; -&gt; rawBytesRead)) -&gt; execution.ChosenValues</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17988 [shape=cds, label=<<font color="black">app typedArray = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node18001 [shape=cds, label=<<font color="black">8:app __x4__ = (ToIntegerOrInfinity expectedValue)</font>> color="black" fillcolor="white" style=filled]
  node18023 [shape=diamond, label=<<font color="black">(= __x11__ true)</font>> color="black" fillcolor="white" style=filled]
  node18015 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">18:let execution = GLOBAL_agent.CandidateExecution</td></tr>
      <tr><td align="left">19:??? &quot;Let id:{eventList} be the [ [ EventList ] ] field of the element in id:{execution} . [ [ EventsRecords ] ] whose [ [ AgentSignifier ] ] is AgentSignifier ( ) .&quot;</td></tr>
      <tr><td align="left">20:??? &quot;Let id:{rawBytesRead} be a List of length id:{elementSize} whose elements are nondeterministically chosen byte values .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17994 [shape=cds, label=<<font color="black">2:app __x1__ = (ValidateAtomicAccess typedArray index)</font>> color="black" fillcolor="white" style=filled]
  node18026 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">35:return __x12__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17999 [shape=cds, label=<<font color="black">6:app __x3__ = (ToBigInt replacementValue)</font>> color="black" fillcolor="white" style=filled]
  node17990 [shape=cds, label=<<font color="black">app expectedValue = (GetArgument argumentsList 2i)</font>> color="black" fillcolor="white" style=filled]
  node18017 [shape=diamond, label=<<font color="black">(= __x10__ true)</font>> color="black" fillcolor="white" style=filled]
  node17996 [shape=diamond, label=<<font color="black">(= typedArray.ContentType CONST_BigInt)</font>> color="black" fillcolor="white" style=filled]
  node18007 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17997 [shape=cds, label=<<font color="black">5:app __x2__ = (ToBigInt expectedValue)</font>> color="black" fillcolor="white" style=filled]
  node17992 [shape=cds, label=<<font color="black">0:app __x0__ = (ValidateIntegerTypedArray typedArray)</font>> color="black" fillcolor="white" style=filled]
  node17987 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node18010 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">15:let expectedBytes = __x7__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18025 [shape=cds, label=<<font color="black">35:app __x12__ = (RawBytesToNumeric elementType rawBytesRead isLittleEndian)</font>> color="black" fillcolor="white" style=filled]
  node17993 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let buffer = [? __x0__]</td></tr>
      <tr><td align="left">1:let block = buffer.ArrayBufferData</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18021 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">32:??? &quot;Let id:{rawBytesRead} be a List of length id:{elementSize} whose elements are the sequence of id:{elementSize} bytes starting with id:{block} [ id:{indexedPosition} ] .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18018 -> node18020 [ color="black"]
  node18016 -> node18017 [ color="black"]
  node17986 -> node17988 [ color="black"]
  node17997 -> node17998 [ color="black"]
  node17990 -> node17991 [ color="black"]
  node18012 -> node18013 [ color="black"]
  node18008 -> node18009 [ color="black"]
  node17992 -> node17993 [ color="black"]
  node17989 -> node17990 [ color="black"]
  node18021 -> node18022 [ color="black"]
  node17995 -> node17996 [ color="black"]
  node18002 -> node18003 [ color="black"]
  node18023 -> node18024 [label=<<font color="black">true</font>> color="black"]
  node18023 -> node18025 [label=<<font color="black">false</font>> color="black"]
  node18006 -> node18007 [label=<<font color="black">true</font>> color="black"]
  node18006 -> node18008 [label=<<font color="black">false</font>> color="black"]
  node18010 -> node18011 [ color="black"]
  node17988 -> node17989 [ color="black"]
  node18000 -> node18005 [ color="black"]
  node18009 -> node18010 [ color="black"]
  node18003 -> node18004 [ color="black"]
  node18015 -> node18016 [ color="black"]
  node17994 -> node17995 [ color="black"]
  node18019 -> node18020 [ color="black"]
  node18011 -> node18012 [ color="black"]
  node18025 -> node18026 [ color="black"]
  node18013 -> node18014 [ color="black"]
  node17998 -> node17999 [ color="black"]
  node18004 -> node18005 [ color="black"]
  node17991 -> node17992 [ color="black"]
  node18017 -> node18018 [label=<<font color="black">true</font>> color="black"]
  node18017 -> node18019 [label=<<font color="black">false</font>> color="black"]
  node17999 -> node18000 [ color="black"]
  node18024 -> node18025 [ color="black"]
  node17993 -> node17994 [ color="black"]
  node18005 -> node18006 [ color="black"]
  node18026 -> node17987 [ color="black"]
  node18001 -> node18002 [ color="black"]
  node18022 -> node18023 [ color="black"]
  node18007 -> node18008 [ color="black"]
  node17996 -> node17997 [label=<<font color="black">true</font>> color="black"]
  node17996 -> node18001 [label=<<font color="black">false</font>> color="black"]
  node18014 -> node18015 [label=<<font color="black">true</font>> color="black"]
  node18014 -> node18021 [label=<<font color="black">false</font>> color="black"]
  node18020 -> node18025 [ color="black"]
}
