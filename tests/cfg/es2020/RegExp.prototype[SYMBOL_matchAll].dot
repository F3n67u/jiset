digraph {
  node0 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node5 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10 [shape=cds, label=<<font color="black">4:app __x2__ = (Get R &quot;flags&quot;)</font>> color="black" fillcolor="white" style=filled]
  node14 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">5:let matcher = [? __x4__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node20 [shape=diamond, label=<<font color="black">(contains flags &quot;g&quot;)</font>> color="black" fillcolor="white" style=filled]
  node1 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node6 [shape=cds, label=<<font color="black">2:app __x0__ = (ToString string)</font>> color="black" fillcolor="white" style=filled]
  node21 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let global = true</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node9 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">3:let C = [? __x1__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node13 [shape=cds, label=<<font color="black">5:app __x4__ = (Construct C (new [R, flags]))</font>> color="black" fillcolor="white" style=filled]
  node2 [shape=cds, label=<<font color="black">app string = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node17 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">6:let lastIndex = [? __x6__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">4:let flags = [? __x3__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node7 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">2:let S = [? __x0__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node3 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let R = this</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18 [shape=cds, label=<<font color="black">7:app __x7__ = (Set matcher &quot;lastIndex&quot; lastIndex true)</font>> color="black" fillcolor="white" style=filled]
  node16 [shape=cds, label=<<font color="black">6:app __x6__ = (ToLength [? __x5__])</font>> color="black" fillcolor="white" style=filled]
  node11 [shape=cds, label=<<font color="black">4:app __x3__ = (ToString [? __x2__])</font>> color="black" fillcolor="white" style=filled]
  node8 [shape=cds, label=<<font color="black">3:app __x1__ = (SpeciesConstructor R INTRINSIC_RegExp)</font>> color="black" fillcolor="white" style=filled]
  node19 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">7:[? __x7__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node4 [shape=diamond, label=<<font color="black">(! (= (typeof R) Object))</font>> color="black" fillcolor="white" style=filled]
  node15 [shape=cds, label=<<font color="black">6:app __x5__ = (Get R &quot;lastIndex&quot;)</font>> color="black" fillcolor="white" style=filled]
  node24 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let fullUnicode = true</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node25 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let fullUnicode = false</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node22 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let global = false</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node27 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">12:return [! __x8__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node26 [shape=cds, label=<<font color="black">12:app __x8__ = (CreateRegExpStringIterator matcher S global fullUnicode)</font>> color="black" fillcolor="white" style=filled]
  node23 [shape=diamond, label=<<font color="black">(contains flags &quot;u&quot;)</font>> color="black" fillcolor="white" style=filled]
  node11 -> node12 [ color="black"]
  node12 -> node13 [ color="black"]
  node0 -> node2 [ color="black"]
  node9 -> node10 [ color="black"]
  node14 -> node15 [ color="black"]
  node26 -> node27 [ color="black"]
  node10 -> node11 [ color="black"]
  node25 -> node26 [ color="black"]
  node8 -> node9 [ color="black"]
  node24 -> node26 [ color="black"]
  node23 -> node24 [label=<<font color="black">true</font>> color="black"]
  node23 -> node25 [label=<<font color="black">false</font>> color="black"]
  node21 -> node23 [ color="black"]
  node17 -> node18 [ color="black"]
  node5 -> node6 [ color="black"]
  node3 -> node4 [ color="black"]
  node7 -> node8 [ color="black"]
  node18 -> node19 [ color="black"]
  node2 -> node3 [ color="black"]
  node15 -> node16 [ color="black"]
  node19 -> node20 [ color="black"]
  node13 -> node14 [ color="black"]
  node22 -> node23 [ color="black"]
  node6 -> node7 [ color="black"]
  node4 -> node5 [label=<<font color="black">true</font>> color="black"]
  node4 -> node6 [label=<<font color="black">false</font>> color="black"]
  node20 -> node21 [label=<<font color="black">true</font>> color="black"]
  node20 -> node22 [label=<<font color="black">false</font>> color="black"]
  node16 -> node17 [ color="black"]
  node27 -> node1 [ color="black"]
}
