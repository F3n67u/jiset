{
  access __x0__ = (ModuleItemList "LexicallyDeclaredNames")
  app __x1__ = (IsDuplicate __x0__)
  if __x1__ throw SyntaxError else {}
  access __x2__ = (ModuleItemList "LexicallyDeclaredNames")
  access __x3__ = (ModuleItemList "VarDeclaredNames")
  let __x4__ = __x2__
  let __x5__ = __x3__
  let __x6__ = 0i
  let __x7__ = 0i
  let __x8__ = false
  while (< __x6__ __x4__.length) {
    __x7__ = 0i
    while (< __x7__ __x5__.length) if (= __x4__[__x6__] __x5__[__x7__]) __x8__ = true else {}
  }
  if __x8__ throw SyntaxError else {}
  access __x9__ = (ModuleItemList "ExportedNames")
  app __x10__ = (IsDuplicate __x9__)
  if __x10__ throw SyntaxError else {}
  access __x11__ = (ModuleItemList "ExportedBindings")
  access __x12__ = (ModuleItemList "VarDeclaredNames")
  access __x13__ = (ModuleItemList "LexicallyDeclaredNames")
  let __x14__ = __x11__
  let __x15__ = __x12__
  let __x16__ = __x13__
  let __x17__ = 0i
  let __x18__ = 0i
  let __x19__ = false
  while (< __x17__ __x14__.length) {
    __x18__ = 0i
    while (< __x18__ __x15__.length) if (= __x14__[__x17__] __x15__[__x18__]) __x19__ = true else {}
    __x18__ = 0i
    while (< __x18__ __x16__.length) if (= __x14__[__x17__] __x16__[__x18__]) __x19__ = true else {}
  }
  if __x19__ throw SyntaxError else {}
  if (contains ModuleItemList "super") throw SyntaxError else {}
  access __x20__ = (ModuleItemList "Contains" "NewTarget")
  if __x20__ throw SyntaxError else {}
  access __x21__ = (ModuleItemList "ContainsDuplicateLabels" (new []))
  if (= __x21__ true) throw SyntaxError else {}
  access __x22__ = (ModuleItemList "ContainsUndefinedBreakTarget" (new []))
  if (= __x22__ true) throw SyntaxError else {}
  access __x23__ = (ModuleItemList "ContainsUndefinedContinueTarget" (new []) (new []))
  if (= __x23__ true) throw SyntaxError else {}
}