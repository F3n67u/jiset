digraph {
  node16972 [shape=cds, label=<<font color="black">12:app __x1__ = (IsCallable reviver)</font>> color="black" fillcolor="white" style=filled]
  node16979 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">11:return [? __x4__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16976 [shape=cds, label=<<font color="black">9:app __x3__ = (CreateDataProperty root rootName unfiltered)</font>> color="black" fillcolor="white" style=filled]
  node16978 [shape=cds, label=<<font color="black">11:app __x4__ = (InternalizeJSONProperty root rootName)</font>> color="black" fillcolor="white" style=filled]
  node16973 [shape=diamond, label=<<font color="black">(= __x1__ true)</font>> color="black" fillcolor="white" style=filled]
  node16968 [shape=cds, label=<<font color="black">app text = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node16969 [shape=cds, label=<<font color="black">app reviver = (GetArgument argumentsList 1i)</font>> color="black" fillcolor="white" style=filled]
  node16977 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">9:let status = __x3__</td></tr>
      <tr><td align="left">10:assert (= status true)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16967 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node16970 [shape=cds, label=<<font color="black">0:app __x0__ = (ToString text)</font>> color="black" fillcolor="white" style=filled]
  node16980 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return unfiltered</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16974 [shape=cds, label=<<font color="black">7:app __x2__ = (ObjectCreate INTRINSIC_ObjectPrototype)</font>> color="black" fillcolor="white" style=filled]
  node16966 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node16975 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">7:let root = __x2__</td></tr>
      <tr><td align="left">8:let rootName = &quot;&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16971 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let JText = [? __x0__]</td></tr>
      <tr><td align="left">1:??? &quot;Parse id:{JText} interpreted as UTF - 16 encoded Unicode points ( link:{unhandled: sec-ecmascript-language-types-string-type} ) as a JSON text as specified in ECMA - 404 . Throw a value:{SyntaxError} exception if id:{JText} is not a valid JSON text as defined in that specification .&quot;</td></tr>
      <tr><td align="left">2:let scriptText = (+ (+ &quot;(&quot; JText) &quot;);&quot;)</td></tr>
      <tr><td align="left">3:??? &quot;Let id:{completion} be the result of parsing and evaluating id:{scriptText} as if it was the source text of an ECMAScript nt:{Script} . The extended PropertyDefinitionEvaluation semantics defined in link:{unhandled: sec-__proto__-property-names-in-object-initializers} must not be used during the evaluation .&quot;</td></tr>
      <tr><td align="left">4:let unfiltered = completion.Value</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16968 -> node16969 [ color="black"]
  node16976 -> node16977 [ color="black"]
  node16966 -> node16968 [ color="black"]
  node16971 -> node16972 [ color="black"]
  node16978 -> node16979 [ color="black"]
  node16970 -> node16971 [ color="black"]
  node16975 -> node16976 [ color="black"]
  node16977 -> node16978 [ color="black"]
  node16979 -> node16967 [ color="black"]
  node16974 -> node16975 [ color="black"]
  node16980 -> node16967 [ color="black"]
  node16972 -> node16973 [ color="black"]
  node16973 -> node16974 [label=<<font color="black">true</font>> color="black"]
  node16973 -> node16980 [label=<<font color="black">false</font>> color="black"]
  node16969 -> node16970 [ color="black"]
}
