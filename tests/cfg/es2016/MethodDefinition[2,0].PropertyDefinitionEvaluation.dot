digraph {
  node8288 [shape=diamond, label=<<font color="black">true</font>> color="black" fillcolor="white" style=filled]
  node8298 [shape=cds, label=<<font color="black">9:app __x4__ = (DefinePropertyOrThrow object propKey desc)</font>> color="black" fillcolor="white" style=filled]
  node8293 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">5:let closure = __x1__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node8284 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node8289 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let strict = true</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node8287 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let propKey = __x0__</td></tr>
      <tr><td align="left">1:[? propKey]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node8297 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">7:__x3__</td></tr>
      <tr><td align="left">8:let desc = (new PropertyDescriptor(&quot;Get&quot; -&gt; closure, &quot;Enumerable&quot; -&gt; enumerable, &quot;Configurable&quot; -&gt; true))</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node8294 [shape=cds, label=<<font color="black">6:app __x2__ = (MakeMethod closure object)</font>> color="black" fillcolor="white" style=filled]
  node8290 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let strict = false</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node8286 [shape=cds, label=<<font color="black">0:access __x0__ = (PropertyName &quot;Evaluation&quot;)</font>> color="black" fillcolor="white" style=filled]
  node8291 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">3:let scope = GLOBAL_context.LexicalEnvironment</td></tr>
      <tr><td align="left">4:??? &quot;Let id:{formalParameterList} be the production grammar:{FormalParameters0, []} .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node8295 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">6:__x2__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node8299 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">9:return [? __x4__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node8285 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node8292 [shape=cds, label=<<font color="black">5:app __x1__ = (FunctionCreate CONST_Method formalParameterList FunctionBody scope strict)</font>> color="black" fillcolor="white" style=filled]
  node8296 [shape=cds, label=<<font color="black">7:app __x3__ = (SetFunctionName closure propKey &quot;get&quot;)</font>> color="black" fillcolor="white" style=filled]
  node8297 -> node8298 [ color="black"]
  node8298 -> node8299 [ color="black"]
  node8294 -> node8295 [ color="black"]
  node8286 -> node8287 [ color="black"]
  node8288 -> node8289 [label=<<font color="black">true</font>> color="black"]
  node8288 -> node8290 [label=<<font color="black">false</font>> color="black"]
  node8296 -> node8297 [ color="black"]
  node8299 -> node8285 [ color="black"]
  node8291 -> node8292 [ color="black"]
  node8292 -> node8293 [ color="black"]
  node8290 -> node8291 [ color="black"]
  node8287 -> node8288 [ color="black"]
  node8295 -> node8296 [ color="black"]
  node8293 -> node8294 [ color="black"]
  node8284 -> node8286 [ color="black"]
  node8289 -> node8291 [ color="black"]
}
