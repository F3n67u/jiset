{
  app __x0__ = (IsSharedArrayBuffer arrayBuffer)
  assert (= __x0__ true)
  app __x1__ = (IsNonNegativeInteger byteIndex)
  if (is-completion __x1__) if (= __x1__.Type CONST_normal) __x1__ = __x1__.Value else return __x1__ else {}
  assert (= __x1__ true)
  let block = arrayBuffer.ArrayBufferData
  ??? "Let id:{elementSize} be the Element Size value specified in link:{unhandled: table-the-typedarray-constructors} for Element Type id:{type} ."
  if (= isLittleEndian absent) isLittleEndian = GLOBAL_agent.LittleEndian else {}
  app __x2__ = (NumericToRawBytes type value isLittleEndian)
  let rawBytes = __x2__
  let execution = GLOBAL_agent.CandidateExecution
  ??? "Let id:{eventList} be the [ [ EventList ] ] field of the element in id:{execution} . [ [ EventsRecords ] ] whose [ [ AgentSignifier ] ] is AgentSignifier ( ) ."
  ??? "Let id:{rawBytesRead} be a List of length id:{elementSize} of nondeterministically chosen byte values ."
  let rmwEvent = (new ReadModifyWriteSharedMemory("Order" -> CONST_SeqCst, "NoTear" -> true, "Block" -> block, "ByteIndex" -> byteIndex, "ElementSize" -> elementSize, "Payload" -> rawBytes, "ModifyOp" -> op))
  append rmwEvent -> eventList
  append (new ChosenValueRecord("Event" -> rmwEvent, "ChosenValue" -> rawBytesRead)) -> execution.ChosenValues
  app __x3__ = (RawBytesToNumeric type rawBytesRead isLittleEndian)
  app __x4__ = (WrapCompletion __x3__)
  return __x4__
}