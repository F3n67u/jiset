digraph {
  node19299 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">6:[! __x1__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node19300 [shape=cds, label=<<font color="black">7:app __x2__ = (AsyncGeneratorResumeNext generator)</font>> color="black" fillcolor="white" style=filled]
  node19297 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">1:let queue = generator.AsyncGeneratorQueue</td></tr>
      <tr><td align="left">2:assert (&lt; 0i queue.length)</td></tr>
      <tr><td align="left">3:let next = queue[0i]</td></tr>
      <tr><td align="left">4:let __x0__ = (pop queue 0i)</td></tr>
      <tr><td align="left">5:let promiseCapability = next.Capability</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node19295 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node19298 [shape=cds, label=<<font color="black">6:app __x1__ = (Call promiseCapability.Reject undefined (new [exception]))</font>> color="black" fillcolor="white" style=filled]
  node19301 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">7:[! __x2__]</td></tr>
      <tr><td align="left">8:return undefined</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node19296 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node19295 -> node19297 [ color="black"]
  node19297 -> node19298 [ color="black"]
  node19300 -> node19301 [ color="black"]
  node19299 -> node19300 [ color="black"]
  node19301 -> node19296 [ color="black"]
  node19298 -> node19299 [ color="black"]
}
