digraph {
  node17766 [shape=diamond, label=<<font color="black">(! (= state.PropertyList undefined))</font>> color="black" fillcolor="white" style=filled]
  node17779 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">member = (+ member &quot; &quot;)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17783 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let final = &quot;{}&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17787 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">28:??? &quot;Remove the last element of id:{state} . [ [ Stack ] ] .&quot;</td></tr>
      <tr><td align="left">29:state.Indent = stepback</td></tr>
      <tr><td align="left">30:return final</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17773 [shape=cds, label=<<font color="black">10:app __x3__ = (SerializeJSONProperty state P value)</font>> color="black" fillcolor="white" style=filled]
  node17770 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">8:let partial = (new [])</td></tr>
      <tr><td align="left">9:let __x1__ = K</td></tr>
      <tr><td align="left">9:let __x2__ = 0i</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17786 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">25:let separator = (+ (+ &quot;,&quot; &quot;\n&quot;) state.Indent)</td></tr>
      <tr><td align="left">26:??? &quot;Let id:{properties} be the String value formed by concatenating all the element Strings of id:{partial} with each adjacent pair of Strings separated with id:{separator} . The id:{separator} String is not inserted either before the first String or after the last String .&quot;</td></tr>
      <tr><td align="left">27:let final = (+ (+ (+ (+ (+ (+ &quot;{&quot; &quot;\n&quot;) state.Indent) properties) &quot;\n&quot;) stepback) &quot;}&quot;)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17768 [shape=cds, label=<<font color="black">7:app __x0__ = (EnumerableOwnPropertyNames value CONST_key)</font>> color="black" fillcolor="white" style=filled]
  node17777 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">12:let member = __x4__</td></tr>
      <tr><td align="left">13:member = (+ member &quot;:&quot;)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17772 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let P = __x1__[__x2__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17775 [shape=diamond, label=<<font color="black">(! (= strP undefined))</font>> color="black" fillcolor="white" style=filled]
  node17771 [shape=diamond, label=<<font color="black">(&lt; __x2__ __x1__.length)</font>> color="black" fillcolor="white" style=filled]
  node17774 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">10:let strP = [? __x3__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17780 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">16:member = (+ member strP)</td></tr>
      <tr><td align="left">17:append member -&gt; partial</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17763 [shape=diamond, label=<<font color="black">(contains state.Stack value)</font>> color="black" fillcolor="white" style=filled]
  node17761 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node17767 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let K = state.PropertyList</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17784 [shape=diamond, label=<<font color="black">(= state.Gap &quot;&quot;)</font>> color="black" fillcolor="white" style=filled]
  node17776 [shape=cds, label=<<font color="black">12:app __x4__ = (QuoteJSONString P)</font>> color="black" fillcolor="white" style=filled]
  node17769 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">7:let K = [? __x0__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17781 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">__x2__ = (+ __x2__ 1i)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17764 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17762 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node17785 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">22:??? &quot;Let id:{properties} be the String value formed by concatenating all the element Strings of id:{partial} with each adjacent pair of Strings separated with the code unit 0x002C ( COMMA ) . A comma is not inserted either before the first String or after the last String .&quot;</td></tr>
      <tr><td align="left">23:let final = (+ (+ &quot;{&quot; properties) &quot;}&quot;)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17782 [shape=diamond, label=<<font color="black">(= partial.length 0i)</font>> color="black" fillcolor="white" style=filled]
  node17765 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">1:append value -&gt; state.Stack</td></tr>
      <tr><td align="left">2:let stepback = state.Indent</td></tr>
      <tr><td align="left">3:state.Indent = (+ state.Indent state.Gap)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17778 [shape=diamond, label=<<font color="black">(! (= state.Gap &quot;&quot;))</font>> color="black" fillcolor="white" style=filled]
  node17783 -> node17787 [ color="black"]
  node17769 -> node17770 [ color="black"]
  node17787 -> node17762 [ color="black"]
  node17781 -> node17771 [ color="black"]
  node17765 -> node17766 [ color="black"]
  node17774 -> node17775 [ color="black"]
  node17771 -> node17772 [label=<<font color="black">true</font>> color="black"]
  node17771 -> node17782 [label=<<font color="black">false</font>> color="black"]
  node17785 -> node17787 [ color="black"]
  node17776 -> node17777 [ color="black"]
  node17777 -> node17778 [ color="black"]
  node17786 -> node17787 [ color="black"]
  node17770 -> node17771 [ color="black"]
  node17766 -> node17767 [label=<<font color="black">true</font>> color="black"]
  node17766 -> node17768 [label=<<font color="black">false</font>> color="black"]
  node17782 -> node17783 [label=<<font color="black">true</font>> color="black"]
  node17782 -> node17784 [label=<<font color="black">false</font>> color="black"]
  node17784 -> node17785 [label=<<font color="black">true</font>> color="black"]
  node17784 -> node17786 [label=<<font color="black">false</font>> color="black"]
  node17779 -> node17780 [ color="black"]
  node17763 -> node17764 [label=<<font color="black">true</font>> color="black"]
  node17763 -> node17765 [label=<<font color="black">false</font>> color="black"]
  node17772 -> node17773 [ color="black"]
  node17768 -> node17769 [ color="black"]
  node17764 -> node17765 [ color="black"]
  node17775 -> node17776 [label=<<font color="black">true</font>> color="black"]
  node17775 -> node17781 [label=<<font color="black">false</font>> color="black"]
  node17767 -> node17770 [ color="black"]
  node17773 -> node17774 [ color="black"]
  node17780 -> node17781 [ color="black"]
  node17778 -> node17779 [label=<<font color="black">true</font>> color="black"]
  node17778 -> node17780 [label=<<font color="black">false</font>> color="black"]
  node17761 -> node17763 [ color="black"]
}
