digraph {
  node19254 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return [! __x6__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node19250 [shape=cds, label=<<font color="black">27:app __x5__ = (AsyncGeneratorReject generator completion.Value)</font>> color="black" fillcolor="white" style=filled]
  node19233 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">6:let next = queue[0i]</td></tr>
      <tr><td align="left">8:let completion = next.Completion</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node19238 [shape=diamond, label=<<font color="black">(= state CONST_completed)</font>> color="black" fillcolor="white" style=filled]
  node19231 [shape=diamond, label=<<font color="black">(= queue.length 0i)</font>> color="black" fillcolor="white" style=filled]
  node19235 [shape=diamond, label=<<font color="black">__x0__</font>> color="black" fillcolor="white" style=filled]
  node19255 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">30:assert (|| (= state CONST_suspendedStart) (= state CONST_suspendedYield))</td></tr>
      <tr><td align="left">31:let genContext = generator.AsyncGeneratorContext</td></tr>
      <tr><td align="left">32:let callerContext = GLOBAL_context</td></tr>
      <tr><td align="left">33:GLOBAL_context = null</td></tr>
      <tr><td align="left">34:generator.AsyncGeneratorState = CONST_executing</td></tr>
      <tr><td align="left">35:append genContext -&gt; GLOBAL_executionStack</td></tr>
      <tr><td align="left">35:GLOBAL_context = GLOBAL_executionStack[(- GLOBAL_executionStack.length 1i)]</td></tr>
      <tr><td align="left">36:??? &quot;Resume the suspended evaluation of id:{genContext} using id:{completion} as the result of the operation that suspended it . Let id:{result} be the completion record returned by the resumed computation .&quot;</td></tr>
      <tr><td align="left">39:return undefined</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node19241 [shape=cds, label=<<font color="black">16:app __x1__ = (PromiseResolve INTRINSIC_Promise completion.Value)</font>> color="black" fillcolor="white" style=filled]
  node19251 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">27:[! __x5__]</td></tr>
      <tr><td align="left">28:return undefined</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node19249 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">26:assert (= completion.Type CONST_throw)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node19239 [shape=diamond, label=<<font color="black">(= completion.Type CONST_return)</font>> color="black" fillcolor="white" style=filled]
  node19248 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">23:[! __x4__]</td></tr>
      <tr><td align="left">24:return undefined</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node19253 [shape=cds, label=<<font color="black">app __x6__ = (AsyncGeneratorResolve generator undefined true)</font>> color="black" fillcolor="white" style=filled]
  node19237 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">11:generator.AsyncGeneratorState = CONST_completed</td></tr>
      <tr><td align="left">12:state = CONST_completed</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node19230 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">4:let queue = generator.AsyncGeneratorQueue</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node19236 [shape=diamond, label=<<font color="black">(= state CONST_suspendedStart)</font>> color="black" fillcolor="white" style=filled]
  node19242 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">16:let promise = [? __x1__]</td></tr>
      <tr><td align="left">17:let stepsFulfilled = AsyncGeneratorResumeNextReturnProcessorFulfilledFunctions</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node19246 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">21:let onRejected = [! __x3__]</td></tr>
      <tr><td align="left">22:onRejected.Generator = generator</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node19226 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node19227 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">1:let state = generator.AsyncGeneratorState</td></tr>
      <tr><td align="left">2:assert (! (= state CONST_executing))</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node19245 [shape=cds, label=<<font color="black">21:app __x3__ = (CreateBuiltinFunction stepsRejected (new [&quot;Generator&quot;]))</font>> color="black" fillcolor="white" style=filled]
  node19234 [shape=cds, label=<<font color="black">29:app __x0__ = (IsAbruptCompletion completion)</font>> color="black" fillcolor="white" style=filled]
  node19244 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">18:let onFulfilled = [! __x2__]</td></tr>
      <tr><td align="left">19:onFulfilled.Generator = generator</td></tr>
      <tr><td align="left">20:let stepsRejected = AsyncGeneratorResumeNextReturnProcessorRejectedFunctions</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node19252 [shape=diamond, label=<<font color="black">(= state CONST_completed)</font>> color="black" fillcolor="white" style=filled]
  node19228 [shape=diamond, label=<<font color="black">(= state CONST_awaitingDASHreturn)</font>> color="black" fillcolor="white" style=filled]
  node19229 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return undefined</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node19243 [shape=cds, label=<<font color="black">18:app __x2__ = (CreateBuiltinFunction stepsFulfilled (new [&quot;Generator&quot;]))</font>> color="black" fillcolor="white" style=filled]
  node19240 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">15:generator.AsyncGeneratorState = CONST_awaitingDASHreturn</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node19225 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node19232 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return undefined</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node19247 [shape=cds, label=<<font color="black">23:app __x4__ = (PerformPromiseThen promise onFulfilled onRejected)</font>> color="black" fillcolor="white" style=filled]
  node19253 -> node19254 [ color="black"]
  node19238 -> node19239 [label=<<font color="black">true</font>> color="black"]
  node19238 -> node19255 [label=<<font color="black">false</font>> color="black"]
  node19246 -> node19247 [ color="black"]
  node19236 -> node19237 [label=<<font color="black">true</font>> color="black"]
  node19236 -> node19238 [label=<<font color="black">false</font>> color="black"]
  node19242 -> node19243 [ color="black"]
  node19254 -> node19255 [ color="black"]
  node19225 -> node19227 [ color="black"]
  node19251 -> node19255 [ color="black"]
  node19250 -> node19251 [ color="black"]
  node19229 -> node19230 [ color="black"]
  node19234 -> node19235 [ color="black"]
  node19252 -> node19253 [label=<<font color="black">true</font>> color="black"]
  node19252 -> node19255 [label=<<font color="black">false</font>> color="black"]
  node19240 -> node19241 [ color="black"]
  node19245 -> node19246 [ color="black"]
  node19249 -> node19250 [ color="black"]
  node19232 -> node19233 [ color="black"]
  node19227 -> node19228 [ color="black"]
  node19255 -> node19226 [ color="black"]
  node19235 -> node19236 [label=<<font color="black">true</font>> color="black"]
  node19235 -> node19252 [label=<<font color="black">false</font>> color="black"]
  node19228 -> node19229 [label=<<font color="black">true</font>> color="black"]
  node19228 -> node19230 [label=<<font color="black">false</font>> color="black"]
  node19239 -> node19240 [label=<<font color="black">true</font>> color="black"]
  node19239 -> node19249 [label=<<font color="black">false</font>> color="black"]
  node19241 -> node19242 [ color="black"]
  node19243 -> node19244 [ color="black"]
  node19247 -> node19248 [ color="black"]
  node19244 -> node19245 [ color="black"]
  node19237 -> node19238 [ color="black"]
  node19233 -> node19234 [ color="black"]
  node19248 -> node19255 [ color="black"]
  node19231 -> node19232 [label=<<font color="black">true</font>> color="black"]
  node19231 -> node19233 [label=<<font color="black">false</font>> color="black"]
  node19230 -> node19231 [ color="black"]
}
