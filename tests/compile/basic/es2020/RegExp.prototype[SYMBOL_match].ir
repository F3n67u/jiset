{
  let rx = this
  app __x0__ = (Type rx)
  if (! (= __x0__ Object)) throw TypeError else {}
  app __x1__ = (ToString string)
  let S = [? __x1__]
  app __x2__ = (Get rx "global")
  app __x3__ = (ToBoolean [? __x2__])
  let global = [! __x3__]
  if (= global false) {
    app __x4__ = (RegExpExec rx S)
    return [? __x4__]
  } else {
    assert (= global true)
    app __x5__ = (Get rx "unicode")
    app __x6__ = (ToBoolean [? __x5__])
    let fullUnicode = [! __x6__]
    app __x7__ = (Set rx "lastIndex" 0i true)
    [? __x7__]
    app __x8__ = (ArrayCreate 0i)
    let A = [! __x8__]
    let n = 0i
    while true {
      app __x9__ = (RegExpExec rx S)
      let result = [? __x9__]
      if (= result null) {
        if (== n 0i) return null else {}
        return A
      } else {
        app __x10__ = (Get result "0")
        app __x11__ = (ToString [? __x10__])
        let matchStr = [? __x11__]
        app __x12__ = (ToString n)
        app __x13__ = (CreateDataPropertyOrThrow A [! __x12__] matchStr)
        [! __x13__]
        if (= matchStr "") {
          app __x14__ = (Get rx "lastIndex")
          app __x15__ = (ToLength [? __x14__])
          let thisIndex = [? __x15__]
          app __x16__ = (AdvanceStringIndex S thisIndex fullUnicode)
          let nextIndex = __x16__
          app __x17__ = (Set rx "lastIndex" nextIndex true)
          [? __x17__]
        } else {}
        n = (+ n 1i)
      }
    }
  }
}