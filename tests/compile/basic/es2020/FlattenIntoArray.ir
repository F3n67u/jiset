{
  assert (= (typeof target) Object)
  assert (= (typeof source) Object)
  app __x0__ = (IsNonNegativeInteger sourceLen)
  assert (= [! __x0__] true)
  app __x1__ = (IsNonNegativeInteger start)
  assert (= [! __x1__] true)
  app __x2__ = (IsInteger depth)
  assert (|| (= [! __x2__] true) (|| (= depth Infinity) (= depth -Infinity)))
  let targetIndex = start
  let sourceIndex = 0i
  while (< sourceIndex sourceLen) {
    app __x3__ = (ToString sourceIndex)
    let P = [! __x3__]
    app __x4__ = (HasProperty source P)
    let exists = [? __x4__]
    if (= exists true) {
      app __x5__ = (Get source P)
      let element = [? __x5__]
      if (! (= mapperFunction absent)) {
        app __x6__ = (Call mapperFunction thisArg (new [element, sourceIndex, source]))
        element = [? __x6__]
      } else {}
      let shouldFlatten = false
      if (< 0i depth) {
        app __x7__ = (IsArray element)
        shouldFlatten = [? __x7__]
      } else {}
      if (= shouldFlatten true) {
        app __x8__ = (LengthOfArrayLike element)
        let elementLen = [? __x8__]
        app __x9__ = (FlattenIntoArray target element elementLen targetIndex (- depth 1i))
        targetIndex = [? __x9__]
      } else {
        if (! (< targetIndex (- (** 2.0 53i) 1i))) throw TypeError else {}
        app __x10__ = (ToString targetIndex)
        app __x11__ = (CreateDataPropertyOrThrow target [! __x10__] element)
        [? __x11__]
        targetIndex = (+ targetIndex 1i)
      }
    } else {}
    sourceIndex = (+ sourceIndex 1i)
  }
  return targetIndex
}