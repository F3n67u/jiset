digraph {
  node13982 [shape=cds, label=<<font color="black">9:app __x5__ = (StringIndexOf S searchStr start)</font>> color="black" fillcolor="white" style=filled]
  node13971 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let O = [? __x0__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node13976 [shape=diamond, label=<<font color="black">(= isRegExp true)</font>> color="black" fillcolor="white" style=filled]
  node13981 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">5:let pos = [? __x4__]</td></tr>
      <tr><td align="left">7:let len = S.length</td></tr>
      <tr><td align="left">8:??? &quot;Let id:{start} be the result of clamping id:{pos} between 0 and id:{len} .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node13979 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">4:let searchStr = [? __x3__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node13968 [shape=cds, label=<<font color="black">app searchString = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node13984 [shape=diamond, label=<<font color="black">(! (= index -1i))</font>> color="black" fillcolor="white" style=filled]
  node13980 [shape=cds, label=<<font color="black">5:app __x4__ = (ToIntegerOrInfinity position)</font>> color="black" fillcolor="white" style=filled]
  node13985 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return true</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node13967 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node13978 [shape=cds, label=<<font color="black">4:app __x3__ = (ToString searchString)</font>> color="black" fillcolor="white" style=filled]
  node13983 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">9:let index = [! __x5__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node13974 [shape=cds, label=<<font color="black">2:app __x2__ = (IsRegExp searchString)</font>> color="black" fillcolor="white" style=filled]
  node13969 [shape=cds, label=<<font color="black">app position = (GetArgument argumentsList 1i)</font>> color="black" fillcolor="white" style=filled]
  node13986 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">11:return false</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node13966 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node13977 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node13975 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">2:let isRegExp = [? __x2__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node13970 [shape=cds, label=<<font color="black">0:app __x0__ = (RequireObjectCoercible this)</font>> color="black" fillcolor="white" style=filled]
  node13973 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">1:let S = [? __x1__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node13972 [shape=cds, label=<<font color="black">1:app __x1__ = (ToString O)</font>> color="black" fillcolor="white" style=filled]
  node13981 -> node13982 [ color="black"]
  node13984 -> node13985 [label=<<font color="black">true</font>> color="black"]
  node13984 -> node13986 [label=<<font color="black">false</font>> color="black"]
  node13982 -> node13983 [ color="black"]
  node13976 -> node13977 [label=<<font color="black">true</font>> color="black"]
  node13976 -> node13978 [label=<<font color="black">false</font>> color="black"]
  node13975 -> node13976 [ color="black"]
  node13972 -> node13973 [ color="black"]
  node13985 -> node13986 [ color="black"]
  node13980 -> node13981 [ color="black"]
  node13983 -> node13984 [ color="black"]
  node13968 -> node13969 [ color="black"]
  node13986 -> node13967 [ color="black"]
  node13974 -> node13975 [ color="black"]
  node13966 -> node13968 [ color="black"]
  node13971 -> node13972 [ color="black"]
  node13973 -> node13974 [ color="black"]
  node13977 -> node13978 [ color="black"]
  node13978 -> node13979 [ color="black"]
  node13969 -> node13970 [ color="black"]
  node13970 -> node13971 [ color="black"]
  node13979 -> node13980 [ color="black"]
}
