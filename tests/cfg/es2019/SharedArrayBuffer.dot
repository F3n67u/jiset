digraph {
  node16480 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">2:return [? __x1__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16476 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16472 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node16473 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node16477 [shape=cds, label=<<font color="black">1:app __x0__ = (ToIndex length)</font>> color="black" fillcolor="white" style=filled]
  node16474 [shape=cds, label=<<font color="black">app length = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node16478 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">1:let byteLength = [? __x0__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16475 [shape=diamond, label=<<font color="black">(= NewTarget undefined)</font>> color="black" fillcolor="white" style=filled]
  node16479 [shape=cds, label=<<font color="black">2:app __x1__ = (AllocateSharedArrayBuffer NewTarget byteLength)</font>> color="black" fillcolor="white" style=filled]
  node16478 -> node16479 [ color="black"]
  node16472 -> node16474 [ color="black"]
  node16480 -> node16473 [ color="black"]
  node16477 -> node16478 [ color="black"]
  node16476 -> node16477 [ color="black"]
  node16474 -> node16475 [ color="black"]
  node16475 -> node16476 [label=<<font color="black">true</font>> color="black"]
  node16475 -> node16477 [label=<<font color="black">false</font>> color="black"]
  node16479 -> node16480 [ color="black"]
}
