{
  let oldEnv = CONTEXT.LexicalEnvironment
  if (< 0i uninitializedBoundNames.length) {
    app __x0__ = (NewDeclarativeEnvironment oldEnv)
    let newEnv = __x0__
    let __x1__ = uninitializedBoundNames
    let __x2__ = 0i
    while (< __x2__ __x1__.length) {
      let name = __x1__[__x2__]
      app __x3__ = (newEnv.CreateMutableBinding newEnv name false)
      [! __x3__]
      __x2__ = (+ __x2__ 1i)
    }
    CONTEXT.LexicalEnvironment = newEnv
  } else {}
  access __x4__ = (expr "Evaluation")
  let exprRef = __x4__
  CONTEXT.LexicalEnvironment = oldEnv
  app __x5__ = (GetValue exprRef)
  let exprValue = [? __x5__]
  if (= iterationKind CONST_enumerate) {
    if (|| (= exprValue undefined) (= exprValue null)) return (new Completion("Type" -> CONST_break, "Value" -> CONST_empty, "Target" -> CONST_empty)) else {}
    app __x6__ = (ToObject exprValue)
    let obj = [! __x6__]
    app __x7__ = (EnumerateObjectProperties obj)
    let iterator = [? __x7__]
    app __x8__ = (GetV iterator "next")
    let nextMethod = [! __x8__]
    return (new Record("Iterator" -> iterator, "NextMethod" -> nextMethod, "Done" -> false))
  } else {
    assert (|| (= iterationKind CONST_iterate) (= iterationKind CONST_asyncDASHiterate))
    if (= iterationKind CONST_asyncDASHiterate) let iteratorHint = CONST_async else let iteratorHint = CONST_sync
    app __x9__ = (GetIterator exprValue iteratorHint)
    return [? __x9__]
  }
}