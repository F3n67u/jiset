{
  [0] assert (|| (= placement CONST_start) (= placement CONST_end))
  [1] app __x0__ = (ToString O)
  [1] if (is-completion __x0__) if (= __x0__.Type CONST_normal) __x0__ = __x0__.Value else return __x0__ else [4] {}
  [1] let S = __x0__
  [2] ??? "Let id:{intMaxLength} be ‚Ñù ( ? ToLength ( id:{maxLength} ) ) ."
  [3] let stringLength = S.length
  [4] if (! (< stringLength intMaxLength)) {
    app __x1__ = (WrapCompletion S)
    return __x1__
  } else [4] {}
  [6] if (= fillString undefined) let filler = " " else {
    app __x2__ = (ToString fillString)
    if (is-completion __x2__) if (= __x2__.Type CONST_normal) __x2__ = __x2__.Value else return __x2__ else [4] {}
    let filler = __x2__
  }
  [7] if (= filler "") {
    app __x3__ = (WrapCompletion S)
    return __x3__
  } else [4] {}
  [8] let fillLen = (- intMaxLength stringLength)
  [9] ??? "Let id:{truncatedStringFiller} be the String value consisting of repeated concatenations of id:{filler} truncated to length id:{fillLen} ."
  [11] if (= placement CONST_start) {
    app __x4__ = (WrapCompletion (+ truncatedStringFiller S))
    return __x4__
  } else {
    app __x5__ = (WrapCompletion (+ S truncatedStringFiller))
    return __x5__
  }
}