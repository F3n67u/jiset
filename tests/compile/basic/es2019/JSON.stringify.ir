{
  let stack = (new [])
  let indent = ""
  let PropertyList = undefined
  let ReplacerFunction = undefined
  if (= (typeof replacer) Object) {
    app __x0__ = (IsCallable replacer)
    if (= __x0__ true) ReplacerFunction = replacer else {
      app __x1__ = (IsArray replacer)
      let isArray = [? __x1__]
      if (= isArray true) {
        PropertyList = (new [])
        app __x2__ = (Get replacer "length")
        app __x3__ = (ToLength [? __x2__])
        let len = [? __x3__]
        let k = 0i
        while (< k len) {
          app __x4__ = (ToString k)
          app __x5__ = (Get replacer [! __x4__])
          let v = [? __x5__]
          let item = undefined
          if (= (typeof v) String) item = v else if (= (typeof v) Number) {
            app __x6__ = (ToString v)
            item = [! __x6__]
          } else if (= (typeof v) Object) ??? "If id:{v} has a [ [ StringData ] ] or [ [ NumberData ] ] internal slot , set id:{item} to ? ToString ( id:{v} ) ." else {}
          ??? "If id:{item} is not value:{undefined} and id:{item} is not currently an element of id:{PropertyList} , then in:{} out:{}"
          k = (+ k 1i)
        }
      } else {}
    }
  } else {}
  if (= (typeof space) Object) if (! (= space.NumberData absent)) {
    app __x7__ = (ToNumber space)
    space = [? __x7__]
  } else if (! (= space.StringData absent)) {
    app __x8__ = (ToString space)
    space = [? __x8__]
  } else {} else {}
  if (= (typeof space) Number) {
    app __x9__ = (ToInteger space)
    app __x10__ = (min 10i [! __x9__])
    space = __x10__
    ??? "Let id:{gap} be the String value containing id:{space} occurrences of the code unit 0x0020 ( SPACE ) . This will be the empty String if id:{space} is less than 1 ."
  } else if (= (typeof space) String) ??? "If the length of id:{space} is 10 or less , let id:{gap} be id:{space} ; otherwise let id:{gap} be the String value consisting of the first 10 code units of id:{space} ." else let gap = ""
  app __x11__ = (ObjectCreate INTRINSIC_ObjectPrototype)
  let wrapper = __x11__
  app __x12__ = (CreateDataProperty wrapper "" value)
  let status = __x12__
  assert (= status true)
  app __x13__ = (SerializeJSONProperty "" wrapper)
  return [? __x13__]
}