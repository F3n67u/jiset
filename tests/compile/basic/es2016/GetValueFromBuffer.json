["Assert", ":", "IsDetachedBuffer", "(", {
  "id": "arrayBuffer"
}, ")", "is", {
  "value": "false"
}, ".", {
  "k": 0
}, "Assert", ":", "There", "are", "sufficient", "bytes", "in", {
  "id": "arrayBuffer"
}, "starting", "at", {
  "id": "byteIndex"
}, "to", "represent", "a", "value", "of", {
  "id": "type"
}, ".", {
  "k": 1
}, "Assert", ":", {
  "id": "byteIndex"
}, "is", "an", "integer", "value", "≥", "0", ".", {
  "k": 2
}, "Let", {
  "id": "block"
}, "be", {
  "id": "arrayBuffer"
}, "'", "s", "[", "[", "ArrayBufferData", "]", "]", "internal", "slot", ".", {
  "k": 3
}, "Let", {
  "id": "elementSize"
}, "be", "the", "Number", "value", "of", "the", "Element", "Size", "value", "specified", "in", {
  "link": "unhandled: table-49"
}, "for", "Element", "Type", {
  "id": "type"
}, ".", {
  "k": 4
}, "Let", {
  "id": "rawValue"
}, "be", "a", "List", "of", {
  "id": "elementSize"
}, "containing", ",", "in", "order", ",", "the", {
  "id": "elementSize"
}, "sequence", "of", "bytes", "starting", "with", {
  "id": "block"
}, "[", {
  "id": "byteIndex"
}, "]", ".", {
  "k": 5
}, "If", {
  "id": "isLittleEndian"
}, "is", "not", "present", ",", "set", {
  "id": "isLittleEndian"
}, "to", "either", {
  "value": "true"
}, "or", {
  "value": "false"
}, ".", "The", "choice", "is", "implementation", "dependent", "and", "should", "be", "the", "alternative", "that", "is", "most", "efficient", "for", "the", "implementation", ".", "An", "implementation", "must", "use", "the", "same", "value", "each", "time", "this", "step", "is", "executed", "and", "the", "same", "value", "must", "be", "used", "for", "the", "corresponding", "step", "in", "the", "SetValueInBuffer", "abstract", "operation", ".", {
  "k": 6
}, "If", {
  "id": "isLittleEndian"
}, "is", {
  "value": "false"
}, ",", "reverse", "the", "order", "of", "the", "elements", "of", {
  "id": "rawValue"
}, ".", {
  "k": 7
}, "If", {
  "id": "type"
}, "is", {
  "code": "\"Float32\""
}, ",", "then", {
  "in": null
}, "Let", {
  "id": "value"
}, "be", "the", "byte", "elements", "of", {
  "id": "rawValue"
}, "concatenated", "and", "interpreted", "as", "a", "little", "-", "endian", "bit", "string", "encoding", "of", "an", "IEEE", "754", "-", "2008", "binary32", "value", ".", {
  "k": 9
}, "If", {
  "id": "value"
}, "is", "an", "IEEE", "754", "-", "2008", "binary32", "NaN", "value", ",", "return", "the", {
  "value": "NaN"
}, "Number", "value", ".", {
  "k": 10
}, "Return", "the", "Number", "value", "that", "corresponds", "to", {
  "id": "value"
}, ".", {
  "k": 11
}, {
  "out": null
}, {
  "k": 8
}, "If", {
  "id": "type"
}, "is", {
  "code": "\"Float64\""
}, ",", "then", {
  "in": null
}, "Let", {
  "id": "value"
}, "be", "the", "byte", "elements", "of", {
  "id": "rawValue"
}, "concatenated", "and", "interpreted", "as", "a", "little", "-", "endian", "bit", "string", "encoding", "of", "an", "IEEE", "754", "-", "2008", "binary64", "value", ".", {
  "k": 13
}, "If", {
  "id": "value"
}, "is", "an", "IEEE", "754", "-", "2008", "binary64", "NaN", "value", ",", "return", "the", {
  "value": "NaN"
}, "Number", "value", ".", {
  "k": 14
}, "Return", "the", "Number", "value", "that", "corresponds", "to", {
  "id": "value"
}, ".", {
  "k": 15
}, {
  "out": null
}, {
  "k": 12
}, "If", "the", "first", "code", "unit", "of", {
  "id": "type"
}, "is", {
  "code": "\"U\""
}, ",", "then", {
  "in": null
}, "Let", {
  "id": "intValue"
}, "be", "the", "byte", "elements", "of", {
  "id": "rawValue"
}, "concatenated", "and", "interpreted", "as", "a", "bit", "string", "encoding", "of", "an", "unsigned", "little", "-", "endian", "binary", "number", ".", {
  "k": 17
}, {
  "out": null
}, {
  "k": 16
}, "Else", ",", {
  "in": null
}, "Let", {
  "id": "intValue"
}, "be", "the", "byte", "elements", "of", {
  "id": "rawValue"
}, "concatenated", "and", "interpreted", "as", "a", "bit", "string", "encoding", "of", "a", "binary", "little", "-", "endian", "2", "'", "s", "complement", "number", "of", "bit", "length", {
  "id": "elementSize"
}, "×", "8", ".", {
  "k": 19
}, {
  "out": null
}, {
  "k": 18
}, "Return", "the", "Number", "value", "that", "corresponds", "to", {
  "id": "intValue"
}, ".", {
  "k": 20
}]