{
  access __x0__ = (PropertyName "Evaluation")
  let propKey = __x0__
  if (is-completion propKey) if (= propKey.Type CONST_normal) propKey = propKey.Value else return propKey else {}
  propKey
  let scope = GLOBAL_context.LexicalEnvironment
  ??? "Let id:{formalParameterList} be an instance of the production grammar:{FormalParameters0, []} ."
  app __x1__ = (OrdinaryFunctionCreate INTRINSIC_Function_prototype formalParameterList FunctionBody CONST_nonDASHlexicalDASHthis scope)
  let closure = __x1__
  app __x2__ = (MakeMethod closure object)
  __x2__
  app __x3__ = (SetFunctionName closure propKey "get")
  __x3__
  closure.SourceText = (get-syntax MethodDefinition)
  let desc = (new PropertyDescriptor("Get" -> closure, "Enumerable" -> enumerable, "Configurable" -> true))
  app __x4__ = (DefinePropertyOrThrow object propKey desc)
  if (is-completion __x4__) if (= __x4__.Type CONST_normal) __x4__ = __x4__.Value else return __x4__ else {}
  app __x5__ = (WrapCompletion __x4__)
  return __x5__
}