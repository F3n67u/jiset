{
  [0] let handler = O.ProxyHandler
  [1] if (= handler null) {
    app __x0__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_TypeError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
    return __x0__
  } else [0] {}
  [2] app __x1__ = (Type handler)
  [2] assert (= __x1__ Object)
  [3] let target = O.ProxyTarget
  [4] app __x2__ = (GetMethod handler "preventExtensions")
  [4] if (is-completion __x2__) if (= __x2__.Type CONST_normal) __x2__ = __x2__.Value else return __x2__ else [0] {}
  [4] let trap = __x2__
  [5] if (= trap undefined) {
    [6] app __x3__ = (target.PreventExtensions target)
    [6] if (is-completion __x3__) if (= __x3__.Type CONST_normal) __x3__ = __x3__.Value else return __x3__ else [0] {}
    [6] app __x4__ = (WrapCompletion __x3__)
    [6] return __x4__
  } else [0] {}
  [7] app __x5__ = (Call trap handler (new [target]))
  [7] if (is-completion __x5__) if (= __x5__.Type CONST_normal) __x5__ = __x5__.Value else return __x5__ else [0] {}
  [7] app __x6__ = (ToBoolean __x5__)
  [7] let booleanTrapResult = __x6__
  [8] if (= booleanTrapResult true) {
    [9] app __x7__ = (target.IsExtensible target)
    [9] if (is-completion __x7__) if (= __x7__.Type CONST_normal) __x7__ = __x7__.Value else return __x7__ else [0] {}
    [9] let targetIsExtensible = __x7__
    [10] if (= targetIsExtensible true) {
      app __x8__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_TypeError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
      return __x8__
    } else [0] {}
  } else [0] {}
  [11] app __x9__ = (WrapCompletion booleanTrapResult)
  [11] return __x9__
}