{
  app __x0__ = (RequireInternalSlot view "DataView")
  if (is-completion __x0__) if (= __x0__.Type CONST_normal) __x0__ = __x0__.Value else return __x0__ else {}
  __x0__
  assert (! (= view.ViewedArrayBuffer absent))
  app __x1__ = (ToIndex requestIndex)
  if (is-completion __x1__) if (= __x1__.Type CONST_normal) __x1__ = __x1__.Value else return __x1__ else {}
  let getIndex = __x1__
  app __x2__ = (ToBoolean isLittleEndian)
  if (is-completion __x2__) if (= __x2__.Type CONST_normal) __x2__ = __x2__.Value else return __x2__ else {}
  isLittleEndian = __x2__
  let buffer = view.ViewedArrayBuffer
  app __x3__ = (IsDetachedBuffer buffer)
  if (= __x3__ true) {
    app __x4__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_TypeError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
    return __x4__
  } else {}
  let viewOffset = view.ByteOffset
  let viewSize = view.ByteLength
  ??? "Let id:{elementSize} be the Element Size value specified in link:{} for Element Type id:{type} ."
  if (< viewSize (+ getIndex elementSize)) {
    app __x5__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_RangeError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
    return __x5__
  } else {}
  let bufferIndex = (+ getIndex viewOffset)
  app __x6__ = (GetValueFromBuffer buffer bufferIndex type false CONST_Unordered isLittleEndian)
  app __x7__ = (WrapCompletion __x6__)
  return __x7__
}