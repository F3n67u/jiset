digraph {
  node16962 [shape=diamond, label=<<font color="black">(|| (= iterable undefined) (= iterable null))</font>> color="black" fillcolor="white" style=filled]
  node16972 [shape=cds, label=<<font color="black">8:app __x4__ = (IteratorStep iteratorRecord)</font>> color="black" fillcolor="white" style=filled]
  node16979 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">11:let status = __x6__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16978 [shape=cds, label=<<font color="black">11:app __x6__ = (Call adder set (new [nextValue]))</font>> color="black" fillcolor="white" style=filled]
  node16973 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">8:let next = [? __x4__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16981 [shape=diamond, label=<<font color="black">__x7__</font>> color="black" fillcolor="white" style=filled]
  node16968 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16964 [shape=cds, label=<<font color="black">4:app __x1__ = (Get set &quot;add&quot;)</font>> color="black" fillcolor="white" style=filled]
  node16977 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">10:let nextValue = [? __x5__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16967 [shape=diamond, label=<<font color="black">(= __x2__ false)</font>> color="black" fillcolor="white" style=filled]
  node16980 [shape=cds, label=<<font color="black">12:app __x7__ = (IsAbruptCompletion status)</font>> color="black" fillcolor="white" style=filled]
  node16966 [shape=cds, label=<<font color="black">5:app __x2__ = (IsCallable adder)</font>> color="black" fillcolor="white" style=filled]
  node16963 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return set</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16975 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return set</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16971 [shape=diamond, label=<<font color="black">true</font>> color="black" fillcolor="white" style=filled]
  node16960 [shape=cds, label=<<font color="black">1:app __x0__ = (OrdinaryCreateFromConstructor NewTarget &quot;%Set.prototype%&quot; (new [&quot;SetData&quot;]))</font>> color="black" fillcolor="white" style=filled]
  node16982 [shape=cds, label=<<font color="black">app __x8__ = (IteratorClose iteratorRecord status)</font>> color="black" fillcolor="white" style=filled]
  node16965 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">4:let adder = [? __x1__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16957 [shape=cds, label=<<font color="black">app iterable = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node16976 [shape=cds, label=<<font color="black">10:app __x5__ = (IteratorValue next)</font>> color="black" fillcolor="white" style=filled]
  node16958 [shape=diamond, label=<<font color="black">(= NewTarget undefined)</font>> color="black" fillcolor="white" style=filled]
  node16969 [shape=cds, label=<<font color="black">6:app __x3__ = (GetIterator iterable)</font>> color="black" fillcolor="white" style=filled]
  node16959 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16970 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">6:let iteratorRecord = [? __x3__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16955 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node16974 [shape=diamond, label=<<font color="black">(= next false)</font>> color="black" fillcolor="white" style=filled]
  node16983 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return [? __x8__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16961 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">1:let set = [? __x0__]</td></tr>
      <tr><td align="left">2:set.SetData = (new [])</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16956 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node16976 -> node16977 [ color="black"]
  node16974 -> node16975 [label=<<font color="black">true</font>> color="black"]
  node16974 -> node16976 [label=<<font color="black">false</font>> color="black"]
  node16978 -> node16979 [ color="black"]
  node16970 -> node16971 [ color="black"]
  node16969 -> node16970 [ color="black"]
  node16955 -> node16957 [ color="black"]
  node16971 -> node16972 [label=<<font color="black">true</font>> color="black"]
  node16971 -> node16956 [label=<<font color="black">false</font>> color="black"]
  node16975 -> node16976 [ color="black"]
  node16963 -> node16964 [ color="black"]
  node16968 -> node16969 [ color="black"]
  node16981 -> node16982 [label=<<font color="black">true</font>> color="black"]
  node16981 -> node16971 [label=<<font color="black">false</font>> color="black"]
  node16983 -> node16971 [ color="black"]
  node16958 -> node16959 [label=<<font color="black">true</font>> color="black"]
  node16958 -> node16960 [label=<<font color="black">false</font>> color="black"]
  node16964 -> node16965 [ color="black"]
  node16957 -> node16958 [ color="black"]
  node16982 -> node16983 [ color="black"]
  node16960 -> node16961 [ color="black"]
  node16972 -> node16973 [ color="black"]
  node16965 -> node16966 [ color="black"]
  node16973 -> node16974 [ color="black"]
  node16966 -> node16967 [ color="black"]
  node16967 -> node16968 [label=<<font color="black">true</font>> color="black"]
  node16967 -> node16969 [label=<<font color="black">false</font>> color="black"]
  node16980 -> node16981 [ color="black"]
  node16959 -> node16960 [ color="black"]
  node16979 -> node16980 [ color="black"]
  node16961 -> node16962 [ color="black"]
  node16962 -> node16963 [label=<<font color="black">true</font>> color="black"]
  node16962 -> node16964 [label=<<font color="black">false</font>> color="black"]
  node16977 -> node16978 [ color="black"]
}
