digraph {
  node13494 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node13498 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return false</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node13495 [shape=cds, label=<<font color="black">0:app __x0__ = (Type R)</font>> color="black" fillcolor="white" style=filled]
  node13497 [shape=diamond, label=<<font color="black">(&lt; s (+ q r))</font>> color="black" fillcolor="white" style=filled]
  node13499 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">4:??? &quot;If there exists an integer id:{i} between 0 ( inclusive ) and id:{r} ( exclusive ) such that the code unit at index id:{q} + id:{i} within id:{S} is different from the code unit at index id:{i} within id:{R} , return value:{false} .&quot;</td></tr>
      <tr><td align="left">5:return (+ q r)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node13496 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:assert (= __x0__ String)</td></tr>
      <tr><td align="left">1:let r = R.length</td></tr>
      <tr><td align="left">2:let s = S.length</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node13493 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node13496 -> node13497 [ color="black"]
  node13497 -> node13498 [label=<<font color="black">true</font>> color="black"]
  node13497 -> node13499 [label=<<font color="black">false</font>> color="black"]
  node13498 -> node13499 [ color="black"]
  node13499 -> node13494 [ color="black"]
  node13495 -> node13496 [ color="black"]
  node13493 -> node13495 [ color="black"]
}
