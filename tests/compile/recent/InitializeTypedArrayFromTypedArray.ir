{
  [2] let srcData = srcArray.ViewedArrayBuffer
  [3] app __x0__ = (IsDetachedBuffer srcData)
  [3] if (= __x0__ true) {
    app __x1__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_TypeError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
    return __x1__
  } else [1] {}
  [4] let constructorName = O.TypedArrayName
  [5] ??? "Let id:{elementType} be the Element Type value in link:{} for id:{constructorName} ."
  [6] let elementLength = srcArray.ArrayLength
  [7] let srcName = srcArray.TypedArrayName
  [8] ??? "Let id:{srcType} be the Element Type value in link:{} for id:{srcName} ."
  [9] ??? "Let id:{srcElementSize} be the Element Size value specified in link:{} for id:{srcName} ."
  [10] let srcByteOffset = srcArray.ByteOffset
  [11] ??? "Let id:{elementSize} be the Element Size value specified in link:{} for id:{constructorName} ."
  [12] let byteLength = (* elementSize elementLength)
  [15] app __x2__ = (IsSharedArrayBuffer srcData)
  [15] if (= __x2__ false) {
    [14] app __x3__ = (SpeciesConstructor srcData INTRINSIC_ArrayBuffer)
    [14] if (is-completion __x3__) if (= __x3__.Type CONST_normal) __x3__ = __x3__.Value else return __x3__ else [1] {}
    [14] let bufferConstructor = __x3__
  } else let bufferConstructor = INTRINSIC_ArrayBuffer
  [19] if (= elementType srcType) {
    [18] app __x4__ = (CloneArrayBuffer srcData srcByteOffset byteLength bufferConstructor)
    [18] if (is-completion __x4__) if (= __x4__.Type CONST_normal) __x4__ = __x4__.Value else return __x4__ else [1] {}
    [18] let data = __x4__
  } else {
    [20] app __x5__ = (AllocateArrayBuffer bufferConstructor byteLength)
    [20] if (is-completion __x5__) if (= __x5__.Type CONST_normal) __x5__ = __x5__.Value else return __x5__ else [1] {}
    [20] let data = __x5__
    [21] app __x6__ = (IsDetachedBuffer srcData)
    [21] if (= __x6__ true) {
      app __x7__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_TypeError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
      return __x7__
    } else [1] {}
    [22] if (! (== srcArray.ContentType O.ContentType)) {
      app __x8__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_TypeError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
      return __x8__
    } else [1] {}
    [23] let srcByteIndex = srcByteOffset
    [24] let targetByteIndex = 0i
    [25] let count = elementLength
    [26] while (< 0i count) {
      [27] app __x9__ = (GetValueFromBuffer srcData srcByteIndex srcType true CONST_Unordered)
      [27] let value = __x9__
      [28] app __x10__ = (SetValueInBuffer data targetByteIndex elementType value true CONST_Unordered)
      [28] __x10__
      [29] srcByteIndex = (+ srcByteIndex srcElementSize)
      [30] targetByteIndex = (+ targetByteIndex elementSize)
      [31] count = (- count 1i)
    }
  }
  [32] O.ViewedArrayBuffer = data
  [33] O.ByteLength = byteLength
  [34] O.ByteOffset = 0i
  [35] O.ArrayLength = elementLength
}