digraph {
  node8062 [shape=cds, label=<<font color="black">6:app __x1__ = (MakeMethod closure object)</font>> color="black" fillcolor="white" style=filled]
  node8057 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">3:let scope = GLOBAL_context.LexicalEnvironment</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node8054 [shape=diamond, label=<<font color="black">true</font>> color="black" fillcolor="white" style=filled]
  node8050 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node8058 [shape=diamond, label=<<font color="black">(! (= functionPrototype absent))</font>> color="black" fillcolor="white" style=filled]
  node8063 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">6:__x1__</td></tr>
      <tr><td align="left">7:return (new Record(&quot;Key&quot; -&gt; propKey, &quot;Closure&quot; -&gt; closure))</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node8053 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let propKey = __x0__</td></tr>
      <tr><td align="left">1:[? propKey]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node8059 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let kind = CONST_Normal</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node8052 [shape=cds, label=<<font color="black">0:access __x0__ = (PropertyName &quot;Evaluation&quot;)</font>> color="black" fillcolor="white" style=filled]
  node8056 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let strict = false</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node8060 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let kind = CONST_Method</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node8061 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">5:??? &quot;Let id:{closure} be FunctionCreate ( id:{kind} , nt:{StrictFormalParameters} , nt:{FunctionBody} , id:{scope} , id:{strict} ) . If id:{functionPrototype} was passed as a parameter , then pass its value as the id:{prototype} optional argument of FunctionCreate .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node8051 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node8055 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let strict = true</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node8050 -> node8052 [ color="black"]
  node8058 -> node8059 [label=<<font color="black">true</font>> color="black"]
  node8058 -> node8060 [label=<<font color="black">false</font>> color="black"]
  node8062 -> node8063 [ color="black"]
  node8061 -> node8062 [ color="black"]
  node8055 -> node8057 [ color="black"]
  node8060 -> node8061 [ color="black"]
  node8052 -> node8053 [ color="black"]
  node8056 -> node8057 [ color="black"]
  node8059 -> node8061 [ color="black"]
  node8057 -> node8058 [ color="black"]
  node8063 -> node8051 [ color="black"]
  node8054 -> node8055 [label=<<font color="black">true</font>> color="black"]
  node8054 -> node8056 [label=<<font color="black">false</font>> color="black"]
  node8053 -> node8054 [ color="black"]
}
