{
  [0] let V = undefined
  [1] ??? "Let id:{A} be the List of nt:{CaseClause} items in nt:{CaseClauses} , in source text order ."
  [2] let found = false
  [3] let __x0__ = A
  [3] let __x1__ = 0i
  [3] while (< __x1__ __x0__.length) {
    let C = __x0__[__x1__]
    [4] if (= found false) {
      [5] access __x2__ = (C "CaseSelectorEvaluation")
      [5] let clauseSelector = __x2__
      [6] if (is-completion clauseSelector) if (= clauseSelector.Type CONST_normal) clauseSelector = clauseSelector.Value else return clauseSelector else [20] {}
      [6] clauseSelector
      [7] app __x3__ = (StrictEqualityComparison input clauseSelector)
      [7] found = __x3__
    } else [20] {}
    [8] if (= found true) {
      [9] access __x4__ = (C "Evaluation")
      [9] let R = __x4__
      [10] if (! (= R.Value CONST_empty)) V = R.Value else [20] {}
      [11] app __x5__ = (IsAbruptCompletion R)
      [11] if __x5__ {
        app __x6__ = (UpdateEmpty R V)
        app __x7__ = (Completion __x6__)
        app __x8__ = (WrapCompletion __x7__)
        return __x8__
      } else [20] {}
    } else [20] {}
    __x1__ = (+ __x1__ 1i)
  }
  [12] app __x9__ = (NormalCompletion V)
  [12] app __x10__ = (WrapCompletion __x9__)
  [12] return __x10__
}