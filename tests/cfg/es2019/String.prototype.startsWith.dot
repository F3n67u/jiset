digraph {
  node13616 [shape=cds, label=<<font color="black">app searchString = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node13623 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">2:let isRegExp = [? __x2__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node13619 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let O = [? __x0__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node13622 [shape=cds, label=<<font color="black">2:app __x2__ = (IsRegExp searchString)</font>> color="black" fillcolor="white" style=filled]
  node13635 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">11:??? &quot;If the sequence of code units of id:{S} starting at id:{start} of length id:{searchLength} is the same as the full code unit sequence of id:{searchStr} , return value:{true} .&quot;</td></tr>
      <tr><td align="left">12:??? &quot;Otherwise , return value:{false} .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node13629 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">5:let pos = [? __x4__]</td></tr>
      <tr><td align="left">7:let len = S.length</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node13618 [shape=cds, label=<<font color="black">0:app __x0__ = (RequireObjectCoercible this)</font>> color="black" fillcolor="white" style=filled]
  node13630 [shape=cds, label=<<font color="black">8:app __x5__ = (max pos 0i)</font>> color="black" fillcolor="white" style=filled]
  node13624 [shape=diamond, label=<<font color="black">(= isRegExp true)</font>> color="black" fillcolor="white" style=filled]
  node13614 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node13620 [shape=cds, label=<<font color="black">1:app __x1__ = (ToString O)</font>> color="black" fillcolor="white" style=filled]
  node13631 [shape=cds, label=<<font color="black">8:app __x6__ = (min __x5__ len)</font>> color="black" fillcolor="white" style=filled]
  node13628 [shape=cds, label=<<font color="black">5:app __x4__ = (ToInteger position)</font>> color="black" fillcolor="white" style=filled]
  node13626 [shape=cds, label=<<font color="black">4:app __x3__ = (ToString searchString)</font>> color="black" fillcolor="white" style=filled]
  node13633 [shape=diamond, label=<<font color="black">(&lt; len (+ searchLength start))</font>> color="black" fillcolor="white" style=filled]
  node13621 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">1:let S = [? __x1__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node13617 [shape=cds, label=<<font color="black">app position = (GetArgument argumentsList 1i)</font>> color="black" fillcolor="white" style=filled]
  node13634 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return false</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node13632 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">8:let start = __x6__</td></tr>
      <tr><td align="left">9:let searchLength = searchStr.length</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node13615 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node13627 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">4:let searchStr = [? __x3__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node13625 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node13627 -> node13628 [ color="black"]
  node13626 -> node13627 [ color="black"]
  node13635 -> node13615 [ color="black"]
  node13633 -> node13634 [label=<<font color="black">true</font>> color="black"]
  node13633 -> node13635 [label=<<font color="black">false</font>> color="black"]
  node13624 -> node13625 [label=<<font color="black">true</font>> color="black"]
  node13624 -> node13626 [label=<<font color="black">false</font>> color="black"]
  node13619 -> node13620 [ color="black"]
  node13618 -> node13619 [ color="black"]
  node13628 -> node13629 [ color="black"]
  node13617 -> node13618 [ color="black"]
  node13630 -> node13631 [ color="black"]
  node13621 -> node13622 [ color="black"]
  node13622 -> node13623 [ color="black"]
  node13620 -> node13621 [ color="black"]
  node13614 -> node13616 [ color="black"]
  node13625 -> node13626 [ color="black"]
  node13632 -> node13633 [ color="black"]
  node13616 -> node13617 [ color="black"]
  node13631 -> node13632 [ color="black"]
  node13634 -> node13635 [ color="black"]
  node13629 -> node13630 [ color="black"]
  node13623 -> node13624 [ color="black"]
}
