{
  [0] let calleeContext = GLOBAL_context
  [1] access __x0__ = (calleeContext "LexicalEnvironment")
  [1] let env = __x0__
  [2] let envRec = env.EnvironmentRecord
  [3] let code = func.ECMAScriptCode
  [4] let strict = func.Strict
  [5] let formals = func.FormalParameters
  [6] access __x1__ = (formals "BoundNames")
  [6] let parameterNames = __x1__
  [7] ??? "If id:{parameterNames} has any duplicate entries , let id:{hasDuplicates} be value:{true} . Otherwise , let id:{hasDuplicates} be value:{false} ."
  [8] access __x2__ = (formals "IsSimpleParameterList")
  [8] let simpleParameterList = __x2__
  [9] access __x3__ = (formals "ContainsExpression")
  [9] let hasParameterExpressions = __x3__
  [10] access __x4__ = (code "VarDeclaredNames")
  [10] let varNames = __x4__
  [11] access __x5__ = (code "VarScopedDeclarations")
  [11] let varDeclarations = __x5__
  [12] access __x6__ = (code "LexicallyDeclaredNames")
  [12] let lexicalNames = __x6__
  [13] let functionNames = (new [])
  [14] let functionsToInitialize = (new [])
  [15] let __x7__ = varDeclarations
  [15] let __x8__ = __x7__.length
  [15] while (< 0i __x8__) {
    __x8__ = (- __x8__ 1i)
    let d = __x7__[__x8__]
    [16] if (! (|| (is-instance-of d VariableDeclaration) (is-instance-of d ForBinding))) {
      [17] assert (|| (is-instance-of d FunctionDeclaration) (is-instance-of d GeneratorDeclaration))
      [18] access __x9__ = (d "BoundNames")
      [18] let fn = __x9__[0i]
      [19] if (! (contains functionNames fn)) {
        [20] prepend fn -> functionNames
        [22] prepend d -> functionsToInitialize
      } else [90] {}
    } else [90] {}
  }
  [23] let argumentsObjectNeeded = true
  [29] if (= func.ThisMode CONST_lexical) let argumentsObjectNeeded = false else if (contains parameterNames "arguments") let argumentsObjectNeeded = false else if (= hasParameterExpressions false) if (|| (contains functionNames "arguments") (contains lexicalNames "arguments")) let argumentsObjectNeeded = false else [90] {} else [90] {}
  [32] let __x10__ = parameterNames
  [32] let __x11__ = 0i
  [32] while (< __x11__ __x10__.length) {
    let paramName = __x10__[__x11__]
    [33] app __x12__ = (envRec.HasBinding envRec paramName)
    [33] let alreadyDeclared = __x12__
    [35] if (= alreadyDeclared false) {
      [36] app __x13__ = (envRec.CreateMutableBinding envRec paramName false)
      [36] if (is-completion __x13__) if (= __x13__.Type CONST_normal) __x13__ = __x13__.Value else return __x13__ else [90] {}
      [36] __x13__
      [37] if (= hasDuplicates true) {
        [38] app __x14__ = (envRec.InitializeBinding envRec paramName undefined)
        [38] if (is-completion __x14__) if (= __x14__.Type CONST_normal) __x14__ = __x14__.Value else return __x14__ else [90] {}
        [38] __x14__
      } else [90] {}
    } else [90] {}
    __x11__ = (+ __x11__ 1i)
  }
  [39] if (= argumentsObjectNeeded true) {
    [42] if (|| (= strict true) (= simpleParameterList false)) {
      [41] app __x15__ = (CreateUnmappedArgumentsObject argumentsList)
      [41] let ao = __x15__
    } else {
      [44] app __x16__ = (CreateMappedArgumentsObject func formals argumentsList envRec)
      [44] let ao = __x16__
    }
    [47] if (= strict true) {
      [46] app __x17__ = (envRec.CreateImmutableBinding envRec "arguments" false)
      [46] if (is-completion __x17__) if (= __x17__.Type CONST_normal) __x17__ = __x17__.Value else return __x17__ else [90] {}
      [46] __x17__
    } else {
      [48] app __x18__ = (envRec.CreateMutableBinding envRec "arguments" false)
      [48] if (is-completion __x18__) if (= __x18__.Type CONST_normal) __x18__ = __x18__.Value else return __x18__ else [90] {}
      [48] __x18__
    }
    [49] app __x19__ = (envRec.InitializeBinding envRec "arguments" ao)
    [49] __x19__
    [50] append "arguments" -> parameterNames
  } else [90] {}
  [51] app __x20__ = (CreateListIterator argumentsList)
  [51] let iteratorRecord = (new Record("Iterator" -> __x20__, "Done" -> false))
  [54] if (= hasDuplicates true) {
    [53] access __x21__ = (formals "IteratorBindingInitialization")
    [53] app __x22__ = (__x21__ iteratorRecord undefined)
    [53] if (is-completion __x22__) if (= __x22__.Type CONST_normal) __x22__ = __x22__.Value else return __x22__ else [90] {}
    [53] __x22__
  } else {
    [55] access __x23__ = (formals "IteratorBindingInitialization")
    [55] app __x24__ = (__x23__ iteratorRecord env)
    [55] if (is-completion __x24__) if (= __x24__.Type CONST_normal) __x24__ = __x24__.Value else return __x24__ else [90] {}
    [55] __x24__
  }
  [66] if (= hasParameterExpressions false) {
    [58] let instantiatedVarNames = (copy-obj parameterNames)
    [59] let __x25__ = varNames
    [59] let __x26__ = 0i
    [59] while (< __x26__ __x25__.length) {
      let n = __x25__[__x26__]
      [60] if (! (contains instantiatedVarNames n)) {
        [61] append n -> instantiatedVarNames
        [62] app __x27__ = (envRec.CreateMutableBinding envRec n false)
        [62] if (is-completion __x27__) if (= __x27__.Type CONST_normal) __x27__ = __x27__.Value else return __x27__ else [90] {}
        [62] __x27__
        [63] app __x28__ = (envRec.InitializeBinding envRec n undefined)
        [63] __x28__
      } else [90] {}
      __x26__ = (+ __x26__ 1i)
    }
    [64] let varEnv = env
    [65] let varEnvRec = envRec
  } else {
    [68] app __x29__ = (NewDeclarativeEnvironment env)
    [68] let varEnv = __x29__
    [69] let varEnvRec = varEnv.EnvironmentRecord
    [70] calleeContext.VariableEnvironment = varEnv
    [71] let instantiatedVarNames = (new [])
    [72] let __x30__ = varNames
    [72] let __x31__ = 0i
    [72] while (< __x31__ __x30__.length) {
      let n = __x30__[__x31__]
      [73] if (! (contains instantiatedVarNames n)) {
        [74] append n -> instantiatedVarNames
        [75] app __x32__ = (varEnvRec.CreateMutableBinding varEnvRec n false)
        [75] if (is-completion __x32__) if (= __x32__.Type CONST_normal) __x32__ = __x32__.Value else return __x32__ else [90] {}
        [75] __x32__
        [77] if (|| (! (contains parameterNames n)) (contains functionNames n)) let initialValue = undefined else {
          [78] app __x33__ = (envRec.GetBindingValue envRec n false)
          [78] if (is-completion __x33__) if (= __x33__.Type CONST_normal) __x33__ = __x33__.Value else return __x33__ else [90] {}
          [78] let initialValue = __x33__
        }
        [79] app __x34__ = (varEnvRec.InitializeBinding varEnvRec n initialValue)
        [79] __x34__
      } else [90] {}
      __x31__ = (+ __x31__ 1i)
    }
  }
  [85] if (= strict false) {
    [83] app __x35__ = (NewDeclarativeEnvironment varEnv)
    [83] let lexEnv = __x35__
  } else let lexEnv = varEnv
  [86] let lexEnvRec = lexEnv.EnvironmentRecord
  [87] calleeContext.LexicalEnvironment = lexEnv
  [88] access __x36__ = (code "LexicallyScopedDeclarations")
  [88] let lexDeclarations = __x36__
  [89] let __x37__ = lexDeclarations
  [89] let __x38__ = 0i
  [89] while (< __x38__ __x37__.length) {
    let d = __x37__[__x38__]
    [91] access __x39__ = (d "BoundNames")
    [91] let __x40__ = __x39__
    [91] let __x41__ = 0i
    [91] while (< __x41__ __x40__.length) {
      let dn = __x40__[__x41__]
      [94] access __x42__ = (d "IsConstantDeclaration")
      [94] if (= __x42__ true) {
        [93] app __x43__ = (lexEnvRec.CreateImmutableBinding lexEnvRec dn true)
        [93] if (is-completion __x43__) if (= __x43__.Type CONST_normal) __x43__ = __x43__.Value else return __x43__ else [90] {}
        [93] __x43__
      } else {
        [95] app __x44__ = (lexEnvRec.CreateMutableBinding lexEnvRec dn false)
        [95] if (is-completion __x44__) if (= __x44__.Type CONST_normal) __x44__ = __x44__.Value else return __x44__ else [90] {}
        [95] __x44__
      }
      __x41__ = (+ __x41__ 1i)
    }
    __x38__ = (+ __x38__ 1i)
  }
  [96] let __x45__ = functionsToInitialize
  [96] let __x46__ = 0i
  [96] while (< __x46__ __x45__.length) {
    let f = __x45__[__x46__]
    [97] access __x47__ = (f "BoundNames")
    [97] let fn = __x47__[0i]
    [98] access __x48__ = (f "InstantiateFunctionObject")
    [98] app __x49__ = (__x48__ lexEnv)
    [98] let fo = __x49__
    [99] app __x50__ = (varEnvRec.SetMutableBinding varEnvRec fn fo false)
    [99] if (is-completion __x50__) if (= __x50__.Type CONST_normal) __x50__ = __x50__.Value else return __x50__ else [90] {}
    [99] __x50__
    __x46__ = (+ __x46__ 1i)
  }
  [100] app __x51__ = (NormalCompletion CONST_empty)
  [100] app __x52__ = (WrapCompletion __x51__)
  [100] return __x52__
}