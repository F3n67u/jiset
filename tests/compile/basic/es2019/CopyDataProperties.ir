{
  app __x0__ = (Type target)
  assert (= __x0__ Object)
  if (|| (= source undefined) (= source null)) return target else {}
  app __x1__ = (ToObject source)
  let from = [! __x1__]
  app __x2__ = (from.OwnPropertyKeys from)
  let keys = [? __x2__]
  let __x3__ = keys
  let __x4__ = 0i
  while (< __x4__ __x3__.length) {
    let nextKey = __x3__[__x4__]
    let excluded = false
    let __x5__ = excludedItems
    let __x6__ = 0i
    while (< __x6__ __x5__.length) {
      let e = __x5__[__x6__]
      app __x7__ = (SameValue e nextKey)
      if (= __x7__ true) excluded = true else {}
      __x6__ = (+ __x6__ 1i)
    }
    if (= excluded false) {
      app __x8__ = (from.GetOwnProperty from nextKey)
      let desc = [? __x8__]
      if (&& (! (= desc undefined)) (= desc.Enumerable true)) {
        app __x9__ = (Get from nextKey)
        let propValue = [? __x9__]
        app __x10__ = (CreateDataProperty target nextKey propValue)
        [! __x10__]
      } else {}
    } else {}
    __x4__ = (+ __x4__ 1i)
  }
  return target
}