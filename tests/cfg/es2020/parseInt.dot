digraph {
  node12189 [shape=cds, label=<<font color="black">app string = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node12193 [shape=cds, label=<<font color="black">1:app __x1__ = (TrimString inputString CONST_start)</font>> color="black" fillcolor="white" style=filled]
  node12197 [shape=diamond, label=<<font color="black">(! (== R 0i))</font>> color="black" fillcolor="white" style=filled]
  node12204 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">??? &quot;If the length of id:{S} is at least 2 and the first two code units of id:{S} are either value:{\&quot;0x\&quot;} or value:{\&quot;0X\&quot;} , then in:{} out:{}&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12190 [shape=cds, label=<<font color="black">app radix = (GetArgument argumentsList 1i)</font>> color="black" fillcolor="white" style=filled]
  node12196 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">5:let R = [? __x2__]</td></tr>
      <tr><td align="left">6:let stripPrefix = true</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12191 [shape=cds, label=<<font color="black">0:app __x0__ = (ToString string)</font>> color="black" fillcolor="white" style=filled]
  node12199 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return NaN</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12195 [shape=cds, label=<<font color="black">5:app __x2__ = (ToInt32 radix)</font>> color="black" fillcolor="white" style=filled]
  node12192 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let inputString = [? __x0__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12207 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return NaN</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12194 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">1:let S = [! __x1__]</td></tr>
      <tr><td align="left">2:let sign = 1i</td></tr>
      <tr><td align="left">3:??? &quot;If id:{S} is not empty and the first code unit of id:{S} is the code unit 0x002D ( HYPHEN - MINUS ) , set id:{sign} to - 1 .&quot;</td></tr>
      <tr><td align="left">4:??? &quot;If id:{S} is not empty and the first code unit of id:{S} is the code unit 0x002B ( PLUS SIGN ) or the code unit 0x002D ( HYPHEN - MINUS ) , remove the first code unit from id:{S} .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12208 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">18:??? &quot;Let id:{mathInt} be the mathematical integer value that is represented by id:{Z} in radix - id:{R} notation , using the letters &lt; b &gt; A &lt; / b &gt; - &lt; b &gt; Z &lt; / b &gt; and &lt; b &gt; a &lt; / b &gt; - &lt; b &gt; z &lt; / b &gt; for digits with values 10 through 35 . ( However , if id:{R} is 10 and id:{Z} contains more than 20 significant digits , every significant digit after the 20th may be replaced by a 0 digit , at the option of the implementation ; and if id:{R} is not 2 , 4 , 8 , 10 , 16 , or 32 , then id:{mathInt} may be an implementation - dependent approximation to the mathematical integer value that is represented by id:{Z} in radix - id:{R} notation . )&quot;</td></tr>
      <tr><td align="left">19:??? &quot;If id:{mathInt} = 0 sub:{‚Ñù} , then in:{} out:{}&quot;</td></tr>
      <tr><td align="left">22:let number = mathInt</td></tr>
      <tr><td align="left">23:return (* sign number)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12198 [shape=diamond, label=<<font color="black">(|| (&lt; R 2i) (&lt; 36i R))</font>> color="black" fillcolor="white" style=filled]
  node12188 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node12203 [shape=diamond, label=<<font color="black">(= stripPrefix true)</font>> color="black" fillcolor="white" style=filled]
  node12200 [shape=diamond, label=<<font color="black">(! (== R 16i))</font>> color="black" fillcolor="white" style=filled]
  node12205 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">16:??? &quot;If id:{S} contains a code unit that is not a radix - id:{R} digit , let id:{Z} be the substring of id:{S} consisting of all code units before the first such code unit ; otherwise , let id:{Z} be id:{S} .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12201 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">stripPrefix = false</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12206 [shape=diamond, label=<<font color="black">(= Z.length 0i)</font>> color="black" fillcolor="white" style=filled]
  node12187 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node12202 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">R = 10i</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12198 -> node12199 [label=<<font color="black">true</font>> color="black"]
  node12198 -> node12200 [label=<<font color="black">false</font>> color="black"]
  node12191 -> node12192 [ color="black"]
  node12204 -> node12205 [ color="black"]
  node12194 -> node12195 [ color="black"]
  node12195 -> node12196 [ color="black"]
  node12197 -> node12198 [label=<<font color="black">true</font>> color="black"]
  node12197 -> node12202 [label=<<font color="black">false</font>> color="black"]
  node12208 -> node12188 [ color="black"]
  node12187 -> node12189 [ color="black"]
  node12207 -> node12208 [ color="black"]
  node12201 -> node12203 [ color="black"]
  node12192 -> node12193 [ color="black"]
  node12206 -> node12207 [label=<<font color="black">true</font>> color="black"]
  node12206 -> node12208 [label=<<font color="black">false</font>> color="black"]
  node12193 -> node12194 [ color="black"]
  node12196 -> node12197 [ color="black"]
  node12189 -> node12190 [ color="black"]
  node12190 -> node12191 [ color="black"]
  node12203 -> node12204 [label=<<font color="black">true</font>> color="black"]
  node12203 -> node12205 [label=<<font color="black">false</font>> color="black"]
  node12202 -> node12203 [ color="black"]
  node12200 -> node12201 [label=<<font color="black">true</font>> color="black"]
  node12200 -> node12203 [label=<<font color="black">false</font>> color="black"]
  node12199 -> node12200 [ color="black"]
  node12205 -> node12206 [ color="black"]
}
