{
  app start = (GetArgument argumentsList 0i)
  app end = (GetArgument argumentsList 1i)
  [0] app __x0__ = (RequireObjectCoercible this)
  [0] if (is-completion __x0__) if (= __x0__.Type CONST_normal) __x0__ = __x0__.Value else return __x0__ else [5] {}
  [0] let O = __x0__
  [1] app __x1__ = (ToString O)
  [1] if (is-completion __x1__) if (= __x1__.Type CONST_normal) __x1__ = __x1__.Value else return __x1__ else [5] {}
  [1] let S = __x1__
  [2] let len = S.length
  [3] app __x2__ = (ToIntegerOrInfinity start)
  [3] if (is-completion __x2__) if (= __x2__.Type CONST_normal) __x2__ = __x2__.Value else return __x2__ else [5] {}
  [3] let intStart = __x2__
  [4] ??? "If id:{intStart} is - ∞ , let id:{from} be 0 ."
  [5] ??? "Else if id:{intStart} < 0 , let id:{from} be max ( id:{len} + id:{intStart} , 0 ) ."
  [6] ??? "Else , let id:{from} be min ( id:{intStart} , id:{len} ) ."
  [7] if (= end undefined) let intEnd = len else {
    app __x3__ = (ToIntegerOrInfinity end)
    if (is-completion __x3__) if (= __x3__.Type CONST_normal) __x3__ = __x3__.Value else return __x3__ else [5] {}
    let intEnd = __x3__
  }
  [8] ??? "If id:{intEnd} is - ∞ , let id:{to} be 0 ."
  [9] ??? "Else if id:{intEnd} < 0 , let id:{to} be max ( id:{len} + id:{intEnd} , 0 ) ."
  [10] ??? "Else , let id:{to} be min ( id:{intEnd} , id:{len} ) ."
  [11] if (! (< from to)) {
    app __x4__ = (WrapCompletion "")
    return __x4__
  } else [5] {}
  [12] ??? "Return the substring of id:{S} from id:{from} to id:{to} ."
}