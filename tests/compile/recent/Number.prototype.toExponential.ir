{
  app fractionDigits = (GetArgument argumentsList 0i)
  [0] app __x0__ = (thisNumberValue this)
  [0] if (is-completion __x0__) if (= __x0__.Type CONST_normal) __x0__ = __x0__.Value else return __x0__ else [2] {}
  [0] let x = __x0__
  [1] app __x1__ = (ToIntegerOrInfinity fractionDigits)
  [1] if (is-completion __x1__) if (= __x1__.Type CONST_normal) __x1__ = __x1__.Value else return __x1__ else [2] {}
  [1] let f = __x1__
  [3] ??? "If id:{x} is not finite , return ! Number : : toString ( id:{x} ) ."
  [4] if (|| (< f 0i) (< 100i f)) {
    app __x2__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_RangeError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
    return __x2__
  } else [2] {}
  [5] ??? "Set id:{x} to ℝ ( id:{x} ) ."
  [6] let s = ""
  [7] if (< x 0i) {
    [8] s = "-"
    [9] x = (- x)
  } else [2] {}
  [13] if (== x 0i) {
    [11] ??? "Let id:{m} be the String value consisting of id:{f} + 1 occurrences of the code unit 0x0030 ( DIGIT ZERO ) ."
    [12] let e = 0i
  } else {
    [16] if (! (= fractionDigits undefined)) ??? "Let id:{e} and id:{n} be integers such that 10 sup:{id:{f} } ≤ id:{n} < 10 sup:{id:{f} + 1 } and for which id:{n} × 10 sup:{id:{e} - id:{n} } - id:{x} is as close to zero as possible . If there are two such sets of id:{e} and id:{n} , pick the id:{e} and id:{n} for which id:{n} × 10 sup:{id:{e} - id:{f} } is larger ." else ??? "Let id:{e} , id:{n} , and id:{f} be integers such that id:{f} ≥ 0 , 10 sup:{id:{f} } ≤ id:{n} < 10 sup:{id:{f} + 1 } , id:{n} × 10 sup:{id:{e} - id:{f} } is id:{x} , and id:{f} is as small as possible . Note that the decimal representation of id:{n} has id:{f} + 1 digits , id:{n} is not divisible by 10 , and the least significant digit of id:{n} is not necessarily uniquely determined by these criteria ."
    [18] ??? "Let id:{m} be the String value consisting of the digits of the decimal representation of id:{n} ( in order , with no leading zeroes ) ."
  }
  [19] if (! (== f 0i)) {
    [20] ??? "Let id:{a} be the first code unit of id:{m} ."
    [21] ??? "Let id:{b} be the other id:{f} code units of id:{m} ."
    [22] m = (+ (+ a ".") b)
  } else [2] {}
  [26] if (== e 0i) {
    [24] let c = "+"
    [25] let d = "0"
  } else {
    [28] if (< 0i e) let c = "+" else {
      [29] assert (< e 0i)
      [30] let c = "-"
      [31] e = (- e)
    }
    [32] ??? "Let id:{d} be the String value consisting of the digits of the decimal representation of id:{e} ( in order , with no leading zeroes ) ."
  }
  [33] m = (+ (+ (+ m "e") c) d)
  [34] app __x3__ = (WrapCompletion (+ s m))
  [34] return __x3__
}