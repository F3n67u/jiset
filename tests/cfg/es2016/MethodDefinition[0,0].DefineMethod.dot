digraph {
  node8266 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let strict = true</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node8271 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let kind = CONST_Method</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node8265 [shape=diamond, label=<<font color="black">true</font>> color="black" fillcolor="white" style=filled]
  node8270 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let kind = CONST_Normal</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node8262 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node8269 [shape=diamond, label=<<font color="black">(! (= functionPrototype absent))</font>> color="black" fillcolor="white" style=filled]
  node8263 [shape=cds, label=<<font color="black">0:access __x0__ = (PropertyName &quot;Evaluation&quot;)</font>> color="black" fillcolor="white" style=filled]
  node8268 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">3:let scope = GLOBAL_context.LexicalEnvironment</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node8274 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">6:__x1__</td></tr>
      <tr><td align="left">7:return (new Record(&quot;Key&quot; -&gt; propKey, &quot;Closure&quot; -&gt; closure))</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node8261 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node8272 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">5:??? &quot;Let id:{closure} be FunctionCreate ( id:{kind} , nt:{StrictFormalParameters} , nt:{FunctionBody} , id:{scope} , id:{strict} ) . If id:{functionPrototype} was passed as a parameter , then pass its value as the id:{prototype} optional argument of FunctionCreate .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node8267 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let strict = false</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node8273 [shape=cds, label=<<font color="black">6:app __x1__ = (MakeMethod closure object)</font>> color="black" fillcolor="white" style=filled]
  node8264 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let propKey = __x0__</td></tr>
      <tr><td align="left">1:[? propKey]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node8270 -> node8272 [ color="black"]
  node8265 -> node8266 [label=<<font color="black">true</font>> color="black"]
  node8265 -> node8267 [label=<<font color="black">false</font>> color="black"]
  node8263 -> node8264 [ color="black"]
  node8272 -> node8273 [ color="black"]
  node8269 -> node8270 [label=<<font color="black">true</font>> color="black"]
  node8269 -> node8271 [label=<<font color="black">false</font>> color="black"]
  node8273 -> node8274 [ color="black"]
  node8266 -> node8268 [ color="black"]
  node8267 -> node8268 [ color="black"]
  node8264 -> node8265 [ color="black"]
  node8274 -> node8262 [ color="black"]
  node8271 -> node8272 [ color="black"]
  node8261 -> node8263 [ color="black"]
  node8268 -> node8269 [ color="black"]
}
