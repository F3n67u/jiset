{
  app typedArray = (GetArgument argumentsList 0i)
  app index = (GetArgument argumentsList 1i)
  app value = (GetArgument argumentsList 2i)
  [0] app __x0__ = (ValidateSharedIntegerTypedArray typedArray)
  [0] if (is-completion __x0__) if (= __x0__.Type CONST_normal) __x0__ = __x0__.Value else return __x0__ else [1] {}
  [0] let buffer = __x0__
  [1] app __x1__ = (ValidateAtomicAccess typedArray index)
  [1] if (is-completion __x1__) if (= __x1__.Type CONST_normal) __x1__ = __x1__.Value else return __x1__ else [1] {}
  [1] let i = __x1__
  [2] app __x2__ = (ToInteger value)
  [2] if (is-completion __x2__) if (= __x2__.Type CONST_normal) __x2__ = __x2__.Value else return __x2__ else [1] {}
  [2] let v = __x2__
  [3] let arrayTypeName = typedArray.TypedArrayName
  [4] ??? "Let id:{elementSize} be the Number value of the Element Size value specified in link:{} for id:{arrayTypeName} ."
  [5] ??? "Let id:{elementType} be the String value of the Element Type value in link:{} for id:{arrayTypeName} ."
  [6] let offset = typedArray.ByteOffset
  [7] let indexedPosition = (+ (* i elementSize) offset)
  [8] app __x3__ = (SetValueInBuffer buffer indexedPosition elementType v true "SeqCst")
  [8] __x3__
  [9] app __x4__ = (WrapCompletion v)
  [9] return __x4__
}