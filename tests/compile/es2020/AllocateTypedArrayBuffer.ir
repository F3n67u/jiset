{
  [1] assert (= O.ViewedArrayBuffer undefined)
  [2] app __x0__ = (IsNonNegativeInteger length)
  [2] if (is-completion __x0__) if (= __x0__.Type CONST_normal) __x0__ = __x0__.Value else return __x0__ else [0] {}
  [2] assert (= __x0__ true)
  [3] let constructorName = O.TypedArrayName
  [4] ??? "Let id:{elementSize} be the Element Size value specified in link:{} for id:{constructorName} ."
  [5] let byteLength = (* elementSize length)
  [6] app __x1__ = (AllocateArrayBuffer INTRINSIC_ArrayBuffer byteLength)
  [6] if (is-completion __x1__) if (= __x1__.Type CONST_normal) __x1__ = __x1__.Value else return __x1__ else [0] {}
  [6] let data = __x1__
  [7] O.ViewedArrayBuffer = data
  [8] O.ByteLength = byteLength
  [9] O.ByteOffset = 0i
  [10] O.ArrayLength = length
  [11] app __x2__ = (WrapCompletion O)
  [11] return __x2__
}