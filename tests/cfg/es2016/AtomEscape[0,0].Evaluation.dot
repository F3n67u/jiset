digraph {
  node12479 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">8:??? &quot;Return an internal Matcher closure that takes two arguments , a State id:{x} and a Continuation id:{c} , and performs the following steps : in:{} out:{}&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12475 [shape=cds, label=<<font color="black">0:access __x0__ = (DecimalEscape &quot;Evaluation&quot;)</font>> color="black" fillcolor="white" style=filled]
  node12474 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node12478 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw SyntaxError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12473 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node12477 [shape=diamond, label=<<font color="black">(|| (== n 0i) (&lt; NcapturingParens n))</font>> color="black" fillcolor="white" style=filled]
  node12476 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let E = __x0__</td></tr>
      <tr><td align="left">1:??? &quot;If id:{E} is a character , then in:{} out:{}&quot;</td></tr>
      <tr><td align="left">6:??? &quot;Let id:{n} be that integer .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12478 -> node12479 [ color="black"]
  node12473 -> node12475 [ color="black"]
  node12477 -> node12478 [label=<<font color="black">true</font>> color="black"]
  node12477 -> node12479 [label=<<font color="black">false</font>> color="black"]
  node12476 -> node12477 [ color="black"]
  node12479 -> node12474 [ color="black"]
  node12475 -> node12476 [ color="black"]
}
