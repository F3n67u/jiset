{
  app generator = (GetArgument argumentsList 0i)
  app value = (GetArgument argumentsList 1i)
  app done = (GetArgument argumentsList 2i)
  [1] let queue = generator.AsyncGeneratorQueue
  [2] assert (< 0i queue.length)
  [3] let next = (pop queue 0i)
  [4] let promiseCapability = next.Capability
  [5] app __x0__ = (CreateIterResultObject value done)
  [5] if (is-completion __x0__) if (= __x0__.Type CONST_normal) __x0__ = __x0__.Value else return __x0__ else [0] {}
  [5] let iteratorResult = __x0__
  [6] app __x1__ = (Call promiseCapability.Resolve undefined (new [iteratorResult]))
  [6] if (is-completion __x1__) if (= __x1__.Type CONST_normal) __x1__ = __x1__.Value else return __x1__ else [0] {}
  [6] __x1__
  [7] app __x2__ = (AsyncGeneratorResumeNext generator)
  [7] if (is-completion __x2__) if (= __x2__.Type CONST_normal) __x2__ = __x2__.Value else return __x2__ else [0] {}
  [7] __x2__
  [8] app __x3__ = (WrapCompletion undefined)
  [8] return __x3__
}