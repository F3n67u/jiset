{
  access __x0__ = (Atom "Evaluation" direction)
  let m = __x0__
  access __x1__ = (Quantifier "Evaluation")
  let min = __x1__[0i]
  let max = __x1__[1i]
  let greedy = __x1__[2i]
  ??? "Let id:{parenIndex} be the number of left - capturing parentheses in the entire regular expression that occur to the left of this nt:{Term} . This is the total number of grammar:{Atom4, [GroupSpecifier, Disjunction]} Parse Nodes prior to or enclosing this nt:{Term} ."
  ??? "Let id:{parenCount} be the number of left - capturing parentheses in nt:{Atom} . This is the total number of grammar:{Atom4, [GroupSpecifier, Disjunction]} Parse Nodes enclosed by nt:{Atom} ."
  ??? "Return an internal Matcher closure that takes two arguments , a State id:{x} and a Continuation id:{c} , and performs the following steps when evaluated : in:{} out:{}"
}