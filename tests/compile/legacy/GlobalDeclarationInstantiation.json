[{
  "tokens": ["Let", {
    "id": "envRec"
  }, "be", {
    "id": "env"
  }, "'", "s", "EnvironmentRecord", "."]
}, {
  "tokens": ["Assert", ":", {
    "id": "envRec"
  }, "is", "a", "global", "Environment", "Record", "."]
}, {
  "tokens": ["Let", {
    "id": "lexNames"
  }, "be", "the", "LexicallyDeclaredNames", "of", {
    "id": "script"
  }, "."]
}, {
  "tokens": ["Let", {
    "id": "varNames"
  }, "be", "the", "VarDeclaredNames", "of", {
    "id": "script"
  }, "."]
}, {
  "tokens": ["For", "each", {
    "id": "name"
  }, "in", {
    "id": "lexNames"
  }, ",", "do", {
    "steps": [{
      "tokens": ["If", {
        "id": "envRec"
      }, ".", "HasVarDeclaration", "(", {
        "id": "name"
      }, ")", "is", {
        "value": "true"
      }, ",", "throw", "a", {
        "value": "SyntaxError"
      }, "exception", "."]
    }, {
      "tokens": ["If", {
        "id": "envRec"
      }, ".", "HasLexicalDeclaration", "(", {
        "id": "name"
      }, ")", "is", {
        "value": "true"
      }, ",", "throw", "a", {
        "value": "SyntaxError"
      }, "exception", "."]
    }, {
      "tokens": ["Let", {
        "id": "hasRestrictedGlobal"
      }, "be", "?", {
        "id": "envRec"
      }, ".", "HasRestrictedGlobalProperty", "(", {
        "id": "name"
      }, ")", "."]
    }, {
      "tokens": ["If", {
        "id": "hasRestrictedGlobal"
      }, "is", {
        "value": "true"
      }, ",", "throw", "a", {
        "value": "SyntaxError"
      }, "exception", "."]
    }]
  }]
}, {
  "tokens": ["For", "each", {
    "id": "name"
  }, "in", {
    "id": "varNames"
  }, ",", "do", {
    "steps": [{
      "tokens": ["If", {
        "id": "envRec"
      }, ".", "HasLexicalDeclaration", "(", {
        "id": "name"
      }, ")", "is", {
        "value": "true"
      }, ",", "throw", "a", {
        "value": "SyntaxError"
      }, "exception", "."]
    }]
  }]
}, {
  "tokens": ["Let", {
    "id": "varDeclarations"
  }, "be", "the", "VarScopedDeclarations", "of", {
    "id": "script"
  }, "."]
}, {
  "tokens": ["Let", {
    "id": "functionsToInitialize"
  }, "be", "a", "new", "empty", "List", "."]
}, {
  "tokens": ["Let", {
    "id": "declaredFunctionNames"
  }, "be", "a", "new", "empty", "List", "."]
}, {
  "tokens": ["For", "each", {
    "id": "d"
  }, "in", {
    "id": "varDeclarations"
  }, ",", "in", "reverse", "list", "order", ",", "do", {
    "steps": [{
      "tokens": ["If", {
        "id": "d"
      }, "is", "neither", "a", {
        "nt": "VariableDeclaration"
      }, "nor", "a", {
        "nt": "ForBinding"
      }, "nor", "a", {
        "nt": "BindingIdentifier"
      }, ",", "then", {
        "steps": [{
          "tokens": ["Assert", ":", {
            "id": "d"
          }, "is", "either", "a", {
            "nt": "FunctionDeclaration"
          }, ",", "a", {
            "nt": "GeneratorDeclaration"
          }, ",", "an", {
            "nt": "AsyncFunctionDeclaration"
          }, ",", "or", "an", {
            "nt": "AsyncGeneratorDeclaration"
          }, "."]
        }, {
          "tokens": ["NOTE", ":", "If", "there", "are", "multiple", "function", "declarations", "for", "the", "same", "name", ",", "the", "last", "declaration", "is", "used", "."]
        }, {
          "tokens": ["Let", {
            "id": "fn"
          }, "be", "the", "sole", "element", "of", "the", "BoundNames", "of", {
            "id": "d"
          }, "."]
        }, {
          "tokens": ["If", {
            "id": "fn"
          }, "is", "not", "an", "element", "of", {
            "id": "declaredFunctionNames"
          }, ",", "then", {
            "steps": [{
              "tokens": ["Let", {
                "id": "fnDefinable"
              }, "be", "?", {
                "id": "envRec"
              }, ".", "CanDeclareGlobalFunction", "(", {
                "id": "fn"
              }, ")", "."]
            }, {
              "tokens": ["If", {
                "id": "fnDefinable"
              }, "is", {
                "value": "false"
              }, ",", "throw", "a", {
                "value": "TypeError"
              }, "exception", "."]
            }, {
              "tokens": ["Append", {
                "id": "fn"
              }, "to", {
                "id": "declaredFunctionNames"
              }, "."]
            }, {
              "tokens": ["Insert", {
                "id": "d"
              }, "as", "the", "first", "element", "of", {
                "id": "functionsToInitialize"
              }, "."]
            }]
          }]
        }]
      }]
    }]
  }]
}, {
  "tokens": ["Let", {
    "id": "declaredVarNames"
  }, "be", "a", "new", "empty", "List", "."]
}, {
  "tokens": ["For", "each", {
    "id": "d"
  }, "in", {
    "id": "varDeclarations"
  }, ",", "do", {
    "steps": [{
      "tokens": ["If", {
        "id": "d"
      }, "is", "a", {
        "nt": "VariableDeclaration"
      }, ",", "a", {
        "nt": "ForBinding"
      }, ",", "or", "a", {
        "nt": "BindingIdentifier"
      }, ",", "then", {
        "steps": [{
          "tokens": ["For", "each", "String", {
            "id": "vn"
          }, "in", "the", "BoundNames", "of", {
            "id": "d"
          }, ",", "do", {
            "steps": [{
              "tokens": ["If", {
                "id": "vn"
              }, "is", "not", "an", "element", "of", {
                "id": "declaredFunctionNames"
              }, ",", "then", {
                "steps": [{
                  "tokens": ["Let", {
                    "id": "vnDefinable"
                  }, "be", "?", {
                    "id": "envRec"
                  }, ".", "CanDeclareGlobalVar", "(", {
                    "id": "vn"
                  }, ")", "."]
                }, {
                  "tokens": ["If", {
                    "id": "vnDefinable"
                  }, "is", {
                    "value": "false"
                  }, ",", "throw", "a", {
                    "value": "TypeError"
                  }, "exception", "."]
                }, {
                  "tokens": ["If", {
                    "id": "vn"
                  }, "is", "not", "an", "element", "of", {
                    "id": "declaredVarNames"
                  }, ",", "then", {
                    "steps": [{
                      "tokens": ["Append", {
                        "id": "vn"
                      }, "to", {
                        "id": "declaredVarNames"
                      }, "."]
                    }]
                  }]
                }]
              }]
            }]
          }]
        }]
      }]
    }]
  }]
}, {
  "tokens": ["NOTE", ":", "No", "abnormal", "terminations", "occur", "after", "this", "algorithm", "step", "if", "the", "global", "object", "is", "an", "ordinary", "object", ".", "However", ",", "if", "the", "global", "object", "is", "a", "Proxy", "exotic", "object", "it", "may", "exhibit", "behaviours", "that", "cause", "abnormal", "terminations", "in", "some", "of", "the", "following", "steps", "."]
}, {
  "tokens": ["NOTE", ":", "Annex", "B", ".", "3", ".", "3", ".", "2", "adds", "additional", "steps", "at", "this", "point", "."]
}, {
  "tokens": ["Let", {
    "id": "lexDeclarations"
  }, "be", "the", "LexicallyScopedDeclarations", "of", {
    "id": "script"
  }, "."]
}, {
  "tokens": ["For", "each", "element", {
    "id": "d"
  }, "in", {
    "id": "lexDeclarations"
  }, ",", "do", {
    "steps": [{
      "tokens": ["NOTE", ":", "Lexically", "declared", "names", "are", "only", "instantiated", "here", "but", "not", "initialized", "."]
    }, {
      "tokens": ["For", "each", "element", {
        "id": "dn"
      }, "of", "the", "BoundNames", "of", {
        "id": "d"
      }, ",", "do", {
        "steps": [{
          "tokens": ["If", "IsConstantDeclaration", "of", {
            "id": "d"
          }, "is", {
            "value": "true"
          }, ",", "then", {
            "steps": [{
              "tokens": ["Perform", "?", {
                "id": "envRec"
              }, ".", "CreateImmutableBinding", "(", {
                "id": "dn"
              }, ",", {
                "value": "true"
              }, ")", "."]
            }]
          }]
        }, {
          "tokens": ["Else", ",", {
            "steps": [{
              "tokens": ["Perform", "?", {
                "id": "envRec"
              }, ".", "CreateMutableBinding", "(", {
                "id": "dn"
              }, ",", {
                "value": "false"
              }, ")", "."]
            }]
          }]
        }]
      }]
    }]
  }]
}, {
  "tokens": ["For", "each", "Parse", "Node", {
    "id": "f"
  }, "in", {
    "id": "functionsToInitialize"
  }, ",", "do", {
    "steps": [{
      "tokens": ["Let", {
        "id": "fn"
      }, "be", "the", "sole", "element", "of", "the", "BoundNames", "of", {
        "id": "f"
      }, "."]
    }, {
      "tokens": ["Let", {
        "id": "fo"
      }, "be", "InstantiateFunctionObject", "of", {
        "id": "f"
      }, "with", "argument", {
        "id": "env"
      }, "."]
    }, {
      "tokens": ["Perform", "?", {
        "id": "envRec"
      }, ".", "CreateGlobalFunctionBinding", "(", {
        "id": "fn"
      }, ",", {
        "id": "fo"
      }, ",", {
        "value": "false"
      }, ")", "."]
    }]
  }]
}, {
  "tokens": ["For", "each", "String", {
    "id": "vn"
  }, "in", {
    "id": "declaredVarNames"
  }, ",", "in", "list", "order", ",", "do", {
    "steps": [{
      "tokens": ["Perform", "?", {
        "id": "envRec"
      }, ".", "CreateGlobalVarBinding", "(", {
        "id": "vn"
      }, ",", {
        "value": "false"
      }, ")", "."]
    }]
  }]
}, {
  "tokens": ["Return", "NormalCompletion", "(", {
    "const": "empty"
  }, ")", "."]
}]