{
  [0] app __x0__ = (NewPromiseCapability INTRINSIC_Promise)
  [0] if (is-completion __x0__) if (= __x0__.Type CONST_normal) __x0__ = __x0__.Value else return __x0__ else [38] {}
  [0] let promiseCapability = __x0__
  [1] app __x1__ = (AsyncGeneratorValidate generator generatorBrand)
  [1] let check = __x1__
  [2] app __x2__ = (IsAbruptCompletion check)
  [2] if __x2__ {
    [3] let badGeneratorError = (new OrdinaryObject("Prototype" -> INTRINSIC_TypeError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap())))
    [4] app __x3__ = (Call promiseCapability.Reject undefined (new [badGeneratorError]))
    [4] if (is-completion __x3__) if (= __x3__.Type CONST_normal) __x3__ = __x3__.Value else return __x3__ else [38] {}
    [4] __x3__
    [5] app __x4__ = (WrapCompletion promiseCapability.Promise)
    [5] return __x4__
  } else [38] {}
  [6] let queue = generator.AsyncGeneratorQueue
  [7] let request = (new AsyncGeneratorRequest("Completion" -> completion, "Capability" -> promiseCapability))
  [8] append request -> queue
  [9] let state = generator.AsyncGeneratorState
  [10] if (! (= state CONST_executing)) {
    [11] app __x5__ = (AsyncGeneratorResumeNext generator)
    [11] if (is-completion __x5__) if (= __x5__.Type CONST_normal) __x5__ = __x5__.Value else return __x5__ else [38] {}
    [11] __x5__
  } else [38] {}
  [12] app __x6__ = (WrapCompletion promiseCapability.Promise)
  [12] return __x6__
}