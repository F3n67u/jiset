digraph {
  node5 [shape=cds, label=<<font color="black">3:access __x0__ = (lhs &quot;IsDestructuring&quot;)</font>> color="black" fillcolor="white" style=filled]
  node65 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">50:let result = __x19__</td></tr>
      <tr><td align="left">51:GLOBAL_context.LexicalEnvironment = oldEnv</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node77 [shape=cds, label=<<font color="black">59:app __x24__ = (IteratorClose iteratorRecord status)</font>> color="black" fillcolor="white" style=filled]
  node66 [shape=cds, label=<<font color="black">52:app __x20__ = (LoopContinues result labelSet)</font>> color="black" fillcolor="white" style=filled]
  node69 [shape=cds, label=<<font color="black">54:app __x21__ = (UpdateEmpty result V)</font>> color="black" fillcolor="white" style=filled]
  node0 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node10 [shape=cds, label=<<font color="black">8:app __x1__ = (Call iteratorRecord.NextMethod iteratorRecord.Iterator (new []))</font>> color="black" fillcolor="white" style=filled]
  node56 [shape=diamond, label=<<font color="black">(= iteratorKind CONST_async)</font>> color="black" fillcolor="white" style=filled]
  node42 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">31:let status = __x12__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node24 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">16:assert (= lhsKind CONST_lexicalBinding)</td></tr>
      <tr><td align="left">17:assert (is-instance-of lhs ForDeclaration)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node37 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let status = lhsRef</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node25 [shape=cds, label=<<font color="black">18:app __x6__ = (NewDeclarativeEnvironment oldEnv)</font>> color="black" fillcolor="white" style=filled]
  node52 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">41:let status = __x15__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">nextResult = [? __x2__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node20 [shape=diamond, label=<<font color="black">(|| (= lhsKind CONST_assignment) (= lhsKind CONST_varBinding))</font>> color="black" fillcolor="white" style=filled]
  node46 [shape=diamond, label=<<font color="black">(= lhsKind CONST_varBinding)</font>> color="black" fillcolor="white" style=filled]
  node57 [shape=cds, label=<<font color="black">app __x17__ = (AsyncIteratorClose iteratorRecord status)</font>> color="black" fillcolor="white" style=filled]
  node78 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">59:return [? __x24__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node29 [shape=diamond, label=<<font color="black">(= destructuring false)</font>> color="black" fillcolor="white" style=filled]
  node61 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">48:assert (= iterationKind CONST_iterate)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node1 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node74 [shape=diamond, label=<<font color="black">(= iteratorKind CONST_async)</font>> color="black" fillcolor="white" style=filled]
  node6 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">3:let destructuring = __x0__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node60 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return status</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node70 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">54:return __x21__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node21 [shape=diamond, label=<<font color="black">(= destructuring false)</font>> color="black" fillcolor="white" style=filled]
  node33 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">24:let lhsRef = [! __x9__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node28 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">19:__x7__</td></tr>
      <tr><td align="left">20:GLOBAL_context.LexicalEnvironment = iterationEnv</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node38 [shape=diamond, label=<<font color="black">(= lhsKind CONST_lexicalBinding)</font>> color="black" fillcolor="white" style=filled]
  node9 [shape=diamond, label=<<font color="black">true</font>> color="black" fillcolor="white" style=filled]
  node53 [shape=cds, label=<<font color="black">42:app __x16__ = (IsAbruptCompletion status)</font>> color="black" fillcolor="white" style=filled]
  node13 [shape=cds, label=<<font color="black">app __x2__ = (Await nextResult)</font>> color="black" fillcolor="white" style=filled]
  node41 [shape=cds, label=<<font color="black">31:app __x12__ = (PutValue lhsRef nextValue)</font>> color="black" fillcolor="white" style=filled]
  node73 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">57:status = __x22__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node2 [shape=diamond, label=<<font color="black">(= iteratorKind absent)</font>> color="black" fillcolor="white" style=filled]
  node45 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">34:let status = __x13__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node64 [shape=cds, label=<<font color="black">50:access __x19__ = (stmt &quot;Evaluation&quot;)</font>> color="black" fillcolor="white" style=filled]
  node17 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node32 [shape=cds, label=<<font color="black">24:app __x9__ = (ResolveBinding lhsName)</font>> color="black" fillcolor="white" style=filled]
  node34 [shape=diamond, label=<<font color="black">(= destructuring false)</font>> color="black" fillcolor="white" style=filled]
  node22 [shape=cds, label=<<font color="black">14:access __x5__ = (lhs &quot;Evaluation&quot;)</font>> color="black" fillcolor="white" style=filled]
  node44 [shape=cds, label=<<font color="black">34:access __x13__ = (assignmentPattern &quot;DestructuringAssignmentEvaluation&quot; nextValue)</font>> color="black" fillcolor="white" style=filled]
  node59 [shape=diamond, label=<<font color="black">(= iterationKind CONST_enumerate)</font>> color="black" fillcolor="white" style=filled]
  node27 [shape=cds, label=<<font color="black">19:access __x7__ = (lhs &quot;BindingInstantiation&quot; iterationEnv)</font>> color="black" fillcolor="white" style=filled]
  node71 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">56:assert (= iterationKind CONST_iterate)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12 [shape=diamond, label=<<font color="black">(= iteratorKind CONST_async)</font>> color="black" fillcolor="white" style=filled]
  node54 [shape=diamond, label=<<font color="black">__x16__</font>> color="black" fillcolor="white" style=filled]
  node49 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">37:let status = __x14__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node76 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return [? __x23__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node7 [shape=diamond, label=<<font color="black">(&amp;&amp; (= destructuring true) (= lhsKind CONST_assignment))</font>> color="black" fillcolor="white" style=filled]
  node39 [shape=cds, label=<<font color="black">29:app __x11__ = (InitializeReferencedBinding lhsRef nextValue)</font>> color="black" fillcolor="white" style=filled]
  node3 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">iteratorKind = CONST_sync</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node80 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">V = result.Value</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node35 [shape=cds, label=<<font color="black">30:app __x10__ = (IsAbruptCompletion lhsRef)</font>> color="black" fillcolor="white" style=filled]
  node48 [shape=cds, label=<<font color="black">37:access __x14__ = (lhs &quot;BindingInitialization&quot; nextValue undefined)</font>> color="black" fillcolor="white" style=filled]
  node63 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">49:return [? __x18__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18 [shape=cds, label=<<font color="black">11:app __x4__ = (IteratorValue nextResult)</font>> color="black" fillcolor="white" style=filled]
  node50 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">39:assert (= lhsKind CONST_lexicalBinding)</td></tr>
      <tr><td align="left">40:assert (is-instance-of lhs ForDeclaration)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node67 [shape=diamond, label=<<font color="black">(= __x20__ false)</font>> color="black" fillcolor="white" style=filled]
  node16 [shape=diamond, label=<<font color="black">(! (= __x3__ Object))</font>> color="black" fillcolor="white" style=filled]
  node31 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">23:let lhsName = __x8__[0i]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">8:let nextResult = [? __x1__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node72 [shape=cds, label=<<font color="black">57:app __x22__ = (UpdateEmpty result V)</font>> color="black" fillcolor="white" style=filled]
  node43 [shape=diamond, label=<<font color="black">(= lhsKind CONST_assignment)</font>> color="black" fillcolor="white" style=filled]
  node40 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">29:let status = __x11__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node26 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">18:let iterationEnv = __x6__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node55 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">43:GLOBAL_context.LexicalEnvironment = oldEnv</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node23 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">14:let lhsRef = __x5__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node8 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">5:assert (is-instance-of lhs LeftHandSideExpression)</td></tr>
      <tr><td align="left">6:let assignmentPattern = (parse-syntax lhs &quot;AssignmentPattern&quot; (new []))</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node75 [shape=cds, label=<<font color="black">app __x23__ = (AsyncIteratorClose iteratorRecord status)</font>> color="black" fillcolor="white" style=filled]
  node58 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return [? __x17__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node36 [shape=diamond, label=<<font color="black">__x10__</font>> color="black" fillcolor="white" style=filled]
  node30 [shape=cds, label=<<font color="black">23:access __x8__ = (lhs &quot;BoundNames&quot;)</font>> color="black" fillcolor="white" style=filled]
  node51 [shape=cds, label=<<font color="black">41:access __x15__ = (lhs &quot;BindingInitialization&quot; nextValue iterationEnv)</font>> color="black" fillcolor="white" style=filled]
  node19 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">11:let nextValue = [? __x4__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node4 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">1:let oldEnv = GLOBAL_context.LexicalEnvironment</td></tr>
      <tr><td align="left">2:let V = undefined</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node79 [shape=diamond, label=<<font color="black">(! (= result.Value CONST_empty))</font>> color="black" fillcolor="white" style=filled]
  node47 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">36:assert (is-instance-of lhs ForBinding)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15 [shape=cds, label=<<font color="black">10:app __x3__ = (Type nextResult)</font>> color="black" fillcolor="white" style=filled]
  node68 [shape=diamond, label=<<font color="black">(= iterationKind CONST_enumerate)</font>> color="black" fillcolor="white" style=filled]
  node62 [shape=cds, label=<<font color="black">49:app __x18__ = (IteratorClose iteratorRecord status)</font>> color="black" fillcolor="white" style=filled]
  node71 -> node72 [ color="black"]
  node7 -> node8 [label=<<font color="black">true</font>> color="black"]
  node7 -> node9 [label=<<font color="black">false</font>> color="black"]
  node0 -> node2 [ color="black"]
  node24 -> node25 [ color="black"]
  node58 -> node59 [ color="black"]
  node5 -> node6 [ color="black"]
  node53 -> node54 [ color="black"]
  node3 -> node4 [ color="black"]
  node63 -> node64 [ color="black"]
  node61 -> node62 [ color="black"]
  node28 -> node29 [ color="black"]
  node64 -> node65 [ color="black"]
  node39 -> node40 [ color="black"]
  node9 -> node10 [label=<<font color="black">true</font>> color="black"]
  node9 -> node1 [label=<<font color="black">false</font>> color="black"]
  node18 -> node19 [ color="black"]
  node66 -> node67 [ color="black"]
  node29 -> node30 [label=<<font color="black">true</font>> color="black"]
  node29 -> node34 [label=<<font color="black">false</font>> color="black"]
  node74 -> node75 [label=<<font color="black">true</font>> color="black"]
  node74 -> node77 [label=<<font color="black">false</font>> color="black"]
  node40 -> node53 [ color="black"]
  node36 -> node37 [label=<<font color="black">true</font>> color="black"]
  node36 -> node38 [label=<<font color="black">false</font>> color="black"]
  node42 -> node53 [ color="black"]
  node62 -> node63 [ color="black"]
  node15 -> node16 [ color="black"]
  node55 -> node56 [ color="black"]
  node49 -> node53 [ color="black"]
  node11 -> node12 [ color="black"]
  node37 -> node53 [ color="black"]
  node19 -> node20 [ color="black"]
  node59 -> node60 [label=<<font color="black">true</font>> color="black"]
  node59 -> node61 [label=<<font color="black">false</font>> color="black"]
  node13 -> node14 [ color="black"]
  node67 -> node68 [label=<<font color="black">true</font>> color="black"]
  node67 -> node79 [label=<<font color="black">false</font>> color="black"]
  node35 -> node36 [ color="black"]
  node57 -> node58 [ color="black"]
  node80 -> node9 [ color="black"]
  node75 -> node76 [ color="black"]
  node52 -> node53 [ color="black"]
  node2 -> node3 [label=<<font color="black">true</font>> color="black"]
  node2 -> node4 [label=<<font color="black">false</font>> color="black"]
  node22 -> node23 [ color="black"]
  node6 -> node7 [ color="black"]
  node76 -> node77 [ color="black"]
  node60 -> node64 [ color="black"]
  node79 -> node80 [label=<<font color="black">true</font>> color="black"]
  node79 -> node9 [label=<<font color="black">false</font>> color="black"]
  node12 -> node13 [label=<<font color="black">true</font>> color="black"]
  node12 -> node15 [label=<<font color="black">false</font>> color="black"]
  node44 -> node45 [ color="black"]
  node27 -> node28 [ color="black"]
  node20 -> node21 [label=<<font color="black">true</font>> color="black"]
  node20 -> node24 [label=<<font color="black">false</font>> color="black"]
  node14 -> node15 [ color="black"]
  node31 -> node32 [ color="black"]
  node68 -> node69 [label=<<font color="black">true</font>> color="black"]
  node68 -> node71 [label=<<font color="black">false</font>> color="black"]
  node30 -> node31 [ color="black"]
  node38 -> node39 [label=<<font color="black">true</font>> color="black"]
  node38 -> node41 [label=<<font color="black">false</font>> color="black"]
  node77 -> node78 [ color="black"]
  node26 -> node27 [ color="black"]
  node45 -> node53 [ color="black"]
  node72 -> node73 [ color="black"]
  node78 -> node79 [ color="black"]
  node10 -> node11 [ color="black"]
  node16 -> node17 [label=<<font color="black">true</font>> color="black"]
  node16 -> node18 [label=<<font color="black">false</font>> color="black"]
  node47 -> node48 [ color="black"]
  node50 -> node51 [ color="black"]
  node4 -> node5 [ color="black"]
  node51 -> node52 [ color="black"]
  node25 -> node26 [ color="black"]
  node8 -> node9 [ color="black"]
  node46 -> node47 [label=<<font color="black">true</font>> color="black"]
  node46 -> node50 [label=<<font color="black">false</font>> color="black"]
  node73 -> node74 [ color="black"]
  node69 -> node70 [ color="black"]
  node23 -> node34 [ color="black"]
  node43 -> node44 [label=<<font color="black">true</font>> color="black"]
  node43 -> node46 [label=<<font color="black">false</font>> color="black"]
  node65 -> node66 [ color="black"]
  node48 -> node49 [ color="black"]
  node34 -> node35 [label=<<font color="black">true</font>> color="black"]
  node34 -> node43 [label=<<font color="black">false</font>> color="black"]
  node17 -> node18 [ color="black"]
  node32 -> node33 [ color="black"]
  node56 -> node57 [label=<<font color="black">true</font>> color="black"]
  node56 -> node59 [label=<<font color="black">false</font>> color="black"]
  node33 -> node34 [ color="black"]
  node54 -> node55 [label=<<font color="black">true</font>> color="black"]
  node54 -> node64 [label=<<font color="black">false</font>> color="black"]
  node70 -> node79 [ color="black"]
  node41 -> node42 [ color="black"]
  node21 -> node22 [label=<<font color="black">true</font>> color="black"]
  node21 -> node34 [label=<<font color="black">false</font>> color="black"]
}
