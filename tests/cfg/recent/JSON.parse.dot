digraph {
  node18482 [shape=cds, label=<<font color="black">3:app __x2__ = (ParseText [! __x1__] Script)</font>> color="black" fillcolor="white" style=filled]
  node18486 [shape=cds, label=<<font color="black">9:app __x4__ = (OrdinaryObjectCreate INTRINSIC_Object_prototype)</font>> color="black" fillcolor="white" style=filled]
  node18475 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node18481 [shape=cds, label=<<font color="black">3:app __x1__ = (StringToCodePoints scriptString)</font>> color="black" fillcolor="white" style=filled]
  node18480 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let jsonString = [? __x0__]</td></tr>
      <tr><td align="left">1:??? &quot;Parse ! StringToCodePoints ( id:{jsonString} ) as a JSON text as specified in ECMA - 404 . Throw a value:{SyntaxError} exception if it is not a valid JSON text as defined in that specification .&quot;</td></tr>
      <tr><td align="left">2:let scriptString = (+ (+ &quot;(&quot; jsonString) &quot;);&quot;)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18485 [shape=diamond, label=<<font color="black">(= __x3__ true)</font>> color="black" fillcolor="white" style=filled]
  node18476 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node18489 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">11:[! __x5__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18477 [shape=cds, label=<<font color="black">app text = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node18490 [shape=cds, label=<<font color="black">12:app __x6__ = (InternalizeJSONProperty root rootName reviver)</font>> color="black" fillcolor="white" style=filled]
  node18488 [shape=cds, label=<<font color="black">11:app __x5__ = (CreateDataPropertyOrThrow root rootName unfiltered)</font>> color="black" fillcolor="white" style=filled]
  node18478 [shape=cds, label=<<font color="black">app reviver = (GetArgument argumentsList 1i)</font>> color="black" fillcolor="white" style=filled]
  node18483 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">3:let script = __x2__</td></tr>
      <tr><td align="left">5:??? &quot;Let id:{completion} be the result of evaluating id:{script} . The extended PropertyDefinitionEvaluation semantics defined in link:{unhandled: sec-__proto__-property-names-in-object-initializers} must not be used during the evaluation .&quot;</td></tr>
      <tr><td align="left">6:let unfiltered = completion.Value</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18491 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">12:return [? __x6__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18492 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return unfiltered</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18479 [shape=cds, label=<<font color="black">0:app __x0__ = (ToString text)</font>> color="black" fillcolor="white" style=filled]
  node18484 [shape=cds, label=<<font color="black">13:app __x3__ = (IsCallable reviver)</font>> color="black" fillcolor="white" style=filled]
  node18487 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">9:let root = [! __x4__]</td></tr>
      <tr><td align="left">10:let rootName = &quot;&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18486 -> node18487 [ color="black"]
  node18487 -> node18488 [ color="black"]
  node18491 -> node18476 [ color="black"]
  node18477 -> node18478 [ color="black"]
  node18475 -> node18477 [ color="black"]
  node18492 -> node18476 [ color="black"]
  node18480 -> node18481 [ color="black"]
  node18485 -> node18486 [label=<<font color="black">true</font>> color="black"]
  node18485 -> node18492 [label=<<font color="black">false</font>> color="black"]
  node18489 -> node18490 [ color="black"]
  node18478 -> node18479 [ color="black"]
  node18484 -> node18485 [ color="black"]
  node18481 -> node18482 [ color="black"]
  node18483 -> node18484 [ color="black"]
  node18482 -> node18483 [ color="black"]
  node18490 -> node18491 [ color="black"]
  node18488 -> node18489 [ color="black"]
  node18479 -> node18480 [ color="black"]
}
