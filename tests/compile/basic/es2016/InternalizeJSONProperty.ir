{
  app __x0__ = (Get holder name)
  let val = [? __x0__]
  app __x1__ = (Type val)
  if (= __x1__ Object) {
    app __x2__ = (IsArray val)
    let isArray = [? __x2__]
    if (= isArray true) {
      I = 0i
      app __x3__ = (Get val "length")
      app __x4__ = (ToLength [? __x3__])
      let len = [? __x4__]
      while (< I len) {
        app __x5__ = (ToString I)
        app __x6__ = (InternalizeJSONProperty val [! __x5__])
        let newElement = [? __x6__]
        if (= newElement undefined) {
          app __x7__ = (ToString I)
          app __x8__ = (val.Delete val [! __x7__])
          [? __x8__]
        } else {
          app __x9__ = (ToString I)
          app __x10__ = (CreateDataProperty val [! __x9__] newElement)
          [? __x10__]
        }
        append 1i -> I
      }
    } else {
      app __x11__ = (EnumerableOwnNames val)
      let keys = [? __x11__]
      let __x12__ = keys
      let __x13__ = 0i
      while (< __x13__ __x12__.length) {
        let P = __x12__[__x13__]
        app __x14__ = (InternalizeJSONProperty val P)
        let newElement = [? __x14__]
        if (= newElement undefined) {
          app __x15__ = (val.Delete val P)
          [? __x15__]
        } else {
          app __x16__ = (CreateDataProperty val P newElement)
          [? __x16__]
        }
        __x13__ = (+ __x13__ 1i)
      }
    }
  } else {}
  app __x17__ = (Call reviver holder (new [name, val]))
  return [? __x17__]
}