{
  let asyncContext = GLOBAL_context
  app __x0__ = (PromiseResolve INTRINSIC_Promise (new [value]))
  let promise = [? __x0__]
  let stepsFulfilled = AwaitFulfilledFunctions
  app __x1__ = (CreateBuiltinFunction stepsFulfilled (new ["AsyncContext"]))
  let onFulfilled = __x1__
  onFulfilled.AsyncContext = asyncContext
  let stepsRejected = AwaitRejectedFunctions
  app __x2__ = (CreateBuiltinFunction stepsRejected (new ["AsyncContext"]))
  let onRejected = __x2__
  onRejected.AsyncContext = asyncContext
  app __x3__ = (PerformPromiseThen promise onFulfilled onRejected)
  [! __x3__]
  if (= GLOBAL_executionStack[(- GLOBAL_executionStack.length 1i)] asyncContext) {
    let __x4__ = (- GLOBAL_executionStack.length 1i)
    (pop GLOBAL_executionStack __x4__)
  } else {}
  GLOBAL_context = GLOBAL_executionStack[(- GLOBAL_executionStack.length 1i)]
  ??? "Set the code evaluation state of id:{asyncContext} such that when evaluation is resumed with a Completion id:{completion} , the following steps of the algorithm that invoked Await will be performed , with id:{completion} available ."
  return undefined
}