digraph {
  node16789 [shape=diamond, label=<<font color="black">(! (= __x0__ Object))</font>> color="black" fillcolor="white" style=filled]
  node16785 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node16790 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16786 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node16787 [shape=cds, label=<<font color="black">app target = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node16791 [shape=cds, label=<<font color="black">1:app __x1__ = (target.IsExtensible target)</font>> color="black" fillcolor="white" style=filled]
  node16788 [shape=cds, label=<<font color="black">0:app __x0__ = (Type target)</font>> color="black" fillcolor="white" style=filled]
  node16792 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">1:return [? __x1__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16787 -> node16788 [ color="black"]
  node16789 -> node16790 [label=<<font color="black">true</font>> color="black"]
  node16789 -> node16791 [label=<<font color="black">false</font>> color="black"]
  node16792 -> node16786 [ color="black"]
  node16785 -> node16787 [ color="black"]
  node16790 -> node16791 [ color="black"]
  node16791 -> node16792 [ color="black"]
  node16788 -> node16789 [ color="black"]
}
