{
  let V = undefined
  ??? "Let id:{A} be the List of nt:{CaseClause} items in the first nt:{CaseClauses} , in source text order . If the first nt:{CaseClauses} is not present , id:{A} is « » ."
  let found = false
  let __x0__ = A
  let __x1__ = 0i
  while (< __x1__ __x0__.length) {
    let C = __x0__[__x1__]
    if (= found false) {
      access __x2__ = (C "CaseSelectorEvaluation")
      let clauseSelector = __x2__
      [? clauseSelector]
      app __x3__ = (StrictEqualityComparison input clauseSelector.Value)
      let found = __x3__
    } else {}
    if (= found true) {
      access __x4__ = (C "Evaluation")
      let R = __x4__
      if (! (= R.Value CONST_empty)) let V = R.Value else {}
      app __x5__ = (IsAbruptCompletion R)
      if __x5__ {
        app __x6__ = (UpdateEmpty R V)
        return __x6__
      } else {}
    } else {}
    __x1__ = (+ __x1__ 1i)
  }
  let foundInB = false
  ??? "Let id:{B} be the List containing the nt:{CaseClause} items in the second nt:{CaseClauses} , in source text order . If the second nt:{CaseClauses} is not present , id:{B} is « » ."
  if (= found false) {
    let __x7__ = B
    let __x8__ = 0i
    while (< __x8__ __x7__.length) {
      let C = __x7__[__x8__]
      if (= foundInB false) {
        access __x9__ = (C "CaseSelectorEvaluation")
        let clauseSelector = __x9__
        [? clauseSelector]
        app __x10__ = (StrictEqualityComparison input clauseSelector.Value)
        let foundInB = __x10__
      } else {}
      if (= foundInB true) {
        access __x11__ = (C "Evaluation")
        let R = __x11__
        if (! (= R.Value CONST_empty)) let V = R.Value else {}
        app __x12__ = (IsAbruptCompletion R)
        if __x12__ {
          app __x13__ = (UpdateEmpty R V)
          return __x13__
        } else {}
      } else {}
      __x8__ = (+ __x8__ 1i)
    }
  } else {}
  if (= foundInB true) return V else {}
  access __x14__ = (DefaultClause "Evaluation")
  let R = __x14__
  if (! (= R.Value CONST_empty)) let V = R.Value else {}
  app __x15__ = (IsAbruptCompletion R)
  if __x15__ {
    app __x16__ = (UpdateEmpty R V)
    return __x16__
  } else {}
  let __x17__ = B
  let __x18__ = 0i
  while (< __x18__ __x17__.length) {
    let C = __x17__[__x18__]
    access __x19__ = (C "Evaluation")
    let R = __x19__
    if (! (= R.Value CONST_empty)) let V = R.Value else {}
    app __x20__ = (IsAbruptCompletion R)
    if __x20__ {
      app __x21__ = (UpdateEmpty R V)
      return __x21__
    } else {}
    __x18__ = (+ __x18__ 1i)
  }
  return V
}