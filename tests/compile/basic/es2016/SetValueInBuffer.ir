{
  app __x0__ = (IsDetachedBuffer arrayBuffer)
  assert (= __x0__ false)
  assert (= (typeof value) Number)
  let block = arrayBuffer.ArrayBufferData
  assert (! (= block undefined))
  ??? "If id:{isLittleEndian} is not present , set id:{isLittleEndian} to either value:{true} or value:{false} . The choice is implementation dependent and should be the alternative that is most efficient for the implementation . An implementation must use the same value each time this step is executed and the same value must be used for the corresponding step in the GetValueFromBuffer abstract operation ."
  if (= type "Float32") ??? "Set id:{rawBytes} to a List containing the 4 bytes that are the result of converting id:{value} to IEEE 754 - 2008 binary32 format using “ Round to nearest , ties to even ” rounding mode . If id:{isLittleEndian} is value:{false} , the bytes are arranged in big endian order . Otherwise , the bytes are arranged in little endian order . If id:{value} is value:{NaN} , id:{rawValue} may be set to any implementation chosen IEEE 754 - 2008 binary64 format Not - a - Number encoding . An implementation must always choose the same encoding for each implementation distinguishable value:{NaN} value ." else if (= type "Float64") ??? "Set id:{rawBytes} to a List containing the 8 bytes that are the IEEE 754 - 2008 binary64 format encoding of id:{value} . If id:{isLittleEndian} is value:{false} , the bytes are arranged in big endian order . Otherwise , the bytes are arranged in little endian order . If id:{value} is value:{NaN} , id:{rawValue} may be set to any implementation chosen IEEE 754 - 2008 binary32 format Not - a - Number encoding . An implementation must always choose the same encoding for each implementation distinguishable value:{NaN} value ." else {
    ??? "Let id:{n} be the Number value of the Element Size specified in link:{unhandled: table-49} for Element Type id:{type} ."
    ??? "Let id:{convOp} be the abstract operation named in the Conversion Operation column in link:{unhandled: table-49} for Element Type id:{type} ."
    app __x1__ = (convOp value)
    let intValue = __x1__
    if (! (< intValue 0i)) ??? "Let id:{rawBytes} be a List containing the id:{n} - byte binary encoding of id:{intValue} . If id:{isLittleEndian} is value:{false} , the bytes are ordered in big endian order . Otherwise , the bytes are ordered in little endian order ." else ??? "Let id:{rawBytes} be a List containing the id:{n} - byte binary 2 ' s complement encoding of id:{intValue} . If id:{isLittleEndian} is value:{false} , the bytes are ordered in big endian order . Otherwise , the bytes are ordered in little endian order ."
  }
  ??? "Store the individual bytes of id:{rawBytes} into id:{block} , in order , starting at id:{block} [ id:{byteIndex} ] ."
  return undefined
}