digraph {
  node18033 [shape=diamond, label=<<font color="black">(! (= state CONST_executing))</font>> color="black" fillcolor="white" style=filled]
  node18020 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node18023 [shape=cds, label=<<font color="black">app completion = (GetArgument argumentsList 1i)</font>> color="black" fillcolor="white" style=filled]
  node18030 [shape=cds, label=<<font color="black">4:app __x2__ = (Call promiseCapability.Reject undefined (new [badGeneratorError]))</font>> color="black" fillcolor="white" style=filled]
  node18026 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">1:let promiseCapability = [! __x0__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18036 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">12:return promiseCapability.Promise</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18027 [shape=cds, label=<<font color="black">2:app __x1__ = (Type generator)</font>> color="black" fillcolor="white" style=filled]
  node18035 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">11:[! __x3__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18028 [shape=diamond, label=<<font color="black">(|| (! (= __x1__ Object)) (= generator.AsyncGeneratorState absent))</font>> color="black" fillcolor="white" style=filled]
  node18032 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">6:let queue = generator.AsyncGeneratorQueue</td></tr>
      <tr><td align="left">7:let request = (new AsyncGeneratorRequest(&quot;Completion&quot; -&gt; completion, &quot;Capability&quot; -&gt; promiseCapability))</td></tr>
      <tr><td align="left">8:append request -&gt; queue</td></tr>
      <tr><td align="left">9:let state = generator.AsyncGeneratorState</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18034 [shape=cds, label=<<font color="black">11:app __x3__ = (AsyncGeneratorResumeNext generator)</font>> color="black" fillcolor="white" style=filled]
  node18025 [shape=cds, label=<<font color="black">1:app __x0__ = (NewPromiseCapability INTRINSIC_Promise)</font>> color="black" fillcolor="white" style=filled]
  node18021 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node18022 [shape=cds, label=<<font color="black">app generator = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node18031 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">4:[! __x2__]</td></tr>
      <tr><td align="left">5:return promiseCapability.Promise</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18024 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:assert (is-completion completion)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18029 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">3:let badGeneratorError = ??? &quot;TypeError&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18035 -> node18036 [ color="black"]
  node18027 -> node18028 [ color="black"]
  node18029 -> node18030 [ color="black"]
  node18023 -> node18024 [ color="black"]
  node18036 -> node18021 [ color="black"]
  node18031 -> node18032 [ color="black"]
  node18032 -> node18033 [ color="black"]
  node18024 -> node18025 [ color="black"]
  node18020 -> node18022 [ color="black"]
  node18034 -> node18035 [ color="black"]
  node18030 -> node18031 [ color="black"]
  node18033 -> node18034 [label=<<font color="black">true</font>> color="black"]
  node18033 -> node18036 [label=<<font color="black">false</font>> color="black"]
  node18028 -> node18029 [label=<<font color="black">true</font>> color="black"]
  node18028 -> node18032 [label=<<font color="black">false</font>> color="black"]
  node18025 -> node18026 [ color="black"]
  node18026 -> node18027 [ color="black"]
  node18022 -> node18023 [ color="black"]
}
