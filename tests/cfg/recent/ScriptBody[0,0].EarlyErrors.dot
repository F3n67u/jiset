digraph {
  node21096 [shape=cds, label=<<font color="black">2:access __x0__ = (StatementList &quot;ContainsDuplicateLabels&quot; (new []))</font>> color="black" fillcolor="white" style=filled]
  node21101 [shape=diamond, label=<<font color="black">(= __x1__ true)</font>> color="black" fillcolor="white" style=filled]
  node21107 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return undefined</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node21098 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw SyntaxError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node21095 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:??? &quot;It is a Syntax Error if nt:{StatementList} Contains code:{super} unless the source code containing code:{super} is eval code that is being processed by a direct eval . Additional early error rules for code:{super} within direct eval are defined in PerformEval .&quot;</td></tr>
      <tr><td align="left">1:??? &quot;It is a Syntax Error if nt:{StatementList} Contains nt:{NewTarget} unless the source code containing nt:{NewTarget} is eval code that is being processed by a direct eval . Additional early error rules for nt:{NewTarget} in direct eval are defined in PerformEval .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node21106 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw SyntaxError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node21102 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw SyntaxError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node21094 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node21099 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return undefined</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node21105 [shape=diamond, label=<<font color="black">(= __x2__ true)</font>> color="black" fillcolor="white" style=filled]
  node21104 [shape=cds, label=<<font color="black">4:access __x2__ = (StatementList &quot;ContainsUndefinedContinueTarget&quot; (new []) (new []))</font>> color="black" fillcolor="white" style=filled]
  node21103 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return undefined</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node21097 [shape=diamond, label=<<font color="black">(= __x0__ true)</font>> color="black" fillcolor="white" style=filled]
  node21093 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node21100 [shape=cds, label=<<font color="black">3:access __x1__ = (StatementList &quot;ContainsUndefinedBreakTarget&quot; (new []))</font>> color="black" fillcolor="white" style=filled]
  node21093 -> node21095 [ color="black"]
  node21105 -> node21106 [label=<<font color="black">true</font>> color="black"]
  node21105 -> node21107 [label=<<font color="black">false</font>> color="black"]
  node21099 -> node21100 [ color="black"]
  node21095 -> node21096 [ color="black"]
  node21107 -> node21094 [ color="black"]
  node21096 -> node21097 [ color="black"]
  node21098 -> node21100 [ color="black"]
  node21103 -> node21104 [ color="black"]
  node21097 -> node21098 [label=<<font color="black">true</font>> color="black"]
  node21097 -> node21099 [label=<<font color="black">false</font>> color="black"]
  node21106 -> node21094 [ color="black"]
  node21104 -> node21105 [ color="black"]
  node21101 -> node21102 [label=<<font color="black">true</font>> color="black"]
  node21101 -> node21103 [label=<<font color="black">false</font>> color="black"]
  node21102 -> node21104 [ color="black"]
  node21100 -> node21101 [ color="black"]
}
