digraph {
  node10378 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">(pop GLOBAL_executionStack (- GLOBAL_executionStack.length 1i))</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10350 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return undefined</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10335 [shape=diamond, label=<<font color="black">(! (= __x0__ String))</font>> color="black" fillcolor="white" style=filled]
  node10334 [shape=cds, label=<<font color="black">1:app __x0__ = (Type x)</font>> color="black" fillcolor="white" style=filled]
  node10370 [shape=diamond, label=<<font color="black">(= result.Type CONST_normal)</font>> color="black" fillcolor="white" style=filled]
  node10375 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">38:result = __x10__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10352 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">14:let body = __x4__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10357 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">17:let ctx = GLOBAL_context</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10373 [shape=diamond, label=<<font color="black">(&amp;&amp; (= result.Type CONST_normal) (= result.Value CONST_empty))</font>> color="black" fillcolor="white" style=filled]
  node10363 [shape=diamond, label=<<font color="black">(= strictEval true)</font>> color="black" fillcolor="white" style=filled]
  node10358 [shape=diamond, label=<<font color="black">(= direct true)</font>> color="black" fillcolor="white" style=filled]
  node10346 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">9:let inFunction = false</td></tr>
      <tr><td align="left">10:let inMethod = false</td></tr>
      <tr><td align="left">11:let inDerivedConstructor = false</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10341 [shape=cds, label=<<font color="black">6:app __x2__ = (thisEnvRec.HasSuperBinding thisEnvRec)</font>> color="black" fillcolor="white" style=filled]
  node10351 [shape=cds, label=<<font color="black">14:access __x4__ = (script &quot;ScriptBody&quot;)</font>> color="black" fillcolor="white" style=filled]
  node10368 [shape=cds, label=<<font color="black">34:app __x8__ = (EvalDeclarationInstantiation body varEnv lexEnv strictEval)</font>> color="black" fillcolor="white" style=filled]
  node10336 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return x</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10356 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let strictEval = __x5__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10337 [shape=cds, label=<<font color="black">2:app __x1__ = (GetThisEnvironment)</font>> color="black" fillcolor="white" style=filled]
  node10362 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">23:let lexEnv = __x7__</td></tr>
      <tr><td align="left">24:let varEnv = evalRealm.GlobalEnv</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10374 [shape=cds, label=<<font color="black">38:app __x10__ = (NormalCompletion undefined)</font>> color="black" fillcolor="white" style=filled]
  node10345 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let inDerivedConstructor = false</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10369 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">34:let result = __x8__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10367 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">27:let evalCxt = (new ExecutionContext(&quot;SubMap&quot; -&gt; (new SubMap())))</td></tr>
      <tr><td align="left">28:evalCxt.Function = null</td></tr>
      <tr><td align="left">29:evalCxt.Realm = evalRealm</td></tr>
      <tr><td align="left">30:evalCxt.ScriptOrModule = ctx.ScriptOrModule</td></tr>
      <tr><td align="left">31:evalCxt.VariableEnvironment = varEnv</td></tr>
      <tr><td align="left">32:evalCxt.LexicalEnvironment = lexEnv</td></tr>
      <tr><td align="left">33:append evalCxt -&gt; GLOBAL_executionStack</td></tr>
      <tr><td align="left">33:GLOBAL_context = GLOBAL_executionStack[(- GLOBAL_executionStack.length 1i)]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10342 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">6:let inMethod = __x2__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10353 [shape=diamond, label=<<font color="black">(= strictCaller true)</font>> color="black" fillcolor="white" style=filled]
  node10349 [shape=diamond, label=<<font color="black">(= __x3__ false)</font>> color="black" fillcolor="white" style=filled]
  node10366 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">GLOBAL_context = null</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10338 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">2:let thisEnvRec = [! __x1__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10377 [shape=diamond, label=<<font color="black">(= GLOBAL_executionStack[(- GLOBAL_executionStack.length 1i)] evalCxt)</font>> color="black" fillcolor="white" style=filled]
  node10359 [shape=cds, label=<<font color="black">20:app __x6__ = (NewDeclarativeEnvironment ctx.LexicalEnvironment)</font>> color="black" fillcolor="white" style=filled]
  node10348 [shape=cds, label=<<font color="black">13:access __x3__ = (__x3__ &quot;Contains&quot; &quot;ScriptBody&quot;)</font>> color="black" fillcolor="white" style=filled]
  node10361 [shape=cds, label=<<font color="black">23:app __x7__ = (NewDeclarativeEnvironment evalRealm.GlobalEnv)</font>> color="black" fillcolor="white" style=filled]
  node10354 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let strictEval = true</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10339 [shape=diamond, label=<<font color="black">(= (typeof thisEnvRec) &quot;FunctionEnvironmentRecord&quot;)</font>> color="black" fillcolor="white" style=filled]
  node10371 [shape=cds, label=<<font color="black">36:access __x9__ = (body &quot;Evaluation&quot;)</font>> color="black" fillcolor="white" style=filled]
  node10333 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node10360 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">20:let lexEnv = __x6__</td></tr>
      <tr><td align="left">21:let varEnv = ctx.VariableEnvironment</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10365 [shape=diamond, label=<<font color="black">(= ctx null)</font>> color="black" fillcolor="white" style=filled]
  node10343 [shape=diamond, label=<<font color="black">(= F.ConstructorKind &quot;derived&quot;)</font>> color="black" fillcolor="white" style=filled]
  node10332 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node10364 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">varEnv = lexEnv</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10376 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">39:GLOBAL_context = null</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10347 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">12:??? &quot;Let id:{script} be the ECMAScript code that is the result of parsing id:{x} , interpreted as UTF - 16 encoded Unicode text as described in link:{unhandled: sec-ecmascript-language-types-string-type} , for the goal symbol nt:{Script} . If id:{inFunction} is value:{false} , additional early error rules from link:{unhandled: sec-performeval-rules-outside-functions} are applied . If id:{inMethod} is value:{false} , additional early error rules from link:{unhandled: sec-performeval-rules-outside-methods} are applied . If id:{inDerivedConstructor} is value:{false} , additional early error rules from link:{unhandled: sec-performeval-rules-outside-constructors} are applied . If the parse fails , throw a value:{SyntaxError} exception . If any early errors are detected , throw a value:{SyntaxError} or a value:{ReferenceError} exception , depending on the type of the error ( but see also clause link:{unhandled: sec-error-handling-and-language-extensions} ) . Parsing and early error detection may be interweaved in an implementation - dependent manner .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10340 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">4:let F = thisEnvRec.FunctionObject</td></tr>
      <tr><td align="left">5:let inFunction = true</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10379 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">40:GLOBAL_context = GLOBAL_executionStack[(- GLOBAL_executionStack.length 1i)]</td></tr>
      <tr><td align="left">41:return result</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10355 [shape=cds, label=<<font color="black">access __x5__ = (script &quot;IsStrict&quot;)</font>> color="black" fillcolor="white" style=filled]
  node10372 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">36:result = __x9__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10344 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let inDerivedConstructor = true</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10373 -> node10374 [label=<<font color="black">true</font>> color="black"]
  node10373 -> node10376 [label=<<font color="black">false</font>> color="black"]
  node10374 -> node10375 [ color="black"]
  node10378 -> node10379 [ color="black"]
  node10353 -> node10354 [label=<<font color="black">true</font>> color="black"]
  node10353 -> node10355 [label=<<font color="black">false</font>> color="black"]
  node10348 -> node10349 [ color="black"]
  node10354 -> node10357 [ color="black"]
  node10351 -> node10352 [ color="black"]
  node10339 -> node10340 [label=<<font color="black">true</font>> color="black"]
  node10339 -> node10346 [label=<<font color="black">false</font>> color="black"]
  node10376 -> node10377 [ color="black"]
  node10371 -> node10372 [ color="black"]
  node10340 -> node10341 [ color="black"]
  node10362 -> node10363 [ color="black"]
  node10338 -> node10339 [ color="black"]
  node10349 -> node10350 [label=<<font color="black">true</font>> color="black"]
  node10349 -> node10351 [label=<<font color="black">false</font>> color="black"]
  node10337 -> node10338 [ color="black"]
  node10335 -> node10336 [label=<<font color="black">true</font>> color="black"]
  node10335 -> node10337 [label=<<font color="black">false</font>> color="black"]
  node10356 -> node10357 [ color="black"]
  node10368 -> node10369 [ color="black"]
  node10343 -> node10344 [label=<<font color="black">true</font>> color="black"]
  node10343 -> node10345 [label=<<font color="black">false</font>> color="black"]
  node10357 -> node10358 [ color="black"]
  node10361 -> node10362 [ color="black"]
  node10345 -> node10347 [ color="black"]
  node10372 -> node10373 [ color="black"]
  node10350 -> node10351 [ color="black"]
  node10364 -> node10365 [ color="black"]
  node10363 -> node10364 [label=<<font color="black">true</font>> color="black"]
  node10363 -> node10365 [label=<<font color="black">false</font>> color="black"]
  node10370 -> node10371 [label=<<font color="black">true</font>> color="black"]
  node10370 -> node10373 [label=<<font color="black">false</font>> color="black"]
  node10342 -> node10343 [ color="black"]
  node10365 -> node10366 [label=<<font color="black">true</font>> color="black"]
  node10365 -> node10367 [label=<<font color="black">false</font>> color="black"]
  node10334 -> node10335 [ color="black"]
  node10336 -> node10337 [ color="black"]
  node10360 -> node10363 [ color="black"]
  node10367 -> node10368 [ color="black"]
  node10344 -> node10347 [ color="black"]
  node10352 -> node10353 [ color="black"]
  node10369 -> node10370 [ color="black"]
  node10346 -> node10347 [ color="black"]
  node10355 -> node10356 [ color="black"]
  node10379 -> node10333 [ color="black"]
  node10366 -> node10367 [ color="black"]
  node10332 -> node10334 [ color="black"]
  node10377 -> node10378 [label=<<font color="black">true</font>> color="black"]
  node10377 -> node10379 [label=<<font color="black">false</font>> color="black"]
  node10359 -> node10360 [ color="black"]
  node10358 -> node10359 [label=<<font color="black">true</font>> color="black"]
  node10358 -> node10361 [label=<<font color="black">false</font>> color="black"]
  node10341 -> node10342 [ color="black"]
  node10375 -> node10376 [ color="black"]
  node10347 -> node10348 [ color="black"]
}
