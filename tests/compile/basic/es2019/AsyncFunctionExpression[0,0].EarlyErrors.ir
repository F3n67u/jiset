{
  access __x0__ = (AsyncFunctionBody "ContainsUseStrict")
  let __x1__ = (= __x0__ true)
  if __x1__ {
    access __x2__ = (FormalParameters "IsSimpleParameterList")
    __x1__ = (= __x2__ false)
  } else {}
  if __x1__ {
    app __x3__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_SyntaxError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
    return __x3__
  } else {
    app __x4__ = (NormalCompletion undefined)
    return __x4__
  }
  access __x5__ = (FormalParameters "Contains")
  app __x6__ = (__x5__ "AwaitExpression")
  if (= __x6__ true) {
    app __x7__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_SyntaxError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
    return __x7__
  } else {
    app __x8__ = (NormalCompletion undefined)
    return __x8__
  }
  ??? "If the source code matching this production is strict code , the Early Error rules for grammar:{UniqueFormalParameters0, [FormalParameters]} are applied ."
  ??? "If the source code matching this production is strict code , it is a Syntax Error if nt:{BindingIdentifier} is present and the StringValue of nt:{BindingIdentifier} is code:{\"eval\"} or code:{\"arguments\"} ."
  access __x9__ = (FormalParameters "BoundNames")
  access __x10__ = (AsyncFunctionBody "LexicallyDeclaredNames")
  let __x11__ = __x9__
  let __x12__ = __x10__
  let __x13__ = 0i
  let __x14__ = 0i
  let __x15__ = false
  while (< __x13__ __x11__.length) {
    __x14__ = 0i
    while (< __x14__ __x12__.length) if (= __x11__[__x13__] __x12__[__x14__]) __x15__ = true else {}
  }
  if __x15__ {
    app __x16__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_SyntaxError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
    return __x16__
  } else {
    app __x17__ = (NormalCompletion undefined)
    return __x17__
  }
  access __x18__ = (FormalParameters "Contains")
  app __x19__ = (__x18__ "SuperProperty")
  if (= __x19__ true) {
    app __x20__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_SyntaxError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
    return __x20__
  } else {
    app __x21__ = (NormalCompletion undefined)
    return __x21__
  }
  access __x22__ = (AsyncFunctionBody "Contains")
  app __x23__ = (__x22__ "SuperProperty")
  if (= __x23__ true) {
    app __x24__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_SyntaxError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
    return __x24__
  } else {
    app __x25__ = (NormalCompletion undefined)
    return __x25__
  }
  access __x26__ = (FormalParameters "Contains")
  app __x27__ = (__x26__ "SuperCall")
  if (= __x27__ true) {
    app __x28__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_SyntaxError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
    return __x28__
  } else {
    app __x29__ = (NormalCompletion undefined)
    return __x29__
  }
  access __x30__ = (AsyncFunctionBody "Contains")
  app __x31__ = (__x30__ "SuperCall")
  if (= __x31__ true) {
    app __x32__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_SyntaxError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
    return __x32__
  } else {
    app __x33__ = (NormalCompletion undefined)
    return __x33__
  }
}