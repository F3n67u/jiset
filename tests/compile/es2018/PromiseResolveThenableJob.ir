{
  app promiseToResolve = (GetArgument argumentsList 0i)
  app thenable = (GetArgument argumentsList 1i)
  app then = (GetArgument argumentsList 2i)
  [0] app __x0__ = (CreateResolvingFunctions promiseToResolve)
  [0] let resolvingFunctions = __x0__
  [1] app __x1__ = (Call then thenable (new [resolvingFunctions.Resolve, resolvingFunctions.Reject]))
  [1] let thenCallResult = __x1__
  [2] app __x2__ = (IsAbruptCompletion thenCallResult)
  [2] if __x2__ {
    [3] app __x3__ = (Call resolvingFunctions.Reject undefined (new [thenCallResult.Value]))
    [3] let status = __x3__
    [4] app __x4__ = (Completion status)
    [4] app __x5__ = (WrapCompletion __x4__)
    [4] return __x5__
  } else [0] {}
  [5] app __x6__ = (Completion thenCallResult)
  [5] app __x7__ = (WrapCompletion __x6__)
  [5] return __x7__
}