digraph {
  node14709 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">7:??? &quot;Let id:{pText} be the sequence of code points resulting from interpreting each of the 16 - bit elements of id:{P} as a Unicode BMP code point . UTF - 16 decoding is not applied to the elements .&quot;</td></tr>
      <tr><td align="left">8:??? &quot;Parse id:{pText} using the grammars in link:{unhandled: sec-patterns} . The goal symbol for the parse is | Pattern [ ~ U , ~ N ] | . If the result of parsing contains a nt:{GroupName} , reparse with the goal symbol | Pattern [ ~ U , + N ] | and use this result instead . Throw a value:{SyntaxError} exception if id:{pText} did not conform to the grammar , if any elements of id:{pText} were not matched by the parse , or if any Early Error conditions exist .&quot;</td></tr>
      <tr><td align="left">9:??? &quot;Let id:{patternCharacters} be a List whose elements are the code unit elements of id:{P} .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14694 [shape=cds, label=<<font color="black">app pattern = (GetArgument argumentsList 1i)</font>> color="black" fillcolor="white" style=filled]
  node14701 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let F = &quot;&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14697 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let P = &quot;&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14714 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">17:[? __x3__]</td></tr>
      <tr><td align="left">18:return obj</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14703 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let F = [? __x1__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14705 [shape=diamond, label=<<font color="black">(contains F &quot;u&quot;)</font>> color="black" fillcolor="white" style=filled]
  node14700 [shape=diamond, label=<<font color="black">(= flags undefined)</font>> color="black" fillcolor="white" style=filled]
  node14704 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">4:??? &quot;If id:{F} contains any code unit other than value:{\&quot;g\&quot;} , value:{\&quot;i\&quot;} , value:{\&quot;m\&quot;} , value:{\&quot;s\&quot;} , value:{\&quot;u\&quot;} , or value:{\&quot;y\&quot;} or if it contains the same code unit more than once , throw a value:{SyntaxError} exception .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14691 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node14712 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">14:obj.OriginalSource = P</td></tr>
      <tr><td align="left">15:obj.OriginalFlags = F</td></tr>
      <tr><td align="left">16:??? &quot;Set id:{obj} . [ [ RegExpMatcher ] ] to the abstract closure that evaluates the above parse by applying the semantics provided in link:{unhandled: sec-pattern-semantics} using id:{patternCharacters} as the pattern ' s List of nt:{SourceCharacter} values and id:{F} as the flag parameters .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14698 [shape=cds, label=<<font color="black">app __x0__ = (ToString pattern)</font>> color="black" fillcolor="white" style=filled]
  node14693 [shape=cds, label=<<font color="black">app obj = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node14713 [shape=cds, label=<<font color="black">17:app __x3__ = (Set obj &quot;lastIndex&quot; 0i true)</font>> color="black" fillcolor="white" style=filled]
  node14708 [shape=diamond, label=<<font color="black">(= BMP true)</font>> color="black" fillcolor="white" style=filled]
  node14702 [shape=cds, label=<<font color="black">app __x1__ = (ToString flags)</font>> color="black" fillcolor="white" style=filled]
  node14696 [shape=diamond, label=<<font color="black">(= pattern undefined)</font>> color="black" fillcolor="white" style=filled]
  node14711 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">11:let pText = [! __x2__]</td></tr>
      <tr><td align="left">12:??? &quot;Parse id:{pText} using the grammars in link:{unhandled: sec-patterns} . The goal symbol for the parse is | Pattern [ + U , + N ] | . Throw a value:{SyntaxError} exception if id:{pText} did not conform to the grammar , if any elements of id:{pText} were not matched by the parse , or if any Early Error conditions exist .&quot;</td></tr>
      <tr><td align="left">13:??? &quot;Let id:{patternCharacters} be a List whose elements are the code points of id:{pText} .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14699 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let P = [? __x0__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14706 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let BMP = false</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14692 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node14707 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let BMP = true</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14710 [shape=cds, label=<<font color="black">11:app __x2__ = (UTF16DecodeString P)</font>> color="black" fillcolor="white" style=filled]
  node14695 [shape=cds, label=<<font color="black">app flags = (GetArgument argumentsList 2i)</font>> color="black" fillcolor="white" style=filled]
  node14696 -> node14697 [label=<<font color="black">true</font>> color="black"]
  node14696 -> node14698 [label=<<font color="black">false</font>> color="black"]
  node14702 -> node14703 [ color="black"]
  node14710 -> node14711 [ color="black"]
  node14693 -> node14694 [ color="black"]
  node14698 -> node14699 [ color="black"]
  node14713 -> node14714 [ color="black"]
  node14711 -> node14712 [ color="black"]
  node14701 -> node14704 [ color="black"]
  node14699 -> node14700 [ color="black"]
  node14695 -> node14696 [ color="black"]
  node14708 -> node14709 [label=<<font color="black">true</font>> color="black"]
  node14708 -> node14710 [label=<<font color="black">false</font>> color="black"]
  node14703 -> node14704 [ color="black"]
  node14691 -> node14693 [ color="black"]
  node14706 -> node14708 [ color="black"]
  node14704 -> node14705 [ color="black"]
  node14697 -> node14700 [ color="black"]
  node14705 -> node14706 [label=<<font color="black">true</font>> color="black"]
  node14705 -> node14707 [label=<<font color="black">false</font>> color="black"]
  node14694 -> node14695 [ color="black"]
  node14712 -> node14713 [ color="black"]
  node14707 -> node14708 [ color="black"]
  node14714 -> node14692 [ color="black"]
  node14700 -> node14701 [label=<<font color="black">true</font>> color="black"]
  node14700 -> node14702 [label=<<font color="black">false</font>> color="black"]
  node14709 -> node14712 [ color="black"]
}
