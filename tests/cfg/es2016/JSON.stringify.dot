digraph {
  node15258 [shape=cds, label=<<font color="black">24:app __x12__ = (ToNumber space)</font>> color="black" fillcolor="white" style=filled]
  node15226 [shape=cds, label=<<font color="black">app space = (GetArgument argumentsList 2i)</font>> color="black" fillcolor="white" style=filled]
  node15224 [shape=cds, label=<<font color="black">app value = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node15244 [shape=cds, label=<<font color="black">17:app __x7__ = (Type v)</font>> color="black" fillcolor="white" style=filled]
  node15237 [shape=cds, label=<<font color="black">10:app __x3__ = (Get replacer &quot;length&quot;)</font>> color="black" fillcolor="white" style=filled]
  node15233 [shape=cds, label=<<font color="black">7:app __x2__ = (IsArray replacer)</font>> color="black" fillcolor="white" style=filled]
  node15269 [shape=diamond, label=<<font color="black">(= __x17__ String)</font>> color="black" fillcolor="white" style=filled]
  node15256 [shape=diamond, label=<<font color="black">(= __x11__ Object)</font>> color="black" fillcolor="white" style=filled]
  node15228 [shape=cds, label=<<font color="black">3:app __x0__ = (Type replacer)</font>> color="black" fillcolor="white" style=filled]
  node15230 [shape=cds, label=<<font color="black">6:app __x1__ = (IsCallable replacer)</font>> color="black" fillcolor="white" style=filled]
  node15236 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">9:let PropertyList = (new [])</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15245 [shape=diamond, label=<<font color="black">(= __x7__ String)</font>> color="black" fillcolor="white" style=filled]
  node15257 [shape=diamond, label=<<font color="black">(! (= space.NumberData absent))</font>> color="black" fillcolor="white" style=filled]
  node15242 [shape=cds, label=<<font color="black">13:app __x6__ = (Get replacer [! __x5__])</font>> color="black" fillcolor="white" style=filled]
  node15267 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">28:let space = __x16__</td></tr>
      <tr><td align="left">29:??? &quot;Set id:{gap} to a String containing id:{space} occurrences of code unit 0x0020 ( SPACE ) . This will be the empty String if id:{space} is less than 1 .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15222 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node15239 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">10:let len = [? __x4__]</td></tr>
      <tr><td align="left">11:let k = 0i</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15263 [shape=cds, label=<<font color="black">32:app __x14__ = (Type space)</font>> color="black" fillcolor="white" style=filled]
  node15254 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">19:??? &quot;If id:{item} is not value:{undefined} and id:{item} is not currently an element of id:{PropertyList} , then in:{} out:{}&quot;</td></tr>
      <tr><td align="left">21:let k = (+ k 1i)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15250 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let item = [! __x9__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15264 [shape=diamond, label=<<font color="black">(= __x14__ Number)</font>> color="black" fillcolor="white" style=filled]
  node15229 [shape=diamond, label=<<font color="black">(= __x0__ Object)</font>> color="black" fillcolor="white" style=filled]
  node15231 [shape=diamond, label=<<font color="black">(= __x1__ true)</font>> color="black" fillcolor="white" style=filled]
  node15225 [shape=cds, label=<<font color="black">app replacer = (GetArgument argumentsList 1i)</font>> color="black" fillcolor="white" style=filled]
  node15274 [shape=cds, label=<<font color="black">35:app __x19__ = (CreateDataProperty wrapper &quot;&quot; value)</font>> color="black" fillcolor="white" style=filled]
  node15261 [shape=cds, label=<<font color="black">26:app __x13__ = (ToString space)</font>> color="black" fillcolor="white" style=filled]
  node15246 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let item = v</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15271 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">gap = &quot;&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15235 [shape=diamond, label=<<font color="black">(= isArray true)</font>> color="black" fillcolor="white" style=filled]
  node15253 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">??? &quot;If id:{v} has a [ [ StringData ] ] or [ [ NumberData ] ] internal slot , let id:{item} be ? ToString ( id:{v} ) .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15266 [shape=cds, label=<<font color="black">28:app __x16__ = (min 10i __x15__)</font>> color="black" fillcolor="white" style=filled]
  node15243 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">13:let v = [? __x6__]</td></tr>
      <tr><td align="left">14:let item = undefined</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15248 [shape=diamond, label=<<font color="black">(= __x8__ Number)</font>> color="black" fillcolor="white" style=filled]
  node15238 [shape=cds, label=<<font color="black">10:app __x4__ = (ToLength [? __x3__])</font>> color="black" fillcolor="white" style=filled]
  node15249 [shape=cds, label=<<font color="black">app __x9__ = (ToString v)</font>> color="black" fillcolor="white" style=filled]
  node15265 [shape=cds, label=<<font color="black">28:app __x15__ = (ToInteger space)</font>> color="black" fillcolor="white" style=filled]
  node15270 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">??? &quot;If the number of elements in id:{space} is 10 or less , set id:{gap} to id:{space} ; otherwise set id:{gap} to a String consisting of the first 10 elements of id:{space} .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15275 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">35:let status = __x19__</td></tr>
      <tr><td align="left">36:assert (= status true)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15247 [shape=cds, label=<<font color="black">app __x8__ = (Type v)</font>> color="black" fillcolor="white" style=filled]
  node15234 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">7:let isArray = [? __x2__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15232 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let ReplacerFunction = replacer</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15227 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let stack = (new [])</td></tr>
      <tr><td align="left">1:let indent = &quot;&quot;</td></tr>
      <tr><td align="left">2:let PropertyList = undefined</td></tr>
      <tr><td align="left">2:let ReplacerFunction = undefined</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15259 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">24:let space = [? __x12__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15276 [shape=cds, label=<<font color="black">37:app __x20__ = (SerializeJSONProperty &quot;&quot; wrapper)</font>> color="black" fillcolor="white" style=filled]
  node15252 [shape=diamond, label=<<font color="black">(= __x10__ Object)</font>> color="black" fillcolor="white" style=filled]
  node15241 [shape=cds, label=<<font color="black">13:app __x5__ = (ToString k)</font>> color="black" fillcolor="white" style=filled]
  node15240 [shape=diamond, label=<<font color="black">(&lt; k len)</font>> color="black" fillcolor="white" style=filled]
  node15255 [shape=cds, label=<<font color="black">22:app __x11__ = (Type space)</font>> color="black" fillcolor="white" style=filled]
  node15223 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node15260 [shape=diamond, label=<<font color="black">(! (= space.StringData absent))</font>> color="black" fillcolor="white" style=filled]
  node15277 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">37:return [? __x20__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15262 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">26:let space = [? __x13__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15268 [shape=cds, label=<<font color="black">app __x17__ = (Type space)</font>> color="black" fillcolor="white" style=filled]
  node15251 [shape=cds, label=<<font color="black">app __x10__ = (Type v)</font>> color="black" fillcolor="white" style=filled]
  node15272 [shape=cds, label=<<font color="black">34:app __x18__ = (ObjectCreate INTRINSIC_ObjectPrototype)</font>> color="black" fillcolor="white" style=filled]
  node15273 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">34:let wrapper = __x18__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node15234 -> node15235 [ color="black"]
  node15263 -> node15264 [ color="black"]
  node15237 -> node15238 [ color="black"]
  node15268 -> node15269 [ color="black"]
  node15277 -> node15223 [ color="black"]
  node15243 -> node15244 [ color="black"]
  node15254 -> node15240 [ color="black"]
  node15232 -> node15255 [ color="black"]
  node15246 -> node15254 [ color="black"]
  node15252 -> node15253 [label=<<font color="black">true</font>> color="black"]
  node15252 -> node15254 [label=<<font color="black">false</font>> color="black"]
  node15240 -> node15241 [label=<<font color="black">true</font>> color="black"]
  node15240 -> node15255 [label=<<font color="black">false</font>> color="black"]
  node15250 -> node15254 [ color="black"]
  node15258 -> node15259 [ color="black"]
  node15253 -> node15254 [ color="black"]
  node15265 -> node15266 [ color="black"]
  node15267 -> node15272 [ color="black"]
  node15259 -> node15263 [ color="black"]
  node15228 -> node15229 [ color="black"]
  node15270 -> node15272 [ color="black"]
  node15256 -> node15257 [label=<<font color="black">true</font>> color="black"]
  node15256 -> node15263 [label=<<font color="black">false</font>> color="black"]
  node15230 -> node15231 [ color="black"]
  node15251 -> node15252 [ color="black"]
  node15255 -> node15256 [ color="black"]
  node15266 -> node15267 [ color="black"]
  node15276 -> node15277 [ color="black"]
  node15275 -> node15276 [ color="black"]
  node15244 -> node15245 [ color="black"]
  node15273 -> node15274 [ color="black"]
  node15257 -> node15258 [label=<<font color="black">true</font>> color="black"]
  node15257 -> node15260 [label=<<font color="black">false</font>> color="black"]
  node15242 -> node15243 [ color="black"]
  node15247 -> node15248 [ color="black"]
  node15225 -> node15226 [ color="black"]
  node15249 -> node15250 [ color="black"]
  node15229 -> node15230 [label=<<font color="black">true</font>> color="black"]
  node15229 -> node15255 [label=<<font color="black">false</font>> color="black"]
  node15241 -> node15242 [ color="black"]
  node15248 -> node15249 [label=<<font color="black">true</font>> color="black"]
  node15248 -> node15251 [label=<<font color="black">false</font>> color="black"]
  node15236 -> node15237 [ color="black"]
  node15238 -> node15239 [ color="black"]
  node15274 -> node15275 [ color="black"]
  node15235 -> node15236 [label=<<font color="black">true</font>> color="black"]
  node15235 -> node15255 [label=<<font color="black">false</font>> color="black"]
  node15224 -> node15225 [ color="black"]
  node15226 -> node15227 [ color="black"]
  node15245 -> node15246 [label=<<font color="black">true</font>> color="black"]
  node15245 -> node15247 [label=<<font color="black">false</font>> color="black"]
  node15233 -> node15234 [ color="black"]
  node15231 -> node15232 [label=<<font color="black">true</font>> color="black"]
  node15231 -> node15233 [label=<<font color="black">false</font>> color="black"]
  node15239 -> node15240 [ color="black"]
  node15272 -> node15273 [ color="black"]
  node15261 -> node15262 [ color="black"]
  node15269 -> node15270 [label=<<font color="black">true</font>> color="black"]
  node15269 -> node15271 [label=<<font color="black">false</font>> color="black"]
  node15271 -> node15272 [ color="black"]
  node15260 -> node15261 [label=<<font color="black">true</font>> color="black"]
  node15260 -> node15263 [label=<<font color="black">false</font>> color="black"]
  node15262 -> node15263 [ color="black"]
  node15222 -> node15224 [ color="black"]
  node15264 -> node15265 [label=<<font color="black">true</font>> color="black"]
  node15264 -> node15268 [label=<<font color="black">false</font>> color="black"]
  node15227 -> node15228 [ color="black"]
}
