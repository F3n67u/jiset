digraph {
  node19005 [shape=cds, label=<<font color="black">5:app __x2__ = (IsConstructor C)</font>> color="black" fillcolor="white" style=filled]
  node18999 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node19006 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">5:assert (= __x2__ true)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node18998 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node19002 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">2:assert (= __x0__ true)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node19007 [shape=cds, label=<<font color="black">6:app __x3__ = (PromiseResolve C result)</font>> color="black" fillcolor="white" style=filled]
  node19003 [shape=cds, label=<<font color="black">3:app __x1__ = (Call onFinally undefined)</font>> color="black" fillcolor="white" style=filled]
  node19001 [shape=cds, label=<<font color="black">2:app __x0__ = (IsCallable onFinally)</font>> color="black" fillcolor="white" style=filled]
  node19009 [shape=cds, label=<<font color="black">8:app __x4__ = (Invoke promise &quot;then&quot; (new [valueThunk]))</font>> color="black" fillcolor="white" style=filled]
  node19008 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">6:let promise = [? __x3__]</td></tr>
      <tr><td align="left">7:??? &quot;Let id:{valueThunk} be equivalent to a function that returns id:{value} .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node19004 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">3:let result = [? __x1__]</td></tr>
      <tr><td align="left">4:let C = F.Constructor</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node19010 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">8:return [? __x4__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node19000 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let F = GLOBAL_context.Function</td></tr>
      <tr><td align="left">1:let onFinally = F.OnFinally</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node19010 -> node18999 [ color="black"]
  node19009 -> node19010 [ color="black"]
  node19002 -> node19003 [ color="black"]
  node19003 -> node19004 [ color="black"]
  node19005 -> node19006 [ color="black"]
  node19001 -> node19002 [ color="black"]
  node19007 -> node19008 [ color="black"]
  node19004 -> node19005 [ color="black"]
  node18998 -> node19000 [ color="black"]
  node19006 -> node19007 [ color="black"]
  node19000 -> node19001 [ color="black"]
  node19008 -> node19009 [ color="black"]
}
