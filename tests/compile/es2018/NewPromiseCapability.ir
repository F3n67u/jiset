{
  [0] app __x0__ = (IsConstructor C)
  [0] if (= __x0__ false) {
    app __x1__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_TypeError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
    return __x1__
  } else [1] {}
  [2] let promiseCapability = (new PromiseCapability("Promise" -> undefined, "Resolve" -> undefined, "Reject" -> undefined))
  [3] ??? "Let id:{steps} be the algorithm steps defined in link:{} ."
  [4] app __x2__ = (CreateBuiltinFunction steps (new ["Capability"]))
  [4] let executor = __x2__
  [5] executor.Capability = promiseCapability
  [6] app __x3__ = (Construct C (new [executor]))
  [6] if (is-completion __x3__) if (= __x3__.Type CONST_normal) __x3__ = __x3__.Value else return __x3__ else [1] {}
  [6] let promise = __x3__
  [7] app __x4__ = (IsCallable promiseCapability.Resolve)
  [7] if (= __x4__ false) {
    app __x5__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_TypeError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
    return __x5__
  } else [1] {}
  [8] app __x6__ = (IsCallable promiseCapability.Reject)
  [8] if (= __x6__ false) {
    app __x7__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_TypeError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
    return __x7__
  } else [1] {}
  [9] promiseCapability.Promise = promise
  [10] app __x8__ = (WrapCompletion promiseCapability)
  [10] return __x8__
}