{
  access __x0__ = (GLOBAL_context "LexicalEnvironment")
  let lex = __x0__
  app __x1__ = (NewDeclarativeEnvironment lex)
  let classScope = __x1__
  let classScopeEnvRec = classScope.EnvironmentRecord
  if (! (= classBinding undefined)) {
    app __x2__ = (classScopeEnvRec.CreateImmutableBinding classScopeEnvRec classBinding true)
    __x2__
  } else {}
  if (= ClassHeritage absent) {
    let protoParent = INTRINSIC_Object_prototype
    let constructorParent = INTRINSIC_Function_prototype
  } else {
    GLOBAL_context.LexicalEnvironment = classScope
    access __x3__ = (ClassHeritage "Evaluation")
    let superclassRef = __x3__
    GLOBAL_context.LexicalEnvironment = lex
    app __x4__ = (GetValue superclassRef)
    let superclass = [? __x4__]
    if (= superclass null) {
      let protoParent = null
      let constructorParent = INTRINSIC_Function_prototype
    } else {
      app __x5__ = (IsConstructor superclass)
      if (= __x5__ false) throw TypeError else {
        app __x6__ = (Get superclass "prototype")
        let protoParent = [? __x6__]
        app __x7__ = (Type protoParent)
        if (! (|| (= __x7__ Object) (= __x7__ Null))) throw TypeError else {}
        let constructorParent = superclass
      }
    }
  }
  app __x8__ = (OrdinaryObjectCreate protoParent)
  let proto = __x8__
  if (= ClassBody absent) let constructor = CONST_empty else {
    access __x9__ = (ClassBody "ConstructorMethod")
    let constructor = __x9__
  }
  if (= constructor CONST_empty) if (! (= ClassHeritage absent)) ??? "Set id:{constructor} to the result of parsing the source text in:{} out:{}" else ??? "Set id:{constructor} to the result of parsing the source text in:{} out:{}" else {}
  GLOBAL_context.LexicalEnvironment = classScope
  access __x10__ = (constructor "DefineMethod" proto constructorParent)
  let constructorInfo = [! __x10__]
  let F = constructorInfo.Closure
  app __x11__ = (MakeConstructor F false proto)
  __x11__
  if (! (= ClassHeritage absent)) F.ConstructorKind = CONST_derived else {}
  app __x12__ = (MakeClassConstructor F)
  __x12__
  if (! (= className undefined)) {
    app __x13__ = (SetFunctionName F className)
    __x13__
  } else {}
  app __x14__ = (CreateMethodProperty proto "constructor" F)
  __x14__
  if (= ClassBody absent) let methods = (new []) else {
    access __x15__ = (ClassBody "NonConstructorMethodDefinitions")
    let methods = __x15__
  }
  let __x16__ = methods
  let __x17__ = 0i
  while (< __x17__ __x16__.length) {
    let m = __x16__[__x17__]
    access __x18__ = (m "IsStatic")
    if (= __x18__ false) {
      access __x19__ = (m "PropertyDefinitionEvaluation" proto false)
      let status = __x19__
    } else {
      access __x20__ = (m "PropertyDefinitionEvaluation" F false)
      let status = __x20__
    }
    app __x21__ = (IsAbruptCompletion status)
    if __x21__ {
      GLOBAL_context.LexicalEnvironment = lex
      return status
    } else {}
    __x17__ = (+ __x17__ 1i)
  }
  GLOBAL_context.LexicalEnvironment = lex
  if (! (= classBinding undefined)) {
    app __x22__ = (classScopeEnvRec.InitializeBinding classScopeEnvRec classBinding F)
    __x22__
  } else {}
  return F
}