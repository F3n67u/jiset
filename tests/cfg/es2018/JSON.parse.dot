digraph {
  node16804 [shape=cds, label=<<font color="black">11:app __x4__ = (InternalizeJSONProperty root rootName)</font>> color="black" fillcolor="white" style=filled]
  node16798 [shape=cds, label=<<font color="black">12:app __x1__ = (IsCallable reviver)</font>> color="black" fillcolor="white" style=filled]
  node16800 [shape=cds, label=<<font color="black">7:app __x2__ = (ObjectCreate INTRINSIC_ObjectPrototype)</font>> color="black" fillcolor="white" style=filled]
  node16805 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">11:return [? __x4__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16796 [shape=cds, label=<<font color="black">0:app __x0__ = (ToString text)</font>> color="black" fillcolor="white" style=filled]
  node16806 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return unfiltered</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16795 [shape=cds, label=<<font color="black">app reviver = (GetArgument argumentsList 1i)</font>> color="black" fillcolor="white" style=filled]
  node16803 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">9:let status = __x3__</td></tr>
      <tr><td align="left">10:assert (= status true)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16792 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node16794 [shape=cds, label=<<font color="black">app text = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node16797 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let JText = [? __x0__]</td></tr>
      <tr><td align="left">1:??? &quot;Parse id:{JText} interpreted as UTF - 16 encoded Unicode points ( link:{unhandled: sec-ecmascript-language-types-string-type} ) as a JSON text as specified in ECMA - 404 . Throw a value:{SyntaxError} exception if id:{JText} is not a valid JSON text as defined in that specification .&quot;</td></tr>
      <tr><td align="left">2:let scriptText = (+ (+ &quot;(&quot; JText) &quot;);&quot;)</td></tr>
      <tr><td align="left">3:??? &quot;Let id:{completion} be the result of parsing and evaluating id:{scriptText} as if it was the source text of an ECMAScript nt:{Script} , but using the alternative definition of nt:{DoubleStringCharacter} provided below . The extended PropertyDefinitionEvaluation semantics defined in link:{unhandled: sec-__proto__-property-names-in-object-initializers} must not be used during the evaluation .&quot;</td></tr>
      <tr><td align="left">4:let unfiltered = completion.Value</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16801 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">7:let root = __x2__</td></tr>
      <tr><td align="left">8:let rootName = &quot;&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16793 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node16799 [shape=diamond, label=<<font color="black">(= __x1__ true)</font>> color="black" fillcolor="white" style=filled]
  node16802 [shape=cds, label=<<font color="black">9:app __x3__ = (CreateDataProperty root rootName unfiltered)</font>> color="black" fillcolor="white" style=filled]
  node16797 -> node16798 [ color="black"]
  node16792 -> node16794 [ color="black"]
  node16794 -> node16795 [ color="black"]
  node16795 -> node16796 [ color="black"]
  node16805 -> node16793 [ color="black"]
  node16802 -> node16803 [ color="black"]
  node16806 -> node16793 [ color="black"]
  node16804 -> node16805 [ color="black"]
  node16803 -> node16804 [ color="black"]
  node16796 -> node16797 [ color="black"]
  node16800 -> node16801 [ color="black"]
  node16798 -> node16799 [ color="black"]
  node16801 -> node16802 [ color="black"]
  node16799 -> node16800 [label=<<font color="black">true</font>> color="black"]
  node16799 -> node16806 [label=<<font color="black">false</font>> color="black"]
}
