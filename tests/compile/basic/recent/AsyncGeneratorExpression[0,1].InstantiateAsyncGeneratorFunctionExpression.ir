{
  assert (= name absent)
  access __x0__ = (BindingIdentifier "StringValue")
  name = __x0__
  let scope = GLOBAL_context.LexicalEnvironment
  app __x1__ = (NewDeclarativeEnvironment scope)
  let funcEnv = [! __x1__]
  app __x2__ = (funcEnv.CreateImmutableBinding funcEnv name false)
  [! __x2__]
  let sourceText = (get-syntax AsyncGeneratorExpression)
  app __x3__ = (OrdinaryFunctionCreate INTRINSIC_AsyncGeneratorFunction_prototype sourceText FormalParameters AsyncGeneratorBody CONST_nonDASHlexicalDASHthis funcEnv)
  let closure = [! __x3__]
  app __x4__ = (SetFunctionName closure name)
  [! __x4__]
  app __x5__ = (OrdinaryObjectCreate INTRINSIC_AsyncGeneratorFunction_prototype_prototype)
  let prototype = [! __x5__]
  app __x6__ = (DefinePropertyOrThrow closure "prototype" (new PropertyDescriptor("Value" -> prototype, "Writable" -> true, "Enumerable" -> false, "Configurable" -> false)))
  [! __x6__]
  app __x7__ = (funcEnv.InitializeBinding funcEnv name closure)
  [! __x7__]
  return closure
}