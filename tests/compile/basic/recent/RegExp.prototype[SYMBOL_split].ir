{
  let rx = this
  app __x0__ = (Type rx)
  if (! (= __x0__ Object)) throw INTRINSIC_TypeError else {}
  app __x1__ = (ToString string)
  if (is-completion __x1__) if (= __x1__.Type CONST_normal) __x1__ = __x1__.Value else return __x1__ else {}
  let S = __x1__
  app __x2__ = (SpeciesConstructor rx INTRINSIC_RegExp)
  if (is-completion __x2__) if (= __x2__.Type CONST_normal) __x2__ = __x2__.Value else return __x2__ else {}
  let C = __x2__
  app __x3__ = (Get rx "flags")
  if (is-completion __x3__) if (= __x3__.Type CONST_normal) __x3__ = __x3__.Value else return __x3__ else {}
  app __x4__ = (ToString __x3__)
  if (is-completion __x4__) if (= __x4__.Type CONST_normal) __x4__ = __x4__.Value else return __x4__ else {}
  let flags = __x4__
  if (contains flags "u") let unicodeMatching = true else let unicodeMatching = false
  if (contains flags "y") let newFlags = flags else let newFlags = (+ flags "y")
  app __x5__ = (Construct C (new [rx, newFlags]))
  if (is-completion __x5__) if (= __x5__.Type CONST_normal) __x5__ = __x5__.Value else return __x5__ else {}
  let splitter = __x5__
  app __x6__ = (ArrayCreate 0i)
  if (is-completion __x6__) if (= __x6__.Type CONST_normal) __x6__ = __x6__.Value else return __x6__ else {}
  let A = __x6__
  let lengthA = 0i
  if (= limit undefined) let lim = (- (** 2.0 32i) 1i) else {
    app __x7__ = (ToUint32 limit)
    if (is-completion __x7__) if (= __x7__.Type CONST_normal) __x7__ = __x7__.Value else return __x7__ else {}
    let lim = __x7__
  }
  if (= lim 0i) {
    app __x8__ = (WrapCompletion A)
    return __x8__
  } else {}
  let size = S.length
  if (= size 0i) {
    app __x9__ = (RegExpExec splitter S)
    if (is-completion __x9__) if (= __x9__.Type CONST_normal) __x9__ = __x9__.Value else return __x9__ else {}
    let z = __x9__
    if (! (= z null)) {
      app __x10__ = (WrapCompletion A)
      return __x10__
    } else {}
    app __x11__ = (CreateDataPropertyOrThrow A "0" S)
    if (is-completion __x11__) if (= __x11__.Type CONST_normal) __x11__ = __x11__.Value else return __x11__ else {}
    __x11__
    app __x12__ = (WrapCompletion A)
    return __x12__
  } else {}
  let p = 0i
  let q = p
  while (< q size) {
    app __x13__ = (Set splitter "lastIndex" q true)
    if (is-completion __x13__) if (= __x13__.Type CONST_normal) __x13__ = __x13__.Value else return __x13__ else {}
    __x13__
    app __x14__ = (RegExpExec splitter S)
    if (is-completion __x14__) if (= __x14__.Type CONST_normal) __x14__ = __x14__.Value else return __x14__ else {}
    let z = __x14__
    if (= z null) {
      app __x15__ = (AdvanceStringIndex S q unicodeMatching)
      q = __x15__
    } else {
      app __x16__ = (Get splitter "lastIndex")
      if (is-completion __x16__) if (= __x16__.Type CONST_normal) __x16__ = __x16__.Value else return __x16__ else {}
      app __x17__ = (ToLength __x16__)
      if (is-completion __x17__) if (= __x17__.Type CONST_normal) __x17__ = __x17__.Value else return __x17__ else {}
      let e = __x17__
      app __x18__ = (min e size)
      e = __x18__
      if (== e p) {
        app __x19__ = (AdvanceStringIndex S q unicodeMatching)
        q = __x19__
      } else {
        let __x20__ = ""
        let __x21__ = p
        while (< __x21__ (+ q 1i)) {
          access __x22__ = (S __x21__)
          __x20__ = (+ __x20__ __x22__)
          __x21__ = (+ __x21__ 1i)
        }
        let T = __x20__
        app __x23__ = (ToString lengthA)
        if (is-completion __x23__) if (= __x23__.Type CONST_normal) __x23__ = __x23__.Value else return __x23__ else {}
        app __x24__ = (CreateDataPropertyOrThrow A __x23__ T)
        if (is-completion __x24__) if (= __x24__.Type CONST_normal) __x24__ = __x24__.Value else return __x24__ else {}
        __x24__
        lengthA = (+ lengthA 1i)
        if (== lengthA lim) {
          app __x25__ = (WrapCompletion A)
          return __x25__
        } else {}
        p = e
        app __x26__ = (LengthOfArrayLike z)
        if (is-completion __x26__) if (= __x26__.Type CONST_normal) __x26__ = __x26__.Value else return __x26__ else {}
        let numberOfCaptures = __x26__
        app __x27__ = (max (- numberOfCaptures 1i) 0i)
        numberOfCaptures = __x27__
        let i = 1i
        while (! (< numberOfCaptures i)) {
          app __x28__ = (ToString i)
          if (is-completion __x28__) if (= __x28__.Type CONST_normal) __x28__ = __x28__.Value else return __x28__ else {}
          app __x29__ = (Get z __x28__)
          if (is-completion __x29__) if (= __x29__.Type CONST_normal) __x29__ = __x29__.Value else return __x29__ else {}
          let nextCapture = __x29__
          app __x30__ = (ToString lengthA)
          if (is-completion __x30__) if (= __x30__.Type CONST_normal) __x30__ = __x30__.Value else return __x30__ else {}
          app __x31__ = (CreateDataPropertyOrThrow A __x30__ nextCapture)
          if (is-completion __x31__) if (= __x31__.Type CONST_normal) __x31__ = __x31__.Value else return __x31__ else {}
          __x31__
          i = (+ i 1i)
          lengthA = (+ lengthA 1i)
          if (== lengthA lim) {
            app __x32__ = (WrapCompletion A)
            return __x32__
          } else {}
        }
        q = p
      }
    }
  }
  let __x33__ = ""
  let __x34__ = p
  while (< __x34__ (+ size 1i)) {
    access __x35__ = (S __x34__)
    __x33__ = (+ __x33__ __x35__)
    __x34__ = (+ __x34__ 1i)
  }
  let T = __x33__
  app __x36__ = (ToString lengthA)
  if (is-completion __x36__) if (= __x36__.Type CONST_normal) __x36__ = __x36__.Value else return __x36__ else {}
  app __x37__ = (CreateDataPropertyOrThrow A __x36__ T)
  if (is-completion __x37__) if (= __x37__.Type CONST_normal) __x37__ = __x37__.Value else return __x37__ else {}
  __x37__
  app __x38__ = (WrapCompletion A)
  return __x38__
}