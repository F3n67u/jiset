{
  [0] app __x0__ = (Type value)
  [0] assert (= __x0__ String)
  [1] app __x1__ = (MakeBasicObject (new ["Prototype", "Extensible", "StringData"]))
  [1] if (is-completion __x1__) if (= __x1__.Type CONST_normal) __x1__ = __x1__.Value else return __x1__ else [15] {}
  [1] let S = __x1__
  [2] S.Prototype = prototype
  [3] S.StringData = value
  [4] ??? "Set id:{S} . [ [ GetOwnProperty ] ] as specified in link:{} ."
  [5] ??? "Set id:{S} . [ [ DefineOwnProperty ] ] as specified in link:{} ."
  [6] ??? "Set id:{S} . [ [ OwnPropertyKeys ] ] as specified in link:{} ."
  [7] let length = value.length
  [8] app __x2__ = (DefinePropertyOrThrow S "length" (new PropertyDescriptor("Value" -> length, "Writable" -> false, "Enumerable" -> false, "Configurable" -> false)))
  [8] if (is-completion __x2__) if (= __x2__.Type CONST_normal) __x2__ = __x2__.Value else return __x2__ else [15] {}
  [8] __x2__
  [9] app __x3__ = (WrapCompletion S)
  [9] return __x3__
}