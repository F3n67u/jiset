{
  app __x0__ = (Get holder key)
  let value = [? __x0__]
  if (= (typeof value) Object) {
    app __x1__ = (Get value "toJSON")
    let toJSON = [? __x1__]
    app __x2__ = (IsCallable toJSON)
    if (= __x2__ true) {
      app __x3__ = (Call toJSON value (new [key]))
      let value = [? __x3__]
    } else {}
  } else {}
  if (! (= ReplacerFunction undefined)) {
    app __x4__ = (Call ReplacerFunction holder (new [key, value]))
    let value = [? __x4__]
  } else {}
  if (= (typeof value) Object) if (! (= value.NumberData absent)) {
    app __x5__ = (ToNumber value)
    let value = [? __x5__]
  } else if (! (= value.StringData absent)) {
    app __x6__ = (ToString value)
    let value = [? __x6__]
  } else if (! (= value.BooleanData absent)) let value = value.BooleanData else {} else {}
  if (= value null) return "null" else {}
  if (= value true) return "true" else {}
  if (= value false) return "false" else {}
  if (= (typeof value) String) {
    app __x7__ = (QuoteJSONString value)
    return __x7__
  } else {}
  if (= (typeof value) Number) if (! (|| (= value Infinity) (= value -Infinity))) {
    app __x8__ = (ToString value)
    return [! __x8__]
  } else return "null" else {}
  let __x9__ = true
  __x9__ = (= (typeof value) Object)
  if __x9__ {
    app __x10__ = (IsCallable value)
    __x9__ = (= __x10__ false)
  } else {}
  if __x9__ {
    app __x11__ = (IsArray value)
    let isArray = [? __x11__]
    if (= isArray true) {
      app __x12__ = (SerializeJSONArray value)
      return [? __x12__]
    } else {
      app __x13__ = (SerializeJSONObject value)
      return [? __x13__]
    }
  } else {}
  return undefined
}