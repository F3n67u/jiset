digraph {
  node12843 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node12846 [shape=cds, label=<<font color="black">0:app __x0__ = (Type tv)</font>> color="black" fillcolor="white" style=filled]
  node12849 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">2:let t = __x1__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12853 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">3:return (+ (+ (+ __x2__ &quot; &quot;) __x3__) __x4__)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12845 [shape=cds, label=<<font color="black">app tv = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node12850 [shape=cds, label=<<font color="black">3:app __x2__ = (DateString t)</font>> color="black" fillcolor="white" style=filled]
  node12851 [shape=cds, label=<<font color="black">3:app __x3__ = (TimeString t)</font>> color="black" fillcolor="white" style=filled]
  node12848 [shape=cds, label=<<font color="black">2:app __x1__ = (LocalTime tv)</font>> color="black" fillcolor="white" style=filled]
  node12844 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node12852 [shape=cds, label=<<font color="black">3:app __x4__ = (TimeZoneString tv)</font>> color="black" fillcolor="white" style=filled]
  node12847 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:assert (= __x0__ Number)</td></tr>
      <tr><td align="left">1:??? &quot;If id:{tv} is value:{NaN} , return ` \&quot; Invalid Date \&quot; ` .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12845 -> node12846 [ color="black"]
  node12847 -> node12848 [ color="black"]
  node12850 -> node12851 [ color="black"]
  node12843 -> node12845 [ color="black"]
  node12849 -> node12850 [ color="black"]
  node12852 -> node12853 [ color="black"]
  node12853 -> node12844 [ color="black"]
  node12851 -> node12852 [ color="black"]
  node12848 -> node12849 [ color="black"]
  node12846 -> node12847 [ color="black"]
}
