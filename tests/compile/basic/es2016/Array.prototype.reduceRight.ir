{
  app __x0__ = (ToObject this)
  let O = [? __x0__]
  app __x1__ = (Get O "length")
  app __x2__ = (ToLength [? __x1__])
  let len = [? __x2__]
  app __x3__ = (IsCallable callbackfn)
  if (= __x3__ false) throw TypeError else {}
  if (&& (= len 0i) (= initialValue absent)) throw TypeError else {}
  let k = (- len 1i)
  if (! (= initialValue absent)) accumulator = initialValue else {
    let kPresent = false
    while (&& (= kPresent false) (! (< k 0i))) {
      app __x4__ = (ToString k)
      let Pk = [! __x4__]
      app __x5__ = (HasProperty O Pk)
      let kPresent = [? __x5__]
      if (= kPresent true) {
        app __x6__ = (Get O Pk)
        let accumulator = [? __x6__]
      } else {}
      k = (- k 1i)
    }
    if (= kPresent false) throw TypeError else {}
  }
  while (! (< k 0i)) {
    app __x7__ = (ToString k)
    let Pk = [! __x7__]
    app __x8__ = (HasProperty O Pk)
    let kPresent = [? __x8__]
    if (= kPresent true) {
      app __x9__ = (Get O Pk)
      let kValue = [? __x9__]
      app __x10__ = (Call callbackfn undefined (new [accumulator, kValue, k, O]))
      let accumulator = [? __x10__]
    } else {}
    k = (- k 1i)
  }
  return accumulator
}