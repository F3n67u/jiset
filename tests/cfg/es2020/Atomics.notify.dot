digraph {
  node17569 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">20:__x8__</td></tr>
      <tr><td align="left">21:return n</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17556 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">5:let c = __x3__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17560 [shape=cds, label=<<font color="black">13:app __x5__ = (EnterCriticalSection WL)</font>> color="black" fillcolor="white" style=filled]
  node17555 [shape=cds, label=<<font color="black">5:app __x3__ = (max intCount 0i)</font>> color="black" fillcolor="white" style=filled]
  node17567 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">18:__x7__</td></tr>
      <tr><td align="left">19:n = (+ n 1i)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17550 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">1:let i = [? __x1__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17568 [shape=cds, label=<<font color="black">20:app __x8__ = (LeaveCriticalSection WL)</font>> color="black" fillcolor="white" style=filled]
  node17554 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">4:let intCount = [? __x2__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17547 [shape=cds, label=<<font color="black">0:app __x0__ = (ValidateSharedIntegerTypedArray typedArray true)</font>> color="black" fillcolor="white" style=filled]
  node17558 [shape=cds, label=<<font color="black">11:app __x4__ = (GetWaiterList block indexedPosition)</font>> color="black" fillcolor="white" style=filled]
  node17552 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let c = Infinity</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17553 [shape=cds, label=<<font color="black">4:app __x2__ = (ToInteger count)</font>> color="black" fillcolor="white" style=filled]
  node17566 [shape=cds, label=<<font color="black">18:app __x7__ = (NotifyWaiter WL W)</font>> color="black" fillcolor="white" style=filled]
  node17549 [shape=cds, label=<<font color="black">1:app __x1__ = (ValidateAtomicAccess typedArray index)</font>> color="black" fillcolor="white" style=filled]
  node17545 [shape=cds, label=<<font color="black">app index = (GetArgument argumentsList 1i)</font>> color="black" fillcolor="white" style=filled]
  node17562 [shape=cds, label=<<font color="black">14:app __x6__ = (RemoveWaiters WL c)</font>> color="black" fillcolor="white" style=filled]
  node17546 [shape=cds, label=<<font color="black">app count = (GetArgument argumentsList 2i)</font>> color="black" fillcolor="white" style=filled]
  node17559 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">11:let WL = __x4__</td></tr>
      <tr><td align="left">12:let n = 0i</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17563 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">14:let S = __x6__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17542 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node17564 [shape=diamond, label=<<font color="black">(&lt; 0i S.length)</font>> color="black" fillcolor="white" style=filled]
  node17551 [shape=diamond, label=<<font color="black">(= count undefined)</font>> color="black" fillcolor="white" style=filled]
  node17543 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node17565 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">16:let W = S[0i]</td></tr>
      <tr><td align="left">17:(pop S 0i)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17544 [shape=cds, label=<<font color="black">app typedArray = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node17561 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">13:__x5__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17548 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let buffer = [? __x0__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17557 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">6:let block = buffer.ArrayBufferData</td></tr>
      <tr><td align="left">7:let offset = typedArray.ByteOffset</td></tr>
      <tr><td align="left">8:let arrayTypeName = typedArray.TypedArrayName</td></tr>
      <tr><td align="left">9:??? &quot;Let id:{elementSize} be the Element Size value specified in link:{unhandled: table-the-typedarray-constructors} for id:{arrayTypeName} .&quot;</td></tr>
      <tr><td align="left">10:let indexedPosition = (+ (* i elementSize) offset)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17553 -> node17554 [ color="black"]
  node17559 -> node17560 [ color="black"]
  node17547 -> node17548 [ color="black"]
  node17560 -> node17561 [ color="black"]
  node17557 -> node17558 [ color="black"]
  node17551 -> node17552 [label=<<font color="black">true</font>> color="black"]
  node17551 -> node17553 [label=<<font color="black">false</font>> color="black"]
  node17561 -> node17562 [ color="black"]
  node17556 -> node17557 [ color="black"]
  node17552 -> node17557 [ color="black"]
  node17569 -> node17543 [ color="black"]
  node17565 -> node17566 [ color="black"]
  node17549 -> node17550 [ color="black"]
  node17562 -> node17563 [ color="black"]
  node17558 -> node17559 [ color="black"]
  node17546 -> node17547 [ color="black"]
  node17567 -> node17564 [ color="black"]
  node17564 -> node17565 [label=<<font color="black">true</font>> color="black"]
  node17564 -> node17568 [label=<<font color="black">false</font>> color="black"]
  node17544 -> node17545 [ color="black"]
  node17568 -> node17569 [ color="black"]
  node17550 -> node17551 [ color="black"]
  node17548 -> node17549 [ color="black"]
  node17554 -> node17555 [ color="black"]
  node17563 -> node17564 [ color="black"]
  node17555 -> node17556 [ color="black"]
  node17545 -> node17546 [ color="black"]
  node17566 -> node17567 [ color="black"]
  node17542 -> node17544 [ color="black"]
}
