<algorithm>
  <param>scriptRecord</param>
  <step-list>
    <step>Let <id>globalEnv</id> be <id>scriptRecord</id> .[[Realm]].[[GlobalEnv]].</step>
    <step>Let <id>scriptCxt</id> be a new ECMAScript code execution context .</step>
    <step>Set the Function of <id>scriptCxt</id> to <value>null</value> .</step>
    <step>Set the Realm of <id>scriptCxt</id> to <id>scriptRecord</id> .[[Realm]].</step>
    <step>Set the ScriptOrModule of <id>scriptCxt</id> to <id>scriptRecord</id> .</step>
    <step>Set the VariableEnvironment of <id>scriptCxt</id> to <id>globalEnv</id> .</step>
    <step>Set the LexicalEnvironment of <id>scriptCxt</id> to <id>globalEnv</id> .</step>
    <step>Suspend the currently running execution context .</step>
    <step>Push <id>scriptCxt</id> on to the execution context stack ; <id>scriptCxt</id> is now the running execution context .</step>
    <step>Let <id>scriptBody</id> be <id>scriptRecord</id> .[[ECMAScriptCode]].</step>
    <step>Let <id>result</id> be GlobalDeclarationInstantiation ( <id>scriptBody</id> , <id>globalEnv</id> ).</step>
    <step>If <id>result</id> .[[Type]] is <value>normal</value> , then     <step-list>
      <step>Set <id>result</id> to the result of evaluating <id>scriptBody</id> .</step>
    </step-list></step>
    <step>If <id>result</id> .[[Type]] is <value>normal</value> and <id>result</id> .[[Value]] is <value>empty</value> , then     <step-list>
      <step>Set <id>result</id> to NormalCompletion ( <value>undefined</value> ).</step>
    </step-list></step>
    <step>Suspend  <id>scriptCxt</id> and remove it from the execution context stack .</step>
    <step>Assert : The execution context stack is not empty.</step>
    <step>Resume the context that is now on the top of the execution context stack as the running execution context .</step>
    <step>Return Completion ( <id>result</id> ).</step>
  </step-list>
</algorithm>