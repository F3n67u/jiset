digraph {
  node11731 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let __x2__ = true</td></tr>
      <tr><td align="left">__x2__ = (! (= func.SourceText absent))</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11728 [shape=cds, label=<<font color="black">2:app __x1__ = (Type func)</font>> color="black" fillcolor="white" style=filled]
  node11730 [shape=diamond, label=<<font color="black">__x0__</font>> color="black" fillcolor="white" style=filled]
  node11742 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return func.SourceText</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11725 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node11737 [shape=cds, label=<<font color="black">app __x5__ = (HostHasSourceTextAvailable func)</font>> color="black" fillcolor="white" style=filled]
  node11729 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">2:__x0__ = (= __x1__ Object)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11732 [shape=diamond, label=<<font color="black">__x2__</font>> color="black" fillcolor="white" style=filled]
  node11739 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">__x2__ = __x3__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11727 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let func = this</td></tr>
      <tr><td align="left">1:??? &quot;If id:{func} is a &lt; emu - xref href = \&quot; # sec - bound - function - exotic - objects \&quot; &gt; Bound Function exotic object &lt; / emu - xref &gt; or a &lt; emu - xref href = \&quot; # sec - built - in - function - objects \&quot; &gt; built - in function object &lt; / emu - xref &gt; , then return an implementation - dependent String source code representation of id:{func} . The representation must have the syntax of a nt:{NativeFunction} . Additionally , if id:{func} is a &lt; emu - xref href = \&quot; # sec - well - known - intrinsic - objects \&quot; &gt; Well - known Intrinsic Object &lt; / emu - xref &gt; and is not identified as an anonymous function , the portion of the returned String that would be matched by nt:{PropertyName} must be the initial value of the code:{name} property of id:{func} .&quot;</td></tr>
      <tr><td align="left">2:let __x0__ = true</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11741 [shape=diamond, label=<<font color="black">__x0__</font>> color="black" fillcolor="white" style=filled]
  node11740 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">__x0__ = __x2__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11736 [shape=diamond, label=<<font color="black">__x3__</font>> color="black" fillcolor="white" style=filled]
  node11734 [shape=cds, label=<<font color="black">app __x4__ = (Type func.SourceText)</font>> color="black" fillcolor="white" style=filled]
  node11735 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">__x3__ = (= __x4__ String)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11733 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let __x3__ = true</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11738 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">__x3__ = (= [! __x5__] true)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11743 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">3:??? &quot;If Type ( id:{func} ) is Object and IsCallable ( id:{func} ) is value:{true} , then return an implementation - dependent String source code representation of id:{func} . The representation must have the syntax of a nt:{NativeFunction} .&quot;</td></tr>
      <tr><td align="left">4:throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11726 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node11740 -> node11741 [ color="black"]
  node11727 -> node11728 [ color="black"]
  node11731 -> node11732 [ color="black"]
  node11730 -> node11731 [label=<<font color="black">true</font>> color="black"]
  node11730 -> node11741 [label=<<font color="black">false</font>> color="black"]
  node11736 -> node11737 [label=<<font color="black">true</font>> color="black"]
  node11736 -> node11739 [label=<<font color="black">false</font>> color="black"]
  node11739 -> node11740 [ color="black"]
  node11728 -> node11729 [ color="black"]
  node11725 -> node11727 [ color="black"]
  node11738 -> node11739 [ color="black"]
  node11741 -> node11742 [label=<<font color="black">true</font>> color="black"]
  node11741 -> node11743 [label=<<font color="black">false</font>> color="black"]
  node11734 -> node11735 [ color="black"]
  node11732 -> node11733 [label=<<font color="black">true</font>> color="black"]
  node11732 -> node11740 [label=<<font color="black">false</font>> color="black"]
  node11737 -> node11738 [ color="black"]
  node11735 -> node11736 [ color="black"]
  node11743 -> node11726 [ color="black"]
  node11729 -> node11730 [ color="black"]
  node11733 -> node11734 [ color="black"]
  node11742 -> node11743 [ color="black"]
}
