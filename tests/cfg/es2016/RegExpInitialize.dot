digraph {
  node12602 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">4:??? &quot;If id:{F} contains any code unit other than code:{\&quot;g\&quot;} , code:{\&quot;i\&quot;} , code:{\&quot;m\&quot;} , code:{\&quot;u\&quot;} , or code:{\&quot;y\&quot;} or if it contains the same code unit more than once , throw a value:{SyntaxError} exception .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12590 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node12603 [shape=diamond, label=<<font color="black">(contains F &quot;u&quot;)</font>> color="black" fillcolor="white" style=filled]
  node12600 [shape=cds, label=<<font color="black">app __x1__ = (ToString flags)</font>> color="black" fillcolor="white" style=filled]
  node12596 [shape=cds, label=<<font color="black">app __x0__ = (ToString pattern)</font>> color="black" fillcolor="white" style=filled]
  node12609 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">12:obj.OriginalSource = P</td></tr>
      <tr><td align="left">13:obj.OriginalFlags = F</td></tr>
      <tr><td align="left">14:??? &quot;Set id:{obj} ' s [ [ RegExpMatcher ] ] internal slot to the internal procedure that evaluates the above parse of id:{P} by applying the semantics provided in link:{unhandled: sec-pattern-semantics} using id:{patternCharacters} as the pattern ' s List of nt:{SourceCharacter} values and id:{F} as the flag parameters .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12592 [shape=cds, label=<<font color="black">app pattern = (GetArgument argumentsList 1i)</font>> color="black" fillcolor="white" style=filled]
  node12604 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let BMP = false</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12599 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let F = &quot;&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12595 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let P = &quot;&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12598 [shape=diamond, label=<<font color="black">(= flags undefined)</font>> color="black" fillcolor="white" style=filled]
  node12601 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let F = [? __x1__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12605 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let BMP = true</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12611 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">15:[? __x2__]</td></tr>
      <tr><td align="left">16:return obj</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12594 [shape=diamond, label=<<font color="black">(= pattern undefined)</font>> color="black" fillcolor="white" style=filled]
  node12597 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let P = [? __x0__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12607 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">7:??? &quot;Parse id:{P} using the grammars in link:{unhandled: sec-patterns} and interpreting each of its 16 - bit elements as a Unicode BMP code point . UTF - 16 decoding is not applied to the elements . The goal symbol for the parse is nt:{Pattern} . Throw a value:{SyntaxError} exception if id:{P} did not conform to the grammar , if any elements of id:{P} were not matched by the parse , or if any Early Error conditions exist .&quot;</td></tr>
      <tr><td align="left">8:??? &quot;Let id:{patternCharacters} be a List whose elements are the code unit elements of id:{P} .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12589 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node12606 [shape=diamond, label=<<font color="black">(= BMP true)</font>> color="black" fillcolor="white" style=filled]
  node12593 [shape=cds, label=<<font color="black">app flags = (GetArgument argumentsList 2i)</font>> color="black" fillcolor="white" style=filled]
  node12610 [shape=cds, label=<<font color="black">15:app __x2__ = (Set obj &quot;lastIndex&quot; 0i true)</font>> color="black" fillcolor="white" style=filled]
  node12591 [shape=cds, label=<<font color="black">app obj = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node12608 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">10:??? &quot;Parse id:{P} using the grammars in link:{unhandled: sec-patterns} and interpreting id:{P} as UTF - 16 encoded Unicode code points ( link:{unhandled: sec-ecmascript-language-types-string-type} ) . The goal symbol for the parse is nt:{Pattern[U]} . Throw a value:{SyntaxError} exception if id:{P} did not conform to the grammar , if any elements of id:{P} were not matched by the parse , or if any Early Error conditions exist .&quot;</td></tr>
      <tr><td align="left">11:??? &quot;Let id:{patternCharacters} be a List whose elements are the code points resulting from applying UTF - 16 decoding to id:{P} ' s sequence of elements .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12591 -> node12592 [ color="black"]
  node12610 -> node12611 [ color="black"]
  node12589 -> node12591 [ color="black"]
  node12601 -> node12602 [ color="black"]
  node12605 -> node12606 [ color="black"]
  node12594 -> node12595 [label=<<font color="black">true</font>> color="black"]
  node12594 -> node12596 [label=<<font color="black">false</font>> color="black"]
  node12598 -> node12599 [label=<<font color="black">true</font>> color="black"]
  node12598 -> node12600 [label=<<font color="black">false</font>> color="black"]
  node12608 -> node12609 [ color="black"]
  node12600 -> node12601 [ color="black"]
  node12593 -> node12594 [ color="black"]
  node12607 -> node12609 [ color="black"]
  node12603 -> node12604 [label=<<font color="black">true</font>> color="black"]
  node12603 -> node12605 [label=<<font color="black">false</font>> color="black"]
  node12609 -> node12610 [ color="black"]
  node12595 -> node12598 [ color="black"]
  node12611 -> node12590 [ color="black"]
  node12606 -> node12607 [label=<<font color="black">true</font>> color="black"]
  node12606 -> node12608 [label=<<font color="black">false</font>> color="black"]
  node12592 -> node12593 [ color="black"]
  node12597 -> node12598 [ color="black"]
  node12596 -> node12597 [ color="black"]
  node12602 -> node12603 [ color="black"]
  node12604 -> node12606 [ color="black"]
  node12599 -> node12602 [ color="black"]
}
