<algorithm>
  <step-list>
    <step>Let <id>generatorKind</id> be ! GetGeneratorKind ().</step>
    <step>Let <id>exprRef</id> be the result of evaluating AssignmentExpression .</step>
    <step>Let <id>value</id> be ? GetValue ( <id>exprRef</id> ).</step>
    <step>Let <id>iteratorRecord</id> be ? GetIterator ( <id>value</id> , <id>generatorKind</id> ).</step>
    <step>Let <id>iterator</id> be <id>iteratorRecord</id> .[[Iterator]].</step>
    <step>Let <id>received</id> be NormalCompletion ( <value>undefined</value> ).</step>
    <step>Repeat,     <step-list>
      <step>If <id>received</id> .[[Type]] is <value>normal</value> , then       <step-list>
        <step>Let <id>innerResult</id> be ? Call ( <id>iteratorRecord</id> .[[NextMethod]], <id>iteratorRecord</id> .[[Iterator]], « <id>received</id> .[[Value]] »).</step>
        <step>If <id>generatorKind</id> is <value>async</value> , then set <id>innerResult</id> to ? Await ( <id>innerResult</id> ).</step>
        <step>If Type ( <id>innerResult</id> ) is not Object, throw a <value>TypeError</value> exception.</step>
        <step>Let <id>done</id> be ? IteratorComplete ( <id>innerResult</id> ).</step>
        <step>If <id>done</id> is <value>true</value> , then         <step-list>
          <step>Return ? IteratorValue ( <id>innerResult</id> ).</step>
        </step-list></step>
        <step>If <id>generatorKind</id> is <value>async</value> , then set <id>received</id> to AsyncGeneratorYield (? IteratorValue ( <id>innerResult</id> )).</step>
        <step>Else, set <id>received</id> to GeneratorYield ( <id>innerResult</id> ).</step>
      </step-list></step>
      <step>Else if <id>received</id> .[[Type]] is <value>throw</value> , then       <step-list>
        <step>Let <id>throw</id> be ? GetMethod ( <id>iterator</id> , <value>"throw"</value> ).</step>
        <step>If <id>throw</id> is not <value>undefined</value> , then         <step-list>
          <step>Let <id>innerResult</id> be ? Call ( <id>throw</id> , <id>iterator</id> , « <id>received</id> .[[Value]] »).</step>
          <step>If <id>generatorKind</id> is <value>async</value> , then set <id>innerResult</id> to ? Await ( <id>innerResult</id> ).</step>
          <step>NOTE: Exceptions from the inner iterator <value>throw</value> method are propagated. Normal completions from an inner <value>throw</value> method are processed similarly to an inner <value>next</value> .</step>
          <step>If Type ( <id>innerResult</id> ) is not Object, throw a <value>TypeError</value> exception.</step>
          <step>Let <id>done</id> be ? IteratorComplete ( <id>innerResult</id> ).</step>
          <step>If <id>done</id> is <value>true</value> , then           <step-list>
            <step>Return ? IteratorValue ( <id>innerResult</id> ).</step>
          </step-list></step>
          <step>If <id>generatorKind</id> is <value>async</value> , then set <id>received</id> to AsyncGeneratorYield (? IteratorValue ( <id>innerResult</id> )).</step>
          <step>Else, set <id>received</id> to GeneratorYield ( <id>innerResult</id> ).</step>
        </step-list></step>
        <step>Else,         <step-list>
          <step>NOTE: If <id>iterator</id> does not have a <value>throw</value> method, this throw is going to terminate the <value>yield*</value> loop. But first we need to give <id>iterator</id> a chance to clean up.</step>
          <step>Let <id>closeCompletion</id> be Completion { [[Type]]: <value>normal</value> , [[Value]]: <value>empty</value> , [[Target]]: <value>empty</value> }.</step>
          <step>If <id>generatorKind</id> is <value>async</value> , perform ? AsyncIteratorClose ( <id>iteratorRecord</id> , <id>closeCompletion</id> ).</step>
          <step>Else, perform ? IteratorClose ( <id>iteratorRecord</id> , <id>closeCompletion</id> ).</step>
          <step>NOTE: The next step throws a <value>TypeError</value> to indicate that there was a <value>yield*</value> protocol violation: <id>iterator</id> does not have a <value>throw</value> method.</step>
          <step>Throw a <value>TypeError</value> exception.</step>
        </step-list></step>
      </step-list></step>
      <step>Else,       <step-list>
        <step>Assert : <id>received</id> .[[Type]] is <value>return</value> .</step>
        <step>Let <id>return</id> be ? GetMethod ( <id>iterator</id> , <value>"return"</value> ).</step>
        <step>If <id>return</id> is <value>undefined</value> , then         <step-list>
          <step>If <id>generatorKind</id> is <value>async</value> , then set <id>received</id> .[[Value]] to ? Await ( <id>received</id> .[[Value]]).</step>
          <step>Return Completion ( <id>received</id> ).</step>
        </step-list></step>
        <step>Let <id>innerReturnResult</id> be ? Call ( <id>return</id> , <id>iterator</id> , « <id>received</id> .[[Value]] »).</step>
        <step>If <id>generatorKind</id> is <value>async</value> , then set <id>innerReturnResult</id> to ? Await ( <id>innerReturnResult</id> ).</step>
        <step>If Type ( <id>innerReturnResult</id> ) is not Object, throw a <value>TypeError</value> exception.</step>
        <step>Let <id>done</id> be ? IteratorComplete ( <id>innerReturnResult</id> ).</step>
        <step>If <id>done</id> is <value>true</value> , then         <step-list>
          <step>Let <id>value</id> be ? IteratorValue ( <id>innerReturnResult</id> ).</step>
          <step>Return Completion { [[Type]]: <value>return</value> , [[Value]]: <id>value</id> , [[Target]]: <value>empty</value> }.</step>
        </step-list></step>
        <step>If <id>generatorKind</id> is <value>async</value> , then set <id>received</id> to AsyncGeneratorYield (? IteratorValue ( <id>innerReturnResult</id> )).</step>
        <step>Else, set <id>received</id> to GeneratorYield ( <id>innerReturnResult</id> ).</step>
      </step-list></step>
    </step-list></step>
  </step-list>
</algorithm>