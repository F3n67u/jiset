{
  app __x0__ = (GetArgument argumentsList 0i)
  let target = __x0__
  app __x1__ = (GetArgument argumentsList 1i)
  let source = __x1__
  app __x2__ = (GetArgument argumentsList 2i)
  let sourceLen = __x2__
  app __x3__ = (GetArgument argumentsList 3i)
  let start = __x3__
  app __x4__ = (GetArgument argumentsList 4i)
  let depth = __x4__
  app __x5__ = (GetArgument argumentsList 5i)
  let mapperFunction = __x5__
  app __x6__ = (GetArgument argumentsList 6i)
  let thisArg = __x6__
  assert (= (typeof target) Object)
  assert (= (typeof source) Object)
  app __x7__ = (IsNonNegativeInteger sourceLen)
  assert (= [! __x7__] true)
  app __x8__ = (IsNonNegativeInteger start)
  assert (= [! __x8__] true)
  app __x9__ = (IsInteger depth)
  assert (|| (= [! __x9__] true) (|| (= depth Infinity) (= depth -Infinity)))
  let targetIndex = start
  let sourceIndex = 0i
  while (< sourceIndex sourceLen) {
    app __x10__ = (ToString sourceIndex)
    let P = [! __x10__]
    app __x11__ = (HasProperty source P)
    let exists = [? __x11__]
    if (= exists true) {
      app __x12__ = (Get source P)
      let element = [? __x12__]
      if (! (= mapperFunction absent)) {
        app __x13__ = (Call mapperFunction thisArg (new [element, sourceIndex, source]))
        element = [? __x13__]
      } else {}
      let shouldFlatten = false
      if (< 0i depth) {
        app __x14__ = (IsArray element)
        shouldFlatten = [? __x14__]
      } else {}
      if (= shouldFlatten true) {
        app __x15__ = (LengthOfArrayLike element)
        let elementLen = [? __x15__]
        app __x16__ = (FlattenIntoArray target element elementLen targetIndex (- depth 1i))
        targetIndex = [? __x16__]
      } else {
        if (! (< targetIndex (- (** 2.0 53i) 1i))) throw TypeError else {}
        app __x17__ = (ToString targetIndex)
        app __x18__ = (CreateDataPropertyOrThrow target [! __x17__] element)
        [? __x18__]
        targetIndex = (+ targetIndex 1i)
      }
    } else {}
    sourceIndex = (+ sourceIndex 1i)
  }
  return targetIndex
}