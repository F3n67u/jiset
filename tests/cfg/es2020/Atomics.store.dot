digraph {
  node17830 [shape=cds, label=<<font color="black">0:app __x0__ = (ValidateSharedIntegerTypedArray typedArray)</font>> color="black" fillcolor="white" style=filled]
  node17835 [shape=cds, label=<<font color="black">app __x2__ = (ToBigInt value)</font>> color="black" fillcolor="white" style=filled]
  node17827 [shape=cds, label=<<font color="black">app typedArray = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node17825 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node17834 [shape=diamond, label=<<font color="black">(|| (= arrayTypeName &quot;BigUint64Array&quot;) (= arrayTypeName &quot;BigInt64Array&quot;))</font>> color="black" fillcolor="white" style=filled]
  node17837 [shape=cds, label=<<font color="black">app __x3__ = (ToInteger value)</font>> color="black" fillcolor="white" style=filled]
  node17828 [shape=cds, label=<<font color="black">app index = (GetArgument argumentsList 1i)</font>> color="black" fillcolor="white" style=filled]
  node17841 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">9:__x4__</td></tr>
      <tr><td align="left">10:return v</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17840 [shape=cds, label=<<font color="black">9:app __x4__ = (SetValueInBuffer buffer indexedPosition elementType v true CONST_SeqCst)</font>> color="black" fillcolor="white" style=filled]
  node17826 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node17833 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">1:let i = [? __x1__]</td></tr>
      <tr><td align="left">2:let arrayTypeName = typedArray.TypedArrayName</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17832 [shape=cds, label=<<font color="black">1:app __x1__ = (ValidateAtomicAccess typedArray index)</font>> color="black" fillcolor="white" style=filled]
  node17829 [shape=cds, label=<<font color="black">app value = (GetArgument argumentsList 2i)</font>> color="black" fillcolor="white" style=filled]
  node17831 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let buffer = [? __x0__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17838 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let v = [? __x3__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17839 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">5:??? &quot;Let id:{elementSize} be the Element Size value specified in link:{unhandled: table-the-typedarray-constructors} for id:{arrayTypeName} .&quot;</td></tr>
      <tr><td align="left">6:??? &quot;Let id:{elementType} be the Element Type value in link:{unhandled: table-the-typedarray-constructors} for id:{arrayTypeName} .&quot;</td></tr>
      <tr><td align="left">7:let offset = typedArray.ByteOffset</td></tr>
      <tr><td align="left">8:let indexedPosition = (+ (* i elementSize) offset)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17836 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let v = [? __x2__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node17834 -> node17835 [label=<<font color="black">true</font>> color="black"]
  node17834 -> node17837 [label=<<font color="black">false</font>> color="black"]
  node17838 -> node17839 [ color="black"]
  node17839 -> node17840 [ color="black"]
  node17836 -> node17839 [ color="black"]
  node17837 -> node17838 [ color="black"]
  node17827 -> node17828 [ color="black"]
  node17828 -> node17829 [ color="black"]
  node17831 -> node17832 [ color="black"]
  node17832 -> node17833 [ color="black"]
  node17841 -> node17826 [ color="black"]
  node17833 -> node17834 [ color="black"]
  node17830 -> node17831 [ color="black"]
  node17835 -> node17836 [ color="black"]
  node17825 -> node17827 [ color="black"]
  node17840 -> node17841 [ color="black"]
  node17829 -> node17830 [ color="black"]
}
