{
  [0] let module = this
  [1] let __x0__ = module.IndirectExportEntries
  [1] let __x1__ = 0i
  [1] while (< __x1__ __x0__.length) {
    let e = __x0__[__x1__]
    [2] app __x2__ = (module.ResolveExport module e.ExportName)
    [2] if (is-completion __x2__) if (= __x2__.Type CONST_normal) __x2__ = __x2__.Value else return __x2__ else [13] {}
    [2] let resolution = __x2__
    [3] if (|| (= resolution null) (= resolution "ambiguous")) {
      app __x3__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_SyntaxError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
      return __x3__
    } else [13] {}
    [4] assert (= (typeof resolution) "ResolvedBindingRecord")
    __x1__ = (+ __x1__ 1i)
  }
  [6] let realm = module.Realm
  [7] assert (! (= realm undefined))
  [8] app __x4__ = (NewModuleEnvironment realm.GlobalEnv)
  [8] let env = __x4__
  [9] module.Environment = env
  [10] let envRec = env.EnvironmentRecord
  [11] let __x5__ = module.ImportEntries
  [11] let __x6__ = 0i
  [11] while (< __x6__ __x5__.length) {
    let in = __x5__[__x6__]
    [12] app __x7__ = (HostResolveImportedModule module in.ModuleRequest)
    [12] if (is-completion __x7__) if (= __x7__.Type CONST_normal) __x7__ = __x7__.Value else return __x7__ else [13] {}
    [12] let importedModule = __x7__
    [14] ??? "If id:{in} . [ [ ImportName ] ] is value:{\"\\} \" * , then step-list:{...}"
    [18] ??? "Else , step-list:{...}"
    __x6__ = (+ __x6__ 1i)
  }
  [27] let moduleContext = (new ExecutionContext("SubMap" -> (new SubMap())))
  [28] moduleContext.Function = null
  [29] assert (! (= module.Realm undefined))
  [30] moduleContext.Realm = module.Realm
  [31] moduleContext.ScriptOrModule = module
  [32] moduleContext.VariableEnvironment = module.Environment
  [33] moduleContext.LexicalEnvironment = module.Environment
  [34] module.Context = moduleContext
  [35] append moduleContext -> GLOBAL_executionStack
  [35] GLOBAL_context = GLOBAL_executionStack[(- GLOBAL_executionStack.length 1i)]
  [36] let code = module.ECMAScriptCode
  [37] access __x8__ = (code "VarScopedDeclarations")
  [37] let varDeclarations = __x8__
  [38] let declaredVarNames = (new [])
  [39] let __x9__ = varDeclarations
  [39] let __x10__ = 0i
  [39] while (< __x10__ __x9__.length) {
    let d = __x9__[__x10__]
    [40] access __x11__ = (d "BoundNames")
    [40] let __x12__ = __x11__
    [40] let __x13__ = 0i
    [40] while (< __x13__ __x12__.length) {
      let dn = __x12__[__x13__]
      [41] if (! (contains declaredVarNames dn)) {
        [42] app __x14__ = (envRec.CreateMutableBinding envRec dn false)
        [42] if (is-completion __x14__) if (= __x14__.Type CONST_normal) __x14__ = __x14__.Value else return __x14__ else [13] {}
        [42] __x14__
        [43] app __x15__ = (envRec.InitializeBinding envRec dn undefined)
        [43] __x15__
        [44] append dn -> declaredVarNames
      } else [13] {}
      __x13__ = (+ __x13__ 1i)
    }
    __x10__ = (+ __x10__ 1i)
  }
  [45] access __x16__ = (code "LexicallyScopedDeclarations")
  [45] let lexDeclarations = __x16__
  [46] let __x17__ = lexDeclarations
  [46] let __x18__ = 0i
  [46] while (< __x18__ __x17__.length) {
    let d = __x17__[__x18__]
    [47] access __x19__ = (d "BoundNames")
    [47] let __x20__ = __x19__
    [47] let __x21__ = 0i
    [47] while (< __x21__ __x20__.length) {
      let dn = __x20__[__x21__]
      [50] access __x22__ = (d "IsConstantDeclaration")
      [50] if (= __x22__ true) {
        [49] app __x23__ = (envRec.CreateImmutableBinding envRec dn true)
        [49] if (is-completion __x23__) if (= __x23__.Type CONST_normal) __x23__ = __x23__.Value else return __x23__ else [13] {}
        [49] __x23__
      } else {
        [51] app __x24__ = (envRec.CreateMutableBinding envRec dn false)
        [51] if (is-completion __x24__) if (= __x24__.Type CONST_normal) __x24__ = __x24__.Value else return __x24__ else [13] {}
        [51] __x24__
      }
      [52] if (|| (|| (|| (is-instance-of d FunctionDeclaration) (is-instance-of d GeneratorDeclaration)) (is-instance-of d AsyncFunctionDeclaration)) (is-instance-of d AsyncGeneratorDeclaration)) {
        [53] access __x25__ = (d "InstantiateFunctionObject")
        [53] app __x26__ = (__x25__ env)
        [53] let fo = __x26__
        [54] app __x27__ = (envRec.InitializeBinding envRec dn fo)
        [54] __x27__
      } else [13] {}
      __x21__ = (+ __x21__ 1i)
    }
    __x18__ = (+ __x18__ 1i)
  }
  [55] ??? "Remove id:{moduleContext} from the execution context stack ."
  [56] app __x28__ = (NormalCompletion CONST_empty)
  [56] app __x29__ = (WrapCompletion __x28__)
  [56] return __x29__
}