{
  [0] if (is-completion V) if (= V.Type CONST_normal) V = V.Value else return V else [10] {}
  [0] V
  [1] app __x0__ = (Type V)
  [1] if (! (= __x0__ Reference)) {
    app __x1__ = (WrapCompletion V)
    return __x1__
  } else [10] {}
  [2] app __x2__ = (GetBase V)
  [2] let base = __x2__
  [3] app __x3__ = (IsUnresolvableReference V)
  [3] if (= __x3__ true) {
    app __x4__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_ReferenceError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
    return __x4__
  } else [10] {}
  [9] app __x5__ = (IsPropertyReference V)
  [9] if (= __x5__ true) {
    [5] app __x6__ = (HasPrimitiveBase V)
    [5] if (= __x6__ true) {
      [7] app __x7__ = (ToObject base)
      [7] if (is-completion __x7__) if (= __x7__.Type CONST_normal) __x7__ = __x7__.Value else return __x7__ else [10] {}
      [7] base = __x7__
    } else [10] {}
    [8] app __x8__ = (GetReferencedName V)
    [8] app __x9__ = (GetThisValue V)
    [8] app __x10__ = (base.Get base __x8__ __x9__)
    [8] if (is-completion __x10__) if (= __x10__.Type CONST_normal) __x10__ = __x10__.Value else return __x10__ else [10] {}
    [8] app __x11__ = (WrapCompletion __x10__)
    [8] return __x11__
  } else {
    [11] app __x12__ = (GetReferencedName V)
    [11] app __x13__ = (IsStrictReference V)
    [11] app __x14__ = (base.GetBindingValue base __x12__ __x13__)
    [11] if (is-completion __x14__) if (= __x14__.Type CONST_normal) __x14__ = __x14__.Value else return __x14__ else [10] {}
    [11] app __x15__ = (WrapCompletion __x14__)
    [11] return __x15__
  }
}