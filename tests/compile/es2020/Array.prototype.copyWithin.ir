{
  app target = (GetArgument argumentsList 0i)
  app start = (GetArgument argumentsList 1i)
  app end = (GetArgument argumentsList 2i)
  [0] app __x0__ = (ToObject this)
  [0] if (is-completion __x0__) if (= __x0__.Type CONST_normal) __x0__ = __x0__.Value else return __x0__ else [20] {}
  [0] let O = __x0__
  [1] app __x1__ = (LengthOfArrayLike O)
  [1] if (is-completion __x1__) if (= __x1__.Type CONST_normal) __x1__ = __x1__.Value else return __x1__ else [20] {}
  [1] let len = __x1__
  [2] app __x2__ = (ToInteger target)
  [2] if (is-completion __x2__) if (= __x2__.Type CONST_normal) __x2__ = __x2__.Value else return __x2__ else [20] {}
  [2] let relativeTarget = __x2__
  [3] if (< relativeTarget 0i) {
    app __x3__ = (max (+ len relativeTarget) 0i)
    let to = __x3__
  } else {
    app __x4__ = (min relativeTarget len)
    let to = __x4__
  }
  [4] app __x5__ = (ToInteger start)
  [4] if (is-completion __x5__) if (= __x5__.Type CONST_normal) __x5__ = __x5__.Value else return __x5__ else [20] {}
  [4] let relativeStart = __x5__
  [5] if (< relativeStart 0i) {
    app __x6__ = (max (+ len relativeStart) 0i)
    let from = __x6__
  } else {
    app __x7__ = (min relativeStart len)
    let from = __x7__
  }
  [6] if (= end undefined) let relativeEnd = len else {
    app __x8__ = (ToInteger end)
    if (is-completion __x8__) if (= __x8__.Type CONST_normal) __x8__ = __x8__.Value else return __x8__ else [20] {}
    let relativeEnd = __x8__
  }
  [7] if (< relativeEnd 0i) {
    app __x9__ = (max (+ len relativeEnd) 0i)
    let final = __x9__
  } else {
    app __x10__ = (min relativeEnd len)
    let final = __x10__
  }
  [8] app __x11__ = (min (- final from) (- len to))
  [8] let count = __x11__
  [13] if (&& (< from to) (< to (+ from count))) {
    [10] let direction = -1i
    [11] from = (- (+ from count) 1i)
    [12] to = (- (+ to count) 1i)
  } else let direction = 1i
  [15] while (< 0i count) {
    [16] app __x12__ = (ToString from)
    [16] if (is-completion __x12__) if (= __x12__.Type CONST_normal) __x12__ = __x12__.Value else return __x12__ else [20] {}
    [16] let fromKey = __x12__
    [17] app __x13__ = (ToString to)
    [17] if (is-completion __x13__) if (= __x13__.Type CONST_normal) __x13__ = __x13__.Value else return __x13__ else [20] {}
    [17] let toKey = __x13__
    [18] app __x14__ = (HasProperty O fromKey)
    [18] if (is-completion __x14__) if (= __x14__.Type CONST_normal) __x14__ = __x14__.Value else return __x14__ else [20] {}
    [18] let fromPresent = __x14__
    [22] if (= fromPresent true) {
      [20] app __x15__ = (Get O fromKey)
      [20] if (is-completion __x15__) if (= __x15__.Type CONST_normal) __x15__ = __x15__.Value else return __x15__ else [20] {}
      [20] let fromVal = __x15__
      [21] app __x16__ = (Set O toKey fromVal true)
      [21] if (is-completion __x16__) if (= __x16__.Type CONST_normal) __x16__ = __x16__.Value else return __x16__ else [20] {}
      [21] __x16__
    } else {
      [23] assert (= fromPresent false)
      [24] app __x17__ = (DeletePropertyOrThrow O toKey)
      [24] if (is-completion __x17__) if (= __x17__.Type CONST_normal) __x17__ = __x17__.Value else return __x17__ else [20] {}
      [24] __x17__
    }
    [25] from = (+ from direction)
    [26] to = (+ to direction)
    [27] count = (- count 1i)
  }
  [28] app __x18__ = (WrapCompletion O)
  [28] return __x18__
}