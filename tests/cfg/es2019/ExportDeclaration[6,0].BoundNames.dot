digraph {
  node10658 [shape=cds, label=<<font color="black">0:access __x0__ = (ClassDeclaration &quot;BoundNames&quot;)</font>> color="black" fillcolor="white" style=filled]
  node10662 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">2:return declarationNames</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10657 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node10661 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">append &quot;*default*&quot; -&gt; declarationNames</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10656 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node10660 [shape=diamond, label=<<font color="black">(! (contains declarationNames &quot;*default*&quot;))</font>> color="black" fillcolor="white" style=filled]
  node10659 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let declarationNames = __x0__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10662 -> node10657 [ color="black"]
  node10661 -> node10662 [ color="black"]
  node10659 -> node10660 [ color="black"]
  node10660 -> node10661 [label=<<font color="black">true</font>> color="black"]
  node10660 -> node10662 [label=<<font color="black">false</font>> color="black"]
  node10656 -> node10658 [ color="black"]
  node10658 -> node10659 [ color="black"]
}
