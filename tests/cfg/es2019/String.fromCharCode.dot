digraph {
  node12852 [shape=diamond, label=<<font color="black">(&lt; nextIndex length)</font>> color="black" fillcolor="white" style=filled]
  node12849 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node12853 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">5:let next = codeUnits[nextIndex]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12850 [shape=cds, label=<<font color="black">app codeUnits = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node12854 [shape=cds, label=<<font color="black">6:app __x0__ = (ToUint16 next)</font>> color="black" fillcolor="white" style=filled]
  node12856 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">9:??? &quot;Return the String value whose code units are , in order , the elements in the List id:{elements} . If id:{length} is 0 , the empty string is returned .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12851 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let codeUnits = argumentsList</td></tr>
      <tr><td align="left">1:let length = codeUnits.length</td></tr>
      <tr><td align="left">2:let elements = (new [])</td></tr>
      <tr><td align="left">3:let nextIndex = 0i</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12848 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node12855 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">6:let nextCU = [? __x0__]</td></tr>
      <tr><td align="left">7:append nextCU -&gt; elements</td></tr>
      <tr><td align="left">8:nextIndex = (+ nextIndex 1i)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12850 -> node12851 [ color="black"]
  node12856 -> node12849 [ color="black"]
  node12855 -> node12852 [ color="black"]
  node12851 -> node12852 [ color="black"]
  node12853 -> node12854 [ color="black"]
  node12848 -> node12850 [ color="black"]
  node12852 -> node12853 [label=<<font color="black">true</font>> color="black"]
  node12852 -> node12856 [label=<<font color="black">false</font>> color="black"]
  node12854 -> node12855 [ color="black"]
}
