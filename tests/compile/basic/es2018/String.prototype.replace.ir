{
  app __x0__ = (RequireObjectCoercible this)
  let O = [? __x0__]
  if (! (|| (= searchValue undefined) (= searchValue null))) {
    app __x1__ = (GetMethod searchValue SYMBOL_replace)
    let replacer = [? __x1__]
    if (! (= replacer undefined)) {
      app __x2__ = (Call replacer searchValue (new [O, replaceValue]))
      return [? __x2__]
    } else {}
  } else {}
  app __x3__ = (ToString O)
  let string = [? __x3__]
  app __x4__ = (ToString searchValue)
  let searchString = [? __x4__]
  app __x5__ = (IsCallable replaceValue)
  let functionalReplace = __x5__
  if (= functionalReplace false) {
    app __x6__ = (ToString replaceValue)
    let replaceValue = [? __x6__]
  } else {}
  ??? "Search id:{string} for the first occurrence of id:{searchString} and let id:{pos} be the index within id:{string} of the first code unit of the matched substring and let id:{matched} be id:{searchString} . If no occurrences of id:{searchString} were found , return id:{string} ."
  if (= functionalReplace true) {
    app __x7__ = (Call replaceValue undefined (new [matched, pos, string]))
    let replValue = [? __x7__]
    app __x8__ = (ToString replValue)
    let replStr = [? __x8__]
  } else {
    let captures = (new [])
    app __x9__ = (GetSubstitution matched string pos captures undefined replaceValue)
    let replStr = __x9__
  }
  let tailPos = (+ pos matched.length)
  ??? "Let id:{newString} be the string - concatenation of the first id:{pos} code units of id:{string} , id:{replStr} , and the trailing substring of id:{string} starting at index id:{tailPos} . If id:{pos} is 0 , the first element of the concatenation will be the empty String ."
  return newString
}