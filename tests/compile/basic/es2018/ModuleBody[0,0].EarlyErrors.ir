{
  access __x0__ = (ModuleItemList "LexicallyDeclaredNames")
  let __x1__ = __x0__
  let __x2__ = 0i
  let __x3__ = 0i
  let __x4__ = true
  while (< __x2__ __x1__.length) {
    __x3__ = (+ __x2__ 1i)
    while (< __x3__ __x1__.length) if (= __x1__[__x2__] __x1__[__x3__]) __x4__ = true else {}
  }
  if __x4__ {
    app __x5__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_SyntaxError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
    return __x5__
  } else {
    app __x6__ = (NormalCompletion undefined)
    return __x6__
  }
  access __x7__ = (ModuleItemList "LexicallyDeclaredNames")
  access __x8__ = (ModuleItemList "VarDeclaredNames")
  let __x9__ = __x7__
  let __x10__ = __x8__
  let __x11__ = 0i
  let __x12__ = 0i
  let __x13__ = false
  while (< __x11__ __x9__.length) {
    __x12__ = 0i
    while (< __x12__ __x10__.length) if (= __x9__[__x11__] __x10__[__x12__]) __x13__ = true else {}
  }
  if __x13__ {
    app __x14__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_SyntaxError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
    return __x14__
  } else {
    app __x15__ = (NormalCompletion undefined)
    return __x15__
  }
  access __x16__ = (ModuleItemList "ExportedNames")
  let __x17__ = __x16__
  let __x18__ = 0i
  let __x19__ = 0i
  let __x20__ = true
  while (< __x18__ __x17__.length) {
    __x19__ = (+ __x18__ 1i)
    while (< __x19__ __x17__.length) if (= __x17__[__x18__] __x17__[__x19__]) __x20__ = true else {}
  }
  if __x20__ {
    app __x21__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_SyntaxError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
    return __x21__
  } else {
    app __x22__ = (NormalCompletion undefined)
    return __x22__
  }
  ??? "It is a Syntax Error if any element of the ExportedBindings of nt:{ModuleItemList} does not also occur in either the VarDeclaredNames of nt:{ModuleItemList} , or the LexicallyDeclaredNames of nt:{ModuleItemList} ."
  if (contains ModuleItemList "super") {
    app __x23__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_SyntaxError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
    return __x23__
  } else {
    app __x24__ = (NormalCompletion undefined)
    return __x24__
  }
  access __x25__ = (ModuleItemList "Contains")
  app __x26__ = (__x25__ "NewTarget")
  if __x26__ {
    app __x27__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_SyntaxError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
    return __x27__
  } else {
    app __x28__ = (NormalCompletion undefined)
    return __x28__
  }
  access __x29__ = (ModuleItemList "ContainsDuplicateLabels")
  app __x30__ = (__x29__ (new []))
  if (= __x30__ true) {
    app __x31__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_SyntaxError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
    return __x31__
  } else {
    app __x32__ = (NormalCompletion undefined)
    return __x32__
  }
  access __x33__ = (ModuleItemList "ContainsUndefinedBreakTarget")
  app __x34__ = (__x33__ (new []))
  if (= __x34__ true) {
    app __x35__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_SyntaxError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
    return __x35__
  } else {
    app __x36__ = (NormalCompletion undefined)
    return __x36__
  }
  access __x37__ = (ModuleItemList "ContainsUndefinedContinueTarget")
  app __x38__ = (__x37__ (new []) (new []))
  if (= __x38__ true) {
    app __x39__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_SyntaxError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
    return __x39__
  } else {
    app __x40__ = (NormalCompletion undefined)
    return __x40__
  }
}