digraph {
  node0 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node5 [shape=cds, label=<<font color="black">5:app __x1__ = (IsAbruptCompletion result)</font>> color="black" fillcolor="white" style=filled]
  node10 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">10:assert (&amp;&amp; (= module.Status CONST_evaluated) (= module.EvaluationError result))</td></tr>
      <tr><td align="left">11:return result</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node1 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node6 [shape=diamond, label=<<font color="black">__x1__</font>> color="black" fillcolor="white" style=filled]
  node9 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let m = __x2__[__x3__]</td></tr>
      <tr><td align="left">7:assert (= m.Status CONST_evaluating)</td></tr>
      <tr><td align="left">8:m.Status = CONST_evaluated</td></tr>
      <tr><td align="left">9:m.EvaluationError = result</td></tr>
      <tr><td align="left">__x3__ = (+ __x3__ 1i)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node2 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">1:let module = this</td></tr>
      <tr><td align="left">2:assert (|| (= module.Status CONST_linked) (= module.Status CONST_evaluated))</td></tr>
      <tr><td align="left">3:let stack = (new [])</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node7 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">6:let __x2__ = stack</td></tr>
      <tr><td align="left">6:let __x3__ = 0i</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node3 [shape=cds, label=<<font color="black">4:app __x0__ = (InnerModuleEvaluation module stack 0i)</font>> color="black" fillcolor="white" style=filled]
  node11 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">12:assert (&amp;&amp; (= module.Status CONST_evaluated) (= module.EvaluationError undefined))</td></tr>
      <tr><td align="left">13:assert (= stack.length 0i)</td></tr>
      <tr><td align="left">14:return undefined</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node8 [shape=diamond, label=<<font color="black">(&lt; __x3__ __x2__.length)</font>> color="black" fillcolor="white" style=filled]
  node4 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">4:let result = __x0__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node7 -> node8 [ color="black"]
  node6 -> node7 [label=<<font color="black">true</font>> color="black"]
  node6 -> node11 [label=<<font color="black">false</font>> color="black"]
  node2 -> node3 [ color="black"]
  node0 -> node2 [ color="black"]
  node11 -> node1 [ color="black"]
  node10 -> node11 [ color="black"]
  node4 -> node5 [ color="black"]
  node8 -> node9 [label=<<font color="black">true</font>> color="black"]
  node8 -> node10 [label=<<font color="black">false</font>> color="black"]
  node9 -> node8 [ color="black"]
  node5 -> node6 [ color="black"]
  node3 -> node4 [ color="black"]
}
