digraph {
  node288 [shape=diamond, label=<<font color="black">(&lt; 0i count)</font>> color="black" fillcolor="white" style=filled]
  node289 [shape=diamond, label=<<font color="black">(= (typeof fromBlock) &quot;SharedDataBlock&quot;)</font>> color="black" fillcolor="white" style=filled]
  node293 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">toBlock[toIndex] = bytes[0i]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node292 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">append (new WriteSharedMemory(&quot;Order&quot; -&gt; &quot;Unordered&quot;, &quot;NoTear&quot; -&gt; true, &quot;Block&quot; -&gt; toBlock, &quot;ByteIndex&quot; -&gt; toIndex, &quot;ElementSize&quot; -&gt; 1i, &quot;Payload&quot; -&gt; bytes)) -&gt; eventList</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node285 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node296 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">24:return CONST_empty</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node295 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">22:toIndex = (+ toIndex 1i)</td></tr>
      <tr><td align="left">22:fromIndex = (+ fromIndex 1i)</td></tr>
      <tr><td align="left">23:count = (- count 1i)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node294 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">20:assert (! (= (typeof toBlock) &quot;SharedDataBlock&quot;))</td></tr>
      <tr><td align="left">21:toBlock[toIndex] = fromBlock[fromIndex]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node286 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node291 [shape=diamond, label=<<font color="black">(= (typeof toBlock) &quot;SharedDataBlock&quot;)</font>> color="black" fillcolor="white" style=filled]
  node290 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">8:let execution = GLOBAL_agent.CandidateExecution</td></tr>
      <tr><td align="left">9:??? &quot;Let id:{eventList} be the [ [ EventList ] ] field of the element in id:{execution} . [ [ EventLists ] ] whose [ [ AgentSignifier ] ] is AgentSignifier ( ) .&quot;</td></tr>
      <tr><td align="left">10:??? &quot;Let id:{bytes} be a List of length 1 that contains a nondeterministically chosen byte value .&quot;</td></tr>
      <tr><td align="left">12:let readEvent = (new ReadSharedMemory(&quot;Order&quot; -&gt; &quot;Unordered&quot;, &quot;NoTear&quot; -&gt; true, &quot;Block&quot; -&gt; fromBlock, &quot;ByteIndex&quot; -&gt; fromIndex, &quot;ElementSize&quot; -&gt; 1i))</td></tr>
      <tr><td align="left">13:append readEvent -&gt; eventList</td></tr>
      <tr><td align="left">14:append (new ChosenValueRecord(&quot;Event&quot; -&gt; readEvent, &quot;ChosenValue&quot; -&gt; bytes)) -&gt; execution.ChosenValues</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node287 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">2:??? &quot;Let id:{fromSize} be the number of bytes in id:{fromBlock} .&quot;</td></tr>
      <tr><td align="left">3:assert (! (&lt; fromSize (+ fromIndex count)))</td></tr>
      <tr><td align="left">4:??? &quot;Let id:{toSize} be the number of bytes in id:{toBlock} .&quot;</td></tr>
      <tr><td align="left">5:assert (! (&lt; toSize (+ toIndex count)))</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node293 -> node295 [ color="black"]
  node292 -> node295 [ color="black"]
  node291 -> node292 [label=<<font color="black">true</font>> color="black"]
  node291 -> node293 [label=<<font color="black">false</font>> color="black"]
  node290 -> node291 [ color="black"]
  node288 -> node289 [label=<<font color="black">true</font>> color="black"]
  node288 -> node296 [label=<<font color="black">false</font>> color="black"]
  node295 -> node288 [ color="black"]
  node285 -> node287 [ color="black"]
  node289 -> node290 [label=<<font color="black">true</font>> color="black"]
  node289 -> node294 [label=<<font color="black">false</font>> color="black"]
  node294 -> node295 [ color="black"]
  node287 -> node288 [ color="black"]
  node296 -> node286 [ color="black"]
}
