{
  app __x0__ = (Get holder name)
  let val = [? __x0__]
  if (= (typeof val) Object) {
    app __x1__ = (IsArray val)
    let isArray = [? __x1__]
    if (= isArray true) {
      let I = 0i
      app __x2__ = (LengthOfArrayLike val)
      let len = [? __x2__]
      while (< I len) {
        app __x3__ = (ToString I)
        app __x4__ = (InternalizeJSONProperty val [! __x3__] reviver)
        let newElement = [? __x4__]
        if (= newElement undefined) {
          app __x5__ = (ToString I)
          app __x6__ = (val.Delete val [! __x5__])
          [? __x6__]
        } else {
          app __x7__ = (ToString I)
          app __x8__ = (CreateDataProperty val [! __x7__] newElement)
          [? __x8__]
        }
        I = (+ I 1i)
      }
    } else {
      app __x9__ = (EnumerableOwnPropertyNames val CONST_key)
      let keys = [? __x9__]
      let __x10__ = keys
      let __x11__ = 0i
      while (< __x11__ __x10__.length) {
        let P = __x10__[__x11__]
        app __x12__ = (InternalizeJSONProperty val P reviver)
        let newElement = [? __x12__]
        if (= newElement undefined) {
          app __x13__ = (val.Delete val P)
          [? __x13__]
        } else {
          app __x14__ = (CreateDataProperty val P newElement)
          [? __x14__]
        }
        __x11__ = (+ __x11__ 1i)
      }
    }
  } else {}
  app __x15__ = (Call reviver holder (new [name, val]))
  return [? __x15__]
}