<algorithm>
  <step-list>
    <step>If Type ( <id>x</id> ) is the same as Type ( <id>y</id> ), then     <step-list>
      <step>Return the result of performing Strict Equality Comparison  <id>x</id> === <id>y</id> .</step>
    </step-list></step>
    <step>If <id>x</id> is <value>null</value> and <id>y</id> is <value>undefined</value> , return <value>true</value> .</step>
    <step>If <id>x</id> is <value>undefined</value> and <id>y</id> is <value>null</value> , return <value>true</value> .</step>
    <step>If Type ( <id>x</id> ) is Number and Type ( <id>y</id> ) is String, return the result of the comparison <id>x</id> == ! ToNumber ( <id>y</id> ).</step>
    <step>If Type ( <id>x</id> ) is String and Type ( <id>y</id> ) is Number, return the result of the comparison ! ToNumber ( <id>x</id> ) == <id>y</id> .</step>
    <step>If Type ( <id>x</id> ) is Boolean, return the result of the comparison ! ToNumber ( <id>x</id> ) == <id>y</id> .</step>
    <step>If Type ( <id>y</id> ) is Boolean, return the result of the comparison <id>x</id> == ! ToNumber ( <id>y</id> ).</step>
    <step>If Type ( <id>x</id> ) is either String, Number, or Symbol and Type ( <id>y</id> ) is Object, return the result of the comparison <id>x</id> == ToPrimitive ( <id>y</id> ).</step>
    <step>If Type ( <id>x</id> ) is Object and Type ( <id>y</id> ) is either String, Number, or Symbol, return the result of the comparison ToPrimitive ( <id>x</id> ) == <id>y</id> .</step>
    <step>Return <value>false</value> .</step>
  </step-list>
</algorithm>