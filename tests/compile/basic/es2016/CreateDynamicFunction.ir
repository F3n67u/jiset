{
  if (= newTarget undefined) let newTarget = constructor else {}
  if (= kind "normal") {
    let goal = "FunctionBody"
    let parameterGoal = "FormalParameters"
    let fallbackProto = INTRINSIC_FunctionPrototype
  } else {
    let goal = "GeneratorBody"
    let parameterGoal = "FormalParameters[Yield]"
    let fallbackProto = INTRINSIC_Generator
  }
  let argCount = args.length
  let P = ""
  if (== argCount 0i) let bodyText = "" else if (== argCount 1i) let bodyText = args[0i] else {
    let firstArg = args[0i]
    app __x0__ = (ToString firstArg)
    let P = [? __x0__]
    let k = 1i
    while (< k (- argCount 1i)) {
      let nextArg = args[k]
      app __x1__ = (ToString nextArg)
      let nextArgString = [? __x1__]
      let P = (+ (+ P ",") nextArgString)
      k = (+ k 1i)
    }
    let bodyText = args[k]
  }
  app __x2__ = (ToString bodyText)
  let bodyText = [? __x2__]
  ??? "Let id:{parameters} be the result of parsing id:{P} , interpreted as UTF - 16 encoded Unicode text as described in link:{unhandled: sec-ecmascript-language-types-string-type} , using id:{parameterGoal} as the goal symbol . Throw a value:{SyntaxError} exception if the parse fails ."
  ??? "Let id:{body} be the result of parsing id:{bodyText} , interpreted as UTF - 16 encoded Unicode text as described in link:{unhandled: sec-ecmascript-language-types-string-type} , using id:{goal} as the goal symbol . Throw a value:{SyntaxError} exception if the parse fails ."
  if true let strict = true else let strict = false
  ??? "If any static semantics errors are detected for id:{parameters} or id:{body} , throw a value:{SyntaxError} or a value:{ReferenceError} exception , depending on the type of the error . If id:{strict} is value:{true} , the Early Error rules for grammar:{StrictFormalParameters0, [FormalParameters]} are applied . Parsing and early error detection may be interweaved in an implementation dependent manner ."
  let __x3__ = true
  access __x4__ = (body "ContainsUseStrict")
  __x3__ = (= __x4__ true)
  if __x3__ {
    access __x5__ = (parameters "IsSimpleParameterList")
    __x3__ = (= __x5__ false)
  } else {}
  if __x3__ throw SyntaxError else {}
  access __x6__ = (parameters "BoundNames")
  access __x7__ = (body "LexicallyDeclaredNames")
  let __x8__ = __x6__
  let __x9__ = __x7__
  let __x10__ = 0i
  let __x11__ = 0i
  let __x12__ = false
  while (< __x10__ __x8__.length) {
    __x11__ = 0i
    while (< __x11__ __x9__.length) if (= __x8__[__x10__] __x9__[__x11__]) __x12__ = true else {}
  }
  if __x12__ throw SyntaxError else {}
  access __x13__ = (__x13__ "Contains" "SuperCall")
  if (= __x13__ true) throw SyntaxError else {}
  access __x14__ = (__x14__ "Contains" "SuperCall")
  if (= __x14__ true) throw SyntaxError else {}
  access __x15__ = (__x15__ "Contains" "SuperProperty")
  if (= __x15__ true) throw SyntaxError else {}
  access __x16__ = (__x16__ "Contains" "SuperProperty")
  if (= __x16__ true) throw SyntaxError else {}
  if (= kind "generator") {
    access __x17__ = (__x17__ "Contains" "YieldExpression")
    if (= __x17__ true) throw SyntaxError else {}
  } else {}
  if (= strict true) {
    access __x18__ = (parameters "BoundNames")
    app __x19__ = (IsDuplicate __x18__)
    if __x19__ throw SyntaxError else {}
  } else {}
  app __x20__ = (GetPrototypeFromConstructor newTarget fallbackProto)
  let proto = [? __x20__]
  app __x21__ = (FunctionAllocate proto strict kind)
  let F = __x21__
  let realmF = F.Realm
  let scope = realmF.GlobalEnv
  app __x22__ = (FunctionInitialize F CONST_Normal parameters body scope)
  __x22__
  if (= kind "generator") {
    app __x23__ = (ObjectCreate INTRINSIC_GeneratorPrototype)
    let prototype = __x23__
    app __x24__ = (DefinePropertyOrThrow F "prototype" (new PropertyDescriptor("Value" -> prototype, "Writable" -> true, "Enumerable" -> false, "Configurable" -> false)))
    __x24__
  } else {
    app __x25__ = (MakeConstructor F)
    __x25__
  }
  app __x26__ = (SetFunctionName F "anonymous")
  __x26__
  return F
}