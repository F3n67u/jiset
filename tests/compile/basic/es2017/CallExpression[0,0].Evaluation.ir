{
  access __x0__ = (CoverCallExpressionAndAsyncArrowHead "CoveredCallExpression")
  let expr = __x0__
  access __x1__ = (expr "MemberExpression")
  let memberExpr = __x1__
  access __x2__ = (expr "Arguments")
  let arguments = __x2__
  access __x3__ = (memberExpr "Evaluation")
  let ref = __x3__
  app __x4__ = (GetValue ref)
  if (is-completion __x4__) if (= __x4__.Type CONST_normal) __x4__ = __x4__.Value else return __x4__ else {}
  let func = __x4__
  app __x5__ = (Type ref)
  let __x6__ = (= __x5__ Reference)
  if __x6__ {
    app __x7__ = (IsPropertyReference ref)
    let __x8__ = (= __x7__ false)
    if __x8__ {
      app __x9__ = (GetReferencedName ref)
      __x8__ = (= __x9__ "eval")
    } else {}
    __x6__ = __x8__
  } else {}
  if __x6__ {
    app __x10__ = (SameValue func INTRINSIC_eval)
    if (= __x10__ true) {
      app __x11__ = (ArgumentListEvaluation arguments)
      if (is-completion __x11__) if (= __x11__.Type CONST_normal) __x11__ = __x11__.Value else return __x11__ else {}
      let argList = __x11__
      if (= argList.length 0i) {
        app __x12__ = (WrapCompletion undefined)
        return __x12__
      } else {}
      let evalText = argList[0i]
      if true let strictCaller = true else let strictCaller = false
      let evalRealm = REALM
      app __x13__ = (HostEnsureCanCompileStrings evalRealm evalRealm)
      if (is-completion __x13__) if (= __x13__.Type CONST_normal) __x13__ = __x13__.Value else return __x13__ else {}
      __x13__
      app __x14__ = (PerformEval evalText evalRealm strictCaller true)
      if (is-completion __x14__) if (= __x14__.Type CONST_normal) __x14__ = __x14__.Value else return __x14__ else {}
      app __x15__ = (WrapCompletion __x14__)
      return __x15__
    } else {}
  } else {}
  app __x16__ = (Type ref)
  if (= __x16__ Reference) {
    app __x17__ = (IsPropertyReference ref)
    if (= __x17__ true) {
      app __x18__ = (GetThisValue ref)
      let thisValue = __x18__
    } else {
      app __x19__ = (GetBase ref)
      let refEnv = __x19__
      app __x20__ = (refEnv.WithBaseObject refEnv)
      let thisValue = __x20__
    }
  } else let thisValue = undefined
  let thisCall = this
  app __x21__ = (IsInTailPosition thisCall)
  let tailCall = __x21__
  app __x22__ = (EvaluateDirectCall func thisValue arguments tailCall)
  if (is-completion __x22__) if (= __x22__.Type CONST_normal) __x22__ = __x22__.Value else return __x22__ else {}
  app __x23__ = (WrapCompletion __x22__)
  return __x23__
}