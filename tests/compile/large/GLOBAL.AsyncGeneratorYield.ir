{
  app __x0__ = (GetArgument argumentsList 0i)
  let value = __x0__
  let genContext = GLOBAL_context
  let generator = genContext["Generator"]
  app __x1__ = (GetGeneratorKind )
  assert (= __x1__ CONST_async)
  app __x2__ = (Await value)
  if (is-completion __x2__) if (= __x2__["Type"] CONST_normal) __x2__ = __x2__["Value"] else return __x2__ else {}
  value = __x2__
  generator["AsyncGeneratorState"] = CONST_suspendedYield
  if (= GLOBAL_executionStack[(- GLOBAL_executionStack["length"] 1i)] genContext) {
    __x3__ = (- GLOBAL_executionStack["length"] 1i)
    (pop GLOBAL_executionStack __x3__)
  } else {}
  GLOBAL_context = GLOBAL_executionStack[(- GLOBAL_executionStack["length"] 1i)]
  ??? "Set the code evaluation state of id:{genContext} such that when evaluation is resumed with a Completion id:{resumptionValue} the following steps will be performed : step-list:{...}"
  app __x4__ = (AsyncGeneratorResolve generator value false)
  if (is-completion __x4__) if (= __x4__["Type"] CONST_normal) __x4__ = __x4__["Value"] else return __x4__ else {}
  app __x5__ = (WrapCompletion __x4__)
  return __x5__
}