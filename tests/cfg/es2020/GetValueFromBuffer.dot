digraph {
  node16982 [shape=cds, label=<<font color="black">0:app __x0__ = (IsDetachedBuffer arrayBuffer)</font>> color="black" fillcolor="white" style=filled]
  node16994 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let noTear = false</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16985 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">2:assert (= [! __x1__] true)</td></tr>
      <tr><td align="left">3:let block = arrayBuffer.ArrayBufferData</td></tr>
      <tr><td align="left">4:??? &quot;Let id:{elementSize} be the Element Size value specified in link:{unhandled: table-the-typedarray-constructors} for Element Type id:{type} .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16989 [shape=diamond, label=<<font color="black">__x3__</font>> color="black" fillcolor="white" style=filled]
  node17000 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">16:return __x5__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16981 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node16986 [shape=cds, label=<<font color="black">5:app __x2__ = (IsSharedArrayBuffer arrayBuffer)</font>> color="black" fillcolor="white" style=filled]
  node16987 [shape=diamond, label=<<font color="black">(= __x2__ true)</font>> color="black" fillcolor="white" style=filled]
  node16993 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let noTear = true</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16992 [shape=diamond, label=<<font color="black">__x3__</font>> color="black" fillcolor="white" style=filled]
  node16996 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">14:??? &quot;Else , let id:{rawValue} be a List of id:{elementSize} containing , in order , the id:{elementSize} sequence of bytes starting with id:{block} [ id:{byteIndex} ] .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16997 [shape=diamond, label=<<font color="black">(= isLittleEndian absent)</font>> color="black" fillcolor="white" style=filled]
  node16990 [shape=cds, label=<<font color="black">app __x4__ = (IsNoTearConfiguration type order)</font>> color="black" fillcolor="white" style=filled]
  node16984 [shape=cds, label=<<font color="black">2:app __x1__ = (IsNonNegativeInteger byteIndex)</font>> color="black" fillcolor="white" style=filled]
  node16999 [shape=cds, label=<<font color="black">16:app __x5__ = (RawBytesToNumeric type rawValue isLittleEndian)</font>> color="black" fillcolor="white" style=filled]
  node16980 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node16991 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">__x3__ = (= __x4__ true)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16998 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">isLittleEndian = GLOBAL_agent.LittleEndian</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16988 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">6:let execution = GLOBAL_agent.CandidateExecution</td></tr>
      <tr><td align="left">7:??? &quot;Let id:{eventList} be the [ [ EventList ] ] field of the element in id:{execution} . [ [ EventsRecords ] ] whose [ [ AgentSignifier ] ] is AgentSignifier ( ) .&quot;</td></tr>
      <tr><td align="left">8:let __x3__ = true</td></tr>
      <tr><td align="left">8:__x3__ = (= isTypedArray true)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16995 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">9:??? &quot;Let id:{rawValue} be a List of length id:{elementSize} of nondeterministically chosen byte values .&quot;</td></tr>
      <tr><td align="left">11:let readEvent = (new ReadSharedMemory(&quot;Order&quot; -&gt; order, &quot;NoTear&quot; -&gt; noTear, &quot;Block&quot; -&gt; block, &quot;ByteIndex&quot; -&gt; byteIndex, &quot;ElementSize&quot; -&gt; elementSize))</td></tr>
      <tr><td align="left">12:append readEvent -&gt; eventList</td></tr>
      <tr><td align="left">13:append (new ChosenValueRecord(&quot;Event&quot; -&gt; readEvent, &quot;ChosenValue&quot; -&gt; rawValue)) -&gt; execution.ChosenValues</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16983 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:assert (= __x0__ false)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node16985 -> node16986 [ color="black"]
  node16983 -> node16984 [ color="black"]
  node16993 -> node16995 [ color="black"]
  node16984 -> node16985 [ color="black"]
  node16996 -> node16997 [ color="black"]
  node16999 -> node17000 [ color="black"]
  node16982 -> node16983 [ color="black"]
  node16987 -> node16988 [label=<<font color="black">true</font>> color="black"]
  node16987 -> node16996 [label=<<font color="black">false</font>> color="black"]
  node17000 -> node16981 [ color="black"]
  node16994 -> node16995 [ color="black"]
  node16995 -> node16996 [ color="black"]
  node16989 -> node16990 [label=<<font color="black">true</font>> color="black"]
  node16989 -> node16992 [label=<<font color="black">false</font>> color="black"]
  node16990 -> node16991 [ color="black"]
  node16980 -> node16982 [ color="black"]
  node16992 -> node16993 [label=<<font color="black">true</font>> color="black"]
  node16992 -> node16994 [label=<<font color="black">false</font>> color="black"]
  node16988 -> node16989 [ color="black"]
  node16986 -> node16987 [ color="black"]
  node16997 -> node16998 [label=<<font color="black">true</font>> color="black"]
  node16997 -> node16999 [label=<<font color="black">false</font>> color="black"]
  node16998 -> node16999 [ color="black"]
  node16991 -> node16992 [ color="black"]
}
