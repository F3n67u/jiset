{
  app __x0__ = (Get holder name)
  let val = [? __x0__]
  if (= (typeof val) Object) {
    app __x1__ = (IsArray val)
    let isArray = [? __x1__]
    if (= isArray true) {
      let I = 0i
      app __x2__ = (LengthOfArrayLike val)
      let len = [? __x2__]
      while (< I len) {
        app __x3__ = (ToString I)
        let prop = [! __x3__]
        app __x4__ = (InternalizeJSONProperty val prop reviver)
        let newElement = [? __x4__]
        if (= newElement undefined) {
          app __x5__ = (val.Delete val prop)
          [? __x5__]
        } else {
          app __x6__ = (CreateDataProperty val prop newElement)
          [? __x6__]
        }
        I = (+ I 1i)
      }
    } else {
      app __x7__ = (EnumerableOwnPropertyNames val CONST_key)
      let keys = [? __x7__]
      let __x8__ = keys
      let __x9__ = 0i
      while (< __x9__ __x8__.length) {
        let P = __x8__[__x9__]
        app __x10__ = (InternalizeJSONProperty val P reviver)
        let newElement = [? __x10__]
        if (= newElement undefined) {
          app __x11__ = (val.Delete val P)
          [? __x11__]
        } else {
          app __x12__ = (CreateDataProperty val P newElement)
          [? __x12__]
        }
        __x9__ = (+ __x9__ 1i)
      }
    }
  } else {}
  app __x13__ = (Call reviver holder (new [name, val]))
  return [? __x13__]
}