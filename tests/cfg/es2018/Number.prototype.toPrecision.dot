digraph {
  node11962 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">6:let s = &quot;-&quot;</td></tr>
      <tr><td align="left">7:let x = (- x)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11977 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">27:??? &quot;Let id:{d} be the String value consisting of the digits of the decimal representation of id:{e} ( in order , with no leading zeroes ) .&quot;</td></tr>
      <tr><td align="left">28:return (+ (+ (+ (+ s m) &quot;e&quot;) c) d)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11971 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">18:assert (! (== e 0i))</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11954 [shape=cds, label=<<font color="black">app __x1__ = (ToString x)</font>> color="black" fillcolor="white" style=filled]
  node11952 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let x = [? __x0__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11961 [shape=diamond, label=<<font color="black">(&lt; x 0i)</font>> color="black" fillcolor="white" style=filled]
  node11965 [shape=diamond, label=<<font color="black">(|| (&lt; p 1i) (&lt; 100i p))</font>> color="black" fillcolor="white" style=filled]
  node11972 [shape=diamond, label=<<font color="black">(! (== p 1i))</font>> color="black" fillcolor="white" style=filled]
  node11955 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return [! __x1__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11983 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">34:return (+ s m)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11979 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return (+ s m)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11964 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return (+ s &quot;Infinity&quot;)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11956 [shape=cds, label=<<font color="black">2:app __x2__ = (ToInteger precision)</font>> color="black" fillcolor="white" style=filled]
  node11978 [shape=diamond, label=<<font color="black">(== e (- p 1i))</font>> color="black" fillcolor="white" style=filled]
  node11963 [shape=diamond, label=<<font color="black">(== x Infinity)</font>> color="black" fillcolor="white" style=filled]
  node11982 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">??? &quot;Let id:{m} be the string - concatenation of the code unit 0x0030 ( DIGIT ZERO ) , the code unit 0x002E ( FULL STOP ) , - ( id:{e} + 1 ) occurrences of the code unit 0x0030 ( DIGIT ZERO ) , and the String id:{m} .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11949 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node11976 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">25:let c = &quot;-&quot;</td></tr>
      <tr><td align="left">26:let e = (- e)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11966 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw RangeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11981 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">??? &quot;Let id:{m} be the string - concatenation of the first id:{e} + 1 elements of id:{m} , the code unit 0x002E ( FULL STOP ) , and the remaining id:{p} - ( id:{e} + 1 ) elements of id:{m} .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11959 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return &quot;NaN&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11980 [shape=diamond, label=<<font color="black">(! (&lt; e 0i))</font>> color="black" fillcolor="white" style=filled]
  node11948 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node11951 [shape=cds, label=<<font color="black">0:app __x0__ = (thisNumberValue this)</font>> color="black" fillcolor="white" style=filled]
  node11968 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">12:??? &quot;Let id:{m} be the String value consisting of id:{p} occurrences of the code unit 0x0030 ( DIGIT ZERO ) .&quot;</td></tr>
      <tr><td align="left">13:let e = 0i</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11973 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">20:??? &quot;Let id:{a} be the first element of id:{m} , and let id:{b} be the remaining id:{p} - 1 elements of id:{m} .&quot;</td></tr>
      <tr><td align="left">21:let m = (+ (+ a &quot;.&quot;) b)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11974 [shape=diamond, label=<<font color="black">(&lt; 0i e)</font>> color="black" fillcolor="white" style=filled]
  node11969 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">15:??? &quot;Let id:{e} and id:{n} be integers such that 10 sup:{id:{p} - 1} &le; id:{n} &lt; 10 sup:{id:{p}} and for which the exact mathematical value of id:{n} &times; 10 sup:{id:{e} - id:{p} + 1} - id:{x} is as close to zero as possible . If there are two such sets of id:{e} and id:{n} , pick the id:{e} and id:{n} for which id:{n} &times; 10 sup:{id:{e} - id:{p} + 1} is larger .&quot;</td></tr>
      <tr><td align="left">16:??? &quot;Let id:{m} be the String value consisting of the digits of the decimal representation of id:{n} ( in order , with no leading zeroes ) .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11967 [shape=diamond, label=<<font color="black">(== x 0i)</font>> color="black" fillcolor="white" style=filled]
  node11957 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">2:let p = [? __x2__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11960 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">4:let s = &quot;&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11975 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let c = &quot;+&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node11970 [shape=diamond, label=<<font color="black">(|| (&lt; e -6i) (! (&lt; e p)))</font>> color="black" fillcolor="white" style=filled]
  node11950 [shape=cds, label=<<font color="black">app precision = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node11953 [shape=diamond, label=<<font color="black">(= precision undefined)</font>> color="black" fillcolor="white" style=filled]
  node11958 [shape=diamond, label=<<font color="black">(= x NaN)</font>> color="black" fillcolor="white" style=filled]
  node11961 -> node11962 [label=<<font color="black">true</font>> color="black"]
  node11961 -> node11963 [label=<<font color="black">false</font>> color="black"]
  node11965 -> node11966 [label=<<font color="black">true</font>> color="black"]
  node11965 -> node11967 [label=<<font color="black">false</font>> color="black"]
  node11953 -> node11954 [label=<<font color="black">true</font>> color="black"]
  node11953 -> node11956 [label=<<font color="black">false</font>> color="black"]
  node11951 -> node11952 [ color="black"]
  node11955 -> node11956 [ color="black"]
  node11952 -> node11953 [ color="black"]
  node11967 -> node11968 [label=<<font color="black">true</font>> color="black"]
  node11967 -> node11969 [label=<<font color="black">false</font>> color="black"]
  node11954 -> node11955 [ color="black"]
  node11950 -> node11951 [ color="black"]
  node11956 -> node11957 [ color="black"]
  node11948 -> node11950 [ color="black"]
  node11979 -> node11980 [ color="black"]
  node11980 -> node11981 [label=<<font color="black">true</font>> color="black"]
  node11980 -> node11982 [label=<<font color="black">false</font>> color="black"]
  node11968 -> node11978 [ color="black"]
  node11969 -> node11970 [ color="black"]
  node11959 -> node11960 [ color="black"]
  node11971 -> node11972 [ color="black"]
  node11977 -> node11978 [ color="black"]
  node11966 -> node11967 [ color="black"]
  node11978 -> node11979 [label=<<font color="black">true</font>> color="black"]
  node11978 -> node11980 [label=<<font color="black">false</font>> color="black"]
  node11962 -> node11963 [ color="black"]
  node11957 -> node11958 [ color="black"]
  node11976 -> node11977 [ color="black"]
  node11982 -> node11983 [ color="black"]
  node11963 -> node11964 [label=<<font color="black">true</font>> color="black"]
  node11963 -> node11965 [label=<<font color="black">false</font>> color="black"]
  node11972 -> node11973 [label=<<font color="black">true</font>> color="black"]
  node11972 -> node11974 [label=<<font color="black">false</font>> color="black"]
  node11958 -> node11959 [label=<<font color="black">true</font>> color="black"]
  node11958 -> node11960 [label=<<font color="black">false</font>> color="black"]
  node11983 -> node11949 [ color="black"]
  node11975 -> node11977 [ color="black"]
  node11960 -> node11961 [ color="black"]
  node11964 -> node11965 [ color="black"]
  node11974 -> node11975 [label=<<font color="black">true</font>> color="black"]
  node11974 -> node11976 [label=<<font color="black">false</font>> color="black"]
  node11981 -> node11983 [ color="black"]
  node11970 -> node11971 [label=<<font color="black">true</font>> color="black"]
  node11970 -> node11978 [label=<<font color="black">false</font>> color="black"]
  node11973 -> node11974 [ color="black"]
}
