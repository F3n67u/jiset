digraph {
  node0 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node5 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let hint = &quot;default&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node10 [shape=cds, label=<<font color="black">7:app __x2__ = (Call exoticToPrim input (new [hint]))</font>> color="black" fillcolor="white" style=filled]
  node14 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return result</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node20 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">12:return input</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node1 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node6 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">3:??? &quot;Else if id:{PreferredType} is hint String , let id:{hint} be code:{\&quot;string\&quot;} .&quot;</td></tr>
      <tr><td align="left">4:??? &quot;Else id:{PreferredType} is hint Number , let id:{hint} be code:{\&quot;number\&quot;} .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node9 [shape=diamond, label=<<font color="black">(! (= exoticToPrim undefined))</font>> color="black" fillcolor="white" style=filled]
  node13 [shape=diamond, label=<<font color="black">(! (= __x3__ Object))</font>> color="black" fillcolor="white" style=filled]
  node2 [shape=cds, label=<<font color="black">1:app __x0__ = (Type input)</font>> color="black" fillcolor="white" style=filled]
  node17 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">hint = &quot;number&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node12 [shape=cds, label=<<font color="black">8:app __x3__ = (Type result)</font>> color="black" fillcolor="white" style=filled]
  node7 [shape=cds, label=<<font color="black">5:app __x1__ = (GetMethod input SYMBOL_toPrimitive)</font>> color="black" fillcolor="white" style=filled]
  node3 [shape=diamond, label=<<font color="black">(= __x0__ Object)</font>> color="black" fillcolor="white" style=filled]
  node18 [shape=cds, label=<<font color="black">11:app __x4__ = (OrdinaryToPrimitive input hint)</font>> color="black" fillcolor="white" style=filled]
  node16 [shape=diamond, label=<<font color="black">(= hint &quot;default&quot;)</font>> color="black" fillcolor="white" style=filled]
  node11 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">7:let result = [? __x2__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node8 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">5:let exoticToPrim = [? __x1__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node19 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">11:return [? __x4__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node4 [shape=diamond, label=<<font color="black">(= PreferredType absent)</font>> color="black" fillcolor="white" style=filled]
  node15 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">9:throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node5 -> node6 [ color="black"]
  node13 -> node14 [label=<<font color="black">true</font>> color="black"]
  node13 -> node15 [label=<<font color="black">false</font>> color="black"]
  node11 -> node12 [ color="black"]
  node19 -> node20 [ color="black"]
  node12 -> node13 [ color="black"]
  node0 -> node2 [ color="black"]
  node6 -> node7 [ color="black"]
  node14 -> node15 [ color="black"]
  node4 -> node5 [label=<<font color="black">true</font>> color="black"]
  node4 -> node6 [label=<<font color="black">false</font>> color="black"]
  node3 -> node4 [label=<<font color="black">true</font>> color="black"]
  node3 -> node20 [label=<<font color="black">false</font>> color="black"]
  node17 -> node18 [ color="black"]
  node20 -> node1 [ color="black"]
  node7 -> node8 [ color="black"]
  node18 -> node19 [ color="black"]
  node2 -> node3 [ color="black"]
  node15 -> node16 [ color="black"]
  node10 -> node11 [ color="black"]
  node16 -> node17 [label=<<font color="black">true</font>> color="black"]
  node16 -> node18 [label=<<font color="black">false</font>> color="black"]
  node9 -> node10 [label=<<font color="black">true</font>> color="black"]
  node9 -> node16 [label=<<font color="black">false</font>> color="black"]
  node8 -> node9 [ color="black"]
}
