["If", {
  "id": "iteratorKind"
}, "is", "not", "present", ",", "set", {
  "id": "iteratorKind"
}, "to", {
  "const": "sync"
}, ".", {
  "k": 0
}, "Let", {
  "id": "oldEnv"
}, "be", "the", "running", "execution", "context", "'", "s", "LexicalEnvironment", ".", {
  "k": 1
}, "Let", {
  "id": "V"
}, "be", {
  "value": "undefined"
}, ".", {
  "k": 2
}, "Let", {
  "id": "destructuring"
}, "be", "IsDestructuring", "of", {
  "id": "lhs"
}, ".", {
  "k": 3
}, "If", {
  "id": "destructuring"
}, "is", {
  "value": "true"
}, "and", "if", {
  "id": "lhsKind"
}, "is", {
  "const": "assignment"
}, ",", "then", {
  "in": null
}, "Assert", ":", {
  "id": "lhs"
}, "is", "a", {
  "nt": "LeftHandSideExpression"
}, ".", "Let", {
  "id": "assignmentPattern"
}, "be", "the", {
  "nt": "AssignmentPattern"
}, "that", "is", "covered", "by", {
  "id": "lhs"
}, ".", {
  "out": null
}, {
  "k": 4
}, "Repeat", ",", {
  "in": null
}, "Let", {
  "id": "nextResult"
}, "be", "?", "Call", "(", {
  "id": "iteratorRecord"
}, ".", "[", "[", "NextMethod", "]", "]", ",", {
  "id": "iteratorRecord"
}, ".", "[", "[", "Iterator", "]", "]", ")", ".", "If", {
  "id": "iteratorKind"
}, "is", {
  "const": "async"
}, ",", "then", "set", {
  "id": "nextResult"
}, "to", "?", "Await", "(", {
  "id": "nextResult"
}, ")", ".", "If", "Type", "(", {
  "id": "nextResult"
}, ")", "is", "not", "Object", ",", "throw", "a", {
  "value": "TypeError"
}, "exception", ".", "Let", {
  "id": "done"
}, "be", "?", "IteratorComplete", "(", {
  "id": "nextResult"
}, ")", ".", "If", {
  "id": "done"
}, "is", {
  "value": "true"
}, ",", "return", "NormalCompletion", "(", {
  "id": "V"
}, ")", ".", "Let", {
  "id": "nextValue"
}, "be", "?", "IteratorValue", "(", {
  "id": "nextResult"
}, ")", ".", "If", {
  "id": "lhsKind"
}, "is", "either", {
  "const": "assignment"
}, "or", {
  "const": "varBinding"
}, ",", "then", {
  "in": null
}, "If", {
  "id": "destructuring"
}, "is", {
  "value": "false"
}, ",", "then", {
  "in": null
}, "Let", {
  "id": "lhsRef"
}, "be", "the", "result", "of", "evaluating", {
  "id": "lhs"
}, ".", "(", "It", "may", "be", "evaluated", "repeatedly", ".", ")", {
  "out": null
}, {
  "out": null
}, "Else", ",", {
  "in": null
}, "Assert", ":", {
  "id": "lhsKind"
}, "is", {
  "const": "lexicalBinding"
}, ".", "Assert", ":", {
  "id": "lhs"
}, "is", "a", {
  "nt": "ForDeclaration"
}, ".", "Let", {
  "id": "iterationEnv"
}, "be", "NewDeclarativeEnvironment", "(", {
  "id": "oldEnv"
}, ")", ".", "Perform", "BindingInstantiation", "for", {
  "id": "lhs"
}, "passing", {
  "id": "iterationEnv"
}, "as", "the", "argument", ".", "Set", "the", "running", "execution", "context", "'", "s", "LexicalEnvironment", "to", {
  "id": "iterationEnv"
}, ".", "If", {
  "id": "destructuring"
}, "is", {
  "value": "false"
}, ",", "then", {
  "in": null
}, "Assert", ":", {
  "id": "lhs"
}, "binds", "a", "single", "name", ".", "Let", {
  "id": "lhsName"
}, "be", "the", "sole", "element", "of", "BoundNames", "of", {
  "id": "lhs"
}, ".", "Let", {
  "id": "lhsRef"
}, "be", "!", "ResolveBinding", "(", {
  "id": "lhsName"
}, ")", ".", {
  "out": null
}, {
  "out": null
}, "If", {
  "id": "destructuring"
}, "is", {
  "value": "false"
}, ",", "then", {
  "in": null
}, "If", {
  "id": "lhsRef"
}, "is", "an", "abrupt", "completion", ",", "then", {
  "in": null
}, "Let", {
  "id": "status"
}, "be", {
  "id": "lhsRef"
}, ".", {
  "out": null
}, "Else", "if", {
  "id": "lhsKind"
}, "is", {
  "const": "lexicalBinding"
}, ",", "then", {
  "in": null
}, "Let", {
  "id": "status"
}, "be", "InitializeReferencedBinding", "(", {
  "id": "lhsRef"
}, ",", {
  "id": "nextValue"
}, ")", ".", {
  "out": null
}, "Else", ",", {
  "in": null
}, "Let", {
  "id": "status"
}, "be", "PutValue", "(", {
  "id": "lhsRef"
}, ",", {
  "id": "nextValue"
}, ")", ".", {
  "out": null
}, {
  "out": null
}, "Else", ",", {
  "in": null
}, "If", {
  "id": "lhsKind"
}, "is", {
  "const": "assignment"
}, ",", "then", {
  "in": null
}, "Let", {
  "id": "status"
}, "be", "DestructuringAssignmentEvaluation", "of", {
  "id": "assignmentPattern"
}, "with", "argument", {
  "id": "nextValue"
}, ".", {
  "out": null
}, "Else", "if", {
  "id": "lhsKind"
}, "is", {
  "const": "varBinding"
}, ",", "then", {
  "in": null
}, "Assert", ":", {
  "id": "lhs"
}, "is", "a", {
  "nt": "ForBinding"
}, ".", "Let", {
  "id": "status"
}, "be", "BindingInitialization", "of", {
  "id": "lhs"
}, "with", "arguments", {
  "id": "nextValue"
}, "and", {
  "value": "undefined"
}, ".", {
  "out": null
}, "Else", ",", {
  "in": null
}, "Assert", ":", {
  "id": "lhsKind"
}, "is", {
  "const": "lexicalBinding"
}, ".", "Assert", ":", {
  "id": "lhs"
}, "is", "a", {
  "nt": "ForDeclaration"
}, ".", "Let", {
  "id": "status"
}, "be", "BindingInitialization", "of", {
  "id": "lhs"
}, "with", "arguments", {
  "id": "nextValue"
}, "and", {
  "id": "iterationEnv"
}, ".", {
  "out": null
}, {
  "out": null
}, "If", {
  "id": "status"
}, "is", "an", "abrupt", "completion", ",", "then", {
  "in": null
}, "Set", "the", "running", "execution", "context", "'", "s", "LexicalEnvironment", "to", {
  "id": "oldEnv"
}, ".", "If", {
  "id": "iteratorKind"
}, "is", {
  "const": "async"
}, ",", "return", "?", "AsyncIteratorClose", "(", {
  "id": "iteratorRecord"
}, ",", {
  "id": "status"
}, ")", ".", "If", {
  "id": "iterationKind"
}, "is", {
  "const": "enumerate"
}, ",", "then", {
  "in": null
}, "Return", {
  "id": "status"
}, ".", {
  "out": null
}, "Else", ",", {
  "in": null
}, "Assert", ":", {
  "id": "iterationKind"
}, "is", {
  "const": "iterate"
}, ".", "Return", "?", "IteratorClose", "(", {
  "id": "iteratorRecord"
}, ",", {
  "id": "status"
}, ")", ".", {
  "out": null
}, {
  "out": null
}, "Let", {
  "id": "result"
}, "be", "the", "result", "of", "evaluating", {
  "id": "stmt"
}, ".", "Set", "the", "running", "execution", "context", "'", "s", "LexicalEnvironment", "to", {
  "id": "oldEnv"
}, ".", "If", "LoopContinues", "(", {
  "id": "result"
}, ",", {
  "id": "labelSet"
}, ")", "is", {
  "value": "false"
}, ",", "then", {
  "in": null
}, "If", {
  "id": "iterationKind"
}, "is", {
  "const": "enumerate"
}, ",", "then", {
  "in": null
}, "Return", "Completion", "(", "UpdateEmpty", "(", {
  "id": "result"
}, ",", {
  "id": "V"
}, ")", ")", ".", {
  "out": null
}, "Else", ",", {
  "in": null
}, "Assert", ":", {
  "id": "iterationKind"
}, "is", {
  "const": "iterate"
}, ".", "Set", {
  "id": "status"
}, "to", "UpdateEmpty", "(", {
  "id": "result"
}, ",", {
  "id": "V"
}, ")", ".", "If", {
  "id": "iteratorKind"
}, "is", {
  "const": "async"
}, ",", "return", "?", "AsyncIteratorClose", "(", {
  "id": "iteratorRecord"
}, ",", {
  "id": "status"
}, ")", ".", "Return", "?", "IteratorClose", "(", {
  "id": "iteratorRecord"
}, ",", {
  "id": "status"
}, ")", ".", {
  "out": null
}, {
  "out": null
}, "If", {
  "id": "result"
}, ".", "[", "[", "Value", "]", "]", "is", "not", {
  "const": "empty"
}, ",", "set", {
  "id": "V"
}, "to", {
  "id": "result"
}, ".", "[", "[", "Value", "]", "]", ".", {
  "out": null
}, {
  "k": 5
}]