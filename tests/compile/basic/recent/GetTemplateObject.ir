{
  let realm = REALM
  let templateRegistry = realm.TemplateMap
  let __x0__ = templateRegistry
  let __x1__ = 0i
  while (< __x1__ __x0__.length) {
    let e = __x0__[__x1__]
    ??? "If id:{e} . [ [ Site ] ] is the same Parse Node as id:{templateLiteral} , then in:{} out:{}"
    __x1__ = (+ __x1__ 1i)
  }
  access __x2__ = (templateLiteral "TemplateStrings")
  app __x3__ = (__x2__ true)
  let rawStrings = __x3__
  access __x4__ = (templateLiteral "TemplateStrings")
  app __x5__ = (__x4__ false)
  let cookedStrings = __x5__
  let count = cookedStrings.length
  assert (! (< (- (** 2.0 32i) 1i) count))
  app __x6__ = (ArrayCreate count)
  let template = [! __x6__]
  app __x7__ = (ArrayCreate count)
  let rawObj = [! __x7__]
  let index = 0i
  while (< index count) {
    app __x8__ = (ToString index)
    let prop = [! __x8__]
    let cookedValue = cookedStrings[index]
    app __x9__ = (DefinePropertyOrThrow template prop (new PropertyDescriptor("Value" -> cookedValue, "Writable" -> false, "Enumerable" -> true, "Configurable" -> false)))
    [! __x9__]
    let rawValue = rawStrings[index]
    app __x10__ = (DefinePropertyOrThrow rawObj prop (new PropertyDescriptor("Value" -> rawValue, "Writable" -> false, "Enumerable" -> true, "Configurable" -> false)))
    [! __x10__]
    index = (+ index 1i)
  }
  app __x11__ = (SetIntegrityLevel rawObj CONST_frozen)
  [! __x11__]
  app __x12__ = (DefinePropertyOrThrow template "raw" (new PropertyDescriptor("Value" -> rawObj, "Writable" -> false, "Enumerable" -> false, "Configurable" -> false)))
  [! __x12__]
  app __x13__ = (SetIntegrityLevel template CONST_frozen)
  [! __x13__]
  append (new Record("Site" -> templateLiteral, "Array" -> template)) -> templateRegistry
  return template
}