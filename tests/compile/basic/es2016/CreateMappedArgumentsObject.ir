{
  let len = argumentsList.length
  let obj = (new ArgumentsExoticObject("SubMap" -> (new SubMap()), "ParameterMap" -> undefined))
  obj.GetOwnProperty = ArgumentsExoticObjectDOTGetOwnProperty
  obj.DefineOwnProperty = ArgumentsExoticObjectDOTDefineOwnProperty
  obj.Get = ArgumentsExoticObjectDOTGet
  obj.Set = ArgumentsExoticObjectDOTSet
  obj.HasProperty = ArgumentsExoticObjectDOTHasProperty
  obj.Delete = ArgumentsExoticObjectDOTDelete
  obj.Prototype = INTRINSIC_ObjectPrototype
  obj.Extensible = true
  app __x0__ = (ObjectCreate null)
  let map = __x0__
  obj.ParameterMap = map
  access __x1__ = (formals "BoundNames")
  let parameterNames = __x1__
  let numberOfParameters = parameterNames.length
  let index = 0i
  while (< index len) {
    let val = argumentsList[index]
    app __x2__ = (ToString index)
    app __x3__ = (CreateDataProperty obj [! __x2__] val)
    __x3__
    let index = (+ index 1i)
  }
  app __x4__ = (DefinePropertyOrThrow obj "length" (new PropertyDescriptor("Value" -> len, "Writable" -> true, "Enumerable" -> false, "Configurable" -> true)))
  __x4__
  let mappedNames = (new [])
  let index = (- numberOfParameters 1i)
  while (! (< index 0i)) {
    let name = parameterNames[index]
    if (! (contains mappedNames name)) {
      append name -> mappedNames
      if (< index len) {
        app __x5__ = (MakeArgGetter name env)
        let g = __x5__
        app __x6__ = (MakeArgSetter name env)
        let p = __x6__
        app __x7__ = (ToString index)
        app __x8__ = (map.DefineOwnProperty map [! __x7__] (new PropertyDescriptor("Set" -> p, "Get" -> g, "Enumerable" -> false, "Configurable" -> true)))
        __x8__
      } else {}
    } else {}
    let index = (- index 1i)
  }
  ??? "Perform ! DefinePropertyOrThrow ( id:{obj} , @ @ iterator , PropertyDescriptor { [ [ Value ] ] : % ArrayProto _ values % , [ [ Writable ] ] : value:{true} , [ [ Enumerable ] ] : value:{false} , [ [ Configurable ] ] : value:{true} } ) ."
  app __x9__ = (DefinePropertyOrThrow obj "callee" (new PropertyDescriptor("Value" -> func, "Writable" -> true, "Enumerable" -> false, "Configurable" -> true)))
  [! __x9__]
  return obj
}