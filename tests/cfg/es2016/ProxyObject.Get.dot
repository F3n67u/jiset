digraph {
  node2844 [shape=cds, label=<<font color="black">8:app __x4__ = (Call trap handler (new [target, P, Receiver]))</font>> color="black" fillcolor="white" style=filled]
  node2833 [shape=cds, label=<<font color="black">0:app __x0__ = (IsPropertyKey P)</font>> color="black" fillcolor="white" style=filled]
  node2849 [shape=cds, label=<<font color="black">11:app __x6__ = (IsDataDescriptor targetDesc)</font>> color="black" fillcolor="white" style=filled]
  node2842 [shape=cds, label=<<font color="black">7:app __x3__ = (target.Get target P Receiver)</font>> color="black" fillcolor="white" style=filled]
  node2835 [shape=diamond, label=<<font color="black">(= handler null)</font>> color="black" fillcolor="white" style=filled]
  node2846 [shape=cds, label=<<font color="black">9:app __x5__ = (target.GetOwnProperty target P)</font>> color="black" fillcolor="white" style=filled]
  node2847 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">9:let targetDesc = [? __x5__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node2837 [shape=cds, label=<<font color="black">3:app __x1__ = (Type handler)</font>> color="black" fillcolor="white" style=filled]
  node2854 [shape=cds, label=<<font color="black">13:app __x8__ = (IsAccessorDescriptor targetDesc)</font>> color="black" fillcolor="white" style=filled]
  node2857 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node2852 [shape=diamond, label=<<font color="black">(= __x7__ false)</font>> color="black" fillcolor="white" style=filled]
  node2840 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">5:let trap = [? __x2__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node2841 [shape=diamond, label=<<font color="black">(= trap undefined)</font>> color="black" fillcolor="white" style=filled]
  node2858 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">15:return trapResult</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node2836 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node2845 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">8:let trapResult = [? __x4__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node2851 [shape=cds, label=<<font color="black">12:app __x7__ = (SameValue trapResult targetDesc.Value)</font>> color="black" fillcolor="white" style=filled]
  node2839 [shape=cds, label=<<font color="black">5:app __x2__ = (GetMethod handler &quot;get&quot;)</font>> color="black" fillcolor="white" style=filled]
  node2856 [shape=diamond, label=<<font color="black">(! (= trapResult undefined))</font>> color="black" fillcolor="white" style=filled]
  node2850 [shape=diamond, label=<<font color="black">(&amp;&amp; (= __x6__ true) (&amp;&amp; (= targetDesc.Configurable false) (= targetDesc.Writable false)))</font>> color="black" fillcolor="white" style=filled]
  node2831 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node2838 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">3:assert (= __x1__ Object)</td></tr>
      <tr><td align="left">4:let target = O.ProxyTarget</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node2843 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">7:return [? __x3__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node2848 [shape=diamond, label=<<font color="black">(! (= targetDesc undefined))</font>> color="black" fillcolor="white" style=filled]
  node2855 [shape=diamond, label=<<font color="black">(&amp;&amp; (= __x8__ true) (&amp;&amp; (= targetDesc.Configurable false) (= targetDesc.Get undefined)))</font>> color="black" fillcolor="white" style=filled]
  node2853 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node2832 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node2834 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:assert (= __x0__ true)</td></tr>
      <tr><td align="left">1:let handler = O.ProxyHandler</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node2851 -> node2852 [ color="black"]
  node2840 -> node2841 [ color="black"]
  node2835 -> node2836 [label=<<font color="black">true</font>> color="black"]
  node2835 -> node2837 [label=<<font color="black">false</font>> color="black"]
  node2847 -> node2848 [ color="black"]
  node2856 -> node2857 [label=<<font color="black">true</font>> color="black"]
  node2856 -> node2858 [label=<<font color="black">false</font>> color="black"]
  node2836 -> node2837 [ color="black"]
  node2844 -> node2845 [ color="black"]
  node2852 -> node2853 [label=<<font color="black">true</font>> color="black"]
  node2852 -> node2854 [label=<<font color="black">false</font>> color="black"]
  node2834 -> node2835 [ color="black"]
  node2846 -> node2847 [ color="black"]
  node2854 -> node2855 [ color="black"]
  node2858 -> node2832 [ color="black"]
  node2850 -> node2851 [label=<<font color="black">true</font>> color="black"]
  node2850 -> node2854 [label=<<font color="black">false</font>> color="black"]
  node2838 -> node2839 [ color="black"]
  node2842 -> node2843 [ color="black"]
  node2831 -> node2833 [ color="black"]
  node2839 -> node2840 [ color="black"]
  node2848 -> node2849 [label=<<font color="black">true</font>> color="black"]
  node2848 -> node2858 [label=<<font color="black">false</font>> color="black"]
  node2857 -> node2858 [ color="black"]
  node2837 -> node2838 [ color="black"]
  node2841 -> node2842 [label=<<font color="black">true</font>> color="black"]
  node2841 -> node2844 [label=<<font color="black">false</font>> color="black"]
  node2853 -> node2854 [ color="black"]
  node2845 -> node2846 [ color="black"]
  node2833 -> node2834 [ color="black"]
  node2855 -> node2856 [label=<<font color="black">true</font>> color="black"]
  node2855 -> node2858 [label=<<font color="black">false</font>> color="black"]
  node2843 -> node2844 [ color="black"]
  node2849 -> node2850 [ color="black"]
}
