var ESParse;(()=>{var e={1234:function(e,t){!function(e){"use strict";var t={3:"abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile",5:"class enum extends super const export import",6:"enum",strict:"implements interface let package private protected public static yield",strictBind:"eval arguments"},s="break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this",i={5:s,"5module":s+" export import",6:s+" const class extends export import super"},r=/^in(stanceof)?$/,n="ªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙՠ-ֈא-תׯ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࡠ-ࡪࢠ-ࢴࢶ-ࣇऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱৼਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡૹଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘ-ౚౠౡಀಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഄ-ഌഎ-ഐഒ-ഺഽൎൔ-ൖൟ-ൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄຆ-ຊຌ-ຣລວ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏽᏸ-ᏽᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡸᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᦰ-ᧉᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᲀ-ᲈᲐ-ᲺᲽ-Ჿᳩ-ᳬᳮ-ᳳᳵᳶᳺᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕ℘-ℝℤΩℨK-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞ々-〇〡-〩〱-〵〸-〼ぁ-ゖ゛-ゟァ-ヺー-ヿㄅ-ㄯㄱ-ㆎㆠ-ㆿㇰ-ㇿ㐀-䶿一-鿼ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꞿꟂ-ꟊꟵ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꣽꣾꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭩꭰ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜ",a="‌‍·̀-ͯ·҃-֑҇-ׇֽֿׁׂׅׄؐ-ًؚ-٩ٰۖ-ۜ۟-۪ۤۧۨ-ۭ۰-۹ܑܰ-݊ަ-ް߀-߉߫-߽߳ࠖ-࠙ࠛ-ࠣࠥ-ࠧࠩ-࡙࠭-࡛࣓-ࣣ࣡-ःऺ-़ा-ॏ॑-ॗॢॣ०-९ঁ-ঃ়া-ৄেৈো-্ৗৢৣ০-৯৾ਁ-ਃ਼ਾ-ੂੇੈੋ-੍ੑ੦-ੱੵઁ-ઃ઼ા-ૅે-ૉો-્ૢૣ૦-૯ૺ-૿ଁ-ଃ଼ା-ୄେୈୋ-୍୕-ୗୢୣ୦-୯ஂா-ூெ-ைொ-்ௗ௦-௯ఀ-ఄా-ౄె-ైొ-్ౕౖౢౣ౦-౯ಁ-ಃ಼ಾ-ೄೆ-ೈೊ-್ೕೖೢೣ೦-೯ഀ-ഃ഻഼ാ-ൄെ-ൈൊ-്ൗൢൣ൦-൯ඁ-ඃ්ා-ුූෘ-ෟ෦-෯ෲෳัิ-ฺ็-๎๐-๙ັິ-ຼ່-ໍ໐-໙༘༙༠-༩༹༵༷༾༿ཱ-྄྆྇ྍ-ྗྙ-ྼ࿆ါ-ှ၀-၉ၖ-ၙၞ-ၠၢ-ၤၧ-ၭၱ-ၴႂ-ႍႏ-ႝ፝-፟፩-፱ᜒ-᜔ᜲ-᜴ᝒᝓᝲᝳ឴-៓៝០-៩᠋-᠍᠐-᠙ᢩᤠ-ᤫᤰ-᤻᥆-᥏᧐-᧚ᨗ-ᨛᩕ-ᩞ᩠-᩿᩼-᪉᪐-᪙᪰-᪽ᪿᫀᬀ-ᬄ᬴-᭄᭐-᭙᭫-᭳ᮀ-ᮂᮡ-ᮭ᮰-᮹᯦-᯳ᰤ-᰷᱀-᱉᱐-᱙᳐-᳔᳒-᳨᳭᳴᳷-᳹᷀-᷹᷻-᷿‿⁀⁔⃐-⃥⃜⃡-⃰⳯-⵿⳱ⷠ-〪ⷿ-゙゚〯꘠-꘩꙯ꙴ-꙽ꚞꚟ꛰꛱ꠂ꠆ꠋꠣ-ꠧ꠬ꢀꢁꢴ-ꣅ꣐-꣙꣠-꣱ꣿ-꤉ꤦ-꤭ꥇ-꥓ꦀ-ꦃ꦳-꧀꧐-꧙ꧥ꧰-꧹ꨩ-ꨶꩃꩌꩍ꩐-꩙ꩻ-ꩽꪰꪲ-ꪴꪷꪸꪾ꪿꫁ꫫ-ꫯꫵ꫶ꯣ-ꯪ꯬꯭꯰-꯹ﬞ︀-️︠-︯︳︴﹍-﹏０-９＿",o=new RegExp("["+n+"]"),c=new RegExp("["+n+a+"]");n=a=null;var p=[0,11,2,25,2,18,2,1,2,14,3,13,35,122,70,52,268,28,4,48,48,31,14,29,6,37,11,29,3,35,5,7,2,4,43,157,19,35,5,35,5,39,9,51,157,310,10,21,11,7,153,5,3,0,2,43,2,1,4,0,3,22,11,22,10,30,66,18,2,1,11,21,11,25,71,55,7,1,65,0,16,3,2,2,2,28,43,28,4,28,36,7,2,27,28,53,11,21,11,18,14,17,111,72,56,50,14,50,14,35,349,41,7,1,79,28,11,0,9,21,107,20,28,22,13,52,76,44,33,24,27,35,30,0,3,0,9,34,4,0,13,47,15,3,22,0,2,0,36,17,2,24,85,6,2,0,2,3,2,14,2,9,8,46,39,7,3,1,3,21,2,6,2,1,2,4,4,0,19,0,13,4,159,52,19,3,21,2,31,47,21,1,2,0,185,46,42,3,37,47,21,0,60,42,14,0,72,26,230,43,117,63,32,7,3,0,3,7,2,1,2,23,16,0,2,0,95,7,3,38,17,0,2,0,29,0,11,39,8,0,22,0,12,45,20,0,35,56,264,8,2,36,18,0,50,29,113,6,2,1,2,37,22,0,26,5,2,1,2,31,15,0,328,18,190,0,80,921,103,110,18,195,2749,1070,4050,582,8634,568,8,30,114,29,19,47,17,3,32,20,6,18,689,63,129,74,6,0,67,12,65,1,2,0,29,6135,9,1237,43,8,8952,286,50,2,18,3,9,395,2309,106,6,12,4,8,8,9,5991,84,2,70,2,1,3,0,3,1,3,3,2,11,2,0,2,6,2,64,2,3,3,7,2,6,2,27,2,3,2,4,2,0,4,6,2,339,3,24,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,7,2357,44,11,6,17,0,370,43,1301,196,60,67,8,0,1205,3,2,26,2,1,2,0,3,0,2,9,2,3,2,0,2,0,7,0,5,0,2,0,2,0,2,2,2,1,2,0,3,0,2,0,2,0,2,0,2,0,2,1,2,0,3,3,2,6,2,3,2,3,2,0,2,9,2,16,6,2,2,4,2,16,4421,42717,35,4148,12,221,3,5761,15,7472,3104,541,1507,4938],h=[509,0,227,0,150,4,294,9,1368,2,2,1,6,3,41,2,5,0,166,1,574,3,9,9,370,1,154,10,176,2,54,14,32,9,16,3,46,10,54,9,7,2,37,13,2,9,6,1,45,0,13,2,49,13,9,3,2,11,83,11,7,0,161,11,6,9,7,3,56,1,2,6,3,1,3,2,10,0,11,1,3,6,4,4,193,17,10,9,5,0,82,19,13,9,214,6,3,8,28,1,83,16,16,9,82,12,9,9,84,14,5,9,243,14,166,9,71,5,2,1,3,3,2,0,2,1,13,9,120,6,3,6,4,0,29,9,41,6,2,3,9,0,10,10,47,15,406,7,2,7,17,9,57,21,2,13,123,5,4,0,2,1,2,6,2,0,9,9,49,4,2,1,2,4,9,9,330,3,19306,9,135,4,60,6,26,9,1014,0,2,54,8,3,82,0,12,1,19628,1,5319,4,4,5,9,7,3,6,31,3,149,2,1418,49,513,54,5,49,9,0,15,0,23,4,2,14,1361,6,2,16,3,6,2,1,2,4,262,6,10,9,419,13,1495,6,110,6,6,9,4759,9,787719,239];function l(e,t){for(var s=65536,i=0;i<t.length;i+=2){if((s+=t[i])>e)return!1;if((s+=t[i+1])>=e)return!0}}function u(e,t){return e<65?36===e:e<91||(e<97?95===e:e<123||(e<=65535?e>=170&&o.test(String.fromCharCode(e)):!1!==t&&l(e,p)))}function d(e,t){return e<48?36===e:e<58||!(e<65)&&(e<91||(e<97?95===e:e<123||(e<=65535?e>=170&&c.test(String.fromCharCode(e)):!1!==t&&(l(e,p)||l(e,h)))))}var f=function(e,t){void 0===t&&(t={}),this.label=e,this.keyword=t.keyword,this.beforeExpr=!!t.beforeExpr,this.startsExpr=!!t.startsExpr,this.isLoop=!!t.isLoop,this.isAssign=!!t.isAssign,this.prefix=!!t.prefix,this.postfix=!!t.postfix,this.binop=t.binop||null,this.updateContext=null};function x(e,t){return new f(e,{beforeExpr:!0,binop:t})}var m={beforeExpr:!0},g={startsExpr:!0},y={};function E(e,t){return void 0===t&&(t={}),t.keyword=e,y[e]=new f(e,t)}var w={num:new f("num",g),regexp:new f("regexp",g),string:new f("string",g),name:new f("name",g),privateId:new f("privateId",g),eof:new f("eof"),bracketL:new f("[",{beforeExpr:!0,startsExpr:!0}),bracketR:new f("]"),braceL:new f("{",{beforeExpr:!0,startsExpr:!0}),braceR:new f("}"),parenL:new f("(",{beforeExpr:!0,startsExpr:!0}),parenR:new f(")"),comma:new f(",",m),semi:new f(";",m),colon:new f(":",m),dot:new f("."),question:new f("?",m),questionDot:new f("?."),arrow:new f("=>",m),template:new f("template"),invalidTemplate:new f("invalidTemplate"),ellipsis:new f("...",m),backQuote:new f("`",g),dollarBraceL:new f("${",{beforeExpr:!0,startsExpr:!0}),eq:new f("=",{beforeExpr:!0,isAssign:!0}),assign:new f("_=",{beforeExpr:!0,isAssign:!0}),incDec:new f("++/--",{prefix:!0,postfix:!0,startsExpr:!0}),prefix:new f("!/~",{beforeExpr:!0,prefix:!0,startsExpr:!0}),logicalOR:x("||",1),logicalAND:x("&&",2),bitwiseOR:x("|",3),bitwiseXOR:x("^",4),bitwiseAND:x("&",5),equality:x("==/!=/===/!==",6),relational:x("</>/<=/>=",7),bitShift:x("<</>>/>>>",8),plusMin:new f("+/-",{beforeExpr:!0,binop:9,prefix:!0,startsExpr:!0}),modulo:x("%",10),star:x("*",10),slash:x("/",10),starstar:new f("**",{beforeExpr:!0}),coalesce:x("??",1),_break:E("break"),_case:E("case",m),_catch:E("catch"),_continue:E("continue"),_debugger:E("debugger"),_default:E("default",m),_do:E("do",{isLoop:!0,beforeExpr:!0}),_else:E("else",m),_finally:E("finally"),_for:E("for",{isLoop:!0}),_function:E("function",g),_if:E("if"),_return:E("return",m),_switch:E("switch"),_throw:E("throw",m),_try:E("try"),_var:E("var"),_const:E("const"),_while:E("while",{isLoop:!0}),_with:E("with"),_new:E("new",{beforeExpr:!0,startsExpr:!0}),_this:E("this",g),_super:E("super",g),_class:E("class",g),_extends:E("extends",m),_export:E("export"),_import:E("import",g),_null:E("null",g),_true:E("true",g),_false:E("false",g),_in:E("in",{beforeExpr:!0,binop:7}),_instanceof:E("instanceof",{beforeExpr:!0,binop:7}),_typeof:E("typeof",{beforeExpr:!0,prefix:!0,startsExpr:!0}),_void:E("void",{beforeExpr:!0,prefix:!0,startsExpr:!0}),_delete:E("delete",{beforeExpr:!0,prefix:!0,startsExpr:!0})},v=/\r\n?|\n|\u2028|\u2029/,b=new RegExp(v.source,"g");function k(e,t){return 10===e||13===e||!t&&(8232===e||8233===e)}var S=/[\u1680\u2000-\u200a\u202f\u205f\u3000\ufeff]/,C=/(?:\s|\/\/.*|\/\*[^]*?\*\/)*/g,P=Object.prototype,A=P.hasOwnProperty,_=P.toString;function T(e,t){return A.call(e,t)}var I=Array.isArray||function(e){return"[object Array]"===_.call(e)};function L(e){return new RegExp("^(?:"+e.replace(/ /g,"|")+")$")}var O=function(e,t){this.line=e,this.column=t};O.prototype.offset=function(e){return new O(this.line,this.column+e)};var N=function(e,t,s){this.start=t,this.end=s,null!==e.sourceFile&&(this.source=e.sourceFile)};function V(e,t){for(var s=1,i=0;;){b.lastIndex=i;var r=b.exec(e);if(!(r&&r.index<t))return new O(s,t-i);++s,i=r.index+r[0].length}}var D={ecmaVersion:null,sourceType:"script",onInsertedSemicolon:null,onTrailingComma:null,allowReserved:null,allowReturnOutsideFunction:!1,allowImportExportEverywhere:!1,allowAwaitOutsideFunction:null,allowHashBang:!1,locations:!1,onToken:null,onComment:null,ranges:!1,program:null,sourceFile:null,directSourceFile:null,preserveParens:!1},B=!1;function R(e){var t={};for(var s in D)t[s]=e&&T(e,s)?e[s]:D[s];if("latest"===t.ecmaVersion?t.ecmaVersion=1e8:null==t.ecmaVersion?(!B&&"object"==typeof console&&console.warn&&(B=!0,console.warn("Since Acorn 8.0.0, options.ecmaVersion is required.\nDefaulting to 2020, but this will stop working in the future.")),t.ecmaVersion=11):t.ecmaVersion>=2015&&(t.ecmaVersion-=2009),null==t.allowReserved&&(t.allowReserved=t.ecmaVersion<5),null==t.allowAwaitOutsideFunction&&(t.allowAwaitOutsideFunction=t.ecmaVersion>=13),I(t.onToken)){var i=t.onToken;t.onToken=function(e){return i.push(e)}}return I(t.onComment)&&(t.onComment=function(e,t){return function(s,i,r,n,a,o){var c={type:s?"Block":"Line",value:i,start:r,end:n};e.locations&&(c.loc=new N(this,a,o)),e.ranges&&(c.range=[r,n]),t.push(c)}}(t,t.onComment)),t}function M(e,t){return 2|(e?4:0)|(t?8:0)}var F=function(e,s,r){this.options=e=R(e),this.sourceFile=e.sourceFile,this.keywords=L(i[e.ecmaVersion>=6?6:"module"===e.sourceType?"5module":5]);var n="";!0!==e.allowReserved&&(n=t[e.ecmaVersion>=6?6:5===e.ecmaVersion?5:3],"module"===e.sourceType&&(n+=" await")),this.reservedWords=L(n);var a=(n?n+" ":"")+t.strict;this.reservedWordsStrict=L(a),this.reservedWordsStrictBind=L(a+" "+t.strictBind),this.input=String(s),this.containsEsc=!1,r?(this.pos=r,this.lineStart=this.input.lastIndexOf("\n",r-1)+1,this.curLine=this.input.slice(0,this.lineStart).split(v).length):(this.pos=this.lineStart=0,this.curLine=1),this.type=w.eof,this.value=null,this.start=this.end=this.pos,this.startLoc=this.endLoc=this.curPosition(),this.lastTokEndLoc=this.lastTokStartLoc=null,this.lastTokStart=this.lastTokEnd=this.pos,this.context=this.initialContext(),this.exprAllowed=!0,this.inModule="module"===e.sourceType,this.strict=this.inModule||this.strictDirective(this.pos),this.potentialArrowAt=-1,this.potentialArrowInForAwait=!1,this.yieldPos=this.awaitPos=this.awaitIdentPos=0,this.labels=[],this.undefinedExports=Object.create(null),0===this.pos&&e.allowHashBang&&"#!"===this.input.slice(0,2)&&this.skipLineComment(2),this.scopeStack=[],this.enterScope(1),this.regexpState=null,this.privateNameStack=[]},U={inFunction:{configurable:!0},inGenerator:{configurable:!0},inAsync:{configurable:!0},allowSuper:{configurable:!0},allowDirectSuper:{configurable:!0},treatFunctionsAsVar:{configurable:!0},inNonArrowFunction:{configurable:!0}};F.prototype.parse=function(){var e=this.options.program||this.startNode();return this.nextToken(),this.parseTopLevel(e)},U.inFunction.get=function(){return(2&this.currentVarScope().flags)>0},U.inGenerator.get=function(){return(8&this.currentVarScope().flags)>0&&!this.currentVarScope().inClassFieldInit},U.inAsync.get=function(){return(4&this.currentVarScope().flags)>0&&!this.currentVarScope().inClassFieldInit},U.allowSuper.get=function(){var e=this.currentThisScope(),t=e.flags,s=e.inClassFieldInit;return(64&t)>0||s},U.allowDirectSuper.get=function(){return(128&this.currentThisScope().flags)>0},U.treatFunctionsAsVar.get=function(){return this.treatFunctionsAsVarInScope(this.currentScope())},U.inNonArrowFunction.get=function(){var e=this.currentThisScope(),t=e.flags,s=e.inClassFieldInit;return(2&t)>0||s},F.extend=function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];for(var s=this,i=0;i<e.length;i++)s=e[i](s);return s},F.parse=function(e,t){return new this(t,e).parse()},F.parseExpressionAt=function(e,t,s){var i=new this(s,e,t);return i.nextToken(),i.parseExpression()},F.tokenizer=function(e,t){return new this(t,e)},Object.defineProperties(F.prototype,U);var j=F.prototype,q=/^(?:'((?:\\.|[^'\\])*?)'|"((?:\\.|[^"\\])*?)")/;function z(){this.shorthandAssign=this.trailingComma=this.parenthesizedAssign=this.parenthesizedBind=this.doubleProto=-1}j.strictDirective=function(e){for(;;){C.lastIndex=e,e+=C.exec(this.input)[0].length;var t=q.exec(this.input.slice(e));if(!t)return!1;if("use strict"===(t[1]||t[2])){C.lastIndex=e+t[0].length;var s=C.exec(this.input),i=s.index+s[0].length,r=this.input.charAt(i);return";"===r||"}"===r||v.test(s[0])&&!(/[(`.[+\-/*%<>=,?^&]/.test(r)||"!"===r&&"="===this.input.charAt(i+1))}e+=t[0].length,C.lastIndex=e,e+=C.exec(this.input)[0].length,";"===this.input[e]&&e++}},j.eat=function(e){return this.type===e&&(this.next(),!0)},j.isContextual=function(e){return this.type===w.name&&this.value===e&&!this.containsEsc},j.eatContextual=function(e){return!!this.isContextual(e)&&(this.next(),!0)},j.expectContextual=function(e){this.eatContextual(e)||this.unexpected()},j.canInsertSemicolon=function(){return this.type===w.eof||this.type===w.braceR||v.test(this.input.slice(this.lastTokEnd,this.start))},j.insertSemicolon=function(){if(this.canInsertSemicolon())return this.options.onInsertedSemicolon&&this.options.onInsertedSemicolon(this.lastTokEnd,this.lastTokEndLoc),!0},j.semicolon=function(){this.eat(w.semi)||this.insertSemicolon()||this.unexpected()},j.afterTrailingComma=function(e,t){if(this.type===e)return this.options.onTrailingComma&&this.options.onTrailingComma(this.lastTokStart,this.lastTokStartLoc),t||this.next(),!0},j.expect=function(e){this.eat(e)||this.unexpected()},j.unexpected=function(e){this.raise(null!=e?e:this.start,"Unexpected token")},j.checkPatternErrors=function(e,t){if(e){e.trailingComma>-1&&this.raiseRecoverable(e.trailingComma,"Comma is not permitted after the rest element");var s=t?e.parenthesizedAssign:e.parenthesizedBind;s>-1&&this.raiseRecoverable(s,"Parenthesized pattern")}},j.checkExpressionErrors=function(e,t){if(!e)return!1;var s=e.shorthandAssign,i=e.doubleProto;if(!t)return s>=0||i>=0;s>=0&&this.raise(s,"Shorthand property assignments are valid only in destructuring patterns"),i>=0&&this.raiseRecoverable(i,"Redefinition of __proto__ property")},j.checkYieldAwaitInDefaultParams=function(){this.yieldPos&&(!this.awaitPos||this.yieldPos<this.awaitPos)&&this.raise(this.yieldPos,"Yield expression cannot be a default value"),this.awaitPos&&this.raise(this.awaitPos,"Await expression cannot be a default value")},j.isSimpleAssignTarget=function(e){return"ParenthesizedExpression"===e.type?this.isSimpleAssignTarget(e.expression):"Identifier"===e.type||"MemberExpression"===e.type};var H=F.prototype;H.parseTopLevel=function(e){var t=Object.create(null);for(e.body||(e.body=[]);this.type!==w.eof;){var s=this.parseStatement(null,!0,t);e.body.push(s)}if(this.inModule)for(var i=0,r=Object.keys(this.undefinedExports);i<r.length;i+=1){var n=r[i];this.raiseRecoverable(this.undefinedExports[n].start,"Export '"+n+"' is not defined")}return this.adaptDirectivePrologue(e.body),this.next(),e.sourceType=this.options.sourceType,this.finishNode(e,"Program")};var G={kind:"loop"},W={kind:"switch"};H.isLet=function(e){if(this.options.ecmaVersion<6||!this.isContextual("let"))return!1;C.lastIndex=this.pos;var t=C.exec(this.input),s=this.pos+t[0].length,i=this.input.charCodeAt(s);if(91===i||92===i||i>55295&&i<56320)return!0;if(e)return!1;if(123===i)return!0;if(u(i,!0)){for(var n=s+1;d(i=this.input.charCodeAt(n),!0);)++n;if(92===i||i>55295&&i<56320)return!0;var a=this.input.slice(s,n);if(!r.test(a))return!0}return!1},H.isAsyncFunction=function(){if(this.options.ecmaVersion<8||!this.isContextual("async"))return!1;C.lastIndex=this.pos;var e,t=C.exec(this.input),s=this.pos+t[0].length;return!(v.test(this.input.slice(this.pos,s))||"function"!==this.input.slice(s,s+8)||s+8!==this.input.length&&(d(e=this.input.charCodeAt(s+8))||e>55295&&e<56320))},H.parseStatement=function(e,t,s){var i,r=this.type,n=this.startNode();switch(this.isLet(e)&&(r=w._var,i="let"),r){case w._break:case w._continue:return this.parseBreakContinueStatement(n,r.keyword);case w._debugger:return this.parseDebuggerStatement(n);case w._do:return this.parseDoStatement(n);case w._for:return this.parseForStatement(n);case w._function:return e&&(this.strict||"if"!==e&&"label"!==e)&&this.options.ecmaVersion>=6&&this.unexpected(),this.parseFunctionStatement(n,!1,!e);case w._class:return e&&this.unexpected(),this.parseClass(n,!0);case w._if:return this.parseIfStatement(n);case w._return:return this.parseReturnStatement(n);case w._switch:return this.parseSwitchStatement(n);case w._throw:return this.parseThrowStatement(n);case w._try:return this.parseTryStatement(n);case w._const:case w._var:return i=i||this.value,e&&"var"!==i&&this.unexpected(),this.parseVarStatement(n,i);case w._while:return this.parseWhileStatement(n);case w._with:return this.parseWithStatement(n);case w.braceL:return this.parseBlock(!0,n);case w.semi:return this.parseEmptyStatement(n);case w._export:case w._import:if(this.options.ecmaVersion>10&&r===w._import){C.lastIndex=this.pos;var a=C.exec(this.input),o=this.pos+a[0].length,c=this.input.charCodeAt(o);if(40===c||46===c)return this.parseExpressionStatement(n,this.parseExpression())}return this.options.allowImportExportEverywhere||(t||this.raise(this.start,"'import' and 'export' may only appear at the top level"),this.inModule||this.raise(this.start,"'import' and 'export' may appear only with 'sourceType: module'")),r===w._import?this.parseImport(n):this.parseExport(n,s);default:if(this.isAsyncFunction())return e&&this.unexpected(),this.next(),this.parseFunctionStatement(n,!0,!e);var p=this.value,h=this.parseExpression();return r===w.name&&"Identifier"===h.type&&this.eat(w.colon)?this.parseLabeledStatement(n,p,h,e):this.parseExpressionStatement(n,h)}},H.parseBreakContinueStatement=function(e,t){var s="break"===t;this.next(),this.eat(w.semi)||this.insertSemicolon()?e.label=null:this.type!==w.name?this.unexpected():(e.label=this.parseIdent(),this.semicolon());for(var i=0;i<this.labels.length;++i){var r=this.labels[i];if(null==e.label||r.name===e.label.name){if(null!=r.kind&&(s||"loop"===r.kind))break;if(e.label&&s)break}}return i===this.labels.length&&this.raise(e.start,"Unsyntactic "+t),this.finishNode(e,s?"BreakStatement":"ContinueStatement")},H.parseDebuggerStatement=function(e){return this.next(),this.semicolon(),this.finishNode(e,"DebuggerStatement")},H.parseDoStatement=function(e){return this.next(),this.labels.push(G),e.body=this.parseStatement("do"),this.labels.pop(),this.expect(w._while),e.test=this.parseParenExpression(),this.options.ecmaVersion>=6?this.eat(w.semi):this.semicolon(),this.finishNode(e,"DoWhileStatement")},H.parseForStatement=function(e){this.next();var t=this.options.ecmaVersion>=9&&(this.inAsync||!this.inFunction&&this.options.allowAwaitOutsideFunction)&&this.eatContextual("await")?this.lastTokStart:-1;if(this.labels.push(G),this.enterScope(0),this.expect(w.parenL),this.type===w.semi)return t>-1&&this.unexpected(t),this.parseFor(e,null);var s=this.isLet();if(this.type===w._var||this.type===w._const||s){var i=this.startNode(),r=s?"let":this.value;return this.next(),this.parseVar(i,!0,r),this.finishNode(i,"VariableDeclaration"),(this.type===w._in||this.options.ecmaVersion>=6&&this.isContextual("of"))&&1===i.declarations.length?(this.options.ecmaVersion>=9&&(this.type===w._in?t>-1&&this.unexpected(t):e.await=t>-1),this.parseForIn(e,i)):(t>-1&&this.unexpected(t),this.parseFor(e,i))}var n=new z,a=this.parseExpression(!(t>-1)||"await",n);return this.type===w._in||this.options.ecmaVersion>=6&&this.isContextual("of")?(this.options.ecmaVersion>=9&&(this.type===w._in?t>-1&&this.unexpected(t):e.await=t>-1),this.toAssignable(a,!1,n),this.checkLValPattern(a),this.parseForIn(e,a)):(this.checkExpressionErrors(n,!0),t>-1&&this.unexpected(t),this.parseFor(e,a))},H.parseFunctionStatement=function(e,t,s){return this.next(),this.parseFunction(e,Q|(s?0:K),!1,t)},H.parseIfStatement=function(e){return this.next(),e.test=this.parseParenExpression(),e.consequent=this.parseStatement("if"),e.alternate=this.eat(w._else)?this.parseStatement("if"):null,this.finishNode(e,"IfStatement")},H.parseReturnStatement=function(e){return this.inFunction||this.options.allowReturnOutsideFunction||this.raise(this.start,"'return' outside of function"),this.next(),this.eat(w.semi)||this.insertSemicolon()?e.argument=null:(e.argument=this.parseExpression(),this.semicolon()),this.finishNode(e,"ReturnStatement")},H.parseSwitchStatement=function(e){var t;this.next(),e.discriminant=this.parseParenExpression(),e.cases=[],this.expect(w.braceL),this.labels.push(W),this.enterScope(0);for(var s=!1;this.type!==w.braceR;)if(this.type===w._case||this.type===w._default){var i=this.type===w._case;t&&this.finishNode(t,"SwitchCase"),e.cases.push(t=this.startNode()),t.consequent=[],this.next(),i?t.test=this.parseExpression():(s&&this.raiseRecoverable(this.lastTokStart,"Multiple default clauses"),s=!0,t.test=null),this.expect(w.colon)}else t||this.unexpected(),t.consequent.push(this.parseStatement(null));return this.exitScope(),t&&this.finishNode(t,"SwitchCase"),this.next(),this.labels.pop(),this.finishNode(e,"SwitchStatement")},H.parseThrowStatement=function(e){return this.next(),v.test(this.input.slice(this.lastTokEnd,this.start))&&this.raise(this.lastTokEnd,"Illegal newline after throw"),e.argument=this.parseExpression(),this.semicolon(),this.finishNode(e,"ThrowStatement")};var $=[];H.parseTryStatement=function(e){if(this.next(),e.block=this.parseBlock(),e.handler=null,this.type===w._catch){var t=this.startNode();if(this.next(),this.eat(w.parenL)){t.param=this.parseBindingAtom();var s="Identifier"===t.param.type;this.enterScope(s?32:0),this.checkLValPattern(t.param,s?4:2),this.expect(w.parenR)}else this.options.ecmaVersion<10&&this.unexpected(),t.param=null,this.enterScope(0);t.body=this.parseBlock(!1),this.exitScope(),e.handler=this.finishNode(t,"CatchClause")}return e.finalizer=this.eat(w._finally)?this.parseBlock():null,e.handler||e.finalizer||this.raise(e.start,"Missing catch or finally clause"),this.finishNode(e,"TryStatement")},H.parseVarStatement=function(e,t){return this.next(),this.parseVar(e,!1,t),this.semicolon(),this.finishNode(e,"VariableDeclaration")},H.parseWhileStatement=function(e){return this.next(),e.test=this.parseParenExpression(),this.labels.push(G),e.body=this.parseStatement("while"),this.labels.pop(),this.finishNode(e,"WhileStatement")},H.parseWithStatement=function(e){return this.strict&&this.raise(this.start,"'with' in strict mode"),this.next(),e.object=this.parseParenExpression(),e.body=this.parseStatement("with"),this.finishNode(e,"WithStatement")},H.parseEmptyStatement=function(e){return this.next(),this.finishNode(e,"EmptyStatement")},H.parseLabeledStatement=function(e,t,s,i){for(var r=0,n=this.labels;r<n.length;r+=1)n[r].name===t&&this.raise(s.start,"Label '"+t+"' is already declared");for(var a=this.type.isLoop?"loop":this.type===w._switch?"switch":null,o=this.labels.length-1;o>=0;o--){var c=this.labels[o];if(c.statementStart!==e.start)break;c.statementStart=this.start,c.kind=a}return this.labels.push({name:t,kind:a,statementStart:this.start}),e.body=this.parseStatement(i?-1===i.indexOf("label")?i+"label":i:"label"),this.labels.pop(),e.label=s,this.finishNode(e,"LabeledStatement")},H.parseExpressionStatement=function(e,t){return e.expression=t,this.semicolon(),this.finishNode(e,"ExpressionStatement")},H.parseBlock=function(e,t,s){for(void 0===e&&(e=!0),void 0===t&&(t=this.startNode()),t.body=[],this.expect(w.braceL),e&&this.enterScope(0);this.type!==w.braceR;){var i=this.parseStatement(null);t.body.push(i)}return s&&(this.strict=!1),this.next(),e&&this.exitScope(),this.finishNode(t,"BlockStatement")},H.parseFor=function(e,t){return e.init=t,this.expect(w.semi),e.test=this.type===w.semi?null:this.parseExpression(),this.expect(w.semi),e.update=this.type===w.parenR?null:this.parseExpression(),this.expect(w.parenR),e.body=this.parseStatement("for"),this.exitScope(),this.labels.pop(),this.finishNode(e,"ForStatement")},H.parseForIn=function(e,t){var s=this.type===w._in;return this.next(),"VariableDeclaration"===t.type&&null!=t.declarations[0].init&&(!s||this.options.ecmaVersion<8||this.strict||"var"!==t.kind||"Identifier"!==t.declarations[0].id.type)&&this.raise(t.start,(s?"for-in":"for-of")+" loop variable declaration may not have an initializer"),e.left=t,e.right=s?this.parseExpression():this.parseMaybeAssign(),this.expect(w.parenR),e.body=this.parseStatement("for"),this.exitScope(),this.labels.pop(),this.finishNode(e,s?"ForInStatement":"ForOfStatement")},H.parseVar=function(e,t,s){for(e.declarations=[],e.kind=s;;){var i=this.startNode();if(this.parseVarId(i,s),this.eat(w.eq)?i.init=this.parseMaybeAssign(t):"const"!==s||this.type===w._in||this.options.ecmaVersion>=6&&this.isContextual("of")?"Identifier"===i.id.type||t&&(this.type===w._in||this.isContextual("of"))?i.init=null:this.raise(this.lastTokEnd,"Complex binding patterns require an initialization value"):this.unexpected(),e.declarations.push(this.finishNode(i,"VariableDeclarator")),!this.eat(w.comma))break}return e},H.parseVarId=function(e,t){e.id=this.parseBindingAtom(),this.checkLValPattern(e.id,"var"===t?1:2,!1)};var Q=1,K=2;function Y(e,t){var s=t.key.name,i=e[s],r="true";return"MethodDefinition"!==t.type||"get"!==t.kind&&"set"!==t.kind||(r=(t.static?"s":"i")+t.kind),"iget"===i&&"iset"===r||"iset"===i&&"iget"===r||"sget"===i&&"sset"===r||"sset"===i&&"sget"===r?(e[s]="true",!1):!!i||(e[s]=r,!1)}function X(e,t){var s=e.computed,i=e.key;return!s&&("Identifier"===i.type&&i.name===t||"Literal"===i.type&&i.value===t)}H.parseFunction=function(e,t,s,i){this.initFunction(e),(this.options.ecmaVersion>=9||this.options.ecmaVersion>=6&&!i)&&(this.type===w.star&&t&K&&this.unexpected(),e.generator=this.eat(w.star)),this.options.ecmaVersion>=8&&(e.async=!!i),t&Q&&(e.id=4&t&&this.type!==w.name?null:this.parseIdent(),!e.id||t&K||this.checkLValSimple(e.id,this.strict||e.generator||e.async?this.treatFunctionsAsVar?1:2:3));var r=this.yieldPos,n=this.awaitPos,a=this.awaitIdentPos;return this.yieldPos=0,this.awaitPos=0,this.awaitIdentPos=0,this.enterScope(M(e.async,e.generator)),t&Q||(e.id=this.type===w.name?this.parseIdent():null),this.parseFunctionParams(e),this.parseFunctionBody(e,s,!1),this.yieldPos=r,this.awaitPos=n,this.awaitIdentPos=a,this.finishNode(e,t&Q?"FunctionDeclaration":"FunctionExpression")},H.parseFunctionParams=function(e){this.expect(w.parenL),e.params=this.parseBindingList(w.parenR,!1,this.options.ecmaVersion>=8),this.checkYieldAwaitInDefaultParams()},H.parseClass=function(e,t){this.next();var s=this.strict;this.strict=!0,this.parseClassId(e,t),this.parseClassSuper(e);var i=this.enterClassBody(),r=this.startNode(),n=!1;for(r.body=[],this.expect(w.braceL);this.type!==w.braceR;){var a=this.parseClassElement(null!==e.superClass);a&&(r.body.push(a),"MethodDefinition"===a.type&&"constructor"===a.kind?(n&&this.raise(a.start,"Duplicate constructor in the same class"),n=!0):"PrivateIdentifier"===a.key.type&&Y(i,a)&&this.raiseRecoverable(a.key.start,"Identifier '#"+a.key.name+"' has already been declared"))}return this.strict=s,this.next(),e.body=this.finishNode(r,"ClassBody"),this.exitClassBody(),this.finishNode(e,t?"ClassDeclaration":"ClassExpression")},H.parseClassElement=function(e){if(this.eat(w.semi))return null;var t=this.options.ecmaVersion,s=this.startNode(),i="",r=!1,n=!1,a="method";if(s.static=!1,this.eatContextual("static")&&(this.isClassElementNameStart()||this.type===w.star?s.static=!0:i="static"),!i&&t>=8&&this.eatContextual("async")&&(!this.isClassElementNameStart()&&this.type!==w.star||this.canInsertSemicolon()?i="async":n=!0),!i&&(t>=9||!n)&&this.eat(w.star)&&(r=!0),!i&&!n&&!r){var o=this.value;(this.eatContextual("get")||this.eatContextual("set"))&&(this.isClassElementNameStart()?a=o:i=o)}if(i?(s.computed=!1,s.key=this.startNodeAt(this.lastTokStart,this.lastTokStartLoc),s.key.name=i,this.finishNode(s.key,"Identifier")):this.parseClassElementName(s),t<13||this.type===w.parenL||"method"!==a||r||n){var c=!s.static&&X(s,"constructor"),p=c&&e;c&&"method"!==a&&this.raise(s.key.start,"Constructor can't have get/set modifier"),s.kind=c?"constructor":a,this.parseClassMethod(s,r,n,p)}else this.parseClassField(s);return s},H.isClassElementNameStart=function(){return this.type===w.name||this.type===w.privateId||this.type===w.num||this.type===w.string||this.type===w.bracketL||this.type.keyword},H.parseClassElementName=function(e){this.type===w.privateId?("constructor"===this.value&&this.raise(this.start,"Classes can't have an element named '#constructor'"),e.computed=!1,e.key=this.parsePrivateIdent()):this.parsePropertyName(e)},H.parseClassMethod=function(e,t,s,i){var r=e.key;"constructor"===e.kind?(t&&this.raise(r.start,"Constructor can't be a generator"),s&&this.raise(r.start,"Constructor can't be an async method")):e.static&&X(e,"prototype")&&this.raise(r.start,"Classes may not have a static property named prototype");var n=e.value=this.parseMethod(t,s,i);return"get"===e.kind&&0!==n.params.length&&this.raiseRecoverable(n.start,"getter should have no params"),"set"===e.kind&&1!==n.params.length&&this.raiseRecoverable(n.start,"setter should have exactly one param"),"set"===e.kind&&"RestElement"===n.params[0].type&&this.raiseRecoverable(n.params[0].start,"Setter cannot use rest params"),this.finishNode(e,"MethodDefinition")},H.parseClassField=function(e){if(X(e,"constructor")?this.raise(e.key.start,"Classes can't have a field named 'constructor'"):e.static&&X(e,"prototype")&&this.raise(e.key.start,"Classes can't have a static field named 'prototype'"),this.eat(w.eq)){var t=this.currentThisScope(),s=t.inClassFieldInit;t.inClassFieldInit=!0,e.value=this.parseMaybeAssign(),t.inClassFieldInit=s}else e.value=null;return this.semicolon(),this.finishNode(e,"PropertyDefinition")},H.parseClassId=function(e,t){this.type===w.name?(e.id=this.parseIdent(),t&&this.checkLValSimple(e.id,2,!1)):(!0===t&&this.unexpected(),e.id=null)},H.parseClassSuper=function(e){e.superClass=this.eat(w._extends)?this.parseExprSubscripts():null},H.enterClassBody=function(){var e={declared:Object.create(null),used:[]};return this.privateNameStack.push(e),e.declared},H.exitClassBody=function(){for(var e=this.privateNameStack.pop(),t=e.declared,s=e.used,i=this.privateNameStack.length,r=0===i?null:this.privateNameStack[i-1],n=0;n<s.length;++n){var a=s[n];T(t,a.name)||(r?r.used.push(a):this.raiseRecoverable(a.start,"Private field '#"+a.name+"' must be declared in an enclosing class"))}},H.parseExport=function(e,t){if(this.next(),this.eat(w.star))return this.options.ecmaVersion>=11&&(this.eatContextual("as")?(e.exported=this.parseIdent(!0),this.checkExport(t,e.exported.name,this.lastTokStart)):e.exported=null),this.expectContextual("from"),this.type!==w.string&&this.unexpected(),e.source=this.parseExprAtom(),this.semicolon(),this.finishNode(e,"ExportAllDeclaration");if(this.eat(w._default)){var s;if(this.checkExport(t,"default",this.lastTokStart),this.type===w._function||(s=this.isAsyncFunction())){var i=this.startNode();this.next(),s&&this.next(),e.declaration=this.parseFunction(i,4|Q,!1,s)}else if(this.type===w._class){var r=this.startNode();e.declaration=this.parseClass(r,"nullableID")}else e.declaration=this.parseMaybeAssign(),this.semicolon();return this.finishNode(e,"ExportDefaultDeclaration")}if(this.shouldParseExportStatement())e.declaration=this.parseStatement(null),"VariableDeclaration"===e.declaration.type?this.checkVariableExport(t,e.declaration.declarations):this.checkExport(t,e.declaration.id.name,e.declaration.id.start),e.specifiers=[],e.source=null;else{if(e.declaration=null,e.specifiers=this.parseExportSpecifiers(t),this.eatContextual("from"))this.type!==w.string&&this.unexpected(),e.source=this.parseExprAtom();else{for(var n=0,a=e.specifiers;n<a.length;n+=1){var o=a[n];this.checkUnreserved(o.local),this.checkLocalExport(o.local)}e.source=null}this.semicolon()}return this.finishNode(e,"ExportNamedDeclaration")},H.checkExport=function(e,t,s){e&&(T(e,t)&&this.raiseRecoverable(s,"Duplicate export '"+t+"'"),e[t]=!0)},H.checkPatternExport=function(e,t){var s=t.type;if("Identifier"===s)this.checkExport(e,t.name,t.start);else if("ObjectPattern"===s)for(var i=0,r=t.properties;i<r.length;i+=1){var n=r[i];this.checkPatternExport(e,n)}else if("ArrayPattern"===s)for(var a=0,o=t.elements;a<o.length;a+=1){var c=o[a];c&&this.checkPatternExport(e,c)}else"Property"===s?this.checkPatternExport(e,t.value):"AssignmentPattern"===s?this.checkPatternExport(e,t.left):"RestElement"===s?this.checkPatternExport(e,t.argument):"ParenthesizedExpression"===s&&this.checkPatternExport(e,t.expression)},H.checkVariableExport=function(e,t){if(e)for(var s=0,i=t;s<i.length;s+=1){var r=i[s];this.checkPatternExport(e,r.id)}},H.shouldParseExportStatement=function(){return"var"===this.type.keyword||"const"===this.type.keyword||"class"===this.type.keyword||"function"===this.type.keyword||this.isLet()||this.isAsyncFunction()},H.parseExportSpecifiers=function(e){var t=[],s=!0;for(this.expect(w.braceL);!this.eat(w.braceR);){if(s)s=!1;else if(this.expect(w.comma),this.afterTrailingComma(w.braceR))break;var i=this.startNode();i.local=this.parseIdent(!0),i.exported=this.eatContextual("as")?this.parseIdent(!0):i.local,this.checkExport(e,i.exported.name,i.exported.start),t.push(this.finishNode(i,"ExportSpecifier"))}return t},H.parseImport=function(e){return this.next(),this.type===w.string?(e.specifiers=$,e.source=this.parseExprAtom()):(e.specifiers=this.parseImportSpecifiers(),this.expectContextual("from"),e.source=this.type===w.string?this.parseExprAtom():this.unexpected()),this.semicolon(),this.finishNode(e,"ImportDeclaration")},H.parseImportSpecifiers=function(){var e=[],t=!0;if(this.type===w.name){var s=this.startNode();if(s.local=this.parseIdent(),this.checkLValSimple(s.local,2),e.push(this.finishNode(s,"ImportDefaultSpecifier")),!this.eat(w.comma))return e}if(this.type===w.star){var i=this.startNode();return this.next(),this.expectContextual("as"),i.local=this.parseIdent(),this.checkLValSimple(i.local,2),e.push(this.finishNode(i,"ImportNamespaceSpecifier")),e}for(this.expect(w.braceL);!this.eat(w.braceR);){if(t)t=!1;else if(this.expect(w.comma),this.afterTrailingComma(w.braceR))break;var r=this.startNode();r.imported=this.parseIdent(!0),this.eatContextual("as")?r.local=this.parseIdent():(this.checkUnreserved(r.imported),r.local=r.imported),this.checkLValSimple(r.local,2),e.push(this.finishNode(r,"ImportSpecifier"))}return e},H.adaptDirectivePrologue=function(e){for(var t=0;t<e.length&&this.isDirectiveCandidate(e[t]);++t)e[t].directive=e[t].expression.raw.slice(1,-1)},H.isDirectiveCandidate=function(e){return"ExpressionStatement"===e.type&&"Literal"===e.expression.type&&"string"==typeof e.expression.value&&('"'===this.input[e.start]||"'"===this.input[e.start])};var Z=F.prototype;Z.toAssignable=function(e,t,s){if(this.options.ecmaVersion>=6&&e)switch(e.type){case"Identifier":this.inAsync&&"await"===e.name&&this.raise(e.start,"Cannot use 'await' as identifier inside an async function");break;case"ObjectPattern":case"ArrayPattern":case"AssignmentPattern":case"RestElement":break;case"ObjectExpression":e.type="ObjectPattern",s&&this.checkPatternErrors(s,!0);for(var i=0,r=e.properties;i<r.length;i+=1){var n=r[i];this.toAssignable(n,t),"RestElement"!==n.type||"ArrayPattern"!==n.argument.type&&"ObjectPattern"!==n.argument.type||this.raise(n.argument.start,"Unexpected token")}break;case"Property":"init"!==e.kind&&this.raise(e.key.start,"Object pattern can't contain getter or setter"),this.toAssignable(e.value,t);break;case"ArrayExpression":e.type="ArrayPattern",s&&this.checkPatternErrors(s,!0),this.toAssignableList(e.elements,t);break;case"SpreadElement":e.type="RestElement",this.toAssignable(e.argument,t),"AssignmentPattern"===e.argument.type&&this.raise(e.argument.start,"Rest elements cannot have a default value");break;case"AssignmentExpression":"="!==e.operator&&this.raise(e.left.end,"Only '=' operator can be used for specifying default value."),e.type="AssignmentPattern",delete e.operator,this.toAssignable(e.left,t);break;case"ParenthesizedExpression":this.toAssignable(e.expression,t,s);break;case"ChainExpression":this.raiseRecoverable(e.start,"Optional chaining cannot appear in left-hand side");break;case"MemberExpression":if(!t)break;default:this.raise(e.start,"Assigning to rvalue")}else s&&this.checkPatternErrors(s,!0);return e},Z.toAssignableList=function(e,t){for(var s=e.length,i=0;i<s;i++){var r=e[i];r&&this.toAssignable(r,t)}if(s){var n=e[s-1];6===this.options.ecmaVersion&&t&&n&&"RestElement"===n.type&&"Identifier"!==n.argument.type&&this.unexpected(n.argument.start)}return e},Z.parseSpread=function(e){var t=this.startNode();return this.next(),t.argument=this.parseMaybeAssign(!1,e),this.finishNode(t,"SpreadElement")},Z.parseRestBinding=function(){var e=this.startNode();return this.next(),6===this.options.ecmaVersion&&this.type!==w.name&&this.unexpected(),e.argument=this.parseBindingAtom(),this.finishNode(e,"RestElement")},Z.parseBindingAtom=function(){if(this.options.ecmaVersion>=6)switch(this.type){case w.bracketL:var e=this.startNode();return this.next(),e.elements=this.parseBindingList(w.bracketR,!0,!0),this.finishNode(e,"ArrayPattern");case w.braceL:return this.parseObj(!0)}return this.parseIdent()},Z.parseBindingList=function(e,t,s){for(var i=[],r=!0;!this.eat(e);)if(r?r=!1:this.expect(w.comma),t&&this.type===w.comma)i.push(null);else{if(s&&this.afterTrailingComma(e))break;if(this.type===w.ellipsis){var n=this.parseRestBinding();this.parseBindingListItem(n),i.push(n),this.type===w.comma&&this.raise(this.start,"Comma is not permitted after the rest element"),this.expect(e);break}var a=this.parseMaybeDefault(this.start,this.startLoc);this.parseBindingListItem(a),i.push(a)}return i},Z.parseBindingListItem=function(e){return e},Z.parseMaybeDefault=function(e,t,s){if(s=s||this.parseBindingAtom(),this.options.ecmaVersion<6||!this.eat(w.eq))return s;var i=this.startNodeAt(e,t);return i.left=s,i.right=this.parseMaybeAssign(),this.finishNode(i,"AssignmentPattern")},Z.checkLValSimple=function(e,t,s){void 0===t&&(t=0);var i=0!==t;switch(e.type){case"Identifier":this.strict&&this.reservedWordsStrictBind.test(e.name)&&this.raiseRecoverable(e.start,(i?"Binding ":"Assigning to ")+e.name+" in strict mode"),i&&(2===t&&"let"===e.name&&this.raiseRecoverable(e.start,"let is disallowed as a lexically bound name"),s&&(T(s,e.name)&&this.raiseRecoverable(e.start,"Argument name clash"),s[e.name]=!0),5!==t&&this.declareName(e.name,t,e.start));break;case"ChainExpression":this.raiseRecoverable(e.start,"Optional chaining cannot appear in left-hand side");break;case"MemberExpression":i&&this.raiseRecoverable(e.start,"Binding member expression");break;case"ParenthesizedExpression":return i&&this.raiseRecoverable(e.start,"Binding parenthesized expression"),this.checkLValSimple(e.expression,t,s);default:this.raise(e.start,(i?"Binding":"Assigning to")+" rvalue")}},Z.checkLValPattern=function(e,t,s){switch(void 0===t&&(t=0),e.type){case"ObjectPattern":for(var i=0,r=e.properties;i<r.length;i+=1){var n=r[i];this.checkLValInnerPattern(n,t,s)}break;case"ArrayPattern":for(var a=0,o=e.elements;a<o.length;a+=1){var c=o[a];c&&this.checkLValInnerPattern(c,t,s)}break;default:this.checkLValSimple(e,t,s)}},Z.checkLValInnerPattern=function(e,t,s){switch(void 0===t&&(t=0),e.type){case"Property":this.checkLValInnerPattern(e.value,t,s);break;case"AssignmentPattern":this.checkLValPattern(e.left,t,s);break;case"RestElement":this.checkLValPattern(e.argument,t,s);break;default:this.checkLValPattern(e,t,s)}};var J=F.prototype;function ee(e){return"MemberExpression"===e.type&&"PrivateIdentifier"===e.property.type||"ChainExpression"===e.type&&ee(e.expression)}J.checkPropClash=function(e,t,s){if(!(this.options.ecmaVersion>=9&&"SpreadElement"===e.type||this.options.ecmaVersion>=6&&(e.computed||e.method||e.shorthand))){var i,r=e.key;switch(r.type){case"Identifier":i=r.name;break;case"Literal":i=String(r.value);break;default:return}var n=e.kind;if(this.options.ecmaVersion>=6)"__proto__"===i&&"init"===n&&(t.proto&&(s?s.doubleProto<0&&(s.doubleProto=r.start):this.raiseRecoverable(r.start,"Redefinition of __proto__ property")),t.proto=!0);else{var a=t[i="$"+i];a?("init"===n?this.strict&&a.init||a.get||a.set:a.init||a[n])&&this.raiseRecoverable(r.start,"Redefinition of property"):a=t[i]={init:!1,get:!1,set:!1},a[n]=!0}}},J.parseExpression=function(e,t){var s=this.start,i=this.startLoc,r=this.parseMaybeAssign(e,t);if(this.type===w.comma){var n=this.startNodeAt(s,i);for(n.expressions=[r];this.eat(w.comma);)n.expressions.push(this.parseMaybeAssign(e,t));return this.finishNode(n,"SequenceExpression")}return r},J.parseMaybeAssign=function(e,t,s){if(this.isContextual("yield")){if(this.inGenerator)return this.parseYield(e);this.exprAllowed=!1}var i=!1,r=-1,n=-1;t?(r=t.parenthesizedAssign,n=t.trailingComma,t.parenthesizedAssign=t.trailingComma=-1):(t=new z,i=!0);var a=this.start,o=this.startLoc;this.type!==w.parenL&&this.type!==w.name||(this.potentialArrowAt=this.start,this.potentialArrowInForAwait="await"===e);var c=this.parseMaybeConditional(e,t);if(s&&(c=s.call(this,c,a,o)),this.type.isAssign){var p=this.startNodeAt(a,o);return p.operator=this.value,this.type===w.eq&&(c=this.toAssignable(c,!1,t)),i||(t.parenthesizedAssign=t.trailingComma=t.doubleProto=-1),t.shorthandAssign>=c.start&&(t.shorthandAssign=-1),this.type===w.eq?this.checkLValPattern(c):this.checkLValSimple(c),p.left=c,this.next(),p.right=this.parseMaybeAssign(e),this.finishNode(p,"AssignmentExpression")}return i&&this.checkExpressionErrors(t,!0),r>-1&&(t.parenthesizedAssign=r),n>-1&&(t.trailingComma=n),c},J.parseMaybeConditional=function(e,t){var s=this.start,i=this.startLoc,r=this.parseExprOps(e,t);if(this.checkExpressionErrors(t))return r;if(this.eat(w.question)){var n=this.startNodeAt(s,i);return n.test=r,n.consequent=this.parseMaybeAssign(),this.expect(w.colon),n.alternate=this.parseMaybeAssign(e),this.finishNode(n,"ConditionalExpression")}return r},J.parseExprOps=function(e,t){var s=this.start,i=this.startLoc,r=this.parseMaybeUnary(t,!1);return this.checkExpressionErrors(t)||r.start===s&&"ArrowFunctionExpression"===r.type?r:this.parseExprOp(r,s,i,-1,e)},J.parseExprOp=function(e,t,s,i,r){var n=this.type.binop;if(null!=n&&(!r||this.type!==w._in)&&n>i){var a=this.type===w.logicalOR||this.type===w.logicalAND,o=this.type===w.coalesce;o&&(n=w.logicalAND.binop);var c=this.value;this.next();var p=this.start,h=this.startLoc,l=this.parseExprOp(this.parseMaybeUnary(null,!1),p,h,n,r),u=this.buildBinary(t,s,e,l,c,a||o);return(a&&this.type===w.coalesce||o&&(this.type===w.logicalOR||this.type===w.logicalAND))&&this.raiseRecoverable(this.start,"Logical expressions and coalesce expressions cannot be mixed. Wrap either by parentheses"),this.parseExprOp(u,t,s,i,r)}return e},J.buildBinary=function(e,t,s,i,r,n){var a=this.startNodeAt(e,t);return a.left=s,a.operator=r,a.right=i,this.finishNode(a,n?"LogicalExpression":"BinaryExpression")},J.parseMaybeUnary=function(e,t,s){var i,r=this.start,n=this.startLoc;if(this.isContextual("await")&&(this.inAsync||!this.inFunction&&this.options.allowAwaitOutsideFunction))i=this.parseAwait(),t=!0;else if(this.type.prefix){var a=this.startNode(),o=this.type===w.incDec;a.operator=this.value,a.prefix=!0,this.next(),a.argument=this.parseMaybeUnary(null,!0,o),this.checkExpressionErrors(e,!0),o?this.checkLValSimple(a.argument):this.strict&&"delete"===a.operator&&"Identifier"===a.argument.type?this.raiseRecoverable(a.start,"Deleting local variable in strict mode"):"delete"===a.operator&&ee(a.argument)?this.raiseRecoverable(a.start,"Private fields can not be deleted"):t=!0,i=this.finishNode(a,o?"UpdateExpression":"UnaryExpression")}else{if(i=this.parseExprSubscripts(e),this.checkExpressionErrors(e))return i;for(;this.type.postfix&&!this.canInsertSemicolon();){var c=this.startNodeAt(r,n);c.operator=this.value,c.prefix=!1,c.argument=i,this.checkLValSimple(i),this.next(),i=this.finishNode(c,"UpdateExpression")}}return s||!this.eat(w.starstar)?i:t?void this.unexpected(this.lastTokStart):this.buildBinary(r,n,i,this.parseMaybeUnary(null,!1),"**",!1)},J.parseExprSubscripts=function(e){var t=this.start,s=this.startLoc,i=this.parseExprAtom(e);if("ArrowFunctionExpression"===i.type&&")"!==this.input.slice(this.lastTokStart,this.lastTokEnd))return i;var r=this.parseSubscripts(i,t,s);return e&&"MemberExpression"===r.type&&(e.parenthesizedAssign>=r.start&&(e.parenthesizedAssign=-1),e.parenthesizedBind>=r.start&&(e.parenthesizedBind=-1),e.trailingComma>=r.start&&(e.trailingComma=-1)),r},J.parseSubscripts=function(e,t,s,i){for(var r=this.options.ecmaVersion>=8&&"Identifier"===e.type&&"async"===e.name&&this.lastTokEnd===e.end&&!this.canInsertSemicolon()&&e.end-e.start==5&&this.potentialArrowAt===e.start,n=!1;;){var a=this.parseSubscript(e,t,s,i,r,n);if(a.optional&&(n=!0),a===e||"ArrowFunctionExpression"===a.type){if(n){var o=this.startNodeAt(t,s);o.expression=a,a=this.finishNode(o,"ChainExpression")}return a}e=a}},J.parseSubscript=function(e,t,s,i,r,n){var a=this.options.ecmaVersion>=11,o=a&&this.eat(w.questionDot);i&&o&&this.raise(this.lastTokStart,"Optional chaining cannot appear in the callee of new expressions");var c=this.eat(w.bracketL);if(c||o&&this.type!==w.parenL&&this.type!==w.backQuote||this.eat(w.dot)){var p=this.startNodeAt(t,s);p.object=e,c?(p.property=this.parseExpression(),this.expect(w.bracketR)):this.type===w.privateId&&"Super"!==e.type?p.property=this.parsePrivateIdent():p.property=this.parseIdent("never"!==this.options.allowReserved),p.computed=!!c,a&&(p.optional=o),e=this.finishNode(p,"MemberExpression")}else if(!i&&this.eat(w.parenL)){var h=new z,l=this.yieldPos,u=this.awaitPos,d=this.awaitIdentPos;this.yieldPos=0,this.awaitPos=0,this.awaitIdentPos=0;var f=this.parseExprList(w.parenR,this.options.ecmaVersion>=8,!1,h);if(r&&!o&&!this.canInsertSemicolon()&&this.eat(w.arrow))return this.checkPatternErrors(h,!1),this.checkYieldAwaitInDefaultParams(),this.awaitIdentPos>0&&this.raise(this.awaitIdentPos,"Cannot use 'await' as identifier inside an async function"),this.yieldPos=l,this.awaitPos=u,this.awaitIdentPos=d,this.parseArrowExpression(this.startNodeAt(t,s),f,!0);this.checkExpressionErrors(h,!0),this.yieldPos=l||this.yieldPos,this.awaitPos=u||this.awaitPos,this.awaitIdentPos=d||this.awaitIdentPos;var x=this.startNodeAt(t,s);x.callee=e,x.arguments=f,a&&(x.optional=o),e=this.finishNode(x,"CallExpression")}else if(this.type===w.backQuote){(o||n)&&this.raise(this.start,"Optional chaining cannot appear in the tag of tagged template expressions");var m=this.startNodeAt(t,s);m.tag=e,m.quasi=this.parseTemplate({isTagged:!0}),e=this.finishNode(m,"TaggedTemplateExpression")}return e},J.parseExprAtom=function(e){this.type===w.slash&&this.readRegexp();var t,s=this.potentialArrowAt===this.start;switch(this.type){case w._super:return this.allowSuper||this.raise(this.start,"'super' keyword outside a method"),t=this.startNode(),this.next(),this.type!==w.parenL||this.allowDirectSuper||this.raise(t.start,"super() call outside constructor of a subclass"),this.type!==w.dot&&this.type!==w.bracketL&&this.type!==w.parenL&&this.unexpected(),this.finishNode(t,"Super");case w._this:return t=this.startNode(),this.next(),this.finishNode(t,"ThisExpression");case w.name:var i=this.start,r=this.startLoc,n=this.containsEsc,a=this.parseIdent(!1);if(this.options.ecmaVersion>=8&&!n&&"async"===a.name&&!this.canInsertSemicolon()&&this.eat(w._function))return this.parseFunction(this.startNodeAt(i,r),0,!1,!0);if(s&&!this.canInsertSemicolon()){if(this.eat(w.arrow))return this.parseArrowExpression(this.startNodeAt(i,r),[a],!1);if(this.options.ecmaVersion>=8&&"async"===a.name&&this.type===w.name&&!n&&(!this.potentialArrowInForAwait||"of"!==this.value||this.containsEsc))return a=this.parseIdent(!1),!this.canInsertSemicolon()&&this.eat(w.arrow)||this.unexpected(),this.parseArrowExpression(this.startNodeAt(i,r),[a],!0)}return a;case w.regexp:var o=this.value;return(t=this.parseLiteral(o.value)).regex={pattern:o.pattern,flags:o.flags},t;case w.num:case w.string:return this.parseLiteral(this.value);case w._null:case w._true:case w._false:return(t=this.startNode()).value=this.type===w._null?null:this.type===w._true,t.raw=this.type.keyword,this.next(),this.finishNode(t,"Literal");case w.parenL:var c=this.start,p=this.parseParenAndDistinguishExpression(s);return e&&(e.parenthesizedAssign<0&&!this.isSimpleAssignTarget(p)&&(e.parenthesizedAssign=c),e.parenthesizedBind<0&&(e.parenthesizedBind=c)),p;case w.bracketL:return t=this.startNode(),this.next(),t.elements=this.parseExprList(w.bracketR,!0,!0,e),this.finishNode(t,"ArrayExpression");case w.braceL:return this.parseObj(!1,e);case w._function:return t=this.startNode(),this.next(),this.parseFunction(t,0);case w._class:return this.parseClass(this.startNode(),!1);case w._new:return this.parseNew();case w.backQuote:return this.parseTemplate();case w._import:return this.options.ecmaVersion>=11?this.parseExprImport():this.unexpected();default:this.unexpected()}},J.parseExprImport=function(){var e=this.startNode();this.containsEsc&&this.raiseRecoverable(this.start,"Escape sequence in keyword import");var t=this.parseIdent(!0);switch(this.type){case w.parenL:return this.parseDynamicImport(e);case w.dot:return e.meta=t,this.parseImportMeta(e);default:this.unexpected()}},J.parseDynamicImport=function(e){if(this.next(),e.source=this.parseMaybeAssign(),!this.eat(w.parenR)){var t=this.start;this.eat(w.comma)&&this.eat(w.parenR)?this.raiseRecoverable(t,"Trailing comma is not allowed in import()"):this.unexpected(t)}return this.finishNode(e,"ImportExpression")},J.parseImportMeta=function(e){this.next();var t=this.containsEsc;return e.property=this.parseIdent(!0),"meta"!==e.property.name&&this.raiseRecoverable(e.property.start,"The only valid meta property for import is 'import.meta'"),t&&this.raiseRecoverable(e.start,"'import.meta' must not contain escaped characters"),"module"===this.options.sourceType||this.options.allowImportExportEverywhere||this.raiseRecoverable(e.start,"Cannot use 'import.meta' outside a module"),this.finishNode(e,"MetaProperty")},J.parseLiteral=function(e){var t=this.startNode();return t.value=e,t.raw=this.input.slice(this.start,this.end),110===t.raw.charCodeAt(t.raw.length-1)&&(t.bigint=t.raw.slice(0,-1).replace(/_/g,"")),this.next(),this.finishNode(t,"Literal")},J.parseParenExpression=function(){this.expect(w.parenL);var e=this.parseExpression();return this.expect(w.parenR),e},J.parseParenAndDistinguishExpression=function(e){var t,s=this.start,i=this.startLoc,r=this.options.ecmaVersion>=8;if(this.options.ecmaVersion>=6){this.next();var n,a=this.start,o=this.startLoc,c=[],p=!0,h=!1,l=new z,u=this.yieldPos,d=this.awaitPos;for(this.yieldPos=0,this.awaitPos=0;this.type!==w.parenR;){if(p?p=!1:this.expect(w.comma),r&&this.afterTrailingComma(w.parenR,!0)){h=!0;break}if(this.type===w.ellipsis){n=this.start,c.push(this.parseParenItem(this.parseRestBinding())),this.type===w.comma&&this.raise(this.start,"Comma is not permitted after the rest element");break}c.push(this.parseMaybeAssign(!1,l,this.parseParenItem))}var f=this.start,x=this.startLoc;if(this.expect(w.parenR),e&&!this.canInsertSemicolon()&&this.eat(w.arrow))return this.checkPatternErrors(l,!1),this.checkYieldAwaitInDefaultParams(),this.yieldPos=u,this.awaitPos=d,this.parseParenArrowList(s,i,c);c.length&&!h||this.unexpected(this.lastTokStart),n&&this.unexpected(n),this.checkExpressionErrors(l,!0),this.yieldPos=u||this.yieldPos,this.awaitPos=d||this.awaitPos,c.length>1?((t=this.startNodeAt(a,o)).expressions=c,this.finishNodeAt(t,"SequenceExpression",f,x)):t=c[0]}else t=this.parseParenExpression();if(this.options.preserveParens){var m=this.startNodeAt(s,i);return m.expression=t,this.finishNode(m,"ParenthesizedExpression")}return t},J.parseParenItem=function(e){return e},J.parseParenArrowList=function(e,t,s){return this.parseArrowExpression(this.startNodeAt(e,t),s)};var te=[];J.parseNew=function(){this.containsEsc&&this.raiseRecoverable(this.start,"Escape sequence in keyword new");var e=this.startNode(),t=this.parseIdent(!0);if(this.options.ecmaVersion>=6&&this.eat(w.dot)){e.meta=t;var s=this.containsEsc;return e.property=this.parseIdent(!0),"target"!==e.property.name&&this.raiseRecoverable(e.property.start,"The only valid meta property for new is 'new.target'"),s&&this.raiseRecoverable(e.start,"'new.target' must not contain escaped characters"),this.inNonArrowFunction||this.raiseRecoverable(e.start,"'new.target' can only be used in functions"),this.finishNode(e,"MetaProperty")}var i=this.start,r=this.startLoc,n=this.type===w._import;return e.callee=this.parseSubscripts(this.parseExprAtom(),i,r,!0),n&&"ImportExpression"===e.callee.type&&this.raise(i,"Cannot use new with import()"),this.eat(w.parenL)?e.arguments=this.parseExprList(w.parenR,this.options.ecmaVersion>=8,!1):e.arguments=te,this.finishNode(e,"NewExpression")},J.parseTemplateElement=function(e){var t=e.isTagged,s=this.startNode();return this.type===w.invalidTemplate?(t||this.raiseRecoverable(this.start,"Bad escape sequence in untagged template literal"),s.value={raw:this.value,cooked:null}):s.value={raw:this.input.slice(this.start,this.end).replace(/\r\n?/g,"\n"),cooked:this.value},this.next(),s.tail=this.type===w.backQuote,this.finishNode(s,"TemplateElement")},J.parseTemplate=function(e){void 0===e&&(e={});var t=e.isTagged;void 0===t&&(t=!1);var s=this.startNode();this.next(),s.expressions=[];var i=this.parseTemplateElement({isTagged:t});for(s.quasis=[i];!i.tail;)this.type===w.eof&&this.raise(this.pos,"Unterminated template literal"),this.expect(w.dollarBraceL),s.expressions.push(this.parseExpression()),this.expect(w.braceR),s.quasis.push(i=this.parseTemplateElement({isTagged:t}));return this.next(),this.finishNode(s,"TemplateLiteral")},J.isAsyncProp=function(e){return!e.computed&&"Identifier"===e.key.type&&"async"===e.key.name&&(this.type===w.name||this.type===w.num||this.type===w.string||this.type===w.bracketL||this.type.keyword||this.options.ecmaVersion>=9&&this.type===w.star)&&!v.test(this.input.slice(this.lastTokEnd,this.start))},J.parseObj=function(e,t){var s=this.startNode(),i=!0,r={};for(s.properties=[],this.next();!this.eat(w.braceR);){if(i)i=!1;else if(this.expect(w.comma),this.options.ecmaVersion>=5&&this.afterTrailingComma(w.braceR))break;var n=this.parseProperty(e,t);e||this.checkPropClash(n,r,t),s.properties.push(n)}return this.finishNode(s,e?"ObjectPattern":"ObjectExpression")},J.parseProperty=function(e,t){var s,i,r,n,a=this.startNode();if(this.options.ecmaVersion>=9&&this.eat(w.ellipsis))return e?(a.argument=this.parseIdent(!1),this.type===w.comma&&this.raise(this.start,"Comma is not permitted after the rest element"),this.finishNode(a,"RestElement")):(this.type===w.parenL&&t&&(t.parenthesizedAssign<0&&(t.parenthesizedAssign=this.start),t.parenthesizedBind<0&&(t.parenthesizedBind=this.start)),a.argument=this.parseMaybeAssign(!1,t),this.type===w.comma&&t&&t.trailingComma<0&&(t.trailingComma=this.start),this.finishNode(a,"SpreadElement"));this.options.ecmaVersion>=6&&(a.method=!1,a.shorthand=!1,(e||t)&&(r=this.start,n=this.startLoc),e||(s=this.eat(w.star)));var o=this.containsEsc;return this.parsePropertyName(a),!e&&!o&&this.options.ecmaVersion>=8&&!s&&this.isAsyncProp(a)?(i=!0,s=this.options.ecmaVersion>=9&&this.eat(w.star),this.parsePropertyName(a,t)):i=!1,this.parsePropertyValue(a,e,s,i,r,n,t,o),this.finishNode(a,"Property")},J.parsePropertyValue=function(e,t,s,i,r,n,a,o){if((s||i)&&this.type===w.colon&&this.unexpected(),this.eat(w.colon))e.value=t?this.parseMaybeDefault(this.start,this.startLoc):this.parseMaybeAssign(!1,a),e.kind="init";else if(this.options.ecmaVersion>=6&&this.type===w.parenL)t&&this.unexpected(),e.kind="init",e.method=!0,e.value=this.parseMethod(s,i);else if(t||o||!(this.options.ecmaVersion>=5)||e.computed||"Identifier"!==e.key.type||"get"!==e.key.name&&"set"!==e.key.name||this.type===w.comma||this.type===w.braceR||this.type===w.eq)this.options.ecmaVersion>=6&&!e.computed&&"Identifier"===e.key.type?((s||i)&&this.unexpected(),this.checkUnreserved(e.key),"await"!==e.key.name||this.awaitIdentPos||(this.awaitIdentPos=r),e.kind="init",t?e.value=this.parseMaybeDefault(r,n,this.copyNode(e.key)):this.type===w.eq&&a?(a.shorthandAssign<0&&(a.shorthandAssign=this.start),e.value=this.parseMaybeDefault(r,n,this.copyNode(e.key))):e.value=this.copyNode(e.key),e.shorthand=!0):this.unexpected();else{(s||i)&&this.unexpected(),e.kind=e.key.name,this.parsePropertyName(e),e.value=this.parseMethod(!1);var c="get"===e.kind?0:1;if(e.value.params.length!==c){var p=e.value.start;"get"===e.kind?this.raiseRecoverable(p,"getter should have no params"):this.raiseRecoverable(p,"setter should have exactly one param")}else"set"===e.kind&&"RestElement"===e.value.params[0].type&&this.raiseRecoverable(e.value.params[0].start,"Setter cannot use rest params")}},J.parsePropertyName=function(e){if(this.options.ecmaVersion>=6){if(this.eat(w.bracketL))return e.computed=!0,e.key=this.parseMaybeAssign(),this.expect(w.bracketR),e.key;e.computed=!1}return e.key=this.type===w.num||this.type===w.string?this.parseExprAtom():this.parseIdent("never"!==this.options.allowReserved)},J.initFunction=function(e){e.id=null,this.options.ecmaVersion>=6&&(e.generator=e.expression=!1),this.options.ecmaVersion>=8&&(e.async=!1)},J.parseMethod=function(e,t,s){var i=this.startNode(),r=this.yieldPos,n=this.awaitPos,a=this.awaitIdentPos;return this.initFunction(i),this.options.ecmaVersion>=6&&(i.generator=e),this.options.ecmaVersion>=8&&(i.async=!!t),this.yieldPos=0,this.awaitPos=0,this.awaitIdentPos=0,this.enterScope(64|M(t,i.generator)|(s?128:0)),this.expect(w.parenL),i.params=this.parseBindingList(w.parenR,!1,this.options.ecmaVersion>=8),this.checkYieldAwaitInDefaultParams(),this.parseFunctionBody(i,!1,!0),this.yieldPos=r,this.awaitPos=n,this.awaitIdentPos=a,this.finishNode(i,"FunctionExpression")},J.parseArrowExpression=function(e,t,s){var i=this.yieldPos,r=this.awaitPos,n=this.awaitIdentPos;return this.enterScope(16|M(s,!1)),this.initFunction(e),this.options.ecmaVersion>=8&&(e.async=!!s),this.yieldPos=0,this.awaitPos=0,this.awaitIdentPos=0,e.params=this.toAssignableList(t,!0),this.parseFunctionBody(e,!0,!1),this.yieldPos=i,this.awaitPos=r,this.awaitIdentPos=n,this.finishNode(e,"ArrowFunctionExpression")},J.parseFunctionBody=function(e,t,s){var i=t&&this.type!==w.braceL,r=this.strict,n=!1;if(i)e.body=this.parseMaybeAssign(),e.expression=!0,this.checkParams(e,!1);else{var a=this.options.ecmaVersion>=7&&!this.isSimpleParamList(e.params);r&&!a||(n=this.strictDirective(this.end))&&a&&this.raiseRecoverable(e.start,"Illegal 'use strict' directive in function with non-simple parameter list");var o=this.labels;this.labels=[],n&&(this.strict=!0),this.checkParams(e,!r&&!n&&!t&&!s&&this.isSimpleParamList(e.params)),this.strict&&e.id&&this.checkLValSimple(e.id,5),e.body=this.parseBlock(!1,void 0,n&&!r),e.expression=!1,this.adaptDirectivePrologue(e.body.body),this.labels=o}this.exitScope()},J.isSimpleParamList=function(e){for(var t=0,s=e;t<s.length;t+=1)if("Identifier"!==s[t].type)return!1;return!0},J.checkParams=function(e,t){for(var s=Object.create(null),i=0,r=e.params;i<r.length;i+=1){var n=r[i];this.checkLValInnerPattern(n,1,t?null:s)}},J.parseExprList=function(e,t,s,i){for(var r=[],n=!0;!this.eat(e);){if(n)n=!1;else if(this.expect(w.comma),t&&this.afterTrailingComma(e))break;var a=void 0;s&&this.type===w.comma?a=null:this.type===w.ellipsis?(a=this.parseSpread(i),i&&this.type===w.comma&&i.trailingComma<0&&(i.trailingComma=this.start)):a=this.parseMaybeAssign(!1,i),r.push(a)}return r},J.checkUnreserved=function(e){var t=e.start,s=e.end,i=e.name;this.inGenerator&&"yield"===i&&this.raiseRecoverable(t,"Cannot use 'yield' as identifier inside a generator"),this.inAsync&&"await"===i&&this.raiseRecoverable(t,"Cannot use 'await' as identifier inside an async function"),this.currentThisScope().inClassFieldInit&&"arguments"===i&&this.raiseRecoverable(t,"Cannot use 'arguments' in class field initializer"),this.keywords.test(i)&&this.raise(t,"Unexpected keyword '"+i+"'"),this.options.ecmaVersion<6&&-1!==this.input.slice(t,s).indexOf("\\")||(this.strict?this.reservedWordsStrict:this.reservedWords).test(i)&&(this.inAsync||"await"!==i||this.raiseRecoverable(t,"Cannot use keyword 'await' outside an async function"),this.raiseRecoverable(t,"The keyword '"+i+"' is reserved"))},J.parseIdent=function(e,t){var s=this.startNode();return this.type===w.name?s.name=this.value:this.type.keyword?(s.name=this.type.keyword,"class"!==s.name&&"function"!==s.name||this.lastTokEnd===this.lastTokStart+1&&46===this.input.charCodeAt(this.lastTokStart)||this.context.pop()):this.unexpected(),this.next(!!e),this.finishNode(s,"Identifier"),e||(this.checkUnreserved(s),"await"!==s.name||this.awaitIdentPos||(this.awaitIdentPos=s.start)),s},J.parsePrivateIdent=function(){var e=this.startNode();return this.type===w.privateId?e.name=this.value:this.unexpected(),this.next(),this.finishNode(e,"PrivateIdentifier"),0===this.privateNameStack.length?this.raise(e.start,"Private field '#"+e.name+"' must be declared in an enclosing class"):this.privateNameStack[this.privateNameStack.length-1].used.push(e),e},J.parseYield=function(e){this.yieldPos||(this.yieldPos=this.start);var t=this.startNode();return this.next(),this.type===w.semi||this.canInsertSemicolon()||this.type!==w.star&&!this.type.startsExpr?(t.delegate=!1,t.argument=null):(t.delegate=this.eat(w.star),t.argument=this.parseMaybeAssign(e)),this.finishNode(t,"YieldExpression")},J.parseAwait=function(){this.awaitPos||(this.awaitPos=this.start);var e=this.startNode();return this.next(),e.argument=this.parseMaybeUnary(null,!0),this.finishNode(e,"AwaitExpression")};var se=F.prototype;se.raise=function(e,t){var s=V(this.input,e);t+=" ("+s.line+":"+s.column+")";var i=new SyntaxError(t);throw i.pos=e,i.loc=s,i.raisedAt=this.pos,i},se.raiseRecoverable=se.raise,se.curPosition=function(){if(this.options.locations)return new O(this.curLine,this.pos-this.lineStart)};var ie=F.prototype,re=function(e){this.flags=e,this.var=[],this.lexical=[],this.functions=[],this.inClassFieldInit=!1};ie.enterScope=function(e){this.scopeStack.push(new re(e))},ie.exitScope=function(){this.scopeStack.pop()},ie.treatFunctionsAsVarInScope=function(e){return 2&e.flags||!this.inModule&&1&e.flags},ie.declareName=function(e,t,s){var i=!1;if(2===t){var r=this.currentScope();i=r.lexical.indexOf(e)>-1||r.functions.indexOf(e)>-1||r.var.indexOf(e)>-1,r.lexical.push(e),this.inModule&&1&r.flags&&delete this.undefinedExports[e]}else if(4===t)this.currentScope().lexical.push(e);else if(3===t){var n=this.currentScope();i=this.treatFunctionsAsVar?n.lexical.indexOf(e)>-1:n.lexical.indexOf(e)>-1||n.var.indexOf(e)>-1,n.functions.push(e)}else for(var a=this.scopeStack.length-1;a>=0;--a){var o=this.scopeStack[a];if(o.lexical.indexOf(e)>-1&&!(32&o.flags&&o.lexical[0]===e)||!this.treatFunctionsAsVarInScope(o)&&o.functions.indexOf(e)>-1){i=!0;break}if(o.var.push(e),this.inModule&&1&o.flags&&delete this.undefinedExports[e],3&o.flags)break}i&&this.raiseRecoverable(s,"Identifier '"+e+"' has already been declared")},ie.checkLocalExport=function(e){-1===this.scopeStack[0].lexical.indexOf(e.name)&&-1===this.scopeStack[0].var.indexOf(e.name)&&(this.undefinedExports[e.name]=e)},ie.currentScope=function(){return this.scopeStack[this.scopeStack.length-1]},ie.currentVarScope=function(){for(var e=this.scopeStack.length-1;;e--){var t=this.scopeStack[e];if(3&t.flags)return t}},ie.currentThisScope=function(){for(var e=this.scopeStack.length-1;;e--){var t=this.scopeStack[e];if(3&t.flags&&!(16&t.flags))return t}};var ne=function(e,t,s){this.type="",this.start=t,this.end=0,e.options.locations&&(this.loc=new N(e,s)),e.options.directSourceFile&&(this.sourceFile=e.options.directSourceFile),e.options.ranges&&(this.range=[t,0])},ae=F.prototype;function oe(e,t,s,i){return e.type=t,e.end=s,this.options.locations&&(e.loc.end=i),this.options.ranges&&(e.range[1]=s),e}ae.startNode=function(){return new ne(this,this.start,this.startLoc)},ae.startNodeAt=function(e,t){return new ne(this,e,t)},ae.finishNode=function(e,t){return oe.call(this,e,t,this.lastTokEnd,this.lastTokEndLoc)},ae.finishNodeAt=function(e,t,s,i){return oe.call(this,e,t,s,i)},ae.copyNode=function(e){var t=new ne(this,e.start,this.startLoc);for(var s in e)t[s]=e[s];return t};var ce=function(e,t,s,i,r){this.token=e,this.isExpr=!!t,this.preserveSpace=!!s,this.override=i,this.generator=!!r},pe={b_stat:new ce("{",!1),b_expr:new ce("{",!0),b_tmpl:new ce("${",!1),p_stat:new ce("(",!1),p_expr:new ce("(",!0),q_tmpl:new ce("`",!0,!0,(function(e){return e.tryReadTemplateToken()})),f_stat:new ce("function",!1),f_expr:new ce("function",!0),f_expr_gen:new ce("function",!0,!1,null,!0),f_gen:new ce("function",!1,!1,null,!0)},he=F.prototype;he.initialContext=function(){return[pe.b_stat]},he.braceIsBlock=function(e){var t=this.curContext();return t===pe.f_expr||t===pe.f_stat||(e!==w.colon||t!==pe.b_stat&&t!==pe.b_expr?e===w._return||e===w.name&&this.exprAllowed?v.test(this.input.slice(this.lastTokEnd,this.start)):e===w._else||e===w.semi||e===w.eof||e===w.parenR||e===w.arrow||(e===w.braceL?t===pe.b_stat:e!==w._var&&e!==w._const&&e!==w.name&&!this.exprAllowed):!t.isExpr)},he.inGeneratorContext=function(){for(var e=this.context.length-1;e>=1;e--){var t=this.context[e];if("function"===t.token)return t.generator}return!1},he.updateContext=function(e){var t,s=this.type;s.keyword&&e===w.dot?this.exprAllowed=!1:(t=s.updateContext)?t.call(this,e):this.exprAllowed=s.beforeExpr},w.parenR.updateContext=w.braceR.updateContext=function(){if(1!==this.context.length){var e=this.context.pop();e===pe.b_stat&&"function"===this.curContext().token&&(e=this.context.pop()),this.exprAllowed=!e.isExpr}else this.exprAllowed=!0},w.braceL.updateContext=function(e){this.context.push(this.braceIsBlock(e)?pe.b_stat:pe.b_expr),this.exprAllowed=!0},w.dollarBraceL.updateContext=function(){this.context.push(pe.b_tmpl),this.exprAllowed=!0},w.parenL.updateContext=function(e){var t=e===w._if||e===w._for||e===w._with||e===w._while;this.context.push(t?pe.p_stat:pe.p_expr),this.exprAllowed=!0},w.incDec.updateContext=function(){},w._function.updateContext=w._class.updateContext=function(e){!e.beforeExpr||e===w._else||e===w.semi&&this.curContext()!==pe.p_stat||e===w._return&&v.test(this.input.slice(this.lastTokEnd,this.start))||(e===w.colon||e===w.braceL)&&this.curContext()===pe.b_stat?this.context.push(pe.f_stat):this.context.push(pe.f_expr),this.exprAllowed=!1},w.backQuote.updateContext=function(){this.curContext()===pe.q_tmpl?this.context.pop():this.context.push(pe.q_tmpl),this.exprAllowed=!1},w.star.updateContext=function(e){if(e===w._function){var t=this.context.length-1;this.context[t]===pe.f_expr?this.context[t]=pe.f_expr_gen:this.context[t]=pe.f_gen}this.exprAllowed=!0},w.name.updateContext=function(e){var t=!1;this.options.ecmaVersion>=6&&e!==w.dot&&("of"===this.value&&!this.exprAllowed||"yield"===this.value&&this.inGeneratorContext())&&(t=!0),this.exprAllowed=t};var le="ASCII ASCII_Hex_Digit AHex Alphabetic Alpha Any Assigned Bidi_Control Bidi_C Bidi_Mirrored Bidi_M Case_Ignorable CI Cased Changes_When_Casefolded CWCF Changes_When_Casemapped CWCM Changes_When_Lowercased CWL Changes_When_NFKC_Casefolded CWKCF Changes_When_Titlecased CWT Changes_When_Uppercased CWU Dash Default_Ignorable_Code_Point DI Deprecated Dep Diacritic Dia Emoji Emoji_Component Emoji_Modifier Emoji_Modifier_Base Emoji_Presentation Extender Ext Grapheme_Base Gr_Base Grapheme_Extend Gr_Ext Hex_Digit Hex IDS_Binary_Operator IDSB IDS_Trinary_Operator IDST ID_Continue IDC ID_Start IDS Ideographic Ideo Join_Control Join_C Logical_Order_Exception LOE Lowercase Lower Math Noncharacter_Code_Point NChar Pattern_Syntax Pat_Syn Pattern_White_Space Pat_WS Quotation_Mark QMark Radical Regional_Indicator RI Sentence_Terminal STerm Soft_Dotted SD Terminal_Punctuation Term Unified_Ideograph UIdeo Uppercase Upper Variation_Selector VS White_Space space XID_Continue XIDC XID_Start XIDS",ue=le+" Extended_Pictographic",de={9:le,10:ue,11:ue,12:ue+" EBase EComp EMod EPres ExtPict"},fe="Cased_Letter LC Close_Punctuation Pe Connector_Punctuation Pc Control Cc cntrl Currency_Symbol Sc Dash_Punctuation Pd Decimal_Number Nd digit Enclosing_Mark Me Final_Punctuation Pf Format Cf Initial_Punctuation Pi Letter L Letter_Number Nl Line_Separator Zl Lowercase_Letter Ll Mark M Combining_Mark Math_Symbol Sm Modifier_Letter Lm Modifier_Symbol Sk Nonspacing_Mark Mn Number N Open_Punctuation Ps Other C Other_Letter Lo Other_Number No Other_Punctuation Po Other_Symbol So Paragraph_Separator Zp Private_Use Co Punctuation P punct Separator Z Space_Separator Zs Spacing_Mark Mc Surrogate Cs Symbol S Titlecase_Letter Lt Unassigned Cn Uppercase_Letter Lu",xe="Adlam Adlm Ahom Ahom Anatolian_Hieroglyphs Hluw Arabic Arab Armenian Armn Avestan Avst Balinese Bali Bamum Bamu Bassa_Vah Bass Batak Batk Bengali Beng Bhaiksuki Bhks Bopomofo Bopo Brahmi Brah Braille Brai Buginese Bugi Buhid Buhd Canadian_Aboriginal Cans Carian Cari Caucasian_Albanian Aghb Chakma Cakm Cham Cham Cherokee Cher Common Zyyy Coptic Copt Qaac Cuneiform Xsux Cypriot Cprt Cyrillic Cyrl Deseret Dsrt Devanagari Deva Duployan Dupl Egyptian_Hieroglyphs Egyp Elbasan Elba Ethiopic Ethi Georgian Geor Glagolitic Glag Gothic Goth Grantha Gran Greek Grek Gujarati Gujr Gurmukhi Guru Han Hani Hangul Hang Hanunoo Hano Hatran Hatr Hebrew Hebr Hiragana Hira Imperial_Aramaic Armi Inherited Zinh Qaai Inscriptional_Pahlavi Phli Inscriptional_Parthian Prti Javanese Java Kaithi Kthi Kannada Knda Katakana Kana Kayah_Li Kali Kharoshthi Khar Khmer Khmr Khojki Khoj Khudawadi Sind Lao Laoo Latin Latn Lepcha Lepc Limbu Limb Linear_A Lina Linear_B Linb Lisu Lisu Lycian Lyci Lydian Lydi Mahajani Mahj Malayalam Mlym Mandaic Mand Manichaean Mani Marchen Marc Masaram_Gondi Gonm Meetei_Mayek Mtei Mende_Kikakui Mend Meroitic_Cursive Merc Meroitic_Hieroglyphs Mero Miao Plrd Modi Modi Mongolian Mong Mro Mroo Multani Mult Myanmar Mymr Nabataean Nbat New_Tai_Lue Talu Newa Newa Nko Nkoo Nushu Nshu Ogham Ogam Ol_Chiki Olck Old_Hungarian Hung Old_Italic Ital Old_North_Arabian Narb Old_Permic Perm Old_Persian Xpeo Old_South_Arabian Sarb Old_Turkic Orkh Oriya Orya Osage Osge Osmanya Osma Pahawh_Hmong Hmng Palmyrene Palm Pau_Cin_Hau Pauc Phags_Pa Phag Phoenician Phnx Psalter_Pahlavi Phlp Rejang Rjng Runic Runr Samaritan Samr Saurashtra Saur Sharada Shrd Shavian Shaw Siddham Sidd SignWriting Sgnw Sinhala Sinh Sora_Sompeng Sora Soyombo Soyo Sundanese Sund Syloti_Nagri Sylo Syriac Syrc Tagalog Tglg Tagbanwa Tagb Tai_Le Tale Tai_Tham Lana Tai_Viet Tavt Takri Takr Tamil Taml Tangut Tang Telugu Telu Thaana Thaa Thai Thai Tibetan Tibt Tifinagh Tfng Tirhuta Tirh Ugaritic Ugar Vai Vaii Warang_Citi Wara Yi Yiii Zanabazar_Square Zanb",me=xe+" Dogra Dogr Gunjala_Gondi Gong Hanifi_Rohingya Rohg Makasar Maka Medefaidrin Medf Old_Sogdian Sogo Sogdian Sogd",ge=me+" Elymaic Elym Nandinagari Nand Nyiakeng_Puachue_Hmong Hmnp Wancho Wcho",ye={9:xe,10:me,11:ge,12:ge+" Chorasmian Chrs Diak Dives_Akuru Khitan_Small_Script Kits Yezi Yezidi"},Ee={};function we(e){var t=Ee[e]={binary:L(de[e]+" "+fe),nonBinary:{General_Category:L(fe),Script:L(ye[e])}};t.nonBinary.Script_Extensions=t.nonBinary.Script,t.nonBinary.gc=t.nonBinary.General_Category,t.nonBinary.sc=t.nonBinary.Script,t.nonBinary.scx=t.nonBinary.Script_Extensions}we(9),we(10),we(11),we(12);var ve=F.prototype,be=function(e){this.parser=e,this.validFlags="gim"+(e.options.ecmaVersion>=6?"uy":"")+(e.options.ecmaVersion>=9?"s":"")+(e.options.ecmaVersion>=13?"d":""),this.unicodeProperties=Ee[e.options.ecmaVersion>=12?12:e.options.ecmaVersion],this.source="",this.flags="",this.start=0,this.switchU=!1,this.switchN=!1,this.pos=0,this.lastIntValue=0,this.lastStringValue="",this.lastAssertionIsQuantifiable=!1,this.numCapturingParens=0,this.maxBackReference=0,this.groupNames=[],this.backReferenceNames=[]};function ke(e){return e<=65535?String.fromCharCode(e):(e-=65536,String.fromCharCode(55296+(e>>10),56320+(1023&e)))}function Se(e){return 36===e||e>=40&&e<=43||46===e||63===e||e>=91&&e<=94||e>=123&&e<=125}function Ce(e){return e>=65&&e<=90||e>=97&&e<=122}function Pe(e){return Ce(e)||95===e}function Ae(e){return Pe(e)||_e(e)}function _e(e){return e>=48&&e<=57}function Te(e){return e>=48&&e<=57||e>=65&&e<=70||e>=97&&e<=102}function Ie(e){return e>=65&&e<=70?e-65+10:e>=97&&e<=102?e-97+10:e-48}function Le(e){return e>=48&&e<=55}be.prototype.reset=function(e,t,s){var i=-1!==s.indexOf("u");this.start=0|e,this.source=t+"",this.flags=s,this.switchU=i&&this.parser.options.ecmaVersion>=6,this.switchN=i&&this.parser.options.ecmaVersion>=9},be.prototype.raise=function(e){this.parser.raiseRecoverable(this.start,"Invalid regular expression: /"+this.source+"/: "+e)},be.prototype.at=function(e,t){void 0===t&&(t=!1);var s=this.source,i=s.length;if(e>=i)return-1;var r=s.charCodeAt(e);if(!t&&!this.switchU||r<=55295||r>=57344||e+1>=i)return r;var n=s.charCodeAt(e+1);return n>=56320&&n<=57343?(r<<10)+n-56613888:r},be.prototype.nextIndex=function(e,t){void 0===t&&(t=!1);var s=this.source,i=s.length;if(e>=i)return i;var r,n=s.charCodeAt(e);return!t&&!this.switchU||n<=55295||n>=57344||e+1>=i||(r=s.charCodeAt(e+1))<56320||r>57343?e+1:e+2},be.prototype.current=function(e){return void 0===e&&(e=!1),this.at(this.pos,e)},be.prototype.lookahead=function(e){return void 0===e&&(e=!1),this.at(this.nextIndex(this.pos,e),e)},be.prototype.advance=function(e){void 0===e&&(e=!1),this.pos=this.nextIndex(this.pos,e)},be.prototype.eat=function(e,t){return void 0===t&&(t=!1),this.current(t)===e&&(this.advance(t),!0)},ve.validateRegExpFlags=function(e){for(var t=e.validFlags,s=e.flags,i=0;i<s.length;i++){var r=s.charAt(i);-1===t.indexOf(r)&&this.raise(e.start,"Invalid regular expression flag"),s.indexOf(r,i+1)>-1&&this.raise(e.start,"Duplicate regular expression flag")}},ve.validateRegExpPattern=function(e){this.regexp_pattern(e),!e.switchN&&this.options.ecmaVersion>=9&&e.groupNames.length>0&&(e.switchN=!0,this.regexp_pattern(e))},ve.regexp_pattern=function(e){e.pos=0,e.lastIntValue=0,e.lastStringValue="",e.lastAssertionIsQuantifiable=!1,e.numCapturingParens=0,e.maxBackReference=0,e.groupNames.length=0,e.backReferenceNames.length=0,this.regexp_disjunction(e),e.pos!==e.source.length&&(e.eat(41)&&e.raise("Unmatched ')'"),(e.eat(93)||e.eat(125))&&e.raise("Lone quantifier brackets")),e.maxBackReference>e.numCapturingParens&&e.raise("Invalid escape");for(var t=0,s=e.backReferenceNames;t<s.length;t+=1){var i=s[t];-1===e.groupNames.indexOf(i)&&e.raise("Invalid named capture referenced")}},ve.regexp_disjunction=function(e){for(this.regexp_alternative(e);e.eat(124);)this.regexp_alternative(e);this.regexp_eatQuantifier(e,!0)&&e.raise("Nothing to repeat"),e.eat(123)&&e.raise("Lone quantifier brackets")},ve.regexp_alternative=function(e){for(;e.pos<e.source.length&&this.regexp_eatTerm(e););},ve.regexp_eatTerm=function(e){return this.regexp_eatAssertion(e)?(e.lastAssertionIsQuantifiable&&this.regexp_eatQuantifier(e)&&e.switchU&&e.raise("Invalid quantifier"),!0):!!(e.switchU?this.regexp_eatAtom(e):this.regexp_eatExtendedAtom(e))&&(this.regexp_eatQuantifier(e),!0)},ve.regexp_eatAssertion=function(e){var t=e.pos;if(e.lastAssertionIsQuantifiable=!1,e.eat(94)||e.eat(36))return!0;if(e.eat(92)){if(e.eat(66)||e.eat(98))return!0;e.pos=t}if(e.eat(40)&&e.eat(63)){var s=!1;if(this.options.ecmaVersion>=9&&(s=e.eat(60)),e.eat(61)||e.eat(33))return this.regexp_disjunction(e),e.eat(41)||e.raise("Unterminated group"),e.lastAssertionIsQuantifiable=!s,!0}return e.pos=t,!1},ve.regexp_eatQuantifier=function(e,t){return void 0===t&&(t=!1),!!this.regexp_eatQuantifierPrefix(e,t)&&(e.eat(63),!0)},ve.regexp_eatQuantifierPrefix=function(e,t){return e.eat(42)||e.eat(43)||e.eat(63)||this.regexp_eatBracedQuantifier(e,t)},ve.regexp_eatBracedQuantifier=function(e,t){var s=e.pos;if(e.eat(123)){var i=0,r=-1;if(this.regexp_eatDecimalDigits(e)&&(i=e.lastIntValue,e.eat(44)&&this.regexp_eatDecimalDigits(e)&&(r=e.lastIntValue),e.eat(125)))return-1!==r&&r<i&&!t&&e.raise("numbers out of order in {} quantifier"),!0;e.switchU&&!t&&e.raise("Incomplete quantifier"),e.pos=s}return!1},ve.regexp_eatAtom=function(e){return this.regexp_eatPatternCharacters(e)||e.eat(46)||this.regexp_eatReverseSolidusAtomEscape(e)||this.regexp_eatCharacterClass(e)||this.regexp_eatUncapturingGroup(e)||this.regexp_eatCapturingGroup(e)},ve.regexp_eatReverseSolidusAtomEscape=function(e){var t=e.pos;if(e.eat(92)){if(this.regexp_eatAtomEscape(e))return!0;e.pos=t}return!1},ve.regexp_eatUncapturingGroup=function(e){var t=e.pos;if(e.eat(40)){if(e.eat(63)&&e.eat(58)){if(this.regexp_disjunction(e),e.eat(41))return!0;e.raise("Unterminated group")}e.pos=t}return!1},ve.regexp_eatCapturingGroup=function(e){if(e.eat(40)){if(this.options.ecmaVersion>=9?this.regexp_groupSpecifier(e):63===e.current()&&e.raise("Invalid group"),this.regexp_disjunction(e),e.eat(41))return e.numCapturingParens+=1,!0;e.raise("Unterminated group")}return!1},ve.regexp_eatExtendedAtom=function(e){return e.eat(46)||this.regexp_eatReverseSolidusAtomEscape(e)||this.regexp_eatCharacterClass(e)||this.regexp_eatUncapturingGroup(e)||this.regexp_eatCapturingGroup(e)||this.regexp_eatInvalidBracedQuantifier(e)||this.regexp_eatExtendedPatternCharacter(e)},ve.regexp_eatInvalidBracedQuantifier=function(e){return this.regexp_eatBracedQuantifier(e,!0)&&e.raise("Nothing to repeat"),!1},ve.regexp_eatSyntaxCharacter=function(e){var t=e.current();return!!Se(t)&&(e.lastIntValue=t,e.advance(),!0)},ve.regexp_eatPatternCharacters=function(e){for(var t=e.pos,s=0;-1!==(s=e.current())&&!Se(s);)e.advance();return e.pos!==t},ve.regexp_eatExtendedPatternCharacter=function(e){var t=e.current();return!(-1===t||36===t||t>=40&&t<=43||46===t||63===t||91===t||94===t||124===t||(e.advance(),0))},ve.regexp_groupSpecifier=function(e){if(e.eat(63)){if(this.regexp_eatGroupName(e))return-1!==e.groupNames.indexOf(e.lastStringValue)&&e.raise("Duplicate capture group name"),void e.groupNames.push(e.lastStringValue);e.raise("Invalid group")}},ve.regexp_eatGroupName=function(e){if(e.lastStringValue="",e.eat(60)){if(this.regexp_eatRegExpIdentifierName(e)&&e.eat(62))return!0;e.raise("Invalid capture group name")}return!1},ve.regexp_eatRegExpIdentifierName=function(e){if(e.lastStringValue="",this.regexp_eatRegExpIdentifierStart(e)){for(e.lastStringValue+=ke(e.lastIntValue);this.regexp_eatRegExpIdentifierPart(e);)e.lastStringValue+=ke(e.lastIntValue);return!0}return!1},ve.regexp_eatRegExpIdentifierStart=function(e){var t=e.pos,s=this.options.ecmaVersion>=11,i=e.current(s);return e.advance(s),92===i&&this.regexp_eatRegExpUnicodeEscapeSequence(e,s)&&(i=e.lastIntValue),function(e){return u(e,!0)||36===e||95===e}(i)?(e.lastIntValue=i,!0):(e.pos=t,!1)},ve.regexp_eatRegExpIdentifierPart=function(e){var t=e.pos,s=this.options.ecmaVersion>=11,i=e.current(s);return e.advance(s),92===i&&this.regexp_eatRegExpUnicodeEscapeSequence(e,s)&&(i=e.lastIntValue),function(e){return d(e,!0)||36===e||95===e||8204===e||8205===e}(i)?(e.lastIntValue=i,!0):(e.pos=t,!1)},ve.regexp_eatAtomEscape=function(e){return!!(this.regexp_eatBackReference(e)||this.regexp_eatCharacterClassEscape(e)||this.regexp_eatCharacterEscape(e)||e.switchN&&this.regexp_eatKGroupName(e))||(e.switchU&&(99===e.current()&&e.raise("Invalid unicode escape"),e.raise("Invalid escape")),!1)},ve.regexp_eatBackReference=function(e){var t=e.pos;if(this.regexp_eatDecimalEscape(e)){var s=e.lastIntValue;if(e.switchU)return s>e.maxBackReference&&(e.maxBackReference=s),!0;if(s<=e.numCapturingParens)return!0;e.pos=t}return!1},ve.regexp_eatKGroupName=function(e){if(e.eat(107)){if(this.regexp_eatGroupName(e))return e.backReferenceNames.push(e.lastStringValue),!0;e.raise("Invalid named reference")}return!1},ve.regexp_eatCharacterEscape=function(e){return this.regexp_eatControlEscape(e)||this.regexp_eatCControlLetter(e)||this.regexp_eatZero(e)||this.regexp_eatHexEscapeSequence(e)||this.regexp_eatRegExpUnicodeEscapeSequence(e,!1)||!e.switchU&&this.regexp_eatLegacyOctalEscapeSequence(e)||this.regexp_eatIdentityEscape(e)},ve.regexp_eatCControlLetter=function(e){var t=e.pos;if(e.eat(99)){if(this.regexp_eatControlLetter(e))return!0;e.pos=t}return!1},ve.regexp_eatZero=function(e){return 48===e.current()&&!_e(e.lookahead())&&(e.lastIntValue=0,e.advance(),!0)},ve.regexp_eatControlEscape=function(e){var t=e.current();return 116===t?(e.lastIntValue=9,e.advance(),!0):110===t?(e.lastIntValue=10,e.advance(),!0):118===t?(e.lastIntValue=11,e.advance(),!0):102===t?(e.lastIntValue=12,e.advance(),!0):114===t&&(e.lastIntValue=13,e.advance(),!0)},ve.regexp_eatControlLetter=function(e){var t=e.current();return!!Ce(t)&&(e.lastIntValue=t%32,e.advance(),!0)},ve.regexp_eatRegExpUnicodeEscapeSequence=function(e,t){void 0===t&&(t=!1);var s,i=e.pos,r=t||e.switchU;if(e.eat(117)){if(this.regexp_eatFixedHexDigits(e,4)){var n=e.lastIntValue;if(r&&n>=55296&&n<=56319){var a=e.pos;if(e.eat(92)&&e.eat(117)&&this.regexp_eatFixedHexDigits(e,4)){var o=e.lastIntValue;if(o>=56320&&o<=57343)return e.lastIntValue=1024*(n-55296)+(o-56320)+65536,!0}e.pos=a,e.lastIntValue=n}return!0}if(r&&e.eat(123)&&this.regexp_eatHexDigits(e)&&e.eat(125)&&((s=e.lastIntValue)>=0&&s<=1114111))return!0;r&&e.raise("Invalid unicode escape"),e.pos=i}return!1},ve.regexp_eatIdentityEscape=function(e){if(e.switchU)return!!this.regexp_eatSyntaxCharacter(e)||!!e.eat(47)&&(e.lastIntValue=47,!0);var t=e.current();return!(99===t||e.switchN&&107===t||(e.lastIntValue=t,e.advance(),0))},ve.regexp_eatDecimalEscape=function(e){e.lastIntValue=0;var t=e.current();if(t>=49&&t<=57){do{e.lastIntValue=10*e.lastIntValue+(t-48),e.advance()}while((t=e.current())>=48&&t<=57);return!0}return!1},ve.regexp_eatCharacterClassEscape=function(e){var t=e.current();if(function(e){return 100===e||68===e||115===e||83===e||119===e||87===e}(t))return e.lastIntValue=-1,e.advance(),!0;if(e.switchU&&this.options.ecmaVersion>=9&&(80===t||112===t)){if(e.lastIntValue=-1,e.advance(),e.eat(123)&&this.regexp_eatUnicodePropertyValueExpression(e)&&e.eat(125))return!0;e.raise("Invalid property name")}return!1},ve.regexp_eatUnicodePropertyValueExpression=function(e){var t=e.pos;if(this.regexp_eatUnicodePropertyName(e)&&e.eat(61)){var s=e.lastStringValue;if(this.regexp_eatUnicodePropertyValue(e)){var i=e.lastStringValue;return this.regexp_validateUnicodePropertyNameAndValue(e,s,i),!0}}if(e.pos=t,this.regexp_eatLoneUnicodePropertyNameOrValue(e)){var r=e.lastStringValue;return this.regexp_validateUnicodePropertyNameOrValue(e,r),!0}return!1},ve.regexp_validateUnicodePropertyNameAndValue=function(e,t,s){T(e.unicodeProperties.nonBinary,t)||e.raise("Invalid property name"),e.unicodeProperties.nonBinary[t].test(s)||e.raise("Invalid property value")},ve.regexp_validateUnicodePropertyNameOrValue=function(e,t){e.unicodeProperties.binary.test(t)||e.raise("Invalid property name")},ve.regexp_eatUnicodePropertyName=function(e){var t=0;for(e.lastStringValue="";Pe(t=e.current());)e.lastStringValue+=ke(t),e.advance();return""!==e.lastStringValue},ve.regexp_eatUnicodePropertyValue=function(e){var t=0;for(e.lastStringValue="";Ae(t=e.current());)e.lastStringValue+=ke(t),e.advance();return""!==e.lastStringValue},ve.regexp_eatLoneUnicodePropertyNameOrValue=function(e){return this.regexp_eatUnicodePropertyValue(e)},ve.regexp_eatCharacterClass=function(e){if(e.eat(91)){if(e.eat(94),this.regexp_classRanges(e),e.eat(93))return!0;e.raise("Unterminated character class")}return!1},ve.regexp_classRanges=function(e){for(;this.regexp_eatClassAtom(e);){var t=e.lastIntValue;if(e.eat(45)&&this.regexp_eatClassAtom(e)){var s=e.lastIntValue;!e.switchU||-1!==t&&-1!==s||e.raise("Invalid character class"),-1!==t&&-1!==s&&t>s&&e.raise("Range out of order in character class")}}},ve.regexp_eatClassAtom=function(e){var t=e.pos;if(e.eat(92)){if(this.regexp_eatClassEscape(e))return!0;if(e.switchU){var s=e.current();(99===s||Le(s))&&e.raise("Invalid class escape"),e.raise("Invalid escape")}e.pos=t}var i=e.current();return 93!==i&&(e.lastIntValue=i,e.advance(),!0)},ve.regexp_eatClassEscape=function(e){var t=e.pos;if(e.eat(98))return e.lastIntValue=8,!0;if(e.switchU&&e.eat(45))return e.lastIntValue=45,!0;if(!e.switchU&&e.eat(99)){if(this.regexp_eatClassControlLetter(e))return!0;e.pos=t}return this.regexp_eatCharacterClassEscape(e)||this.regexp_eatCharacterEscape(e)},ve.regexp_eatClassControlLetter=function(e){var t=e.current();return!(!_e(t)&&95!==t||(e.lastIntValue=t%32,e.advance(),0))},ve.regexp_eatHexEscapeSequence=function(e){var t=e.pos;if(e.eat(120)){if(this.regexp_eatFixedHexDigits(e,2))return!0;e.switchU&&e.raise("Invalid escape"),e.pos=t}return!1},ve.regexp_eatDecimalDigits=function(e){var t=e.pos,s=0;for(e.lastIntValue=0;_e(s=e.current());)e.lastIntValue=10*e.lastIntValue+(s-48),e.advance();return e.pos!==t},ve.regexp_eatHexDigits=function(e){var t=e.pos,s=0;for(e.lastIntValue=0;Te(s=e.current());)e.lastIntValue=16*e.lastIntValue+Ie(s),e.advance();return e.pos!==t},ve.regexp_eatLegacyOctalEscapeSequence=function(e){if(this.regexp_eatOctalDigit(e)){var t=e.lastIntValue;if(this.regexp_eatOctalDigit(e)){var s=e.lastIntValue;t<=3&&this.regexp_eatOctalDigit(e)?e.lastIntValue=64*t+8*s+e.lastIntValue:e.lastIntValue=8*t+s}else e.lastIntValue=t;return!0}return!1},ve.regexp_eatOctalDigit=function(e){var t=e.current();return Le(t)?(e.lastIntValue=t-48,e.advance(),!0):(e.lastIntValue=0,!1)},ve.regexp_eatFixedHexDigits=function(e,t){var s=e.pos;e.lastIntValue=0;for(var i=0;i<t;++i){var r=e.current();if(!Te(r))return e.pos=s,!1;e.lastIntValue=16*e.lastIntValue+Ie(r),e.advance()}return!0};var Oe=function(e){this.type=e.type,this.value=e.value,this.start=e.start,this.end=e.end,e.options.locations&&(this.loc=new N(e,e.startLoc,e.endLoc)),e.options.ranges&&(this.range=[e.start,e.end])},Ne=F.prototype;function Ve(e){return"function"!=typeof BigInt?null:BigInt(e.replace(/_/g,""))}function De(e){return e<=65535?String.fromCharCode(e):(e-=65536,String.fromCharCode(55296+(e>>10),56320+(1023&e)))}Ne.next=function(e){!e&&this.type.keyword&&this.containsEsc&&this.raiseRecoverable(this.start,"Escape sequence in keyword "+this.type.keyword),this.options.onToken&&this.options.onToken(new Oe(this)),this.lastTokEnd=this.end,this.lastTokStart=this.start,this.lastTokEndLoc=this.endLoc,this.lastTokStartLoc=this.startLoc,this.nextToken()},Ne.getToken=function(){return this.next(),new Oe(this)},"undefined"!=typeof Symbol&&(Ne[Symbol.iterator]=function(){var e=this;return{next:function(){var t=e.getToken();return{done:t.type===w.eof,value:t}}}}),Ne.curContext=function(){return this.context[this.context.length-1]},Ne.nextToken=function(){var e=this.curContext();return e&&e.preserveSpace||this.skipSpace(),this.start=this.pos,this.options.locations&&(this.startLoc=this.curPosition()),this.pos>=this.input.length?this.finishToken(w.eof):e.override?e.override(this):void this.readToken(this.fullCharCodeAtPos())},Ne.readToken=function(e){return u(e,this.options.ecmaVersion>=6)||92===e?this.readWord():this.getTokenFromCode(e)},Ne.fullCharCodeAtPos=function(){var e=this.input.charCodeAt(this.pos);if(e<=55295||e>=56320)return e;var t=this.input.charCodeAt(this.pos+1);return t<=56319||t>=57344?e:(e<<10)+t-56613888},Ne.skipBlockComment=function(){var e,t=this.options.onComment&&this.curPosition(),s=this.pos,i=this.input.indexOf("*/",this.pos+=2);if(-1===i&&this.raise(this.pos-2,"Unterminated comment"),this.pos=i+2,this.options.locations)for(b.lastIndex=s;(e=b.exec(this.input))&&e.index<this.pos;)++this.curLine,this.lineStart=e.index+e[0].length;this.options.onComment&&this.options.onComment(!0,this.input.slice(s+2,i),s,this.pos,t,this.curPosition())},Ne.skipLineComment=function(e){for(var t=this.pos,s=this.options.onComment&&this.curPosition(),i=this.input.charCodeAt(this.pos+=e);this.pos<this.input.length&&!k(i);)i=this.input.charCodeAt(++this.pos);this.options.onComment&&this.options.onComment(!1,this.input.slice(t+e,this.pos),t,this.pos,s,this.curPosition())},Ne.skipSpace=function(){e:for(;this.pos<this.input.length;){var e=this.input.charCodeAt(this.pos);switch(e){case 32:case 160:++this.pos;break;case 13:10===this.input.charCodeAt(this.pos+1)&&++this.pos;case 10:case 8232:case 8233:++this.pos,this.options.locations&&(++this.curLine,this.lineStart=this.pos);break;case 47:switch(this.input.charCodeAt(this.pos+1)){case 42:this.skipBlockComment();break;case 47:this.skipLineComment(2);break;default:break e}break;default:if(!(e>8&&e<14||e>=5760&&S.test(String.fromCharCode(e))))break e;++this.pos}}},Ne.finishToken=function(e,t){this.end=this.pos,this.options.locations&&(this.endLoc=this.curPosition());var s=this.type;this.type=e,this.value=t,this.updateContext(s)},Ne.readToken_dot=function(){var e=this.input.charCodeAt(this.pos+1);if(e>=48&&e<=57)return this.readNumber(!0);var t=this.input.charCodeAt(this.pos+2);return this.options.ecmaVersion>=6&&46===e&&46===t?(this.pos+=3,this.finishToken(w.ellipsis)):(++this.pos,this.finishToken(w.dot))},Ne.readToken_slash=function(){var e=this.input.charCodeAt(this.pos+1);return this.exprAllowed?(++this.pos,this.readRegexp()):61===e?this.finishOp(w.assign,2):this.finishOp(w.slash,1)},Ne.readToken_mult_modulo_exp=function(e){var t=this.input.charCodeAt(this.pos+1),s=1,i=42===e?w.star:w.modulo;return this.options.ecmaVersion>=7&&42===e&&42===t&&(++s,i=w.starstar,t=this.input.charCodeAt(this.pos+2)),61===t?this.finishOp(w.assign,s+1):this.finishOp(i,s)},Ne.readToken_pipe_amp=function(e){var t=this.input.charCodeAt(this.pos+1);return t===e?this.options.ecmaVersion>=12&&61===this.input.charCodeAt(this.pos+2)?this.finishOp(w.assign,3):this.finishOp(124===e?w.logicalOR:w.logicalAND,2):61===t?this.finishOp(w.assign,2):this.finishOp(124===e?w.bitwiseOR:w.bitwiseAND,1)},Ne.readToken_caret=function(){return 61===this.input.charCodeAt(this.pos+1)?this.finishOp(w.assign,2):this.finishOp(w.bitwiseXOR,1)},Ne.readToken_plus_min=function(e){var t=this.input.charCodeAt(this.pos+1);return t===e?45!==t||this.inModule||62!==this.input.charCodeAt(this.pos+2)||0!==this.lastTokEnd&&!v.test(this.input.slice(this.lastTokEnd,this.pos))?this.finishOp(w.incDec,2):(this.skipLineComment(3),this.skipSpace(),this.nextToken()):61===t?this.finishOp(w.assign,2):this.finishOp(w.plusMin,1)},Ne.readToken_lt_gt=function(e){var t=this.input.charCodeAt(this.pos+1),s=1;return t===e?(s=62===e&&62===this.input.charCodeAt(this.pos+2)?3:2,61===this.input.charCodeAt(this.pos+s)?this.finishOp(w.assign,s+1):this.finishOp(w.bitShift,s)):33!==t||60!==e||this.inModule||45!==this.input.charCodeAt(this.pos+2)||45!==this.input.charCodeAt(this.pos+3)?(61===t&&(s=2),this.finishOp(w.relational,s)):(this.skipLineComment(4),this.skipSpace(),this.nextToken())},Ne.readToken_eq_excl=function(e){var t=this.input.charCodeAt(this.pos+1);return 61===t?this.finishOp(w.equality,61===this.input.charCodeAt(this.pos+2)?3:2):61===e&&62===t&&this.options.ecmaVersion>=6?(this.pos+=2,this.finishToken(w.arrow)):this.finishOp(61===e?w.eq:w.prefix,1)},Ne.readToken_question=function(){var e=this.options.ecmaVersion;if(e>=11){var t=this.input.charCodeAt(this.pos+1);if(46===t){var s=this.input.charCodeAt(this.pos+2);if(s<48||s>57)return this.finishOp(w.questionDot,2)}if(63===t)return e>=12&&61===this.input.charCodeAt(this.pos+2)?this.finishOp(w.assign,3):this.finishOp(w.coalesce,2)}return this.finishOp(w.question,1)},Ne.readToken_numberSign=function(){var e=35;if(this.options.ecmaVersion>=13&&(++this.pos,u(e=this.fullCharCodeAtPos(),!0)||92===e))return this.finishToken(w.privateId,this.readWord1());this.raise(this.pos,"Unexpected character '"+De(e)+"'")},Ne.getTokenFromCode=function(e){switch(e){case 46:return this.readToken_dot();case 40:return++this.pos,this.finishToken(w.parenL);case 41:return++this.pos,this.finishToken(w.parenR);case 59:return++this.pos,this.finishToken(w.semi);case 44:return++this.pos,this.finishToken(w.comma);case 91:return++this.pos,this.finishToken(w.bracketL);case 93:return++this.pos,this.finishToken(w.bracketR);case 123:return++this.pos,this.finishToken(w.braceL);case 125:return++this.pos,this.finishToken(w.braceR);case 58:return++this.pos,this.finishToken(w.colon);case 96:if(this.options.ecmaVersion<6)break;return++this.pos,this.finishToken(w.backQuote);case 48:var t=this.input.charCodeAt(this.pos+1);if(120===t||88===t)return this.readRadixNumber(16);if(this.options.ecmaVersion>=6){if(111===t||79===t)return this.readRadixNumber(8);if(98===t||66===t)return this.readRadixNumber(2)}case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:return this.readNumber(!1);case 34:case 39:return this.readString(e);case 47:return this.readToken_slash();case 37:case 42:return this.readToken_mult_modulo_exp(e);case 124:case 38:return this.readToken_pipe_amp(e);case 94:return this.readToken_caret();case 43:case 45:return this.readToken_plus_min(e);case 60:case 62:return this.readToken_lt_gt(e);case 61:case 33:return this.readToken_eq_excl(e);case 63:return this.readToken_question();case 126:return this.finishOp(w.prefix,1);case 35:return this.readToken_numberSign()}this.raise(this.pos,"Unexpected character '"+De(e)+"'")},Ne.finishOp=function(e,t){var s=this.input.slice(this.pos,this.pos+t);return this.pos+=t,this.finishToken(e,s)},Ne.readRegexp=function(){for(var e,t,s=this.pos;;){this.pos>=this.input.length&&this.raise(s,"Unterminated regular expression");var i=this.input.charAt(this.pos);if(v.test(i)&&this.raise(s,"Unterminated regular expression"),e)e=!1;else{if("["===i)t=!0;else if("]"===i&&t)t=!1;else if("/"===i&&!t)break;e="\\"===i}++this.pos}var r=this.input.slice(s,this.pos);++this.pos;var n=this.pos,a=this.readWord1();this.containsEsc&&this.unexpected(n);var o=this.regexpState||(this.regexpState=new be(this));o.reset(s,r,a),this.validateRegExpFlags(o),this.validateRegExpPattern(o);var c=null;try{c=new RegExp(r,a)}catch(e){}return this.finishToken(w.regexp,{pattern:r,flags:a,value:c})},Ne.readInt=function(e,t,s){for(var i=this.options.ecmaVersion>=12&&void 0===t,r=s&&48===this.input.charCodeAt(this.pos),n=this.pos,a=0,o=0,c=0,p=null==t?1/0:t;c<p;++c,++this.pos){var h=this.input.charCodeAt(this.pos),l=void 0;if(i&&95===h)r&&this.raiseRecoverable(this.pos,"Numeric separator is not allowed in legacy octal numeric literals"),95===o&&this.raiseRecoverable(this.pos,"Numeric separator must be exactly one underscore"),0===c&&this.raiseRecoverable(this.pos,"Numeric separator is not allowed at the first of digits"),o=h;else{if((l=h>=97?h-97+10:h>=65?h-65+10:h>=48&&h<=57?h-48:1/0)>=e)break;o=h,a=a*e+l}}return i&&95===o&&this.raiseRecoverable(this.pos-1,"Numeric separator is not allowed at the last of digits"),this.pos===n||null!=t&&this.pos-n!==t?null:a},Ne.readRadixNumber=function(e){var t=this.pos;this.pos+=2;var s=this.readInt(e);return null==s&&this.raise(this.start+2,"Expected number in radix "+e),this.options.ecmaVersion>=11&&110===this.input.charCodeAt(this.pos)?(s=Ve(this.input.slice(t,this.pos)),++this.pos):u(this.fullCharCodeAtPos())&&this.raise(this.pos,"Identifier directly after number"),this.finishToken(w.num,s)},Ne.readNumber=function(e){var t=this.pos;e||null!==this.readInt(10,void 0,!0)||this.raise(t,"Invalid number");var s=this.pos-t>=2&&48===this.input.charCodeAt(t);s&&this.strict&&this.raise(t,"Invalid number");var i=this.input.charCodeAt(this.pos);if(!s&&!e&&this.options.ecmaVersion>=11&&110===i){var r=Ve(this.input.slice(t,this.pos));return++this.pos,u(this.fullCharCodeAtPos())&&this.raise(this.pos,"Identifier directly after number"),this.finishToken(w.num,r)}s&&/[89]/.test(this.input.slice(t,this.pos))&&(s=!1),46!==i||s||(++this.pos,this.readInt(10),i=this.input.charCodeAt(this.pos)),69!==i&&101!==i||s||(43!==(i=this.input.charCodeAt(++this.pos))&&45!==i||++this.pos,null===this.readInt(10)&&this.raise(t,"Invalid number")),u(this.fullCharCodeAtPos())&&this.raise(this.pos,"Identifier directly after number");var n,a=(n=this.input.slice(t,this.pos),s?parseInt(n,8):parseFloat(n.replace(/_/g,"")));return this.finishToken(w.num,a)},Ne.readCodePoint=function(){var e;if(123===this.input.charCodeAt(this.pos)){this.options.ecmaVersion<6&&this.unexpected();var t=++this.pos;e=this.readHexChar(this.input.indexOf("}",this.pos)-this.pos),++this.pos,e>1114111&&this.invalidStringToken(t,"Code point out of bounds")}else e=this.readHexChar(4);return e},Ne.readString=function(e){for(var t="",s=++this.pos;;){this.pos>=this.input.length&&this.raise(this.start,"Unterminated string constant");var i=this.input.charCodeAt(this.pos);if(i===e)break;92===i?(t+=this.input.slice(s,this.pos),t+=this.readEscapedChar(!1),s=this.pos):(k(i,this.options.ecmaVersion>=10)&&this.raise(this.start,"Unterminated string constant"),++this.pos)}return t+=this.input.slice(s,this.pos++),this.finishToken(w.string,t)};var Be={};Ne.tryReadTemplateToken=function(){this.inTemplateElement=!0;try{this.readTmplToken()}catch(e){if(e!==Be)throw e;this.readInvalidTemplateToken()}this.inTemplateElement=!1},Ne.invalidStringToken=function(e,t){if(this.inTemplateElement&&this.options.ecmaVersion>=9)throw Be;this.raise(e,t)},Ne.readTmplToken=function(){for(var e="",t=this.pos;;){this.pos>=this.input.length&&this.raise(this.start,"Unterminated template");var s=this.input.charCodeAt(this.pos);if(96===s||36===s&&123===this.input.charCodeAt(this.pos+1))return this.pos!==this.start||this.type!==w.template&&this.type!==w.invalidTemplate?(e+=this.input.slice(t,this.pos),this.finishToken(w.template,e)):36===s?(this.pos+=2,this.finishToken(w.dollarBraceL)):(++this.pos,this.finishToken(w.backQuote));if(92===s)e+=this.input.slice(t,this.pos),e+=this.readEscapedChar(!0),t=this.pos;else if(k(s)){switch(e+=this.input.slice(t,this.pos),++this.pos,s){case 13:10===this.input.charCodeAt(this.pos)&&++this.pos;case 10:e+="\n";break;default:e+=String.fromCharCode(s)}this.options.locations&&(++this.curLine,this.lineStart=this.pos),t=this.pos}else++this.pos}},Ne.readInvalidTemplateToken=function(){for(;this.pos<this.input.length;this.pos++)switch(this.input[this.pos]){case"\\":++this.pos;break;case"$":if("{"!==this.input[this.pos+1])break;case"`":return this.finishToken(w.invalidTemplate,this.input.slice(this.start,this.pos))}this.raise(this.start,"Unterminated template")},Ne.readEscapedChar=function(e){var t=this.input.charCodeAt(++this.pos);switch(++this.pos,t){case 110:return"\n";case 114:return"\r";case 120:return String.fromCharCode(this.readHexChar(2));case 117:return De(this.readCodePoint());case 116:return"\t";case 98:return"\b";case 118:return"\v";case 102:return"\f";case 13:10===this.input.charCodeAt(this.pos)&&++this.pos;case 10:return this.options.locations&&(this.lineStart=this.pos,++this.curLine),"";case 56:case 57:if(this.strict&&this.invalidStringToken(this.pos-1,"Invalid escape sequence"),e){var s=this.pos-1;return this.invalidStringToken(s,"Invalid escape sequence in template string"),null}default:if(t>=48&&t<=55){var i=this.input.substr(this.pos-1,3).match(/^[0-7]+/)[0],r=parseInt(i,8);return r>255&&(i=i.slice(0,-1),r=parseInt(i,8)),this.pos+=i.length-1,t=this.input.charCodeAt(this.pos),"0"===i&&56!==t&&57!==t||!this.strict&&!e||this.invalidStringToken(this.pos-1-i.length,e?"Octal literal in template string":"Octal literal in strict mode"),String.fromCharCode(r)}return k(t)?"":String.fromCharCode(t)}},Ne.readHexChar=function(e){var t=this.pos,s=this.readInt(16,e);return null===s&&this.invalidStringToken(t,"Bad character escape sequence"),s},Ne.readWord1=function(){this.containsEsc=!1;for(var e="",t=!0,s=this.pos,i=this.options.ecmaVersion>=6;this.pos<this.input.length;){var r=this.fullCharCodeAtPos();if(d(r,i))this.pos+=r<=65535?1:2;else{if(92!==r)break;this.containsEsc=!0,e+=this.input.slice(s,this.pos);var n=this.pos;117!==this.input.charCodeAt(++this.pos)&&this.invalidStringToken(this.pos,"Expecting Unicode escape sequence \\uXXXX"),++this.pos;var a=this.readCodePoint();(t?u:d)(a,i)||this.invalidStringToken(n,"Invalid Unicode escape"),e+=De(a),s=this.pos}t=!1}return e+this.input.slice(s,this.pos)},Ne.readWord=function(){var e=this.readWord1(),t=w.name;return this.keywords.test(e)&&(t=y[e]),this.finishToken(t,e)};var Re="8.3.0";F.acorn={Parser:F,version:Re,defaultOptions:D,Position:O,SourceLocation:N,getLineInfo:V,Node:ne,TokenType:f,tokTypes:w,keywordTypes:y,TokContext:ce,tokContexts:pe,isIdentifierChar:d,isIdentifierStart:u,Token:Oe,isNewLine:k,lineBreak:v,lineBreakG:b,nonASCIIwhitespace:S},e.Node=ne,e.Parser=F,e.Position=O,e.SourceLocation=N,e.TokContext=ce,e.Token=Oe,e.TokenType=f,e.defaultOptions=D,e.getLineInfo=V,e.isIdentifierChar=d,e.isIdentifierStart=u,e.isNewLine=k,e.keywordTypes=y,e.lineBreak=v,e.lineBreakG=b,e.nonASCIIwhitespace=S,e.parse=function(e,t){return F.parse(e,t)},e.parseExpressionAt=function(e,t,s){return F.parseExpressionAt(e,t,s)},e.tokContexts=pe,e.tokTypes=w,e.tokenizer=function(e,t){return F.tokenizer(e,t)},e.version=Re,Object.defineProperty(e,"__esModule",{value:!0})}(t)},9329:e=>{var t="";const s=(e,s)=>t.slice(e,s);var i=[];e.exports={init:e=>{(e=>{t=e})(e),i=[]},addComma:e=>i.push(e),checkComma:(e,t,r)=>{const n=s(e,t);let a=!0,o=!0,c=0;for(let e=n.length-1;e>=0;e-=1){let t=n[e];if(" "!==t&&"\n"!==t&&"\t"!==t)if(","===t&&o)o=!1;else{if(n[e]!==r||!a){c=e;break}a=!1}}e+=c;for(let s=0;s<i.length;s+=1){let r=i[s];if(e<=r&&r<t)return p=s,i=(h=i).slice(0,p).concat(h.slice(p+1,h.length)),!0}var p,h;return!1},createSemicolon:(e,t)=>{let i=s(e,t).split(";").length-1;return Array(i).fill(null)},checkCoverCallExpressionAndAsyncArrowHead:(e,t)=>{let i=s(e,t);return i.indexOf("(")>-1&&i.indexOf(")")>-1}}},7688:e=>{e.exports=class{constructor(e,t){this.kind=e,this.str=t}compress(){return[this.kind,this.str]}}},4147:(e,t,s)=>{const i=s(7688);class r{constructor(e,t,s,i,r){void 0===i&&(i=[]),void 0===r&&(r=[]),t?.loc&&(this.loc=t.loc),this.kind=e,this.index=s,this.children=i,this.params=r}compress(){let e=[],t=[{parent:e,target:this}];for(;t.length>0;){let{parent:e,target:s}=t.shift();if(s instanceof i)e.push(s.compress());else if(s instanceof r){let i=[],r=[s.index,i,s.params.map(Number),s.compressedLoc()];e.push(r),s.children.forEach((e=>{t.push({parent:i,target:e})}))}else e.push(s)}return e[0]}compressedLoc(){if(!this.loc)return[-1,-1,-1,-1];let{start:e,end:t}=this.loc;return[e.line,e.column,t.line,t.column]}}r.fromList=(e,t,s,i)=>{let n;for(let a of t){let t=s(a);void 0===n?n=new r(e,a,0,[t],i):(n=new r(e,a,1,[n,t],i),n.end=t.end)}return n},r.getRhs=(e,t,s)=>{let i=e.indexOf(s.type);return-1===i?null:{index:i,child:t[i](s)}},r.TODO=e=>{throw`[TODO] ${e}`},r.getBinary=(e,t,s,i)=>{let{operator:r,left:n,right:a}=e,o=t.indexOf(r)+1,c={index:o};if(o>0){let e=s(n),t=i(a);c.children=[e,t]}else{let t=i(e);c.children=[t]}return c},e.exports=r},2570:(e,t,s)=>{const i=s(1234),{init:r,addComma:n}=s(9329);e.exports=class{constructor(e){this.ecmaVersion=e,this.Script=s(9613)(`./es${this.ecmaVersion}/Script`)}acornParse(e){try{return r(e),i.parse(e,{ecmaVersion:this.ecmaVersion,preserveParens:!0,locations:!0,onTrailingComma:(e,t)=>n(e)})}catch(e){console.error(`[SyntaxError] ${e}`)}}trans(e){return this.Script(e)}parse(e){const t=this.acornParse(e);return this.trans(t)}parseWithCompress(e){return JSON.stringify(this.parse(e).compress())}}},8422:(e,t,s)=>{const i=s(4147);let r=(e,t)=>n=>{let a=s(2659),o=[e,t],{type:c}=n;switch(c){case"AwaitExpression":case"UnaryExpression":case"UpdateExpression":case"CallExpression":case"NewExpression":case"MemberExpression":case"ObjectExpression":case"ArrayExpression":case"FunctionExpression":case"ClassExpression":case"SequenceExpression":case"ParenthesizedExpression":case"TaggedTemplateExpression":case"TemplateLiteral":case"Identifier":case"ThisExpression":case"ArrayPattern":case"ObjectPattern":case"MetaProperty":case"Literal":{let s=a(e,t)(n);return new i("AdditiveExpression",n,0,[s],o)}case"BinaryExpression":{let{index:s,children:c}=i.getBinary(n,["+","-"],r(e,t),a(e,t));return new i("AdditiveExpression",n,s,c,o)}default:i.TODO(`${c} @ AdditiveExpression`)}i.TODO("AdditiveExpression")};e.exports=r},4182:(e,t,s)=>{const i=s(4147);let r=(e,t)=>n=>{const a=s(4043);let o,c,p=[e,t],h=n.length,l=n.pop();if("SpreadElement"!=l.type?(o=a(!0,e,t)(l),c=0):(o=a(!0,e,t)(l.argument),c=1),1==h)return new i("ArgumentList",l,c,[o],p);{c+=2;let s=r(e,t)(n);return new i("ArgumentList",l,c,[s,o],p)}};e.exports=r},270:(e,t,s)=>{const i=s(4147);e.exports=(e,t)=>(r,n)=>{const a=s(4182);let o=[e,t];if(0==r.length)return new i("Arguments",r,0,[],o);{let s=a(e,t)(r);return new i("Arguments",r,n?2:1,[s],o)}}},6594:(e,t,s)=>{const i=s(4147),{checkComma:r}=s(9329);e.exports=(e,t)=>n=>{let a=s(5151),o=s(9597),c=s(2786),p=[e,t],h=n.elements;if(h.every((e=>null===e))){let e=null;return h.length>0&&(e=a(h)),new i("ArrayBindingPattern",n,0,[e,null],p)}{let s=h.pop();const l=r(n.start,n.end,"]");if(null===s||l){l&&h.push(s);let r=[];for(let e=h.length-1;e>=0&&null===h[e];e-=1)r.push(h.pop());let c=null;r.length>0&&(c=a(r));let u=o(e,t)(h);return new i("ArrayBindingPattern",n,2,[u,c,null],p)}if("RestElement"===s.type){let r=c(e,t)(s);if(h.every((e=>null===e))){let e=null;return h.length>0&&(e=a(h)),new i("ArrayBindingPattern",n,0,[e,r],p)}let l=[];for(let e=h.length-1;e>=0&&null===h[e];e-=1)l.push(h.pop());let u=null;l.length>0&&(u=a(l));let d=o(e,t)(h);return new i("ArrayBindingPattern",n,2,[d,u,r],p)}{h.push(s);let r=o(e,t)(h);return new i("ArrayBindingPattern",n,1,[r],p)}}}},8365:(e,t,s)=>{const i=s(4147),{checkComma:r}=s(9329);e.exports=(e,t)=>n=>{let a=s(5151),o=s(4690),c=[e,t],{elements:p}=n,h=p.length;if(0==h)return new i("ArrayLiteral",n,0,[null],c);if(p.every((e=>null==e))){let e=a(p);return new i("ArrayLiteral",n,0,[e],c)}if(null!=p[h-1]){let s=o(e,t)(p);return r(n.start,n.end,"]")?new i("ArrayLiteral",n,2,[s,null],c):new i("ArrayLiteral",n,1,[s],c)}{let s=[];for(let e=p.length-1;e>=0&&null===p[e];e-=1)s.push(p.pop());let r=null;s.length>0&&(r=a(s));let h=o(e,t)(p);return new i("ArrayLiteral",n,2,[h,r],c)}}},7078:(e,t,s)=>{const i=s(4147);e.exports=(e,t,r)=>n=>{const a=s(833),o=s(2553);n.params.start=n.start,n.params.end=n.body.start;let c=[e,t,r],p=a(t,r)(n.params),h=o(e)(n.body);return new i("ArrowFunction",n,0,[p,h],c)}},833:(e,t,s)=>{const i=s(4147),{checkCoverCallExpressionAndAsyncArrowHead:r}=s(9329);e.exports=(e,t)=>n=>{const a=s(2904),o=s(4947);let c=[e,t];if(r(n.start,n.end)){let s=o(e,t)(n);return new i("ArrowParameters",n,1,[s],c)}{let s=a(e,t)(n[0]);return new i("ArrowParameters",n,0,[s],c)}}},4043:(e,t,s)=>{const i=s(4147);let r=(e,t,n)=>a=>{const o=s(4732),c=s(1542),p=s(7078),h=s(7636),l=s(6411);let u=[e,t,n],{type:d}=a;switch(d){case"AwaitExpression":case"UnaryExpression":case"LogicalExpression":case"BinaryExpression":case"UpdateExpression":case"CallExpression":case"NewExpression":case"MemberExpression":case"ObjectExpression":case"ArrayExpression":case"FunctionExpression":case"ClassExpression":case"SequenceExpression":case"ParenthesizedExpression":case"TemplateLiteral":case"TaggedTemplateExpression":case"Identifier":case"ThisExpression":case"ArrayPattern":case"ObjectPattern":case"ConditionalExpression":case"MetaProperty":case"Literal":{let s=o(e,t,n)(a);return new i("AssignmentExpression",a,0,[s],u)}case"YieldExpression":{let t=c(e,n)(a);return new i("AssignmentExpression",a,1,[t],u)}case"ArrowFunctionExpression":if(a.async){let s=h(e,t,n)(a);return new i("AssignmentExpression",a,3,[s],u)}{let s=p(e,t,n)(a);return new i("AssignmentExpression",a,2,[s],u)}case"AssignmentPattern":{const{left:s,right:o}=a,c=l(t,n)(s),p=r(e,t,n)(o);return new i("AssignmentExpression",a,4,[c,p],u)}case"AssignmentExpression":{let{left:s,operator:o,right:c}=a,p=l(t,n)(s),h=r(e,t,n)(c),d=new i("AssignmentExpression",a,4,[p,h],u);switch(o){case"=":break;case"&&=":d.index=6;break;case"||=":d.index=7;break;case"??=":d.index=8;break;default:{let e=["*=","/=","%=","+=","-=","<<=",">>=",">>>=","&=","^=","|=","**="].indexOf(o),t=new i("AssignmentOperator",{},e);d.index=5,d.children=[p,t,h]}}return d}default:i.TODO(`${d} @ AssignmentExpression`)}};e.exports=r},8839:(e,t,s)=>{const i=s(4147);e.exports=e=>t=>{const r=s(2904);let n=[e],a=r(e,!0)(t);return new i("AsyncArrowBindingIdentifier",t,0,[a],n)}},7636:(e,t,s)=>{const i=s(4147),{checkCoverCallExpressionAndAsyncArrowHead:r}=s(9329);e.exports=(e,t,n)=>a=>{const o=s(8839),c=s(2064),p=s(31),h=r(a.start,a.body.start);let l=[e,t,n],u=c(e)(a.body);if(h){let e={callee:{type:"Identifier",name:"async"},arguments:a.params},s=p(t,n)(e);return new i("AsyncArrowFunction",a,1,[s,u],l)}{let e=o(t)(a.params[0]);return new i("AsyncArrowFunction",a,0,[e,u],l)}}},2064:(e,t,s)=>{const i=s(4147);e.exports=e=>t=>{const r=s(458),n=s(8610);let a=[e];if(t.body){let e=n(t);return new i("AsyncConciseBody",t,1,[e],a)}{let s=r(e,!0)(t);return new i("AsyncConciseBody",t,0,[s],a)}}},8610:(e,t,s)=>{const i=s(4147);e.exports=e=>{let t=s(4815)(!1,!0)(e);return new i("AsyncFunctionBody",e,0,[t])}},6659:(e,t,s)=>{const i=s(4147),{checkComma:r}=s(9329);e.exports=(e,t,n)=>a=>{const o=s(2904),c=s(9880),p=s(8610);let h=[e,t,n],{id:l,body:u}=a,d=r(l.end,u.start,")"),f=c(!1,!0)(a.params,d),x=p(u);if(l){let s=o(e,t)(l);return new i("AsyncFunctionDeclaration",a,0,[s,f,x],h)}return new i("AsyncFunctionDeclaration",a,1,[f,x],h)}},4417:(e,t,s)=>{const i=s(4147),{checkComma:r}=s(9329);e.exports=e=>{const t=s(2904),n=s(9880),a=s(8610);let{id:o,params:c,body:p}=e,h=null;null!=o&&(h=t(!1,!0)(o));let l=r(e.start,p.start,")"),u=n(!1,!0)(c,l),d=a(p);return new i("AsyncFunctionExpression",e,0,[h,u,d])}},7809:(e,t,s)=>{const i=s(4147);e.exports=e=>{let t=s(4815)(!0,!0)(e);return new i("AsyncGeneratorBody",e,0,[t])}},5462:(e,t,s)=>{const i=s(4147),{checkComma:r}=s(9329);e.exports=(e,t,n)=>a=>{const o=s(2904),c=s(9880),p=s(7809);let h=[e,t,n],{id:l,body:u}=a,d=r(l.end,u.start,")"),f=c(!0,!0)(a.params,d),x=p(u);if(l){let s=o(e,t)(l);return new i("AsyncGeneratorDeclaration",a,0,[s,f,x],h)}return new i("AsyncGeneratorDeclaration",a,1,[f,x],h)}},8354:(e,t,s)=>{const i=s(4147),{checkComma:r}=s(9329);e.exports=e=>{const t=s(2904),n=s(9880),a=s(7809);let{id:o,params:c,body:p}=e,h=null;null!=o&&(h=t(!0,!0)(o));let l=r(e.start,p.start,")"),u=n(!0,!0)(c,l),d=a(p);return new i("AsyncGeneratorExpression",e,0,[h,u,d])}},6354:(e,t,s)=>{const i=s(4147),{checkComma:r}=s(9329);e.exports=(e,t)=>n=>{const a=s(6086),o=s(2291),c=s(7809);let p=[e,t],h=a(e,t)(n),l=r(n.key.end,n.value.body.start,")"),u=o(!0,!0)(n.value.params,l),d=c(n.value.body);return new i("AsyncGeneratorMethod",n,0,[h,u,d],p)}},8931:(e,t,s)=>{const i=s(4147),{checkComma:r}=s(9329);e.exports=(e,t)=>n=>{const a=s(6086),o=s(2291),c=s(8610);let p=[e,t],h=a(e,t)(n),l=r(n.key.end,n.value.body.start,")"),u=o(!1,!0)(n.value.params,l),d=c(n.value.body);return new i("AsyncMethod",n,0,[h,u,d],p)}},4118:(e,t,s)=>{const i=s(4147);e.exports=e=>t=>{const r=s(3778);let n=[e],a=r(e,!0)(t.argument);return new i("AwaitExpression",t,0,[a],n)}},943:(e,t,s)=>{const i=s(4147);e.exports=(e,t)=>r=>{const n=s(2122),a=s(5095),o=s(6038);let c=[e,t],{type:p}=r;switch(p){case"Identifier":{let s=n(e,t)(r);return new i("BindingElement",r,0,[s],c)}case"AssignmentPattern":{let{left:s,right:p}=r;if("Identifier"===s.type){let s=n(e,t)(r);return new i("BindingElement",r,0,[s],c)}{let n=a(e,t)(s),h=o(!0,e,t)(p);return new i("BindingElement",r,1,[n,h],c)}}case"ArrayPattern":case"ObjectPattern":{let s=a(e,t)(r);return new i("BindingElement",r,1,[s,null],c)}default:i.TODO(`${p} @ BindingElement`)}}},9597:(e,t,s)=>{const i=s(4147);let r=(e,t)=>n=>{let a=s(2876),o=[e,t],c=[n.pop()];for(let e=n.length-1;e>=0&&null===n[e];e-=1)c.unshift(n.pop());if(0===n.length){let s=a(e,t)(c);return new i("BindingElementList",n,0,[s],o)}{let s=a(e,t)(c),p=r(e,t)(n);return new i("BindingElementList",n,1,[p,s],o)}};e.exports=r},2876:(e,t,s)=>{const i=s(4147);e.exports=(e,t)=>r=>{let n=s(943),a=s(5151),o=[e,t],c=n(e,t)(r.pop()),p=null;return r.length>0&&(p=a(r)),new i("BindingElisionElement",r,0,[p,c],o)}},2904:(e,t,s)=>{const i=s(4147);e.exports=(e,t)=>r=>{const n=s(3326);let a=[e,t];if(!e&&!t)return new i("BindingIdentifier",r,0,[n(r)],a);switch(r.name){case"yield":return new i("BindingIdentifier",r,1,[],a);case"await":return new i("BindingIdentifier",r,2,[],a);default:return new i("BindingIdentifier",r,0,[n(r)],a)}}},2690:(e,t,s)=>{const i=s(4147);e.exports=(e,t,r)=>n=>{let a=s(9676)(e,t,r),o=[e,t,r];return i.fromList("BindingList",n,a,o)}},5095:(e,t,s)=>{const i=s(4147);e.exports=(e,t)=>r=>{let n=s(753),a=s(6594),o=[e,t];if("ArrayPattern"===r.type){let s=a(e,t)(r);return new i("BindingPattern",r,1,[s],o)}{let s=n(e,t)(r);return new i("BindingPattern",r,0,[s],o)}}},265:(e,t,s)=>{const i=s(4147);e.exports=(e,t)=>r=>{let n=s(2122),a=s(6086),o=s(943),c=[e,t],{shorthand:p,key:h,value:l}=r;if(p){let s;return s="Identifier"===h.type&&"Identifier"===l.type&&h.name===l.name?n(e,t)(h):n(e,t)({left:h,right:l}),new i("BindingProperty",r,0,[s],c)}{let s=a(e,t)(r),n=o(e,t)(l);return new i("BindingProperty",r,1,[s,n],c)}}},846:(e,t,s)=>{const i=s(4147);e.exports=(e,t)=>r=>{let n=s(265)(e,t),a=[e,t];return i.fromList("BindingPropertyList",r,n,a)}},2786:(e,t,s)=>{const i=s(4147);e.exports=(e,t)=>r=>{const n=s(2904),a=s(5095);let o=[e,t],{argument:c}=r,{type:p}=c;if("Identifier"==p){let s=n(e,t)(c);return new i("BindingRestElement",r,0,[s],o)}{let s=a(e,t)(c);return new i("BindingRestElement",r,1,[s],o)}}},2814:(e,t,s)=>{const i=s(4147);e.exports=(e,t)=>r=>{let n=s(2904),a=[e,t],o=n(e,t)(r.argument);return new i("BindingRestProperty",r,0,[o],a)}},3643:(e,t,s)=>{const i=s(4147);let r=(e,t,n)=>a=>{let o=s(8747),c=[e,t,n],{type:p}=a;switch(p){case"AwaitExpression":case"UnaryExpression":case"UpdateExpression":case"CallExpression":case"NewExpression":case"MemberExpression":case"ObjectExpression":case"ArrayExpression":case"FunctionExpression":case"ClassExpression":case"SequenceExpression":case"ParenthesizedExpression":case"TemplateLiteral":case"TaggedTemplateExpression":case"Identifier":case"ThisExpression":case"ArrayPattern":case"ObjectPattern":case"MetaProperty":case"Literal":{let s=o(e,t,n)(a);return new i("BitwiseANDExpression",a,0,[s],c)}case"BinaryExpression":{let{index:s,children:p}=i.getBinary(a,["&"],r(e,t,n),o(e,t,n));return new i("BitwiseANDExpression",a,s,p,c)}default:i.TODO(`${p} @ BitwiseANDExpression`)}i.TODO("BitwiseANDExpression")};e.exports=r},8944:(e,t,s)=>{const i=s(4147);let r=(e,t,n)=>a=>{let o=s(5328),c=[e,t,n],{type:p}=a;switch(p){case"AwaitExpression":case"UnaryExpression":case"UpdateExpression":case"CallExpression":case"NewExpression":case"MemberExpression":case"ObjectExpression":case"ArrayExpression":case"FunctionExpression":case"ClassExpression":case"SequenceExpression":case"ParenthesizedExpression":case"TemplateLiteral":case"TaggedTemplateExpression":case"Identifier":case"ThisExpression":case"ArrayPattern":case"ObjectPattern":case"MetaProperty":case"Literal":{let s=o(e,t,n)(a);return new i("BitwiseORExpression",a,0,[s],c)}case"BinaryExpression":{let{index:s,children:p}=i.getBinary(a,["|"],r(e,t,n),o(e,t,n));return new i("BitwiseORExpression",a,s,p,c)}default:i.TODO(`${p} @ BitwiseORExpression`)}i.TODO("BitwiseORExpression")};e.exports=r},5328:(e,t,s)=>{const i=s(4147);let r=(e,t,n)=>a=>{let o=s(3643),c=[e,t,n],{type:p}=a;switch(p){case"AwaitExpression":case"UnaryExpression":case"UpdateExpression":case"CallExpression":case"NewExpression":case"MemberExpression":case"ObjectExpression":case"ArrayExpression":case"FunctionExpression":case"ClassExpression":case"SequenceExpression":case"ParenthesizedExpression":case"TemplateLiteral":case"TaggedTemplateExpression":case"Identifier":case"ThisExpression":case"ArrayPattern":case"ObjectPattern":case"MetaProperty":case"Literal":{let s=o(e,t,n)(a);return new i("BitwiseXORExpression",a,0,[s],c)}case"BinaryExpression":{let{index:s,children:p}=i.getBinary(a,["^"],r(e,t,n),o(e,t,n));return new i("BitwiseXORExpression",a,s,p,c)}default:i.TODO(`${p} @ BitwiseXORExpression`)}i.TODO("BitwiseXORExpression")};e.exports=r},3396:(e,t,s)=>{const i=s(4147);e.exports=(e,t,r)=>n=>{const a=s(5963);let o=[e,t,r],c=null;return n.body.length>0&&(c=a(e,t,r)(n.body)),new i("Block",n,0,[c],o)}},8901:(e,t,s)=>{const i=s(4147);e.exports=(e,t,r)=>n=>{const a=s(3396);let o=[e,t,r],c=a(e,t,r)(n);return new i("BlockStatement",n,0,[c],o)}},6556:(e,t,s)=>{const i=s(4147);e.exports=(e,t)=>r=>{const n=s(4362);let a=[e,t],{label:o}=r;if(null==o)return new i("BreakStatement",r,0,[],a);{let s=n(e,t)(o);return new i("BreakStatement",r,1,[s],a)}}},8473:(e,t,s)=>{const i=s(4147);e.exports=(e,t,r)=>n=>{const a=s(2069),o=s(7208);let c=[e,t,r];switch(n.type){case"SwitchStatement":{let s=o(e,t,r)(n);return new i("BreakableStatement",n,1,[s],c)}default:{let s=a(e,t,r)(n);return new i("BreakableStatement",n,0,[s],c)}}}},3530:(e,t,s)=>{const i=s(4147),r=s(7688);let n=(e,t)=>a=>{const o=s(31),c=s(2645),p=s(270),h=s(1916),l=s(7037);let u=[e,t],{type:d,callee:f}=a;if("MemberExpression"===d){const{object:s,property:o,computed:p}=a,h=n(e,t)(s);if(p){const s=c(!0,e,t)(o);return new i("CallExpression",a,4,[h,s],u)}{let e=new r("IdentifierName",o.name);return new i("CallExpression",a,5,[h,e],u)}}if("TaggedTemplateExpression"===d){const s=n(e,t)(a.tag),r=l(e,t,!0)(a.quasi);return new i("CallExpression",a,6,[s,r],u)}if("CallExpression"==d){if("Super"==f.type){const s=h(e,t)(a);return new i("CallExpression",a,1,[s],u)}if("MemberExpression"===f.type&&"CallExpression"===f.object.type||"CallExpression"===f.type){const s=n(e,t)(f),r=p(e,t)(a.arguments);return new i("CallExpression",a,3,[s,r],u)}{let s=o(e,t)(a);return new i("CallExpression",a,0,[s],u)}}i.TODO(`${d} @ CallExpression`)};e.exports=n},1633:(e,t,s)=>{const i=s(4147);e.exports=(e,t,r)=>n=>{const a=s(8150),o=s(4715);let c=[e,t,r],p=n.findIndex((e=>null==e.test)),h=n.length;if(-1==p){let s=null;return h>0&&(s=a(e,t,r)(n)),new i("CaseBlock",{},0,[s],c)}{let s=null,h=n.slice(0,p);h.length>0&&(s=a(e,t,r)(h));let l=o(e,t,r)(n[p]),u=null,d=n.slice(p+1);return d.length>0&&(u=a(e,t,r)(d)),new i("CaseBlock",{},1,[s,l,u],c)}}},1316:(e,t,s)=>{const i=s(4147);e.exports=(e,t,r)=>n=>{const a=s(2645),o=s(5963);let c=[e,t,r],p=a(!0,e,t)(n.test),h=null;return n.consequent.length>0&&(h=o(e,t,r)(n.consequent)),new i("CaseClause",n,0,[p,h],c)}},8150:(e,t,s)=>{const i=s(4147);e.exports=(e,t,r)=>n=>{let a=s(1316)(e,t,r),o=[e,t,r];return i.fromList("CaseClause",n,a,o)}},570:(e,t,s)=>{const i=s(4147);e.exports=(e,t,r)=>n=>{const a=s(7384),o=s(3396);let c=[e,t,r],{body:p,param:h}=n,l=o(e,t,r)(p);if(null!=h){let s=a(e,t)(h);return new i("Catch",n,0,[s,l],c)}return new i("Catch",n,1,[l],c)}},7384:(e,t,s)=>{const i=s(4147);e.exports=(e,t)=>r=>{const n=s(2904),a=s(5095);let o=[e,t],{type:c}=r;if("Identifier"===c){let s=n(e,t)(r);return new i("CatchParameter",r,0,[s],o)}if("ArrayPattern"===c||"ObjectPattern"===c){const s=a(e,t)(r);return new i("CatchParameter",r,1,[s],o)}i.TODO(`${c} @ CatchParameter`)}},7417:(e,t,s)=>{const i=s(4147);e.exports=(e,t)=>r=>{const n=s(9521);let a=[e,t],o=n(e,t)(r);return new i("ClassBody",r,0,[o],a)}},5109:(e,t,s)=>{const i=s(4147);e.exports=(e,t,r)=>n=>{const a=s(2904),o=s(2622);let c=[e,t,r],{id:p}=n,h=o(e,t)(n);if(p){let s=a(e,t)(p);return new i("ClassDeclaration",n,0,[s,h],c)}return new i("ClassDeclaration",n,1,[h],c)}},8222:(e,t,s)=>{const i=s(4147);e.exports=(e,t)=>r=>{const n=s(8162);let a=[e,t];if(null===r)return new i("ClassElement",r,2,[],a);{let{static:s}=r,o=0;s&&(o=1);let c=n(e,t)(r);return new i("ClassElement",r,o,[c],a)}}},9521:(e,t,s)=>{const i=s(4147);e.exports=(e,t)=>r=>{let n=s(8222)(e,t),a=[e,t];return i.fromList("ClassElementList",r.body,n,a)}},6359:(e,t,s)=>{const i=s(4147);e.exports=(e,t)=>r=>{const n=s(2904),a=s(2622);let o=[e,t],{id:c,superClass:p,body:h}=r,l=null;null!=c&&(l=n(e,t)(c));let u=a(e,t)({superClass:p,body:h});return new i("ClassExpression",r,0,[l,u],o)}},8771:(e,t,s)=>{const i=s(4147);e.exports=(e,t)=>r=>{let n=s(6411),a=[e,t],o=n(e,t)(r);return new i("ClassHeritage",r,0,[o],a)}},2622:(e,t,s)=>{const i=s(4147),{createSemicolon:r}=s(9329);e.exports=(e,t)=>n=>{const a=s(8771),o=s(7417);let c=[e,t],{superClass:p,body:h}=n,l=null;p&&(l=a(e,t)(p));let u=null,d=h.start,f=h.end;if(0===h.body.length)h.body=r(d,f);else{let e=0;for(;;){let t=h.body[e],s=h.body.slice(0,e),i=r(d,t.start),n=h.body.slice(e,h.body.length);if(h.body=s.concat(i).concat(n),e+=1+i.length,d=t.end,e>=h.body.length){let e=r(t.end,f);h.body=h.body.concat(e);break}}}return h.body.length>0&&(u=o(e,t)(h)),new i("ClassTail",n,0,[l,u],c)}},6527:(e,t,s)=>{const i=s(4147);e.exports=(e,t)=>r=>{let n=s(4043),a=[e,t],o=n(!0,e,t)(r);return new i("ComputedPropertyName",r,0,[o],a)}},2553:(e,t,s)=>{const i=s(4147);e.exports=e=>t=>{const r=s(458),n=s(4815);let a=[e],{type:o}=t;if("BlockStatement"!=o){let s=r(e,!1)(t);return new i("ConciseBody",t,0,[s],a)}{let e=n(!1,!1)(t);return new i("ConciseBody",t,1,[e],a)}}},4732:(e,t,s)=>{const i=s(4147);e.exports=(e,t,r)=>n=>{let a=s(6135),o=s(4043),c=[e,t,r],{type:p}=n;switch(p){case"AwaitExpression":case"UnaryExpression":case"LogicalExpression":case"BinaryExpression":case"UpdateExpression":case"CallExpression":case"NewExpression":case"MemberExpression":case"ObjectExpression":case"ArrayExpression":case"FunctionExpression":case"ClassExpression":case"SequenceExpression":case"ParenthesizedExpression":case"TemplateLiteral":case"TaggedTemplateExpression":case"Identifier":case"ThisExpression":case"ArrayPattern":case"ObjectPattern":case"MetaProperty":case"Literal":{let s=a(e,t,r)(n);return new i("ConditionalExpression",n,0,[s],c)}case"ConditionalExpression":{let s=a(e,t,r)(n.test),p=o(!0,t,r)(n.consequent),h=o(e,t,r)(n.alternate);return new i("ConditionalExpression",n,1,[s,p,h],c)}default:i.TODO(`${p} @ ConditionalExpression`)}i.TODO("ConditionalExpression")}},1844:(e,t,s)=>{const i=s(4147);e.exports=(e,t)=>r=>{const n=s(4362);let a=[e,t];if(null===r.label)return new i("ContinueStatement",r,0,[],a);{let s=n(e,t)(r.label);return new i("ContinueStatement",r,1,[s],a)}}},31:(e,t,s)=>{const i=s(4147),{checkComma:r}=s(9329);e.exports=(e,t)=>n=>{const a=s(8262),o=s(270);let c=[e,t],{callee:p}=n,h=a(e,t)(p),l=r(p.end,n.end,")"),u=o(e,t)(n.arguments,l);return new i("CoverCallExpressionAndAsyncArrowHead",n,0,[h,u],c)}},4461:(e,t,s)=>{const i=s(4147);e.exports=(e,t)=>r=>{const n=s(7168),a=s(6038);let o=[e,t],{left:c,right:p}=r,h=n(e,t)(c),l=a(!0,e,t)(p);return new i("CoverInitializedName",r,0,[h,l],o)}},4947:(e,t,s)=>{const i=s(4147);e.exports=(e,t)=>r=>{const n=s(2645),a=s(2904),o=s(5095);let c="CoverParenthesizedExpressionAndArrowParameterList",p=[e,t];"ParenthesizedExpression"==r.type&&(r="SequenceExpression"==(r=r.expression).type?r.expressions:[r]),"SequenceExpression"==r.type&&(r=r.expressions);let h=r.length;if(0==h)return new i(c,{},2,[],p);let l=r[h-1];if("RestElement"==l.type){if(1==h){if("Identifier"==l.argument.type){let s=a(e,t)(l.argument);return new i(c,l,3,[s],p)}{let s=o(e,t)(l.argument);return new i(c,l,4,[s],p)}}{r.pop();let s=n(!0,e,t)(r);if("Identifier"==l.argument.type){let n=a(e,t)(l.argument);return new i(c,r,5,[s,n],p)}{let n=o(e,t)(l.argument);return new i(c,r,6,[s,n],p)}}}{let s=n(!0,e,t)(r);return new i(c,{},0,[s],p)}}},310:(e,t,s)=>{const i=s(4147);e.exports=e=>new i("DebuggerStatement",e,0,[])},3319:(e,t,s)=>{const i=s(4147);e.exports=(e,t)=>r=>{const n=s(6027),a=s(9655),o=s(5109);let c=[e,t],{type:p}=r;switch(p){case"FunctionDeclaration":{let s=a(e,t,!1)(r);return new i("Declaration",r,0,[s],c)}case"ClassDeclaration":{let s=o(e,t,!1)(r);return new i("Declaration",r,1,[s],c)}case"VariableDeclaration":{let s=n(!0,e,t)(r);return new i("Declaration",r,2,[s],c)}default:i.TODO(`${p} @ Declaration`)}}},4715:(e,t,s)=>{const i=s(4147);e.exports=(e,t,r)=>n=>{const a=s(5963);let o=[e,t,r],c=null;return n.consequent.length>0&&(c=a(e,t,r)(n.consequent)),new i("DefaultClause",n,0,[c],o)}},6782:(e,t,s)=>{const i=s(4147);e.exports=(e,t,r)=>n=>{const a=s(3735),o=s(2645);let c=[e,t,r];const p=a(e,t,r)(n.body),h=o(!0,e,t)(n.test);return new i("DoWhileStatement",n,0,[p,h],c)}},4690:(e,t,s)=>{const i=s(4147);let r=(e,t)=>n=>{let a=s(5151),o=s(843),c=s(4043),p=[e,t],h=n.pop(),l=[];for(;n.length>0;){let e=n.pop();if(null!=e){n.push(e);break}l.push(e)}let u=null;if(l.length>0&&(u=a(l)),0==n.length)switch(h.type){case"SpreadElement":case"RestElement":{let s=o(e,t)(h);return new i("ElementList",h,1,[u,s],p)}default:{let s=c(!0,e,t)(h);return new i("ElementList",h,0,[u,s],p)}}else switch(h.type){case"SpreadElement":case"RestElement":{let s=r(e,t)(n),a=o(e,t)(h);return new i("ElementList",h,3,[s,u,a],p)}default:{let s=r(e,t)(n),a=c(!0,e,t)(h);return new i("ElementList",h,2,[s,u,a],p)}}};e.exports=r},5151:(e,t,s)=>{const i=s(4147);e.exports=e=>{let t=e.length,s=new i("Elision",{},0);for(let e=1;e<t;e++)s=new i("Elision",{},1,[s]);return s}},3900:(e,t,s)=>{const i=s(4147);e.exports=e=>new i("EmptyStatement",e,0)},8747:(e,t,s)=>{const i=s(4147);let r=(e,t,n)=>a=>{let o=s(5126),c=[e,t,n],{type:p}=a;switch(p){case"AwaitExpression":case"UnaryExpression":case"UpdateExpression":case"CallExpression":case"NewExpression":case"MemberExpression":case"ObjectExpression":case"ArrayExpression":case"FunctionExpression":case"ClassExpression":case"SequenceExpression":case"ParenthesizedExpression":case"TemplateLiteral":case"TaggedTemplateExpression":case"Identifier":case"ThisExpression":case"ArrayPattern":case"ObjectPattern":case"MetaProperty":case"Literal":{let s=o(e,t,n)(a);return new i("EqualityExpression",a,0,[s],c)}case"BinaryExpression":{let{index:s,children:p}=i.getBinary(a,["==","!=","===","!=="],r(e,t,n),o(e,t,n));return new i("EqualityExpression",a,s,p,c)}default:i.TODO(`${p} @ EqualityExpression`)}i.TODO("EqualityExpression")};e.exports=r},5952:(e,t,s)=>{const i=s(4147);let r=(e,t)=>n=>{let a=s(3778),o=s(9039),c=[e,t],{type:p}=n;switch(p){case"AwaitExpression":case"UnaryExpression":case"UpdateExpression":case"CallExpression":case"NewExpression":case"MemberExpression":case"ObjectExpression":case"ArrayExpression":case"FunctionExpression":case"ClassExpression":case"SequenceExpression":case"ParenthesizedExpression":case"TemplateLiteral":case"TaggedTemplateExpression":case"Identifier":case"ThisExpression":case"ArrayPattern":case"ObjectPattern":case"MetaProperty":case"Literal":{let s=a(e,t)(n);return new i("ExponentiationExpression",n,0,[s],c)}case"BinaryExpression":{let{operator:s,left:p,right:h}=n;if("**"==s){let s=o(e,t)(p),a=r(e,t)(h);return new i("ExponentiationExpression",n,1,[s,a],c)}let l=a(e,t)(n);return new i("ExponentiationExpression",n,0,[l],c)}default:i.TODO(`${p} @ ExponentiationExpression`)}i.TODO("ExponentiationExpression")};e.exports=r},2645:(e,t,s)=>{const i=s(4147);e.exports=(e,t,r)=>n=>{const a=s(4043);let o=[e,t,r],c=n.loc;if("SequenceExpression"===n.type?n=n.expressions:Array.isArray(n)||(n=[n]),1==n.length){let s=a(e,t,r)(n[0]),p=new i("Expression",n[0],0,[s],o);return p.loc=c,p}{let s=a(e,t,r),p=i.fromList("Expression",n,s,o);return p.loc=c,p}}},458:(e,t,s)=>{const i=s(4147);e.exports=(e,t)=>r=>{const n=s(4043);let a=[e,t],o=n(e,!1,t)(r);return new i("ExpressionBody",r,0,[o],a)}},7848:(e,t,s)=>{const i=s(4147);e.exports=(e,t)=>r=>{const n=s(2645);let a=[e,t],o=n(!0,e,t)(r.expression);return new i("ExpressionStatement",r,0,[o],a)}},2399:(e,t,s)=>{const i=s(4147);e.exports=(e,t,r)=>n=>{let a=s(3396),o=[e,t,r],c=a(e,t,r)(n);return new i("Finally",n,0,[c],o)}},5950:(e,t,s)=>{const i=s(4147);e.exports=(e,t)=>r=>{const n=s(2904),a=s(5095),o=[e,t],{id:c}=r;if("Identifier"==c.type){let s=n(e,t)(c);return new i("ForBinding",r,0,[s],o)}if("ArrayPattern"===c.type||"ObjectPattern"===c.type){const s=a(e,t)(c);return new i("ForBinding",r,1,[s],o)}i.TODO(`${c.type} @ ForBinding`)}},3468:(e,t,s)=>{const i=s(4147);e.exports=(e,t)=>r=>{const n=s(5950),a=s(8638);let o=[e,t],{kind:c,declarations:p}=r,h=a(c),l=n(e,t)(p[0]);return new i("ForDeclaration",r,0,[h,l],o)}},7866:(e,t,s)=>{const i=s(4147);e.exports=(e,t,r)=>n=>{const a=s(6411),o=s(2645),c=s(3735),p=s(5950),h=s(3468),l=s(4043);let u,d,f,x,m=[e,t,r],{type:g,await:y,left:E,right:w,body:v}=n;return"VariableDeclaration"!=E.type?(u=0,d=a(e,t)(E)):"var"==E.kind?(u=1,d=p(e,t)(E.declarations[0])):(u=2,d=h(e,t)(E)),"ForOfStatement"==g?(u+=3,f=l(!0,e,t)(w)):f=o(!0,e,t)(w),y&&(u+=3),x=c(e,t,r)(v),new i("ForInOfStatement",n,u,[d,f,x],m)}},5949:(e,t,s)=>{const i=s(4147);e.exports=(e,t,r)=>n=>{const a=s(2645),o=s(3735),c=s(6027),p=s(693);let h,l=[e,t,r],{init:u,test:d,update:f,body:x}=n,m=null;if(null!=u)switch(u.type){case"VariableDeclaration":"var"==u.kind?(h=1,m=p(!1,e,t)(u)):(h=2,m=c(!1,e,t)(u));break;default:h=0,m=a(!1,e,t)(u)}let g=null;null!=d&&(g=a(!0,e,t)(d));let y=null;null!=f&&(y=a(!0,e,t)(f));let E=o(e,t,r)(x);return new i("ForStatement",n,h,[m,g,y,E],l)}},2860:(e,t,s)=>{const i=s(4147);e.exports=(e,t)=>r=>{const n=s(943);let a=[e,t],o=n(e,t)(r);return new i("FormalParameter",r,0,[o],a)}},5065:(e,t,s)=>{const i=s(4147);e.exports=(e,t)=>r=>{let n=s(2860)(e,t),a=[e,t];return i.fromList("FormalParameterList",r,n,a)}},9880:(e,t,s)=>{const i=s(4147);e.exports=(e,t)=>(r,n)=>{const a=s(7256),o=s(5065);let c=[e,t],p=r.length,h=r[p-1];if(0==p)return new i("FormalParameters",{},0,[],c);if(1==p&&"RestElement"==h.type){let s=a(e,t)(h);return new i("FormalParameters",h,1,[s],c)}if("RestElement"!=h.type){let s=o(e,t)(r);return new i("FormalParameters",s,n?3:2,[s],c)}{r.pop();let s=o(e,t)(r),n=a(e,t)(h),p=new i("FormalParameters",{},4,[s,n],c);return p.start=s.start,p.end=n.end,p}}},4815:(e,t,s)=>{const i=s(4147);e.exports=(e,t)=>r=>{const n=s(297);let a=[e,t],o=n(e,t)(r);return new i("FunctionBody",r,0,[o],a)}},650:(e,t,s)=>{const i=s(4147),{checkComma:r}=s(9329);e.exports=(e,t,n)=>a=>{const o=s(2904),c=s(9880),p=s(4815);let h=[e,t,n],{id:l,body:u}=a,d=r(l.end,u.start,")"),f=c(!1,!1)(a.params,d),x=p(!1,!1)(u);if(l){let s=o(e,t)(l);return new i("FunctionDeclaration",a,0,[s,f,x],h)}return new i("FunctionDeclaration",a,1,[f,x],h)}},7476:(e,t,s)=>{const i=s(4147),{checkComma:r}=s(9329);e.exports=e=>{const t=s(2904),n=s(9880),a=s(4815);let{id:o,params:c,body:p}=e,h=null;null!=o&&(h=t(!1,!1)(o));let l=r(e.start,p.start,")"),u=n(!1,!1)(c,l),d=a(!1,!1)(p);return new i("FunctionExpression",e,0,[h,u,d])}},7256:(e,t,s)=>{const i=s(4147);e.exports=(e,t)=>r=>{const n=s(2786);let a=[e,t],o=n(e,t)(r);return new i("FunctionRestParameter",r,0,[o],a)}},297:(e,t,s)=>{const i=s(4147);e.exports=(e,t)=>r=>{const n=s(5963);let a=[e,t],o=null;return r.body.length>0&&(o=n(e,t,!0)(r.body)),new i("FunctionStatementList",r,0,[o],a)}},1452:(e,t,s)=>{const i=s(4147);e.exports=e=>{let t=s(4815)(!0,!1)(e);return new i("GeneratorBody",e,0,[t])}},5407:(e,t,s)=>{const i=s(4147),{checkComma:r}=s(9329);e.exports=(e,t,n)=>a=>{const o=s(2904),c=s(9880),p=s(1452);let h=[e,t,n],{id:l,body:u}=a,d=r(l.end,u.start,")"),f=c(!0,!1)(a.params,d),x=p(u);if(l){let s=o(e,t)(l);return new i("GeneratorDeclaration",a,0,[s,f,x],h)}return new i("GeneratorDeclaration",a,1,[f,x],h)}},2170:(e,t,s)=>{const i=s(4147),{checkComma:r}=s(9329);e.exports=e=>{const t=s(2904),n=s(9880),a=s(1452);let{id:o,params:c,body:p}=e,h=null;null!=o&&(h=t(!0,!1)(o));let l=r(e.start,p.start,")"),u=n(!0,!1)(c,l),d=a(p);return new i("GeneratorExpression",e,0,[h,u,d])}},7962:(e,t,s)=>{const i=s(4147),{checkComma:r}=s(9329);e.exports=(e,t)=>n=>{const a=s(6086),o=s(2291),c=s(1452);let p=[e,t],h=a(e,t)(n),l=r(n.key.end,n.value.body.start,")"),u=o(!0,!1)(n.value.params,l),d=c(n.value.body);return new i("GeneratorMethod",n,0,[h,u,d],p)}},9655:(e,t,s)=>{const i=s(4147);e.exports=(e,t,r)=>n=>{const a=s(650),o=s(5407),c=s(6659),p=s(5462);let h,l,u=[e,t,r],{async:d,generator:f}=n;return d||f?!d&&f?(h=1,l=o(e,t,r)(n)):d&&!f?(h=2,l=c(e,t,r)(n)):(h=3,l=p(e,t,r)(n)):(h=0,l=a(e,t,r)(n)),new i("HoistableDeclaration",n,h,[l],u)}},3326:(e,t,s)=>{const i=s(4147),r=s(7688);e.exports=e=>{let t=new r("(IdentifierName \\ (ReservedWord))",e.name);return new i("Identifier",e,0,[t])}},7168:(e,t,s)=>{const i=s(4147);e.exports=(e,t)=>r=>{let n=s(3326),a=[e,t];switch(r.name){case"yield":return new i("IdentifierReference",r,1,[],a);case"await":return new i("IdentifierReference",r,2,[],a);default:return new i("IdentifierReference",r,0,[n(r)],a)}}},4431:(e,t,s)=>{const i=s(4147);e.exports=(e,t,r)=>n=>{const a=s(2645),o=s(3735);let c=[e,t,r],{test:p,consequent:h,alternate:l}=n,u=a(!0,e,t)(p),d=o(e,t,r)(h);if(null!=l){let s=o(e,t,r)(l);return new i("IfStatement",n,0,[u,d,s],c)}return new i("IfStatement",n,1,[u,d],c)}},6038:(e,t,s)=>{const i=s(4147);e.exports=(e,t,r)=>n=>{let a=s(4043)(e,t,r)(n);return new i("Initializer",n,0,[a],[e,t,r])}},2069:(e,t,s)=>{const i=s(4147);e.exports=(e,t,r)=>n=>{const a=s(6782),o=s(8727),c=s(5949),p=s(7866);let h=[e,t,r],{type:l}=n;switch(l){case"DoWhileStatement":{let s=a(e,t,r)(n);return new i("IterationStatement",n,0,[s],h)}case"WhileStatement":{let s=o(e,t,r)(n);return new i("IterationStatement",n,1,[s],h)}case"ForStatement":{let s=c(e,t,r)(n);return new i("IterationStatement",n,2,[s],h)}case"ForOfStatement":case"ForInStatement":{let s=p(e,t,r)(n);return new i("IterationStatement",n,3,[s],h)}}}},4362:(e,t,s)=>{const i=s(4147);e.exports=(e,t)=>r=>{const n=s(3326);let a=[e,t];switch(r.name){case"yield":return new i("LabelIdentifier",r,1,[],a);case"await":return new i("LabelIdentifier",r,2,[],a);default:return new i("LabelIdentifier",r,0,[n(r)],a)}}},6792:(e,t,s)=>{const i=s(4147);e.exports=(e,t,r)=>n=>{const a=s(3735),o=s(650);let c=[e,t,r];switch(n.type){case"DoWhileStatement":case"WhileStatement":case"ForStatement":case"ExpressionStatement":case"BlockStatement":{let s=a(e,t,r)(n);return new i("LabelledItem",n,0,[s],c)}case"FunctionDeclaration":{let s=o(e,t,!1)(n);return new i("LabelledItem",n,1,[s],c)}default:i.TODO(`${n.type} @ LabelledItem`)}}},2199:(e,t,s)=>{const i=s(4147);e.exports=(e,t,r)=>n=>{const a=s(4362),o=s(6792);let c=[e,t,r];const p=a(e,t)(n.label),h=o(e,t,r)(n.body);return new i("LabelledStatement",n,0,[p,h],c)}},6411:(e,t,s)=>{const i=s(4147);e.exports=(e,t)=>r=>{const n=s(4817),a=s(3530);let o=[e,t],{type:c}=r;switch(c){case"MetaProperty":case"NewExpression":{let s=n(e,t)(r);return new i("LeftHandSideExpression",r,0,[s],o)}case"MemberExpression":{let s,c,p=r;for(;"MemberExpression"==p?.type;)p=p.object;return"CallExpression"==p?.type?(c=1,s=a(e,t)(r)):(c=0,s=n(e,t)(r)),new i("LeftHandSideExpression",r,c,[s],o)}case"ObjectExpression":case"ArrayExpression":case"FunctionExpression":case"ClassExpression":case"SequenceExpression":case"ParenthesizedExpression":case"TemplateLiteral":case"Identifier":case"ThisExpression":case"Literal":{let s=n(e,t)(r);return new i("LeftHandSideExpression",r,0,[s],o)}case"TaggedTemplateExpression":if("CallExpression"===r.tag.type){let s=a(e,t)(r);return new i("LeftHandSideExpression",r,1,[s],o)}{let s=n(e,t)(r);return new i("LeftHandSideExpression",r,0,[s],o)}case"CallExpression":{let s=a(e,t)(r);return new i("LeftHandSideExpression",r,1,[s],o)}case"ObjectPattern":case"ArrayPattern":{let s=n(e,t)(r);return new i("LeftHandSideExpression",r,0,[s],o)}default:i.TODO(`${c} @ LeftHandSideExpression`)}i.TODO("LeftHandSideExpression")}},8638:(e,t,s)=>{const i=s(4147);e.exports=e=>{let t=0;return"const"==e&&(t=1),new i("LetOrConst",{},t)}},9676:(e,t,s)=>{const i=s(4147);e.exports=(e,t,r)=>n=>{const a=s(2904),o=s(5095),c=s(6038),p=[e,t,r];if("Identifier"===n.id.type){let s=a(t,r)(n.id),o=null;return n.init&&(o=c(e,t,r)(n.init)),new i("LexicalBinding",n,0,[s,o],p)}if("ArrayPattern"===n.id.type||"ObjectPattern"===n.id.type){const s=o(t,r)(n.id),a=c(e,t,r)(n.init);return new i("LexicalBinding",n,1,[s,a],p)}i.TODO(`${n.id.type} @ LexicalBinding`)}},6027:(e,t,s)=>{const i=s(4147);e.exports=(e,t,r)=>n=>{const a=s(2690),o=s(8638);let c=[e,t,r],{kind:p,declarations:h}=n,l=o(p),u=a(e,t,r)(h);return new i("LexicalDeclaration",n,0,[l,u],c)}},806:(e,t,s)=>{const i=s(4147),r=s(7688);e.exports=e=>{let{value:t,raw:s}=e;if(null===t){let t=new r("NullLiteral",s);return new i("Literal",e,0,[t])}if("boolean"==typeof t){let t=new r("BooleanLiteral",s);return new i("Literal",e,1,[t])}if("number"==typeof t||"bigint"==typeof t){let t=new r("NumericLiteral",s);return new i("Literal",e,2,[t])}if("string"==typeof t){let t=new r("StringLiteral",s);return new i("Literal",e,3,[t])}i.TODO(`${t} @ Literal`)}},7949:(e,t,s)=>{const i=s(4147),r=s(7688);e.exports=e=>{let{type:t,name:s,value:n,raw:a}=e;if("Identifier"==t){let t=new r("IdentifierName",s);return new i("LiteralPropertyName",e,0,[t])}if("string"==typeof n){let t=new r("StringLiteral",a);return new i("LiteralPropertyName",e,1,[t])}if("number"==typeof n){let t=new r("NumericLiteral",a);return new i("LiteralPropertyName",e,2,[t])}i.TODO(`${n} @ Literal`)}},1544:(e,t,s)=>{const i=s(4147);let r=(e,t,n)=>a=>{let o=s(8944),c=[e,t,n],{type:p}=a;switch(p){case"AwaitExpression":case"UnaryExpression":case"BinaryExpression":case"UpdateExpression":case"CallExpression":case"NewExpression":case"MemberExpression":case"ObjectExpression":case"ArrayExpression":case"FunctionExpression":case"ClassExpression":case"SequenceExpression":case"ParenthesizedExpression":case"TemplateLiteral":case"TaggedTemplateExpression":case"Identifier":case"ThisExpression":case"ArrayPattern":case"ObjectPattern":case"MetaProperty":case"Literal":{let s=o(e,t,n)(a);return new i("LogicalANDExpression",a,0,[s],c)}case"LogicalExpression":{let{operator:s,left:p,right:h}=a;if("&&"==s){let s=r(e,t,n)(p),l=o(e,t,n)(h);return new i("LogicalORExpression",a,1,[s,l],c)}{let s=o(e,t,n)(a);return new i("LogicalANDExpression",a,0,[s],c)}}default:i.TODO(`${p} @ LogicalANDExpression`)}i.TODO("LogicalANDExpression")};e.exports=r},5374:(e,t,s)=>{const i=s(4147);let r=(e,t,n)=>a=>{let o=s(1544),c=[e,t,n],{type:p}=a;switch(p){case"AwaitExpression":case"UnaryExpression":case"BinaryExpression":case"UpdateExpression":case"CallExpression":case"NewExpression":case"MemberExpression":case"ObjectExpression":case"ArrayExpression":case"FunctionExpression":case"ClassExpression":case"SequenceExpression":case"ParenthesizedExpression":case"TemplateLiteral":case"TaggedTemplateExpression":case"Identifier":case"ThisExpression":case"ArrayPattern":case"ObjectPattern":case"MetaProperty":case"Literal":{let s=o(e,t,n)(a);return new i("LogicalORExpression",a,0,[s],c)}case"LogicalExpression":{let{operator:s,left:p,right:h}=a;if("||"==s){let s=r(e,t,n)(p),l=o(e,t,n)(h);return new i("LogicalORExpression",a,1,[s,l],c)}{let s=o(e,t,n)(a);return new i("LogicalORExpression",a,0,[s],c)}}default:i.TODO(`${p} @ LogicalORExpression`)}i.TODO("LogicalORExpression")};e.exports=r},8262:(e,t,s)=>{const i=s(4147),r=s(7688);let n=(e,t)=>a=>{const o=s(9095),c=s(3530),p=s(2645),h=s(8865),l=s(8740),u=s(270),d=s(7037);let f=[e,t],{type:x}=a;switch(x){case"ObjectExpression":case"ArrayExpression":case"FunctionExpression":case"ClassExpression":case"SequenceExpression":case"ParenthesizedExpression":case"TemplateLiteral":case"Identifier":case"ThisExpression":case"ObjectPattern":case"ArrayPattern":case"Literal":{let s=o(e,t)(a);return new i("MemberExpression",a,0,[s],f)}case"TaggedTemplateExpression":{let s=n(e,t)(a.tag),r=d(e,t,!0)(a.quasi);return new i("MemberExpression",a,3,[s,r],f)}case"NewExpression":{let s=n(e,t)(a.callee),r=u(e,t)(a.arguments);return new i("MemberExpression",a,6,[s,r],f)}case"MetaProperty":{let e=l(a);return new i("MemberExpression",a,5,[e],f)}case"MemberExpression":{let{object:s,meta:o,property:u,computed:d}=a;if(o){let s=l(e,t)(a);return new i("MemberExpression",a,5,[s],f)}if(s&&"Super"==s.type){let s=h(e,t)(a);return new i("MemberExpression",a,4,[s],f)}if(s&&"CallExpression"===s.type)return d&&i.TODO("computed @ MemberExpression"),c(e,t)(a);if(s&&d){let r=n(e,t)(s),o=p(!0,e,t)(u);return new i("MemberExpression",a,1,[r,o],f)}if(s&&!d){let o=n(e,t)(s),c=new r("IdentifierName",u.name);return new i("MemberExpression",a,2,[o,c],f)}i.TODO("MemberExpression");break}default:i.TODO(`${x} @ MemberExpression`)}};e.exports=n},8740:(e,t,s)=>{const i=s(4147);e.exports=e=>{const t=s(647);switch(e.meta.name){case"new":return new i("MetaProperty",e,0,[t(e)],[]);default:i.TODO(`${e.meta.name} @ MetaProperty`)}}},8162:(e,t,s)=>{const i=s(4147),{checkComma:r}=s(9329);e.exports=(e,t)=>n=>{const a=s(6086),o=s(2291),c=s(7962),p=s(8931),h=s(6354),l=s(4815),u=s(4145);let d=[e,t],{kind:f,key:x,value:m,generator:g,async:y,computed:E}=n;switch(f){case"constructor":case"init":case"method":if(y=y||m.async,g=g||m.generator,y||g){if(!y&&g){let s=c(e,t)(n);return new i("MethodDefinition",n,1,[s],d)}if(y&&!g){let s=p(e,t)(n);return new i("MethodDefinition",n,2,[s],d)}{let s=h(e,t)(n);return new i("MethodDefinition",n,3,[s],d)}}{let s=a(e,t)(n),c=r(n.key.end,n.value.body.start,")"),p=o(!1,!1)(m.params,c),h=l(!1,!1)(m.body);return new i("MethodDefinition",n,0,[s,p,h],d)}case"get":{let s=a(e,t)({key:x,loc:x.loc,computed:E}),r=l(!1,!1)(m.body);return new i("MethodDefinition",n,4,[s,r],d)}case"set":{let s=a(e,t)({key:x,loc:x.loc,computed:E}),r=u()(m.params[0]),o=l(!1,!1)(m.body);return new i("MethodDefinition",n,5,[s,r,o],d)}default:i.TODO(`${f} @ MethodDefinition`)}}},2659:(e,t,s)=>{const i=s(4147);let r=(e,t)=>n=>{let a=s(5952),o=[e,t],{type:c}=n;switch(c){case"AwaitExpression":case"UnaryExpression":case"UpdateExpression":case"CallExpression":case"NewExpression":case"MemberExpression":case"ObjectExpression":case"ArrayExpression":case"FunctionExpression":case"ClassExpression":case"SequenceExpression":case"ParenthesizedExpression":case"TemplateLiteral":case"TaggedTemplateExpression":case"Identifier":case"ThisExpression":case"ArrayPattern":case"ObjectPattern":case"MetaProperty":case"Literal":{let s=a(e,t)(n);return new i("MultiplicativeExpression",n,0,[s],o)}case"BinaryExpression":{let{index:s,children:c}=i.getBinary(n,["*","/","%"],r(e,t),a(e,t));if(s>0){let[e,t]=c;c=[e,new i("MultiplicativeOperator",{},s-1),t],s=1}return new i("AdditiveExpression",n,s,c,o)}default:i.TODO(`${c} @ MultiplicativeExpression`)}i.TODO("MultiplicativeExpression")};e.exports=r},4817:(e,t,s)=>{const i=s(4147);let r=(e,t)=>n=>{let a=s(8262),o=[e,t],{type:c}=n;switch(c){case"MemberExpression":case"ObjectExpression":case"ArrayExpression":case"FunctionExpression":case"ClassExpression":case"SequenceExpression":case"ParenthesizedExpression":case"TemplateLiteral":case"TaggedTemplateExpression":case"Identifier":case"ThisExpression":case"ObjectPattern":case"ArrayPattern":case"MetaProperty":case"Literal":{let s=a(e,t)(n);return new i("NewExpression",n,0,[s],o)}case"NewExpression":{let{callee:s}=n;if(s.end!=n.end){let s=a(e,t)(n);return new i("NewExpression",n,0,[s],o)}{let a=r(e,t)(s);return new i("NewExpression",n,1,[a],o)}}default:i.TODO(`${c} @ NewExpression`)}i.TODO("NewExpression")};e.exports=r},647:(e,t,s)=>{const i=s(4147);e.exports=e=>new i("NewTarget",e,0,[],[])},753:(e,t,s)=>{const i=s(4147),{checkComma:r}=s(9329);e.exports=(e,t)=>n=>{let a=s(2814),o=s(846),c=[e,t],p=n.properties;if(0===p.length)return new i("ObjectBindingPattern",n,0,[],c);{let s=p.pop();const h=r(n.start,n.end,"}");if(null===s||h){h&&p.push(s);let r=o(e,t)(p);return new i("ObjectBindingPattern",n,3,[r,null],c)}if("RestElement"===s.type){let r=a(e,t)(s);if(0===p.length)return new i("ObjectBindingPattern",n,1,[r],c);{let s=o(e,t)(p);return new i("ObjectBindingPattern",n,3,[s,r],c)}}{p.push(s);let r=o(e,t)(p);return new i("ObjectBindingPattern",n,2,[r],c)}}}},2244:(e,t,s)=>{const i=s(4147),{checkComma:r}=s(9329);e.exports=(e,t)=>n=>{let a=s(744),o=[e,t],{properties:c}=n;if(0==c.length)return new i("ObjectLiteral",n,0,[],o);{let s=a(e,t)(n);const c=r(n.start,n.end,"}");return new i("ObjectLiteral",n,c?2:1,[s],o)}}},9095:(e,t,s)=>{const i=s(4147),r=s(7688);e.exports=(e,t)=>n=>{const a=s(806),o=s(7168),c=s(8365),p=s(2244),h=s(7476),l=s(6359),u=s(2170),d=s(4417),f=s(8354),x=s(7037),m=s(4947);let g=[e,t],{type:y}=n;switch(y){case"ThisExpression":return new i("PrimaryExpression",n,0,[],g);case"Identifier":{let s=o(e,t)(n);return new i("PrimaryExpression",n,1,[s],g)}case"Literal":if(n.regex){let e=new r("RegularExpressionLiteral",n.raw);return new i("PrimaryExpression",n,10,[e],g)}{let e=a(n);return new i("PrimaryExpression",n,2,[e],g)}case"ArrayPattern":case"ArrayExpression":{let s=c(e,t)(n);return new i("PrimaryExpression",n,3,[s],g)}case"ObjectPattern":case"ObjectExpression":{let s=p(e,t)(n);return new i("PrimaryExpression",n,4,[s],g)}case"FunctionExpression":{let e,t,{async:s,generator:r}=n;return s||r?!s&&r?(e=7,t=u(n)):s&&!r?(e=8,t=d(n)):(e=9,t=f(n)):(e=5,t=h(n)),new i("PrimaryExpression",n,e,[t],g)}case"ClassExpression":{let s=l(e,t)(n);return new i("PrimaryExpression",n,6,[s],g)}case"TemplateLiteral":{let s=x(e,t,!1)(n);return new i("PrimaryExpression",n,11,[s],g)}case"SequenceExpression":case"ParenthesizedExpression":{let s=m(e,t)(n);return new i("PrimaryExpression",n,12,[s],g)}default:i.TODO(`${y} @ PrimaryExpression`)}i.TODO("PrimaryExpression")}},8968:(e,t,s)=>{const i=s(4147);e.exports=(e,t)=>r=>{let n=s(7168),a=s(4461),o=s(6086),c=s(8162),p=s(4043),h=[e,t],{type:l}=r;if("Property"===l){let{method:s,shorthand:l,key:u,value:d}=r;switch(r.kind){case"get":case"set":{let s=c(e,t)(r);return new i("PropertyDefinition",r,3,[s],h)}case"init":if(l&&"AssignmentPattern"===d.type){let s=a(e,t)(d);return new i("PropertyDefinition",r,1,[s],h)}if(l){let s=n(e,t)(u);return new i("PropertyDefinition",r,0,[s],h)}if(!s){let s=o(e,t)(r),n=p(!0,e,t)(d);return new i("PropertyDefinition",r,2,[s,n],h)}if(s){let s=c(e,t)(r);return new i("PropertyDefinition",r,3,[s],h)}return i.TODO("init @ PropertyDefinition");default:i.TODO(`${r.kind} @ PropertyDefinition`)}}else{if("RestElement"===l||"SpreadElement"===l){let{argument:s}=r,n=p(!0,e,t)(s);return new i("PropertyDefinition",r,4,[n],h)}i.TODO(`${r.type} @ PropertyDefinition`)}}},744:(e,t,s)=>{const i=s(4147);e.exports=(e,t)=>r=>{let n=s(8968)(e,t),a=[e,t],{properties:o}=r;return i.fromList("PropertyDefinitionList",o,n,a)}},6086:(e,t,s)=>{const i=s(4147);e.exports=(e,t)=>r=>{let n=s(7949),a=s(6527),o=[e,t],{computed:c,key:p}=r;if(c){let s=a(e,t)(p);return new i("PropertyName",r,1,[s],o)}{let e=n(p);return new i("PropertyName",r,0,[e],o)}}},4145:(e,t,s)=>{const i=s(4147);e.exports=()=>e=>{let t=s(2860)(!1,!1)(e);return new i("PropertySetParameterList",e,0,[t],[])}},5126:(e,t,s)=>{const i=s(4147);let r=(e,t,n)=>a=>{let o=s(2134),c=[e,t,n],{type:p}=a;switch(p){case"AwaitExpression":case"UnaryExpression":case"UpdateExpression":case"CallExpression":case"NewExpression":case"MemberExpression":case"ObjectExpression":case"ArrayExpression":case"FunctionExpression":case"ClassExpression":case"SequenceExpression":case"ParenthesizedExpression":case"TemplateLiteral":case"TaggedTemplateExpression":case"Identifier":case"ThisExpression":case"ArrayPattern":case"ObjectPattern":case"MetaProperty":case"Literal":{let e=o(t,n)(a);return new i("RelationalExpression",a,0,[e],c)}case"BinaryExpression":if("in"==a.operator){let{left:e,right:s}=a,p=r(!0,t,n)(e),h=o(t,n)(s);return new i("RelationalExpression",a,6,[p,h],c)}{let{index:s,children:p}=i.getBinary(a,["<",">","<=",">=","instanceof"],r(e,t,n),o(t,n));return new i("RelationalExpression",a,s,p,c)}default:i.TODO(`${p} @ RelationalExpression`)}i.TODO("RelationalExpression")};e.exports=r},8547:(e,t,s)=>{const i=s(4147);e.exports=(e,t)=>r=>{const n=s(2645);let a=[e,t],{argument:o}=r;if(null==o)return new i("ReturnStatement",r,0,[],a);{let s=n(!0,e,t)(o);return new i("ReturnStatement",r,1,[s],a)}}},581:(e,t,s)=>{const i=s(4147);e.exports=e=>{const t=s(2158);let r=null;return e.body.length>0&&(r=t(e)),new i("Script",e,0,[r])}},2158:(e,t,s)=>{const i=s(4147);e.exports=e=>{let t=s(5963)(!1,!1,!1)(e.body);return new i("ScriptBody",e,0,[t])}},2134:(e,t,s)=>{const i=s(4147);let r=(e,t)=>n=>{let a=s(8422),o=[e,t],{type:c}=n;switch(c){case"AwaitExpression":case"UnaryExpression":case"UpdateExpression":case"CallExpression":case"NewExpression":case"MemberExpression":case"ObjectExpression":case"ArrayExpression":case"FunctionExpression":case"ClassExpression":case"SequenceExpression":case"ParenthesizedExpression":case"TemplateLiteral":case"TaggedTemplateExpression":case"Identifier":case"ThisExpression":case"ArrayPattern":case"ObjectPattern":case"MetaProperty":case"Literal":{let s=a(e,t)(n);return new i("ShiftExpression",n,0,[s],o)}case"BinaryExpression":{let{index:s,children:c}=i.getBinary(n,["<<",">>",">>>"],r(e,t),a(e,t));return new i("ShiftExpression",n,s,c,o)}default:i.TODO(`${c} @ ShiftExpression`)}i.TODO("ShiftExpression")};e.exports=r},6135:(e,t,s)=>{const i=s(4147);e.exports=(e,t,r)=>n=>{let a=s(5374),o=[e,t,r],{type:c}=n;switch(c){case"AwaitExpression":case"UnaryExpression":case"LogicalExpression":case"BinaryExpression":case"UpdateExpression":case"CallExpression":case"NewExpression":case"MemberExpression":case"ObjectExpression":case"ArrayExpression":case"FunctionExpression":case"ClassExpression":case"SequenceExpression":case"ParenthesizedExpression":case"TemplateLiteral":case"TaggedTemplateExpression":case"Identifier":case"ThisExpression":case"ArrayPattern":case"ObjectPattern":case"MetaProperty":case"Literal":{let s=a(e,t,r)(n);return new i("ShortCircuitExpression",n,0,[s],o)}default:i.TODO(`${c} @ ShortCircuitExpression`)}i.TODO("ShortCircuitExpression")}},2122:(e,t,s)=>{const i=s(4147);e.exports=(e,t)=>r=>{const n=s(2904),a=s(6038);let o=[e,t],{type:c,left:p,right:h}=r;if("Identifier"==c){let s=n(e,t)(r);return new i("SingleNameBinding",r,0,[s,null],o)}{"AssignmentPattern"===h.type&&(p=h.left,h=h.right);let s=n(e,t)(p),c=a(!0,e,t)(h);return new i("SingleNameBinding",r,0,[s,c],o)}}},843:(e,t,s)=>{const i=s(4147);e.exports=(e,t)=>r=>{let n=s(4043),a=[e,t],o=n(!0,e,t)(r.argument);return new i("SpreadElement",r,0,[o],a)}},3735:(e,t,s)=>{const i=s(4147);e.exports=(e,t,r)=>n=>{const a=s(8901),o=s(5610),c=s(3900),p=s(7848),h=s(4431),l=s(8473),u=s(1844),d=s(6556),f=s(8547),x=s(3247),m=s(2199),g=s(1188),y=s(3090),E=s(310);let w=["BlockStatement","VariableStatement","EmptyStatement","ExpressionStatement","IfStatement","BreakableStatement","ContinueStatement","BreakStatement","ReturnStatement","WithStatement","LabeledStatement","ThrowStatement","TryStatement","DebuggerStatement"],v=[a(e,t,r),o(e,t),c,p(e,t),h(e,t,r),l(e,t,r),u(e,t),d(e,t),f(e,t),x(e,t,r),m(e,t,r),g(e,t),y(e,t,r),E],b=[e,t,r];switch(n.type){case"VariableDeclaration":{let s=o(e,t)(n);return new i("Statement",n,1,[s],b)}case"SwitchStatement":case"WhileStatement":case"DoWhileStatement":case"ForStatement":case"ForInStatement":case"ForOfStatement":{let s=l(e,t,r)(n);return new i("Statement",n,5,[s],b)}default:{let e=i.getRhs(w,v,n);null===e&&i.TODO(`${n.type} @ Statement`);let{index:t,child:s}=e;return new i("Statement",n,t,[s],b)}}}},5963:(e,t,s)=>{const i=s(4147);e.exports=(e,t,r)=>n=>{let a=s(6653)(e,t,r),o=[e,t,r];return i.fromList("StatementList",n,a,o)}},6653:(e,t,s)=>{const i=s(4147);e.exports=(e,t,r)=>n=>{const a=s(3735),o=s(3319);let c=[e,t,r],{type:p,kind:h}=n;if(p.endsWith("Statement")||"VariableDeclaration"===p&&"var"===h){let s=a(e,t,r)(n);return new i("StatementListItem",n,0,[s],c)}{let s=o(e,t)(n);return new i("StatementListItem",n,1,[s],c)}}},5691:(e,t,s)=>{const i=s(4147),r=s(7688);e.exports=(e,t,n)=>a=>{const o=s(2645),c=s(5415);let p=[e,t,n],{quasis:h,expressions:l}=a,u="`"+h.shift().value.raw+"${",d=new r("TemplateHead",u),f=o(!0,e,t)(l.shift()),x=c(e,t,n)(a);return new i("SubstitutionTemplate",a,0,[d,f,x],p)}},1916:(e,t,s)=>{const i=s(4147);e.exports=(e,t)=>r=>{const n=s(270);let a=[e,t];const o=n(e,t)(r.arguments);return new i("SuperCall",r,0,[o],a)}},8865:(e,t,s)=>{const i=s(4147);e.exports=(e,t)=>r=>{const n=s(2645);let a=[e,t],{object:o,property:c,computed:p}=r;if("Super"===o.type){if("Identifier"!==c.type||p){let s=n(!0,e,t)(c);return new i("SuperProperty",c,0,[s],a)}return new i("SuperProperty",r,1,[c.name],a)}i.TODO("SuperProperty")}},7208:(e,t,s)=>{const i=s(4147);e.exports=(e,t,r)=>n=>{const a=s(2645),o=s(1633);let c=[e,t,r],p=a(!0,e,t)(n.discriminant),h=o(e,t,r)(n.cases);return new i("SwitchStatement",n,0,[p,h],c)}},7037:(e,t,s)=>{const i=s(4147),r=s(7688);e.exports=(e,t,n)=>a=>{const o=s(5691);let c=[e,t,n],{quasis:p,expressions:h}=a;if(0==h.length&&1==p.length){let e="`"+p[0].value.raw+"`",t=new r("NoSubstitutionTemplate",e);return new i("TemplateLiteral",a,0,[t],c)}{let s=o(e,t,n)(a);return new i("TemplateLiteral",a,1,[s],c)}}},8551:(e,t,s)=>{const i=s(4147),r=s(7688);let n=(e,t,a)=>o=>{const c=s(2645);let p=[e,t,a],{quasis:h,expressions:l}=o,u="}"+h.pop().value.raw+"${",d=new r("TemplateMiddle",u),f=c(!0,e,t)(l.pop());if(0==h.length)return new i("TemplateMiddleList",o,0,[d,f],p);{let s=n(e,t,a)(o);return new i("TemplateMiddleList",o,1,[s,d,f],p)}};e.exports=n},5415:(e,t,s)=>{const i=s(4147),r=s(7688);e.exports=(e,t,n)=>a=>{const o=s(8551);let c=[e,t,n],{quasis:p,expressions:h}=a,l="}"+p.pop().value.raw+"`",u=new r("TemplateTail",l);if(0==h.length)return new i("TemplateSpans",a,0,[u],c);{let s=o(e,t,n)(a);return new i("TemplateSpans",a,1,[s,u],c)}}},1188:(e,t,s)=>{const i=s(4147);e.exports=(e,t)=>r=>{const n=s(2645);let a=[e,t],o=n(!0,e,t)(r.argument);return new i("ThrowStatement",r,0,[o],a)}},3090:(e,t,s)=>{const i=s(4147);e.exports=(e,t,r)=>n=>{const a=s(3396),o=s(570),c=s(2399);let p=[e,t,r],{block:h,handler:l,finalizer:u}=n,d=a(e,t,r)(h);if(null!=l&&null==u){let s=o(e,t,r)(l);return new i("TryStatement",n,0,[d,s],p)}if(null==l&&null!=u){let s=c(e,t,r)(u);return new i("TryStatement",n,1,[d,s],p)}if(null!=l&&null!=u){let s=o(e,t,r)(l),a=c(e,t,r)(u);return new i("TryStatement",n,2,[d,s,a],p)}i.TODO("TryStatement")}},3778:(e,t,s)=>{const i=s(4147);let r=(e,t)=>n=>{let a=s(9039),o=s(4118),c=[e,t],{type:p}=n;switch(p){case"UpdateExpression":case"CallExpression":case"NewExpression":case"MemberExpression":case"ObjectExpression":case"ArrayExpression":case"FunctionExpression":case"ClassExpression":case"SequenceExpression":case"ParenthesizedExpression":case"TemplateLiteral":case"TaggedTemplateExpression":case"Identifier":case"ThisExpression":case"ArrayPattern":case"ObjectPattern":case"MetaProperty":case"Literal":{let s=a(e,t)(n);return new i("UnaryExpression",n,0,[s],c)}case"UnaryExpression":{let s,{operator:a,argument:o}=n;switch(a){case"delete":s=1;break;case"void":s=2;break;case"typeof":s=3;break;case"+":s=4;break;case"-":s=5;break;case"~":s=6;break;case"!":s=7;break;default:throw`[Error] unknown unary operator: ${a}`}let p=r(e,t)(o);return new i("UnaryExpression",n,s,[p],c)}case"AwaitExpression":{let t=o(e)(n);return new i("UnaryExpression",n,8,[t],c)}default:i.TODO(`${p} @ UnaryExpression`)}i.TODO("UnaryExpression")};e.exports=r},2291:(e,t,s)=>{const i=s(4147);e.exports=(e,t)=>(r,n)=>{const a=s(9880);let o=[e,t],c=a(e,t)(r,n);return new i("UniqueFormalParameters",r,0,[c],o)}},9039:(e,t,s)=>{const i=s(4147);e.exports=(e,t)=>r=>{const n=s(6411),a=s(3778);let o=[e,t],{type:c}=r;switch(c){case"CallExpression":case"NewExpression":case"MemberExpression":case"ObjectExpression":case"ArrayExpression":case"FunctionExpression":case"ClassExpression":case"SequenceExpression":case"ParenthesizedExpression":case"TemplateLiteral":case"TaggedTemplateExpression":case"Identifier":case"ThisExpression":case"ArrayPattern":case"ObjectPattern":case"MetaProperty":case"Literal":{let s=n(e,t)(r);return new i("UpdateExpression",r,0,[s],o)}case"UpdateExpression":{let s,c,{prefix:p,operator:h,argument:l}=r;return p?(s=a(e,t)(l),"++"==h?c=3:"--"==h?c=4:i.TODO(`${h}x @ UpdateExpression`)):(s=n(e,t)(l),"++"==h?c=1:"--"==h?c=2:i.TODO(`x${h} @ UpdateExpression`)),new i("UpdateExpression",r,c,[s],o)}default:i.TODO(`${c} @ UpdateExpression`)}i.TODO("UpdateExpression")}},8392:(e,t,s)=>{const i=s(4147);e.exports=(e,t,r)=>n=>{let a=s(2904),o=s(6038),c=s(5095),p=[e,t,r];if("Identifier"===n.id.type){let s=a(t,r)(n.id),c=null;return n.init&&(c=o(e,t,r)(n.init)),new i("VariableDeclaration",n,0,[s,c],p)}{let s=c(t,r)(n.id),a=o(e,t,r)(n.init);return new i("VariableDeclaration",n,1,[s,a],p)}}},693:(e,t,s)=>{const i=s(4147);e.exports=(e,t,r)=>n=>{let a=s(8392)(e,t,r),o=[e,t,r];return i.fromList("VariableDeclarationList",n.declarations,a,o)}},5610:(e,t,s)=>{const i=s(4147);e.exports=(e,t)=>r=>{let n=s(693)(!0,e,t)(r);return new i("VariableStatement",r,0,[n],[e,t])}},8727:(e,t,s)=>{const i=s(4147);e.exports=(e,t,r)=>n=>{const a=s(2645),o=s(3735);let c=[e,t,r],p=a(!0,e,t)(n.test),h=o(e,t,r)(n.body);return new i("WhileStatement",n,0,[p,h],c)}},3247:(e,t,s)=>{const i=s(4147);e.exports=(e,t,r)=>n=>{const a=s(2645),o=s(3735);let c=[e,t,r],p=a(!0,e,t)(n.object),h=o(e,t,r)(n.body);return new i("WithStatement",n,0,[p,h],c)}},1542:(e,t,s)=>{const i=s(4147);e.exports=(e,t)=>r=>{const n=s(4043);let a=[e,t],{argument:o,delegate:c}=r;if(null==o)return new i("YieldExpression",r,0,[],a);if(c){let s=n(e,!0,t)(o);return new i("YieldExpression",r,2,[s],a)}{let s=n(e,!0,t)(o);return new i("YieldExpression",r,1,[s],a)}}},9613:(e,t,s)=>{var i={"./es2021/Script":581};function r(e){var t=n(e);return s(t)}function n(e){if(!s.o(i,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return i[e]}r.keys=function(){return Object.keys(i)},r.resolve=n,e.exports=r,r.id=9613}},t={};function s(i){var r=t[i];if(void 0!==r)return r.exports;var n=t[i]={exports:{}};return e[i].call(n.exports,n,n.exports,s),n.exports}s.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t);var i=s(2570);ESParse=i})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9FU1BhcnNlLy4vbm9kZV9tb2R1bGVzL2Fjb3JuL2Rpc3QvYWNvcm4uanMiLCJ3ZWJwYWNrOi8vRVNQYXJzZS8uL3NyYy9HbG9iYWwuanMiLCJ3ZWJwYWNrOi8vRVNQYXJzZS8uL3NyYy9MZXhpY2FsTm9kZS5qcyIsIndlYnBhY2s6Ly9FU1BhcnNlLy4vc3JjL05vZGUuanMiLCJ3ZWJwYWNrOi8vRVNQYXJzZS8uL3NyYy9UcmFuc2xhdG9yLmpzIiwid2VicGFjazovL0VTUGFyc2UvLi9zcmMvZXMyMDIxL0FkZGl0aXZlRXhwcmVzc2lvbi5qcyIsIndlYnBhY2s6Ly9FU1BhcnNlLy4vc3JjL2VzMjAyMS9Bcmd1bWVudExpc3QuanMiLCJ3ZWJwYWNrOi8vRVNQYXJzZS8uL3NyYy9lczIwMjEvQXJndW1lbnRzLmpzIiwid2VicGFjazovL0VTUGFyc2UvLi9zcmMvZXMyMDIxL0FycmF5QmluZGluZ1BhdHRlcm4uanMiLCJ3ZWJwYWNrOi8vRVNQYXJzZS8uL3NyYy9lczIwMjEvQXJyYXlMaXRlcmFsLmpzIiwid2VicGFjazovL0VTUGFyc2UvLi9zcmMvZXMyMDIxL0Fycm93RnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vRVNQYXJzZS8uL3NyYy9lczIwMjEvQXJyb3dQYXJhbWV0ZXJzLmpzIiwid2VicGFjazovL0VTUGFyc2UvLi9zcmMvZXMyMDIxL0Fzc2lnbm1lbnRFeHByZXNzaW9uLmpzIiwid2VicGFjazovL0VTUGFyc2UvLi9zcmMvZXMyMDIxL0FzeW5jQXJyb3dCaW5kaW5nSWRlbnRpZmllci5qcyIsIndlYnBhY2s6Ly9FU1BhcnNlLy4vc3JjL2VzMjAyMS9Bc3luY0Fycm93RnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vRVNQYXJzZS8uL3NyYy9lczIwMjEvQXN5bmNDb25jaXNlQm9keS5qcyIsIndlYnBhY2s6Ly9FU1BhcnNlLy4vc3JjL2VzMjAyMS9Bc3luY0Z1bmN0aW9uQm9keS5qcyIsIndlYnBhY2s6Ly9FU1BhcnNlLy4vc3JjL2VzMjAyMS9Bc3luY0Z1bmN0aW9uRGVjbGFyYXRpb24uanMiLCJ3ZWJwYWNrOi8vRVNQYXJzZS8uL3NyYy9lczIwMjEvQXN5bmNGdW5jdGlvbkV4cHJlc3Npb24uanMiLCJ3ZWJwYWNrOi8vRVNQYXJzZS8uL3NyYy9lczIwMjEvQXN5bmNHZW5lcmF0b3JCb2R5LmpzIiwid2VicGFjazovL0VTUGFyc2UvLi9zcmMvZXMyMDIxL0FzeW5jR2VuZXJhdG9yRGVjbGFyYXRpb24uanMiLCJ3ZWJwYWNrOi8vRVNQYXJzZS8uL3NyYy9lczIwMjEvQXN5bmNHZW5lcmF0b3JFeHByZXNzaW9uLmpzIiwid2VicGFjazovL0VTUGFyc2UvLi9zcmMvZXMyMDIxL0FzeW5jR2VuZXJhdG9yTWV0aG9kLmpzIiwid2VicGFjazovL0VTUGFyc2UvLi9zcmMvZXMyMDIxL0FzeW5jTWV0aG9kLmpzIiwid2VicGFjazovL0VTUGFyc2UvLi9zcmMvZXMyMDIxL0F3YWl0RXhwcmVzc2lvbi5qcyIsIndlYnBhY2s6Ly9FU1BhcnNlLy4vc3JjL2VzMjAyMS9CaW5kaW5nRWxlbWVudC5qcyIsIndlYnBhY2s6Ly9FU1BhcnNlLy4vc3JjL2VzMjAyMS9CaW5kaW5nRWxlbWVudExpc3QuanMiLCJ3ZWJwYWNrOi8vRVNQYXJzZS8uL3NyYy9lczIwMjEvQmluZGluZ0VsaXNpb25FbGVtZW50LmpzIiwid2VicGFjazovL0VTUGFyc2UvLi9zcmMvZXMyMDIxL0JpbmRpbmdJZGVudGlmaWVyLmpzIiwid2VicGFjazovL0VTUGFyc2UvLi9zcmMvZXMyMDIxL0JpbmRpbmdMaXN0LmpzIiwid2VicGFjazovL0VTUGFyc2UvLi9zcmMvZXMyMDIxL0JpbmRpbmdQYXR0ZXJuLmpzIiwid2VicGFjazovL0VTUGFyc2UvLi9zcmMvZXMyMDIxL0JpbmRpbmdQcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly9FU1BhcnNlLy4vc3JjL2VzMjAyMS9CaW5kaW5nUHJvcGVydHlMaXN0LmpzIiwid2VicGFjazovL0VTUGFyc2UvLi9zcmMvZXMyMDIxL0JpbmRpbmdSZXN0RWxlbWVudC5qcyIsIndlYnBhY2s6Ly9FU1BhcnNlLy4vc3JjL2VzMjAyMS9CaW5kaW5nUmVzdFByb3BlcnR5LmpzIiwid2VicGFjazovL0VTUGFyc2UvLi9zcmMvZXMyMDIxL0JpdHdpc2VBTkRFeHByZXNzaW9uLmpzIiwid2VicGFjazovL0VTUGFyc2UvLi9zcmMvZXMyMDIxL0JpdHdpc2VPUkV4cHJlc3Npb24uanMiLCJ3ZWJwYWNrOi8vRVNQYXJzZS8uL3NyYy9lczIwMjEvQml0d2lzZVhPUkV4cHJlc3Npb24uanMiLCJ3ZWJwYWNrOi8vRVNQYXJzZS8uL3NyYy9lczIwMjEvQmxvY2suanMiLCJ3ZWJwYWNrOi8vRVNQYXJzZS8uL3NyYy9lczIwMjEvQmxvY2tTdGF0ZW1lbnQuanMiLCJ3ZWJwYWNrOi8vRVNQYXJzZS8uL3NyYy9lczIwMjEvQnJlYWtTdGF0ZW1lbnQuanMiLCJ3ZWJwYWNrOi8vRVNQYXJzZS8uL3NyYy9lczIwMjEvQnJlYWthYmxlU3RhdGVtZW50LmpzIiwid2VicGFjazovL0VTUGFyc2UvLi9zcmMvZXMyMDIxL0NhbGxFeHByZXNzaW9uLmpzIiwid2VicGFjazovL0VTUGFyc2UvLi9zcmMvZXMyMDIxL0Nhc2VCbG9jay5qcyIsIndlYnBhY2s6Ly9FU1BhcnNlLy4vc3JjL2VzMjAyMS9DYXNlQ2xhdXNlLmpzIiwid2VicGFjazovL0VTUGFyc2UvLi9zcmMvZXMyMDIxL0Nhc2VDbGF1c2VzLmpzIiwid2VicGFjazovL0VTUGFyc2UvLi9zcmMvZXMyMDIxL0NhdGNoLmpzIiwid2VicGFjazovL0VTUGFyc2UvLi9zcmMvZXMyMDIxL0NhdGNoUGFyYW1ldGVyLmpzIiwid2VicGFjazovL0VTUGFyc2UvLi9zcmMvZXMyMDIxL0NsYXNzQm9keS5qcyIsIndlYnBhY2s6Ly9FU1BhcnNlLy4vc3JjL2VzMjAyMS9DbGFzc0RlY2xhcmF0aW9uLmpzIiwid2VicGFjazovL0VTUGFyc2UvLi9zcmMvZXMyMDIxL0NsYXNzRWxlbWVudC5qcyIsIndlYnBhY2s6Ly9FU1BhcnNlLy4vc3JjL2VzMjAyMS9DbGFzc0VsZW1lbnRMaXN0LmpzIiwid2VicGFjazovL0VTUGFyc2UvLi9zcmMvZXMyMDIxL0NsYXNzRXhwcmVzc2lvbi5qcyIsIndlYnBhY2s6Ly9FU1BhcnNlLy4vc3JjL2VzMjAyMS9DbGFzc0hlcml0YWdlLmpzIiwid2VicGFjazovL0VTUGFyc2UvLi9zcmMvZXMyMDIxL0NsYXNzVGFpbC5qcyIsIndlYnBhY2s6Ly9FU1BhcnNlLy4vc3JjL2VzMjAyMS9Db21wdXRlZFByb3BlcnR5TmFtZS5qcyIsIndlYnBhY2s6Ly9FU1BhcnNlLy4vc3JjL2VzMjAyMS9Db25jaXNlQm9keS5qcyIsIndlYnBhY2s6Ly9FU1BhcnNlLy4vc3JjL2VzMjAyMS9Db25kaXRpb25hbEV4cHJlc3Npb24uanMiLCJ3ZWJwYWNrOi8vRVNQYXJzZS8uL3NyYy9lczIwMjEvQ29udGludWVTdGF0ZW1lbnQuanMiLCJ3ZWJwYWNrOi8vRVNQYXJzZS8uL3NyYy9lczIwMjEvQ292ZXJDYWxsRXhwcmVzc2lvbkFuZEFzeW5jQXJyb3dIZWFkLmpzIiwid2VicGFjazovL0VTUGFyc2UvLi9zcmMvZXMyMDIxL0NvdmVySW5pdGlhbGl6ZWROYW1lLmpzIiwid2VicGFjazovL0VTUGFyc2UvLi9zcmMvZXMyMDIxL0NvdmVyUGFyZW50aGVzaXplZEV4cHJlc3Npb25BbmRBcnJvd1BhcmFtZXRlckxpc3QuanMiLCJ3ZWJwYWNrOi8vRVNQYXJzZS8uL3NyYy9lczIwMjEvRGVidWdnZXJTdGF0ZW1lbnQuanMiLCJ3ZWJwYWNrOi8vRVNQYXJzZS8uL3NyYy9lczIwMjEvRGVjbGFyYXRpb24uanMiLCJ3ZWJwYWNrOi8vRVNQYXJzZS8uL3NyYy9lczIwMjEvRGVmYXVsdENsYXVzZS5qcyIsIndlYnBhY2s6Ly9FU1BhcnNlLy4vc3JjL2VzMjAyMS9Eb1doaWxlU3RhdGVtZW50LmpzIiwid2VicGFjazovL0VTUGFyc2UvLi9zcmMvZXMyMDIxL0VsZW1lbnRMaXN0LmpzIiwid2VicGFjazovL0VTUGFyc2UvLi9zcmMvZXMyMDIxL0VsaXNpb24uanMiLCJ3ZWJwYWNrOi8vRVNQYXJzZS8uL3NyYy9lczIwMjEvRW1wdHlTdGF0ZW1lbnQuanMiLCJ3ZWJwYWNrOi8vRVNQYXJzZS8uL3NyYy9lczIwMjEvRXF1YWxpdHlFeHByZXNzaW9uLmpzIiwid2VicGFjazovL0VTUGFyc2UvLi9zcmMvZXMyMDIxL0V4cG9uZW50aWF0aW9uRXhwcmVzc2lvbi5qcyIsIndlYnBhY2s6Ly9FU1BhcnNlLy4vc3JjL2VzMjAyMS9FeHByZXNzaW9uLmpzIiwid2VicGFjazovL0VTUGFyc2UvLi9zcmMvZXMyMDIxL0V4cHJlc3Npb25Cb2R5LmpzIiwid2VicGFjazovL0VTUGFyc2UvLi9zcmMvZXMyMDIxL0V4cHJlc3Npb25TdGF0ZW1lbnQuanMiLCJ3ZWJwYWNrOi8vRVNQYXJzZS8uL3NyYy9lczIwMjEvRmluYWxseS5qcyIsIndlYnBhY2s6Ly9FU1BhcnNlLy4vc3JjL2VzMjAyMS9Gb3JCaW5kaW5nLmpzIiwid2VicGFjazovL0VTUGFyc2UvLi9zcmMvZXMyMDIxL0ZvckRlY2xhcmF0aW9uLmpzIiwid2VicGFjazovL0VTUGFyc2UvLi9zcmMvZXMyMDIxL0ZvckluT2ZTdGF0ZW1lbnQuanMiLCJ3ZWJwYWNrOi8vRVNQYXJzZS8uL3NyYy9lczIwMjEvRm9yU3RhdGVtZW50LmpzIiwid2VicGFjazovL0VTUGFyc2UvLi9zcmMvZXMyMDIxL0Zvcm1hbFBhcmFtZXRlci5qcyIsIndlYnBhY2s6Ly9FU1BhcnNlLy4vc3JjL2VzMjAyMS9Gb3JtYWxQYXJhbWV0ZXJMaXN0LmpzIiwid2VicGFjazovL0VTUGFyc2UvLi9zcmMvZXMyMDIxL0Zvcm1hbFBhcmFtZXRlcnMuanMiLCJ3ZWJwYWNrOi8vRVNQYXJzZS8uL3NyYy9lczIwMjEvRnVuY3Rpb25Cb2R5LmpzIiwid2VicGFjazovL0VTUGFyc2UvLi9zcmMvZXMyMDIxL0Z1bmN0aW9uRGVjbGFyYXRpb24uanMiLCJ3ZWJwYWNrOi8vRVNQYXJzZS8uL3NyYy9lczIwMjEvRnVuY3Rpb25FeHByZXNzaW9uLmpzIiwid2VicGFjazovL0VTUGFyc2UvLi9zcmMvZXMyMDIxL0Z1bmN0aW9uUmVzdFBhcmFtZXRlci5qcyIsIndlYnBhY2s6Ly9FU1BhcnNlLy4vc3JjL2VzMjAyMS9GdW5jdGlvblN0YXRlbWVudExpc3QuanMiLCJ3ZWJwYWNrOi8vRVNQYXJzZS8uL3NyYy9lczIwMjEvR2VuZXJhdG9yQm9keS5qcyIsIndlYnBhY2s6Ly9FU1BhcnNlLy4vc3JjL2VzMjAyMS9HZW5lcmF0b3JEZWNsYXJhdGlvbi5qcyIsIndlYnBhY2s6Ly9FU1BhcnNlLy4vc3JjL2VzMjAyMS9HZW5lcmF0b3JFeHByZXNzaW9uLmpzIiwid2VicGFjazovL0VTUGFyc2UvLi9zcmMvZXMyMDIxL0dlbmVyYXRvck1ldGhvZC5qcyIsIndlYnBhY2s6Ly9FU1BhcnNlLy4vc3JjL2VzMjAyMS9Ib2lzdGFibGVEZWNsYXJhdGlvbi5qcyIsIndlYnBhY2s6Ly9FU1BhcnNlLy4vc3JjL2VzMjAyMS9JZGVudGlmaWVyLmpzIiwid2VicGFjazovL0VTUGFyc2UvLi9zcmMvZXMyMDIxL0lkZW50aWZpZXJSZWZlcmVuY2UuanMiLCJ3ZWJwYWNrOi8vRVNQYXJzZS8uL3NyYy9lczIwMjEvSWZTdGF0ZW1lbnQuanMiLCJ3ZWJwYWNrOi8vRVNQYXJzZS8uL3NyYy9lczIwMjEvSW5pdGlhbGl6ZXIuanMiLCJ3ZWJwYWNrOi8vRVNQYXJzZS8uL3NyYy9lczIwMjEvSXRlcmF0aW9uU3RhdGVtZW50LmpzIiwid2VicGFjazovL0VTUGFyc2UvLi9zcmMvZXMyMDIxL0xhYmVsSWRlbnRpZmllci5qcyIsIndlYnBhY2s6Ly9FU1BhcnNlLy4vc3JjL2VzMjAyMS9MYWJlbGxlZEl0ZW0uanMiLCJ3ZWJwYWNrOi8vRVNQYXJzZS8uL3NyYy9lczIwMjEvTGFiZWxsZWRTdGF0ZW1lbnQuanMiLCJ3ZWJwYWNrOi8vRVNQYXJzZS8uL3NyYy9lczIwMjEvTGVmdEhhbmRTaWRlRXhwcmVzc2lvbi5qcyIsIndlYnBhY2s6Ly9FU1BhcnNlLy4vc3JjL2VzMjAyMS9MZXRPckNvbnN0LmpzIiwid2VicGFjazovL0VTUGFyc2UvLi9zcmMvZXMyMDIxL0xleGljYWxCaW5kaW5nLmpzIiwid2VicGFjazovL0VTUGFyc2UvLi9zcmMvZXMyMDIxL0xleGljYWxEZWNsYXJhdGlvbi5qcyIsIndlYnBhY2s6Ly9FU1BhcnNlLy4vc3JjL2VzMjAyMS9MaXRlcmFsLmpzIiwid2VicGFjazovL0VTUGFyc2UvLi9zcmMvZXMyMDIxL0xpdGVyYWxQcm9wZXJ0eU5hbWUuanMiLCJ3ZWJwYWNrOi8vRVNQYXJzZS8uL3NyYy9lczIwMjEvTG9naWNhbEFOREV4cHJlc3Npb24uanMiLCJ3ZWJwYWNrOi8vRVNQYXJzZS8uL3NyYy9lczIwMjEvTG9naWNhbE9SRXhwcmVzc2lvbi5qcyIsIndlYnBhY2s6Ly9FU1BhcnNlLy4vc3JjL2VzMjAyMS9NZW1iZXJFeHByZXNzaW9uLmpzIiwid2VicGFjazovL0VTUGFyc2UvLi9zcmMvZXMyMDIxL01ldGFQcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly9FU1BhcnNlLy4vc3JjL2VzMjAyMS9NZXRob2REZWZpbml0aW9uLmpzIiwid2VicGFjazovL0VTUGFyc2UvLi9zcmMvZXMyMDIxL011bHRpcGxpY2F0aXZlRXhwcmVzc2lvbi5qcyIsIndlYnBhY2s6Ly9FU1BhcnNlLy4vc3JjL2VzMjAyMS9OZXdFeHByZXNzaW9uLmpzIiwid2VicGFjazovL0VTUGFyc2UvLi9zcmMvZXMyMDIxL05ld1RhcmdldC5qcyIsIndlYnBhY2s6Ly9FU1BhcnNlLy4vc3JjL2VzMjAyMS9PYmplY3RCaW5kaW5nUGF0dGVybi5qcyIsIndlYnBhY2s6Ly9FU1BhcnNlLy4vc3JjL2VzMjAyMS9PYmplY3RMaXRlcmFsLmpzIiwid2VicGFjazovL0VTUGFyc2UvLi9zcmMvZXMyMDIxL1ByaW1hcnlFeHByZXNzaW9uLmpzIiwid2VicGFjazovL0VTUGFyc2UvLi9zcmMvZXMyMDIxL1Byb3BlcnR5RGVmaW5pdGlvbi5qcyIsIndlYnBhY2s6Ly9FU1BhcnNlLy4vc3JjL2VzMjAyMS9Qcm9wZXJ0eURlZmluaXRpb25MaXN0LmpzIiwid2VicGFjazovL0VTUGFyc2UvLi9zcmMvZXMyMDIxL1Byb3BlcnR5TmFtZS5qcyIsIndlYnBhY2s6Ly9FU1BhcnNlLy4vc3JjL2VzMjAyMS9Qcm9wZXJ0eVNldFBhcmFtZXRlckxpc3QuanMiLCJ3ZWJwYWNrOi8vRVNQYXJzZS8uL3NyYy9lczIwMjEvUmVsYXRpb25hbEV4cHJlc3Npb24uanMiLCJ3ZWJwYWNrOi8vRVNQYXJzZS8uL3NyYy9lczIwMjEvUmV0dXJuU3RhdGVtZW50LmpzIiwid2VicGFjazovL0VTUGFyc2UvLi9zcmMvZXMyMDIxL1NjcmlwdC5qcyIsIndlYnBhY2s6Ly9FU1BhcnNlLy4vc3JjL2VzMjAyMS9TY3JpcHRCb2R5LmpzIiwid2VicGFjazovL0VTUGFyc2UvLi9zcmMvZXMyMDIxL1NoaWZ0RXhwcmVzc2lvbi5qcyIsIndlYnBhY2s6Ly9FU1BhcnNlLy4vc3JjL2VzMjAyMS9TaG9ydENpcmN1aXRFeHByZXNzaW9uLmpzIiwid2VicGFjazovL0VTUGFyc2UvLi9zcmMvZXMyMDIxL1NpbmdsZU5hbWVCaW5kaW5nLmpzIiwid2VicGFjazovL0VTUGFyc2UvLi9zcmMvZXMyMDIxL1NwcmVhZEVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vRVNQYXJzZS8uL3NyYy9lczIwMjEvU3RhdGVtZW50LmpzIiwid2VicGFjazovL0VTUGFyc2UvLi9zcmMvZXMyMDIxL1N0YXRlbWVudExpc3QuanMiLCJ3ZWJwYWNrOi8vRVNQYXJzZS8uL3NyYy9lczIwMjEvU3RhdGVtZW50TGlzdEl0ZW0uanMiLCJ3ZWJwYWNrOi8vRVNQYXJzZS8uL3NyYy9lczIwMjEvU3Vic3RpdHV0aW9uVGVtcGxhdGUuanMiLCJ3ZWJwYWNrOi8vRVNQYXJzZS8uL3NyYy9lczIwMjEvU3VwZXJDYWxsLmpzIiwid2VicGFjazovL0VTUGFyc2UvLi9zcmMvZXMyMDIxL1N1cGVyUHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vRVNQYXJzZS8uL3NyYy9lczIwMjEvU3dpdGNoU3RhdGVtZW50LmpzIiwid2VicGFjazovL0VTUGFyc2UvLi9zcmMvZXMyMDIxL1RlbXBsYXRlTGl0ZXJhbC5qcyIsIndlYnBhY2s6Ly9FU1BhcnNlLy4vc3JjL2VzMjAyMS9UZW1wbGF0ZU1pZGRsZUxpc3QuanMiLCJ3ZWJwYWNrOi8vRVNQYXJzZS8uL3NyYy9lczIwMjEvVGVtcGxhdGVTcGFucy5qcyIsIndlYnBhY2s6Ly9FU1BhcnNlLy4vc3JjL2VzMjAyMS9UaHJvd1N0YXRlbWVudC5qcyIsIndlYnBhY2s6Ly9FU1BhcnNlLy4vc3JjL2VzMjAyMS9UcnlTdGF0ZW1lbnQuanMiLCJ3ZWJwYWNrOi8vRVNQYXJzZS8uL3NyYy9lczIwMjEvVW5hcnlFeHByZXNzaW9uLmpzIiwid2VicGFjazovL0VTUGFyc2UvLi9zcmMvZXMyMDIxL1VuaXF1ZUZvcm1hbFBhcmFtZXRlcnMuanMiLCJ3ZWJwYWNrOi8vRVNQYXJzZS8uL3NyYy9lczIwMjEvVXBkYXRlRXhwcmVzc2lvbi5qcyIsIndlYnBhY2s6Ly9FU1BhcnNlLy4vc3JjL2VzMjAyMS9WYXJpYWJsZURlY2xhcmF0aW9uLmpzIiwid2VicGFjazovL0VTUGFyc2UvLi9zcmMvZXMyMDIxL1ZhcmlhYmxlRGVjbGFyYXRpb25MaXN0LmpzIiwid2VicGFjazovL0VTUGFyc2UvLi9zcmMvZXMyMDIxL1ZhcmlhYmxlU3RhdGVtZW50LmpzIiwid2VicGFjazovL0VTUGFyc2UvLi9zcmMvZXMyMDIxL1doaWxlU3RhdGVtZW50LmpzIiwid2VicGFjazovL0VTUGFyc2UvLi9zcmMvZXMyMDIxL1dpdGhTdGF0ZW1lbnQuanMiLCJ3ZWJwYWNrOi8vRVNQYXJzZS8uL3NyYy9lczIwMjEvWWllbGRFeHByZXNzaW9uLmpzIiwid2VicGFjazovL0VTUGFyc2UvL1VzZXJzL21pbmkvcGxyZy9qaXNldC9saWIvZXNwYXJzZS9zcmN8c3luY3wvXlxcLlxcL2VzLipcXC9TY3JpcHQkLyIsIndlYnBhY2s6Ly9FU1BhcnNlL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL0VTUGFyc2Uvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly9FU1BhcnNlL3dlYnBhY2svc3RhcnR1cCJdLCJuYW1lcyI6WyJleHBvcnRzIiwicmVzZXJ2ZWRXb3JkcyIsInN0cmljdCIsInN0cmljdEJpbmQiLCJlY21hNUFuZExlc3NLZXl3b3JkcyIsImtleXdvcmRzIiwia2V5d29yZFJlbGF0aW9uYWxPcGVyYXRvciIsIm5vbkFTQ0lJaWRlbnRpZmllclN0YXJ0Q2hhcnMiLCJub25BU0NJSWlkZW50aWZpZXJDaGFycyIsIm5vbkFTQ0lJaWRlbnRpZmllclN0YXJ0IiwiUmVnRXhwIiwibm9uQVNDSUlpZGVudGlmaWVyIiwiYXN0cmFsSWRlbnRpZmllclN0YXJ0Q29kZXMiLCJhc3RyYWxJZGVudGlmaWVyQ29kZXMiLCJpc0luQXN0cmFsU2V0IiwiY29kZSIsInNldCIsInBvcyIsImkiLCJsZW5ndGgiLCJpc0lkZW50aWZpZXJTdGFydCIsImFzdHJhbCIsInRlc3QiLCJTdHJpbmciLCJmcm9tQ2hhckNvZGUiLCJpc0lkZW50aWZpZXJDaGFyIiwiVG9rZW5UeXBlIiwibGFiZWwiLCJjb25mIiwidGhpcyIsImtleXdvcmQiLCJiZWZvcmVFeHByIiwic3RhcnRzRXhwciIsImlzTG9vcCIsImlzQXNzaWduIiwicHJlZml4IiwicG9zdGZpeCIsImJpbm9wIiwidXBkYXRlQ29udGV4dCIsIm5hbWUiLCJwcmVjIiwia2V5d29yZHMkMSIsImt3Iiwib3B0aW9ucyIsInR5cGVzIiwibnVtIiwicmVnZXhwIiwic3RyaW5nIiwicHJpdmF0ZUlkIiwiZW9mIiwiYnJhY2tldEwiLCJicmFja2V0UiIsImJyYWNlTCIsImJyYWNlUiIsInBhcmVuTCIsInBhcmVuUiIsImNvbW1hIiwic2VtaSIsImNvbG9uIiwiZG90IiwicXVlc3Rpb24iLCJxdWVzdGlvbkRvdCIsImFycm93IiwidGVtcGxhdGUiLCJpbnZhbGlkVGVtcGxhdGUiLCJlbGxpcHNpcyIsImJhY2tRdW90ZSIsImRvbGxhckJyYWNlTCIsImVxIiwiYXNzaWduIiwiaW5jRGVjIiwibG9naWNhbE9SIiwibG9naWNhbEFORCIsImJpdHdpc2VPUiIsImJpdHdpc2VYT1IiLCJiaXR3aXNlQU5EIiwiZXF1YWxpdHkiLCJyZWxhdGlvbmFsIiwiYml0U2hpZnQiLCJwbHVzTWluIiwibW9kdWxvIiwic3RhciIsInNsYXNoIiwic3RhcnN0YXIiLCJjb2FsZXNjZSIsIl9icmVhayIsIl9jYXNlIiwiX2NhdGNoIiwiX2NvbnRpbnVlIiwiX2RlYnVnZ2VyIiwiX2RlZmF1bHQiLCJfZG8iLCJfZWxzZSIsIl9maW5hbGx5IiwiX2ZvciIsIl9mdW5jdGlvbiIsIl9pZiIsIl9yZXR1cm4iLCJfc3dpdGNoIiwiX3Rocm93IiwiX3RyeSIsIl92YXIiLCJfY29uc3QiLCJfd2hpbGUiLCJfd2l0aCIsIl9uZXciLCJfdGhpcyIsIl9zdXBlciIsIl9jbGFzcyIsIl9leHRlbmRzIiwiX2V4cG9ydCIsIl9pbXBvcnQiLCJfbnVsbCIsIl90cnVlIiwiX2ZhbHNlIiwiX2luIiwiX2luc3RhbmNlb2YiLCJfdHlwZW9mIiwiX3ZvaWQiLCJfZGVsZXRlIiwibGluZUJyZWFrIiwibGluZUJyZWFrRyIsInNvdXJjZSIsImlzTmV3TGluZSIsImVjbWEyMDE5U3RyaW5nIiwibm9uQVNDSUl3aGl0ZXNwYWNlIiwic2tpcFdoaXRlU3BhY2UiLCJyZWYiLCJPYmplY3QiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInRvU3RyaW5nIiwiaGFzIiwib2JqIiwicHJvcE5hbWUiLCJjYWxsIiwiaXNBcnJheSIsIkFycmF5Iiwid29yZHNSZWdleHAiLCJ3b3JkcyIsInJlcGxhY2UiLCJQb3NpdGlvbiIsImxpbmUiLCJjb2wiLCJjb2x1bW4iLCJvZmZzZXQiLCJuIiwiU291cmNlTG9jYXRpb24iLCJwIiwic3RhcnQiLCJlbmQiLCJzb3VyY2VGaWxlIiwiZ2V0TGluZUluZm8iLCJpbnB1dCIsImN1ciIsImxhc3RJbmRleCIsIm1hdGNoIiwiZXhlYyIsImluZGV4IiwiZGVmYXVsdE9wdGlvbnMiLCJlY21hVmVyc2lvbiIsInNvdXJjZVR5cGUiLCJvbkluc2VydGVkU2VtaWNvbG9uIiwib25UcmFpbGluZ0NvbW1hIiwiYWxsb3dSZXNlcnZlZCIsImFsbG93UmV0dXJuT3V0c2lkZUZ1bmN0aW9uIiwiYWxsb3dJbXBvcnRFeHBvcnRFdmVyeXdoZXJlIiwiYWxsb3dBd2FpdE91dHNpZGVGdW5jdGlvbiIsImFsbG93SGFzaEJhbmciLCJsb2NhdGlvbnMiLCJvblRva2VuIiwib25Db21tZW50IiwicmFuZ2VzIiwicHJvZ3JhbSIsImRpcmVjdFNvdXJjZUZpbGUiLCJwcmVzZXJ2ZVBhcmVucyIsIndhcm5lZEFib3V0RWNtYVZlcnNpb24iLCJnZXRPcHRpb25zIiwib3B0cyIsIm9wdCIsImNvbnNvbGUiLCJ3YXJuIiwidG9rZW5zIiwidG9rZW4iLCJwdXNoIiwiYXJyYXkiLCJibG9jayIsInRleHQiLCJzdGFydExvYyIsImVuZExvYyIsImNvbW1lbnQiLCJ0eXBlIiwidmFsdWUiLCJsb2MiLCJyYW5nZSIsInB1c2hDb21tZW50IiwiZnVuY3Rpb25GbGFncyIsImFzeW5jIiwiZ2VuZXJhdG9yIiwiUGFyc2VyIiwic3RhcnRQb3MiLCJyZXNlcnZlZCIsInJlc2VydmVkU3RyaWN0IiwicmVzZXJ2ZWRXb3Jkc1N0cmljdCIsInJlc2VydmVkV29yZHNTdHJpY3RCaW5kIiwiY29udGFpbnNFc2MiLCJsaW5lU3RhcnQiLCJsYXN0SW5kZXhPZiIsImN1ckxpbmUiLCJzbGljZSIsInNwbGl0IiwiY3VyUG9zaXRpb24iLCJsYXN0VG9rRW5kTG9jIiwibGFzdFRva1N0YXJ0TG9jIiwibGFzdFRva1N0YXJ0IiwibGFzdFRva0VuZCIsImNvbnRleHQiLCJpbml0aWFsQ29udGV4dCIsImV4cHJBbGxvd2VkIiwiaW5Nb2R1bGUiLCJzdHJpY3REaXJlY3RpdmUiLCJwb3RlbnRpYWxBcnJvd0F0IiwicG90ZW50aWFsQXJyb3dJbkZvckF3YWl0IiwieWllbGRQb3MiLCJhd2FpdFBvcyIsImF3YWl0SWRlbnRQb3MiLCJsYWJlbHMiLCJ1bmRlZmluZWRFeHBvcnRzIiwiY3JlYXRlIiwic2tpcExpbmVDb21tZW50Iiwic2NvcGVTdGFjayIsImVudGVyU2NvcGUiLCJyZWdleHBTdGF0ZSIsInByaXZhdGVOYW1lU3RhY2siLCJwcm90b3R5cGVBY2Nlc3NvcnMiLCJpbkZ1bmN0aW9uIiwiY29uZmlndXJhYmxlIiwiaW5HZW5lcmF0b3IiLCJpbkFzeW5jIiwiYWxsb3dTdXBlciIsImFsbG93RGlyZWN0U3VwZXIiLCJ0cmVhdEZ1bmN0aW9uc0FzVmFyIiwiaW5Ob25BcnJvd0Z1bmN0aW9uIiwicGFyc2UiLCJub2RlIiwic3RhcnROb2RlIiwibmV4dFRva2VuIiwicGFyc2VUb3BMZXZlbCIsImdldCIsImN1cnJlbnRWYXJTY29wZSIsImZsYWdzIiwiaW5DbGFzc0ZpZWxkSW5pdCIsImN1cnJlbnRUaGlzU2NvcGUiLCJ0cmVhdEZ1bmN0aW9uc0FzVmFySW5TY29wZSIsImN1cnJlbnRTY29wZSIsImV4dGVuZCIsInBsdWdpbnMiLCJsZW4iLCJhcmd1bWVudHMiLCJjbHMiLCJwYXJzZUV4cHJlc3Npb25BdCIsInBhcnNlciIsInBhcnNlRXhwcmVzc2lvbiIsInRva2VuaXplciIsImRlZmluZVByb3BlcnRpZXMiLCJwcCIsImxpdGVyYWwiLCJEZXN0cnVjdHVyaW5nRXJyb3JzIiwic2hvcnRoYW5kQXNzaWduIiwidHJhaWxpbmdDb21tYSIsInBhcmVudGhlc2l6ZWRBc3NpZ24iLCJwYXJlbnRoZXNpemVkQmluZCIsImRvdWJsZVByb3RvIiwic3BhY2VBZnRlciIsIm5leHQiLCJjaGFyQXQiLCJlYXQiLCJpc0NvbnRleHR1YWwiLCJlYXRDb250ZXh0dWFsIiwiZXhwZWN0Q29udGV4dHVhbCIsInVuZXhwZWN0ZWQiLCJjYW5JbnNlcnRTZW1pY29sb24iLCJpbnNlcnRTZW1pY29sb24iLCJzZW1pY29sb24iLCJhZnRlclRyYWlsaW5nQ29tbWEiLCJ0b2tUeXBlIiwibm90TmV4dCIsImV4cGVjdCIsInJhaXNlIiwiY2hlY2tQYXR0ZXJuRXJyb3JzIiwicmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycyIsInJhaXNlUmVjb3ZlcmFibGUiLCJwYXJlbnMiLCJjaGVja0V4cHJlc3Npb25FcnJvcnMiLCJhbmRUaHJvdyIsImNoZWNrWWllbGRBd2FpdEluRGVmYXVsdFBhcmFtcyIsImlzU2ltcGxlQXNzaWduVGFyZ2V0IiwiZXhwciIsImV4cHJlc3Npb24iLCJwcCQxIiwiYm9keSIsInN0bXQiLCJwYXJzZVN0YXRlbWVudCIsImxpc3QiLCJrZXlzIiwiYWRhcHREaXJlY3RpdmVQcm9sb2d1ZSIsImZpbmlzaE5vZGUiLCJsb29wTGFiZWwiLCJraW5kIiwic3dpdGNoTGFiZWwiLCJpc0xldCIsInNraXAiLCJuZXh0Q2giLCJjaGFyQ29kZUF0IiwiaWRlbnQiLCJpc0FzeW5jRnVuY3Rpb24iLCJhZnRlciIsInRvcExldmVsIiwic3RhcnR0eXBlIiwicGFyc2VCcmVha0NvbnRpbnVlU3RhdGVtZW50IiwicGFyc2VEZWJ1Z2dlclN0YXRlbWVudCIsInBhcnNlRG9TdGF0ZW1lbnQiLCJwYXJzZUZvclN0YXRlbWVudCIsInBhcnNlRnVuY3Rpb25TdGF0ZW1lbnQiLCJwYXJzZUNsYXNzIiwicGFyc2VJZlN0YXRlbWVudCIsInBhcnNlUmV0dXJuU3RhdGVtZW50IiwicGFyc2VTd2l0Y2hTdGF0ZW1lbnQiLCJwYXJzZVRocm93U3RhdGVtZW50IiwicGFyc2VUcnlTdGF0ZW1lbnQiLCJwYXJzZVZhclN0YXRlbWVudCIsInBhcnNlV2hpbGVTdGF0ZW1lbnQiLCJwYXJzZVdpdGhTdGF0ZW1lbnQiLCJwYXJzZUJsb2NrIiwicGFyc2VFbXB0eVN0YXRlbWVudCIsInBhcnNlRXhwcmVzc2lvblN0YXRlbWVudCIsInBhcnNlSW1wb3J0IiwicGFyc2VFeHBvcnQiLCJtYXliZU5hbWUiLCJwYXJzZUxhYmVsZWRTdGF0ZW1lbnQiLCJpc0JyZWFrIiwicGFyc2VJZGVudCIsImxhYiIsInBvcCIsInBhcnNlUGFyZW5FeHByZXNzaW9uIiwiYXdhaXRBdCIsInBhcnNlRm9yIiwiaW5pdCQxIiwicGFyc2VWYXIiLCJkZWNsYXJhdGlvbnMiLCJhd2FpdCIsInBhcnNlRm9ySW4iLCJpbml0IiwidG9Bc3NpZ25hYmxlIiwiY2hlY2tMVmFsUGF0dGVybiIsImlzQXN5bmMiLCJkZWNsYXJhdGlvblBvc2l0aW9uIiwicGFyc2VGdW5jdGlvbiIsIkZVTkNfU1RBVEVNRU5UIiwiRlVOQ19IQU5HSU5HX1NUQVRFTUVOVCIsImNvbnNlcXVlbnQiLCJhbHRlcm5hdGUiLCJhcmd1bWVudCIsImRpc2NyaW1pbmFudCIsImNhc2VzIiwic2F3RGVmYXVsdCIsImlzQ2FzZSIsImV4aXRTY29wZSIsImVtcHR5IiwiaGFuZGxlciIsImNsYXVzZSIsInBhcmFtIiwicGFyc2VCaW5kaW5nQXRvbSIsInNpbXBsZSIsImZpbmFsaXplciIsIm9iamVjdCIsImkkMSIsImxhYmVsJDEiLCJzdGF0ZW1lbnRTdGFydCIsImluZGV4T2YiLCJjcmVhdGVOZXdMZXhpY2FsU2NvcGUiLCJleGl0U3RyaWN0IiwidXBkYXRlIiwiaXNGb3JJbiIsImlkIiwibGVmdCIsInJpZ2h0IiwicGFyc2VNYXliZUFzc2lnbiIsImlzRm9yIiwiZGVjbCIsInBhcnNlVmFySWQiLCJpc1ByaXZhdGVOYW1lQ29uZmxpY3RlZCIsInByaXZhdGVOYW1lTWFwIiwiZWxlbWVudCIsImtleSIsImN1cnIiLCJzdGF0aWMiLCJjaGVja0tleU5hbWUiLCJjb21wdXRlZCIsInN0YXRlbWVudCIsImFsbG93RXhwcmVzc2lvbkJvZHkiLCJpbml0RnVuY3Rpb24iLCJjaGVja0xWYWxTaW1wbGUiLCJvbGRZaWVsZFBvcyIsIm9sZEF3YWl0UG9zIiwib2xkQXdhaXRJZGVudFBvcyIsInBhcnNlRnVuY3Rpb25QYXJhbXMiLCJwYXJzZUZ1bmN0aW9uQm9keSIsInBhcmFtcyIsInBhcnNlQmluZGluZ0xpc3QiLCJpc1N0YXRlbWVudCIsIm9sZFN0cmljdCIsInBhcnNlQ2xhc3NJZCIsInBhcnNlQ2xhc3NTdXBlciIsImVudGVyQ2xhc3NCb2R5IiwiY2xhc3NCb2R5IiwiaGFkQ29uc3RydWN0b3IiLCJwYXJzZUNsYXNzRWxlbWVudCIsInN1cGVyQ2xhc3MiLCJleGl0Q2xhc3NCb2R5IiwiY29uc3RydWN0b3JBbGxvd3NTdXBlciIsImtleU5hbWUiLCJpc0dlbmVyYXRvciIsImlzQ2xhc3NFbGVtZW50TmFtZVN0YXJ0IiwibGFzdFZhbHVlIiwic3RhcnROb2RlQXQiLCJwYXJzZUNsYXNzRWxlbWVudE5hbWUiLCJpc0NvbnN0cnVjdG9yIiwiYWxsb3dzRGlyZWN0U3VwZXIiLCJwYXJzZUNsYXNzTWV0aG9kIiwicGFyc2VDbGFzc0ZpZWxkIiwicGFyc2VQcml2YXRlSWRlbnQiLCJwYXJzZVByb3BlcnR5TmFtZSIsIm1ldGhvZCIsInBhcnNlTWV0aG9kIiwiZmllbGQiLCJzY29wZSIsInBhcnNlRXhwclN1YnNjcmlwdHMiLCJkZWNsYXJlZCIsInVzZWQiLCJwYXJlbnQiLCJleHBvcnRlZCIsImNoZWNrRXhwb3J0IiwicGFyc2VFeHByQXRvbSIsImZOb2RlIiwiZGVjbGFyYXRpb24iLCJjTm9kZSIsInNob3VsZFBhcnNlRXhwb3J0U3RhdGVtZW50IiwiY2hlY2tWYXJpYWJsZUV4cG9ydCIsInNwZWNpZmllcnMiLCJwYXJzZUV4cG9ydFNwZWNpZmllcnMiLCJzcGVjIiwiY2hlY2tVbnJlc2VydmVkIiwibG9jYWwiLCJjaGVja0xvY2FsRXhwb3J0IiwiY2hlY2tQYXR0ZXJuRXhwb3J0IiwicGF0IiwicHJvcGVydGllcyIsInByb3AiLCJsaXN0JDEiLCJlbGVtZW50cyIsImVsdCIsImRlY2xzIiwibm9kZXMiLCJmaXJzdCIsInBhcnNlSW1wb3J0U3BlY2lmaWVycyIsIm5vZGUkMSIsIm5vZGUkMiIsImltcG9ydGVkIiwic3RhdGVtZW50cyIsImlzRGlyZWN0aXZlQ2FuZGlkYXRlIiwiZGlyZWN0aXZlIiwicmF3IiwicHAkMiIsImlzQmluZGluZyIsInRvQXNzaWduYWJsZUxpc3QiLCJvcGVyYXRvciIsImV4cHJMaXN0IiwibGFzdCIsInBhcnNlU3ByZWFkIiwicGFyc2VSZXN0QmluZGluZyIsInBhcnNlT2JqIiwiY2xvc2UiLCJhbGxvd0VtcHR5IiwiYWxsb3dUcmFpbGluZ0NvbW1hIiwiZWx0cyIsInJlc3QiLCJwYXJzZUJpbmRpbmdMaXN0SXRlbSIsImVsZW0iLCJwYXJzZU1heWJlRGVmYXVsdCIsImJpbmRpbmdUeXBlIiwiY2hlY2tDbGFzaGVzIiwiaXNCaW5kIiwiZGVjbGFyZU5hbWUiLCJjaGVja0xWYWxJbm5lclBhdHRlcm4iLCJwcCQzIiwiaXNQcml2YXRlRmllbGRBY2Nlc3MiLCJwcm9wZXJ0eSIsImNoZWNrUHJvcENsYXNoIiwicHJvcEhhc2giLCJzaG9ydGhhbmQiLCJwcm90byIsIm90aGVyIiwiZm9ySW5pdCIsImV4cHJlc3Npb25zIiwiYWZ0ZXJMZWZ0UGFyc2UiLCJwYXJzZVlpZWxkIiwib3duRGVzdHJ1Y3R1cmluZ0Vycm9ycyIsIm9sZFBhcmVuQXNzaWduIiwib2xkVHJhaWxpbmdDb21tYSIsInBhcnNlTWF5YmVDb25kaXRpb25hbCIsInBhcnNlRXhwck9wcyIsInBhcnNlTWF5YmVVbmFyeSIsInBhcnNlRXhwck9wIiwibGVmdFN0YXJ0UG9zIiwibGVmdFN0YXJ0TG9jIiwibWluUHJlYyIsImxvZ2ljYWwiLCJvcCIsImJ1aWxkQmluYXJ5Iiwic2F3VW5hcnkiLCJwYXJzZUF3YWl0IiwicmVzdWx0IiwicGFyc2VTdWJzY3JpcHRzIiwiYmFzZSIsIm5vQ2FsbHMiLCJtYXliZUFzeW5jQXJyb3ciLCJvcHRpb25hbENoYWluZWQiLCJwYXJzZVN1YnNjcmlwdCIsIm9wdGlvbmFsIiwiY2hhaW5Ob2RlIiwib3B0aW9uYWxTdXBwb3J0ZWQiLCJwYXJzZUV4cHJMaXN0IiwicGFyc2VBcnJvd0V4cHJlc3Npb24iLCJjYWxsZWUiLCJ0YWciLCJxdWFzaSIsInBhcnNlVGVtcGxhdGUiLCJpc1RhZ2dlZCIsInJlYWRSZWdleHAiLCJjYW5CZUFycm93IiwicGFyc2VMaXRlcmFsIiwicmVnZXgiLCJwYXR0ZXJuIiwicGFyc2VQYXJlbkFuZERpc3Rpbmd1aXNoRXhwcmVzc2lvbiIsInBhcnNlTmV3IiwicGFyc2VFeHBySW1wb3J0IiwibWV0YSIsInBhcnNlRHluYW1pY0ltcG9ydCIsInBhcnNlSW1wb3J0TWV0YSIsImVycm9yUG9zIiwiYmlnaW50IiwidmFsIiwic3ByZWFkU3RhcnQiLCJpbm5lclN0YXJ0UG9zIiwiaW5uZXJTdGFydExvYyIsImxhc3RJc0NvbW1hIiwicGFyc2VQYXJlbkl0ZW0iLCJpbm5lckVuZFBvcyIsImlubmVyRW5kTG9jIiwicGFyc2VQYXJlbkFycm93TGlzdCIsImZpbmlzaE5vZGVBdCIsInBhciIsIml0ZW0iLCJlbXB0eSQxIiwiaXNJbXBvcnQiLCJwYXJzZVRlbXBsYXRlRWxlbWVudCIsImNvb2tlZCIsInRhaWwiLCJjdXJFbHQiLCJxdWFzaXMiLCJpc0FzeW5jUHJvcCIsImlzUGF0dGVybiIsInBhcnNlUHJvcGVydHkiLCJwYXJzZVByb3BlcnR5VmFsdWUiLCJjb3B5Tm9kZSIsInBhcmFtQ291bnQiLCJpc0Fycm93RnVuY3Rpb24iLCJpc01ldGhvZCIsImlzRXhwcmVzc2lvbiIsInVzZVN0cmljdCIsImNoZWNrUGFyYW1zIiwibm9uU2ltcGxlIiwiaXNTaW1wbGVQYXJhbUxpc3QiLCJvbGRMYWJlbHMiLCJ1bmRlZmluZWQiLCJhbGxvd0R1cGxpY2F0ZXMiLCJuYW1lSGFzaCIsImxpYmVyYWwiLCJkZWxlZ2F0ZSIsInBwJDQiLCJtZXNzYWdlIiwiZXJyIiwiU3ludGF4RXJyb3IiLCJyYWlzZWRBdCIsInBwJDUiLCJTY29wZSIsInZhciIsImxleGljYWwiLCJmdW5jdGlvbnMiLCJyZWRlY2xhcmVkIiwic2NvcGUkMiIsInNjb3BlJDMiLCJTQ09QRV9UT1AiLCJOb2RlIiwicHAkNiIsIm5ld05vZGUiLCJUb2tDb250ZXh0IiwiaXNFeHByIiwicHJlc2VydmVTcGFjZSIsIm92ZXJyaWRlIiwidHlwZXMkMSIsImJfc3RhdCIsImJfZXhwciIsImJfdG1wbCIsInBfc3RhdCIsInBfZXhwciIsInFfdG1wbCIsInRyeVJlYWRUZW1wbGF0ZVRva2VuIiwiZl9zdGF0IiwiZl9leHByIiwiZl9leHByX2dlbiIsImZfZ2VuIiwicHAkNyIsImJyYWNlSXNCbG9jayIsInByZXZUeXBlIiwiY3VyQ29udGV4dCIsImluR2VuZXJhdG9yQ29udGV4dCIsIm91dCIsInN0YXRlbWVudFBhcmVucyIsImFsbG93ZWQiLCJlY21hOUJpbmFyeVByb3BlcnRpZXMiLCJlY21hMTBCaW5hcnlQcm9wZXJ0aWVzIiwidW5pY29kZUJpbmFyeVByb3BlcnRpZXMiLCJ1bmljb2RlR2VuZXJhbENhdGVnb3J5VmFsdWVzIiwiZWNtYTlTY3JpcHRWYWx1ZXMiLCJlY21hMTBTY3JpcHRWYWx1ZXMiLCJlY21hMTFTY3JpcHRWYWx1ZXMiLCJ1bmljb2RlU2NyaXB0VmFsdWVzIiwiZGF0YSIsImJ1aWxkVW5pY29kZURhdGEiLCJkIiwiYmluYXJ5Iiwibm9uQmluYXJ5IiwiR2VuZXJhbF9DYXRlZ29yeSIsIlNjcmlwdCIsIlNjcmlwdF9FeHRlbnNpb25zIiwiZ2MiLCJzYyIsInNjeCIsInBwJDgiLCJSZWdFeHBWYWxpZGF0aW9uU3RhdGUiLCJ2YWxpZEZsYWdzIiwidW5pY29kZVByb3BlcnRpZXMiLCJzd2l0Y2hVIiwic3dpdGNoTiIsImxhc3RJbnRWYWx1ZSIsImxhc3RTdHJpbmdWYWx1ZSIsImxhc3RBc3NlcnRpb25Jc1F1YW50aWZpYWJsZSIsIm51bUNhcHR1cmluZ1BhcmVucyIsIm1heEJhY2tSZWZlcmVuY2UiLCJncm91cE5hbWVzIiwiYmFja1JlZmVyZW5jZU5hbWVzIiwiY29kZVBvaW50VG9TdHJpbmciLCJjaCIsImlzU3ludGF4Q2hhcmFjdGVyIiwiaXNDb250cm9sTGV0dGVyIiwiaXNVbmljb2RlUHJvcGVydHlOYW1lQ2hhcmFjdGVyIiwiaXNVbmljb2RlUHJvcGVydHlWYWx1ZUNoYXJhY3RlciIsImlzRGVjaW1hbERpZ2l0IiwiaXNIZXhEaWdpdCIsImhleFRvSW50IiwiaXNPY3RhbERpZ2l0IiwicmVzZXQiLCJ1bmljb2RlIiwiYXQiLCJmb3JjZVUiLCJzIiwibCIsImMiLCJuZXh0SW5kZXgiLCJjdXJyZW50IiwibG9va2FoZWFkIiwiYWR2YW5jZSIsInZhbGlkYXRlUmVnRXhwRmxhZ3MiLCJzdGF0ZSIsImZsYWciLCJ2YWxpZGF0ZVJlZ0V4cFBhdHRlcm4iLCJyZWdleHBfcGF0dGVybiIsInJlZ2V4cF9kaXNqdW5jdGlvbiIsInJlZ2V4cF9hbHRlcm5hdGl2ZSIsInJlZ2V4cF9lYXRRdWFudGlmaWVyIiwicmVnZXhwX2VhdFRlcm0iLCJyZWdleHBfZWF0QXNzZXJ0aW9uIiwicmVnZXhwX2VhdEF0b20iLCJyZWdleHBfZWF0RXh0ZW5kZWRBdG9tIiwibG9va2JlaGluZCIsIm5vRXJyb3IiLCJyZWdleHBfZWF0UXVhbnRpZmllclByZWZpeCIsInJlZ2V4cF9lYXRCcmFjZWRRdWFudGlmaWVyIiwibWluIiwibWF4IiwicmVnZXhwX2VhdERlY2ltYWxEaWdpdHMiLCJyZWdleHBfZWF0UGF0dGVybkNoYXJhY3RlcnMiLCJyZWdleHBfZWF0UmV2ZXJzZVNvbGlkdXNBdG9tRXNjYXBlIiwicmVnZXhwX2VhdENoYXJhY3RlckNsYXNzIiwicmVnZXhwX2VhdFVuY2FwdHVyaW5nR3JvdXAiLCJyZWdleHBfZWF0Q2FwdHVyaW5nR3JvdXAiLCJyZWdleHBfZWF0QXRvbUVzY2FwZSIsInJlZ2V4cF9ncm91cFNwZWNpZmllciIsInJlZ2V4cF9lYXRJbnZhbGlkQnJhY2VkUXVhbnRpZmllciIsInJlZ2V4cF9lYXRFeHRlbmRlZFBhdHRlcm5DaGFyYWN0ZXIiLCJyZWdleHBfZWF0U3ludGF4Q2hhcmFjdGVyIiwicmVnZXhwX2VhdEdyb3VwTmFtZSIsInJlZ2V4cF9lYXRSZWdFeHBJZGVudGlmaWVyTmFtZSIsInJlZ2V4cF9lYXRSZWdFeHBJZGVudGlmaWVyU3RhcnQiLCJyZWdleHBfZWF0UmVnRXhwSWRlbnRpZmllclBhcnQiLCJyZWdleHBfZWF0UmVnRXhwVW5pY29kZUVzY2FwZVNlcXVlbmNlIiwiaXNSZWdFeHBJZGVudGlmaWVyU3RhcnQiLCJpc1JlZ0V4cElkZW50aWZpZXJQYXJ0IiwicmVnZXhwX2VhdEJhY2tSZWZlcmVuY2UiLCJyZWdleHBfZWF0Q2hhcmFjdGVyQ2xhc3NFc2NhcGUiLCJyZWdleHBfZWF0Q2hhcmFjdGVyRXNjYXBlIiwicmVnZXhwX2VhdEtHcm91cE5hbWUiLCJyZWdleHBfZWF0RGVjaW1hbEVzY2FwZSIsInJlZ2V4cF9lYXRDb250cm9sRXNjYXBlIiwicmVnZXhwX2VhdENDb250cm9sTGV0dGVyIiwicmVnZXhwX2VhdFplcm8iLCJyZWdleHBfZWF0SGV4RXNjYXBlU2VxdWVuY2UiLCJyZWdleHBfZWF0TGVnYWN5T2N0YWxFc2NhcGVTZXF1ZW5jZSIsInJlZ2V4cF9lYXRJZGVudGl0eUVzY2FwZSIsInJlZ2V4cF9lYXRDb250cm9sTGV0dGVyIiwicmVnZXhwX2VhdEZpeGVkSGV4RGlnaXRzIiwibGVhZCIsImxlYWRTdXJyb2dhdGVFbmQiLCJ0cmFpbCIsInJlZ2V4cF9lYXRIZXhEaWdpdHMiLCJpc0NoYXJhY3RlckNsYXNzRXNjYXBlIiwicmVnZXhwX2VhdFVuaWNvZGVQcm9wZXJ0eVZhbHVlRXhwcmVzc2lvbiIsInJlZ2V4cF9lYXRVbmljb2RlUHJvcGVydHlOYW1lIiwicmVnZXhwX2VhdFVuaWNvZGVQcm9wZXJ0eVZhbHVlIiwicmVnZXhwX3ZhbGlkYXRlVW5pY29kZVByb3BlcnR5TmFtZUFuZFZhbHVlIiwicmVnZXhwX2VhdExvbmVVbmljb2RlUHJvcGVydHlOYW1lT3JWYWx1ZSIsIm5hbWVPclZhbHVlIiwicmVnZXhwX3ZhbGlkYXRlVW5pY29kZVByb3BlcnR5TmFtZU9yVmFsdWUiLCJyZWdleHBfY2xhc3NSYW5nZXMiLCJyZWdleHBfZWF0Q2xhc3NBdG9tIiwicmVnZXhwX2VhdENsYXNzRXNjYXBlIiwiY2gkMSIsInJlZ2V4cF9lYXRDbGFzc0NvbnRyb2xMZXR0ZXIiLCJyZWdleHBfZWF0T2N0YWxEaWdpdCIsIm4xIiwibjIiLCJUb2tlbiIsInBwJDkiLCJzdHJpbmdUb0JpZ0ludCIsInN0ciIsIkJpZ0ludCIsImNvZGVQb2ludFRvU3RyaW5nJDEiLCJpZ25vcmVFc2NhcGVTZXF1ZW5jZUluS2V5d29yZCIsImdldFRva2VuIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJ0aGlzJDEiLCJkb25lIiwic2tpcFNwYWNlIiwiZmluaXNoVG9rZW4iLCJyZWFkVG9rZW4iLCJmdWxsQ2hhckNvZGVBdFBvcyIsInJlYWRXb3JkIiwiZ2V0VG9rZW5Gcm9tQ29kZSIsInNraXBCbG9ja0NvbW1lbnQiLCJzdGFydFNraXAiLCJsb29wIiwicmVhZFRva2VuX2RvdCIsInJlYWROdW1iZXIiLCJuZXh0MiIsInJlYWRUb2tlbl9zbGFzaCIsImZpbmlzaE9wIiwicmVhZFRva2VuX211bHRfbW9kdWxvX2V4cCIsInNpemUiLCJ0b2tlbnR5cGUiLCJyZWFkVG9rZW5fcGlwZV9hbXAiLCJyZWFkVG9rZW5fY2FyZXQiLCJyZWFkVG9rZW5fcGx1c19taW4iLCJyZWFkVG9rZW5fbHRfZ3QiLCJyZWFkVG9rZW5fZXFfZXhjbCIsInJlYWRUb2tlbl9xdWVzdGlvbiIsInJlYWRUb2tlbl9udW1iZXJTaWduIiwicmVhZFdvcmQxIiwicmVhZFJhZGl4TnVtYmVyIiwicmVhZFN0cmluZyIsImVzY2FwZWQiLCJpbkNsYXNzIiwiZmxhZ3NTdGFydCIsImUiLCJyZWFkSW50IiwicmFkaXgiLCJtYXliZUxlZ2FjeU9jdGFsTnVtZXJpY0xpdGVyYWwiLCJhbGxvd1NlcGFyYXRvcnMiLCJpc0xlZ2FjeU9jdGFsTnVtZXJpY0xpdGVyYWwiLCJ0b3RhbCIsImxhc3RDb2RlIiwiSW5maW5pdHkiLCJzdGFydHNXaXRoRG90Iiwib2N0YWwiLCJ2YWwkMSIsInBhcnNlSW50IiwicGFyc2VGbG9hdCIsInJlYWRDb2RlUG9pbnQiLCJjb2RlUG9zIiwicmVhZEhleENoYXIiLCJpbnZhbGlkU3RyaW5nVG9rZW4iLCJxdW90ZSIsImNodW5rU3RhcnQiLCJyZWFkRXNjYXBlZENoYXIiLCJJTlZBTElEX1RFTVBMQVRFX0VTQ0FQRV9FUlJPUiIsImluVGVtcGxhdGVFbGVtZW50IiwicmVhZFRtcGxUb2tlbiIsInJlYWRJbnZhbGlkVGVtcGxhdGVUb2tlbiIsInBvc2l0aW9uIiwiaW5UZW1wbGF0ZSIsIm9jdGFsU3RyIiwic3Vic3RyIiwid29yZCIsImVzY1N0YXJ0IiwiZXNjIiwidmVyc2lvbiIsImFjb3JuIiwidG9rVHlwZXMiLCJrZXl3b3JkVHlwZXMiLCJ0b2tDb250ZXh0cyIsImRlZmluZVByb3BlcnR5IiwiZmFjdG9yeSIsIl9zcmMiLCJzbGljZVNyYyIsIl9jb21tYXMiLCJtb2R1bGUiLCJzcmMiLCJpbml0U3JjIiwiYWRkQ29tbWEiLCJjaGVja0NvbW1hIiwibGFzdENoYXIiLCJwYXNzQ2hhciIsInBhc3NDb21tYSIsImNvbW1hUG9zIiwiaWR4IiwiYXJyIiwiY29uY2F0IiwiY3JlYXRlU2VtaWNvbG9uIiwiY250IiwiZmlsbCIsImNoZWNrQ292ZXJDYWxsRXhwcmVzc2lvbkFuZEFzeW5jQXJyb3dIZWFkIiwiY29uc3RydWN0b3IiLCJjb21wcmVzcyIsIkxleGljYWxOb2RlIiwiY2hpbGRyZW4iLCJyb290IiwicXVldWUiLCJ0YXJnZXQiLCJzaGlmdCIsIm1hcCIsIk51bWJlciIsImNvbXByZXNzZWRMb2MiLCJmb3JFYWNoIiwiY2hpbGQiLCJmcm9tTGlzdCIsImVsZW1zIiwiZ2VuQ2hpbGQiLCJnZXRSaHMiLCJuYW1lTGlzdCIsImdlbkxpc3QiLCJnaXZlbiIsIlRPRE8iLCJtc2ciLCJnZXRCaW5hcnkiLCJvcHMiLCJnZW5MZWZ0IiwiZ2VuUmlnaHQiLCJpbmZvIiwiciIsImFjb3JuUGFyc2UiLCJfIiwiZXJyb3IiLCJ0cmFucyIsImFjb3JuQXN0IiwicGFyc2VXaXRoQ29tcHJlc3MiLCJKU09OIiwic3RyaW5naWZ5IiwiQWRkaXRpdmVFeHByZXNzaW9uIiwiWWllbGQiLCJBd2FpdCIsIk11bHRpcGxpY2F0aXZlRXhwcmVzc2lvbiIsIkFyZ3VtZW50TGlzdCIsIkFzc2lnbm1lbnRFeHByZXNzaW9uIiwiaGFzQ29tbWEiLCJFbGlzaW9uIiwiQmluZGluZ0VsZW1lbnRMaXN0IiwiQmluZGluZ1Jlc3RFbGVtZW50IiwiZXZlcnkiLCJlbGlzaW9uIiwibGFzdEVsZW0iLCJudWxsTGlzdCIsImVsZW1MaXN0IiwicmVzdEVsZW0iLCJFbGVtZW50TGlzdCIsIngiLCJJbiIsIkFycm93UGFyYW1ldGVycyIsIkNvbmNpc2VCb2R5IiwicHMiLCJiIiwiQmluZGluZ0lkZW50aWZpZXIiLCJDb3ZlclBhcmVudGhlc2l6ZWRFeHByZXNzaW9uQW5kQXJyb3dQYXJhbWV0ZXJMaXN0IiwiY292ZXIiLCJiaW5kaW5nIiwiQ29uZGl0aW9uYWxFeHByZXNzaW9uIiwiWWllbGRFeHByZXNzaW9uIiwiQXJyb3dGdW5jdGlvbiIsIkFzeW5jQXJyb3dGdW5jdGlvbiIsIkxlZnRIYW5kU2lkZUV4cHJlc3Npb24iLCJjb25kIiwibGhzIiwiQXN5bmNBcnJvd0JpbmRpbmdJZGVudGlmaWVyIiwiQXN5bmNDb25jaXNlQm9keSIsIkNvdmVyQ2FsbEV4cHJlc3Npb25BbmRBc3luY0Fycm93SGVhZCIsImlzSGVhZCIsImhlYWRHaXZlbiIsImhlYWQiLCJFeHByZXNzaW9uQm9keSIsIkFzeW5jRnVuY3Rpb25Cb2R5IiwiRnVuY3Rpb25Cb2R5IiwiRGVmYXVsdCIsIkZvcm1hbFBhcmFtZXRlcnMiLCJBc3luY0dlbmVyYXRvckJvZHkiLCJQcm9wZXJ0eU5hbWUiLCJVbmlxdWVGb3JtYWxQYXJhbWV0ZXJzIiwiVW5hcnlFeHByZXNzaW9uIiwiU2luZ2xlTmFtZUJpbmRpbmciLCJCaW5kaW5nUGF0dGVybiIsIkluaXRpYWxpemVyIiwic2luZ2xlIiwiYmluZCIsIkJpbmRpbmdFbGlzaW9uRWxlbWVudCIsInVuc2hpZnQiLCJlbGlzaW9uRWxlbSIsImxpc3RFbGVtIiwiQmluZGluZ0VsZW1lbnQiLCJJZGVudGlmaWVyIiwiTGV4aWNhbEJpbmRpbmciLCJPYmplY3RCaW5kaW5nUGF0dGVybiIsIkFycmF5QmluZGluZ1BhdHRlcm4iLCJCaW5kaW5nUHJvcGVydHkiLCJCaXR3aXNlQU5ERXhwcmVzc2lvbiIsIkVxdWFsaXR5RXhwcmVzc2lvbiIsIkJpdHdpc2VPUkV4cHJlc3Npb24iLCJCaXR3aXNlWE9SRXhwcmVzc2lvbiIsIlJldHVybiIsIlN0YXRlbWVudExpc3QiLCJCbG9jayIsIkxhYmVsSWRlbnRpZmllciIsIkl0ZXJhdGlvblN0YXRlbWVudCIsIlN3aXRjaFN0YXRlbWVudCIsIkNhbGxFeHByZXNzaW9uIiwiRXhwcmVzc2lvbiIsIkFyZ3VtZW50cyIsIlN1cGVyQ2FsbCIsIlRlbXBsYXRlTGl0ZXJhbCIsImNhbGxFeHByIiwiYXJncyIsIkNhc2VDbGF1c2VzIiwiRGVmYXVsdENsYXVzZSIsImRlZmF1bHRJZHgiLCJmaW5kSW5kZXgiLCJscyIsInJzIiwiQ2FzZUNsYXVzZSIsIkNhdGNoUGFyYW1ldGVyIiwiQ2xhc3NFbGVtZW50TGlzdCIsIkNsYXNzVGFpbCIsIk1ldGhvZERlZmluaXRpb24iLCJDbGFzc0VsZW1lbnQiLCJDbGFzc0hlcml0YWdlIiwiQ2xhc3NCb2R5IiwiaCIsImFycjAiLCJzZW1pcyIsImFycjEiLCJsYXN0U2VtaXMiLCJTaG9ydENpcmN1aXRFeHByZXNzaW9uIiwiY2lyYyIsImNvbnMiLCJhbHQiLCJNZW1iZXJFeHByZXNzaW9uIiwibWVtYmVyIiwiSWRlbnRpZmllclJlZmVyZW5jZSIsIkxleGljYWxEZWNsYXJhdGlvbiIsIkhvaXN0YWJsZURlY2xhcmF0aW9uIiwiQ2xhc3NEZWNsYXJhdGlvbiIsImhvaXN0IiwibGV4IiwiU3RhdGVtZW50IiwiU3ByZWFkRWxlbWVudCIsInRvcCIsIlJlbGF0aW9uYWxFeHByZXNzaW9uIiwiRXhwb25lbnRpYXRpb25FeHByZXNzaW9uIiwiVXBkYXRlRXhwcmVzc2lvbiIsImJpbmRpbmdQYXR0ZXJuIiwiRm9yQmluZGluZyIsIkxldE9yQ29uc3QiLCJwcmUiLCJGb3JEZWNsYXJhdGlvbiIsIlZhcmlhYmxlRGVjbGFyYXRpb25MaXN0IiwidCIsInUiLCJGb3JtYWxQYXJhbWV0ZXIiLCJGdW5jdGlvblJlc3RQYXJhbWV0ZXIiLCJGb3JtYWxQYXJhbWV0ZXJMaXN0IiwiRnVuY3Rpb25TdGF0ZW1lbnRMaXN0IiwiR2VuZXJhdG9yQm9keSIsIkZ1bmN0aW9uRGVjbGFyYXRpb24iLCJHZW5lcmF0b3JEZWNsYXJhdGlvbiIsIkFzeW5jRnVuY3Rpb25EZWNsYXJhdGlvbiIsIkFzeW5jR2VuZXJhdG9yRGVjbGFyYXRpb24iLCJmdW5jIiwiaWROYW1lIiwiYWx0ZXIiLCJEb1doaWxlU3RhdGVtZW50IiwiV2hpbGVTdGF0ZW1lbnQiLCJGb3JTdGF0ZW1lbnQiLCJGb3JJbk9mU3RhdGVtZW50IiwiTGFiZWxsZWRJdGVtIiwiTmV3RXhwcmVzc2lvbiIsImJpbmRpbmdJZCIsIkJpbmRpbmdMaXN0IiwiTG9naWNhbEFOREV4cHJlc3Npb24iLCJMb2dpY2FsT1JFeHByZXNzaW9uIiwiUHJpbWFyeUV4cHJlc3Npb24iLCJTdXBlclByb3BlcnR5IiwiTWV0YVByb3BlcnR5IiwidGVtcCIsIm1ldGFQcm9wIiwic3VwZXJQcm9wIiwiTmV3VGFyZ2V0IiwiR2VuZXJhdG9yTWV0aG9kIiwiQXN5bmNNZXRob2QiLCJBc3luY0dlbmVyYXRvck1ldGhvZCIsIlByb3BlcnR5U2V0UGFyYW1ldGVyTGlzdCIsIkJpbmRpbmdSZXN0UHJvcGVydHkiLCJCaW5kaW5nUHJvcGVydHlMaXN0IiwibGFzdFByb3AiLCJwcm9wTGlzdCIsInJlc3RQcm9wIiwiUHJvcGVydHlEZWZpbml0aW9uTGlzdCIsIkxpdGVyYWwiLCJBcnJheUxpdGVyYWwiLCJPYmplY3RMaXRlcmFsIiwiRnVuY3Rpb25FeHByZXNzaW9uIiwiQ2xhc3NFeHByZXNzaW9uIiwiR2VuZXJhdG9yRXhwcmVzc2lvbiIsIkFzeW5jRnVuY3Rpb25FeHByZXNzaW9uIiwiQXN5bmNHZW5lcmF0b3JFeHByZXNzaW9uIiwiQ292ZXJJbml0aWFsaXplZE5hbWUiLCJjb3YiLCJQcm9wZXJ0eURlZmluaXRpb24iLCJMaXRlcmFsUHJvcGVydHlOYW1lIiwiQ29tcHV0ZWRQcm9wZXJ0eU5hbWUiLCJTaGlmdEV4cHJlc3Npb24iLCJTY3JpcHRCb2R5IiwiQmxvY2tTdGF0ZW1lbnQiLCJWYXJpYWJsZVN0YXRlbWVudCIsIkVtcHR5U3RhdGVtZW50IiwiRXhwcmVzc2lvblN0YXRlbWVudCIsIklmU3RhdGVtZW50IiwiQnJlYWthYmxlU3RhdGVtZW50IiwiQ29udGludWVTdGF0ZW1lbnQiLCJCcmVha1N0YXRlbWVudCIsIlJldHVyblN0YXRlbWVudCIsIldpdGhTdGF0ZW1lbnQiLCJMYWJlbGxlZFN0YXRlbWVudCIsIlRocm93U3RhdGVtZW50IiwiVHJ5U3RhdGVtZW50IiwiRGVidWdnZXJTdGF0ZW1lbnQiLCJ2YXJTdG10IiwicmhzIiwiU3RhdGVtZW50TGlzdEl0ZW0iLCJEZWNsYXJhdGlvbiIsImVuZHNXaXRoIiwiVGFnZ2VkIiwiVGVtcGxhdGVTcGFucyIsImhlYWRMZXhpY2FsIiwic3BhbnMiLCJDYXNlQmxvY2siLCJTdWJzdGl0dXRpb25UZW1wbGF0ZSIsInN1YnMiLCJUZW1wbGF0ZU1pZGRsZUxpc3QiLCJtaWRkbGUiLCJtaWRkbGVMZXhpY2FsIiwidGFpbExleGljYWwiLCJDYXRjaCIsIkZpbmFsbHkiLCJmIiwiQXdhaXRFeHByZXNzaW9uIiwiYXJnIiwiYmluZGluZ1BhdCIsIlZhcmlhYmxlRGVjbGFyYXRpb24iLCJkZWNsTGlzdCIsIndlYnBhY2tDb250ZXh0IiwicmVxIiwid2VicGFja0NvbnRleHRSZXNvbHZlIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm8iLCJFcnJvciIsInJlc29sdmUiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsIl9fd2VicGFja19tb2R1bGVzX18iLCJfX3dlYnBhY2tfZXhwb3J0c19fIl0sIm1hcHBpbmdzIjoiNkNBSVEsU0FBV0EsR0FBVyxhQUk1QixJQUFJQyxFQUFnQixDQUNsQixFQUFHLHNOQUNILEVBQUcsK0NBQ0gsRUFBRyxPQUNIQyxPQUFRLHlFQUNSQyxXQUFZLGtCQUtWQyxFQUF1Qiw4S0FFdkJDLEVBQVcsQ0FDYixFQUFHRCxFQUNILFVBQVdBLEVBQXVCLGlCQUNsQyxFQUFHQSxFQUF1Qiw0Q0FHeEJFLEVBQTRCLGtCQVM1QkMsRUFBK0IsdzZCQUMvQkMsRUFBMEIsa2pCQUUxQkMsRUFBMEIsSUFBSUMsT0FBTyxJQUFNSCxFQUErQixLQUMxRUksRUFBcUIsSUFBSUQsT0FBTyxJQUFNSCxFQUErQkMsRUFBMEIsS0FFbkdELEVBQStCQyxFQUEwQixLQVN6RCxJQUFJSSxFQUE2QixDQUFDLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLEdBQUcsRUFBRSxHQUFHLEdBQUcsSUFBSSxHQUFHLEdBQUcsSUFBSSxHQUFHLEVBQUUsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEVBQUUsR0FBRyxHQUFHLEdBQUcsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLEVBQUUsR0FBRyxJQUFJLEdBQUcsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxJQUFJLElBQUksR0FBRyxHQUFHLEdBQUcsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxFQUFFLEVBQUUsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsRUFBRSxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLEVBQUUsR0FBRyxHQUFHLEdBQUcsRUFBRSxHQUFHLEdBQUcsRUFBRSxFQUFFLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxJQUFJLEdBQUcsRUFBRSxFQUFFLEdBQUcsR0FBRyxHQUFHLEVBQUUsRUFBRSxHQUFHLElBQUksR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsRUFBRSxFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQUUsRUFBRSxHQUFHLEdBQUcsR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsR0FBRyxHQUFHLEVBQUUsR0FBRyxHQUFHLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsR0FBRyxHQUFHLEVBQUUsRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxJQUFJLEdBQUcsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEdBQUcsR0FBRyxFQUFFLEVBQUUsRUFBRSxJQUFJLEdBQUcsR0FBRyxFQUFFLEdBQUcsR0FBRyxHQUFHLEVBQUUsR0FBRyxHQUFHLEdBQUcsRUFBRSxHQUFHLEdBQUcsSUFBSSxHQUFHLElBQUksR0FBRyxHQUFHLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxHQUFHLEdBQUcsRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLEVBQUUsR0FBRyxHQUFHLEVBQUUsRUFBRSxFQUFFLEdBQUcsRUFBRSxHQUFHLEdBQUcsRUFBRSxFQUFFLEdBQUcsRUFBRSxHQUFHLEdBQUcsR0FBRyxFQUFFLEdBQUcsR0FBRyxJQUFJLEVBQUUsRUFBRSxHQUFHLEdBQUcsRUFBRSxHQUFHLEdBQUcsSUFBSSxFQUFFLEVBQUUsRUFBRSxFQUFFLEdBQUcsR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsRUFBRSxHQUFHLEdBQUcsRUFBRSxJQUFJLEdBQUcsSUFBSSxFQUFFLEdBQUcsSUFBSSxJQUFJLElBQUksR0FBRyxJQUFJLEtBQUssS0FBSyxLQUFLLElBQUksS0FBSyxJQUFJLEVBQUUsR0FBRyxJQUFJLEdBQUcsR0FBRyxHQUFHLEdBQUcsRUFBRSxHQUFHLEdBQUcsRUFBRSxHQUFHLElBQUksR0FBRyxJQUFJLEdBQUcsRUFBRSxFQUFFLEdBQUcsR0FBRyxHQUFHLEVBQUUsRUFBRSxFQUFFLEdBQUcsS0FBSyxFQUFFLEtBQUssR0FBRyxFQUFFLEtBQUssSUFBSSxHQUFHLEVBQUUsR0FBRyxFQUFFLEVBQUUsSUFBSSxLQUFLLElBQUksRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLEVBQUUsS0FBSyxHQUFHLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEVBQUUsS0FBSyxHQUFHLEdBQUcsRUFBRSxHQUFHLEVBQUUsSUFBSSxHQUFHLEtBQUssSUFBSSxHQUFHLEdBQUcsRUFBRSxFQUFFLEtBQUssRUFBRSxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxHQUFHLEtBQUssTUFBTSxHQUFHLEtBQUssR0FBRyxJQUFJLEVBQUUsS0FBSyxHQUFHLEtBQUssS0FBSyxJQUFJLEtBQUssTUFHcHlDQyxFQUF3QixDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLElBQUksRUFBRSxJQUFJLEdBQUcsSUFBSSxFQUFFLEdBQUcsR0FBRyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsR0FBRyxHQUFHLEVBQUUsRUFBRSxFQUFFLEdBQUcsR0FBRyxFQUFFLEVBQUUsRUFBRSxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxHQUFHLEVBQUUsRUFBRSxFQUFFLEdBQUcsR0FBRyxHQUFHLEVBQUUsRUFBRSxJQUFJLEdBQUcsRUFBRSxFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLElBQUksR0FBRyxHQUFHLEVBQUUsRUFBRSxFQUFFLEdBQUcsR0FBRyxHQUFHLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQUUsR0FBRyxHQUFHLEdBQUcsRUFBRSxHQUFHLEdBQUcsRUFBRSxFQUFFLEdBQUcsR0FBRyxFQUFFLEVBQUUsSUFBSSxHQUFHLElBQUksRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsR0FBRyxHQUFHLEdBQUcsR0FBRyxJQUFJLEVBQUUsRUFBRSxFQUFFLEdBQUcsRUFBRSxHQUFHLEdBQUcsRUFBRSxHQUFHLElBQUksRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxFQUFFLEdBQUcsRUFBRSxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQUUsSUFBSSxF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cjBCLFFBQVVtbEMsRUFDakJBLEVBQWVudEIsR0FBSyxPQ3JCaEIwdEIsRUFBMkIsR0FHL0IsU0FBU0osRUFBb0JLLEdBRTVCLElBQUlDLEVBQWVGLEVBQXlCQyxHQUM1QyxRQUFxQmxoQixJQUFqQm1oQixFQUNILE9BQU9BLEVBQWE1bEMsUUFHckIsSUFBSXEwQixFQUFTcVIsRUFBeUJDLEdBQVksQ0FHakQzbEMsUUFBUyxJQU9WLE9BSEE2bEMsRUFBb0JGLEdBQVVwOUIsS0FBSzhyQixFQUFPcjBCLFFBQVNxMEIsRUFBUUEsRUFBT3IwQixRQUFTc2xDLEdBR3BFalIsRUFBT3IwQixRQ3JCZnNsQyxFQUFvQkMsRUFBSSxDQUFDbDlCLEVBQUtxVSxJQUFVMVUsT0FBT0MsVUFBVUMsZUFBZUssS0FBS0YsRUFBS3FVLEdDR2xGLElBQUlvcEIsRUFBc0JSLEVBQW9CLE0iLCJmaWxlIjoiZXNwYXJzZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyA/IGZhY3RvcnkoZXhwb3J0cykgOlxuICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWydleHBvcnRzJ10sIGZhY3RvcnkpIDpcbiAgKGdsb2JhbCA9IGdsb2JhbCB8fCBzZWxmLCBmYWN0b3J5KGdsb2JhbC5hY29ybiA9IHt9KSk7XG59KHRoaXMsIChmdW5jdGlvbiAoZXhwb3J0cykgeyAndXNlIHN0cmljdCc7XG5cbiAgLy8gUmVzZXJ2ZWQgd29yZCBsaXN0cyBmb3IgdmFyaW91cyBkaWFsZWN0cyBvZiB0aGUgbGFuZ3VhZ2VcblxuICB2YXIgcmVzZXJ2ZWRXb3JkcyA9IHtcbiAgICAzOiBcImFic3RyYWN0IGJvb2xlYW4gYnl0ZSBjaGFyIGNsYXNzIGRvdWJsZSBlbnVtIGV4cG9ydCBleHRlbmRzIGZpbmFsIGZsb2F0IGdvdG8gaW1wbGVtZW50cyBpbXBvcnQgaW50IGludGVyZmFjZSBsb25nIG5hdGl2ZSBwYWNrYWdlIHByaXZhdGUgcHJvdGVjdGVkIHB1YmxpYyBzaG9ydCBzdGF0aWMgc3VwZXIgc3luY2hyb25pemVkIHRocm93cyB0cmFuc2llbnQgdm9sYXRpbGVcIixcbiAgICA1OiBcImNsYXNzIGVudW0gZXh0ZW5kcyBzdXBlciBjb25zdCBleHBvcnQgaW1wb3J0XCIsXG4gICAgNjogXCJlbnVtXCIsXG4gICAgc3RyaWN0OiBcImltcGxlbWVudHMgaW50ZXJmYWNlIGxldCBwYWNrYWdlIHByaXZhdGUgcHJvdGVjdGVkIHB1YmxpYyBzdGF0aWMgeWllbGRcIixcbiAgICBzdHJpY3RCaW5kOiBcImV2YWwgYXJndW1lbnRzXCJcbiAgfTtcblxuICAvLyBBbmQgdGhlIGtleXdvcmRzXG5cbiAgdmFyIGVjbWE1QW5kTGVzc0tleXdvcmRzID0gXCJicmVhayBjYXNlIGNhdGNoIGNvbnRpbnVlIGRlYnVnZ2VyIGRlZmF1bHQgZG8gZWxzZSBmaW5hbGx5IGZvciBmdW5jdGlvbiBpZiByZXR1cm4gc3dpdGNoIHRocm93IHRyeSB2YXIgd2hpbGUgd2l0aCBudWxsIHRydWUgZmFsc2UgaW5zdGFuY2VvZiB0eXBlb2Ygdm9pZCBkZWxldGUgbmV3IGluIHRoaXNcIjtcblxuICB2YXIga2V5d29yZHMgPSB7XG4gICAgNTogZWNtYTVBbmRMZXNzS2V5d29yZHMsXG4gICAgXCI1bW9kdWxlXCI6IGVjbWE1QW5kTGVzc0tleXdvcmRzICsgXCIgZXhwb3J0IGltcG9ydFwiLFxuICAgIDY6IGVjbWE1QW5kTGVzc0tleXdvcmRzICsgXCIgY29uc3QgY2xhc3MgZXh0ZW5kcyBleHBvcnQgaW1wb3J0IHN1cGVyXCJcbiAgfTtcblxuICB2YXIga2V5d29yZFJlbGF0aW9uYWxPcGVyYXRvciA9IC9eaW4oc3RhbmNlb2YpPyQvO1xuXG4gIC8vICMjIENoYXJhY3RlciBjYXRlZ29yaWVzXG5cbiAgLy8gQmlnIHVnbHkgcmVndWxhciBleHByZXNzaW9ucyB0aGF0IG1hdGNoIGNoYXJhY3RlcnMgaW4gdGhlXG4gIC8vIHdoaXRlc3BhY2UsIGlkZW50aWZpZXIsIGFuZCBpZGVudGlmaWVyLXN0YXJ0IGNhdGVnb3JpZXMuIFRoZXNlXG4gIC8vIGFyZSBvbmx5IGFwcGxpZWQgd2hlbiBhIGNoYXJhY3RlciBpcyBmb3VuZCB0byBhY3R1YWxseSBoYXZlIGFcbiAgLy8gY29kZSBwb2ludCBhYm92ZSAxMjguXG4gIC8vIEdlbmVyYXRlZCBieSBgYmluL2dlbmVyYXRlLWlkZW50aWZpZXItcmVnZXguanNgLlxuICB2YXIgbm9uQVNDSUlpZGVudGlmaWVyU3RhcnRDaGFycyA9IFwiXFx4YWFcXHhiNVxceGJhXFx4YzAtXFx4ZDZcXHhkOC1cXHhmNlxceGY4LVxcdTAyYzFcXHUwMmM2LVxcdTAyZDFcXHUwMmUwLVxcdTAyZTRcXHUwMmVjXFx1MDJlZVxcdTAzNzAtXFx1MDM3NFxcdTAzNzZcXHUwMzc3XFx1MDM3YS1cXHUwMzdkXFx1MDM3ZlxcdTAzODZcXHUwMzg4LVxcdTAzOGFcXHUwMzhjXFx1MDM4ZS1cXHUwM2ExXFx1MDNhMy1cXHUwM2Y1XFx1MDNmNy1cXHUwNDgxXFx1MDQ4YS1cXHUwNTJmXFx1MDUzMS1cXHUwNTU2XFx1MDU1OVxcdTA1NjAtXFx1MDU4OFxcdTA1ZDAtXFx1MDVlYVxcdTA1ZWYtXFx1MDVmMlxcdTA2MjAtXFx1MDY0YVxcdTA2NmVcXHUwNjZmXFx1MDY3MS1cXHUwNmQzXFx1MDZkNVxcdTA2ZTVcXHUwNmU2XFx1MDZlZVxcdTA2ZWZcXHUwNmZhLVxcdTA2ZmNcXHUwNmZmXFx1MDcxMFxcdTA3MTItXFx1MDcyZlxcdTA3NGQtXFx1MDdhNVxcdTA3YjFcXHUwN2NhLVxcdTA3ZWFcXHUwN2Y0XFx1MDdmNVxcdTA3ZmFcXHUwODAwLVxcdTA4MTVcXHUwODFhXFx1MDgyNFxcdTA4MjhcXHUwODQwLVxcdTA4NThcXHUwODYwLVxcdTA4NmFcXHUwOGEwLVxcdTA4YjRcXHUwOGI2LVxcdTA4YzdcXHUwOTA0LVxcdTA5MzlcXHUwOTNkXFx1MDk1MFxcdTA5NTgtXFx1MDk2MVxcdTA5NzEtXFx1MDk4MFxcdTA5ODUtXFx1MDk4Y1xcdTA5OGZcXHUwOTkwXFx1MDk5My1cXHUwOWE4XFx1MDlhYS1cXHUwOWIwXFx1MDliMlxcdTA5YjYtXFx1MDliOVxcdTA5YmRcXHUwOWNlXFx1MDlkY1xcdTA5ZGRcXHUwOWRmLVxcdTA5ZTFcXHUwOWYwXFx1MDlmMVxcdTA5ZmNcXHUwYTA1LVxcdTBhMGFcXHUwYTBmXFx1MGExMFxcdTBhMTMtXFx1MGEyOFxcdTBhMmEtXFx1MGEzMFxcdTBhMzJcXHUwYTMzXFx1MGEzNVxcdTBhMzZcXHUwYTM4XFx1MGEzOVxcdTBhNTktXFx1MGE1Y1xcdTBhNWVcXHUwYTcyLVxcdTBhNzRcXHUwYTg1LVxcdTBhOGRcXHUwYThmLVxcdTBhOTFcXHUwYTkzLVxcdTBhYThcXHUwYWFhLVxcdTBhYjBcXHUwYWIyXFx1MGFiM1xcdTBhYjUtXFx1MGFiOVxcdTBhYmRcXHUwYWQwXFx1MGFlMFxcdTBhZTFcXHUwYWY5XFx1MGIwNS1cXHUwYjBjXFx1MGIwZlxcdTBiMTBcXHUwYjEzLVxcdTBiMjhcXHUwYjJhLVxcdTBiMzBcXHUwYjMyXFx1MGIzM1xcdTBiMzUtXFx1MGIzOVxcdTBiM2RcXHUwYjVjXFx1MGI1ZFxcdTBiNWYtXFx1MGI2MVxcdTBiNzFcXHUwYjgzXFx1MGI4NS1cXHUwYjhhXFx1MGI4ZS1cXHUwYjkwXFx1MGI5Mi1cXHUwYjk1XFx1MGI5OVxcdTBiOWFcXHUwYjljXFx1MGI5ZVxcdTBiOWZcXHUwYmEzXFx1MGJhNFxcdTBiYTgtXFx1MGJhYVxcdTBiYWUtXFx1MGJiOVxcdTBiZDBcXHUwYzA1LVxcdTBjMGNcXHUwYzBlLVxcdTBjMTBcXHUwYzEyLVxcdTBjMjhcXHUwYzJhLVxcdTBjMzlcXHUwYzNkXFx1MGM1OC1cXHUwYzVhXFx1MGM2MFxcdTBjNjFcXHUwYzgwXFx1MGM4NS1cXHUwYzhjXFx1MGM4ZS1cXHUwYzkwXFx1MGM5Mi1cXHUwY2E4XFx1MGNhYS1cXHUwY2IzXFx1MGNiNS1cXHUwY2I5XFx1MGNiZFxcdTBjZGVcXHUwY2UwXFx1MGNlMVxcdTBjZjFcXHUwY2YyXFx1MGQwNC1cXHUwZDBjXFx1MGQwZS1cXHUwZDEwXFx1MGQxMi1cXHUwZDNhXFx1MGQzZFxcdTBkNGVcXHUwZDU0LVxcdTBkNTZcXHUwZDVmLVxcdTBkNjFcXHUwZDdhLVxcdTBkN2ZcXHUwZDg1LVxcdTBkOTZcXHUwZDlhLVxcdTBkYjFcXHUwZGIzLVxcdTBkYmJcXHUwZGJkXFx1MGRjMC1cXHUwZGM2XFx1MGUwMS1cXHUwZTMwXFx1MGUzMlxcdTBlMzNcXHUwZTQwLVxcdTBlNDZcXHUwZTgxXFx1MGU4MlxcdTBlODRcXHUwZTg2LVxcdTBlOGFcXHUwZThjLVxcdTBlYTNcXHUwZWE1XFx1MGVhNy1cXHUwZWIwXFx1MGViMlxcdTBlYjNcXHUwZWJkXFx1MGVjMC1cXHUwZWM0XFx1MGVjNlxcdTBlZGMtXFx1MGVkZlxcdTBmMDBcXHUwZjQwLVxcdTBmNDdcXHUwZjQ5LVxcdTBmNmNcXHUwZjg4LVxcdTBmOGNcXHUxMDAwLVxcdTEwMmFcXHUxMDNmXFx1MTA1MC1cXHUxMDU1XFx1MTA1YS1cXHUxMDVkXFx1MTA2MVxcdTEwNjVcXHUxMDY2XFx1MTA2ZS1cXHUxMDcwXFx1MTA3NS1cXHUxMDgxXFx1MTA4ZVxcdTEwYTAtXFx1MTBjNVxcdTEwYzdcXHUxMGNkXFx1MTBkMC1cXHUxMGZhXFx1MTBmYy1cXHUxMjQ4XFx1MTI0YS1cXHUxMjRkXFx1MTI1MC1cXHUxMjU2XFx1MTI1OFxcdTEyNWEtXFx1MTI1ZFxcdTEyNjAtXFx1MTI4OFxcdTEyOGEtXFx1MTI4ZFxcdTEyOTAtXFx1MTJiMFxcdTEyYjItXFx1MTJiNVxcdTEyYjgtXFx1MTJiZVxcdTEyYzBcXHUxMmMyLVxcdTEyYzVcXHUxMmM4LVxcdTEyZDZcXHUxMmQ4LVxcdTEzMTBcXHUxMzEyLVxcdTEzMTVcXHUxMzE4LVxcdTEzNWFcXHUxMzgwLVxcdTEzOGZcXHUxM2EwLVxcdTEzZjVcXHUxM2Y4LVxcdTEzZmRcXHUxNDAxLVxcdTE2NmNcXHUxNjZmLVxcdTE2N2ZcXHUxNjgxLVxcdTE2OWFcXHUxNmEwLVxcdTE2ZWFcXHUxNmVlLVxcdTE2ZjhcXHUxNzAwLVxcdTE3MGNcXHUxNzBlLVxcdTE3MTFcXHUxNzIwLVxcdTE3MzFcXHUxNzQwLVxcdTE3NTFcXHUxNzYwLVxcdTE3NmNcXHUxNzZlLVxcdTE3NzBcXHUxNzgwLVxcdTE3YjNcXHUxN2Q3XFx1MTdkY1xcdTE4MjAtXFx1MTg3OFxcdTE4ODAtXFx1MThhOFxcdTE4YWFcXHUxOGIwLVxcdTE4ZjVcXHUxOTAwLVxcdTE5MWVcXHUxOTUwLVxcdTE5NmRcXHUxOTcwLVxcdTE5NzRcXHUxOTgwLVxcdTE5YWJcXHUxOWIwLVxcdTE5YzlcXHUxYTAwLVxcdTFhMTZcXHUxYTIwLVxcdTFhNTRcXHUxYWE3XFx1MWIwNS1cXHUxYjMzXFx1MWI0NS1cXHUxYjRiXFx1MWI4My1cXHUxYmEwXFx1MWJhZVxcdTFiYWZcXHUxYmJhLVxcdTFiZTVcXHUxYzAwLVxcdTFjMjNcXHUxYzRkLVxcdTFjNGZcXHUxYzVhLVxcdTFjN2RcXHUxYzgwLVxcdTFjODhcXHUxYzkwLVxcdTFjYmFcXHUxY2JkLVxcdTFjYmZcXHUxY2U5LVxcdTFjZWNcXHUxY2VlLVxcdTFjZjNcXHUxY2Y1XFx1MWNmNlxcdTFjZmFcXHUxZDAwLVxcdTFkYmZcXHUxZTAwLVxcdTFmMTVcXHUxZjE4LVxcdTFmMWRcXHUxZjIwLVxcdTFmNDVcXHUxZjQ4LVxcdTFmNGRcXHUxZjUwLVxcdTFmNTdcXHUxZjU5XFx1MWY1YlxcdTFmNWRcXHUxZjVmLVxcdTFmN2RcXHUxZjgwLVxcdTFmYjRcXHUxZmI2LVxcdTFmYmNcXHUxZmJlXFx1MWZjMi1cXHUxZmM0XFx1MWZjNi1cXHUxZmNjXFx1MWZkMC1cXHUxZmQzXFx1MWZkNi1cXHUxZmRiXFx1MWZlMC1cXHUxZmVjXFx1MWZmMi1cXHUxZmY0XFx1MWZmNi1cXHUxZmZjXFx1MjA3MVxcdTIwN2ZcXHUyMDkwLVxcdTIwOWNcXHUyMTAyXFx1MjEwN1xcdTIxMGEtXFx1MjExM1xcdTIxMTVcXHUyMTE4LVxcdTIxMWRcXHUyMTI0XFx1MjEyNlxcdTIxMjhcXHUyMTJhLVxcdTIxMzlcXHUyMTNjLVxcdTIxM2ZcXHUyMTQ1LVxcdTIxNDlcXHUyMTRlXFx1MjE2MC1cXHUyMTg4XFx1MmMwMC1cXHUyYzJlXFx1MmMzMC1cXHUyYzVlXFx1MmM2MC1cXHUyY2U0XFx1MmNlYi1cXHUyY2VlXFx1MmNmMlxcdTJjZjNcXHUyZDAwLVxcdTJkMjVcXHUyZDI3XFx1MmQyZFxcdTJkMzAtXFx1MmQ2N1xcdTJkNmZcXHUyZDgwLVxcdTJkOTZcXHUyZGEwLVxcdTJkYTZcXHUyZGE4LVxcdTJkYWVcXHUyZGIwLVxcdTJkYjZcXHUyZGI4LVxcdTJkYmVcXHUyZGMwLVxcdTJkYzZcXHUyZGM4LVxcdTJkY2VcXHUyZGQwLVxcdTJkZDZcXHUyZGQ4LVxcdTJkZGVcXHUzMDA1LVxcdTMwMDdcXHUzMDIxLVxcdTMwMjlcXHUzMDMxLVxcdTMwMzVcXHUzMDM4LVxcdTMwM2NcXHUzMDQxLVxcdTMwOTZcXHUzMDliLVxcdTMwOWZcXHUzMGExLVxcdTMwZmFcXHUzMGZjLVxcdTMwZmZcXHUzMTA1LVxcdTMxMmZcXHUzMTMxLVxcdTMxOGVcXHUzMWEwLVxcdTMxYmZcXHUzMWYwLVxcdTMxZmZcXHUzNDAwLVxcdTRkYmZcXHU0ZTAwLVxcdTlmZmNcXHVhMDAwLVxcdWE0OGNcXHVhNGQwLVxcdWE0ZmRcXHVhNTAwLVxcdWE2MGNcXHVhNjEwLVxcdWE2MWZcXHVhNjJhXFx1YTYyYlxcdWE2NDAtXFx1YTY2ZVxcdWE2N2YtXFx1YTY5ZFxcdWE2YTAtXFx1YTZlZlxcdWE3MTctXFx1YTcxZlxcdWE3MjItXFx1YTc4OFxcdWE3OGItXFx1YTdiZlxcdWE3YzItXFx1YTdjYVxcdWE3ZjUtXFx1YTgwMVxcdWE4MDMtXFx1YTgwNVxcdWE4MDctXFx1YTgwYVxcdWE4MGMtXFx1YTgyMlxcdWE4NDAtXFx1YTg3M1xcdWE4ODItXFx1YThiM1xcdWE4ZjItXFx1YThmN1xcdWE4ZmJcXHVhOGZkXFx1YThmZVxcdWE5MGEtXFx1YTkyNVxcdWE5MzAtXFx1YTk0NlxcdWE5NjAtXFx1YTk3Y1xcdWE5ODQtXFx1YTliMlxcdWE5Y2ZcXHVhOWUwLVxcdWE5ZTRcXHVhOWU2LVxcdWE5ZWZcXHVhOWZhLVxcdWE5ZmVcXHVhYTAwLVxcdWFhMjhcXHVhYTQwLVxcdWFhNDJcXHVhYTQ0LVxcdWFhNGJcXHVhYTYwLVxcdWFhNzZcXHVhYTdhXFx1YWE3ZS1cXHVhYWFmXFx1YWFiMVxcdWFhYjVcXHVhYWI2XFx1YWFiOS1cXHVhYWJkXFx1YWFjMFxcdWFhYzJcXHVhYWRiLVxcdWFhZGRcXHVhYWUwLVxcdWFhZWFcXHVhYWYyLVxcdWFhZjRcXHVhYjAxLVxcdWFiMDZcXHVhYjA5LVxcdWFiMGVcXHVhYjExLVxcdWFiMTZcXHVhYjIwLVxcdWFiMjZcXHVhYjI4LVxcdWFiMmVcXHVhYjMwLVxcdWFiNWFcXHVhYjVjLVxcdWFiNjlcXHVhYjcwLVxcdWFiZTJcXHVhYzAwLVxcdWQ3YTNcXHVkN2IwLVxcdWQ3YzZcXHVkN2NiLVxcdWQ3ZmJcXHVmOTAwLVxcdWZhNmRcXHVmYTcwLVxcdWZhZDlcXHVmYjAwLVxcdWZiMDZcXHVmYjEzLVxcdWZiMTdcXHVmYjFkXFx1ZmIxZi1cXHVmYjI4XFx1ZmIyYS1cXHVmYjM2XFx1ZmIzOC1cXHVmYjNjXFx1ZmIzZVxcdWZiNDBcXHVmYjQxXFx1ZmI0M1xcdWZiNDRcXHVmYjQ2LVxcdWZiYjFcXHVmYmQzLVxcdWZkM2RcXHVmZDUwLVxcdWZkOGZcXHVmZDkyLVxcdWZkYzdcXHVmZGYwLVxcdWZkZmJcXHVmZTcwLVxcdWZlNzRcXHVmZTc2LVxcdWZlZmNcXHVmZjIxLVxcdWZmM2FcXHVmZjQxLVxcdWZmNWFcXHVmZjY2LVxcdWZmYmVcXHVmZmMyLVxcdWZmYzdcXHVmZmNhLVxcdWZmY2ZcXHVmZmQyLVxcdWZmZDdcXHVmZmRhLVxcdWZmZGNcIjtcbiAgdmFyIG5vbkFTQ0lJaWRlbnRpZmllckNoYXJzID0gXCJcXHUyMDBjXFx1MjAwZFxceGI3XFx1MDMwMC1cXHUwMzZmXFx1MDM4N1xcdTA0ODMtXFx1MDQ4N1xcdTA1OTEtXFx1MDViZFxcdTA1YmZcXHUwNWMxXFx1MDVjMlxcdTA1YzRcXHUwNWM1XFx1MDVjN1xcdTA2MTAtXFx1MDYxYVxcdTA2NGItXFx1MDY2OVxcdTA2NzBcXHUwNmQ2LVxcdTA2ZGNcXHUwNmRmLVxcdTA2ZTRcXHUwNmU3XFx1MDZlOFxcdTA2ZWEtXFx1MDZlZFxcdTA2ZjAtXFx1MDZmOVxcdTA3MTFcXHUwNzMwLVxcdTA3NGFcXHUwN2E2LVxcdTA3YjBcXHUwN2MwLVxcdTA3YzlcXHUwN2ViLVxcdTA3ZjNcXHUwN2ZkXFx1MDgxNi1cXHUwODE5XFx1MDgxYi1cXHUwODIzXFx1MDgyNS1cXHUwODI3XFx1MDgyOS1cXHUwODJkXFx1MDg1OS1cXHUwODViXFx1MDhkMy1cXHUwOGUxXFx1MDhlMy1cXHUwOTAzXFx1MDkzYS1cXHUwOTNjXFx1MDkzZS1cXHUwOTRmXFx1MDk1MS1cXHUwOTU3XFx1MDk2MlxcdTA5NjNcXHUwOTY2LVxcdTA5NmZcXHUwOTgxLVxcdTA5ODNcXHUwOWJjXFx1MDliZS1cXHUwOWM0XFx1MDljN1xcdTA5YzhcXHUwOWNiLVxcdTA5Y2RcXHUwOWQ3XFx1MDllMlxcdTA5ZTNcXHUwOWU2LVxcdTA5ZWZcXHUwOWZlXFx1MGEwMS1cXHUwYTAzXFx1MGEzY1xcdTBhM2UtXFx1MGE0MlxcdTBhNDdcXHUwYTQ4XFx1MGE0Yi1cXHUwYTRkXFx1MGE1MVxcdTBhNjYtXFx1MGE3MVxcdTBhNzVcXHUwYTgxLVxcdTBhODNcXHUwYWJjXFx1MGFiZS1cXHUwYWM1XFx1MGFjNy1cXHUwYWM5XFx1MGFjYi1cXHUwYWNkXFx1MGFlMlxcdTBhZTNcXHUwYWU2LVxcdTBhZWZcXHUwYWZhLVxcdTBhZmZcXHUwYjAxLVxcdTBiMDNcXHUwYjNjXFx1MGIzZS1cXHUwYjQ0XFx1MGI0N1xcdTBiNDhcXHUwYjRiLVxcdTBiNGRcXHUwYjU1LVxcdTBiNTdcXHUwYjYyXFx1MGI2M1xcdTBiNjYtXFx1MGI2ZlxcdTBiODJcXHUwYmJlLVxcdTBiYzJcXHUwYmM2LVxcdTBiYzhcXHUwYmNhLVxcdTBiY2RcXHUwYmQ3XFx1MGJlNi1cXHUwYmVmXFx1MGMwMC1cXHUwYzA0XFx1MGMzZS1cXHUwYzQ0XFx1MGM0Ni1cXHUwYzQ4XFx1MGM0YS1cXHUwYzRkXFx1MGM1NVxcdTBjNTZcXHUwYzYyXFx1MGM2M1xcdTBjNjYtXFx1MGM2ZlxcdTBjODEtXFx1MGM4M1xcdTBjYmNcXHUwY2JlLVxcdTBjYzRcXHUwY2M2LVxcdTBjYzhcXHUwY2NhLVxcdTBjY2RcXHUwY2Q1XFx1MGNkNlxcdTBjZTJcXHUwY2UzXFx1MGNlNi1cXHUwY2VmXFx1MGQwMC1cXHUwZDAzXFx1MGQzYlxcdTBkM2NcXHUwZDNlLVxcdTBkNDRcXHUwZDQ2LVxcdTBkNDhcXHUwZDRhLVxcdTBkNGRcXHUwZDU3XFx1MGQ2MlxcdTBkNjNcXHUwZDY2LVxcdTBkNmZcXHUwZDgxLVxcdTBkODNcXHUwZGNhXFx1MGRjZi1cXHUwZGQ0XFx1MGRkNlxcdTBkZDgtXFx1MGRkZlxcdTBkZTYtXFx1MGRlZlxcdTBkZjJcXHUwZGYzXFx1MGUzMVxcdTBlMzQtXFx1MGUzYVxcdTBlNDctXFx1MGU0ZVxcdTBlNTAtXFx1MGU1OVxcdTBlYjFcXHUwZWI0LVxcdTBlYmNcXHUwZWM4LVxcdTBlY2RcXHUwZWQwLVxcdTBlZDlcXHUwZjE4XFx1MGYxOVxcdTBmMjAtXFx1MGYyOVxcdTBmMzVcXHUwZjM3XFx1MGYzOVxcdTBmM2VcXHUwZjNmXFx1MGY3MS1cXHUwZjg0XFx1MGY4NlxcdTBmODdcXHUwZjhkLVxcdTBmOTdcXHUwZjk5LVxcdTBmYmNcXHUwZmM2XFx1MTAyYi1cXHUxMDNlXFx1MTA0MC1cXHUxMDQ5XFx1MTA1Ni1cXHUxMDU5XFx1MTA1ZS1cXHUxMDYwXFx1MTA2Mi1cXHUxMDY0XFx1MTA2Ny1cXHUxMDZkXFx1MTA3MS1cXHUxMDc0XFx1MTA4Mi1cXHUxMDhkXFx1MTA4Zi1cXHUxMDlkXFx1MTM1ZC1cXHUxMzVmXFx1MTM2OS1cXHUxMzcxXFx1MTcxMi1cXHUxNzE0XFx1MTczMi1cXHUxNzM0XFx1MTc1MlxcdTE3NTNcXHUxNzcyXFx1MTc3M1xcdTE3YjQtXFx1MTdkM1xcdTE3ZGRcXHUxN2UwLVxcdTE3ZTlcXHUxODBiLVxcdTE4MGRcXHUxODEwLVxcdTE4MTlcXHUxOGE5XFx1MTkyMC1cXHUxOTJiXFx1MTkzMC1cXHUxOTNiXFx1MTk0Ni1cXHUxOTRmXFx1MTlkMC1cXHUxOWRhXFx1MWExNy1cXHUxYTFiXFx1MWE1NS1cXHUxYTVlXFx1MWE2MC1cXHUxYTdjXFx1MWE3Zi1cXHUxYTg5XFx1MWE5MC1cXHUxYTk5XFx1MWFiMC1cXHUxYWJkXFx1MWFiZlxcdTFhYzBcXHUxYjAwLVxcdTFiMDRcXHUxYjM0LVxcdTFiNDRcXHUxYjUwLVxcdTFiNTlcXHUxYjZiLVxcdTFiNzNcXHUxYjgwLVxcdTFiODJcXHUxYmExLVxcdTFiYWRcXHUxYmIwLVxcdTFiYjlcXHUxYmU2LVxcdTFiZjNcXHUxYzI0LVxcdTFjMzdcXHUxYzQwLVxcdTFjNDlcXHUxYzUwLVxcdTFjNTlcXHUxY2QwLVxcdTFjZDJcXHUxY2Q0LVxcdTFjZThcXHUxY2VkXFx1MWNmNFxcdTFjZjctXFx1MWNmOVxcdTFkYzAtXFx1MWRmOVxcdTFkZmItXFx1MWRmZlxcdTIwM2ZcXHUyMDQwXFx1MjA1NFxcdTIwZDAtXFx1MjBkY1xcdTIwZTFcXHUyMGU1LVxcdTIwZjBcXHUyY2VmLVxcdTJjZjFcXHUyZDdmXFx1MmRlMC1cXHUyZGZmXFx1MzAyYS1cXHUzMDJmXFx1MzA5OVxcdTMwOWFcXHVhNjIwLVxcdWE2MjlcXHVhNjZmXFx1YTY3NC1cXHVhNjdkXFx1YTY5ZVxcdWE2OWZcXHVhNmYwXFx1YTZmMVxcdWE4MDJcXHVhODA2XFx1YTgwYlxcdWE4MjMtXFx1YTgyN1xcdWE4MmNcXHVhODgwXFx1YTg4MVxcdWE4YjQtXFx1YThjNVxcdWE4ZDAtXFx1YThkOVxcdWE4ZTAtXFx1YThmMVxcdWE4ZmYtXFx1YTkwOVxcdWE5MjYtXFx1YTkyZFxcdWE5NDctXFx1YTk1M1xcdWE5ODAtXFx1YTk4M1xcdWE5YjMtXFx1YTljMFxcdWE5ZDAtXFx1YTlkOVxcdWE5ZTVcXHVhOWYwLVxcdWE5ZjlcXHVhYTI5LVxcdWFhMzZcXHVhYTQzXFx1YWE0Y1xcdWFhNGRcXHVhYTUwLVxcdWFhNTlcXHVhYTdiLVxcdWFhN2RcXHVhYWIwXFx1YWFiMi1cXHVhYWI0XFx1YWFiN1xcdWFhYjhcXHVhYWJlXFx1YWFiZlxcdWFhYzFcXHVhYWViLVxcdWFhZWZcXHVhYWY1XFx1YWFmNlxcdWFiZTMtXFx1YWJlYVxcdWFiZWNcXHVhYmVkXFx1YWJmMC1cXHVhYmY5XFx1ZmIxZVxcdWZlMDAtXFx1ZmUwZlxcdWZlMjAtXFx1ZmUyZlxcdWZlMzNcXHVmZTM0XFx1ZmU0ZC1cXHVmZTRmXFx1ZmYxMC1cXHVmZjE5XFx1ZmYzZlwiO1xuXG4gIHZhciBub25BU0NJSWlkZW50aWZpZXJTdGFydCA9IG5ldyBSZWdFeHAoXCJbXCIgKyBub25BU0NJSWlkZW50aWZpZXJTdGFydENoYXJzICsgXCJdXCIpO1xuICB2YXIgbm9uQVNDSUlpZGVudGlmaWVyID0gbmV3IFJlZ0V4cChcIltcIiArIG5vbkFTQ0lJaWRlbnRpZmllclN0YXJ0Q2hhcnMgKyBub25BU0NJSWlkZW50aWZpZXJDaGFycyArIFwiXVwiKTtcblxuICBub25BU0NJSWlkZW50aWZpZXJTdGFydENoYXJzID0gbm9uQVNDSUlpZGVudGlmaWVyQ2hhcnMgPSBudWxsO1xuXG4gIC8vIFRoZXNlIGFyZSBhIHJ1bi1sZW5ndGggYW5kIG9mZnNldCBlbmNvZGVkIHJlcHJlc2VudGF0aW9uIG9mIHRoZVxuICAvLyA+MHhmZmZmIGNvZGUgcG9pbnRzIHRoYXQgYXJlIGEgdmFsaWQgcGFydCBvZiBpZGVudGlmaWVycy4gVGhlXG4gIC8vIG9mZnNldCBzdGFydHMgYXQgMHgxMDAwMCwgYW5kIGVhY2ggcGFpciBvZiBudW1iZXJzIHJlcHJlc2VudHMgYW5cbiAgLy8gb2Zmc2V0IHRvIHRoZSBuZXh0IHJhbmdlLCBhbmQgdGhlbiBhIHNpemUgb2YgdGhlIHJhbmdlLiBUaGV5IHdlcmVcbiAgLy8gZ2VuZXJhdGVkIGJ5IGJpbi9nZW5lcmF0ZS1pZGVudGlmaWVyLXJlZ2V4LmpzXG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbW1hLXNwYWNpbmdcbiAgdmFyIGFzdHJhbElkZW50aWZpZXJTdGFydENvZGVzID0gWzAsMTEsMiwyNSwyLDE4LDIsMSwyLDE0LDMsMTMsMzUsMTIyLDcwLDUyLDI2OCwyOCw0LDQ4LDQ4LDMxLDE0LDI5LDYsMzcsMTEsMjksMywzNSw1LDcsMiw0LDQzLDE1NywxOSwzNSw1LDM1LDUsMzksOSw1MSwxNTcsMzEwLDEwLDIxLDExLDcsMTUzLDUsMywwLDIsNDMsMiwxLDQsMCwzLDIyLDExLDIyLDEwLDMwLDY2LDE4LDIsMSwxMSwyMSwxMSwyNSw3MSw1NSw3LDEsNjUsMCwxNiwzLDIsMiwyLDI4LDQzLDI4LDQsMjgsMzYsNywyLDI3LDI4LDUzLDExLDIxLDExLDE4LDE0LDE3LDExMSw3Miw1Niw1MCwxNCw1MCwxNCwzNSwzNDksNDEsNywxLDc5LDI4LDExLDAsOSwyMSwxMDcsMjAsMjgsMjIsMTMsNTIsNzYsNDQsMzMsMjQsMjcsMzUsMzAsMCwzLDAsOSwzNCw0LDAsMTMsNDcsMTUsMywyMiwwLDIsMCwzNiwxNywyLDI0LDg1LDYsMiwwLDIsMywyLDE0LDIsOSw4LDQ2LDM5LDcsMywxLDMsMjEsMiw2LDIsMSwyLDQsNCwwLDE5LDAsMTMsNCwxNTksNTIsMTksMywyMSwyLDMxLDQ3LDIxLDEsMiwwLDE4NSw0Niw0MiwzLDM3LDQ3LDIxLDAsNjAsNDIsMTQsMCw3MiwyNiwyMzAsNDMsMTE3LDYzLDMyLDcsMywwLDMsNywyLDEsMiwyMywxNiwwLDIsMCw5NSw3LDMsMzgsMTcsMCwyLDAsMjksMCwxMSwzOSw4LDAsMjIsMCwxMiw0NSwyMCwwLDM1LDU2LDI2NCw4LDIsMzYsMTgsMCw1MCwyOSwxMTMsNiwyLDEsMiwzNywyMiwwLDI2LDUsMiwxLDIsMzEsMTUsMCwzMjgsMTgsMTkwLDAsODAsOTIxLDEwMywxMTAsMTgsMTk1LDI3NDksMTA3MCw0MDUwLDU4Miw4NjM0LDU2OCw4LDMwLDExNCwyOSwxOSw0NywxNywzLDMyLDIwLDYsMTgsNjg5LDYzLDEyOSw3NCw2LDAsNjcsMTIsNjUsMSwyLDAsMjksNjEzNSw5LDEyMzcsNDMsOCw4OTUyLDI4Niw1MCwyLDE4LDMsOSwzOTUsMjMwOSwxMDYsNiwxMiw0LDgsOCw5LDU5OTEsODQsMiw3MCwyLDEsMywwLDMsMSwzLDMsMiwxMSwyLDAsMiw2LDIsNjQsMiwzLDMsNywyLDYsMiwyNywyLDMsMiw0LDIsMCw0LDYsMiwzMzksMywyNCwyLDI0LDIsMzAsMiwyNCwyLDMwLDIsMjQsMiwzMCwyLDI0LDIsMzAsMiwyNCwyLDcsMjM1Nyw0NCwxMSw2LDE3LDAsMzcwLDQzLDEzMDEsMTk2LDYwLDY3LDgsMCwxMjA1LDMsMiwyNiwyLDEsMiwwLDMsMCwyLDksMiwzLDIsMCwyLDAsNywwLDUsMCwyLDAsMiwwLDIsMiwyLDEsMiwwLDMsMCwyLDAsMiwwLDIsMCwyLDAsMiwxLDIsMCwzLDMsMiw2LDIsMywyLDMsMiwwLDIsOSwyLDE2LDYsMiwyLDQsMiwxNiw0NDIxLDQyNzE3LDM1LDQxNDgsMTIsMjIxLDMsNTc2MSwxNSw3NDcyLDMxMDQsNTQxLDE1MDcsNDkzOF07XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbW1hLXNwYWNpbmdcbiAgdmFyIGFzdHJhbElkZW50aWZpZXJDb2RlcyA9IFs1MDksMCwyMjcsMCwxNTAsNCwyOTQsOSwxMzY4LDIsMiwxLDYsMyw0MSwyLDUsMCwxNjYsMSw1NzQsMyw5LDksMzcwLDEsMTU0LDEwLDE3NiwyLDU0LDE0LDMyLDksMTYsMyw0NiwxMCw1NCw5LDcsMiwzNywxMywyLDksNiwxLDQ1LDAsMTMsMiw0OSwxMyw5LDMsMiwxMSw4MywxMSw3LDAsMTYxLDExLDYsOSw3LDMsNTYsMSwyLDYsMywxLDMsMiwxMCwwLDExLDEsMyw2LDQsNCwxOTMsMTcsMTAsOSw1LDAsODIsMTksMTMsOSwyMTQsNiwzLDgsMjgsMSw4MywxNiwxNiw5LDgyLDEyLDksOSw4NCwxNCw1LDksMjQzLDE0LDE2Niw5LDcxLDUsMiwxLDMsMywyLDAsMiwxLDEzLDksMTIwLDYsMyw2LDQsMCwyOSw5LDQxLDYsMiwzLDksMCwxMCwxMCw0NywxNSw0MDYsNywyLDcsMTcsOSw1NywyMSwyLDEzLDEyMyw1LDQsMCwyLDEsMiw2LDIsMCw5LDksNDksNCwyLDEsMiw0LDksOSwzMzAsMywxOTMwNiw5LDEzNSw0LDYwLDYsMjYsOSwxMDE0LDAsMiw1NCw4LDMsODIsMCwxMiwxLDE5NjI4LDEsNTMxOSw0LDQsNSw5LDcsMyw2LDMxLDMsMTQ5LDIsMTQxOCw0OSw1MTMsNTQsNSw0OSw5LDAsMTUsMCwyMyw0LDIsMTQsMTM2MSw2LDIsMTYsMyw2LDIsMSwyLDQsMjYyLDYsMTAsOSw0MTksMTMsMTQ5NSw2LDExMCw2LDYsOSw0NzU5LDksNzg3NzE5LDIzOV07XG5cbiAgLy8gVGhpcyBoYXMgYSBjb21wbGV4aXR5IGxpbmVhciB0byB0aGUgdmFsdWUgb2YgdGhlIGNvZGUuIFRoZVxuICAvLyBhc3N1bXB0aW9uIGlzIHRoYXQgbG9va2luZyB1cCBhc3RyYWwgaWRlbnRpZmllciBjaGFyYWN0ZXJzIGlzXG4gIC8vIHJhcmUuXG4gIGZ1bmN0aW9uIGlzSW5Bc3RyYWxTZXQoY29kZSwgc2V0KSB7XG4gICAgdmFyIHBvcyA9IDB4MTAwMDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZXQubGVuZ3RoOyBpICs9IDIpIHtcbiAgICAgIHBvcyArPSBzZXRbaV07XG4gICAgICBpZiAocG9zID4gY29kZSkgeyByZXR1cm4gZmFsc2UgfVxuICAgICAgcG9zICs9IHNldFtpICsgMV07XG4gICAgICBpZiAocG9zID49IGNvZGUpIHsgcmV0dXJuIHRydWUgfVxuICAgIH1cbiAgfVxuXG4gIC8vIFRlc3Qgd2hldGhlciBhIGdpdmVuIGNoYXJhY3RlciBjb2RlIHN0YXJ0cyBhbiBpZGVudGlmaWVyLlxuXG4gIGZ1bmN0aW9uIGlzSWRlbnRpZmllclN0YXJ0KGNvZGUsIGFzdHJhbCkge1xuICAgIGlmIChjb2RlIDwgNjUpIHsgcmV0dXJuIGNvZGUgPT09IDM2IH1cbiAgICBpZiAoY29kZSA8IDkxKSB7IHJldHVybiB0cnVlIH1cbiAgICBpZiAoY29kZSA8IDk3KSB7IHJldHVybiBjb2RlID09PSA5NSB9XG4gICAgaWYgKGNvZGUgPCAxMjMpIHsgcmV0dXJuIHRydWUgfVxuICAgIGlmIChjb2RlIDw9IDB4ZmZmZikgeyByZXR1cm4gY29kZSA+PSAweGFhICYmIG5vbkFTQ0lJaWRlbnRpZmllclN0YXJ0LnRlc3QoU3RyaW5nLmZyb21DaGFyQ29kZShjb2RlKSkgfVxuICAgIGlmIChhc3RyYWwgPT09IGZhbHNlKSB7IHJldHVybiBmYWxzZSB9XG4gICAgcmV0dXJuIGlzSW5Bc3RyYWxTZXQoY29kZSwgYXN0cmFsSWRlbnRpZmllclN0YXJ0Q29kZXMpXG4gIH1cblxuICAvLyBUZXN0IHdoZXRoZXIgYSBnaXZlbiBjaGFyYWN0ZXIgaXMgcGFydCBvZiBhbiBpZGVudGlmaWVyLlxuXG4gIGZ1bmN0aW9uIGlzSWRlbnRpZmllckNoYXIoY29kZSwgYXN0cmFsKSB7XG4gICAgaWYgKGNvZGUgPCA0OCkgeyByZXR1cm4gY29kZSA9PT0gMzYgfVxuICAgIGlmIChjb2RlIDwgNTgpIHsgcmV0dXJuIHRydWUgfVxuICAgIGlmIChjb2RlIDwgNjUpIHsgcmV0dXJuIGZhbHNlIH1cbiAgICBpZiAoY29kZSA8IDkxKSB7IHJldHVybiB0cnVlIH1cbiAgICBpZiAoY29kZSA8IDk3KSB7IHJldHVybiBjb2RlID09PSA5NSB9XG4gICAgaWYgKGNvZGUgPCAxMjMpIHsgcmV0dXJuIHRydWUgfVxuICAgIGlmIChjb2RlIDw9IDB4ZmZmZikgeyByZXR1cm4gY29kZSA+PSAweGFhICYmIG5vbkFTQ0lJaWRlbnRpZmllci50ZXN0KFN0cmluZy5mcm9tQ2hhckNvZGUoY29kZSkpIH1cbiAgICBpZiAoYXN0cmFsID09PSBmYWxzZSkgeyByZXR1cm4gZmFsc2UgfVxuICAgIHJldHVybiBpc0luQXN0cmFsU2V0KGNvZGUsIGFzdHJhbElkZW50aWZpZXJTdGFydENvZGVzKSB8fCBpc0luQXN0cmFsU2V0KGNvZGUsIGFzdHJhbElkZW50aWZpZXJDb2RlcylcbiAgfVxuXG4gIC8vICMjIFRva2VuIHR5cGVzXG5cbiAgLy8gVGhlIGFzc2lnbm1lbnQgb2YgZmluZS1ncmFpbmVkLCBpbmZvcm1hdGlvbi1jYXJyeWluZyB0eXBlIG9iamVjdHNcbiAgLy8gYWxsb3dzIHRoZSB0b2tlbml6ZXIgdG8gc3RvcmUgdGhlIGluZm9ybWF0aW9uIGl0IGhhcyBhYm91dCBhXG4gIC8vIHRva2VuIGluIGEgd2F5IHRoYXQgaXMgdmVyeSBjaGVhcCBmb3IgdGhlIHBhcnNlciB0byBsb29rIHVwLlxuXG4gIC8vIEFsbCB0b2tlbiB0eXBlIHZhcmlhYmxlcyBzdGFydCB3aXRoIGFuIHVuZGVyc2NvcmUsIHRvIG1ha2UgdGhlbVxuICAvLyBlYXN5IHRvIHJlY29nbml6ZS5cblxuICAvLyBUaGUgYGJlZm9yZUV4cHJgIHByb3BlcnR5IGlzIHVzZWQgdG8gZGlzYW1iaWd1YXRlIGJldHdlZW4gcmVndWxhclxuICAvLyBleHByZXNzaW9ucyBhbmQgZGl2aXNpb25zLiBJdCBpcyBzZXQgb24gYWxsIHRva2VuIHR5cGVzIHRoYXQgY2FuXG4gIC8vIGJlIGZvbGxvd2VkIGJ5IGFuIGV4cHJlc3Npb24gKHRodXMsIGEgc2xhc2ggYWZ0ZXIgdGhlbSB3b3VsZCBiZSBhXG4gIC8vIHJlZ3VsYXIgZXhwcmVzc2lvbikuXG4gIC8vXG4gIC8vIFRoZSBgc3RhcnRzRXhwcmAgcHJvcGVydHkgaXMgdXNlZCB0byBjaGVjayBpZiB0aGUgdG9rZW4gZW5kcyBhXG4gIC8vIGB5aWVsZGAgZXhwcmVzc2lvbi4gSXQgaXMgc2V0IG9uIGFsbCB0b2tlbiB0eXBlcyB0aGF0IGVpdGhlciBjYW5cbiAgLy8gZGlyZWN0bHkgc3RhcnQgYW4gZXhwcmVzc2lvbiAobGlrZSBhIHF1b3RhdGlvbiBtYXJrKSBvciBjYW5cbiAgLy8gY29udGludWUgYW4gZXhwcmVzc2lvbiAobGlrZSB0aGUgYm9keSBvZiBhIHN0cmluZykuXG4gIC8vXG4gIC8vIGBpc0xvb3BgIG1hcmtzIGEga2V5d29yZCBhcyBzdGFydGluZyBhIGxvb3AsIHdoaWNoIGlzIGltcG9ydGFudFxuICAvLyB0byBrbm93IHdoZW4gcGFyc2luZyBhIGxhYmVsLCBpbiBvcmRlciB0byBhbGxvdyBvciBkaXNhbGxvd1xuICAvLyBjb250aW51ZSBqdW1wcyB0byB0aGF0IGxhYmVsLlxuXG4gIHZhciBUb2tlblR5cGUgPSBmdW5jdGlvbiBUb2tlblR5cGUobGFiZWwsIGNvbmYpIHtcbiAgICBpZiAoIGNvbmYgPT09IHZvaWQgMCApIGNvbmYgPSB7fTtcblxuICAgIHRoaXMubGFiZWwgPSBsYWJlbDtcbiAgICB0aGlzLmtleXdvcmQgPSBjb25mLmtleXdvcmQ7XG4gICAgdGhpcy5iZWZvcmVFeHByID0gISFjb25mLmJlZm9yZUV4cHI7XG4gICAgdGhpcy5zdGFydHNFeHByID0gISFjb25mLnN0YXJ0c0V4cHI7XG4gICAgdGhpcy5pc0xvb3AgPSAhIWNvbmYuaXNMb29wO1xuICAgIHRoaXMuaXNBc3NpZ24gPSAhIWNvbmYuaXNBc3NpZ247XG4gICAgdGhpcy5wcmVmaXggPSAhIWNvbmYucHJlZml4O1xuICAgIHRoaXMucG9zdGZpeCA9ICEhY29uZi5wb3N0Zml4O1xuICAgIHRoaXMuYmlub3AgPSBjb25mLmJpbm9wIHx8IG51bGw7XG4gICAgdGhpcy51cGRhdGVDb250ZXh0ID0gbnVsbDtcbiAgfTtcblxuICBmdW5jdGlvbiBiaW5vcChuYW1lLCBwcmVjKSB7XG4gICAgcmV0dXJuIG5ldyBUb2tlblR5cGUobmFtZSwge2JlZm9yZUV4cHI6IHRydWUsIGJpbm9wOiBwcmVjfSlcbiAgfVxuICB2YXIgYmVmb3JlRXhwciA9IHtiZWZvcmVFeHByOiB0cnVlfSwgc3RhcnRzRXhwciA9IHtzdGFydHNFeHByOiB0cnVlfTtcblxuICAvLyBNYXAga2V5d29yZCBuYW1lcyB0byB0b2tlbiB0eXBlcy5cblxuICB2YXIga2V5d29yZHMkMSA9IHt9O1xuXG4gIC8vIFN1Y2NpbmN0IGRlZmluaXRpb25zIG9mIGtleXdvcmQgdG9rZW4gdHlwZXNcbiAgZnVuY3Rpb24ga3cobmFtZSwgb3B0aW9ucykge1xuICAgIGlmICggb3B0aW9ucyA9PT0gdm9pZCAwICkgb3B0aW9ucyA9IHt9O1xuXG4gICAgb3B0aW9ucy5rZXl3b3JkID0gbmFtZTtcbiAgICByZXR1cm4ga2V5d29yZHMkMVtuYW1lXSA9IG5ldyBUb2tlblR5cGUobmFtZSwgb3B0aW9ucylcbiAgfVxuXG4gIHZhciB0eXBlcyA9IHtcbiAgICBudW06IG5ldyBUb2tlblR5cGUoXCJudW1cIiwgc3RhcnRzRXhwciksXG4gICAgcmVnZXhwOiBuZXcgVG9rZW5UeXBlKFwicmVnZXhwXCIsIHN0YXJ0c0V4cHIpLFxuICAgIHN0cmluZzogbmV3IFRva2VuVHlwZShcInN0cmluZ1wiLCBzdGFydHNFeHByKSxcbiAgICBuYW1lOiBuZXcgVG9rZW5UeXBlKFwibmFtZVwiLCBzdGFydHNFeHByKSxcbiAgICBwcml2YXRlSWQ6IG5ldyBUb2tlblR5cGUoXCJwcml2YXRlSWRcIiwgc3RhcnRzRXhwciksXG4gICAgZW9mOiBuZXcgVG9rZW5UeXBlKFwiZW9mXCIpLFxuXG4gICAgLy8gUHVuY3R1YXRpb24gdG9rZW4gdHlwZXMuXG4gICAgYnJhY2tldEw6IG5ldyBUb2tlblR5cGUoXCJbXCIsIHtiZWZvcmVFeHByOiB0cnVlLCBzdGFydHNFeHByOiB0cnVlfSksXG4gICAgYnJhY2tldFI6IG5ldyBUb2tlblR5cGUoXCJdXCIpLFxuICAgIGJyYWNlTDogbmV3IFRva2VuVHlwZShcIntcIiwge2JlZm9yZUV4cHI6IHRydWUsIHN0YXJ0c0V4cHI6IHRydWV9KSxcbiAgICBicmFjZVI6IG5ldyBUb2tlblR5cGUoXCJ9XCIpLFxuICAgIHBhcmVuTDogbmV3IFRva2VuVHlwZShcIihcIiwge2JlZm9yZUV4cHI6IHRydWUsIHN0YXJ0c0V4cHI6IHRydWV9KSxcbiAgICBwYXJlblI6IG5ldyBUb2tlblR5cGUoXCIpXCIpLFxuICAgIGNvbW1hOiBuZXcgVG9rZW5UeXBlKFwiLFwiLCBiZWZvcmVFeHByKSxcbiAgICBzZW1pOiBuZXcgVG9rZW5UeXBlKFwiO1wiLCBiZWZvcmVFeHByKSxcbiAgICBjb2xvbjogbmV3IFRva2VuVHlwZShcIjpcIiwgYmVmb3JlRXhwciksXG4gICAgZG90OiBuZXcgVG9rZW5UeXBlKFwiLlwiKSxcbiAgICBxdWVzdGlvbjogbmV3IFRva2VuVHlwZShcIj9cIiwgYmVmb3JlRXhwciksXG4gICAgcXVlc3Rpb25Eb3Q6IG5ldyBUb2tlblR5cGUoXCI/LlwiKSxcbiAgICBhcnJvdzogbmV3IFRva2VuVHlwZShcIj0+XCIsIGJlZm9yZUV4cHIpLFxuICAgIHRlbXBsYXRlOiBuZXcgVG9rZW5UeXBlKFwidGVtcGxhdGVcIiksXG4gICAgaW52YWxpZFRlbXBsYXRlOiBuZXcgVG9rZW5UeXBlKFwiaW52YWxpZFRlbXBsYXRlXCIpLFxuICAgIGVsbGlwc2lzOiBuZXcgVG9rZW5UeXBlKFwiLi4uXCIsIGJlZm9yZUV4cHIpLFxuICAgIGJhY2tRdW90ZTogbmV3IFRva2VuVHlwZShcImBcIiwgc3RhcnRzRXhwciksXG4gICAgZG9sbGFyQnJhY2VMOiBuZXcgVG9rZW5UeXBlKFwiJHtcIiwge2JlZm9yZUV4cHI6IHRydWUsIHN0YXJ0c0V4cHI6IHRydWV9KSxcblxuICAgIC8vIE9wZXJhdG9ycy4gVGhlc2UgY2Fycnkgc2V2ZXJhbCBraW5kcyBvZiBwcm9wZXJ0aWVzIHRvIGhlbHAgdGhlXG4gICAgLy8gcGFyc2VyIHVzZSB0aGVtIHByb3Blcmx5ICh0aGUgcHJlc2VuY2Ugb2YgdGhlc2UgcHJvcGVydGllcyBpc1xuICAgIC8vIHdoYXQgY2F0ZWdvcml6ZXMgdGhlbSBhcyBvcGVyYXRvcnMpLlxuICAgIC8vXG4gICAgLy8gYGJpbm9wYCwgd2hlbiBwcmVzZW50LCBzcGVjaWZpZXMgdGhhdCB0aGlzIG9wZXJhdG9yIGlzIGEgYmluYXJ5XG4gICAgLy8gb3BlcmF0b3IsIGFuZCB3aWxsIHJlZmVyIHRvIGl0cyBwcmVjZWRlbmNlLlxuICAgIC8vXG4gICAgLy8gYHByZWZpeGAgYW5kIGBwb3N0Zml4YCBtYXJrIHRoZSBvcGVyYXRvciBhcyBhIHByZWZpeCBvciBwb3N0Zml4XG4gICAgLy8gdW5hcnkgb3BlcmF0b3IuXG4gICAgLy9cbiAgICAvLyBgaXNBc3NpZ25gIG1hcmtzIGFsbCBvZiBgPWAsIGArPWAsIGAtPWAgZXRjZXRlcmEsIHdoaWNoIGFjdCBhc1xuICAgIC8vIGJpbmFyeSBvcGVyYXRvcnMgd2l0aCBhIHZlcnkgbG93IHByZWNlZGVuY2UsIHRoYXQgc2hvdWxkIHJlc3VsdFxuICAgIC8vIGluIEFzc2lnbm1lbnRFeHByZXNzaW9uIG5vZGVzLlxuXG4gICAgZXE6IG5ldyBUb2tlblR5cGUoXCI9XCIsIHtiZWZvcmVFeHByOiB0cnVlLCBpc0Fzc2lnbjogdHJ1ZX0pLFxuICAgIGFzc2lnbjogbmV3IFRva2VuVHlwZShcIl89XCIsIHtiZWZvcmVFeHByOiB0cnVlLCBpc0Fzc2lnbjogdHJ1ZX0pLFxuICAgIGluY0RlYzogbmV3IFRva2VuVHlwZShcIisrLy0tXCIsIHtwcmVmaXg6IHRydWUsIHBvc3RmaXg6IHRydWUsIHN0YXJ0c0V4cHI6IHRydWV9KSxcbiAgICBwcmVmaXg6IG5ldyBUb2tlblR5cGUoXCIhL35cIiwge2JlZm9yZUV4cHI6IHRydWUsIHByZWZpeDogdHJ1ZSwgc3RhcnRzRXhwcjogdHJ1ZX0pLFxuICAgIGxvZ2ljYWxPUjogYmlub3AoXCJ8fFwiLCAxKSxcbiAgICBsb2dpY2FsQU5EOiBiaW5vcChcIiYmXCIsIDIpLFxuICAgIGJpdHdpc2VPUjogYmlub3AoXCJ8XCIsIDMpLFxuICAgIGJpdHdpc2VYT1I6IGJpbm9wKFwiXlwiLCA0KSxcbiAgICBiaXR3aXNlQU5EOiBiaW5vcChcIiZcIiwgNSksXG4gICAgZXF1YWxpdHk6IGJpbm9wKFwiPT0vIT0vPT09LyE9PVwiLCA2KSxcbiAgICByZWxhdGlvbmFsOiBiaW5vcChcIjwvPi88PS8+PVwiLCA3KSxcbiAgICBiaXRTaGlmdDogYmlub3AoXCI8PC8+Pi8+Pj5cIiwgOCksXG4gICAgcGx1c01pbjogbmV3IFRva2VuVHlwZShcIisvLVwiLCB7YmVmb3JlRXhwcjogdHJ1ZSwgYmlub3A6IDksIHByZWZpeDogdHJ1ZSwgc3RhcnRzRXhwcjogdHJ1ZX0pLFxuICAgIG1vZHVsbzogYmlub3AoXCIlXCIsIDEwKSxcbiAgICBzdGFyOiBiaW5vcChcIipcIiwgMTApLFxuICAgIHNsYXNoOiBiaW5vcChcIi9cIiwgMTApLFxuICAgIHN0YXJzdGFyOiBuZXcgVG9rZW5UeXBlKFwiKipcIiwge2JlZm9yZUV4cHI6IHRydWV9KSxcbiAgICBjb2FsZXNjZTogYmlub3AoXCI/P1wiLCAxKSxcblxuICAgIC8vIEtleXdvcmQgdG9rZW4gdHlwZXMuXG4gICAgX2JyZWFrOiBrdyhcImJyZWFrXCIpLFxuICAgIF9jYXNlOiBrdyhcImNhc2VcIiwgYmVmb3JlRXhwciksXG4gICAgX2NhdGNoOiBrdyhcImNhdGNoXCIpLFxuICAgIF9jb250aW51ZToga3coXCJjb250aW51ZVwiKSxcbiAgICBfZGVidWdnZXI6IGt3KFwiZGVidWdnZXJcIiksXG4gICAgX2RlZmF1bHQ6IGt3KFwiZGVmYXVsdFwiLCBiZWZvcmVFeHByKSxcbiAgICBfZG86IGt3KFwiZG9cIiwge2lzTG9vcDogdHJ1ZSwgYmVmb3JlRXhwcjogdHJ1ZX0pLFxuICAgIF9lbHNlOiBrdyhcImVsc2VcIiwgYmVmb3JlRXhwciksXG4gICAgX2ZpbmFsbHk6IGt3KFwiZmluYWxseVwiKSxcbiAgICBfZm9yOiBrdyhcImZvclwiLCB7aXNMb29wOiB0cnVlfSksXG4gICAgX2Z1bmN0aW9uOiBrdyhcImZ1bmN0aW9uXCIsIHN0YXJ0c0V4cHIpLFxuICAgIF9pZjoga3coXCJpZlwiKSxcbiAgICBfcmV0dXJuOiBrdyhcInJldHVyblwiLCBiZWZvcmVFeHByKSxcbiAgICBfc3dpdGNoOiBrdyhcInN3aXRjaFwiKSxcbiAgICBfdGhyb3c6IGt3KFwidGhyb3dcIiwgYmVmb3JlRXhwciksXG4gICAgX3RyeToga3coXCJ0cnlcIiksXG4gICAgX3Zhcjoga3coXCJ2YXJcIiksXG4gICAgX2NvbnN0OiBrdyhcImNvbnN0XCIpLFxuICAgIF93aGlsZToga3coXCJ3aGlsZVwiLCB7aXNMb29wOiB0cnVlfSksXG4gICAgX3dpdGg6IGt3KFwid2l0aFwiKSxcbiAgICBfbmV3OiBrdyhcIm5ld1wiLCB7YmVmb3JlRXhwcjogdHJ1ZSwgc3RhcnRzRXhwcjogdHJ1ZX0pLFxuICAgIF90aGlzOiBrdyhcInRoaXNcIiwgc3RhcnRzRXhwciksXG4gICAgX3N1cGVyOiBrdyhcInN1cGVyXCIsIHN0YXJ0c0V4cHIpLFxuICAgIF9jbGFzczoga3coXCJjbGFzc1wiLCBzdGFydHNFeHByKSxcbiAgICBfZXh0ZW5kczoga3coXCJleHRlbmRzXCIsIGJlZm9yZUV4cHIpLFxuICAgIF9leHBvcnQ6IGt3KFwiZXhwb3J0XCIpLFxuICAgIF9pbXBvcnQ6IGt3KFwiaW1wb3J0XCIsIHN0YXJ0c0V4cHIpLFxuICAgIF9udWxsOiBrdyhcIm51bGxcIiwgc3RhcnRzRXhwciksXG4gICAgX3RydWU6IGt3KFwidHJ1ZVwiLCBzdGFydHNFeHByKSxcbiAgICBfZmFsc2U6IGt3KFwiZmFsc2VcIiwgc3RhcnRzRXhwciksXG4gICAgX2luOiBrdyhcImluXCIsIHtiZWZvcmVFeHByOiB0cnVlLCBiaW5vcDogN30pLFxuICAgIF9pbnN0YW5jZW9mOiBrdyhcImluc3RhbmNlb2ZcIiwge2JlZm9yZUV4cHI6IHRydWUsIGJpbm9wOiA3fSksXG4gICAgX3R5cGVvZjoga3coXCJ0eXBlb2ZcIiwge2JlZm9yZUV4cHI6IHRydWUsIHByZWZpeDogdHJ1ZSwgc3RhcnRzRXhwcjogdHJ1ZX0pLFxuICAgIF92b2lkOiBrdyhcInZvaWRcIiwge2JlZm9yZUV4cHI6IHRydWUsIHByZWZpeDogdHJ1ZSwgc3RhcnRzRXhwcjogdHJ1ZX0pLFxuICAgIF9kZWxldGU6IGt3KFwiZGVsZXRlXCIsIHtiZWZvcmVFeHByOiB0cnVlLCBwcmVmaXg6IHRydWUsIHN0YXJ0c0V4cHI6IHRydWV9KVxuICB9O1xuXG4gIC8vIE1hdGNoZXMgYSB3aG9sZSBsaW5lIGJyZWFrICh3aGVyZSBDUkxGIGlzIGNvbnNpZGVyZWQgYSBzaW5nbGVcbiAgLy8gbGluZSBicmVhaykuIFVzZWQgdG8gY291bnQgbGluZXMuXG5cbiAgdmFyIGxpbmVCcmVhayA9IC9cXHJcXG4/fFxcbnxcXHUyMDI4fFxcdTIwMjkvO1xuICB2YXIgbGluZUJyZWFrRyA9IG5ldyBSZWdFeHAobGluZUJyZWFrLnNvdXJjZSwgXCJnXCIpO1xuXG4gIGZ1bmN0aW9uIGlzTmV3TGluZShjb2RlLCBlY21hMjAxOVN0cmluZykge1xuICAgIHJldHVybiBjb2RlID09PSAxMCB8fCBjb2RlID09PSAxMyB8fCAoIWVjbWEyMDE5U3RyaW5nICYmIChjb2RlID09PSAweDIwMjggfHwgY29kZSA9PT0gMHgyMDI5KSlcbiAgfVxuXG4gIHZhciBub25BU0NJSXdoaXRlc3BhY2UgPSAvW1xcdTE2ODBcXHUyMDAwLVxcdTIwMGFcXHUyMDJmXFx1MjA1ZlxcdTMwMDBcXHVmZWZmXS87XG5cbiAgdmFyIHNraXBXaGl0ZVNwYWNlID0gLyg/Olxcc3xcXC9cXC8uKnxcXC9cXCpbXl0qP1xcKlxcLykqL2c7XG5cbiAgdmFyIHJlZiA9IE9iamVjdC5wcm90b3R5cGU7XG4gIHZhciBoYXNPd25Qcm9wZXJ0eSA9IHJlZi5oYXNPd25Qcm9wZXJ0eTtcbiAgdmFyIHRvU3RyaW5nID0gcmVmLnRvU3RyaW5nO1xuXG4gIC8vIENoZWNrcyBpZiBhbiBvYmplY3QgaGFzIGEgcHJvcGVydHkuXG5cbiAgZnVuY3Rpb24gaGFzKG9iaiwgcHJvcE5hbWUpIHtcbiAgICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3BOYW1lKVxuICB9XG5cbiAgdmFyIGlzQXJyYXkgPSBBcnJheS5pc0FycmF5IHx8IChmdW5jdGlvbiAob2JqKSB7IHJldHVybiAoXG4gICAgdG9TdHJpbmcuY2FsbChvYmopID09PSBcIltvYmplY3QgQXJyYXldXCJcbiAgKTsgfSk7XG5cbiAgZnVuY3Rpb24gd29yZHNSZWdleHAod29yZHMpIHtcbiAgICByZXR1cm4gbmV3IFJlZ0V4cChcIl4oPzpcIiArIHdvcmRzLnJlcGxhY2UoLyAvZywgXCJ8XCIpICsgXCIpJFwiKVxuICB9XG5cbiAgLy8gVGhlc2UgYXJlIHVzZWQgd2hlbiBgb3B0aW9ucy5sb2NhdGlvbnNgIGlzIG9uLCBmb3IgdGhlXG4gIC8vIGBzdGFydExvY2AgYW5kIGBlbmRMb2NgIHByb3BlcnRpZXMuXG5cbiAgdmFyIFBvc2l0aW9uID0gZnVuY3Rpb24gUG9zaXRpb24obGluZSwgY29sKSB7XG4gICAgdGhpcy5saW5lID0gbGluZTtcbiAgICB0aGlzLmNvbHVtbiA9IGNvbDtcbiAgfTtcblxuICBQb3NpdGlvbi5wcm90b3R5cGUub2Zmc2V0ID0gZnVuY3Rpb24gb2Zmc2V0IChuKSB7XG4gICAgcmV0dXJuIG5ldyBQb3NpdGlvbih0aGlzLmxpbmUsIHRoaXMuY29sdW1uICsgbilcbiAgfTtcblxuICB2YXIgU291cmNlTG9jYXRpb24gPSBmdW5jdGlvbiBTb3VyY2VMb2NhdGlvbihwLCBzdGFydCwgZW5kKSB7XG4gICAgdGhpcy5zdGFydCA9IHN0YXJ0O1xuICAgIHRoaXMuZW5kID0gZW5kO1xuICAgIGlmIChwLnNvdXJjZUZpbGUgIT09IG51bGwpIHsgdGhpcy5zb3VyY2UgPSBwLnNvdXJjZUZpbGU7IH1cbiAgfTtcblxuICAvLyBUaGUgYGdldExpbmVJbmZvYCBmdW5jdGlvbiBpcyBtb3N0bHkgdXNlZnVsIHdoZW4gdGhlXG4gIC8vIGBsb2NhdGlvbnNgIG9wdGlvbiBpcyBvZmYgKGZvciBwZXJmb3JtYW5jZSByZWFzb25zKSBhbmQgeW91XG4gIC8vIHdhbnQgdG8gZmluZCB0aGUgbGluZS9jb2x1bW4gcG9zaXRpb24gZm9yIGEgZ2l2ZW4gY2hhcmFjdGVyXG4gIC8vIG9mZnNldC4gYGlucHV0YCBzaG91bGQgYmUgdGhlIGNvZGUgc3RyaW5nIHRoYXQgdGhlIG9mZnNldCByZWZlcnNcbiAgLy8gaW50by5cblxuICBmdW5jdGlvbiBnZXRMaW5lSW5mbyhpbnB1dCwgb2Zmc2V0KSB7XG4gICAgZm9yICh2YXIgbGluZSA9IDEsIGN1ciA9IDA7Oykge1xuICAgICAgbGluZUJyZWFrRy5sYXN0SW5kZXggPSBjdXI7XG4gICAgICB2YXIgbWF0Y2ggPSBsaW5lQnJlYWtHLmV4ZWMoaW5wdXQpO1xuICAgICAgaWYgKG1hdGNoICYmIG1hdGNoLmluZGV4IDwgb2Zmc2V0KSB7XG4gICAgICAgICsrbGluZTtcbiAgICAgICAgY3VyID0gbWF0Y2guaW5kZXggKyBtYXRjaFswXS5sZW5ndGg7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gbmV3IFBvc2l0aW9uKGxpbmUsIG9mZnNldCAtIGN1cilcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBBIHNlY29uZCBhcmd1bWVudCBtdXN0IGJlIGdpdmVuIHRvIGNvbmZpZ3VyZSB0aGUgcGFyc2VyIHByb2Nlc3MuXG4gIC8vIFRoZXNlIG9wdGlvbnMgYXJlIHJlY29nbml6ZWQgKG9ubHkgYGVjbWFWZXJzaW9uYCBpcyByZXF1aXJlZCk6XG5cbiAgdmFyIGRlZmF1bHRPcHRpb25zID0ge1xuICAgIC8vIGBlY21hVmVyc2lvbmAgaW5kaWNhdGVzIHRoZSBFQ01BU2NyaXB0IHZlcnNpb24gdG8gcGFyc2UuIE11c3QgYmVcbiAgICAvLyBlaXRoZXIgMywgNSwgNiAob3IgMjAxNSksIDcgKDIwMTYpLCA4ICgyMDE3KSwgOSAoMjAxOCksIDEwXG4gICAgLy8gKDIwMTkpLCAxMSAoMjAyMCksIDEyICgyMDIxKSwgb3IgYFwibGF0ZXN0XCJgICh0aGUgbGF0ZXN0IHZlcnNpb25cbiAgICAvLyB0aGUgbGlicmFyeSBzdXBwb3J0cykuIFRoaXMgaW5mbHVlbmNlcyBzdXBwb3J0IGZvciBzdHJpY3QgbW9kZSxcbiAgICAvLyB0aGUgc2V0IG9mIHJlc2VydmVkIHdvcmRzLCBhbmQgc3VwcG9ydCBmb3IgbmV3IHN5bnRheCBmZWF0dXJlcy5cbiAgICBlY21hVmVyc2lvbjogbnVsbCxcbiAgICAvLyBgc291cmNlVHlwZWAgaW5kaWNhdGVzIHRoZSBtb2RlIHRoZSBjb2RlIHNob3VsZCBiZSBwYXJzZWQgaW4uXG4gICAgLy8gQ2FuIGJlIGVpdGhlciBgXCJzY3JpcHRcImAgb3IgYFwibW9kdWxlXCJgLiBUaGlzIGluZmx1ZW5jZXMgZ2xvYmFsXG4gICAgLy8gc3RyaWN0IG1vZGUgYW5kIHBhcnNpbmcgb2YgYGltcG9ydGAgYW5kIGBleHBvcnRgIGRlY2xhcmF0aW9ucy5cbiAgICBzb3VyY2VUeXBlOiBcInNjcmlwdFwiLFxuICAgIC8vIGBvbkluc2VydGVkU2VtaWNvbG9uYCBjYW4gYmUgYSBjYWxsYmFjayB0aGF0IHdpbGwgYmUgY2FsbGVkXG4gICAgLy8gd2hlbiBhIHNlbWljb2xvbiBpcyBhdXRvbWF0aWNhbGx5IGluc2VydGVkLiBJdCB3aWxsIGJlIHBhc3NlZFxuICAgIC8vIHRoZSBwb3NpdGlvbiBvZiB0aGUgY29tbWEgYXMgYW4gb2Zmc2V0LCBhbmQgaWYgYGxvY2F0aW9uc2AgaXNcbiAgICAvLyBlbmFibGVkLCBpdCBpcyBnaXZlbiB0aGUgbG9jYXRpb24gYXMgYSBge2xpbmUsIGNvbHVtbn1gIG9iamVjdFxuICAgIC8vIGFzIHNlY29uZCBhcmd1bWVudC5cbiAgICBvbkluc2VydGVkU2VtaWNvbG9uOiBudWxsLFxuICAgIC8vIGBvblRyYWlsaW5nQ29tbWFgIGlzIHNpbWlsYXIgdG8gYG9uSW5zZXJ0ZWRTZW1pY29sb25gLCBidXQgZm9yXG4gICAgLy8gdHJhaWxpbmcgY29tbWFzLlxuICAgIG9uVHJhaWxpbmdDb21tYTogbnVsbCxcbiAgICAvLyBCeSBkZWZhdWx0LCByZXNlcnZlZCB3b3JkcyBhcmUgb25seSBlbmZvcmNlZCBpZiBlY21hVmVyc2lvbiA+PSA1LlxuICAgIC8vIFNldCBgYWxsb3dSZXNlcnZlZGAgdG8gYSBib29sZWFuIHZhbHVlIHRvIGV4cGxpY2l0bHkgdHVybiB0aGlzIG9uXG4gICAgLy8gYW4gb2ZmLiBXaGVuIHRoaXMgb3B0aW9uIGhhcyB0aGUgdmFsdWUgXCJuZXZlclwiLCByZXNlcnZlZCB3b3Jkc1xuICAgIC8vIGFuZCBrZXl3b3JkcyBjYW4gYWxzbyBub3QgYmUgdXNlZCBhcyBwcm9wZXJ0eSBuYW1lcy5cbiAgICBhbGxvd1Jlc2VydmVkOiBudWxsLFxuICAgIC8vIFdoZW4gZW5hYmxlZCwgYSByZXR1cm4gYXQgdGhlIHRvcCBsZXZlbCBpcyBub3QgY29uc2lkZXJlZCBhblxuICAgIC8vIGVycm9yLlxuICAgIGFsbG93UmV0dXJuT3V0c2lkZUZ1bmN0aW9uOiBmYWxzZSxcbiAgICAvLyBXaGVuIGVuYWJsZWQsIGltcG9ydC9leHBvcnQgc3RhdGVtZW50cyBhcmUgbm90IGNvbnN0cmFpbmVkIHRvXG4gICAgLy8gYXBwZWFyaW5nIGF0IHRoZSB0b3Agb2YgdGhlIHByb2dyYW0sIGFuZCBhbiBpbXBvcnQubWV0YSBleHByZXNzaW9uXG4gICAgLy8gaW4gYSBzY3JpcHQgaXNuJ3QgY29uc2lkZXJlZCBhbiBlcnJvci5cbiAgICBhbGxvd0ltcG9ydEV4cG9ydEV2ZXJ5d2hlcmU6IGZhbHNlLFxuICAgIC8vIEJ5IGRlZmF1bHQsIGF3YWl0IGlkZW50aWZpZXJzIGFyZSBhbGxvd2VkIHRvIGFwcGVhciBhdCB0aGUgdG9wLWxldmVsIHNjb3BlIG9ubHkgaWYgZWNtYVZlcnNpb24gPj0gMjAyMi5cbiAgICAvLyBXaGVuIGVuYWJsZWQsIGF3YWl0IGlkZW50aWZpZXJzIGFyZSBhbGxvd2VkIHRvIGFwcGVhciBhdCB0aGUgdG9wLWxldmVsIHNjb3BlLFxuICAgIC8vIGJ1dCB0aGV5IGFyZSBzdGlsbCBub3QgYWxsb3dlZCBpbiBub24tYXN5bmMgZnVuY3Rpb25zLlxuICAgIGFsbG93QXdhaXRPdXRzaWRlRnVuY3Rpb246IG51bGwsXG4gICAgLy8gV2hlbiBlbmFibGVkLCBoYXNoYmFuZyBkaXJlY3RpdmUgaW4gdGhlIGJlZ2lubmluZyBvZiBmaWxlXG4gICAgLy8gaXMgYWxsb3dlZCBhbmQgdHJlYXRlZCBhcyBhIGxpbmUgY29tbWVudC5cbiAgICBhbGxvd0hhc2hCYW5nOiBmYWxzZSxcbiAgICAvLyBXaGVuIGBsb2NhdGlvbnNgIGlzIG9uLCBgbG9jYCBwcm9wZXJ0aWVzIGhvbGRpbmcgb2JqZWN0cyB3aXRoXG4gICAgLy8gYHN0YXJ0YCBhbmQgYGVuZGAgcHJvcGVydGllcyBpbiBge2xpbmUsIGNvbHVtbn1gIGZvcm0gKHdpdGhcbiAgICAvLyBsaW5lIGJlaW5nIDEtYmFzZWQgYW5kIGNvbHVtbiAwLWJhc2VkKSB3aWxsIGJlIGF0dGFjaGVkIHRvIHRoZVxuICAgIC8vIG5vZGVzLlxuICAgIGxvY2F0aW9uczogZmFsc2UsXG4gICAgLy8gQSBmdW5jdGlvbiBjYW4gYmUgcGFzc2VkIGFzIGBvblRva2VuYCBvcHRpb24sIHdoaWNoIHdpbGxcbiAgICAvLyBjYXVzZSBBY29ybiB0byBjYWxsIHRoYXQgZnVuY3Rpb24gd2l0aCBvYmplY3QgaW4gdGhlIHNhbWVcbiAgICAvLyBmb3JtYXQgYXMgdG9rZW5zIHJldHVybmVkIGZyb20gYHRva2VuaXplcigpLmdldFRva2VuKClgLiBOb3RlXG4gICAgLy8gdGhhdCB5b3UgYXJlIG5vdCBhbGxvd2VkIHRvIGNhbGwgdGhlIHBhcnNlciBmcm9tIHRoZVxuICAgIC8vIGNhbGxiYWNr4oCUdGhhdCB3aWxsIGNvcnJ1cHQgaXRzIGludGVybmFsIHN0YXRlLlxuICAgIG9uVG9rZW46IG51bGwsXG4gICAgLy8gQSBmdW5jdGlvbiBjYW4gYmUgcGFzc2VkIGFzIGBvbkNvbW1lbnRgIG9wdGlvbiwgd2hpY2ggd2lsbFxuICAgIC8vIGNhdXNlIEFjb3JuIHRvIGNhbGwgdGhhdCBmdW5jdGlvbiB3aXRoIGAoYmxvY2ssIHRleHQsIHN0YXJ0LFxuICAgIC8vIGVuZClgIHBhcmFtZXRlcnMgd2hlbmV2ZXIgYSBjb21tZW50IGlzIHNraXBwZWQuIGBibG9ja2AgaXMgYVxuICAgIC8vIGJvb2xlYW4gaW5kaWNhdGluZyB3aGV0aGVyIHRoaXMgaXMgYSBibG9jayAoYC8qICovYCkgY29tbWVudCxcbiAgICAvLyBgdGV4dGAgaXMgdGhlIGNvbnRlbnQgb2YgdGhlIGNvbW1lbnQsIGFuZCBgc3RhcnRgIGFuZCBgZW5kYCBhcmVcbiAgICAvLyBjaGFyYWN0ZXIgb2Zmc2V0cyB0aGF0IGRlbm90ZSB0aGUgc3RhcnQgYW5kIGVuZCBvZiB0aGUgY29tbWVudC5cbiAgICAvLyBXaGVuIHRoZSBgbG9jYXRpb25zYCBvcHRpb24gaXMgb24sIHR3byBtb3JlIHBhcmFtZXRlcnMgYXJlXG4gICAgLy8gcGFzc2VkLCB0aGUgZnVsbCBge2xpbmUsIGNvbHVtbn1gIGxvY2F0aW9ucyBvZiB0aGUgc3RhcnQgYW5kXG4gICAgLy8gZW5kIG9mIHRoZSBjb21tZW50cy4gTm90ZSB0aGF0IHlvdSBhcmUgbm90IGFsbG93ZWQgdG8gY2FsbCB0aGVcbiAgICAvLyBwYXJzZXIgZnJvbSB0aGUgY2FsbGJhY2vigJR0aGF0IHdpbGwgY29ycnVwdCBpdHMgaW50ZXJuYWwgc3RhdGUuXG4gICAgb25Db21tZW50OiBudWxsLFxuICAgIC8vIE5vZGVzIGhhdmUgdGhlaXIgc3RhcnQgYW5kIGVuZCBjaGFyYWN0ZXJzIG9mZnNldHMgcmVjb3JkZWQgaW5cbiAgICAvLyBgc3RhcnRgIGFuZCBgZW5kYCBwcm9wZXJ0aWVzIChkaXJlY3RseSBvbiB0aGUgbm9kZSwgcmF0aGVyIHRoYW5cbiAgICAvLyB0aGUgYGxvY2Agb2JqZWN0LCB3aGljaCBob2xkcyBsaW5lL2NvbHVtbiBkYXRhLiBUbyBhbHNvIGFkZCBhXG4gICAgLy8gW3NlbWktc3RhbmRhcmRpemVkXVtyYW5nZV0gYHJhbmdlYCBwcm9wZXJ0eSBob2xkaW5nIGEgYFtzdGFydCxcbiAgICAvLyBlbmRdYCBhcnJheSB3aXRoIHRoZSBzYW1lIG51bWJlcnMsIHNldCB0aGUgYHJhbmdlc2Agb3B0aW9uIHRvXG4gICAgLy8gYHRydWVgLlxuICAgIC8vXG4gICAgLy8gW3JhbmdlXTogaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9NzQ1Njc4XG4gICAgcmFuZ2VzOiBmYWxzZSxcbiAgICAvLyBJdCBpcyBwb3NzaWJsZSB0byBwYXJzZSBtdWx0aXBsZSBmaWxlcyBpbnRvIGEgc2luZ2xlIEFTVCBieVxuICAgIC8vIHBhc3NpbmcgdGhlIHRyZWUgcHJvZHVjZWQgYnkgcGFyc2luZyB0aGUgZmlyc3QgZmlsZSBhc1xuICAgIC8vIGBwcm9ncmFtYCBvcHRpb24gaW4gc3Vic2VxdWVudCBwYXJzZXMuIFRoaXMgd2lsbCBhZGQgdGhlXG4gICAgLy8gdG9wbGV2ZWwgZm9ybXMgb2YgdGhlIHBhcnNlZCBmaWxlIHRvIHRoZSBgUHJvZ3JhbWAgKHRvcCkgbm9kZVxuICAgIC8vIG9mIGFuIGV4aXN0aW5nIHBhcnNlIHRyZWUuXG4gICAgcHJvZ3JhbTogbnVsbCxcbiAgICAvLyBXaGVuIGBsb2NhdGlvbnNgIGlzIG9uLCB5b3UgY2FuIHBhc3MgdGhpcyB0byByZWNvcmQgdGhlIHNvdXJjZVxuICAgIC8vIGZpbGUgaW4gZXZlcnkgbm9kZSdzIGBsb2NgIG9iamVjdC5cbiAgICBzb3VyY2VGaWxlOiBudWxsLFxuICAgIC8vIFRoaXMgdmFsdWUsIGlmIGdpdmVuLCBpcyBzdG9yZWQgaW4gZXZlcnkgbm9kZSwgd2hldGhlclxuICAgIC8vIGBsb2NhdGlvbnNgIGlzIG9uIG9yIG9mZi5cbiAgICBkaXJlY3RTb3VyY2VGaWxlOiBudWxsLFxuICAgIC8vIFdoZW4gZW5hYmxlZCwgcGFyZW50aGVzaXplZCBleHByZXNzaW9ucyBhcmUgcmVwcmVzZW50ZWQgYnlcbiAgICAvLyAobm9uLXN0YW5kYXJkKSBQYXJlbnRoZXNpemVkRXhwcmVzc2lvbiBub2Rlc1xuICAgIHByZXNlcnZlUGFyZW5zOiBmYWxzZVxuICB9O1xuXG4gIC8vIEludGVycHJldCBhbmQgZGVmYXVsdCBhbiBvcHRpb25zIG9iamVjdFxuXG4gIHZhciB3YXJuZWRBYm91dEVjbWFWZXJzaW9uID0gZmFsc2U7XG5cbiAgZnVuY3Rpb24gZ2V0T3B0aW9ucyhvcHRzKSB7XG4gICAgdmFyIG9wdGlvbnMgPSB7fTtcblxuICAgIGZvciAodmFyIG9wdCBpbiBkZWZhdWx0T3B0aW9ucylcbiAgICAgIHsgb3B0aW9uc1tvcHRdID0gb3B0cyAmJiBoYXMob3B0cywgb3B0KSA/IG9wdHNbb3B0XSA6IGRlZmF1bHRPcHRpb25zW29wdF07IH1cblxuICAgIGlmIChvcHRpb25zLmVjbWFWZXJzaW9uID09PSBcImxhdGVzdFwiKSB7XG4gICAgICBvcHRpb25zLmVjbWFWZXJzaW9uID0gMWU4O1xuICAgIH0gZWxzZSBpZiAob3B0aW9ucy5lY21hVmVyc2lvbiA9PSBudWxsKSB7XG4gICAgICBpZiAoIXdhcm5lZEFib3V0RWNtYVZlcnNpb24gJiYgdHlwZW9mIGNvbnNvbGUgPT09IFwib2JqZWN0XCIgJiYgY29uc29sZS53YXJuKSB7XG4gICAgICAgIHdhcm5lZEFib3V0RWNtYVZlcnNpb24gPSB0cnVlO1xuICAgICAgICBjb25zb2xlLndhcm4oXCJTaW5jZSBBY29ybiA4LjAuMCwgb3B0aW9ucy5lY21hVmVyc2lvbiBpcyByZXF1aXJlZC5cXG5EZWZhdWx0aW5nIHRvIDIwMjAsIGJ1dCB0aGlzIHdpbGwgc3RvcCB3b3JraW5nIGluIHRoZSBmdXR1cmUuXCIpO1xuICAgICAgfVxuICAgICAgb3B0aW9ucy5lY21hVmVyc2lvbiA9IDExO1xuICAgIH0gZWxzZSBpZiAob3B0aW9ucy5lY21hVmVyc2lvbiA+PSAyMDE1KSB7XG4gICAgICBvcHRpb25zLmVjbWFWZXJzaW9uIC09IDIwMDk7XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMuYWxsb3dSZXNlcnZlZCA9PSBudWxsKVxuICAgICAgeyBvcHRpb25zLmFsbG93UmVzZXJ2ZWQgPSBvcHRpb25zLmVjbWFWZXJzaW9uIDwgNTsgfVxuICAgIGlmIChvcHRpb25zLmFsbG93QXdhaXRPdXRzaWRlRnVuY3Rpb24gPT0gbnVsbClcbiAgICAgIHsgb3B0aW9ucy5hbGxvd0F3YWl0T3V0c2lkZUZ1bmN0aW9uID0gb3B0aW9ucy5lY21hVmVyc2lvbiA+PSAxMzsgfVxuXG4gICAgaWYgKGlzQXJyYXkob3B0aW9ucy5vblRva2VuKSkge1xuICAgICAgdmFyIHRva2VucyA9IG9wdGlvbnMub25Ub2tlbjtcbiAgICAgIG9wdGlvbnMub25Ub2tlbiA9IGZ1bmN0aW9uICh0b2tlbikgeyByZXR1cm4gdG9rZW5zLnB1c2godG9rZW4pOyB9O1xuICAgIH1cbiAgICBpZiAoaXNBcnJheShvcHRpb25zLm9uQ29tbWVudCkpXG4gICAgICB7IG9wdGlvbnMub25Db21tZW50ID0gcHVzaENvbW1lbnQob3B0aW9ucywgb3B0aW9ucy5vbkNvbW1lbnQpOyB9XG5cbiAgICByZXR1cm4gb3B0aW9uc1xuICB9XG5cbiAgZnVuY3Rpb24gcHVzaENvbW1lbnQob3B0aW9ucywgYXJyYXkpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oYmxvY2ssIHRleHQsIHN0YXJ0LCBlbmQsIHN0YXJ0TG9jLCBlbmRMb2MpIHtcbiAgICAgIHZhciBjb21tZW50ID0ge1xuICAgICAgICB0eXBlOiBibG9jayA/IFwiQmxvY2tcIiA6IFwiTGluZVwiLFxuICAgICAgICB2YWx1ZTogdGV4dCxcbiAgICAgICAgc3RhcnQ6IHN0YXJ0LFxuICAgICAgICBlbmQ6IGVuZFxuICAgICAgfTtcbiAgICAgIGlmIChvcHRpb25zLmxvY2F0aW9ucylcbiAgICAgICAgeyBjb21tZW50LmxvYyA9IG5ldyBTb3VyY2VMb2NhdGlvbih0aGlzLCBzdGFydExvYywgZW5kTG9jKTsgfVxuICAgICAgaWYgKG9wdGlvbnMucmFuZ2VzKVxuICAgICAgICB7IGNvbW1lbnQucmFuZ2UgPSBbc3RhcnQsIGVuZF07IH1cbiAgICAgIGFycmF5LnB1c2goY29tbWVudCk7XG4gICAgfVxuICB9XG5cbiAgLy8gRWFjaCBzY29wZSBnZXRzIGEgYml0c2V0IHRoYXQgbWF5IGNvbnRhaW4gdGhlc2UgZmxhZ3NcbiAgdmFyXG4gICAgICBTQ09QRV9UT1AgPSAxLFxuICAgICAgU0NPUEVfRlVOQ1RJT04gPSAyLFxuICAgICAgU0NPUEVfVkFSID0gU0NPUEVfVE9QIHwgU0NPUEVfRlVOQ1RJT04sXG4gICAgICBTQ09QRV9BU1lOQyA9IDQsXG4gICAgICBTQ09QRV9HRU5FUkFUT1IgPSA4LFxuICAgICAgU0NPUEVfQVJST1cgPSAxNixcbiAgICAgIFNDT1BFX1NJTVBMRV9DQVRDSCA9IDMyLFxuICAgICAgU0NPUEVfU1VQRVIgPSA2NCxcbiAgICAgIFNDT1BFX0RJUkVDVF9TVVBFUiA9IDEyODtcblxuICBmdW5jdGlvbiBmdW5jdGlvbkZsYWdzKGFzeW5jLCBnZW5lcmF0b3IpIHtcbiAgICByZXR1cm4gU0NPUEVfRlVOQ1RJT04gfCAoYXN5bmMgPyBTQ09QRV9BU1lOQyA6IDApIHwgKGdlbmVyYXRvciA/IFNDT1BFX0dFTkVSQVRPUiA6IDApXG4gIH1cblxuICAvLyBVc2VkIGluIGNoZWNrTFZhbCogYW5kIGRlY2xhcmVOYW1lIHRvIGRldGVybWluZSB0aGUgdHlwZSBvZiBhIGJpbmRpbmdcbiAgdmFyXG4gICAgICBCSU5EX05PTkUgPSAwLCAvLyBOb3QgYSBiaW5kaW5nXG4gICAgICBCSU5EX1ZBUiA9IDEsIC8vIFZhci1zdHlsZSBiaW5kaW5nXG4gICAgICBCSU5EX0xFWElDQUwgPSAyLCAvLyBMZXQtIG9yIGNvbnN0LXN0eWxlIGJpbmRpbmdcbiAgICAgIEJJTkRfRlVOQ1RJT04gPSAzLCAvLyBGdW5jdGlvbiBkZWNsYXJhdGlvblxuICAgICAgQklORF9TSU1QTEVfQ0FUQ0ggPSA0LCAvLyBTaW1wbGUgKGlkZW50aWZpZXIgcGF0dGVybikgY2F0Y2ggYmluZGluZ1xuICAgICAgQklORF9PVVRTSURFID0gNTsgLy8gU3BlY2lhbCBjYXNlIGZvciBmdW5jdGlvbiBuYW1lcyBhcyBib3VuZCBpbnNpZGUgdGhlIGZ1bmN0aW9uXG5cbiAgdmFyIFBhcnNlciA9IGZ1bmN0aW9uIFBhcnNlcihvcHRpb25zLCBpbnB1dCwgc3RhcnRQb3MpIHtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zID0gZ2V0T3B0aW9ucyhvcHRpb25zKTtcbiAgICB0aGlzLnNvdXJjZUZpbGUgPSBvcHRpb25zLnNvdXJjZUZpbGU7XG4gICAgdGhpcy5rZXl3b3JkcyA9IHdvcmRzUmVnZXhwKGtleXdvcmRzW29wdGlvbnMuZWNtYVZlcnNpb24gPj0gNiA/IDYgOiBvcHRpb25zLnNvdXJjZVR5cGUgPT09IFwibW9kdWxlXCIgPyBcIjVtb2R1bGVcIiA6IDVdKTtcbiAgICB2YXIgcmVzZXJ2ZWQgPSBcIlwiO1xuICAgIGlmIChvcHRpb25zLmFsbG93UmVzZXJ2ZWQgIT09IHRydWUpIHtcbiAgICAgIHJlc2VydmVkID0gcmVzZXJ2ZWRXb3Jkc1tvcHRpb25zLmVjbWFWZXJzaW9uID49IDYgPyA2IDogb3B0aW9ucy5lY21hVmVyc2lvbiA9PT0gNSA/IDUgOiAzXTtcbiAgICAgIGlmIChvcHRpb25zLnNvdXJjZVR5cGUgPT09IFwibW9kdWxlXCIpIHsgcmVzZXJ2ZWQgKz0gXCIgYXdhaXRcIjsgfVxuICAgIH1cbiAgICB0aGlzLnJlc2VydmVkV29yZHMgPSB3b3Jkc1JlZ2V4cChyZXNlcnZlZCk7XG4gICAgdmFyIHJlc2VydmVkU3RyaWN0ID0gKHJlc2VydmVkID8gcmVzZXJ2ZWQgKyBcIiBcIiA6IFwiXCIpICsgcmVzZXJ2ZWRXb3Jkcy5zdHJpY3Q7XG4gICAgdGhpcy5yZXNlcnZlZFdvcmRzU3RyaWN0ID0gd29yZHNSZWdleHAocmVzZXJ2ZWRTdHJpY3QpO1xuICAgIHRoaXMucmVzZXJ2ZWRXb3Jkc1N0cmljdEJpbmQgPSB3b3Jkc1JlZ2V4cChyZXNlcnZlZFN0cmljdCArIFwiIFwiICsgcmVzZXJ2ZWRXb3Jkcy5zdHJpY3RCaW5kKTtcbiAgICB0aGlzLmlucHV0ID0gU3RyaW5nKGlucHV0KTtcblxuICAgIC8vIFVzZWQgdG8gc2lnbmFsIHRvIGNhbGxlcnMgb2YgYHJlYWRXb3JkMWAgd2hldGhlciB0aGUgd29yZFxuICAgIC8vIGNvbnRhaW5lZCBhbnkgZXNjYXBlIHNlcXVlbmNlcy4gVGhpcyBpcyBuZWVkZWQgYmVjYXVzZSB3b3JkcyB3aXRoXG4gICAgLy8gZXNjYXBlIHNlcXVlbmNlcyBtdXN0IG5vdCBiZSBpbnRlcnByZXRlZCBhcyBrZXl3b3Jkcy5cbiAgICB0aGlzLmNvbnRhaW5zRXNjID0gZmFsc2U7XG5cbiAgICAvLyBTZXQgdXAgdG9rZW4gc3RhdGVcblxuICAgIC8vIFRoZSBjdXJyZW50IHBvc2l0aW9uIG9mIHRoZSB0b2tlbml6ZXIgaW4gdGhlIGlucHV0LlxuICAgIGlmIChzdGFydFBvcykge1xuICAgICAgdGhpcy5wb3MgPSBzdGFydFBvcztcbiAgICAgIHRoaXMubGluZVN0YXJ0ID0gdGhpcy5pbnB1dC5sYXN0SW5kZXhPZihcIlxcblwiLCBzdGFydFBvcyAtIDEpICsgMTtcbiAgICAgIHRoaXMuY3VyTGluZSA9IHRoaXMuaW5wdXQuc2xpY2UoMCwgdGhpcy5saW5lU3RhcnQpLnNwbGl0KGxpbmVCcmVhaykubGVuZ3RoO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnBvcyA9IHRoaXMubGluZVN0YXJ0ID0gMDtcbiAgICAgIHRoaXMuY3VyTGluZSA9IDE7XG4gICAgfVxuXG4gICAgLy8gUHJvcGVydGllcyBvZiB0aGUgY3VycmVudCB0b2tlbjpcbiAgICAvLyBJdHMgdHlwZVxuICAgIHRoaXMudHlwZSA9IHR5cGVzLmVvZjtcbiAgICAvLyBGb3IgdG9rZW5zIHRoYXQgaW5jbHVkZSBtb3JlIGluZm9ybWF0aW9uIHRoYW4gdGhlaXIgdHlwZSwgdGhlIHZhbHVlXG4gICAgdGhpcy52YWx1ZSA9IG51bGw7XG4gICAgLy8gSXRzIHN0YXJ0IGFuZCBlbmQgb2Zmc2V0XG4gICAgdGhpcy5zdGFydCA9IHRoaXMuZW5kID0gdGhpcy5wb3M7XG4gICAgLy8gQW5kLCBpZiBsb2NhdGlvbnMgYXJlIHVzZWQsIHRoZSB7bGluZSwgY29sdW1ufSBvYmplY3RcbiAgICAvLyBjb3JyZXNwb25kaW5nIHRvIHRob3NlIG9mZnNldHNcbiAgICB0aGlzLnN0YXJ0TG9jID0gdGhpcy5lbmRMb2MgPSB0aGlzLmN1clBvc2l0aW9uKCk7XG5cbiAgICAvLyBQb3NpdGlvbiBpbmZvcm1hdGlvbiBmb3IgdGhlIHByZXZpb3VzIHRva2VuXG4gICAgdGhpcy5sYXN0VG9rRW5kTG9jID0gdGhpcy5sYXN0VG9rU3RhcnRMb2MgPSBudWxsO1xuICAgIHRoaXMubGFzdFRva1N0YXJ0ID0gdGhpcy5sYXN0VG9rRW5kID0gdGhpcy5wb3M7XG5cbiAgICAvLyBUaGUgY29udGV4dCBzdGFjayBpcyB1c2VkIHRvIHN1cGVyZmljaWFsbHkgdHJhY2sgc3ludGFjdGljXG4gICAgLy8gY29udGV4dCB0byBwcmVkaWN0IHdoZXRoZXIgYSByZWd1bGFyIGV4cHJlc3Npb24gaXMgYWxsb3dlZCBpbiBhXG4gICAgLy8gZ2l2ZW4gcG9zaXRpb24uXG4gICAgdGhpcy5jb250ZXh0ID0gdGhpcy5pbml0aWFsQ29udGV4dCgpO1xuICAgIHRoaXMuZXhwckFsbG93ZWQgPSB0cnVlO1xuXG4gICAgLy8gRmlndXJlIG91dCBpZiBpdCdzIGEgbW9kdWxlIGNvZGUuXG4gICAgdGhpcy5pbk1vZHVsZSA9IG9wdGlvbnMuc291cmNlVHlwZSA9PT0gXCJtb2R1bGVcIjtcbiAgICB0aGlzLnN0cmljdCA9IHRoaXMuaW5Nb2R1bGUgfHwgdGhpcy5zdHJpY3REaXJlY3RpdmUodGhpcy5wb3MpO1xuXG4gICAgLy8gVXNlZCB0byBzaWduaWZ5IHRoZSBzdGFydCBvZiBhIHBvdGVudGlhbCBhcnJvdyBmdW5jdGlvblxuICAgIHRoaXMucG90ZW50aWFsQXJyb3dBdCA9IC0xO1xuICAgIHRoaXMucG90ZW50aWFsQXJyb3dJbkZvckF3YWl0ID0gZmFsc2U7XG5cbiAgICAvLyBQb3NpdGlvbnMgdG8gZGVsYXllZC1jaGVjayB0aGF0IHlpZWxkL2F3YWl0IGRvZXMgbm90IGV4aXN0IGluIGRlZmF1bHQgcGFyYW1ldGVycy5cbiAgICB0aGlzLnlpZWxkUG9zID0gdGhpcy5hd2FpdFBvcyA9IHRoaXMuYXdhaXRJZGVudFBvcyA9IDA7XG4gICAgLy8gTGFiZWxzIGluIHNjb3BlLlxuICAgIHRoaXMubGFiZWxzID0gW107XG4gICAgLy8gVGh1cy1mYXIgdW5kZWZpbmVkIGV4cG9ydHMuXG4gICAgdGhpcy51bmRlZmluZWRFeHBvcnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuICAgIC8vIElmIGVuYWJsZWQsIHNraXAgbGVhZGluZyBoYXNoYmFuZyBsaW5lLlxuICAgIGlmICh0aGlzLnBvcyA9PT0gMCAmJiBvcHRpb25zLmFsbG93SGFzaEJhbmcgJiYgdGhpcy5pbnB1dC5zbGljZSgwLCAyKSA9PT0gXCIjIVwiKVxuICAgICAgeyB0aGlzLnNraXBMaW5lQ29tbWVudCgyKTsgfVxuXG4gICAgLy8gU2NvcGUgdHJhY2tpbmcgZm9yIGR1cGxpY2F0ZSB2YXJpYWJsZSBuYW1lcyAoc2VlIHNjb3BlLmpzKVxuICAgIHRoaXMuc2NvcGVTdGFjayA9IFtdO1xuICAgIHRoaXMuZW50ZXJTY29wZShTQ09QRV9UT1ApO1xuXG4gICAgLy8gRm9yIFJlZ0V4cCB2YWxpZGF0aW9uXG4gICAgdGhpcy5yZWdleHBTdGF0ZSA9IG51bGw7XG5cbiAgICAvLyBUaGUgc3RhY2sgb2YgcHJpdmF0ZSBuYW1lcy5cbiAgICAvLyBFYWNoIGVsZW1lbnQgaGFzIHR3byBwcm9wZXJ0aWVzOiAnZGVjbGFyZWQnIGFuZCAndXNlZCcuXG4gICAgLy8gV2hlbiBpdCBleGl0ZWQgZnJvbSB0aGUgb3V0ZXJtb3N0IGNsYXNzIGRlZmluaXRpb24sIGFsbCB1c2VkIHByaXZhdGUgbmFtZXMgbXVzdCBiZSBkZWNsYXJlZC5cbiAgICB0aGlzLnByaXZhdGVOYW1lU3RhY2sgPSBbXTtcbiAgfTtcblxuICB2YXIgcHJvdG90eXBlQWNjZXNzb3JzID0geyBpbkZ1bmN0aW9uOiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9LGluR2VuZXJhdG9yOiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9LGluQXN5bmM6IHsgY29uZmlndXJhYmxlOiB0cnVlIH0sYWxsb3dTdXBlcjogeyBjb25maWd1cmFibGU6IHRydWUgfSxhbGxvd0RpcmVjdFN1cGVyOiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9LHRyZWF0RnVuY3Rpb25zQXNWYXI6IHsgY29uZmlndXJhYmxlOiB0cnVlIH0saW5Ob25BcnJvd0Z1bmN0aW9uOiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH07XG5cbiAgUGFyc2VyLnByb3RvdHlwZS5wYXJzZSA9IGZ1bmN0aW9uIHBhcnNlICgpIHtcbiAgICB2YXIgbm9kZSA9IHRoaXMub3B0aW9ucy5wcm9ncmFtIHx8IHRoaXMuc3RhcnROb2RlKCk7XG4gICAgdGhpcy5uZXh0VG9rZW4oKTtcbiAgICByZXR1cm4gdGhpcy5wYXJzZVRvcExldmVsKG5vZGUpXG4gIH07XG5cbiAgcHJvdG90eXBlQWNjZXNzb3JzLmluRnVuY3Rpb24uZ2V0ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gKHRoaXMuY3VycmVudFZhclNjb3BlKCkuZmxhZ3MgJiBTQ09QRV9GVU5DVElPTikgPiAwIH07XG4gIHByb3RvdHlwZUFjY2Vzc29ycy5pbkdlbmVyYXRvci5nZXQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAodGhpcy5jdXJyZW50VmFyU2NvcGUoKS5mbGFncyAmIFNDT1BFX0dFTkVSQVRPUikgPiAwICYmICF0aGlzLmN1cnJlbnRWYXJTY29wZSgpLmluQ2xhc3NGaWVsZEluaXQgfTtcbiAgcHJvdG90eXBlQWNjZXNzb3JzLmluQXN5bmMuZ2V0ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gKHRoaXMuY3VycmVudFZhclNjb3BlKCkuZmxhZ3MgJiBTQ09QRV9BU1lOQykgPiAwICYmICF0aGlzLmN1cnJlbnRWYXJTY29wZSgpLmluQ2xhc3NGaWVsZEluaXQgfTtcbiAgcHJvdG90eXBlQWNjZXNzb3JzLmFsbG93U3VwZXIuZ2V0ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciByZWYgPSB0aGlzLmN1cnJlbnRUaGlzU2NvcGUoKTtcbiAgICAgIHZhciBmbGFncyA9IHJlZi5mbGFncztcbiAgICAgIHZhciBpbkNsYXNzRmllbGRJbml0ID0gcmVmLmluQ2xhc3NGaWVsZEluaXQ7XG4gICAgcmV0dXJuIChmbGFncyAmIFNDT1BFX1NVUEVSKSA+IDAgfHwgaW5DbGFzc0ZpZWxkSW5pdFxuICB9O1xuICBwcm90b3R5cGVBY2Nlc3NvcnMuYWxsb3dEaXJlY3RTdXBlci5nZXQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAodGhpcy5jdXJyZW50VGhpc1Njb3BlKCkuZmxhZ3MgJiBTQ09QRV9ESVJFQ1RfU1VQRVIpID4gMCB9O1xuICBwcm90b3R5cGVBY2Nlc3NvcnMudHJlYXRGdW5jdGlvbnNBc1Zhci5nZXQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLnRyZWF0RnVuY3Rpb25zQXNWYXJJblNjb3BlKHRoaXMuY3VycmVudFNjb3BlKCkpIH07XG4gIHByb3RvdHlwZUFjY2Vzc29ycy5pbk5vbkFycm93RnVuY3Rpb24uZ2V0ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciByZWYgPSB0aGlzLmN1cnJlbnRUaGlzU2NvcGUoKTtcbiAgICAgIHZhciBmbGFncyA9IHJlZi5mbGFncztcbiAgICAgIHZhciBpbkNsYXNzRmllbGRJbml0ID0gcmVmLmluQ2xhc3NGaWVsZEluaXQ7XG4gICAgcmV0dXJuIChmbGFncyAmIFNDT1BFX0ZVTkNUSU9OKSA+IDAgfHwgaW5DbGFzc0ZpZWxkSW5pdFxuICB9O1xuXG4gIFBhcnNlci5leHRlbmQgPSBmdW5jdGlvbiBleHRlbmQgKCkge1xuICAgICAgdmFyIHBsdWdpbnMgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICAgIHdoaWxlICggbGVuLS0gKSBwbHVnaW5zWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuIF07XG5cbiAgICB2YXIgY2xzID0gdGhpcztcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBsdWdpbnMubGVuZ3RoOyBpKyspIHsgY2xzID0gcGx1Z2luc1tpXShjbHMpOyB9XG4gICAgcmV0dXJuIGNsc1xuICB9O1xuXG4gIFBhcnNlci5wYXJzZSA9IGZ1bmN0aW9uIHBhcnNlIChpbnB1dCwgb3B0aW9ucykge1xuICAgIHJldHVybiBuZXcgdGhpcyhvcHRpb25zLCBpbnB1dCkucGFyc2UoKVxuICB9O1xuXG4gIFBhcnNlci5wYXJzZUV4cHJlc3Npb25BdCA9IGZ1bmN0aW9uIHBhcnNlRXhwcmVzc2lvbkF0IChpbnB1dCwgcG9zLCBvcHRpb25zKSB7XG4gICAgdmFyIHBhcnNlciA9IG5ldyB0aGlzKG9wdGlvbnMsIGlucHV0LCBwb3MpO1xuICAgIHBhcnNlci5uZXh0VG9rZW4oKTtcbiAgICByZXR1cm4gcGFyc2VyLnBhcnNlRXhwcmVzc2lvbigpXG4gIH07XG5cbiAgUGFyc2VyLnRva2VuaXplciA9IGZ1bmN0aW9uIHRva2VuaXplciAoaW5wdXQsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gbmV3IHRoaXMob3B0aW9ucywgaW5wdXQpXG4gIH07XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoIFBhcnNlci5wcm90b3R5cGUsIHByb3RvdHlwZUFjY2Vzc29ycyApO1xuXG4gIHZhciBwcCA9IFBhcnNlci5wcm90b3R5cGU7XG5cbiAgLy8gIyMgUGFyc2VyIHV0aWxpdGllc1xuXG4gIHZhciBsaXRlcmFsID0gL14oPzonKCg/OlxcXFwufFteJ1xcXFxdKSo/KSd8XCIoKD86XFxcXC58W15cIlxcXFxdKSo/KVwiKS87XG4gIHBwLnN0cmljdERpcmVjdGl2ZSA9IGZ1bmN0aW9uKHN0YXJ0KSB7XG4gICAgZm9yICg7Oykge1xuICAgICAgLy8gVHJ5IHRvIGZpbmQgc3RyaW5nIGxpdGVyYWwuXG4gICAgICBza2lwV2hpdGVTcGFjZS5sYXN0SW5kZXggPSBzdGFydDtcbiAgICAgIHN0YXJ0ICs9IHNraXBXaGl0ZVNwYWNlLmV4ZWModGhpcy5pbnB1dClbMF0ubGVuZ3RoO1xuICAgICAgdmFyIG1hdGNoID0gbGl0ZXJhbC5leGVjKHRoaXMuaW5wdXQuc2xpY2Uoc3RhcnQpKTtcbiAgICAgIGlmICghbWF0Y2gpIHsgcmV0dXJuIGZhbHNlIH1cbiAgICAgIGlmICgobWF0Y2hbMV0gfHwgbWF0Y2hbMl0pID09PSBcInVzZSBzdHJpY3RcIikge1xuICAgICAgICBza2lwV2hpdGVTcGFjZS5sYXN0SW5kZXggPSBzdGFydCArIG1hdGNoWzBdLmxlbmd0aDtcbiAgICAgICAgdmFyIHNwYWNlQWZ0ZXIgPSBza2lwV2hpdGVTcGFjZS5leGVjKHRoaXMuaW5wdXQpLCBlbmQgPSBzcGFjZUFmdGVyLmluZGV4ICsgc3BhY2VBZnRlclswXS5sZW5ndGg7XG4gICAgICAgIHZhciBuZXh0ID0gdGhpcy5pbnB1dC5jaGFyQXQoZW5kKTtcbiAgICAgICAgcmV0dXJuIG5leHQgPT09IFwiO1wiIHx8IG5leHQgPT09IFwifVwiIHx8XG4gICAgICAgICAgKGxpbmVCcmVhay50ZXN0KHNwYWNlQWZ0ZXJbMF0pICYmXG4gICAgICAgICAgICEoL1soYC5bK1xcLS8qJTw+PSw/XiZdLy50ZXN0KG5leHQpIHx8IG5leHQgPT09IFwiIVwiICYmIHRoaXMuaW5wdXQuY2hhckF0KGVuZCArIDEpID09PSBcIj1cIikpXG4gICAgICB9XG4gICAgICBzdGFydCArPSBtYXRjaFswXS5sZW5ndGg7XG5cbiAgICAgIC8vIFNraXAgc2VtaWNvbG9uLCBpZiBhbnkuXG4gICAgICBza2lwV2hpdGVTcGFjZS5sYXN0SW5kZXggPSBzdGFydDtcbiAgICAgIHN0YXJ0ICs9IHNraXBXaGl0ZVNwYWNlLmV4ZWModGhpcy5pbnB1dClbMF0ubGVuZ3RoO1xuICAgICAgaWYgKHRoaXMuaW5wdXRbc3RhcnRdID09PSBcIjtcIilcbiAgICAgICAgeyBzdGFydCsrOyB9XG4gICAgfVxuICB9O1xuXG4gIC8vIFByZWRpY2F0ZSB0aGF0IHRlc3RzIHdoZXRoZXIgdGhlIG5leHQgdG9rZW4gaXMgb2YgdGhlIGdpdmVuXG4gIC8vIHR5cGUsIGFuZCBpZiB5ZXMsIGNvbnN1bWVzIGl0IGFzIGEgc2lkZSBlZmZlY3QuXG5cbiAgcHAuZWF0ID0gZnVuY3Rpb24odHlwZSkge1xuICAgIGlmICh0aGlzLnR5cGUgPT09IHR5cGUpIHtcbiAgICAgIHRoaXMubmV4dCgpO1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICB9O1xuXG4gIC8vIFRlc3RzIHdoZXRoZXIgcGFyc2VkIHRva2VuIGlzIGEgY29udGV4dHVhbCBrZXl3b3JkLlxuXG4gIHBwLmlzQ29udGV4dHVhbCA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICByZXR1cm4gdGhpcy50eXBlID09PSB0eXBlcy5uYW1lICYmIHRoaXMudmFsdWUgPT09IG5hbWUgJiYgIXRoaXMuY29udGFpbnNFc2NcbiAgfTtcblxuICAvLyBDb25zdW1lcyBjb250ZXh0dWFsIGtleXdvcmQgaWYgcG9zc2libGUuXG5cbiAgcHAuZWF0Q29udGV4dHVhbCA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICBpZiAoIXRoaXMuaXNDb250ZXh0dWFsKG5hbWUpKSB7IHJldHVybiBmYWxzZSB9XG4gICAgdGhpcy5uZXh0KCk7XG4gICAgcmV0dXJuIHRydWVcbiAgfTtcblxuICAvLyBBc3NlcnRzIHRoYXQgZm9sbG93aW5nIHRva2VuIGlzIGdpdmVuIGNvbnRleHR1YWwga2V5d29yZC5cblxuICBwcC5leHBlY3RDb250ZXh0dWFsID0gZnVuY3Rpb24obmFtZSkge1xuICAgIGlmICghdGhpcy5lYXRDb250ZXh0dWFsKG5hbWUpKSB7IHRoaXMudW5leHBlY3RlZCgpOyB9XG4gIH07XG5cbiAgLy8gVGVzdCB3aGV0aGVyIGEgc2VtaWNvbG9uIGNhbiBiZSBpbnNlcnRlZCBhdCB0aGUgY3VycmVudCBwb3NpdGlvbi5cblxuICBwcC5jYW5JbnNlcnRTZW1pY29sb24gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy50eXBlID09PSB0eXBlcy5lb2YgfHxcbiAgICAgIHRoaXMudHlwZSA9PT0gdHlwZXMuYnJhY2VSIHx8XG4gICAgICBsaW5lQnJlYWsudGVzdCh0aGlzLmlucHV0LnNsaWNlKHRoaXMubGFzdFRva0VuZCwgdGhpcy5zdGFydCkpXG4gIH07XG5cbiAgcHAuaW5zZXJ0U2VtaWNvbG9uID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMuY2FuSW5zZXJ0U2VtaWNvbG9uKCkpIHtcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMub25JbnNlcnRlZFNlbWljb2xvbilcbiAgICAgICAgeyB0aGlzLm9wdGlvbnMub25JbnNlcnRlZFNlbWljb2xvbih0aGlzLmxhc3RUb2tFbmQsIHRoaXMubGFzdFRva0VuZExvYyk7IH1cbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICB9O1xuXG4gIC8vIENvbnN1bWUgYSBzZW1pY29sb24sIG9yLCBmYWlsaW5nIHRoYXQsIHNlZSBpZiB3ZSBhcmUgYWxsb3dlZCB0b1xuICAvLyBwcmV0ZW5kIHRoYXQgdGhlcmUgaXMgYSBzZW1pY29sb24gYXQgdGhpcyBwb3NpdGlvbi5cblxuICBwcC5zZW1pY29sb24gPSBmdW5jdGlvbigpIHtcbiAgICBpZiAoIXRoaXMuZWF0KHR5cGVzLnNlbWkpICYmICF0aGlzLmluc2VydFNlbWljb2xvbigpKSB7IHRoaXMudW5leHBlY3RlZCgpOyB9XG4gIH07XG5cbiAgcHAuYWZ0ZXJUcmFpbGluZ0NvbW1hID0gZnVuY3Rpb24odG9rVHlwZSwgbm90TmV4dCkge1xuICAgIGlmICh0aGlzLnR5cGUgPT09IHRva1R5cGUpIHtcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMub25UcmFpbGluZ0NvbW1hKVxuICAgICAgICB7IHRoaXMub3B0aW9ucy5vblRyYWlsaW5nQ29tbWEodGhpcy5sYXN0VG9rU3RhcnQsIHRoaXMubGFzdFRva1N0YXJ0TG9jKTsgfVxuICAgICAgaWYgKCFub3ROZXh0KVxuICAgICAgICB7IHRoaXMubmV4dCgpOyB9XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgfTtcblxuICAvLyBFeHBlY3QgYSB0b2tlbiBvZiBhIGdpdmVuIHR5cGUuIElmIGZvdW5kLCBjb25zdW1lIGl0LCBvdGhlcndpc2UsXG4gIC8vIHJhaXNlIGFuIHVuZXhwZWN0ZWQgdG9rZW4gZXJyb3IuXG5cbiAgcHAuZXhwZWN0ID0gZnVuY3Rpb24odHlwZSkge1xuICAgIHRoaXMuZWF0KHR5cGUpIHx8IHRoaXMudW5leHBlY3RlZCgpO1xuICB9O1xuXG4gIC8vIFJhaXNlIGFuIHVuZXhwZWN0ZWQgdG9rZW4gZXJyb3IuXG5cbiAgcHAudW5leHBlY3RlZCA9IGZ1bmN0aW9uKHBvcykge1xuICAgIHRoaXMucmFpc2UocG9zICE9IG51bGwgPyBwb3MgOiB0aGlzLnN0YXJ0LCBcIlVuZXhwZWN0ZWQgdG9rZW5cIik7XG4gIH07XG5cbiAgZnVuY3Rpb24gRGVzdHJ1Y3R1cmluZ0Vycm9ycygpIHtcbiAgICB0aGlzLnNob3J0aGFuZEFzc2lnbiA9XG4gICAgdGhpcy50cmFpbGluZ0NvbW1hID1cbiAgICB0aGlzLnBhcmVudGhlc2l6ZWRBc3NpZ24gPVxuICAgIHRoaXMucGFyZW50aGVzaXplZEJpbmQgPVxuICAgIHRoaXMuZG91YmxlUHJvdG8gPVxuICAgICAgLTE7XG4gIH1cblxuICBwcC5jaGVja1BhdHRlcm5FcnJvcnMgPSBmdW5jdGlvbihyZWZEZXN0cnVjdHVyaW5nRXJyb3JzLCBpc0Fzc2lnbikge1xuICAgIGlmICghcmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycykgeyByZXR1cm4gfVxuICAgIGlmIChyZWZEZXN0cnVjdHVyaW5nRXJyb3JzLnRyYWlsaW5nQ29tbWEgPiAtMSlcbiAgICAgIHsgdGhpcy5yYWlzZVJlY292ZXJhYmxlKHJlZkRlc3RydWN0dXJpbmdFcnJvcnMudHJhaWxpbmdDb21tYSwgXCJDb21tYSBpcyBub3QgcGVybWl0dGVkIGFmdGVyIHRoZSByZXN0IGVsZW1lbnRcIik7IH1cbiAgICB2YXIgcGFyZW5zID0gaXNBc3NpZ24gPyByZWZEZXN0cnVjdHVyaW5nRXJyb3JzLnBhcmVudGhlc2l6ZWRBc3NpZ24gOiByZWZEZXN0cnVjdHVyaW5nRXJyb3JzLnBhcmVudGhlc2l6ZWRCaW5kO1xuICAgIGlmIChwYXJlbnMgPiAtMSkgeyB0aGlzLnJhaXNlUmVjb3ZlcmFibGUocGFyZW5zLCBcIlBhcmVudGhlc2l6ZWQgcGF0dGVyblwiKTsgfVxuICB9O1xuXG4gIHBwLmNoZWNrRXhwcmVzc2lvbkVycm9ycyA9IGZ1bmN0aW9uKHJlZkRlc3RydWN0dXJpbmdFcnJvcnMsIGFuZFRocm93KSB7XG4gICAgaWYgKCFyZWZEZXN0cnVjdHVyaW5nRXJyb3JzKSB7IHJldHVybiBmYWxzZSB9XG4gICAgdmFyIHNob3J0aGFuZEFzc2lnbiA9IHJlZkRlc3RydWN0dXJpbmdFcnJvcnMuc2hvcnRoYW5kQXNzaWduO1xuICAgIHZhciBkb3VibGVQcm90byA9IHJlZkRlc3RydWN0dXJpbmdFcnJvcnMuZG91YmxlUHJvdG87XG4gICAgaWYgKCFhbmRUaHJvdykgeyByZXR1cm4gc2hvcnRoYW5kQXNzaWduID49IDAgfHwgZG91YmxlUHJvdG8gPj0gMCB9XG4gICAgaWYgKHNob3J0aGFuZEFzc2lnbiA+PSAwKVxuICAgICAgeyB0aGlzLnJhaXNlKHNob3J0aGFuZEFzc2lnbiwgXCJTaG9ydGhhbmQgcHJvcGVydHkgYXNzaWdubWVudHMgYXJlIHZhbGlkIG9ubHkgaW4gZGVzdHJ1Y3R1cmluZyBwYXR0ZXJuc1wiKTsgfVxuICAgIGlmIChkb3VibGVQcm90byA+PSAwKVxuICAgICAgeyB0aGlzLnJhaXNlUmVjb3ZlcmFibGUoZG91YmxlUHJvdG8sIFwiUmVkZWZpbml0aW9uIG9mIF9fcHJvdG9fXyBwcm9wZXJ0eVwiKTsgfVxuICB9O1xuXG4gIHBwLmNoZWNrWWllbGRBd2FpdEluRGVmYXVsdFBhcmFtcyA9IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLnlpZWxkUG9zICYmICghdGhpcy5hd2FpdFBvcyB8fCB0aGlzLnlpZWxkUG9zIDwgdGhpcy5hd2FpdFBvcykpXG4gICAgICB7IHRoaXMucmFpc2UodGhpcy55aWVsZFBvcywgXCJZaWVsZCBleHByZXNzaW9uIGNhbm5vdCBiZSBhIGRlZmF1bHQgdmFsdWVcIik7IH1cbiAgICBpZiAodGhpcy5hd2FpdFBvcylcbiAgICAgIHsgdGhpcy5yYWlzZSh0aGlzLmF3YWl0UG9zLCBcIkF3YWl0IGV4cHJlc3Npb24gY2Fubm90IGJlIGEgZGVmYXVsdCB2YWx1ZVwiKTsgfVxuICB9O1xuXG4gIHBwLmlzU2ltcGxlQXNzaWduVGFyZ2V0ID0gZnVuY3Rpb24oZXhwcikge1xuICAgIGlmIChleHByLnR5cGUgPT09IFwiUGFyZW50aGVzaXplZEV4cHJlc3Npb25cIilcbiAgICAgIHsgcmV0dXJuIHRoaXMuaXNTaW1wbGVBc3NpZ25UYXJnZXQoZXhwci5leHByZXNzaW9uKSB9XG4gICAgcmV0dXJuIGV4cHIudHlwZSA9PT0gXCJJZGVudGlmaWVyXCIgfHwgZXhwci50eXBlID09PSBcIk1lbWJlckV4cHJlc3Npb25cIlxuICB9O1xuXG4gIHZhciBwcCQxID0gUGFyc2VyLnByb3RvdHlwZTtcblxuICAvLyAjIyMgU3RhdGVtZW50IHBhcnNpbmdcblxuICAvLyBQYXJzZSBhIHByb2dyYW0uIEluaXRpYWxpemVzIHRoZSBwYXJzZXIsIHJlYWRzIGFueSBudW1iZXIgb2ZcbiAgLy8gc3RhdGVtZW50cywgYW5kIHdyYXBzIHRoZW0gaW4gYSBQcm9ncmFtIG5vZGUuICBPcHRpb25hbGx5IHRha2VzIGFcbiAgLy8gYHByb2dyYW1gIGFyZ3VtZW50LiAgSWYgcHJlc2VudCwgdGhlIHN0YXRlbWVudHMgd2lsbCBiZSBhcHBlbmRlZFxuICAvLyB0byBpdHMgYm9keSBpbnN0ZWFkIG9mIGNyZWF0aW5nIGEgbmV3IG5vZGUuXG5cbiAgcHAkMS5wYXJzZVRvcExldmVsID0gZnVuY3Rpb24obm9kZSkge1xuICAgIHZhciBleHBvcnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICBpZiAoIW5vZGUuYm9keSkgeyBub2RlLmJvZHkgPSBbXTsgfVxuICAgIHdoaWxlICh0aGlzLnR5cGUgIT09IHR5cGVzLmVvZikge1xuICAgICAgdmFyIHN0bXQgPSB0aGlzLnBhcnNlU3RhdGVtZW50KG51bGwsIHRydWUsIGV4cG9ydHMpO1xuICAgICAgbm9kZS5ib2R5LnB1c2goc3RtdCk7XG4gICAgfVxuICAgIGlmICh0aGlzLmluTW9kdWxlKVxuICAgICAgeyBmb3IgKHZhciBpID0gMCwgbGlzdCA9IE9iamVjdC5rZXlzKHRoaXMudW5kZWZpbmVkRXhwb3J0cyk7IGkgPCBsaXN0Lmxlbmd0aDsgaSArPSAxKVxuICAgICAgICB7XG4gICAgICAgICAgdmFyIG5hbWUgPSBsaXN0W2ldO1xuXG4gICAgICAgICAgdGhpcy5yYWlzZVJlY292ZXJhYmxlKHRoaXMudW5kZWZpbmVkRXhwb3J0c1tuYW1lXS5zdGFydCwgKFwiRXhwb3J0ICdcIiArIG5hbWUgKyBcIicgaXMgbm90IGRlZmluZWRcIikpO1xuICAgICAgICB9IH1cbiAgICB0aGlzLmFkYXB0RGlyZWN0aXZlUHJvbG9ndWUobm9kZS5ib2R5KTtcbiAgICB0aGlzLm5leHQoKTtcbiAgICBub2RlLnNvdXJjZVR5cGUgPSB0aGlzLm9wdGlvbnMuc291cmNlVHlwZTtcbiAgICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsIFwiUHJvZ3JhbVwiKVxuICB9O1xuXG4gIHZhciBsb29wTGFiZWwgPSB7a2luZDogXCJsb29wXCJ9LCBzd2l0Y2hMYWJlbCA9IHtraW5kOiBcInN3aXRjaFwifTtcblxuICBwcCQxLmlzTGV0ID0gZnVuY3Rpb24oY29udGV4dCkge1xuICAgIGlmICh0aGlzLm9wdGlvbnMuZWNtYVZlcnNpb24gPCA2IHx8ICF0aGlzLmlzQ29udGV4dHVhbChcImxldFwiKSkgeyByZXR1cm4gZmFsc2UgfVxuICAgIHNraXBXaGl0ZVNwYWNlLmxhc3RJbmRleCA9IHRoaXMucG9zO1xuICAgIHZhciBza2lwID0gc2tpcFdoaXRlU3BhY2UuZXhlYyh0aGlzLmlucHV0KTtcbiAgICB2YXIgbmV4dCA9IHRoaXMucG9zICsgc2tpcFswXS5sZW5ndGgsIG5leHRDaCA9IHRoaXMuaW5wdXQuY2hhckNvZGVBdChuZXh0KTtcbiAgICAvLyBGb3IgYW1iaWd1b3VzIGNhc2VzLCBkZXRlcm1pbmUgaWYgYSBMZXhpY2FsRGVjbGFyYXRpb24gKG9yIG9ubHkgYVxuICAgIC8vIFN0YXRlbWVudCkgaXMgYWxsb3dlZCBoZXJlLiBJZiBjb250ZXh0IGlzIG5vdCBlbXB0eSB0aGVuIG9ubHkgYSBTdGF0ZW1lbnRcbiAgICAvLyBpcyBhbGxvd2VkLiBIb3dldmVyLCBgbGV0IFtgIGlzIGFuIGV4cGxpY2l0IG5lZ2F0aXZlIGxvb2thaGVhZCBmb3JcbiAgICAvLyBFeHByZXNzaW9uU3RhdGVtZW50LCBzbyBzcGVjaWFsLWNhc2UgaXQgZmlyc3QuXG4gICAgaWYgKG5leHRDaCA9PT0gOTEgfHwgbmV4dENoID09PSA5MiB8fCBuZXh0Q2ggPiAweGQ3ZmYgJiYgbmV4dENoIDwgMHhkYzAwKSB7IHJldHVybiB0cnVlIH0gLy8gJ1snLCAnLycsIGFzdHJhbFxuICAgIGlmIChjb250ZXh0KSB7IHJldHVybiBmYWxzZSB9XG5cbiAgICBpZiAobmV4dENoID09PSAxMjMpIHsgcmV0dXJuIHRydWUgfSAvLyAneydcbiAgICBpZiAoaXNJZGVudGlmaWVyU3RhcnQobmV4dENoLCB0cnVlKSkge1xuICAgICAgdmFyIHBvcyA9IG5leHQgKyAxO1xuICAgICAgd2hpbGUgKGlzSWRlbnRpZmllckNoYXIobmV4dENoID0gdGhpcy5pbnB1dC5jaGFyQ29kZUF0KHBvcyksIHRydWUpKSB7ICsrcG9zOyB9XG4gICAgICBpZiAobmV4dENoID09PSA5MiB8fCBuZXh0Q2ggPiAweGQ3ZmYgJiYgbmV4dENoIDwgMHhkYzAwKSB7IHJldHVybiB0cnVlIH1cbiAgICAgIHZhciBpZGVudCA9IHRoaXMuaW5wdXQuc2xpY2UobmV4dCwgcG9zKTtcbiAgICAgIGlmICgha2V5d29yZFJlbGF0aW9uYWxPcGVyYXRvci50ZXN0KGlkZW50KSkgeyByZXR1cm4gdHJ1ZSB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZVxuICB9O1xuXG4gIC8vIGNoZWNrICdhc3luYyBbbm8gTGluZVRlcm1pbmF0b3IgaGVyZV0gZnVuY3Rpb24nXG4gIC8vIC0gJ2FzeW5jIC8qZm9vKi8gZnVuY3Rpb24nIGlzIE9LLlxuICAvLyAtICdhc3luYyAvKlxcbiovIGZ1bmN0aW9uJyBpcyBpbnZhbGlkLlxuICBwcCQxLmlzQXN5bmNGdW5jdGlvbiA9IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLm9wdGlvbnMuZWNtYVZlcnNpb24gPCA4IHx8ICF0aGlzLmlzQ29udGV4dHVhbChcImFzeW5jXCIpKVxuICAgICAgeyByZXR1cm4gZmFsc2UgfVxuXG4gICAgc2tpcFdoaXRlU3BhY2UubGFzdEluZGV4ID0gdGhpcy5wb3M7XG4gICAgdmFyIHNraXAgPSBza2lwV2hpdGVTcGFjZS5leGVjKHRoaXMuaW5wdXQpO1xuICAgIHZhciBuZXh0ID0gdGhpcy5wb3MgKyBza2lwWzBdLmxlbmd0aCwgYWZ0ZXI7XG4gICAgcmV0dXJuICFsaW5lQnJlYWsudGVzdCh0aGlzLmlucHV0LnNsaWNlKHRoaXMucG9zLCBuZXh0KSkgJiZcbiAgICAgIHRoaXMuaW5wdXQuc2xpY2UobmV4dCwgbmV4dCArIDgpID09PSBcImZ1bmN0aW9uXCIgJiZcbiAgICAgIChuZXh0ICsgOCA9PT0gdGhpcy5pbnB1dC5sZW5ndGggfHxcbiAgICAgICAhKGlzSWRlbnRpZmllckNoYXIoYWZ0ZXIgPSB0aGlzLmlucHV0LmNoYXJDb2RlQXQobmV4dCArIDgpKSB8fCBhZnRlciA+IDB4ZDdmZiAmJiBhZnRlciA8IDB4ZGMwMCkpXG4gIH07XG5cbiAgLy8gUGFyc2UgYSBzaW5nbGUgc3RhdGVtZW50LlxuICAvL1xuICAvLyBJZiBleHBlY3RpbmcgYSBzdGF0ZW1lbnQgYW5kIGZpbmRpbmcgYSBzbGFzaCBvcGVyYXRvciwgcGFyc2UgYVxuICAvLyByZWd1bGFyIGV4cHJlc3Npb24gbGl0ZXJhbC4gVGhpcyBpcyB0byBoYW5kbGUgY2FzZXMgbGlrZVxuICAvLyBgaWYgKGZvbykgL2JsYWgvLmV4ZWMoZm9vKWAsIHdoZXJlIGxvb2tpbmcgYXQgdGhlIHByZXZpb3VzIHRva2VuXG4gIC8vIGRvZXMgbm90IGhlbHAuXG5cbiAgcHAkMS5wYXJzZVN0YXRlbWVudCA9IGZ1bmN0aW9uKGNvbnRleHQsIHRvcExldmVsLCBleHBvcnRzKSB7XG4gICAgdmFyIHN0YXJ0dHlwZSA9IHRoaXMudHlwZSwgbm9kZSA9IHRoaXMuc3RhcnROb2RlKCksIGtpbmQ7XG5cbiAgICBpZiAodGhpcy5pc0xldChjb250ZXh0KSkge1xuICAgICAgc3RhcnR0eXBlID0gdHlwZXMuX3ZhcjtcbiAgICAgIGtpbmQgPSBcImxldFwiO1xuICAgIH1cblxuICAgIC8vIE1vc3QgdHlwZXMgb2Ygc3RhdGVtZW50cyBhcmUgcmVjb2duaXplZCBieSB0aGUga2V5d29yZCB0aGV5XG4gICAgLy8gc3RhcnQgd2l0aC4gTWFueSBhcmUgdHJpdmlhbCB0byBwYXJzZSwgc29tZSByZXF1aXJlIGEgYml0IG9mXG4gICAgLy8gY29tcGxleGl0eS5cblxuICAgIHN3aXRjaCAoc3RhcnR0eXBlKSB7XG4gICAgY2FzZSB0eXBlcy5fYnJlYWs6IGNhc2UgdHlwZXMuX2NvbnRpbnVlOiByZXR1cm4gdGhpcy5wYXJzZUJyZWFrQ29udGludWVTdGF0ZW1lbnQobm9kZSwgc3RhcnR0eXBlLmtleXdvcmQpXG4gICAgY2FzZSB0eXBlcy5fZGVidWdnZXI6IHJldHVybiB0aGlzLnBhcnNlRGVidWdnZXJTdGF0ZW1lbnQobm9kZSlcbiAgICBjYXNlIHR5cGVzLl9kbzogcmV0dXJuIHRoaXMucGFyc2VEb1N0YXRlbWVudChub2RlKVxuICAgIGNhc2UgdHlwZXMuX2ZvcjogcmV0dXJuIHRoaXMucGFyc2VGb3JTdGF0ZW1lbnQobm9kZSlcbiAgICBjYXNlIHR5cGVzLl9mdW5jdGlvbjpcbiAgICAgIC8vIEZ1bmN0aW9uIGFzIHNvbGUgYm9keSBvZiBlaXRoZXIgYW4gaWYgc3RhdGVtZW50IG9yIGEgbGFiZWxlZCBzdGF0ZW1lbnRcbiAgICAgIC8vIHdvcmtzLCBidXQgbm90IHdoZW4gaXQgaXMgcGFydCBvZiBhIGxhYmVsZWQgc3RhdGVtZW50IHRoYXQgaXMgdGhlIHNvbGVcbiAgICAgIC8vIGJvZHkgb2YgYW4gaWYgc3RhdGVtZW50LlxuICAgICAgaWYgKChjb250ZXh0ICYmICh0aGlzLnN0cmljdCB8fCBjb250ZXh0ICE9PSBcImlmXCIgJiYgY29udGV4dCAhPT0gXCJsYWJlbFwiKSkgJiYgdGhpcy5vcHRpb25zLmVjbWFWZXJzaW9uID49IDYpIHsgdGhpcy51bmV4cGVjdGVkKCk7IH1cbiAgICAgIHJldHVybiB0aGlzLnBhcnNlRnVuY3Rpb25TdGF0ZW1lbnQobm9kZSwgZmFsc2UsICFjb250ZXh0KVxuICAgIGNhc2UgdHlwZXMuX2NsYXNzOlxuICAgICAgaWYgKGNvbnRleHQpIHsgdGhpcy51bmV4cGVjdGVkKCk7IH1cbiAgICAgIHJldHVybiB0aGlzLnBhcnNlQ2xhc3Mobm9kZSwgdHJ1ZSlcbiAgICBjYXNlIHR5cGVzLl9pZjogcmV0dXJuIHRoaXMucGFyc2VJZlN0YXRlbWVudChub2RlKVxuICAgIGNhc2UgdHlwZXMuX3JldHVybjogcmV0dXJuIHRoaXMucGFyc2VSZXR1cm5TdGF0ZW1lbnQobm9kZSlcbiAgICBjYXNlIHR5cGVzLl9zd2l0Y2g6IHJldHVybiB0aGlzLnBhcnNlU3dpdGNoU3RhdGVtZW50KG5vZGUpXG4gICAgY2FzZSB0eXBlcy5fdGhyb3c6IHJldHVybiB0aGlzLnBhcnNlVGhyb3dTdGF0ZW1lbnQobm9kZSlcbiAgICBjYXNlIHR5cGVzLl90cnk6IHJldHVybiB0aGlzLnBhcnNlVHJ5U3RhdGVtZW50KG5vZGUpXG4gICAgY2FzZSB0eXBlcy5fY29uc3Q6IGNhc2UgdHlwZXMuX3ZhcjpcbiAgICAgIGtpbmQgPSBraW5kIHx8IHRoaXMudmFsdWU7XG4gICAgICBpZiAoY29udGV4dCAmJiBraW5kICE9PSBcInZhclwiKSB7IHRoaXMudW5leHBlY3RlZCgpOyB9XG4gICAgICByZXR1cm4gdGhpcy5wYXJzZVZhclN0YXRlbWVudChub2RlLCBraW5kKVxuICAgIGNhc2UgdHlwZXMuX3doaWxlOiByZXR1cm4gdGhpcy5wYXJzZVdoaWxlU3RhdGVtZW50KG5vZGUpXG4gICAgY2FzZSB0eXBlcy5fd2l0aDogcmV0dXJuIHRoaXMucGFyc2VXaXRoU3RhdGVtZW50KG5vZGUpXG4gICAgY2FzZSB0eXBlcy5icmFjZUw6IHJldHVybiB0aGlzLnBhcnNlQmxvY2sodHJ1ZSwgbm9kZSlcbiAgICBjYXNlIHR5cGVzLnNlbWk6IHJldHVybiB0aGlzLnBhcnNlRW1wdHlTdGF0ZW1lbnQobm9kZSlcbiAgICBjYXNlIHR5cGVzLl9leHBvcnQ6XG4gICAgY2FzZSB0eXBlcy5faW1wb3J0OlxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5lY21hVmVyc2lvbiA+IDEwICYmIHN0YXJ0dHlwZSA9PT0gdHlwZXMuX2ltcG9ydCkge1xuICAgICAgICBza2lwV2hpdGVTcGFjZS5sYXN0SW5kZXggPSB0aGlzLnBvcztcbiAgICAgICAgdmFyIHNraXAgPSBza2lwV2hpdGVTcGFjZS5leGVjKHRoaXMuaW5wdXQpO1xuICAgICAgICB2YXIgbmV4dCA9IHRoaXMucG9zICsgc2tpcFswXS5sZW5ndGgsIG5leHRDaCA9IHRoaXMuaW5wdXQuY2hhckNvZGVBdChuZXh0KTtcbiAgICAgICAgaWYgKG5leHRDaCA9PT0gNDAgfHwgbmV4dENoID09PSA0NikgLy8gJygnIG9yICcuJ1xuICAgICAgICAgIHsgcmV0dXJuIHRoaXMucGFyc2VFeHByZXNzaW9uU3RhdGVtZW50KG5vZGUsIHRoaXMucGFyc2VFeHByZXNzaW9uKCkpIH1cbiAgICAgIH1cblxuICAgICAgaWYgKCF0aGlzLm9wdGlvbnMuYWxsb3dJbXBvcnRFeHBvcnRFdmVyeXdoZXJlKSB7XG4gICAgICAgIGlmICghdG9wTGV2ZWwpXG4gICAgICAgICAgeyB0aGlzLnJhaXNlKHRoaXMuc3RhcnQsIFwiJ2ltcG9ydCcgYW5kICdleHBvcnQnIG1heSBvbmx5IGFwcGVhciBhdCB0aGUgdG9wIGxldmVsXCIpOyB9XG4gICAgICAgIGlmICghdGhpcy5pbk1vZHVsZSlcbiAgICAgICAgICB7IHRoaXMucmFpc2UodGhpcy5zdGFydCwgXCInaW1wb3J0JyBhbmQgJ2V4cG9ydCcgbWF5IGFwcGVhciBvbmx5IHdpdGggJ3NvdXJjZVR5cGU6IG1vZHVsZSdcIik7IH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBzdGFydHR5cGUgPT09IHR5cGVzLl9pbXBvcnQgPyB0aGlzLnBhcnNlSW1wb3J0KG5vZGUpIDogdGhpcy5wYXJzZUV4cG9ydChub2RlLCBleHBvcnRzKVxuXG4gICAgICAvLyBJZiB0aGUgc3RhdGVtZW50IGRvZXMgbm90IHN0YXJ0IHdpdGggYSBzdGF0ZW1lbnQga2V5d29yZCBvciBhXG4gICAgICAvLyBicmFjZSwgaXQncyBhbiBFeHByZXNzaW9uU3RhdGVtZW50IG9yIExhYmVsZWRTdGF0ZW1lbnQuIFdlXG4gICAgICAvLyBzaW1wbHkgc3RhcnQgcGFyc2luZyBhbiBleHByZXNzaW9uLCBhbmQgYWZ0ZXJ3YXJkcywgaWYgdGhlXG4gICAgICAvLyBuZXh0IHRva2VuIGlzIGEgY29sb24gYW5kIHRoZSBleHByZXNzaW9uIHdhcyBhIHNpbXBsZVxuICAgICAgLy8gSWRlbnRpZmllciBub2RlLCB3ZSBzd2l0Y2ggdG8gaW50ZXJwcmV0aW5nIGl0IGFzIGEgbGFiZWwuXG4gICAgZGVmYXVsdDpcbiAgICAgIGlmICh0aGlzLmlzQXN5bmNGdW5jdGlvbigpKSB7XG4gICAgICAgIGlmIChjb250ZXh0KSB7IHRoaXMudW5leHBlY3RlZCgpOyB9XG4gICAgICAgIHRoaXMubmV4dCgpO1xuICAgICAgICByZXR1cm4gdGhpcy5wYXJzZUZ1bmN0aW9uU3RhdGVtZW50KG5vZGUsIHRydWUsICFjb250ZXh0KVxuICAgICAgfVxuXG4gICAgICB2YXIgbWF5YmVOYW1lID0gdGhpcy52YWx1ZSwgZXhwciA9IHRoaXMucGFyc2VFeHByZXNzaW9uKCk7XG4gICAgICBpZiAoc3RhcnR0eXBlID09PSB0eXBlcy5uYW1lICYmIGV4cHIudHlwZSA9PT0gXCJJZGVudGlmaWVyXCIgJiYgdGhpcy5lYXQodHlwZXMuY29sb24pKVxuICAgICAgICB7IHJldHVybiB0aGlzLnBhcnNlTGFiZWxlZFN0YXRlbWVudChub2RlLCBtYXliZU5hbWUsIGV4cHIsIGNvbnRleHQpIH1cbiAgICAgIGVsc2UgeyByZXR1cm4gdGhpcy5wYXJzZUV4cHJlc3Npb25TdGF0ZW1lbnQobm9kZSwgZXhwcikgfVxuICAgIH1cbiAgfTtcblxuICBwcCQxLnBhcnNlQnJlYWtDb250aW51ZVN0YXRlbWVudCA9IGZ1bmN0aW9uKG5vZGUsIGtleXdvcmQpIHtcbiAgICB2YXIgaXNCcmVhayA9IGtleXdvcmQgPT09IFwiYnJlYWtcIjtcbiAgICB0aGlzLm5leHQoKTtcbiAgICBpZiAodGhpcy5lYXQodHlwZXMuc2VtaSkgfHwgdGhpcy5pbnNlcnRTZW1pY29sb24oKSkgeyBub2RlLmxhYmVsID0gbnVsbDsgfVxuICAgIGVsc2UgaWYgKHRoaXMudHlwZSAhPT0gdHlwZXMubmFtZSkgeyB0aGlzLnVuZXhwZWN0ZWQoKTsgfVxuICAgIGVsc2Uge1xuICAgICAgbm9kZS5sYWJlbCA9IHRoaXMucGFyc2VJZGVudCgpO1xuICAgICAgdGhpcy5zZW1pY29sb24oKTtcbiAgICB9XG5cbiAgICAvLyBWZXJpZnkgdGhhdCB0aGVyZSBpcyBhbiBhY3R1YWwgZGVzdGluYXRpb24gdG8gYnJlYWsgb3JcbiAgICAvLyBjb250aW51ZSB0by5cbiAgICB2YXIgaSA9IDA7XG4gICAgZm9yICg7IGkgPCB0aGlzLmxhYmVscy5sZW5ndGg7ICsraSkge1xuICAgICAgdmFyIGxhYiA9IHRoaXMubGFiZWxzW2ldO1xuICAgICAgaWYgKG5vZGUubGFiZWwgPT0gbnVsbCB8fCBsYWIubmFtZSA9PT0gbm9kZS5sYWJlbC5uYW1lKSB7XG4gICAgICAgIGlmIChsYWIua2luZCAhPSBudWxsICYmIChpc0JyZWFrIHx8IGxhYi5raW5kID09PSBcImxvb3BcIikpIHsgYnJlYWsgfVxuICAgICAgICBpZiAobm9kZS5sYWJlbCAmJiBpc0JyZWFrKSB7IGJyZWFrIH1cbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGkgPT09IHRoaXMubGFiZWxzLmxlbmd0aCkgeyB0aGlzLnJhaXNlKG5vZGUuc3RhcnQsIFwiVW5zeW50YWN0aWMgXCIgKyBrZXl3b3JkKTsgfVxuICAgIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgaXNCcmVhayA/IFwiQnJlYWtTdGF0ZW1lbnRcIiA6IFwiQ29udGludWVTdGF0ZW1lbnRcIilcbiAgfTtcblxuICBwcCQxLnBhcnNlRGVidWdnZXJTdGF0ZW1lbnQgPSBmdW5jdGlvbihub2RlKSB7XG4gICAgdGhpcy5uZXh0KCk7XG4gICAgdGhpcy5zZW1pY29sb24oKTtcbiAgICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsIFwiRGVidWdnZXJTdGF0ZW1lbnRcIilcbiAgfTtcblxuICBwcCQxLnBhcnNlRG9TdGF0ZW1lbnQgPSBmdW5jdGlvbihub2RlKSB7XG4gICAgdGhpcy5uZXh0KCk7XG4gICAgdGhpcy5sYWJlbHMucHVzaChsb29wTGFiZWwpO1xuICAgIG5vZGUuYm9keSA9IHRoaXMucGFyc2VTdGF0ZW1lbnQoXCJkb1wiKTtcbiAgICB0aGlzLmxhYmVscy5wb3AoKTtcbiAgICB0aGlzLmV4cGVjdCh0eXBlcy5fd2hpbGUpO1xuICAgIG5vZGUudGVzdCA9IHRoaXMucGFyc2VQYXJlbkV4cHJlc3Npb24oKTtcbiAgICBpZiAodGhpcy5vcHRpb25zLmVjbWFWZXJzaW9uID49IDYpXG4gICAgICB7IHRoaXMuZWF0KHR5cGVzLnNlbWkpOyB9XG4gICAgZWxzZVxuICAgICAgeyB0aGlzLnNlbWljb2xvbigpOyB9XG4gICAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCBcIkRvV2hpbGVTdGF0ZW1lbnRcIilcbiAgfTtcblxuICAvLyBEaXNhbWJpZ3VhdGluZyBiZXR3ZWVuIGEgYGZvcmAgYW5kIGEgYGZvcmAvYGluYCBvciBgZm9yYC9gb2ZgXG4gIC8vIGxvb3AgaXMgbm9uLXRyaXZpYWwuIEJhc2ljYWxseSwgd2UgaGF2ZSB0byBwYXJzZSB0aGUgaW5pdCBgdmFyYFxuICAvLyBzdGF0ZW1lbnQgb3IgZXhwcmVzc2lvbiwgZGlzYWxsb3dpbmcgdGhlIGBpbmAgb3BlcmF0b3IgKHNlZVxuICAvLyB0aGUgc2Vjb25kIHBhcmFtZXRlciB0byBgcGFyc2VFeHByZXNzaW9uYCksIGFuZCB0aGVuIGNoZWNrXG4gIC8vIHdoZXRoZXIgdGhlIG5leHQgdG9rZW4gaXMgYGluYCBvciBgb2ZgLiBXaGVuIHRoZXJlIGlzIG5vIGluaXRcbiAgLy8gcGFydCAoc2VtaWNvbG9uIGltbWVkaWF0ZWx5IGFmdGVyIHRoZSBvcGVuaW5nIHBhcmVudGhlc2lzKSwgaXRcbiAgLy8gaXMgYSByZWd1bGFyIGBmb3JgIGxvb3AuXG5cbiAgcHAkMS5wYXJzZUZvclN0YXRlbWVudCA9IGZ1bmN0aW9uKG5vZGUpIHtcbiAgICB0aGlzLm5leHQoKTtcbiAgICB2YXIgYXdhaXRBdCA9ICh0aGlzLm9wdGlvbnMuZWNtYVZlcnNpb24gPj0gOSAmJiAodGhpcy5pbkFzeW5jIHx8ICghdGhpcy5pbkZ1bmN0aW9uICYmIHRoaXMub3B0aW9ucy5hbGxvd0F3YWl0T3V0c2lkZUZ1bmN0aW9uKSkgJiYgdGhpcy5lYXRDb250ZXh0dWFsKFwiYXdhaXRcIikpID8gdGhpcy5sYXN0VG9rU3RhcnQgOiAtMTtcbiAgICB0aGlzLmxhYmVscy5wdXNoKGxvb3BMYWJlbCk7XG4gICAgdGhpcy5lbnRlclNjb3BlKDApO1xuICAgIHRoaXMuZXhwZWN0KHR5cGVzLnBhcmVuTCk7XG4gICAgaWYgKHRoaXMudHlwZSA9PT0gdHlwZXMuc2VtaSkge1xuICAgICAgaWYgKGF3YWl0QXQgPiAtMSkgeyB0aGlzLnVuZXhwZWN0ZWQoYXdhaXRBdCk7IH1cbiAgICAgIHJldHVybiB0aGlzLnBhcnNlRm9yKG5vZGUsIG51bGwpXG4gICAgfVxuICAgIHZhciBpc0xldCA9IHRoaXMuaXNMZXQoKTtcbiAgICBpZiAodGhpcy50eXBlID09PSB0eXBlcy5fdmFyIHx8IHRoaXMudHlwZSA9PT0gdHlwZXMuX2NvbnN0IHx8IGlzTGV0KSB7XG4gICAgICB2YXIgaW5pdCQxID0gdGhpcy5zdGFydE5vZGUoKSwga2luZCA9IGlzTGV0ID8gXCJsZXRcIiA6IHRoaXMudmFsdWU7XG4gICAgICB0aGlzLm5leHQoKTtcbiAgICAgIHRoaXMucGFyc2VWYXIoaW5pdCQxLCB0cnVlLCBraW5kKTtcbiAgICAgIHRoaXMuZmluaXNoTm9kZShpbml0JDEsIFwiVmFyaWFibGVEZWNsYXJhdGlvblwiKTtcbiAgICAgIGlmICgodGhpcy50eXBlID09PSB0eXBlcy5faW4gfHwgKHRoaXMub3B0aW9ucy5lY21hVmVyc2lvbiA+PSA2ICYmIHRoaXMuaXNDb250ZXh0dWFsKFwib2ZcIikpKSAmJiBpbml0JDEuZGVjbGFyYXRpb25zLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLmVjbWFWZXJzaW9uID49IDkpIHtcbiAgICAgICAgICBpZiAodGhpcy50eXBlID09PSB0eXBlcy5faW4pIHtcbiAgICAgICAgICAgIGlmIChhd2FpdEF0ID4gLTEpIHsgdGhpcy51bmV4cGVjdGVkKGF3YWl0QXQpOyB9XG4gICAgICAgICAgfSBlbHNlIHsgbm9kZS5hd2FpdCA9IGF3YWl0QXQgPiAtMTsgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlRm9ySW4obm9kZSwgaW5pdCQxKVxuICAgICAgfVxuICAgICAgaWYgKGF3YWl0QXQgPiAtMSkgeyB0aGlzLnVuZXhwZWN0ZWQoYXdhaXRBdCk7IH1cbiAgICAgIHJldHVybiB0aGlzLnBhcnNlRm9yKG5vZGUsIGluaXQkMSlcbiAgICB9XG4gICAgdmFyIHJlZkRlc3RydWN0dXJpbmdFcnJvcnMgPSBuZXcgRGVzdHJ1Y3R1cmluZ0Vycm9ycztcbiAgICB2YXIgaW5pdCA9IHRoaXMucGFyc2VFeHByZXNzaW9uKGF3YWl0QXQgPiAtMSA/IFwiYXdhaXRcIiA6IHRydWUsIHJlZkRlc3RydWN0dXJpbmdFcnJvcnMpO1xuICAgIGlmICh0aGlzLnR5cGUgPT09IHR5cGVzLl9pbiB8fCAodGhpcy5vcHRpb25zLmVjbWFWZXJzaW9uID49IDYgJiYgdGhpcy5pc0NvbnRleHR1YWwoXCJvZlwiKSkpIHtcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuZWNtYVZlcnNpb24gPj0gOSkge1xuICAgICAgICBpZiAodGhpcy50eXBlID09PSB0eXBlcy5faW4pIHtcbiAgICAgICAgICBpZiAoYXdhaXRBdCA+IC0xKSB7IHRoaXMudW5leHBlY3RlZChhd2FpdEF0KTsgfVxuICAgICAgICB9IGVsc2UgeyBub2RlLmF3YWl0ID0gYXdhaXRBdCA+IC0xOyB9XG4gICAgICB9XG4gICAgICB0aGlzLnRvQXNzaWduYWJsZShpbml0LCBmYWxzZSwgcmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycyk7XG4gICAgICB0aGlzLmNoZWNrTFZhbFBhdHRlcm4oaW5pdCk7XG4gICAgICByZXR1cm4gdGhpcy5wYXJzZUZvckluKG5vZGUsIGluaXQpXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuY2hlY2tFeHByZXNzaW9uRXJyb3JzKHJlZkRlc3RydWN0dXJpbmdFcnJvcnMsIHRydWUpO1xuICAgIH1cbiAgICBpZiAoYXdhaXRBdCA+IC0xKSB7IHRoaXMudW5leHBlY3RlZChhd2FpdEF0KTsgfVxuICAgIHJldHVybiB0aGlzLnBhcnNlRm9yKG5vZGUsIGluaXQpXG4gIH07XG5cbiAgcHAkMS5wYXJzZUZ1bmN0aW9uU3RhdGVtZW50ID0gZnVuY3Rpb24obm9kZSwgaXNBc3luYywgZGVjbGFyYXRpb25Qb3NpdGlvbikge1xuICAgIHRoaXMubmV4dCgpO1xuICAgIHJldHVybiB0aGlzLnBhcnNlRnVuY3Rpb24obm9kZSwgRlVOQ19TVEFURU1FTlQgfCAoZGVjbGFyYXRpb25Qb3NpdGlvbiA/IDAgOiBGVU5DX0hBTkdJTkdfU1RBVEVNRU5UKSwgZmFsc2UsIGlzQXN5bmMpXG4gIH07XG5cbiAgcHAkMS5wYXJzZUlmU3RhdGVtZW50ID0gZnVuY3Rpb24obm9kZSkge1xuICAgIHRoaXMubmV4dCgpO1xuICAgIG5vZGUudGVzdCA9IHRoaXMucGFyc2VQYXJlbkV4cHJlc3Npb24oKTtcbiAgICAvLyBhbGxvdyBmdW5jdGlvbiBkZWNsYXJhdGlvbnMgaW4gYnJhbmNoZXMsIGJ1dCBvbmx5IGluIG5vbi1zdHJpY3QgbW9kZVxuICAgIG5vZGUuY29uc2VxdWVudCA9IHRoaXMucGFyc2VTdGF0ZW1lbnQoXCJpZlwiKTtcbiAgICBub2RlLmFsdGVybmF0ZSA9IHRoaXMuZWF0KHR5cGVzLl9lbHNlKSA/IHRoaXMucGFyc2VTdGF0ZW1lbnQoXCJpZlwiKSA6IG51bGw7XG4gICAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCBcIklmU3RhdGVtZW50XCIpXG4gIH07XG5cbiAgcHAkMS5wYXJzZVJldHVyblN0YXRlbWVudCA9IGZ1bmN0aW9uKG5vZGUpIHtcbiAgICBpZiAoIXRoaXMuaW5GdW5jdGlvbiAmJiAhdGhpcy5vcHRpb25zLmFsbG93UmV0dXJuT3V0c2lkZUZ1bmN0aW9uKVxuICAgICAgeyB0aGlzLnJhaXNlKHRoaXMuc3RhcnQsIFwiJ3JldHVybicgb3V0c2lkZSBvZiBmdW5jdGlvblwiKTsgfVxuICAgIHRoaXMubmV4dCgpO1xuXG4gICAgLy8gSW4gYHJldHVybmAgKGFuZCBgYnJlYWtgL2Bjb250aW51ZWApLCB0aGUga2V5d29yZHMgd2l0aFxuICAgIC8vIG9wdGlvbmFsIGFyZ3VtZW50cywgd2UgZWFnZXJseSBsb29rIGZvciBhIHNlbWljb2xvbiBvciB0aGVcbiAgICAvLyBwb3NzaWJpbGl0eSB0byBpbnNlcnQgb25lLlxuXG4gICAgaWYgKHRoaXMuZWF0KHR5cGVzLnNlbWkpIHx8IHRoaXMuaW5zZXJ0U2VtaWNvbG9uKCkpIHsgbm9kZS5hcmd1bWVudCA9IG51bGw7IH1cbiAgICBlbHNlIHsgbm9kZS5hcmd1bWVudCA9IHRoaXMucGFyc2VFeHByZXNzaW9uKCk7IHRoaXMuc2VtaWNvbG9uKCk7IH1cbiAgICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsIFwiUmV0dXJuU3RhdGVtZW50XCIpXG4gIH07XG5cbiAgcHAkMS5wYXJzZVN3aXRjaFN0YXRlbWVudCA9IGZ1bmN0aW9uKG5vZGUpIHtcbiAgICB0aGlzLm5leHQoKTtcbiAgICBub2RlLmRpc2NyaW1pbmFudCA9IHRoaXMucGFyc2VQYXJlbkV4cHJlc3Npb24oKTtcbiAgICBub2RlLmNhc2VzID0gW107XG4gICAgdGhpcy5leHBlY3QodHlwZXMuYnJhY2VMKTtcbiAgICB0aGlzLmxhYmVscy5wdXNoKHN3aXRjaExhYmVsKTtcbiAgICB0aGlzLmVudGVyU2NvcGUoMCk7XG5cbiAgICAvLyBTdGF0ZW1lbnRzIHVuZGVyIG11c3QgYmUgZ3JvdXBlZCAoYnkgbGFiZWwpIGluIFN3aXRjaENhc2VcbiAgICAvLyBub2Rlcy4gYGN1cmAgaXMgdXNlZCB0byBrZWVwIHRoZSBub2RlIHRoYXQgd2UgYXJlIGN1cnJlbnRseVxuICAgIC8vIGFkZGluZyBzdGF0ZW1lbnRzIHRvLlxuXG4gICAgdmFyIGN1cjtcbiAgICBmb3IgKHZhciBzYXdEZWZhdWx0ID0gZmFsc2U7IHRoaXMudHlwZSAhPT0gdHlwZXMuYnJhY2VSOykge1xuICAgICAgaWYgKHRoaXMudHlwZSA9PT0gdHlwZXMuX2Nhc2UgfHwgdGhpcy50eXBlID09PSB0eXBlcy5fZGVmYXVsdCkge1xuICAgICAgICB2YXIgaXNDYXNlID0gdGhpcy50eXBlID09PSB0eXBlcy5fY2FzZTtcbiAgICAgICAgaWYgKGN1cikgeyB0aGlzLmZpbmlzaE5vZGUoY3VyLCBcIlN3aXRjaENhc2VcIik7IH1cbiAgICAgICAgbm9kZS5jYXNlcy5wdXNoKGN1ciA9IHRoaXMuc3RhcnROb2RlKCkpO1xuICAgICAgICBjdXIuY29uc2VxdWVudCA9IFtdO1xuICAgICAgICB0aGlzLm5leHQoKTtcbiAgICAgICAgaWYgKGlzQ2FzZSkge1xuICAgICAgICAgIGN1ci50ZXN0ID0gdGhpcy5wYXJzZUV4cHJlc3Npb24oKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoc2F3RGVmYXVsdCkgeyB0aGlzLnJhaXNlUmVjb3ZlcmFibGUodGhpcy5sYXN0VG9rU3RhcnQsIFwiTXVsdGlwbGUgZGVmYXVsdCBjbGF1c2VzXCIpOyB9XG4gICAgICAgICAgc2F3RGVmYXVsdCA9IHRydWU7XG4gICAgICAgICAgY3VyLnRlc3QgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZXhwZWN0KHR5cGVzLmNvbG9uKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICghY3VyKSB7IHRoaXMudW5leHBlY3RlZCgpOyB9XG4gICAgICAgIGN1ci5jb25zZXF1ZW50LnB1c2godGhpcy5wYXJzZVN0YXRlbWVudChudWxsKSk7XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuZXhpdFNjb3BlKCk7XG4gICAgaWYgKGN1cikgeyB0aGlzLmZpbmlzaE5vZGUoY3VyLCBcIlN3aXRjaENhc2VcIik7IH1cbiAgICB0aGlzLm5leHQoKTsgLy8gQ2xvc2luZyBicmFjZVxuICAgIHRoaXMubGFiZWxzLnBvcCgpO1xuICAgIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJTd2l0Y2hTdGF0ZW1lbnRcIilcbiAgfTtcblxuICBwcCQxLnBhcnNlVGhyb3dTdGF0ZW1lbnQgPSBmdW5jdGlvbihub2RlKSB7XG4gICAgdGhpcy5uZXh0KCk7XG4gICAgaWYgKGxpbmVCcmVhay50ZXN0KHRoaXMuaW5wdXQuc2xpY2UodGhpcy5sYXN0VG9rRW5kLCB0aGlzLnN0YXJ0KSkpXG4gICAgICB7IHRoaXMucmFpc2UodGhpcy5sYXN0VG9rRW5kLCBcIklsbGVnYWwgbmV3bGluZSBhZnRlciB0aHJvd1wiKTsgfVxuICAgIG5vZGUuYXJndW1lbnQgPSB0aGlzLnBhcnNlRXhwcmVzc2lvbigpO1xuICAgIHRoaXMuc2VtaWNvbG9uKCk7XG4gICAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCBcIlRocm93U3RhdGVtZW50XCIpXG4gIH07XG5cbiAgLy8gUmV1c2VkIGVtcHR5IGFycmF5IGFkZGVkIGZvciBub2RlIGZpZWxkcyB0aGF0IGFyZSBhbHdheXMgZW1wdHkuXG5cbiAgdmFyIGVtcHR5ID0gW107XG5cbiAgcHAkMS5wYXJzZVRyeVN0YXRlbWVudCA9IGZ1bmN0aW9uKG5vZGUpIHtcbiAgICB0aGlzLm5leHQoKTtcbiAgICBub2RlLmJsb2NrID0gdGhpcy5wYXJzZUJsb2NrKCk7XG4gICAgbm9kZS5oYW5kbGVyID0gbnVsbDtcbiAgICBpZiAodGhpcy50eXBlID09PSB0eXBlcy5fY2F0Y2gpIHtcbiAgICAgIHZhciBjbGF1c2UgPSB0aGlzLnN0YXJ0Tm9kZSgpO1xuICAgICAgdGhpcy5uZXh0KCk7XG4gICAgICBpZiAodGhpcy5lYXQodHlwZXMucGFyZW5MKSkge1xuICAgICAgICBjbGF1c2UucGFyYW0gPSB0aGlzLnBhcnNlQmluZGluZ0F0b20oKTtcbiAgICAgICAgdmFyIHNpbXBsZSA9IGNsYXVzZS5wYXJhbS50eXBlID09PSBcIklkZW50aWZpZXJcIjtcbiAgICAgICAgdGhpcy5lbnRlclNjb3BlKHNpbXBsZSA/IFNDT1BFX1NJTVBMRV9DQVRDSCA6IDApO1xuICAgICAgICB0aGlzLmNoZWNrTFZhbFBhdHRlcm4oY2xhdXNlLnBhcmFtLCBzaW1wbGUgPyBCSU5EX1NJTVBMRV9DQVRDSCA6IEJJTkRfTEVYSUNBTCk7XG4gICAgICAgIHRoaXMuZXhwZWN0KHR5cGVzLnBhcmVuUik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLmVjbWFWZXJzaW9uIDwgMTApIHsgdGhpcy51bmV4cGVjdGVkKCk7IH1cbiAgICAgICAgY2xhdXNlLnBhcmFtID0gbnVsbDtcbiAgICAgICAgdGhpcy5lbnRlclNjb3BlKDApO1xuICAgICAgfVxuICAgICAgY2xhdXNlLmJvZHkgPSB0aGlzLnBhcnNlQmxvY2soZmFsc2UpO1xuICAgICAgdGhpcy5leGl0U2NvcGUoKTtcbiAgICAgIG5vZGUuaGFuZGxlciA9IHRoaXMuZmluaXNoTm9kZShjbGF1c2UsIFwiQ2F0Y2hDbGF1c2VcIik7XG4gICAgfVxuICAgIG5vZGUuZmluYWxpemVyID0gdGhpcy5lYXQodHlwZXMuX2ZpbmFsbHkpID8gdGhpcy5wYXJzZUJsb2NrKCkgOiBudWxsO1xuICAgIGlmICghbm9kZS5oYW5kbGVyICYmICFub2RlLmZpbmFsaXplcilcbiAgICAgIHsgdGhpcy5yYWlzZShub2RlLnN0YXJ0LCBcIk1pc3NpbmcgY2F0Y2ggb3IgZmluYWxseSBjbGF1c2VcIik7IH1cbiAgICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsIFwiVHJ5U3RhdGVtZW50XCIpXG4gIH07XG5cbiAgcHAkMS5wYXJzZVZhclN0YXRlbWVudCA9IGZ1bmN0aW9uKG5vZGUsIGtpbmQpIHtcbiAgICB0aGlzLm5leHQoKTtcbiAgICB0aGlzLnBhcnNlVmFyKG5vZGUsIGZhbHNlLCBraW5kKTtcbiAgICB0aGlzLnNlbWljb2xvbigpO1xuICAgIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJWYXJpYWJsZURlY2xhcmF0aW9uXCIpXG4gIH07XG5cbiAgcHAkMS5wYXJzZVdoaWxlU3RhdGVtZW50ID0gZnVuY3Rpb24obm9kZSkge1xuICAgIHRoaXMubmV4dCgpO1xuICAgIG5vZGUudGVzdCA9IHRoaXMucGFyc2VQYXJlbkV4cHJlc3Npb24oKTtcbiAgICB0aGlzLmxhYmVscy5wdXNoKGxvb3BMYWJlbCk7XG4gICAgbm9kZS5ib2R5ID0gdGhpcy5wYXJzZVN0YXRlbWVudChcIndoaWxlXCIpO1xuICAgIHRoaXMubGFiZWxzLnBvcCgpO1xuICAgIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJXaGlsZVN0YXRlbWVudFwiKVxuICB9O1xuXG4gIHBwJDEucGFyc2VXaXRoU3RhdGVtZW50ID0gZnVuY3Rpb24obm9kZSkge1xuICAgIGlmICh0aGlzLnN0cmljdCkgeyB0aGlzLnJhaXNlKHRoaXMuc3RhcnQsIFwiJ3dpdGgnIGluIHN0cmljdCBtb2RlXCIpOyB9XG4gICAgdGhpcy5uZXh0KCk7XG4gICAgbm9kZS5vYmplY3QgPSB0aGlzLnBhcnNlUGFyZW5FeHByZXNzaW9uKCk7XG4gICAgbm9kZS5ib2R5ID0gdGhpcy5wYXJzZVN0YXRlbWVudChcIndpdGhcIik7XG4gICAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCBcIldpdGhTdGF0ZW1lbnRcIilcbiAgfTtcblxuICBwcCQxLnBhcnNlRW1wdHlTdGF0ZW1lbnQgPSBmdW5jdGlvbihub2RlKSB7XG4gICAgdGhpcy5uZXh0KCk7XG4gICAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCBcIkVtcHR5U3RhdGVtZW50XCIpXG4gIH07XG5cbiAgcHAkMS5wYXJzZUxhYmVsZWRTdGF0ZW1lbnQgPSBmdW5jdGlvbihub2RlLCBtYXliZU5hbWUsIGV4cHIsIGNvbnRleHQpIHtcbiAgICBmb3IgKHZhciBpJDEgPSAwLCBsaXN0ID0gdGhpcy5sYWJlbHM7IGkkMSA8IGxpc3QubGVuZ3RoOyBpJDEgKz0gMSlcbiAgICAgIHtcbiAgICAgIHZhciBsYWJlbCA9IGxpc3RbaSQxXTtcblxuICAgICAgaWYgKGxhYmVsLm5hbWUgPT09IG1heWJlTmFtZSlcbiAgICAgICAgeyB0aGlzLnJhaXNlKGV4cHIuc3RhcnQsIFwiTGFiZWwgJ1wiICsgbWF5YmVOYW1lICsgXCInIGlzIGFscmVhZHkgZGVjbGFyZWRcIik7XG4gICAgfSB9XG4gICAgdmFyIGtpbmQgPSB0aGlzLnR5cGUuaXNMb29wID8gXCJsb29wXCIgOiB0aGlzLnR5cGUgPT09IHR5cGVzLl9zd2l0Y2ggPyBcInN3aXRjaFwiIDogbnVsbDtcbiAgICBmb3IgKHZhciBpID0gdGhpcy5sYWJlbHMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIHZhciBsYWJlbCQxID0gdGhpcy5sYWJlbHNbaV07XG4gICAgICBpZiAobGFiZWwkMS5zdGF0ZW1lbnRTdGFydCA9PT0gbm9kZS5zdGFydCkge1xuICAgICAgICAvLyBVcGRhdGUgaW5mb3JtYXRpb24gYWJvdXQgcHJldmlvdXMgbGFiZWxzIG9uIHRoaXMgbm9kZVxuICAgICAgICBsYWJlbCQxLnN0YXRlbWVudFN0YXJ0ID0gdGhpcy5zdGFydDtcbiAgICAgICAgbGFiZWwkMS5raW5kID0ga2luZDtcbiAgICAgIH0gZWxzZSB7IGJyZWFrIH1cbiAgICB9XG4gICAgdGhpcy5sYWJlbHMucHVzaCh7bmFtZTogbWF5YmVOYW1lLCBraW5kOiBraW5kLCBzdGF0ZW1lbnRTdGFydDogdGhpcy5zdGFydH0pO1xuICAgIG5vZGUuYm9keSA9IHRoaXMucGFyc2VTdGF0ZW1lbnQoY29udGV4dCA/IGNvbnRleHQuaW5kZXhPZihcImxhYmVsXCIpID09PSAtMSA/IGNvbnRleHQgKyBcImxhYmVsXCIgOiBjb250ZXh0IDogXCJsYWJlbFwiKTtcbiAgICB0aGlzLmxhYmVscy5wb3AoKTtcbiAgICBub2RlLmxhYmVsID0gZXhwcjtcbiAgICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsIFwiTGFiZWxlZFN0YXRlbWVudFwiKVxuICB9O1xuXG4gIHBwJDEucGFyc2VFeHByZXNzaW9uU3RhdGVtZW50ID0gZnVuY3Rpb24obm9kZSwgZXhwcikge1xuICAgIG5vZGUuZXhwcmVzc2lvbiA9IGV4cHI7XG4gICAgdGhpcy5zZW1pY29sb24oKTtcbiAgICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsIFwiRXhwcmVzc2lvblN0YXRlbWVudFwiKVxuICB9O1xuXG4gIC8vIFBhcnNlIGEgc2VtaWNvbG9uLWVuY2xvc2VkIGJsb2NrIG9mIHN0YXRlbWVudHMsIGhhbmRsaW5nIGBcInVzZVxuICAvLyBzdHJpY3RcImAgZGVjbGFyYXRpb25zIHdoZW4gYGFsbG93U3RyaWN0YCBpcyB0cnVlICh1c2VkIGZvclxuICAvLyBmdW5jdGlvbiBib2RpZXMpLlxuXG4gIHBwJDEucGFyc2VCbG9jayA9IGZ1bmN0aW9uKGNyZWF0ZU5ld0xleGljYWxTY29wZSwgbm9kZSwgZXhpdFN0cmljdCkge1xuICAgIGlmICggY3JlYXRlTmV3TGV4aWNhbFNjb3BlID09PSB2b2lkIDAgKSBjcmVhdGVOZXdMZXhpY2FsU2NvcGUgPSB0cnVlO1xuICAgIGlmICggbm9kZSA9PT0gdm9pZCAwICkgbm9kZSA9IHRoaXMuc3RhcnROb2RlKCk7XG5cbiAgICBub2RlLmJvZHkgPSBbXTtcbiAgICB0aGlzLmV4cGVjdCh0eXBlcy5icmFjZUwpO1xuICAgIGlmIChjcmVhdGVOZXdMZXhpY2FsU2NvcGUpIHsgdGhpcy5lbnRlclNjb3BlKDApOyB9XG4gICAgd2hpbGUgKHRoaXMudHlwZSAhPT0gdHlwZXMuYnJhY2VSKSB7XG4gICAgICB2YXIgc3RtdCA9IHRoaXMucGFyc2VTdGF0ZW1lbnQobnVsbCk7XG4gICAgICBub2RlLmJvZHkucHVzaChzdG10KTtcbiAgICB9XG4gICAgaWYgKGV4aXRTdHJpY3QpIHsgdGhpcy5zdHJpY3QgPSBmYWxzZTsgfVxuICAgIHRoaXMubmV4dCgpO1xuICAgIGlmIChjcmVhdGVOZXdMZXhpY2FsU2NvcGUpIHsgdGhpcy5leGl0U2NvcGUoKTsgfVxuICAgIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJCbG9ja1N0YXRlbWVudFwiKVxuICB9O1xuXG4gIC8vIFBhcnNlIGEgcmVndWxhciBgZm9yYCBsb29wLiBUaGUgZGlzYW1iaWd1YXRpb24gY29kZSBpblxuICAvLyBgcGFyc2VTdGF0ZW1lbnRgIHdpbGwgYWxyZWFkeSBoYXZlIHBhcnNlZCB0aGUgaW5pdCBzdGF0ZW1lbnQgb3JcbiAgLy8gZXhwcmVzc2lvbi5cblxuICBwcCQxLnBhcnNlRm9yID0gZnVuY3Rpb24obm9kZSwgaW5pdCkge1xuICAgIG5vZGUuaW5pdCA9IGluaXQ7XG4gICAgdGhpcy5leHBlY3QodHlwZXMuc2VtaSk7XG4gICAgbm9kZS50ZXN0ID0gdGhpcy50eXBlID09PSB0eXBlcy5zZW1pID8gbnVsbCA6IHRoaXMucGFyc2VFeHByZXNzaW9uKCk7XG4gICAgdGhpcy5leHBlY3QodHlwZXMuc2VtaSk7XG4gICAgbm9kZS51cGRhdGUgPSB0aGlzLnR5cGUgPT09IHR5cGVzLnBhcmVuUiA/IG51bGwgOiB0aGlzLnBhcnNlRXhwcmVzc2lvbigpO1xuICAgIHRoaXMuZXhwZWN0KHR5cGVzLnBhcmVuUik7XG4gICAgbm9kZS5ib2R5ID0gdGhpcy5wYXJzZVN0YXRlbWVudChcImZvclwiKTtcbiAgICB0aGlzLmV4aXRTY29wZSgpO1xuICAgIHRoaXMubGFiZWxzLnBvcCgpO1xuICAgIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJGb3JTdGF0ZW1lbnRcIilcbiAgfTtcblxuICAvLyBQYXJzZSBhIGBmb3JgL2BpbmAgYW5kIGBmb3JgL2BvZmAgbG9vcCwgd2hpY2ggYXJlIGFsbW9zdFxuICAvLyBzYW1lIGZyb20gcGFyc2VyJ3MgcGVyc3BlY3RpdmUuXG5cbiAgcHAkMS5wYXJzZUZvckluID0gZnVuY3Rpb24obm9kZSwgaW5pdCkge1xuICAgIHZhciBpc0ZvckluID0gdGhpcy50eXBlID09PSB0eXBlcy5faW47XG4gICAgdGhpcy5uZXh0KCk7XG5cbiAgICBpZiAoXG4gICAgICBpbml0LnR5cGUgPT09IFwiVmFyaWFibGVEZWNsYXJhdGlvblwiICYmXG4gICAgICBpbml0LmRlY2xhcmF0aW9uc1swXS5pbml0ICE9IG51bGwgJiZcbiAgICAgIChcbiAgICAgICAgIWlzRm9ySW4gfHxcbiAgICAgICAgdGhpcy5vcHRpb25zLmVjbWFWZXJzaW9uIDwgOCB8fFxuICAgICAgICB0aGlzLnN0cmljdCB8fFxuICAgICAgICBpbml0LmtpbmQgIT09IFwidmFyXCIgfHxcbiAgICAgICAgaW5pdC5kZWNsYXJhdGlvbnNbMF0uaWQudHlwZSAhPT0gXCJJZGVudGlmaWVyXCJcbiAgICAgIClcbiAgICApIHtcbiAgICAgIHRoaXMucmFpc2UoXG4gICAgICAgIGluaXQuc3RhcnQsXG4gICAgICAgICgoaXNGb3JJbiA/IFwiZm9yLWluXCIgOiBcImZvci1vZlwiKSArIFwiIGxvb3AgdmFyaWFibGUgZGVjbGFyYXRpb24gbWF5IG5vdCBoYXZlIGFuIGluaXRpYWxpemVyXCIpXG4gICAgICApO1xuICAgIH1cbiAgICBub2RlLmxlZnQgPSBpbml0O1xuICAgIG5vZGUucmlnaHQgPSBpc0ZvckluID8gdGhpcy5wYXJzZUV4cHJlc3Npb24oKSA6IHRoaXMucGFyc2VNYXliZUFzc2lnbigpO1xuICAgIHRoaXMuZXhwZWN0KHR5cGVzLnBhcmVuUik7XG4gICAgbm9kZS5ib2R5ID0gdGhpcy5wYXJzZVN0YXRlbWVudChcImZvclwiKTtcbiAgICB0aGlzLmV4aXRTY29wZSgpO1xuICAgIHRoaXMubGFiZWxzLnBvcCgpO1xuICAgIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgaXNGb3JJbiA/IFwiRm9ySW5TdGF0ZW1lbnRcIiA6IFwiRm9yT2ZTdGF0ZW1lbnRcIilcbiAgfTtcblxuICAvLyBQYXJzZSBhIGxpc3Qgb2YgdmFyaWFibGUgZGVjbGFyYXRpb25zLlxuXG4gIHBwJDEucGFyc2VWYXIgPSBmdW5jdGlvbihub2RlLCBpc0Zvciwga2luZCkge1xuICAgIG5vZGUuZGVjbGFyYXRpb25zID0gW107XG4gICAgbm9kZS5raW5kID0ga2luZDtcbiAgICBmb3IgKDs7KSB7XG4gICAgICB2YXIgZGVjbCA9IHRoaXMuc3RhcnROb2RlKCk7XG4gICAgICB0aGlzLnBhcnNlVmFySWQoZGVjbCwga2luZCk7XG4gICAgICBpZiAodGhpcy5lYXQodHlwZXMuZXEpKSB7XG4gICAgICAgIGRlY2wuaW5pdCA9IHRoaXMucGFyc2VNYXliZUFzc2lnbihpc0Zvcik7XG4gICAgICB9IGVsc2UgaWYgKGtpbmQgPT09IFwiY29uc3RcIiAmJiAhKHRoaXMudHlwZSA9PT0gdHlwZXMuX2luIHx8ICh0aGlzLm9wdGlvbnMuZWNtYVZlcnNpb24gPj0gNiAmJiB0aGlzLmlzQ29udGV4dHVhbChcIm9mXCIpKSkpIHtcbiAgICAgICAgdGhpcy51bmV4cGVjdGVkKCk7XG4gICAgICB9IGVsc2UgaWYgKGRlY2wuaWQudHlwZSAhPT0gXCJJZGVudGlmaWVyXCIgJiYgIShpc0ZvciAmJiAodGhpcy50eXBlID09PSB0eXBlcy5faW4gfHwgdGhpcy5pc0NvbnRleHR1YWwoXCJvZlwiKSkpKSB7XG4gICAgICAgIHRoaXMucmFpc2UodGhpcy5sYXN0VG9rRW5kLCBcIkNvbXBsZXggYmluZGluZyBwYXR0ZXJucyByZXF1aXJlIGFuIGluaXRpYWxpemF0aW9uIHZhbHVlXCIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGVjbC5pbml0ID0gbnVsbDtcbiAgICAgIH1cbiAgICAgIG5vZGUuZGVjbGFyYXRpb25zLnB1c2godGhpcy5maW5pc2hOb2RlKGRlY2wsIFwiVmFyaWFibGVEZWNsYXJhdG9yXCIpKTtcbiAgICAgIGlmICghdGhpcy5lYXQodHlwZXMuY29tbWEpKSB7IGJyZWFrIH1cbiAgICB9XG4gICAgcmV0dXJuIG5vZGVcbiAgfTtcblxuICBwcCQxLnBhcnNlVmFySWQgPSBmdW5jdGlvbihkZWNsLCBraW5kKSB7XG4gICAgZGVjbC5pZCA9IHRoaXMucGFyc2VCaW5kaW5nQXRvbSgpO1xuICAgIHRoaXMuY2hlY2tMVmFsUGF0dGVybihkZWNsLmlkLCBraW5kID09PSBcInZhclwiID8gQklORF9WQVIgOiBCSU5EX0xFWElDQUwsIGZhbHNlKTtcbiAgfTtcblxuICB2YXIgRlVOQ19TVEFURU1FTlQgPSAxLCBGVU5DX0hBTkdJTkdfU1RBVEVNRU5UID0gMiwgRlVOQ19OVUxMQUJMRV9JRCA9IDQ7XG5cbiAgLy8gUGFyc2UgYSBmdW5jdGlvbiBkZWNsYXJhdGlvbiBvciBsaXRlcmFsIChkZXBlbmRpbmcgb24gdGhlXG4gIC8vIGBzdGF0ZW1lbnQgJiBGVU5DX1NUQVRFTUVOVGApLlxuXG4gIC8vIFJlbW92ZSBgYWxsb3dFeHByZXNzaW9uQm9keWAgZm9yIDcuMC4wLCBhcyBpdCBpcyBvbmx5IGNhbGxlZCB3aXRoIGZhbHNlXG4gIHBwJDEucGFyc2VGdW5jdGlvbiA9IGZ1bmN0aW9uKG5vZGUsIHN0YXRlbWVudCwgYWxsb3dFeHByZXNzaW9uQm9keSwgaXNBc3luYykge1xuICAgIHRoaXMuaW5pdEZ1bmN0aW9uKG5vZGUpO1xuICAgIGlmICh0aGlzLm9wdGlvbnMuZWNtYVZlcnNpb24gPj0gOSB8fCB0aGlzLm9wdGlvbnMuZWNtYVZlcnNpb24gPj0gNiAmJiAhaXNBc3luYykge1xuICAgICAgaWYgKHRoaXMudHlwZSA9PT0gdHlwZXMuc3RhciAmJiAoc3RhdGVtZW50ICYgRlVOQ19IQU5HSU5HX1NUQVRFTUVOVCkpXG4gICAgICAgIHsgdGhpcy51bmV4cGVjdGVkKCk7IH1cbiAgICAgIG5vZGUuZ2VuZXJhdG9yID0gdGhpcy5lYXQodHlwZXMuc3Rhcik7XG4gICAgfVxuICAgIGlmICh0aGlzLm9wdGlvbnMuZWNtYVZlcnNpb24gPj0gOClcbiAgICAgIHsgbm9kZS5hc3luYyA9ICEhaXNBc3luYzsgfVxuXG4gICAgaWYgKHN0YXRlbWVudCAmIEZVTkNfU1RBVEVNRU5UKSB7XG4gICAgICBub2RlLmlkID0gKHN0YXRlbWVudCAmIEZVTkNfTlVMTEFCTEVfSUQpICYmIHRoaXMudHlwZSAhPT0gdHlwZXMubmFtZSA/IG51bGwgOiB0aGlzLnBhcnNlSWRlbnQoKTtcbiAgICAgIGlmIChub2RlLmlkICYmICEoc3RhdGVtZW50ICYgRlVOQ19IQU5HSU5HX1NUQVRFTUVOVCkpXG4gICAgICAgIC8vIElmIGl0IGlzIGEgcmVndWxhciBmdW5jdGlvbiBkZWNsYXJhdGlvbiBpbiBzbG9wcHkgbW9kZSwgdGhlbiBpdCBpc1xuICAgICAgICAvLyBzdWJqZWN0IHRvIEFubmV4IEIgc2VtYW50aWNzIChCSU5EX0ZVTkNUSU9OKS4gT3RoZXJ3aXNlLCB0aGUgYmluZGluZ1xuICAgICAgICAvLyBtb2RlIGRlcGVuZHMgb24gcHJvcGVydGllcyBvZiB0aGUgY3VycmVudCBzY29wZSAoc2VlXG4gICAgICAgIC8vIHRyZWF0RnVuY3Rpb25zQXNWYXIpLlxuICAgICAgICB7IHRoaXMuY2hlY2tMVmFsU2ltcGxlKG5vZGUuaWQsICh0aGlzLnN0cmljdCB8fCBub2RlLmdlbmVyYXRvciB8fCBub2RlLmFzeW5jKSA/IHRoaXMudHJlYXRGdW5jdGlvbnNBc1ZhciA/IEJJTkRfVkFSIDogQklORF9MRVhJQ0FMIDogQklORF9GVU5DVElPTik7IH1cbiAgICB9XG5cbiAgICB2YXIgb2xkWWllbGRQb3MgPSB0aGlzLnlpZWxkUG9zLCBvbGRBd2FpdFBvcyA9IHRoaXMuYXdhaXRQb3MsIG9sZEF3YWl0SWRlbnRQb3MgPSB0aGlzLmF3YWl0SWRlbnRQb3M7XG4gICAgdGhpcy55aWVsZFBvcyA9IDA7XG4gICAgdGhpcy5hd2FpdFBvcyA9IDA7XG4gICAgdGhpcy5hd2FpdElkZW50UG9zID0gMDtcbiAgICB0aGlzLmVudGVyU2NvcGUoZnVuY3Rpb25GbGFncyhub2RlLmFzeW5jLCBub2RlLmdlbmVyYXRvcikpO1xuXG4gICAgaWYgKCEoc3RhdGVtZW50ICYgRlVOQ19TVEFURU1FTlQpKVxuICAgICAgeyBub2RlLmlkID0gdGhpcy50eXBlID09PSB0eXBlcy5uYW1lID8gdGhpcy5wYXJzZUlkZW50KCkgOiBudWxsOyB9XG5cbiAgICB0aGlzLnBhcnNlRnVuY3Rpb25QYXJhbXMobm9kZSk7XG4gICAgdGhpcy5wYXJzZUZ1bmN0aW9uQm9keShub2RlLCBhbGxvd0V4cHJlc3Npb25Cb2R5LCBmYWxzZSk7XG5cbiAgICB0aGlzLnlpZWxkUG9zID0gb2xkWWllbGRQb3M7XG4gICAgdGhpcy5hd2FpdFBvcyA9IG9sZEF3YWl0UG9zO1xuICAgIHRoaXMuYXdhaXRJZGVudFBvcyA9IG9sZEF3YWl0SWRlbnRQb3M7XG4gICAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCAoc3RhdGVtZW50ICYgRlVOQ19TVEFURU1FTlQpID8gXCJGdW5jdGlvbkRlY2xhcmF0aW9uXCIgOiBcIkZ1bmN0aW9uRXhwcmVzc2lvblwiKVxuICB9O1xuXG4gIHBwJDEucGFyc2VGdW5jdGlvblBhcmFtcyA9IGZ1bmN0aW9uKG5vZGUpIHtcbiAgICB0aGlzLmV4cGVjdCh0eXBlcy5wYXJlbkwpO1xuICAgIG5vZGUucGFyYW1zID0gdGhpcy5wYXJzZUJpbmRpbmdMaXN0KHR5cGVzLnBhcmVuUiwgZmFsc2UsIHRoaXMub3B0aW9ucy5lY21hVmVyc2lvbiA+PSA4KTtcbiAgICB0aGlzLmNoZWNrWWllbGRBd2FpdEluRGVmYXVsdFBhcmFtcygpO1xuICB9O1xuXG4gIC8vIFBhcnNlIGEgY2xhc3MgZGVjbGFyYXRpb24gb3IgbGl0ZXJhbCAoZGVwZW5kaW5nIG9uIHRoZVxuICAvLyBgaXNTdGF0ZW1lbnRgIHBhcmFtZXRlcikuXG5cbiAgcHAkMS5wYXJzZUNsYXNzID0gZnVuY3Rpb24obm9kZSwgaXNTdGF0ZW1lbnQpIHtcbiAgICB0aGlzLm5leHQoKTtcblxuICAgIC8vIGVjbWEtMjYyIDE0LjYgQ2xhc3MgRGVmaW5pdGlvbnNcbiAgICAvLyBBIGNsYXNzIGRlZmluaXRpb24gaXMgYWx3YXlzIHN0cmljdCBtb2RlIGNvZGUuXG4gICAgdmFyIG9sZFN0cmljdCA9IHRoaXMuc3RyaWN0O1xuICAgIHRoaXMuc3RyaWN0ID0gdHJ1ZTtcblxuICAgIHRoaXMucGFyc2VDbGFzc0lkKG5vZGUsIGlzU3RhdGVtZW50KTtcbiAgICB0aGlzLnBhcnNlQ2xhc3NTdXBlcihub2RlKTtcbiAgICB2YXIgcHJpdmF0ZU5hbWVNYXAgPSB0aGlzLmVudGVyQ2xhc3NCb2R5KCk7XG4gICAgdmFyIGNsYXNzQm9keSA9IHRoaXMuc3RhcnROb2RlKCk7XG4gICAgdmFyIGhhZENvbnN0cnVjdG9yID0gZmFsc2U7XG4gICAgY2xhc3NCb2R5LmJvZHkgPSBbXTtcbiAgICB0aGlzLmV4cGVjdCh0eXBlcy5icmFjZUwpO1xuICAgIHdoaWxlICh0aGlzLnR5cGUgIT09IHR5cGVzLmJyYWNlUikge1xuICAgICAgdmFyIGVsZW1lbnQgPSB0aGlzLnBhcnNlQ2xhc3NFbGVtZW50KG5vZGUuc3VwZXJDbGFzcyAhPT0gbnVsbCk7XG4gICAgICBpZiAoZWxlbWVudCkge1xuICAgICAgICBjbGFzc0JvZHkuYm9keS5wdXNoKGVsZW1lbnQpO1xuICAgICAgICBpZiAoZWxlbWVudC50eXBlID09PSBcIk1ldGhvZERlZmluaXRpb25cIiAmJiBlbGVtZW50LmtpbmQgPT09IFwiY29uc3RydWN0b3JcIikge1xuICAgICAgICAgIGlmIChoYWRDb25zdHJ1Y3RvcikgeyB0aGlzLnJhaXNlKGVsZW1lbnQuc3RhcnQsIFwiRHVwbGljYXRlIGNvbnN0cnVjdG9yIGluIHRoZSBzYW1lIGNsYXNzXCIpOyB9XG4gICAgICAgICAgaGFkQ29uc3RydWN0b3IgPSB0cnVlO1xuICAgICAgICB9IGVsc2UgaWYgKGVsZW1lbnQua2V5LnR5cGUgPT09IFwiUHJpdmF0ZUlkZW50aWZpZXJcIiAmJiBpc1ByaXZhdGVOYW1lQ29uZmxpY3RlZChwcml2YXRlTmFtZU1hcCwgZWxlbWVudCkpIHtcbiAgICAgICAgICB0aGlzLnJhaXNlUmVjb3ZlcmFibGUoZWxlbWVudC5rZXkuc3RhcnQsIChcIklkZW50aWZpZXIgJyNcIiArIChlbGVtZW50LmtleS5uYW1lKSArIFwiJyBoYXMgYWxyZWFkeSBiZWVuIGRlY2xhcmVkXCIpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLnN0cmljdCA9IG9sZFN0cmljdDtcbiAgICB0aGlzLm5leHQoKTtcbiAgICBub2RlLmJvZHkgPSB0aGlzLmZpbmlzaE5vZGUoY2xhc3NCb2R5LCBcIkNsYXNzQm9keVwiKTtcbiAgICB0aGlzLmV4aXRDbGFzc0JvZHkoKTtcbiAgICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsIGlzU3RhdGVtZW50ID8gXCJDbGFzc0RlY2xhcmF0aW9uXCIgOiBcIkNsYXNzRXhwcmVzc2lvblwiKVxuICB9O1xuXG4gIHBwJDEucGFyc2VDbGFzc0VsZW1lbnQgPSBmdW5jdGlvbihjb25zdHJ1Y3RvckFsbG93c1N1cGVyKSB7XG4gICAgaWYgKHRoaXMuZWF0KHR5cGVzLnNlbWkpKSB7IHJldHVybiBudWxsIH1cblxuICAgIHZhciBlY21hVmVyc2lvbiA9IHRoaXMub3B0aW9ucy5lY21hVmVyc2lvbjtcbiAgICB2YXIgbm9kZSA9IHRoaXMuc3RhcnROb2RlKCk7XG4gICAgdmFyIGtleU5hbWUgPSBcIlwiO1xuICAgIHZhciBpc0dlbmVyYXRvciA9IGZhbHNlO1xuICAgIHZhciBpc0FzeW5jID0gZmFsc2U7XG4gICAgdmFyIGtpbmQgPSBcIm1ldGhvZFwiO1xuXG4gICAgLy8gUGFyc2UgbW9kaWZpZXJzXG4gICAgbm9kZS5zdGF0aWMgPSBmYWxzZTtcbiAgICBpZiAodGhpcy5lYXRDb250ZXh0dWFsKFwic3RhdGljXCIpKSB7XG4gICAgICBpZiAodGhpcy5pc0NsYXNzRWxlbWVudE5hbWVTdGFydCgpIHx8IHRoaXMudHlwZSA9PT0gdHlwZXMuc3Rhcikge1xuICAgICAgICBub2RlLnN0YXRpYyA9IHRydWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBrZXlOYW1lID0gXCJzdGF0aWNcIjtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKCFrZXlOYW1lICYmIGVjbWFWZXJzaW9uID49IDggJiYgdGhpcy5lYXRDb250ZXh0dWFsKFwiYXN5bmNcIikpIHtcbiAgICAgIGlmICgodGhpcy5pc0NsYXNzRWxlbWVudE5hbWVTdGFydCgpIHx8IHRoaXMudHlwZSA9PT0gdHlwZXMuc3RhcikgJiYgIXRoaXMuY2FuSW5zZXJ0U2VtaWNvbG9uKCkpIHtcbiAgICAgICAgaXNBc3luYyA9IHRydWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBrZXlOYW1lID0gXCJhc3luY1wiO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoIWtleU5hbWUgJiYgKGVjbWFWZXJzaW9uID49IDkgfHwgIWlzQXN5bmMpICYmIHRoaXMuZWF0KHR5cGVzLnN0YXIpKSB7XG4gICAgICBpc0dlbmVyYXRvciA9IHRydWU7XG4gICAgfVxuICAgIGlmICgha2V5TmFtZSAmJiAhaXNBc3luYyAmJiAhaXNHZW5lcmF0b3IpIHtcbiAgICAgIHZhciBsYXN0VmFsdWUgPSB0aGlzLnZhbHVlO1xuICAgICAgaWYgKHRoaXMuZWF0Q29udGV4dHVhbChcImdldFwiKSB8fCB0aGlzLmVhdENvbnRleHR1YWwoXCJzZXRcIikpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNDbGFzc0VsZW1lbnROYW1lU3RhcnQoKSkge1xuICAgICAgICAgIGtpbmQgPSBsYXN0VmFsdWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAga2V5TmFtZSA9IGxhc3RWYWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFBhcnNlIGVsZW1lbnQgbmFtZVxuICAgIGlmIChrZXlOYW1lKSB7XG4gICAgICAvLyAnYXN5bmMnLCAnZ2V0JywgJ3NldCcsIG9yICdzdGF0aWMnIHdlcmUgbm90IGEga2V5d29yZCBjb250ZXh0dWFsbHkuXG4gICAgICAvLyBUaGUgbGFzdCB0b2tlbiBpcyBhbnkgb2YgdGhvc2UuIE1ha2UgaXQgdGhlIGVsZW1lbnQgbmFtZS5cbiAgICAgIG5vZGUuY29tcHV0ZWQgPSBmYWxzZTtcbiAgICAgIG5vZGUua2V5ID0gdGhpcy5zdGFydE5vZGVBdCh0aGlzLmxhc3RUb2tTdGFydCwgdGhpcy5sYXN0VG9rU3RhcnRMb2MpO1xuICAgICAgbm9kZS5rZXkubmFtZSA9IGtleU5hbWU7XG4gICAgICB0aGlzLmZpbmlzaE5vZGUobm9kZS5rZXksIFwiSWRlbnRpZmllclwiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5wYXJzZUNsYXNzRWxlbWVudE5hbWUobm9kZSk7XG4gICAgfVxuXG4gICAgLy8gUGFyc2UgZWxlbWVudCB2YWx1ZVxuICAgIGlmIChlY21hVmVyc2lvbiA8IDEzIHx8IHRoaXMudHlwZSA9PT0gdHlwZXMucGFyZW5MIHx8IGtpbmQgIT09IFwibWV0aG9kXCIgfHwgaXNHZW5lcmF0b3IgfHwgaXNBc3luYykge1xuICAgICAgdmFyIGlzQ29uc3RydWN0b3IgPSAhbm9kZS5zdGF0aWMgJiYgY2hlY2tLZXlOYW1lKG5vZGUsIFwiY29uc3RydWN0b3JcIik7XG4gICAgICB2YXIgYWxsb3dzRGlyZWN0U3VwZXIgPSBpc0NvbnN0cnVjdG9yICYmIGNvbnN0cnVjdG9yQWxsb3dzU3VwZXI7XG4gICAgICAvLyBDb3VsZG4ndCBtb3ZlIHRoaXMgY2hlY2sgaW50byB0aGUgJ3BhcnNlQ2xhc3NNZXRob2QnIG1ldGhvZCBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eS5cbiAgICAgIGlmIChpc0NvbnN0cnVjdG9yICYmIGtpbmQgIT09IFwibWV0aG9kXCIpIHsgdGhpcy5yYWlzZShub2RlLmtleS5zdGFydCwgXCJDb25zdHJ1Y3RvciBjYW4ndCBoYXZlIGdldC9zZXQgbW9kaWZpZXJcIik7IH1cbiAgICAgIG5vZGUua2luZCA9IGlzQ29uc3RydWN0b3IgPyBcImNvbnN0cnVjdG9yXCIgOiBraW5kO1xuICAgICAgdGhpcy5wYXJzZUNsYXNzTWV0aG9kKG5vZGUsIGlzR2VuZXJhdG9yLCBpc0FzeW5jLCBhbGxvd3NEaXJlY3RTdXBlcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucGFyc2VDbGFzc0ZpZWxkKG5vZGUpO1xuICAgIH1cblxuICAgIHJldHVybiBub2RlXG4gIH07XG5cbiAgcHAkMS5pc0NsYXNzRWxlbWVudE5hbWVTdGFydCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiAoXG4gICAgICB0aGlzLnR5cGUgPT09IHR5cGVzLm5hbWUgfHxcbiAgICAgIHRoaXMudHlwZSA9PT0gdHlwZXMucHJpdmF0ZUlkIHx8XG4gICAgICB0aGlzLnR5cGUgPT09IHR5cGVzLm51bSB8fFxuICAgICAgdGhpcy50eXBlID09PSB0eXBlcy5zdHJpbmcgfHxcbiAgICAgIHRoaXMudHlwZSA9PT0gdHlwZXMuYnJhY2tldEwgfHxcbiAgICAgIHRoaXMudHlwZS5rZXl3b3JkXG4gICAgKVxuICB9O1xuXG4gIHBwJDEucGFyc2VDbGFzc0VsZW1lbnROYW1lID0gZnVuY3Rpb24oZWxlbWVudCkge1xuICAgIGlmICh0aGlzLnR5cGUgPT09IHR5cGVzLnByaXZhdGVJZCkge1xuICAgICAgaWYgKHRoaXMudmFsdWUgPT09IFwiY29uc3RydWN0b3JcIikge1xuICAgICAgICB0aGlzLnJhaXNlKHRoaXMuc3RhcnQsIFwiQ2xhc3NlcyBjYW4ndCBoYXZlIGFuIGVsZW1lbnQgbmFtZWQgJyNjb25zdHJ1Y3RvcidcIik7XG4gICAgICB9XG4gICAgICBlbGVtZW50LmNvbXB1dGVkID0gZmFsc2U7XG4gICAgICBlbGVtZW50LmtleSA9IHRoaXMucGFyc2VQcml2YXRlSWRlbnQoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5wYXJzZVByb3BlcnR5TmFtZShlbGVtZW50KTtcbiAgICB9XG4gIH07XG5cbiAgcHAkMS5wYXJzZUNsYXNzTWV0aG9kID0gZnVuY3Rpb24obWV0aG9kLCBpc0dlbmVyYXRvciwgaXNBc3luYywgYWxsb3dzRGlyZWN0U3VwZXIpIHtcbiAgICAvLyBDaGVjayBrZXkgYW5kIGZsYWdzXG4gICAgdmFyIGtleSA9IG1ldGhvZC5rZXk7XG4gICAgaWYgKG1ldGhvZC5raW5kID09PSBcImNvbnN0cnVjdG9yXCIpIHtcbiAgICAgIGlmIChpc0dlbmVyYXRvcikgeyB0aGlzLnJhaXNlKGtleS5zdGFydCwgXCJDb25zdHJ1Y3RvciBjYW4ndCBiZSBhIGdlbmVyYXRvclwiKTsgfVxuICAgICAgaWYgKGlzQXN5bmMpIHsgdGhpcy5yYWlzZShrZXkuc3RhcnQsIFwiQ29uc3RydWN0b3IgY2FuJ3QgYmUgYW4gYXN5bmMgbWV0aG9kXCIpOyB9XG4gICAgfSBlbHNlIGlmIChtZXRob2Quc3RhdGljICYmIGNoZWNrS2V5TmFtZShtZXRob2QsIFwicHJvdG90eXBlXCIpKSB7XG4gICAgICB0aGlzLnJhaXNlKGtleS5zdGFydCwgXCJDbGFzc2VzIG1heSBub3QgaGF2ZSBhIHN0YXRpYyBwcm9wZXJ0eSBuYW1lZCBwcm90b3R5cGVcIik7XG4gICAgfVxuXG4gICAgLy8gUGFyc2UgdmFsdWVcbiAgICB2YXIgdmFsdWUgPSBtZXRob2QudmFsdWUgPSB0aGlzLnBhcnNlTWV0aG9kKGlzR2VuZXJhdG9yLCBpc0FzeW5jLCBhbGxvd3NEaXJlY3RTdXBlcik7XG5cbiAgICAvLyBDaGVjayB2YWx1ZVxuICAgIGlmIChtZXRob2Qua2luZCA9PT0gXCJnZXRcIiAmJiB2YWx1ZS5wYXJhbXMubGVuZ3RoICE9PSAwKVxuICAgICAgeyB0aGlzLnJhaXNlUmVjb3ZlcmFibGUodmFsdWUuc3RhcnQsIFwiZ2V0dGVyIHNob3VsZCBoYXZlIG5vIHBhcmFtc1wiKTsgfVxuICAgIGlmIChtZXRob2Qua2luZCA9PT0gXCJzZXRcIiAmJiB2YWx1ZS5wYXJhbXMubGVuZ3RoICE9PSAxKVxuICAgICAgeyB0aGlzLnJhaXNlUmVjb3ZlcmFibGUodmFsdWUuc3RhcnQsIFwic2V0dGVyIHNob3VsZCBoYXZlIGV4YWN0bHkgb25lIHBhcmFtXCIpOyB9XG4gICAgaWYgKG1ldGhvZC5raW5kID09PSBcInNldFwiICYmIHZhbHVlLnBhcmFtc1swXS50eXBlID09PSBcIlJlc3RFbGVtZW50XCIpXG4gICAgICB7IHRoaXMucmFpc2VSZWNvdmVyYWJsZSh2YWx1ZS5wYXJhbXNbMF0uc3RhcnQsIFwiU2V0dGVyIGNhbm5vdCB1c2UgcmVzdCBwYXJhbXNcIik7IH1cblxuICAgIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobWV0aG9kLCBcIk1ldGhvZERlZmluaXRpb25cIilcbiAgfTtcblxuICBwcCQxLnBhcnNlQ2xhc3NGaWVsZCA9IGZ1bmN0aW9uKGZpZWxkKSB7XG4gICAgaWYgKGNoZWNrS2V5TmFtZShmaWVsZCwgXCJjb25zdHJ1Y3RvclwiKSkge1xuICAgICAgdGhpcy5yYWlzZShmaWVsZC5rZXkuc3RhcnQsIFwiQ2xhc3NlcyBjYW4ndCBoYXZlIGEgZmllbGQgbmFtZWQgJ2NvbnN0cnVjdG9yJ1wiKTtcbiAgICB9IGVsc2UgaWYgKGZpZWxkLnN0YXRpYyAmJiBjaGVja0tleU5hbWUoZmllbGQsIFwicHJvdG90eXBlXCIpKSB7XG4gICAgICB0aGlzLnJhaXNlKGZpZWxkLmtleS5zdGFydCwgXCJDbGFzc2VzIGNhbid0IGhhdmUgYSBzdGF0aWMgZmllbGQgbmFtZWQgJ3Byb3RvdHlwZSdcIik7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuZWF0KHR5cGVzLmVxKSkge1xuICAgICAgLy8gVG8gcmFpc2UgU3ludGF4RXJyb3IgaWYgJ2FyZ3VtZW50cycgZXhpc3RzIGluIHRoZSBpbml0aWFsaXplci5cbiAgICAgIHZhciBzY29wZSA9IHRoaXMuY3VycmVudFRoaXNTY29wZSgpO1xuICAgICAgdmFyIGluQ2xhc3NGaWVsZEluaXQgPSBzY29wZS5pbkNsYXNzRmllbGRJbml0O1xuICAgICAgc2NvcGUuaW5DbGFzc0ZpZWxkSW5pdCA9IHRydWU7XG4gICAgICBmaWVsZC52YWx1ZSA9IHRoaXMucGFyc2VNYXliZUFzc2lnbigpO1xuICAgICAgc2NvcGUuaW5DbGFzc0ZpZWxkSW5pdCA9IGluQ2xhc3NGaWVsZEluaXQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZpZWxkLnZhbHVlID0gbnVsbDtcbiAgICB9XG4gICAgdGhpcy5zZW1pY29sb24oKTtcblxuICAgIHJldHVybiB0aGlzLmZpbmlzaE5vZGUoZmllbGQsIFwiUHJvcGVydHlEZWZpbml0aW9uXCIpXG4gIH07XG5cbiAgcHAkMS5wYXJzZUNsYXNzSWQgPSBmdW5jdGlvbihub2RlLCBpc1N0YXRlbWVudCkge1xuICAgIGlmICh0aGlzLnR5cGUgPT09IHR5cGVzLm5hbWUpIHtcbiAgICAgIG5vZGUuaWQgPSB0aGlzLnBhcnNlSWRlbnQoKTtcbiAgICAgIGlmIChpc1N0YXRlbWVudClcbiAgICAgICAgeyB0aGlzLmNoZWNrTFZhbFNpbXBsZShub2RlLmlkLCBCSU5EX0xFWElDQUwsIGZhbHNlKTsgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoaXNTdGF0ZW1lbnQgPT09IHRydWUpXG4gICAgICAgIHsgdGhpcy51bmV4cGVjdGVkKCk7IH1cbiAgICAgIG5vZGUuaWQgPSBudWxsO1xuICAgIH1cbiAgfTtcblxuICBwcCQxLnBhcnNlQ2xhc3NTdXBlciA9IGZ1bmN0aW9uKG5vZGUpIHtcbiAgICBub2RlLnN1cGVyQ2xhc3MgPSB0aGlzLmVhdCh0eXBlcy5fZXh0ZW5kcykgPyB0aGlzLnBhcnNlRXhwclN1YnNjcmlwdHMoKSA6IG51bGw7XG4gIH07XG5cbiAgcHAkMS5lbnRlckNsYXNzQm9keSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBlbGVtZW50ID0ge2RlY2xhcmVkOiBPYmplY3QuY3JlYXRlKG51bGwpLCB1c2VkOiBbXX07XG4gICAgdGhpcy5wcml2YXRlTmFtZVN0YWNrLnB1c2goZWxlbWVudCk7XG4gICAgcmV0dXJuIGVsZW1lbnQuZGVjbGFyZWRcbiAgfTtcblxuICBwcCQxLmV4aXRDbGFzc0JvZHkgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgcmVmID0gdGhpcy5wcml2YXRlTmFtZVN0YWNrLnBvcCgpO1xuICAgIHZhciBkZWNsYXJlZCA9IHJlZi5kZWNsYXJlZDtcbiAgICB2YXIgdXNlZCA9IHJlZi51c2VkO1xuICAgIHZhciBsZW4gPSB0aGlzLnByaXZhdGVOYW1lU3RhY2subGVuZ3RoO1xuICAgIHZhciBwYXJlbnQgPSBsZW4gPT09IDAgPyBudWxsIDogdGhpcy5wcml2YXRlTmFtZVN0YWNrW2xlbiAtIDFdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdXNlZC5sZW5ndGg7ICsraSkge1xuICAgICAgdmFyIGlkID0gdXNlZFtpXTtcbiAgICAgIGlmICghaGFzKGRlY2xhcmVkLCBpZC5uYW1lKSkge1xuICAgICAgICBpZiAocGFyZW50KSB7XG4gICAgICAgICAgcGFyZW50LnVzZWQucHVzaChpZCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5yYWlzZVJlY292ZXJhYmxlKGlkLnN0YXJ0LCAoXCJQcml2YXRlIGZpZWxkICcjXCIgKyAoaWQubmFtZSkgKyBcIicgbXVzdCBiZSBkZWNsYXJlZCBpbiBhbiBlbmNsb3NpbmcgY2xhc3NcIikpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIGlzUHJpdmF0ZU5hbWVDb25mbGljdGVkKHByaXZhdGVOYW1lTWFwLCBlbGVtZW50KSB7XG4gICAgdmFyIG5hbWUgPSBlbGVtZW50LmtleS5uYW1lO1xuICAgIHZhciBjdXJyID0gcHJpdmF0ZU5hbWVNYXBbbmFtZV07XG5cbiAgICB2YXIgbmV4dCA9IFwidHJ1ZVwiO1xuICAgIGlmIChlbGVtZW50LnR5cGUgPT09IFwiTWV0aG9kRGVmaW5pdGlvblwiICYmIChlbGVtZW50LmtpbmQgPT09IFwiZ2V0XCIgfHwgZWxlbWVudC5raW5kID09PSBcInNldFwiKSkge1xuICAgICAgbmV4dCA9IChlbGVtZW50LnN0YXRpYyA/IFwic1wiIDogXCJpXCIpICsgZWxlbWVudC5raW5kO1xuICAgIH1cblxuICAgIC8vIGBjbGFzcyB7IGdldCAjYSgpe307IHN0YXRpYyBzZXQgI2EoXyl7fSB9YCBpcyBhbHNvIGNvbmZsaWN0LlxuICAgIGlmIChcbiAgICAgIGN1cnIgPT09IFwiaWdldFwiICYmIG5leHQgPT09IFwiaXNldFwiIHx8XG4gICAgICBjdXJyID09PSBcImlzZXRcIiAmJiBuZXh0ID09PSBcImlnZXRcIiB8fFxuICAgICAgY3VyciA9PT0gXCJzZ2V0XCIgJiYgbmV4dCA9PT0gXCJzc2V0XCIgfHxcbiAgICAgIGN1cnIgPT09IFwic3NldFwiICYmIG5leHQgPT09IFwic2dldFwiXG4gICAgKSB7XG4gICAgICBwcml2YXRlTmFtZU1hcFtuYW1lXSA9IFwidHJ1ZVwiO1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfSBlbHNlIGlmICghY3Vycikge1xuICAgICAgcHJpdmF0ZU5hbWVNYXBbbmFtZV0gPSBuZXh0O1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gY2hlY2tLZXlOYW1lKG5vZGUsIG5hbWUpIHtcbiAgICB2YXIgY29tcHV0ZWQgPSBub2RlLmNvbXB1dGVkO1xuICAgIHZhciBrZXkgPSBub2RlLmtleTtcbiAgICByZXR1cm4gIWNvbXB1dGVkICYmIChcbiAgICAgIGtleS50eXBlID09PSBcIklkZW50aWZpZXJcIiAmJiBrZXkubmFtZSA9PT0gbmFtZSB8fFxuICAgICAga2V5LnR5cGUgPT09IFwiTGl0ZXJhbFwiICYmIGtleS52YWx1ZSA9PT0gbmFtZVxuICAgIClcbiAgfVxuXG4gIC8vIFBhcnNlcyBtb2R1bGUgZXhwb3J0IGRlY2xhcmF0aW9uLlxuXG4gIHBwJDEucGFyc2VFeHBvcnQgPSBmdW5jdGlvbihub2RlLCBleHBvcnRzKSB7XG4gICAgdGhpcy5uZXh0KCk7XG4gICAgLy8gZXhwb3J0ICogZnJvbSAnLi4uJ1xuICAgIGlmICh0aGlzLmVhdCh0eXBlcy5zdGFyKSkge1xuICAgICAgaWYgKHRoaXMub3B0aW9ucy5lY21hVmVyc2lvbiA+PSAxMSkge1xuICAgICAgICBpZiAodGhpcy5lYXRDb250ZXh0dWFsKFwiYXNcIikpIHtcbiAgICAgICAgICBub2RlLmV4cG9ydGVkID0gdGhpcy5wYXJzZUlkZW50KHRydWUpO1xuICAgICAgICAgIHRoaXMuY2hlY2tFeHBvcnQoZXhwb3J0cywgbm9kZS5leHBvcnRlZC5uYW1lLCB0aGlzLmxhc3RUb2tTdGFydCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbm9kZS5leHBvcnRlZCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRoaXMuZXhwZWN0Q29udGV4dHVhbChcImZyb21cIik7XG4gICAgICBpZiAodGhpcy50eXBlICE9PSB0eXBlcy5zdHJpbmcpIHsgdGhpcy51bmV4cGVjdGVkKCk7IH1cbiAgICAgIG5vZGUuc291cmNlID0gdGhpcy5wYXJzZUV4cHJBdG9tKCk7XG4gICAgICB0aGlzLnNlbWljb2xvbigpO1xuICAgICAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCBcIkV4cG9ydEFsbERlY2xhcmF0aW9uXCIpXG4gICAgfVxuICAgIGlmICh0aGlzLmVhdCh0eXBlcy5fZGVmYXVsdCkpIHsgLy8gZXhwb3J0IGRlZmF1bHQgLi4uXG4gICAgICB0aGlzLmNoZWNrRXhwb3J0KGV4cG9ydHMsIFwiZGVmYXVsdFwiLCB0aGlzLmxhc3RUb2tTdGFydCk7XG4gICAgICB2YXIgaXNBc3luYztcbiAgICAgIGlmICh0aGlzLnR5cGUgPT09IHR5cGVzLl9mdW5jdGlvbiB8fCAoaXNBc3luYyA9IHRoaXMuaXNBc3luY0Z1bmN0aW9uKCkpKSB7XG4gICAgICAgIHZhciBmTm9kZSA9IHRoaXMuc3RhcnROb2RlKCk7XG4gICAgICAgIHRoaXMubmV4dCgpO1xuICAgICAgICBpZiAoaXNBc3luYykgeyB0aGlzLm5leHQoKTsgfVxuICAgICAgICBub2RlLmRlY2xhcmF0aW9uID0gdGhpcy5wYXJzZUZ1bmN0aW9uKGZOb2RlLCBGVU5DX1NUQVRFTUVOVCB8IEZVTkNfTlVMTEFCTEVfSUQsIGZhbHNlLCBpc0FzeW5jKTtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy50eXBlID09PSB0eXBlcy5fY2xhc3MpIHtcbiAgICAgICAgdmFyIGNOb2RlID0gdGhpcy5zdGFydE5vZGUoKTtcbiAgICAgICAgbm9kZS5kZWNsYXJhdGlvbiA9IHRoaXMucGFyc2VDbGFzcyhjTm9kZSwgXCJudWxsYWJsZUlEXCIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbm9kZS5kZWNsYXJhdGlvbiA9IHRoaXMucGFyc2VNYXliZUFzc2lnbigpO1xuICAgICAgICB0aGlzLnNlbWljb2xvbigpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCBcIkV4cG9ydERlZmF1bHREZWNsYXJhdGlvblwiKVxuICAgIH1cbiAgICAvLyBleHBvcnQgdmFyfGNvbnN0fGxldHxmdW5jdGlvbnxjbGFzcyAuLi5cbiAgICBpZiAodGhpcy5zaG91bGRQYXJzZUV4cG9ydFN0YXRlbWVudCgpKSB7XG4gICAgICBub2RlLmRlY2xhcmF0aW9uID0gdGhpcy5wYXJzZVN0YXRlbWVudChudWxsKTtcbiAgICAgIGlmIChub2RlLmRlY2xhcmF0aW9uLnR5cGUgPT09IFwiVmFyaWFibGVEZWNsYXJhdGlvblwiKVxuICAgICAgICB7IHRoaXMuY2hlY2tWYXJpYWJsZUV4cG9ydChleHBvcnRzLCBub2RlLmRlY2xhcmF0aW9uLmRlY2xhcmF0aW9ucyk7IH1cbiAgICAgIGVsc2VcbiAgICAgICAgeyB0aGlzLmNoZWNrRXhwb3J0KGV4cG9ydHMsIG5vZGUuZGVjbGFyYXRpb24uaWQubmFtZSwgbm9kZS5kZWNsYXJhdGlvbi5pZC5zdGFydCk7IH1cbiAgICAgIG5vZGUuc3BlY2lmaWVycyA9IFtdO1xuICAgICAgbm9kZS5zb3VyY2UgPSBudWxsO1xuICAgIH0gZWxzZSB7IC8vIGV4cG9ydCB7IHgsIHkgYXMgeiB9IFtmcm9tICcuLi4nXVxuICAgICAgbm9kZS5kZWNsYXJhdGlvbiA9IG51bGw7XG4gICAgICBub2RlLnNwZWNpZmllcnMgPSB0aGlzLnBhcnNlRXhwb3J0U3BlY2lmaWVycyhleHBvcnRzKTtcbiAgICAgIGlmICh0aGlzLmVhdENvbnRleHR1YWwoXCJmcm9tXCIpKSB7XG4gICAgICAgIGlmICh0aGlzLnR5cGUgIT09IHR5cGVzLnN0cmluZykgeyB0aGlzLnVuZXhwZWN0ZWQoKTsgfVxuICAgICAgICBub2RlLnNvdXJjZSA9IHRoaXMucGFyc2VFeHByQXRvbSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxpc3QgPSBub2RlLnNwZWNpZmllcnM7IGkgPCBsaXN0Lmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgLy8gY2hlY2sgZm9yIGtleXdvcmRzIHVzZWQgYXMgbG9jYWwgbmFtZXNcbiAgICAgICAgICB2YXIgc3BlYyA9IGxpc3RbaV07XG5cbiAgICAgICAgICB0aGlzLmNoZWNrVW5yZXNlcnZlZChzcGVjLmxvY2FsKTtcbiAgICAgICAgICAvLyBjaGVjayBpZiBleHBvcnQgaXMgZGVmaW5lZFxuICAgICAgICAgIHRoaXMuY2hlY2tMb2NhbEV4cG9ydChzcGVjLmxvY2FsKTtcbiAgICAgICAgfVxuXG4gICAgICAgIG5vZGUuc291cmNlID0gbnVsbDtcbiAgICAgIH1cbiAgICAgIHRoaXMuc2VtaWNvbG9uKCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJFeHBvcnROYW1lZERlY2xhcmF0aW9uXCIpXG4gIH07XG5cbiAgcHAkMS5jaGVja0V4cG9ydCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIHBvcykge1xuICAgIGlmICghZXhwb3J0cykgeyByZXR1cm4gfVxuICAgIGlmIChoYXMoZXhwb3J0cywgbmFtZSkpXG4gICAgICB7IHRoaXMucmFpc2VSZWNvdmVyYWJsZShwb3MsIFwiRHVwbGljYXRlIGV4cG9ydCAnXCIgKyBuYW1lICsgXCInXCIpOyB9XG4gICAgZXhwb3J0c1tuYW1lXSA9IHRydWU7XG4gIH07XG5cbiAgcHAkMS5jaGVja1BhdHRlcm5FeHBvcnQgPSBmdW5jdGlvbihleHBvcnRzLCBwYXQpIHtcbiAgICB2YXIgdHlwZSA9IHBhdC50eXBlO1xuICAgIGlmICh0eXBlID09PSBcIklkZW50aWZpZXJcIilcbiAgICAgIHsgdGhpcy5jaGVja0V4cG9ydChleHBvcnRzLCBwYXQubmFtZSwgcGF0LnN0YXJ0KTsgfVxuICAgIGVsc2UgaWYgKHR5cGUgPT09IFwiT2JqZWN0UGF0dGVyblwiKVxuICAgICAgeyBmb3IgKHZhciBpID0gMCwgbGlzdCA9IHBhdC5wcm9wZXJ0aWVzOyBpIDwgbGlzdC5sZW5ndGg7IGkgKz0gMSlcbiAgICAgICAge1xuICAgICAgICAgIHZhciBwcm9wID0gbGlzdFtpXTtcblxuICAgICAgICAgIHRoaXMuY2hlY2tQYXR0ZXJuRXhwb3J0KGV4cG9ydHMsIHByb3ApO1xuICAgICAgICB9IH1cbiAgICBlbHNlIGlmICh0eXBlID09PSBcIkFycmF5UGF0dGVyblwiKVxuICAgICAgeyBmb3IgKHZhciBpJDEgPSAwLCBsaXN0JDEgPSBwYXQuZWxlbWVudHM7IGkkMSA8IGxpc3QkMS5sZW5ndGg7IGkkMSArPSAxKSB7XG4gICAgICAgIHZhciBlbHQgPSBsaXN0JDFbaSQxXTtcblxuICAgICAgICAgIGlmIChlbHQpIHsgdGhpcy5jaGVja1BhdHRlcm5FeHBvcnQoZXhwb3J0cywgZWx0KTsgfVxuICAgICAgfSB9XG4gICAgZWxzZSBpZiAodHlwZSA9PT0gXCJQcm9wZXJ0eVwiKVxuICAgICAgeyB0aGlzLmNoZWNrUGF0dGVybkV4cG9ydChleHBvcnRzLCBwYXQudmFsdWUpOyB9XG4gICAgZWxzZSBpZiAodHlwZSA9PT0gXCJBc3NpZ25tZW50UGF0dGVyblwiKVxuICAgICAgeyB0aGlzLmNoZWNrUGF0dGVybkV4cG9ydChleHBvcnRzLCBwYXQubGVmdCk7IH1cbiAgICBlbHNlIGlmICh0eXBlID09PSBcIlJlc3RFbGVtZW50XCIpXG4gICAgICB7IHRoaXMuY2hlY2tQYXR0ZXJuRXhwb3J0KGV4cG9ydHMsIHBhdC5hcmd1bWVudCk7IH1cbiAgICBlbHNlIGlmICh0eXBlID09PSBcIlBhcmVudGhlc2l6ZWRFeHByZXNzaW9uXCIpXG4gICAgICB7IHRoaXMuY2hlY2tQYXR0ZXJuRXhwb3J0KGV4cG9ydHMsIHBhdC5leHByZXNzaW9uKTsgfVxuICB9O1xuXG4gIHBwJDEuY2hlY2tWYXJpYWJsZUV4cG9ydCA9IGZ1bmN0aW9uKGV4cG9ydHMsIGRlY2xzKSB7XG4gICAgaWYgKCFleHBvcnRzKSB7IHJldHVybiB9XG4gICAgZm9yICh2YXIgaSA9IDAsIGxpc3QgPSBkZWNsczsgaSA8IGxpc3QubGVuZ3RoOyBpICs9IDEpXG4gICAgICB7XG4gICAgICB2YXIgZGVjbCA9IGxpc3RbaV07XG5cbiAgICAgIHRoaXMuY2hlY2tQYXR0ZXJuRXhwb3J0KGV4cG9ydHMsIGRlY2wuaWQpO1xuICAgIH1cbiAgfTtcblxuICBwcCQxLnNob3VsZFBhcnNlRXhwb3J0U3RhdGVtZW50ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMudHlwZS5rZXl3b3JkID09PSBcInZhclwiIHx8XG4gICAgICB0aGlzLnR5cGUua2V5d29yZCA9PT0gXCJjb25zdFwiIHx8XG4gICAgICB0aGlzLnR5cGUua2V5d29yZCA9PT0gXCJjbGFzc1wiIHx8XG4gICAgICB0aGlzLnR5cGUua2V5d29yZCA9PT0gXCJmdW5jdGlvblwiIHx8XG4gICAgICB0aGlzLmlzTGV0KCkgfHxcbiAgICAgIHRoaXMuaXNBc3luY0Z1bmN0aW9uKClcbiAgfTtcblxuICAvLyBQYXJzZXMgYSBjb21tYS1zZXBhcmF0ZWQgbGlzdCBvZiBtb2R1bGUgZXhwb3J0cy5cblxuICBwcCQxLnBhcnNlRXhwb3J0U3BlY2lmaWVycyA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiAgICB2YXIgbm9kZXMgPSBbXSwgZmlyc3QgPSB0cnVlO1xuICAgIC8vIGV4cG9ydCB7IHgsIHkgYXMgeiB9IFtmcm9tICcuLi4nXVxuICAgIHRoaXMuZXhwZWN0KHR5cGVzLmJyYWNlTCk7XG4gICAgd2hpbGUgKCF0aGlzLmVhdCh0eXBlcy5icmFjZVIpKSB7XG4gICAgICBpZiAoIWZpcnN0KSB7XG4gICAgICAgIHRoaXMuZXhwZWN0KHR5cGVzLmNvbW1hKTtcbiAgICAgICAgaWYgKHRoaXMuYWZ0ZXJUcmFpbGluZ0NvbW1hKHR5cGVzLmJyYWNlUikpIHsgYnJlYWsgfVxuICAgICAgfSBlbHNlIHsgZmlyc3QgPSBmYWxzZTsgfVxuXG4gICAgICB2YXIgbm9kZSA9IHRoaXMuc3RhcnROb2RlKCk7XG4gICAgICBub2RlLmxvY2FsID0gdGhpcy5wYXJzZUlkZW50KHRydWUpO1xuICAgICAgbm9kZS5leHBvcnRlZCA9IHRoaXMuZWF0Q29udGV4dHVhbChcImFzXCIpID8gdGhpcy5wYXJzZUlkZW50KHRydWUpIDogbm9kZS5sb2NhbDtcbiAgICAgIHRoaXMuY2hlY2tFeHBvcnQoZXhwb3J0cywgbm9kZS5leHBvcnRlZC5uYW1lLCBub2RlLmV4cG9ydGVkLnN0YXJ0KTtcbiAgICAgIG5vZGVzLnB1c2godGhpcy5maW5pc2hOb2RlKG5vZGUsIFwiRXhwb3J0U3BlY2lmaWVyXCIpKTtcbiAgICB9XG4gICAgcmV0dXJuIG5vZGVzXG4gIH07XG5cbiAgLy8gUGFyc2VzIGltcG9ydCBkZWNsYXJhdGlvbi5cblxuICBwcCQxLnBhcnNlSW1wb3J0ID0gZnVuY3Rpb24obm9kZSkge1xuICAgIHRoaXMubmV4dCgpO1xuICAgIC8vIGltcG9ydCAnLi4uJ1xuICAgIGlmICh0aGlzLnR5cGUgPT09IHR5cGVzLnN0cmluZykge1xuICAgICAgbm9kZS5zcGVjaWZpZXJzID0gZW1wdHk7XG4gICAgICBub2RlLnNvdXJjZSA9IHRoaXMucGFyc2VFeHByQXRvbSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBub2RlLnNwZWNpZmllcnMgPSB0aGlzLnBhcnNlSW1wb3J0U3BlY2lmaWVycygpO1xuICAgICAgdGhpcy5leHBlY3RDb250ZXh0dWFsKFwiZnJvbVwiKTtcbiAgICAgIG5vZGUuc291cmNlID0gdGhpcy50eXBlID09PSB0eXBlcy5zdHJpbmcgPyB0aGlzLnBhcnNlRXhwckF0b20oKSA6IHRoaXMudW5leHBlY3RlZCgpO1xuICAgIH1cbiAgICB0aGlzLnNlbWljb2xvbigpO1xuICAgIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJJbXBvcnREZWNsYXJhdGlvblwiKVxuICB9O1xuXG4gIC8vIFBhcnNlcyBhIGNvbW1hLXNlcGFyYXRlZCBsaXN0IG9mIG1vZHVsZSBpbXBvcnRzLlxuXG4gIHBwJDEucGFyc2VJbXBvcnRTcGVjaWZpZXJzID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIG5vZGVzID0gW10sIGZpcnN0ID0gdHJ1ZTtcbiAgICBpZiAodGhpcy50eXBlID09PSB0eXBlcy5uYW1lKSB7XG4gICAgICAvLyBpbXBvcnQgZGVmYXVsdE9iaiwgeyB4LCB5IGFzIHogfSBmcm9tICcuLi4nXG4gICAgICB2YXIgbm9kZSA9IHRoaXMuc3RhcnROb2RlKCk7XG4gICAgICBub2RlLmxvY2FsID0gdGhpcy5wYXJzZUlkZW50KCk7XG4gICAgICB0aGlzLmNoZWNrTFZhbFNpbXBsZShub2RlLmxvY2FsLCBCSU5EX0xFWElDQUwpO1xuICAgICAgbm9kZXMucHVzaCh0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJJbXBvcnREZWZhdWx0U3BlY2lmaWVyXCIpKTtcbiAgICAgIGlmICghdGhpcy5lYXQodHlwZXMuY29tbWEpKSB7IHJldHVybiBub2RlcyB9XG4gICAgfVxuICAgIGlmICh0aGlzLnR5cGUgPT09IHR5cGVzLnN0YXIpIHtcbiAgICAgIHZhciBub2RlJDEgPSB0aGlzLnN0YXJ0Tm9kZSgpO1xuICAgICAgdGhpcy5uZXh0KCk7XG4gICAgICB0aGlzLmV4cGVjdENvbnRleHR1YWwoXCJhc1wiKTtcbiAgICAgIG5vZGUkMS5sb2NhbCA9IHRoaXMucGFyc2VJZGVudCgpO1xuICAgICAgdGhpcy5jaGVja0xWYWxTaW1wbGUobm9kZSQxLmxvY2FsLCBCSU5EX0xFWElDQUwpO1xuICAgICAgbm9kZXMucHVzaCh0aGlzLmZpbmlzaE5vZGUobm9kZSQxLCBcIkltcG9ydE5hbWVzcGFjZVNwZWNpZmllclwiKSk7XG4gICAgICByZXR1cm4gbm9kZXNcbiAgICB9XG4gICAgdGhpcy5leHBlY3QodHlwZXMuYnJhY2VMKTtcbiAgICB3aGlsZSAoIXRoaXMuZWF0KHR5cGVzLmJyYWNlUikpIHtcbiAgICAgIGlmICghZmlyc3QpIHtcbiAgICAgICAgdGhpcy5leHBlY3QodHlwZXMuY29tbWEpO1xuICAgICAgICBpZiAodGhpcy5hZnRlclRyYWlsaW5nQ29tbWEodHlwZXMuYnJhY2VSKSkgeyBicmVhayB9XG4gICAgICB9IGVsc2UgeyBmaXJzdCA9IGZhbHNlOyB9XG5cbiAgICAgIHZhciBub2RlJDIgPSB0aGlzLnN0YXJ0Tm9kZSgpO1xuICAgICAgbm9kZSQyLmltcG9ydGVkID0gdGhpcy5wYXJzZUlkZW50KHRydWUpO1xuICAgICAgaWYgKHRoaXMuZWF0Q29udGV4dHVhbChcImFzXCIpKSB7XG4gICAgICAgIG5vZGUkMi5sb2NhbCA9IHRoaXMucGFyc2VJZGVudCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5jaGVja1VucmVzZXJ2ZWQobm9kZSQyLmltcG9ydGVkKTtcbiAgICAgICAgbm9kZSQyLmxvY2FsID0gbm9kZSQyLmltcG9ydGVkO1xuICAgICAgfVxuICAgICAgdGhpcy5jaGVja0xWYWxTaW1wbGUobm9kZSQyLmxvY2FsLCBCSU5EX0xFWElDQUwpO1xuICAgICAgbm9kZXMucHVzaCh0aGlzLmZpbmlzaE5vZGUobm9kZSQyLCBcIkltcG9ydFNwZWNpZmllclwiKSk7XG4gICAgfVxuICAgIHJldHVybiBub2Rlc1xuICB9O1xuXG4gIC8vIFNldCBgRXhwcmVzc2lvblN0YXRlbWVudCNkaXJlY3RpdmVgIHByb3BlcnR5IGZvciBkaXJlY3RpdmUgcHJvbG9ndWVzLlxuICBwcCQxLmFkYXB0RGlyZWN0aXZlUHJvbG9ndWUgPSBmdW5jdGlvbihzdGF0ZW1lbnRzKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdGF0ZW1lbnRzLmxlbmd0aCAmJiB0aGlzLmlzRGlyZWN0aXZlQ2FuZGlkYXRlKHN0YXRlbWVudHNbaV0pOyArK2kpIHtcbiAgICAgIHN0YXRlbWVudHNbaV0uZGlyZWN0aXZlID0gc3RhdGVtZW50c1tpXS5leHByZXNzaW9uLnJhdy5zbGljZSgxLCAtMSk7XG4gICAgfVxuICB9O1xuICBwcCQxLmlzRGlyZWN0aXZlQ2FuZGlkYXRlID0gZnVuY3Rpb24oc3RhdGVtZW50KSB7XG4gICAgcmV0dXJuIChcbiAgICAgIHN0YXRlbWVudC50eXBlID09PSBcIkV4cHJlc3Npb25TdGF0ZW1lbnRcIiAmJlxuICAgICAgc3RhdGVtZW50LmV4cHJlc3Npb24udHlwZSA9PT0gXCJMaXRlcmFsXCIgJiZcbiAgICAgIHR5cGVvZiBzdGF0ZW1lbnQuZXhwcmVzc2lvbi52YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJlxuICAgICAgLy8gUmVqZWN0IHBhcmVudGhlc2l6ZWQgc3RyaW5ncy5cbiAgICAgICh0aGlzLmlucHV0W3N0YXRlbWVudC5zdGFydF0gPT09IFwiXFxcIlwiIHx8IHRoaXMuaW5wdXRbc3RhdGVtZW50LnN0YXJ0XSA9PT0gXCInXCIpXG4gICAgKVxuICB9O1xuXG4gIHZhciBwcCQyID0gUGFyc2VyLnByb3RvdHlwZTtcblxuICAvLyBDb252ZXJ0IGV4aXN0aW5nIGV4cHJlc3Npb24gYXRvbSB0byBhc3NpZ25hYmxlIHBhdHRlcm5cbiAgLy8gaWYgcG9zc2libGUuXG5cbiAgcHAkMi50b0Fzc2lnbmFibGUgPSBmdW5jdGlvbihub2RlLCBpc0JpbmRpbmcsIHJlZkRlc3RydWN0dXJpbmdFcnJvcnMpIHtcbiAgICBpZiAodGhpcy5vcHRpb25zLmVjbWFWZXJzaW9uID49IDYgJiYgbm9kZSkge1xuICAgICAgc3dpdGNoIChub2RlLnR5cGUpIHtcbiAgICAgIGNhc2UgXCJJZGVudGlmaWVyXCI6XG4gICAgICAgIGlmICh0aGlzLmluQXN5bmMgJiYgbm9kZS5uYW1lID09PSBcImF3YWl0XCIpXG4gICAgICAgICAgeyB0aGlzLnJhaXNlKG5vZGUuc3RhcnQsIFwiQ2Fubm90IHVzZSAnYXdhaXQnIGFzIGlkZW50aWZpZXIgaW5zaWRlIGFuIGFzeW5jIGZ1bmN0aW9uXCIpOyB9XG4gICAgICAgIGJyZWFrXG5cbiAgICAgIGNhc2UgXCJPYmplY3RQYXR0ZXJuXCI6XG4gICAgICBjYXNlIFwiQXJyYXlQYXR0ZXJuXCI6XG4gICAgICBjYXNlIFwiQXNzaWdubWVudFBhdHRlcm5cIjpcbiAgICAgIGNhc2UgXCJSZXN0RWxlbWVudFwiOlxuICAgICAgICBicmVha1xuXG4gICAgICBjYXNlIFwiT2JqZWN0RXhwcmVzc2lvblwiOlxuICAgICAgICBub2RlLnR5cGUgPSBcIk9iamVjdFBhdHRlcm5cIjtcbiAgICAgICAgaWYgKHJlZkRlc3RydWN0dXJpbmdFcnJvcnMpIHsgdGhpcy5jaGVja1BhdHRlcm5FcnJvcnMocmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycywgdHJ1ZSk7IH1cbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxpc3QgPSBub2RlLnByb3BlcnRpZXM7IGkgPCBsaXN0Lmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgdmFyIHByb3AgPSBsaXN0W2ldO1xuXG4gICAgICAgIHRoaXMudG9Bc3NpZ25hYmxlKHByb3AsIGlzQmluZGluZyk7XG4gICAgICAgICAgLy8gRWFybHkgZXJyb3I6XG4gICAgICAgICAgLy8gICBBc3NpZ25tZW50UmVzdFByb3BlcnR5W1lpZWxkLCBBd2FpdF0gOlxuICAgICAgICAgIC8vICAgICBgLi4uYCBEZXN0cnVjdHVyaW5nQXNzaWdubWVudFRhcmdldFtZaWVsZCwgQXdhaXRdXG4gICAgICAgICAgLy9cbiAgICAgICAgICAvLyAgIEl0IGlzIGEgU3ludGF4IEVycm9yIGlmIHxEZXN0cnVjdHVyaW5nQXNzaWdubWVudFRhcmdldHwgaXMgYW4gfEFycmF5TGl0ZXJhbHwgb3IgYW4gfE9iamVjdExpdGVyYWx8LlxuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIHByb3AudHlwZSA9PT0gXCJSZXN0RWxlbWVudFwiICYmXG4gICAgICAgICAgICAocHJvcC5hcmd1bWVudC50eXBlID09PSBcIkFycmF5UGF0dGVyblwiIHx8IHByb3AuYXJndW1lbnQudHlwZSA9PT0gXCJPYmplY3RQYXR0ZXJuXCIpXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICB0aGlzLnJhaXNlKHByb3AuYXJndW1lbnQuc3RhcnQsIFwiVW5leHBlY3RlZCB0b2tlblwiKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWtcblxuICAgICAgY2FzZSBcIlByb3BlcnR5XCI6XG4gICAgICAgIC8vIEFzc2lnbm1lbnRQcm9wZXJ0eSBoYXMgdHlwZSA9PT0gXCJQcm9wZXJ0eVwiXG4gICAgICAgIGlmIChub2RlLmtpbmQgIT09IFwiaW5pdFwiKSB7IHRoaXMucmFpc2Uobm9kZS5rZXkuc3RhcnQsIFwiT2JqZWN0IHBhdHRlcm4gY2FuJ3QgY29udGFpbiBnZXR0ZXIgb3Igc2V0dGVyXCIpOyB9XG4gICAgICAgIHRoaXMudG9Bc3NpZ25hYmxlKG5vZGUudmFsdWUsIGlzQmluZGluZyk7XG4gICAgICAgIGJyZWFrXG5cbiAgICAgIGNhc2UgXCJBcnJheUV4cHJlc3Npb25cIjpcbiAgICAgICAgbm9kZS50eXBlID0gXCJBcnJheVBhdHRlcm5cIjtcbiAgICAgICAgaWYgKHJlZkRlc3RydWN0dXJpbmdFcnJvcnMpIHsgdGhpcy5jaGVja1BhdHRlcm5FcnJvcnMocmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycywgdHJ1ZSk7IH1cbiAgICAgICAgdGhpcy50b0Fzc2lnbmFibGVMaXN0KG5vZGUuZWxlbWVudHMsIGlzQmluZGluZyk7XG4gICAgICAgIGJyZWFrXG5cbiAgICAgIGNhc2UgXCJTcHJlYWRFbGVtZW50XCI6XG4gICAgICAgIG5vZGUudHlwZSA9IFwiUmVzdEVsZW1lbnRcIjtcbiAgICAgICAgdGhpcy50b0Fzc2lnbmFibGUobm9kZS5hcmd1bWVudCwgaXNCaW5kaW5nKTtcbiAgICAgICAgaWYgKG5vZGUuYXJndW1lbnQudHlwZSA9PT0gXCJBc3NpZ25tZW50UGF0dGVyblwiKVxuICAgICAgICAgIHsgdGhpcy5yYWlzZShub2RlLmFyZ3VtZW50LnN0YXJ0LCBcIlJlc3QgZWxlbWVudHMgY2Fubm90IGhhdmUgYSBkZWZhdWx0IHZhbHVlXCIpOyB9XG4gICAgICAgIGJyZWFrXG5cbiAgICAgIGNhc2UgXCJBc3NpZ25tZW50RXhwcmVzc2lvblwiOlxuICAgICAgICBpZiAobm9kZS5vcGVyYXRvciAhPT0gXCI9XCIpIHsgdGhpcy5yYWlzZShub2RlLmxlZnQuZW5kLCBcIk9ubHkgJz0nIG9wZXJhdG9yIGNhbiBiZSB1c2VkIGZvciBzcGVjaWZ5aW5nIGRlZmF1bHQgdmFsdWUuXCIpOyB9XG4gICAgICAgIG5vZGUudHlwZSA9IFwiQXNzaWdubWVudFBhdHRlcm5cIjtcbiAgICAgICAgZGVsZXRlIG5vZGUub3BlcmF0b3I7XG4gICAgICAgIHRoaXMudG9Bc3NpZ25hYmxlKG5vZGUubGVmdCwgaXNCaW5kaW5nKTtcbiAgICAgICAgYnJlYWtcblxuICAgICAgY2FzZSBcIlBhcmVudGhlc2l6ZWRFeHByZXNzaW9uXCI6XG4gICAgICAgIHRoaXMudG9Bc3NpZ25hYmxlKG5vZGUuZXhwcmVzc2lvbiwgaXNCaW5kaW5nLCByZWZEZXN0cnVjdHVyaW5nRXJyb3JzKTtcbiAgICAgICAgYnJlYWtcblxuICAgICAgY2FzZSBcIkNoYWluRXhwcmVzc2lvblwiOlxuICAgICAgICB0aGlzLnJhaXNlUmVjb3ZlcmFibGUobm9kZS5zdGFydCwgXCJPcHRpb25hbCBjaGFpbmluZyBjYW5ub3QgYXBwZWFyIGluIGxlZnQtaGFuZCBzaWRlXCIpO1xuICAgICAgICBicmVha1xuXG4gICAgICBjYXNlIFwiTWVtYmVyRXhwcmVzc2lvblwiOlxuICAgICAgICBpZiAoIWlzQmluZGluZykgeyBicmVhayB9XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRoaXMucmFpc2Uobm9kZS5zdGFydCwgXCJBc3NpZ25pbmcgdG8gcnZhbHVlXCIpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAocmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycykgeyB0aGlzLmNoZWNrUGF0dGVybkVycm9ycyhyZWZEZXN0cnVjdHVyaW5nRXJyb3JzLCB0cnVlKTsgfVxuICAgIHJldHVybiBub2RlXG4gIH07XG5cbiAgLy8gQ29udmVydCBsaXN0IG9mIGV4cHJlc3Npb24gYXRvbXMgdG8gYmluZGluZyBsaXN0LlxuXG4gIHBwJDIudG9Bc3NpZ25hYmxlTGlzdCA9IGZ1bmN0aW9uKGV4cHJMaXN0LCBpc0JpbmRpbmcpIHtcbiAgICB2YXIgZW5kID0gZXhwckxpc3QubGVuZ3RoO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZW5kOyBpKyspIHtcbiAgICAgIHZhciBlbHQgPSBleHByTGlzdFtpXTtcbiAgICAgIGlmIChlbHQpIHsgdGhpcy50b0Fzc2lnbmFibGUoZWx0LCBpc0JpbmRpbmcpOyB9XG4gICAgfVxuICAgIGlmIChlbmQpIHtcbiAgICAgIHZhciBsYXN0ID0gZXhwckxpc3RbZW5kIC0gMV07XG4gICAgICBpZiAodGhpcy5vcHRpb25zLmVjbWFWZXJzaW9uID09PSA2ICYmIGlzQmluZGluZyAmJiBsYXN0ICYmIGxhc3QudHlwZSA9PT0gXCJSZXN0RWxlbWVudFwiICYmIGxhc3QuYXJndW1lbnQudHlwZSAhPT0gXCJJZGVudGlmaWVyXCIpXG4gICAgICAgIHsgdGhpcy51bmV4cGVjdGVkKGxhc3QuYXJndW1lbnQuc3RhcnQpOyB9XG4gICAgfVxuICAgIHJldHVybiBleHByTGlzdFxuICB9O1xuXG4gIC8vIFBhcnNlcyBzcHJlYWQgZWxlbWVudC5cblxuICBwcCQyLnBhcnNlU3ByZWFkID0gZnVuY3Rpb24ocmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycykge1xuICAgIHZhciBub2RlID0gdGhpcy5zdGFydE5vZGUoKTtcbiAgICB0aGlzLm5leHQoKTtcbiAgICBub2RlLmFyZ3VtZW50ID0gdGhpcy5wYXJzZU1heWJlQXNzaWduKGZhbHNlLCByZWZEZXN0cnVjdHVyaW5nRXJyb3JzKTtcbiAgICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsIFwiU3ByZWFkRWxlbWVudFwiKVxuICB9O1xuXG4gIHBwJDIucGFyc2VSZXN0QmluZGluZyA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBub2RlID0gdGhpcy5zdGFydE5vZGUoKTtcbiAgICB0aGlzLm5leHQoKTtcblxuICAgIC8vIFJlc3RFbGVtZW50IGluc2lkZSBvZiBhIGZ1bmN0aW9uIHBhcmFtZXRlciBtdXN0IGJlIGFuIGlkZW50aWZpZXJcbiAgICBpZiAodGhpcy5vcHRpb25zLmVjbWFWZXJzaW9uID09PSA2ICYmIHRoaXMudHlwZSAhPT0gdHlwZXMubmFtZSlcbiAgICAgIHsgdGhpcy51bmV4cGVjdGVkKCk7IH1cblxuICAgIG5vZGUuYXJndW1lbnQgPSB0aGlzLnBhcnNlQmluZGluZ0F0b20oKTtcblxuICAgIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJSZXN0RWxlbWVudFwiKVxuICB9O1xuXG4gIC8vIFBhcnNlcyBsdmFsdWUgKGFzc2lnbmFibGUpIGF0b20uXG5cbiAgcHAkMi5wYXJzZUJpbmRpbmdBdG9tID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMub3B0aW9ucy5lY21hVmVyc2lvbiA+PSA2KSB7XG4gICAgICBzd2l0Y2ggKHRoaXMudHlwZSkge1xuICAgICAgY2FzZSB0eXBlcy5icmFja2V0TDpcbiAgICAgICAgdmFyIG5vZGUgPSB0aGlzLnN0YXJ0Tm9kZSgpO1xuICAgICAgICB0aGlzLm5leHQoKTtcbiAgICAgICAgbm9kZS5lbGVtZW50cyA9IHRoaXMucGFyc2VCaW5kaW5nTGlzdCh0eXBlcy5icmFja2V0UiwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJBcnJheVBhdHRlcm5cIilcblxuICAgICAgY2FzZSB0eXBlcy5icmFjZUw6XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlT2JqKHRydWUpXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnBhcnNlSWRlbnQoKVxuICB9O1xuXG4gIHBwJDIucGFyc2VCaW5kaW5nTGlzdCA9IGZ1bmN0aW9uKGNsb3NlLCBhbGxvd0VtcHR5LCBhbGxvd1RyYWlsaW5nQ29tbWEpIHtcbiAgICB2YXIgZWx0cyA9IFtdLCBmaXJzdCA9IHRydWU7XG4gICAgd2hpbGUgKCF0aGlzLmVhdChjbG9zZSkpIHtcbiAgICAgIGlmIChmaXJzdCkgeyBmaXJzdCA9IGZhbHNlOyB9XG4gICAgICBlbHNlIHsgdGhpcy5leHBlY3QodHlwZXMuY29tbWEpOyB9XG4gICAgICBpZiAoYWxsb3dFbXB0eSAmJiB0aGlzLnR5cGUgPT09IHR5cGVzLmNvbW1hKSB7XG4gICAgICAgIGVsdHMucHVzaChudWxsKTtcbiAgICAgIH0gZWxzZSBpZiAoYWxsb3dUcmFpbGluZ0NvbW1hICYmIHRoaXMuYWZ0ZXJUcmFpbGluZ0NvbW1hKGNsb3NlKSkge1xuICAgICAgICBicmVha1xuICAgICAgfSBlbHNlIGlmICh0aGlzLnR5cGUgPT09IHR5cGVzLmVsbGlwc2lzKSB7XG4gICAgICAgIHZhciByZXN0ID0gdGhpcy5wYXJzZVJlc3RCaW5kaW5nKCk7XG4gICAgICAgIHRoaXMucGFyc2VCaW5kaW5nTGlzdEl0ZW0ocmVzdCk7XG4gICAgICAgIGVsdHMucHVzaChyZXN0KTtcbiAgICAgICAgaWYgKHRoaXMudHlwZSA9PT0gdHlwZXMuY29tbWEpIHsgdGhpcy5yYWlzZSh0aGlzLnN0YXJ0LCBcIkNvbW1hIGlzIG5vdCBwZXJtaXR0ZWQgYWZ0ZXIgdGhlIHJlc3QgZWxlbWVudFwiKTsgfVxuICAgICAgICB0aGlzLmV4cGVjdChjbG9zZSk7XG4gICAgICAgIGJyZWFrXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgZWxlbSA9IHRoaXMucGFyc2VNYXliZURlZmF1bHQodGhpcy5zdGFydCwgdGhpcy5zdGFydExvYyk7XG4gICAgICAgIHRoaXMucGFyc2VCaW5kaW5nTGlzdEl0ZW0oZWxlbSk7XG4gICAgICAgIGVsdHMucHVzaChlbGVtKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGVsdHNcbiAgfTtcblxuICBwcCQyLnBhcnNlQmluZGluZ0xpc3RJdGVtID0gZnVuY3Rpb24ocGFyYW0pIHtcbiAgICByZXR1cm4gcGFyYW1cbiAgfTtcblxuICAvLyBQYXJzZXMgYXNzaWdubWVudCBwYXR0ZXJuIGFyb3VuZCBnaXZlbiBhdG9tIGlmIHBvc3NpYmxlLlxuXG4gIHBwJDIucGFyc2VNYXliZURlZmF1bHQgPSBmdW5jdGlvbihzdGFydFBvcywgc3RhcnRMb2MsIGxlZnQpIHtcbiAgICBsZWZ0ID0gbGVmdCB8fCB0aGlzLnBhcnNlQmluZGluZ0F0b20oKTtcbiAgICBpZiAodGhpcy5vcHRpb25zLmVjbWFWZXJzaW9uIDwgNiB8fCAhdGhpcy5lYXQodHlwZXMuZXEpKSB7IHJldHVybiBsZWZ0IH1cbiAgICB2YXIgbm9kZSA9IHRoaXMuc3RhcnROb2RlQXQoc3RhcnRQb3MsIHN0YXJ0TG9jKTtcbiAgICBub2RlLmxlZnQgPSBsZWZ0O1xuICAgIG5vZGUucmlnaHQgPSB0aGlzLnBhcnNlTWF5YmVBc3NpZ24oKTtcbiAgICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsIFwiQXNzaWdubWVudFBhdHRlcm5cIilcbiAgfTtcblxuICAvLyBUaGUgZm9sbG93aW5nIHRocmVlIGZ1bmN0aW9ucyBhbGwgdmVyaWZ5IHRoYXQgYSBub2RlIGlzIGFuIGx2YWx1ZSDigJRcbiAgLy8gc29tZXRoaW5nIHRoYXQgY2FuIGJlIGJvdW5kLCBvciBhc3NpZ25lZCB0by4gSW4gb3JkZXIgdG8gZG8gc28sIHRoZXkgcGVyZm9ybVxuICAvLyBhIHZhcmlldHkgb2YgY2hlY2tzOlxuICAvL1xuICAvLyAtIENoZWNrIHRoYXQgbm9uZSBvZiB0aGUgYm91bmQvYXNzaWduZWQtdG8gaWRlbnRpZmllcnMgYXJlIHJlc2VydmVkIHdvcmRzLlxuICAvLyAtIFJlY29yZCBuYW1lIGRlY2xhcmF0aW9ucyBmb3IgYmluZGluZ3MgaW4gdGhlIGFwcHJvcHJpYXRlIHNjb3BlLlxuICAvLyAtIENoZWNrIGR1cGxpY2F0ZSBhcmd1bWVudCBuYW1lcywgaWYgY2hlY2tDbGFzaGVzIGlzIHNldC5cbiAgLy9cbiAgLy8gSWYgYSBjb21wbGV4IGJpbmRpbmcgcGF0dGVybiBpcyBlbmNvdW50ZXJlZCAoZS5nLiwgb2JqZWN0IGFuZCBhcnJheVxuICAvLyBkZXN0cnVjdHVyaW5nKSwgdGhlIGVudGlyZSBwYXR0ZXJuIGlzIHJlY3Vyc2l2ZWx5IGNoZWNrZWQuXG4gIC8vXG4gIC8vIFRoZXJlIGFyZSB0aHJlZSB2ZXJzaW9ucyBvZiBjaGVja0xWYWwqKCkgYXBwcm9wcmlhdGUgZm9yIGRpZmZlcmVudFxuICAvLyBjaXJjdW1zdGFuY2VzOlxuICAvL1xuICAvLyAtIGNoZWNrTFZhbFNpbXBsZSgpIHNoYWxsIGJlIHVzZWQgaWYgdGhlIHN5bnRhY3RpYyBjb25zdHJ1Y3Qgc3VwcG9ydHNcbiAgLy8gICBub3RoaW5nIG90aGVyIHRoYW4gaWRlbnRpZmllcnMgYW5kIG1lbWJlciBleHByZXNzaW9ucy4gUGFyZW50aGVzaXplZFxuICAvLyAgIGV4cHJlc3Npb25zIGFyZSBhbHNvIGNvcnJlY3RseSBoYW5kbGVkLiBUaGlzIGlzIGdlbmVyYWxseSBhcHByb3ByaWF0ZSBmb3JcbiAgLy8gICBjb25zdHJ1Y3RzIGZvciB3aGljaCB0aGUgc3BlYyBzYXlzXG4gIC8vXG4gIC8vICAgPiBJdCBpcyBhIFN5bnRheCBFcnJvciBpZiBBc3NpZ25tZW50VGFyZ2V0VHlwZSBvZiBbdGhlIHByb2R1Y3Rpb25dIGlzIG5vdFxuICAvLyAgID4gc2ltcGxlLlxuICAvL1xuICAvLyAgIEl0IGlzIGFsc28gYXBwcm9wcmlhdGUgZm9yIGNoZWNraW5nIGlmIGFuIGlkZW50aWZpZXIgaXMgdmFsaWQgYW5kIG5vdFxuICAvLyAgIGRlZmluZWQgZWxzZXdoZXJlLCBsaWtlIGltcG9ydCBkZWNsYXJhdGlvbnMgb3IgZnVuY3Rpb24vY2xhc3MgaWRlbnRpZmllcnMuXG4gIC8vXG4gIC8vICAgRXhhbXBsZXMgd2hlcmUgdGhpcyBpcyB1c2VkIGluY2x1ZGU6XG4gIC8vICAgICBhICs9IOKApjtcbiAgLy8gICAgIGltcG9ydCBhIGZyb20gJ+KApic7XG4gIC8vICAgd2hlcmUgYSBpcyB0aGUgbm9kZSB0byBiZSBjaGVja2VkLlxuICAvL1xuICAvLyAtIGNoZWNrTFZhbFBhdHRlcm4oKSBzaGFsbCBiZSB1c2VkIGlmIHRoZSBzeW50YWN0aWMgY29uc3RydWN0IHN1cHBvcnRzXG4gIC8vICAgYW55dGhpbmcgY2hlY2tMVmFsU2ltcGxlKCkgc3VwcG9ydHMsIGFzIHdlbGwgYXMgb2JqZWN0IGFuZCBhcnJheVxuICAvLyAgIGRlc3RydWN0dXJpbmcgcGF0dGVybnMuIFRoaXMgaXMgZ2VuZXJhbGx5IGFwcHJvcHJpYXRlIGZvciBjb25zdHJ1Y3RzIGZvclxuICAvLyAgIHdoaWNoIHRoZSBzcGVjIHNheXNcbiAgLy9cbiAgLy8gICA+IEl0IGlzIGEgU3ludGF4IEVycm9yIGlmIFt0aGUgcHJvZHVjdGlvbl0gaXMgbmVpdGhlciBhbiBPYmplY3RMaXRlcmFsIG5vclxuICAvLyAgID4gYW4gQXJyYXlMaXRlcmFsIGFuZCBBc3NpZ25tZW50VGFyZ2V0VHlwZSBvZiBbdGhlIHByb2R1Y3Rpb25dIGlzIG5vdFxuICAvLyAgID4gc2ltcGxlLlxuICAvL1xuICAvLyAgIEV4YW1wbGVzIHdoZXJlIHRoaXMgaXMgdXNlZCBpbmNsdWRlOlxuICAvLyAgICAgKGEgPSDigKYpO1xuICAvLyAgICAgY29uc3QgYSA9IOKApjtcbiAgLy8gICAgIHRyeSB7IOKApiB9IGNhdGNoIChhKSB7IOKApiB9XG4gIC8vICAgd2hlcmUgYSBpcyB0aGUgbm9kZSB0byBiZSBjaGVja2VkLlxuICAvL1xuICAvLyAtIGNoZWNrTFZhbElubmVyUGF0dGVybigpIHNoYWxsIGJlIHVzZWQgaWYgdGhlIHN5bnRhY3RpYyBjb25zdHJ1Y3Qgc3VwcG9ydHNcbiAgLy8gICBhbnl0aGluZyBjaGVja0xWYWxQYXR0ZXJuKCkgc3VwcG9ydHMsIGFzIHdlbGwgYXMgZGVmYXVsdCBhc3NpZ25tZW50XG4gIC8vICAgcGF0dGVybnMsIHJlc3QgZWxlbWVudHMsIGFuZCBvdGhlciBjb25zdHJ1Y3RzIHRoYXQgbWF5IGFwcGVhciB3aXRoaW4gYW5cbiAgLy8gICBvYmplY3Qgb3IgYXJyYXkgZGVzdHJ1Y3R1cmluZyBwYXR0ZXJuLlxuICAvL1xuICAvLyAgIEFzIGEgc3BlY2lhbCBjYXNlLCBmdW5jdGlvbiBwYXJhbWV0ZXJzIGFsc28gdXNlIGNoZWNrTFZhbElubmVyUGF0dGVybigpLFxuICAvLyAgIGFzIHRoZXkgYWxzbyBzdXBwb3J0IGRlZmF1bHRzIGFuZCByZXN0IGNvbnN0cnVjdHMuXG4gIC8vXG4gIC8vIFRoZXNlIGZ1bmN0aW9ucyBkZWxpYmVyYXRlbHkgc3VwcG9ydCBib3RoIGFzc2lnbm1lbnQgYW5kIGJpbmRpbmcgY29uc3RydWN0cyxcbiAgLy8gYXMgdGhlIGxvZ2ljIGZvciBib3RoIGlzIGV4Y2VlZGluZ2x5IHNpbWlsYXIuIElmIHRoZSBub2RlIGlzIHRoZSB0YXJnZXQgb2ZcbiAgLy8gYW4gYXNzaWdubWVudCwgdGhlbiBiaW5kaW5nVHlwZSBzaG91bGQgYmUgc2V0IHRvIEJJTkRfTk9ORS4gT3RoZXJ3aXNlLCBpdFxuICAvLyBzaG91bGQgYmUgc2V0IHRvIHRoZSBhcHByb3ByaWF0ZSBCSU5EXyogY29uc3RhbnQsIGxpa2UgQklORF9WQVIgb3JcbiAgLy8gQklORF9MRVhJQ0FMLlxuICAvL1xuICAvLyBJZiB0aGUgZnVuY3Rpb24gaXMgY2FsbGVkIHdpdGggYSBub24tQklORF9OT05FIGJpbmRpbmdUeXBlLCB0aGVuXG4gIC8vIGFkZGl0aW9uYWxseSBhIGNoZWNrQ2xhc2hlcyBvYmplY3QgbWF5IGJlIHNwZWNpZmllZCB0byBhbGxvdyBjaGVja2luZyBmb3JcbiAgLy8gZHVwbGljYXRlIGFyZ3VtZW50IG5hbWVzLiBjaGVja0NsYXNoZXMgaXMgaWdub3JlZCBpZiB0aGUgcHJvdmlkZWQgY29uc3RydWN0XG4gIC8vIGlzIGFuIGFzc2lnbm1lbnQgKGkuZS4sIGJpbmRpbmdUeXBlIGlzIEJJTkRfTk9ORSkuXG5cbiAgcHAkMi5jaGVja0xWYWxTaW1wbGUgPSBmdW5jdGlvbihleHByLCBiaW5kaW5nVHlwZSwgY2hlY2tDbGFzaGVzKSB7XG4gICAgaWYgKCBiaW5kaW5nVHlwZSA9PT0gdm9pZCAwICkgYmluZGluZ1R5cGUgPSBCSU5EX05PTkU7XG5cbiAgICB2YXIgaXNCaW5kID0gYmluZGluZ1R5cGUgIT09IEJJTkRfTk9ORTtcblxuICAgIHN3aXRjaCAoZXhwci50eXBlKSB7XG4gICAgY2FzZSBcIklkZW50aWZpZXJcIjpcbiAgICAgIGlmICh0aGlzLnN0cmljdCAmJiB0aGlzLnJlc2VydmVkV29yZHNTdHJpY3RCaW5kLnRlc3QoZXhwci5uYW1lKSlcbiAgICAgICAgeyB0aGlzLnJhaXNlUmVjb3ZlcmFibGUoZXhwci5zdGFydCwgKGlzQmluZCA/IFwiQmluZGluZyBcIiA6IFwiQXNzaWduaW5nIHRvIFwiKSArIGV4cHIubmFtZSArIFwiIGluIHN0cmljdCBtb2RlXCIpOyB9XG4gICAgICBpZiAoaXNCaW5kKSB7XG4gICAgICAgIGlmIChiaW5kaW5nVHlwZSA9PT0gQklORF9MRVhJQ0FMICYmIGV4cHIubmFtZSA9PT0gXCJsZXRcIilcbiAgICAgICAgICB7IHRoaXMucmFpc2VSZWNvdmVyYWJsZShleHByLnN0YXJ0LCBcImxldCBpcyBkaXNhbGxvd2VkIGFzIGEgbGV4aWNhbGx5IGJvdW5kIG5hbWVcIik7IH1cbiAgICAgICAgaWYgKGNoZWNrQ2xhc2hlcykge1xuICAgICAgICAgIGlmIChoYXMoY2hlY2tDbGFzaGVzLCBleHByLm5hbWUpKVxuICAgICAgICAgICAgeyB0aGlzLnJhaXNlUmVjb3ZlcmFibGUoZXhwci5zdGFydCwgXCJBcmd1bWVudCBuYW1lIGNsYXNoXCIpOyB9XG4gICAgICAgICAgY2hlY2tDbGFzaGVzW2V4cHIubmFtZV0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChiaW5kaW5nVHlwZSAhPT0gQklORF9PVVRTSURFKSB7IHRoaXMuZGVjbGFyZU5hbWUoZXhwci5uYW1lLCBiaW5kaW5nVHlwZSwgZXhwci5zdGFydCk7IH1cbiAgICAgIH1cbiAgICAgIGJyZWFrXG5cbiAgICBjYXNlIFwiQ2hhaW5FeHByZXNzaW9uXCI6XG4gICAgICB0aGlzLnJhaXNlUmVjb3ZlcmFibGUoZXhwci5zdGFydCwgXCJPcHRpb25hbCBjaGFpbmluZyBjYW5ub3QgYXBwZWFyIGluIGxlZnQtaGFuZCBzaWRlXCIpO1xuICAgICAgYnJlYWtcblxuICAgIGNhc2UgXCJNZW1iZXJFeHByZXNzaW9uXCI6XG4gICAgICBpZiAoaXNCaW5kKSB7IHRoaXMucmFpc2VSZWNvdmVyYWJsZShleHByLnN0YXJ0LCBcIkJpbmRpbmcgbWVtYmVyIGV4cHJlc3Npb25cIik7IH1cbiAgICAgIGJyZWFrXG5cbiAgICBjYXNlIFwiUGFyZW50aGVzaXplZEV4cHJlc3Npb25cIjpcbiAgICAgIGlmIChpc0JpbmQpIHsgdGhpcy5yYWlzZVJlY292ZXJhYmxlKGV4cHIuc3RhcnQsIFwiQmluZGluZyBwYXJlbnRoZXNpemVkIGV4cHJlc3Npb25cIik7IH1cbiAgICAgIHJldHVybiB0aGlzLmNoZWNrTFZhbFNpbXBsZShleHByLmV4cHJlc3Npb24sIGJpbmRpbmdUeXBlLCBjaGVja0NsYXNoZXMpXG5cbiAgICBkZWZhdWx0OlxuICAgICAgdGhpcy5yYWlzZShleHByLnN0YXJ0LCAoaXNCaW5kID8gXCJCaW5kaW5nXCIgOiBcIkFzc2lnbmluZyB0b1wiKSArIFwiIHJ2YWx1ZVwiKTtcbiAgICB9XG4gIH07XG5cbiAgcHAkMi5jaGVja0xWYWxQYXR0ZXJuID0gZnVuY3Rpb24oZXhwciwgYmluZGluZ1R5cGUsIGNoZWNrQ2xhc2hlcykge1xuICAgIGlmICggYmluZGluZ1R5cGUgPT09IHZvaWQgMCApIGJpbmRpbmdUeXBlID0gQklORF9OT05FO1xuXG4gICAgc3dpdGNoIChleHByLnR5cGUpIHtcbiAgICBjYXNlIFwiT2JqZWN0UGF0dGVyblwiOlxuICAgICAgZm9yICh2YXIgaSA9IDAsIGxpc3QgPSBleHByLnByb3BlcnRpZXM7IGkgPCBsaXN0Lmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIHZhciBwcm9wID0gbGlzdFtpXTtcblxuICAgICAgdGhpcy5jaGVja0xWYWxJbm5lclBhdHRlcm4ocHJvcCwgYmluZGluZ1R5cGUsIGNoZWNrQ2xhc2hlcyk7XG4gICAgICB9XG4gICAgICBicmVha1xuXG4gICAgY2FzZSBcIkFycmF5UGF0dGVyblwiOlxuICAgICAgZm9yICh2YXIgaSQxID0gMCwgbGlzdCQxID0gZXhwci5lbGVtZW50czsgaSQxIDwgbGlzdCQxLmxlbmd0aDsgaSQxICs9IDEpIHtcbiAgICAgICAgdmFyIGVsZW0gPSBsaXN0JDFbaSQxXTtcblxuICAgICAgaWYgKGVsZW0pIHsgdGhpcy5jaGVja0xWYWxJbm5lclBhdHRlcm4oZWxlbSwgYmluZGluZ1R5cGUsIGNoZWNrQ2xhc2hlcyk7IH1cbiAgICAgIH1cbiAgICAgIGJyZWFrXG5cbiAgICBkZWZhdWx0OlxuICAgICAgdGhpcy5jaGVja0xWYWxTaW1wbGUoZXhwciwgYmluZGluZ1R5cGUsIGNoZWNrQ2xhc2hlcyk7XG4gICAgfVxuICB9O1xuXG4gIHBwJDIuY2hlY2tMVmFsSW5uZXJQYXR0ZXJuID0gZnVuY3Rpb24oZXhwciwgYmluZGluZ1R5cGUsIGNoZWNrQ2xhc2hlcykge1xuICAgIGlmICggYmluZGluZ1R5cGUgPT09IHZvaWQgMCApIGJpbmRpbmdUeXBlID0gQklORF9OT05FO1xuXG4gICAgc3dpdGNoIChleHByLnR5cGUpIHtcbiAgICBjYXNlIFwiUHJvcGVydHlcIjpcbiAgICAgIC8vIEFzc2lnbm1lbnRQcm9wZXJ0eSBoYXMgdHlwZSA9PT0gXCJQcm9wZXJ0eVwiXG4gICAgICB0aGlzLmNoZWNrTFZhbElubmVyUGF0dGVybihleHByLnZhbHVlLCBiaW5kaW5nVHlwZSwgY2hlY2tDbGFzaGVzKTtcbiAgICAgIGJyZWFrXG5cbiAgICBjYXNlIFwiQXNzaWdubWVudFBhdHRlcm5cIjpcbiAgICAgIHRoaXMuY2hlY2tMVmFsUGF0dGVybihleHByLmxlZnQsIGJpbmRpbmdUeXBlLCBjaGVja0NsYXNoZXMpO1xuICAgICAgYnJlYWtcblxuICAgIGNhc2UgXCJSZXN0RWxlbWVudFwiOlxuICAgICAgdGhpcy5jaGVja0xWYWxQYXR0ZXJuKGV4cHIuYXJndW1lbnQsIGJpbmRpbmdUeXBlLCBjaGVja0NsYXNoZXMpO1xuICAgICAgYnJlYWtcblxuICAgIGRlZmF1bHQ6XG4gICAgICB0aGlzLmNoZWNrTFZhbFBhdHRlcm4oZXhwciwgYmluZGluZ1R5cGUsIGNoZWNrQ2xhc2hlcyk7XG4gICAgfVxuICB9O1xuXG4gIC8vIEEgcmVjdXJzaXZlIGRlc2NlbnQgcGFyc2VyIG9wZXJhdGVzIGJ5IGRlZmluaW5nIGZ1bmN0aW9ucyBmb3IgYWxsXG5cbiAgdmFyIHBwJDMgPSBQYXJzZXIucHJvdG90eXBlO1xuXG4gIC8vIENoZWNrIGlmIHByb3BlcnR5IG5hbWUgY2xhc2hlcyB3aXRoIGFscmVhZHkgYWRkZWQuXG4gIC8vIE9iamVjdC9jbGFzcyBnZXR0ZXJzIGFuZCBzZXR0ZXJzIGFyZSBub3QgYWxsb3dlZCB0byBjbGFzaCDigJRcbiAgLy8gZWl0aGVyIHdpdGggZWFjaCBvdGhlciBvciB3aXRoIGFuIGluaXQgcHJvcGVydHkg4oCUIGFuZCBpblxuICAvLyBzdHJpY3QgbW9kZSwgaW5pdCBwcm9wZXJ0aWVzIGFyZSBhbHNvIG5vdCBhbGxvd2VkIHRvIGJlIHJlcGVhdGVkLlxuXG4gIHBwJDMuY2hlY2tQcm9wQ2xhc2ggPSBmdW5jdGlvbihwcm9wLCBwcm9wSGFzaCwgcmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycykge1xuICAgIGlmICh0aGlzLm9wdGlvbnMuZWNtYVZlcnNpb24gPj0gOSAmJiBwcm9wLnR5cGUgPT09IFwiU3ByZWFkRWxlbWVudFwiKVxuICAgICAgeyByZXR1cm4gfVxuICAgIGlmICh0aGlzLm9wdGlvbnMuZWNtYVZlcnNpb24gPj0gNiAmJiAocHJvcC5jb21wdXRlZCB8fCBwcm9wLm1ldGhvZCB8fCBwcm9wLnNob3J0aGFuZCkpXG4gICAgICB7IHJldHVybiB9XG4gICAgdmFyIGtleSA9IHByb3Aua2V5O1xuICAgIHZhciBuYW1lO1xuICAgIHN3aXRjaCAoa2V5LnR5cGUpIHtcbiAgICBjYXNlIFwiSWRlbnRpZmllclwiOiBuYW1lID0ga2V5Lm5hbWU7IGJyZWFrXG4gICAgY2FzZSBcIkxpdGVyYWxcIjogbmFtZSA9IFN0cmluZyhrZXkudmFsdWUpOyBicmVha1xuICAgIGRlZmF1bHQ6IHJldHVyblxuICAgIH1cbiAgICB2YXIga2luZCA9IHByb3Aua2luZDtcbiAgICBpZiAodGhpcy5vcHRpb25zLmVjbWFWZXJzaW9uID49IDYpIHtcbiAgICAgIGlmIChuYW1lID09PSBcIl9fcHJvdG9fX1wiICYmIGtpbmQgPT09IFwiaW5pdFwiKSB7XG4gICAgICAgIGlmIChwcm9wSGFzaC5wcm90bykge1xuICAgICAgICAgIGlmIChyZWZEZXN0cnVjdHVyaW5nRXJyb3JzKSB7XG4gICAgICAgICAgICBpZiAocmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycy5kb3VibGVQcm90byA8IDApXG4gICAgICAgICAgICAgIHsgcmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycy5kb3VibGVQcm90byA9IGtleS5zdGFydDsgfVxuICAgICAgICAgICAgLy8gQmFja3dhcmRzLWNvbXBhdCBrbHVkZ2UuIENhbiBiZSByZW1vdmVkIGluIHZlcnNpb24gNi4wXG4gICAgICAgICAgfSBlbHNlIHsgdGhpcy5yYWlzZVJlY292ZXJhYmxlKGtleS5zdGFydCwgXCJSZWRlZmluaXRpb24gb2YgX19wcm90b19fIHByb3BlcnR5XCIpOyB9XG4gICAgICAgIH1cbiAgICAgICAgcHJvcEhhc2gucHJvdG8gPSB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIG5hbWUgPSBcIiRcIiArIG5hbWU7XG4gICAgdmFyIG90aGVyID0gcHJvcEhhc2hbbmFtZV07XG4gICAgaWYgKG90aGVyKSB7XG4gICAgICB2YXIgcmVkZWZpbml0aW9uO1xuICAgICAgaWYgKGtpbmQgPT09IFwiaW5pdFwiKSB7XG4gICAgICAgIHJlZGVmaW5pdGlvbiA9IHRoaXMuc3RyaWN0ICYmIG90aGVyLmluaXQgfHwgb3RoZXIuZ2V0IHx8IG90aGVyLnNldDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlZGVmaW5pdGlvbiA9IG90aGVyLmluaXQgfHwgb3RoZXJba2luZF07XG4gICAgICB9XG4gICAgICBpZiAocmVkZWZpbml0aW9uKVxuICAgICAgICB7IHRoaXMucmFpc2VSZWNvdmVyYWJsZShrZXkuc3RhcnQsIFwiUmVkZWZpbml0aW9uIG9mIHByb3BlcnR5XCIpOyB9XG4gICAgfSBlbHNlIHtcbiAgICAgIG90aGVyID0gcHJvcEhhc2hbbmFtZV0gPSB7XG4gICAgICAgIGluaXQ6IGZhbHNlLFxuICAgICAgICBnZXQ6IGZhbHNlLFxuICAgICAgICBzZXQ6IGZhbHNlXG4gICAgICB9O1xuICAgIH1cbiAgICBvdGhlcltraW5kXSA9IHRydWU7XG4gIH07XG5cbiAgLy8gIyMjIEV4cHJlc3Npb24gcGFyc2luZ1xuXG4gIC8vIFRoZXNlIG5lc3QsIGZyb20gdGhlIG1vc3QgZ2VuZXJhbCBleHByZXNzaW9uIHR5cGUgYXQgdGhlIHRvcCB0b1xuICAvLyAnYXRvbWljJywgbm9uZGl2aXNpYmxlIGV4cHJlc3Npb24gdHlwZXMgYXQgdGhlIGJvdHRvbS4gTW9zdCBvZlxuICAvLyB0aGUgZnVuY3Rpb25zIHdpbGwgc2ltcGx5IGxldCB0aGUgZnVuY3Rpb24ocykgYmVsb3cgdGhlbSBwYXJzZSxcbiAgLy8gYW5kLCAqaWYqIHRoZSBzeW50YWN0aWMgY29uc3RydWN0IHRoZXkgaGFuZGxlIGlzIHByZXNlbnQsIHdyYXBcbiAgLy8gdGhlIEFTVCBub2RlIHRoYXQgdGhlIGlubmVyIHBhcnNlciBnYXZlIHRoZW0gaW4gYW5vdGhlciBub2RlLlxuXG4gIC8vIFBhcnNlIGEgZnVsbCBleHByZXNzaW9uLiBUaGUgb3B0aW9uYWwgYXJndW1lbnRzIGFyZSB1c2VkIHRvXG4gIC8vIGZvcmJpZCB0aGUgYGluYCBvcGVyYXRvciAoaW4gZm9yIGxvb3BzIGluaXRhbGl6YXRpb24gZXhwcmVzc2lvbnMpXG4gIC8vIGFuZCBwcm92aWRlIHJlZmVyZW5jZSBmb3Igc3RvcmluZyAnPScgb3BlcmF0b3IgaW5zaWRlIHNob3J0aGFuZFxuICAvLyBwcm9wZXJ0eSBhc3NpZ25tZW50IGluIGNvbnRleHRzIHdoZXJlIGJvdGggb2JqZWN0IGV4cHJlc3Npb25cbiAgLy8gYW5kIG9iamVjdCBwYXR0ZXJuIG1pZ2h0IGFwcGVhciAoc28gaXQncyBwb3NzaWJsZSB0byByYWlzZVxuICAvLyBkZWxheWVkIHN5bnRheCBlcnJvciBhdCBjb3JyZWN0IHBvc2l0aW9uKS5cblxuICBwcCQzLnBhcnNlRXhwcmVzc2lvbiA9IGZ1bmN0aW9uKGZvckluaXQsIHJlZkRlc3RydWN0dXJpbmdFcnJvcnMpIHtcbiAgICB2YXIgc3RhcnRQb3MgPSB0aGlzLnN0YXJ0LCBzdGFydExvYyA9IHRoaXMuc3RhcnRMb2M7XG4gICAgdmFyIGV4cHIgPSB0aGlzLnBhcnNlTWF5YmVBc3NpZ24oZm9ySW5pdCwgcmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycyk7XG4gICAgaWYgKHRoaXMudHlwZSA9PT0gdHlwZXMuY29tbWEpIHtcbiAgICAgIHZhciBub2RlID0gdGhpcy5zdGFydE5vZGVBdChzdGFydFBvcywgc3RhcnRMb2MpO1xuICAgICAgbm9kZS5leHByZXNzaW9ucyA9IFtleHByXTtcbiAgICAgIHdoaWxlICh0aGlzLmVhdCh0eXBlcy5jb21tYSkpIHsgbm9kZS5leHByZXNzaW9ucy5wdXNoKHRoaXMucGFyc2VNYXliZUFzc2lnbihmb3JJbml0LCByZWZEZXN0cnVjdHVyaW5nRXJyb3JzKSk7IH1cbiAgICAgIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJTZXF1ZW5jZUV4cHJlc3Npb25cIilcbiAgICB9XG4gICAgcmV0dXJuIGV4cHJcbiAgfTtcblxuICAvLyBQYXJzZSBhbiBhc3NpZ25tZW50IGV4cHJlc3Npb24uIFRoaXMgaW5jbHVkZXMgYXBwbGljYXRpb25zIG9mXG4gIC8vIG9wZXJhdG9ycyBsaWtlIGArPWAuXG5cbiAgcHAkMy5wYXJzZU1heWJlQXNzaWduID0gZnVuY3Rpb24oZm9ySW5pdCwgcmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycywgYWZ0ZXJMZWZ0UGFyc2UpIHtcbiAgICBpZiAodGhpcy5pc0NvbnRleHR1YWwoXCJ5aWVsZFwiKSkge1xuICAgICAgaWYgKHRoaXMuaW5HZW5lcmF0b3IpIHsgcmV0dXJuIHRoaXMucGFyc2VZaWVsZChmb3JJbml0KSB9XG4gICAgICAvLyBUaGUgdG9rZW5pemVyIHdpbGwgYXNzdW1lIGFuIGV4cHJlc3Npb24gaXMgYWxsb3dlZCBhZnRlclxuICAgICAgLy8gYHlpZWxkYCwgYnV0IHRoaXMgaXNuJ3QgdGhhdCBraW5kIG9mIHlpZWxkXG4gICAgICBlbHNlIHsgdGhpcy5leHByQWxsb3dlZCA9IGZhbHNlOyB9XG4gICAgfVxuXG4gICAgdmFyIG93bkRlc3RydWN0dXJpbmdFcnJvcnMgPSBmYWxzZSwgb2xkUGFyZW5Bc3NpZ24gPSAtMSwgb2xkVHJhaWxpbmdDb21tYSA9IC0xO1xuICAgIGlmIChyZWZEZXN0cnVjdHVyaW5nRXJyb3JzKSB7XG4gICAgICBvbGRQYXJlbkFzc2lnbiA9IHJlZkRlc3RydWN0dXJpbmdFcnJvcnMucGFyZW50aGVzaXplZEFzc2lnbjtcbiAgICAgIG9sZFRyYWlsaW5nQ29tbWEgPSByZWZEZXN0cnVjdHVyaW5nRXJyb3JzLnRyYWlsaW5nQ29tbWE7XG4gICAgICByZWZEZXN0cnVjdHVyaW5nRXJyb3JzLnBhcmVudGhlc2l6ZWRBc3NpZ24gPSByZWZEZXN0cnVjdHVyaW5nRXJyb3JzLnRyYWlsaW5nQ29tbWEgPSAtMTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycyA9IG5ldyBEZXN0cnVjdHVyaW5nRXJyb3JzO1xuICAgICAgb3duRGVzdHJ1Y3R1cmluZ0Vycm9ycyA9IHRydWU7XG4gICAgfVxuXG4gICAgdmFyIHN0YXJ0UG9zID0gdGhpcy5zdGFydCwgc3RhcnRMb2MgPSB0aGlzLnN0YXJ0TG9jO1xuICAgIGlmICh0aGlzLnR5cGUgPT09IHR5cGVzLnBhcmVuTCB8fCB0aGlzLnR5cGUgPT09IHR5cGVzLm5hbWUpIHtcbiAgICAgIHRoaXMucG90ZW50aWFsQXJyb3dBdCA9IHRoaXMuc3RhcnQ7XG4gICAgICB0aGlzLnBvdGVudGlhbEFycm93SW5Gb3JBd2FpdCA9IGZvckluaXQgPT09IFwiYXdhaXRcIjtcbiAgICB9XG4gICAgdmFyIGxlZnQgPSB0aGlzLnBhcnNlTWF5YmVDb25kaXRpb25hbChmb3JJbml0LCByZWZEZXN0cnVjdHVyaW5nRXJyb3JzKTtcbiAgICBpZiAoYWZ0ZXJMZWZ0UGFyc2UpIHsgbGVmdCA9IGFmdGVyTGVmdFBhcnNlLmNhbGwodGhpcywgbGVmdCwgc3RhcnRQb3MsIHN0YXJ0TG9jKTsgfVxuICAgIGlmICh0aGlzLnR5cGUuaXNBc3NpZ24pIHtcbiAgICAgIHZhciBub2RlID0gdGhpcy5zdGFydE5vZGVBdChzdGFydFBvcywgc3RhcnRMb2MpO1xuICAgICAgbm9kZS5vcGVyYXRvciA9IHRoaXMudmFsdWU7XG4gICAgICBpZiAodGhpcy50eXBlID09PSB0eXBlcy5lcSlcbiAgICAgICAgeyBsZWZ0ID0gdGhpcy50b0Fzc2lnbmFibGUobGVmdCwgZmFsc2UsIHJlZkRlc3RydWN0dXJpbmdFcnJvcnMpOyB9XG4gICAgICBpZiAoIW93bkRlc3RydWN0dXJpbmdFcnJvcnMpIHtcbiAgICAgICAgcmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycy5wYXJlbnRoZXNpemVkQXNzaWduID0gcmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycy50cmFpbGluZ0NvbW1hID0gcmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycy5kb3VibGVQcm90byA9IC0xO1xuICAgICAgfVxuICAgICAgaWYgKHJlZkRlc3RydWN0dXJpbmdFcnJvcnMuc2hvcnRoYW5kQXNzaWduID49IGxlZnQuc3RhcnQpXG4gICAgICAgIHsgcmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycy5zaG9ydGhhbmRBc3NpZ24gPSAtMTsgfSAvLyByZXNldCBiZWNhdXNlIHNob3J0aGFuZCBkZWZhdWx0IHdhcyB1c2VkIGNvcnJlY3RseVxuICAgICAgaWYgKHRoaXMudHlwZSA9PT0gdHlwZXMuZXEpXG4gICAgICAgIHsgdGhpcy5jaGVja0xWYWxQYXR0ZXJuKGxlZnQpOyB9XG4gICAgICBlbHNlXG4gICAgICAgIHsgdGhpcy5jaGVja0xWYWxTaW1wbGUobGVmdCk7IH1cbiAgICAgIG5vZGUubGVmdCA9IGxlZnQ7XG4gICAgICB0aGlzLm5leHQoKTtcbiAgICAgIG5vZGUucmlnaHQgPSB0aGlzLnBhcnNlTWF5YmVBc3NpZ24oZm9ySW5pdCk7XG4gICAgICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsIFwiQXNzaWdubWVudEV4cHJlc3Npb25cIilcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKG93bkRlc3RydWN0dXJpbmdFcnJvcnMpIHsgdGhpcy5jaGVja0V4cHJlc3Npb25FcnJvcnMocmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycywgdHJ1ZSk7IH1cbiAgICB9XG4gICAgaWYgKG9sZFBhcmVuQXNzaWduID4gLTEpIHsgcmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycy5wYXJlbnRoZXNpemVkQXNzaWduID0gb2xkUGFyZW5Bc3NpZ247IH1cbiAgICBpZiAob2xkVHJhaWxpbmdDb21tYSA+IC0xKSB7IHJlZkRlc3RydWN0dXJpbmdFcnJvcnMudHJhaWxpbmdDb21tYSA9IG9sZFRyYWlsaW5nQ29tbWE7IH1cbiAgICByZXR1cm4gbGVmdFxuICB9O1xuXG4gIC8vIFBhcnNlIGEgdGVybmFyeSBjb25kaXRpb25hbCAoYD86YCkgb3BlcmF0b3IuXG5cbiAgcHAkMy5wYXJzZU1heWJlQ29uZGl0aW9uYWwgPSBmdW5jdGlvbihmb3JJbml0LCByZWZEZXN0cnVjdHVyaW5nRXJyb3JzKSB7XG4gICAgdmFyIHN0YXJ0UG9zID0gdGhpcy5zdGFydCwgc3RhcnRMb2MgPSB0aGlzLnN0YXJ0TG9jO1xuICAgIHZhciBleHByID0gdGhpcy5wYXJzZUV4cHJPcHMoZm9ySW5pdCwgcmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycyk7XG4gICAgaWYgKHRoaXMuY2hlY2tFeHByZXNzaW9uRXJyb3JzKHJlZkRlc3RydWN0dXJpbmdFcnJvcnMpKSB7IHJldHVybiBleHByIH1cbiAgICBpZiAodGhpcy5lYXQodHlwZXMucXVlc3Rpb24pKSB7XG4gICAgICB2YXIgbm9kZSA9IHRoaXMuc3RhcnROb2RlQXQoc3RhcnRQb3MsIHN0YXJ0TG9jKTtcbiAgICAgIG5vZGUudGVzdCA9IGV4cHI7XG4gICAgICBub2RlLmNvbnNlcXVlbnQgPSB0aGlzLnBhcnNlTWF5YmVBc3NpZ24oKTtcbiAgICAgIHRoaXMuZXhwZWN0KHR5cGVzLmNvbG9uKTtcbiAgICAgIG5vZGUuYWx0ZXJuYXRlID0gdGhpcy5wYXJzZU1heWJlQXNzaWduKGZvckluaXQpO1xuICAgICAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCBcIkNvbmRpdGlvbmFsRXhwcmVzc2lvblwiKVxuICAgIH1cbiAgICByZXR1cm4gZXhwclxuICB9O1xuXG4gIC8vIFN0YXJ0IHRoZSBwcmVjZWRlbmNlIHBhcnNlci5cblxuICBwcCQzLnBhcnNlRXhwck9wcyA9IGZ1bmN0aW9uKGZvckluaXQsIHJlZkRlc3RydWN0dXJpbmdFcnJvcnMpIHtcbiAgICB2YXIgc3RhcnRQb3MgPSB0aGlzLnN0YXJ0LCBzdGFydExvYyA9IHRoaXMuc3RhcnRMb2M7XG4gICAgdmFyIGV4cHIgPSB0aGlzLnBhcnNlTWF5YmVVbmFyeShyZWZEZXN0cnVjdHVyaW5nRXJyb3JzLCBmYWxzZSk7XG4gICAgaWYgKHRoaXMuY2hlY2tFeHByZXNzaW9uRXJyb3JzKHJlZkRlc3RydWN0dXJpbmdFcnJvcnMpKSB7IHJldHVybiBleHByIH1cbiAgICByZXR1cm4gZXhwci5zdGFydCA9PT0gc3RhcnRQb3MgJiYgZXhwci50eXBlID09PSBcIkFycm93RnVuY3Rpb25FeHByZXNzaW9uXCIgPyBleHByIDogdGhpcy5wYXJzZUV4cHJPcChleHByLCBzdGFydFBvcywgc3RhcnRMb2MsIC0xLCBmb3JJbml0KVxuICB9O1xuXG4gIC8vIFBhcnNlIGJpbmFyeSBvcGVyYXRvcnMgd2l0aCB0aGUgb3BlcmF0b3IgcHJlY2VkZW5jZSBwYXJzaW5nXG4gIC8vIGFsZ29yaXRobS4gYGxlZnRgIGlzIHRoZSBsZWZ0LWhhbmQgc2lkZSBvZiB0aGUgb3BlcmF0b3IuXG4gIC8vIGBtaW5QcmVjYCBwcm92aWRlcyBjb250ZXh0IHRoYXQgYWxsb3dzIHRoZSBmdW5jdGlvbiB0byBzdG9wIGFuZFxuICAvLyBkZWZlciBmdXJ0aGVyIHBhcnNlciB0byBvbmUgb2YgaXRzIGNhbGxlcnMgd2hlbiBpdCBlbmNvdW50ZXJzIGFuXG4gIC8vIG9wZXJhdG9yIHRoYXQgaGFzIGEgbG93ZXIgcHJlY2VkZW5jZSB0aGFuIHRoZSBzZXQgaXQgaXMgcGFyc2luZy5cblxuICBwcCQzLnBhcnNlRXhwck9wID0gZnVuY3Rpb24obGVmdCwgbGVmdFN0YXJ0UG9zLCBsZWZ0U3RhcnRMb2MsIG1pblByZWMsIGZvckluaXQpIHtcbiAgICB2YXIgcHJlYyA9IHRoaXMudHlwZS5iaW5vcDtcbiAgICBpZiAocHJlYyAhPSBudWxsICYmICghZm9ySW5pdCB8fCB0aGlzLnR5cGUgIT09IHR5cGVzLl9pbikpIHtcbiAgICAgIGlmIChwcmVjID4gbWluUHJlYykge1xuICAgICAgICB2YXIgbG9naWNhbCA9IHRoaXMudHlwZSA9PT0gdHlwZXMubG9naWNhbE9SIHx8IHRoaXMudHlwZSA9PT0gdHlwZXMubG9naWNhbEFORDtcbiAgICAgICAgdmFyIGNvYWxlc2NlID0gdGhpcy50eXBlID09PSB0eXBlcy5jb2FsZXNjZTtcbiAgICAgICAgaWYgKGNvYWxlc2NlKSB7XG4gICAgICAgICAgLy8gSGFuZGxlIHRoZSBwcmVjZWRlbmNlIG9mIGB0dC5jb2FsZXNjZWAgYXMgZXF1YWwgdG8gdGhlIHJhbmdlIG9mIGxvZ2ljYWwgZXhwcmVzc2lvbnMuXG4gICAgICAgICAgLy8gSW4gb3RoZXIgd29yZHMsIGBub2RlLnJpZ2h0YCBzaG91bGRuJ3QgY29udGFpbiBsb2dpY2FsIGV4cHJlc3Npb25zIGluIG9yZGVyIHRvIGNoZWNrIHRoZSBtaXhlZCBlcnJvci5cbiAgICAgICAgICBwcmVjID0gdHlwZXMubG9naWNhbEFORC5iaW5vcDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgb3AgPSB0aGlzLnZhbHVlO1xuICAgICAgICB0aGlzLm5leHQoKTtcbiAgICAgICAgdmFyIHN0YXJ0UG9zID0gdGhpcy5zdGFydCwgc3RhcnRMb2MgPSB0aGlzLnN0YXJ0TG9jO1xuICAgICAgICB2YXIgcmlnaHQgPSB0aGlzLnBhcnNlRXhwck9wKHRoaXMucGFyc2VNYXliZVVuYXJ5KG51bGwsIGZhbHNlKSwgc3RhcnRQb3MsIHN0YXJ0TG9jLCBwcmVjLCBmb3JJbml0KTtcbiAgICAgICAgdmFyIG5vZGUgPSB0aGlzLmJ1aWxkQmluYXJ5KGxlZnRTdGFydFBvcywgbGVmdFN0YXJ0TG9jLCBsZWZ0LCByaWdodCwgb3AsIGxvZ2ljYWwgfHwgY29hbGVzY2UpO1xuICAgICAgICBpZiAoKGxvZ2ljYWwgJiYgdGhpcy50eXBlID09PSB0eXBlcy5jb2FsZXNjZSkgfHwgKGNvYWxlc2NlICYmICh0aGlzLnR5cGUgPT09IHR5cGVzLmxvZ2ljYWxPUiB8fCB0aGlzLnR5cGUgPT09IHR5cGVzLmxvZ2ljYWxBTkQpKSkge1xuICAgICAgICAgIHRoaXMucmFpc2VSZWNvdmVyYWJsZSh0aGlzLnN0YXJ0LCBcIkxvZ2ljYWwgZXhwcmVzc2lvbnMgYW5kIGNvYWxlc2NlIGV4cHJlc3Npb25zIGNhbm5vdCBiZSBtaXhlZC4gV3JhcCBlaXRoZXIgYnkgcGFyZW50aGVzZXNcIik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VFeHByT3Aobm9kZSwgbGVmdFN0YXJ0UG9zLCBsZWZ0U3RhcnRMb2MsIG1pblByZWMsIGZvckluaXQpXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBsZWZ0XG4gIH07XG5cbiAgcHAkMy5idWlsZEJpbmFyeSA9IGZ1bmN0aW9uKHN0YXJ0UG9zLCBzdGFydExvYywgbGVmdCwgcmlnaHQsIG9wLCBsb2dpY2FsKSB7XG4gICAgdmFyIG5vZGUgPSB0aGlzLnN0YXJ0Tm9kZUF0KHN0YXJ0UG9zLCBzdGFydExvYyk7XG4gICAgbm9kZS5sZWZ0ID0gbGVmdDtcbiAgICBub2RlLm9wZXJhdG9yID0gb3A7XG4gICAgbm9kZS5yaWdodCA9IHJpZ2h0O1xuICAgIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgbG9naWNhbCA/IFwiTG9naWNhbEV4cHJlc3Npb25cIiA6IFwiQmluYXJ5RXhwcmVzc2lvblwiKVxuICB9O1xuXG4gIC8vIFBhcnNlIHVuYXJ5IG9wZXJhdG9ycywgYm90aCBwcmVmaXggYW5kIHBvc3RmaXguXG5cbiAgcHAkMy5wYXJzZU1heWJlVW5hcnkgPSBmdW5jdGlvbihyZWZEZXN0cnVjdHVyaW5nRXJyb3JzLCBzYXdVbmFyeSwgaW5jRGVjKSB7XG4gICAgdmFyIHN0YXJ0UG9zID0gdGhpcy5zdGFydCwgc3RhcnRMb2MgPSB0aGlzLnN0YXJ0TG9jLCBleHByO1xuICAgIGlmICh0aGlzLmlzQ29udGV4dHVhbChcImF3YWl0XCIpICYmICh0aGlzLmluQXN5bmMgfHwgKCF0aGlzLmluRnVuY3Rpb24gJiYgdGhpcy5vcHRpb25zLmFsbG93QXdhaXRPdXRzaWRlRnVuY3Rpb24pKSkge1xuICAgICAgZXhwciA9IHRoaXMucGFyc2VBd2FpdCgpO1xuICAgICAgc2F3VW5hcnkgPSB0cnVlO1xuICAgIH0gZWxzZSBpZiAodGhpcy50eXBlLnByZWZpeCkge1xuICAgICAgdmFyIG5vZGUgPSB0aGlzLnN0YXJ0Tm9kZSgpLCB1cGRhdGUgPSB0aGlzLnR5cGUgPT09IHR5cGVzLmluY0RlYztcbiAgICAgIG5vZGUub3BlcmF0b3IgPSB0aGlzLnZhbHVlO1xuICAgICAgbm9kZS5wcmVmaXggPSB0cnVlO1xuICAgICAgdGhpcy5uZXh0KCk7XG4gICAgICBub2RlLmFyZ3VtZW50ID0gdGhpcy5wYXJzZU1heWJlVW5hcnkobnVsbCwgdHJ1ZSwgdXBkYXRlKTtcbiAgICAgIHRoaXMuY2hlY2tFeHByZXNzaW9uRXJyb3JzKHJlZkRlc3RydWN0dXJpbmdFcnJvcnMsIHRydWUpO1xuICAgICAgaWYgKHVwZGF0ZSkgeyB0aGlzLmNoZWNrTFZhbFNpbXBsZShub2RlLmFyZ3VtZW50KTsgfVxuICAgICAgZWxzZSBpZiAodGhpcy5zdHJpY3QgJiYgbm9kZS5vcGVyYXRvciA9PT0gXCJkZWxldGVcIiAmJlxuICAgICAgICAgICAgICAgbm9kZS5hcmd1bWVudC50eXBlID09PSBcIklkZW50aWZpZXJcIilcbiAgICAgICAgeyB0aGlzLnJhaXNlUmVjb3ZlcmFibGUobm9kZS5zdGFydCwgXCJEZWxldGluZyBsb2NhbCB2YXJpYWJsZSBpbiBzdHJpY3QgbW9kZVwiKTsgfVxuICAgICAgZWxzZSBpZiAobm9kZS5vcGVyYXRvciA9PT0gXCJkZWxldGVcIiAmJiBpc1ByaXZhdGVGaWVsZEFjY2Vzcyhub2RlLmFyZ3VtZW50KSlcbiAgICAgICAgeyB0aGlzLnJhaXNlUmVjb3ZlcmFibGUobm9kZS5zdGFydCwgXCJQcml2YXRlIGZpZWxkcyBjYW4gbm90IGJlIGRlbGV0ZWRcIik7IH1cbiAgICAgIGVsc2UgeyBzYXdVbmFyeSA9IHRydWU7IH1cbiAgICAgIGV4cHIgPSB0aGlzLmZpbmlzaE5vZGUobm9kZSwgdXBkYXRlID8gXCJVcGRhdGVFeHByZXNzaW9uXCIgOiBcIlVuYXJ5RXhwcmVzc2lvblwiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZXhwciA9IHRoaXMucGFyc2VFeHByU3Vic2NyaXB0cyhyZWZEZXN0cnVjdHVyaW5nRXJyb3JzKTtcbiAgICAgIGlmICh0aGlzLmNoZWNrRXhwcmVzc2lvbkVycm9ycyhyZWZEZXN0cnVjdHVyaW5nRXJyb3JzKSkgeyByZXR1cm4gZXhwciB9XG4gICAgICB3aGlsZSAodGhpcy50eXBlLnBvc3RmaXggJiYgIXRoaXMuY2FuSW5zZXJ0U2VtaWNvbG9uKCkpIHtcbiAgICAgICAgdmFyIG5vZGUkMSA9IHRoaXMuc3RhcnROb2RlQXQoc3RhcnRQb3MsIHN0YXJ0TG9jKTtcbiAgICAgICAgbm9kZSQxLm9wZXJhdG9yID0gdGhpcy52YWx1ZTtcbiAgICAgICAgbm9kZSQxLnByZWZpeCA9IGZhbHNlO1xuICAgICAgICBub2RlJDEuYXJndW1lbnQgPSBleHByO1xuICAgICAgICB0aGlzLmNoZWNrTFZhbFNpbXBsZShleHByKTtcbiAgICAgICAgdGhpcy5uZXh0KCk7XG4gICAgICAgIGV4cHIgPSB0aGlzLmZpbmlzaE5vZGUobm9kZSQxLCBcIlVwZGF0ZUV4cHJlc3Npb25cIik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCFpbmNEZWMgJiYgdGhpcy5lYXQodHlwZXMuc3RhcnN0YXIpKSB7XG4gICAgICBpZiAoc2F3VW5hcnkpXG4gICAgICAgIHsgdGhpcy51bmV4cGVjdGVkKHRoaXMubGFzdFRva1N0YXJ0KTsgfVxuICAgICAgZWxzZVxuICAgICAgICB7IHJldHVybiB0aGlzLmJ1aWxkQmluYXJ5KHN0YXJ0UG9zLCBzdGFydExvYywgZXhwciwgdGhpcy5wYXJzZU1heWJlVW5hcnkobnVsbCwgZmFsc2UpLCBcIioqXCIsIGZhbHNlKSB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBleHByXG4gICAgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIGlzUHJpdmF0ZUZpZWxkQWNjZXNzKG5vZGUpIHtcbiAgICByZXR1cm4gKFxuICAgICAgbm9kZS50eXBlID09PSBcIk1lbWJlckV4cHJlc3Npb25cIiAmJiBub2RlLnByb3BlcnR5LnR5cGUgPT09IFwiUHJpdmF0ZUlkZW50aWZpZXJcIiB8fFxuICAgICAgbm9kZS50eXBlID09PSBcIkNoYWluRXhwcmVzc2lvblwiICYmIGlzUHJpdmF0ZUZpZWxkQWNjZXNzKG5vZGUuZXhwcmVzc2lvbilcbiAgICApXG4gIH1cblxuICAvLyBQYXJzZSBjYWxsLCBkb3QsIGFuZCBgW11gLXN1YnNjcmlwdCBleHByZXNzaW9ucy5cblxuICBwcCQzLnBhcnNlRXhwclN1YnNjcmlwdHMgPSBmdW5jdGlvbihyZWZEZXN0cnVjdHVyaW5nRXJyb3JzKSB7XG4gICAgdmFyIHN0YXJ0UG9zID0gdGhpcy5zdGFydCwgc3RhcnRMb2MgPSB0aGlzLnN0YXJ0TG9jO1xuICAgIHZhciBleHByID0gdGhpcy5wYXJzZUV4cHJBdG9tKHJlZkRlc3RydWN0dXJpbmdFcnJvcnMpO1xuICAgIGlmIChleHByLnR5cGUgPT09IFwiQXJyb3dGdW5jdGlvbkV4cHJlc3Npb25cIiAmJiB0aGlzLmlucHV0LnNsaWNlKHRoaXMubGFzdFRva1N0YXJ0LCB0aGlzLmxhc3RUb2tFbmQpICE9PSBcIilcIilcbiAgICAgIHsgcmV0dXJuIGV4cHIgfVxuICAgIHZhciByZXN1bHQgPSB0aGlzLnBhcnNlU3Vic2NyaXB0cyhleHByLCBzdGFydFBvcywgc3RhcnRMb2MpO1xuICAgIGlmIChyZWZEZXN0cnVjdHVyaW5nRXJyb3JzICYmIHJlc3VsdC50eXBlID09PSBcIk1lbWJlckV4cHJlc3Npb25cIikge1xuICAgICAgaWYgKHJlZkRlc3RydWN0dXJpbmdFcnJvcnMucGFyZW50aGVzaXplZEFzc2lnbiA+PSByZXN1bHQuc3RhcnQpIHsgcmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycy5wYXJlbnRoZXNpemVkQXNzaWduID0gLTE7IH1cbiAgICAgIGlmIChyZWZEZXN0cnVjdHVyaW5nRXJyb3JzLnBhcmVudGhlc2l6ZWRCaW5kID49IHJlc3VsdC5zdGFydCkgeyByZWZEZXN0cnVjdHVyaW5nRXJyb3JzLnBhcmVudGhlc2l6ZWRCaW5kID0gLTE7IH1cbiAgICAgIGlmIChyZWZEZXN0cnVjdHVyaW5nRXJyb3JzLnRyYWlsaW5nQ29tbWEgPj0gcmVzdWx0LnN0YXJ0KSB7IHJlZkRlc3RydWN0dXJpbmdFcnJvcnMudHJhaWxpbmdDb21tYSA9IC0xOyB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHRcbiAgfTtcblxuICBwcCQzLnBhcnNlU3Vic2NyaXB0cyA9IGZ1bmN0aW9uKGJhc2UsIHN0YXJ0UG9zLCBzdGFydExvYywgbm9DYWxscykge1xuICAgIHZhciBtYXliZUFzeW5jQXJyb3cgPSB0aGlzLm9wdGlvbnMuZWNtYVZlcnNpb24gPj0gOCAmJiBiYXNlLnR5cGUgPT09IFwiSWRlbnRpZmllclwiICYmIGJhc2UubmFtZSA9PT0gXCJhc3luY1wiICYmXG4gICAgICAgIHRoaXMubGFzdFRva0VuZCA9PT0gYmFzZS5lbmQgJiYgIXRoaXMuY2FuSW5zZXJ0U2VtaWNvbG9uKCkgJiYgYmFzZS5lbmQgLSBiYXNlLnN0YXJ0ID09PSA1ICYmXG4gICAgICAgIHRoaXMucG90ZW50aWFsQXJyb3dBdCA9PT0gYmFzZS5zdGFydDtcbiAgICB2YXIgb3B0aW9uYWxDaGFpbmVkID0gZmFsc2U7XG5cbiAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgdmFyIGVsZW1lbnQgPSB0aGlzLnBhcnNlU3Vic2NyaXB0KGJhc2UsIHN0YXJ0UG9zLCBzdGFydExvYywgbm9DYWxscywgbWF5YmVBc3luY0Fycm93LCBvcHRpb25hbENoYWluZWQpO1xuXG4gICAgICBpZiAoZWxlbWVudC5vcHRpb25hbCkgeyBvcHRpb25hbENoYWluZWQgPSB0cnVlOyB9XG4gICAgICBpZiAoZWxlbWVudCA9PT0gYmFzZSB8fCBlbGVtZW50LnR5cGUgPT09IFwiQXJyb3dGdW5jdGlvbkV4cHJlc3Npb25cIikge1xuICAgICAgICBpZiAob3B0aW9uYWxDaGFpbmVkKSB7XG4gICAgICAgICAgdmFyIGNoYWluTm9kZSA9IHRoaXMuc3RhcnROb2RlQXQoc3RhcnRQb3MsIHN0YXJ0TG9jKTtcbiAgICAgICAgICBjaGFpbk5vZGUuZXhwcmVzc2lvbiA9IGVsZW1lbnQ7XG4gICAgICAgICAgZWxlbWVudCA9IHRoaXMuZmluaXNoTm9kZShjaGFpbk5vZGUsIFwiQ2hhaW5FeHByZXNzaW9uXCIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBlbGVtZW50XG4gICAgICB9XG5cbiAgICAgIGJhc2UgPSBlbGVtZW50O1xuICAgIH1cbiAgfTtcblxuICBwcCQzLnBhcnNlU3Vic2NyaXB0ID0gZnVuY3Rpb24oYmFzZSwgc3RhcnRQb3MsIHN0YXJ0TG9jLCBub0NhbGxzLCBtYXliZUFzeW5jQXJyb3csIG9wdGlvbmFsQ2hhaW5lZCkge1xuICAgIHZhciBvcHRpb25hbFN1cHBvcnRlZCA9IHRoaXMub3B0aW9ucy5lY21hVmVyc2lvbiA+PSAxMTtcbiAgICB2YXIgb3B0aW9uYWwgPSBvcHRpb25hbFN1cHBvcnRlZCAmJiB0aGlzLmVhdCh0eXBlcy5xdWVzdGlvbkRvdCk7XG4gICAgaWYgKG5vQ2FsbHMgJiYgb3B0aW9uYWwpIHsgdGhpcy5yYWlzZSh0aGlzLmxhc3RUb2tTdGFydCwgXCJPcHRpb25hbCBjaGFpbmluZyBjYW5ub3QgYXBwZWFyIGluIHRoZSBjYWxsZWUgb2YgbmV3IGV4cHJlc3Npb25zXCIpOyB9XG5cbiAgICB2YXIgY29tcHV0ZWQgPSB0aGlzLmVhdCh0eXBlcy5icmFja2V0TCk7XG4gICAgaWYgKGNvbXB1dGVkIHx8IChvcHRpb25hbCAmJiB0aGlzLnR5cGUgIT09IHR5cGVzLnBhcmVuTCAmJiB0aGlzLnR5cGUgIT09IHR5cGVzLmJhY2tRdW90ZSkgfHwgdGhpcy5lYXQodHlwZXMuZG90KSkge1xuICAgICAgdmFyIG5vZGUgPSB0aGlzLnN0YXJ0Tm9kZUF0KHN0YXJ0UG9zLCBzdGFydExvYyk7XG4gICAgICBub2RlLm9iamVjdCA9IGJhc2U7XG4gICAgICBpZiAoY29tcHV0ZWQpIHtcbiAgICAgICAgbm9kZS5wcm9wZXJ0eSA9IHRoaXMucGFyc2VFeHByZXNzaW9uKCk7XG4gICAgICAgIHRoaXMuZXhwZWN0KHR5cGVzLmJyYWNrZXRSKTtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy50eXBlID09PSB0eXBlcy5wcml2YXRlSWQgJiYgYmFzZS50eXBlICE9PSBcIlN1cGVyXCIpIHtcbiAgICAgICAgbm9kZS5wcm9wZXJ0eSA9IHRoaXMucGFyc2VQcml2YXRlSWRlbnQoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5vZGUucHJvcGVydHkgPSB0aGlzLnBhcnNlSWRlbnQodGhpcy5vcHRpb25zLmFsbG93UmVzZXJ2ZWQgIT09IFwibmV2ZXJcIik7XG4gICAgICB9XG4gICAgICBub2RlLmNvbXB1dGVkID0gISFjb21wdXRlZDtcbiAgICAgIGlmIChvcHRpb25hbFN1cHBvcnRlZCkge1xuICAgICAgICBub2RlLm9wdGlvbmFsID0gb3B0aW9uYWw7XG4gICAgICB9XG4gICAgICBiYXNlID0gdGhpcy5maW5pc2hOb2RlKG5vZGUsIFwiTWVtYmVyRXhwcmVzc2lvblwiKTtcbiAgICB9IGVsc2UgaWYgKCFub0NhbGxzICYmIHRoaXMuZWF0KHR5cGVzLnBhcmVuTCkpIHtcbiAgICAgIHZhciByZWZEZXN0cnVjdHVyaW5nRXJyb3JzID0gbmV3IERlc3RydWN0dXJpbmdFcnJvcnMsIG9sZFlpZWxkUG9zID0gdGhpcy55aWVsZFBvcywgb2xkQXdhaXRQb3MgPSB0aGlzLmF3YWl0UG9zLCBvbGRBd2FpdElkZW50UG9zID0gdGhpcy5hd2FpdElkZW50UG9zO1xuICAgICAgdGhpcy55aWVsZFBvcyA9IDA7XG4gICAgICB0aGlzLmF3YWl0UG9zID0gMDtcbiAgICAgIHRoaXMuYXdhaXRJZGVudFBvcyA9IDA7XG4gICAgICB2YXIgZXhwckxpc3QgPSB0aGlzLnBhcnNlRXhwckxpc3QodHlwZXMucGFyZW5SLCB0aGlzLm9wdGlvbnMuZWNtYVZlcnNpb24gPj0gOCwgZmFsc2UsIHJlZkRlc3RydWN0dXJpbmdFcnJvcnMpO1xuICAgICAgaWYgKG1heWJlQXN5bmNBcnJvdyAmJiAhb3B0aW9uYWwgJiYgIXRoaXMuY2FuSW5zZXJ0U2VtaWNvbG9uKCkgJiYgdGhpcy5lYXQodHlwZXMuYXJyb3cpKSB7XG4gICAgICAgIHRoaXMuY2hlY2tQYXR0ZXJuRXJyb3JzKHJlZkRlc3RydWN0dXJpbmdFcnJvcnMsIGZhbHNlKTtcbiAgICAgICAgdGhpcy5jaGVja1lpZWxkQXdhaXRJbkRlZmF1bHRQYXJhbXMoKTtcbiAgICAgICAgaWYgKHRoaXMuYXdhaXRJZGVudFBvcyA+IDApXG4gICAgICAgICAgeyB0aGlzLnJhaXNlKHRoaXMuYXdhaXRJZGVudFBvcywgXCJDYW5ub3QgdXNlICdhd2FpdCcgYXMgaWRlbnRpZmllciBpbnNpZGUgYW4gYXN5bmMgZnVuY3Rpb25cIik7IH1cbiAgICAgICAgdGhpcy55aWVsZFBvcyA9IG9sZFlpZWxkUG9zO1xuICAgICAgICB0aGlzLmF3YWl0UG9zID0gb2xkQXdhaXRQb3M7XG4gICAgICAgIHRoaXMuYXdhaXRJZGVudFBvcyA9IG9sZEF3YWl0SWRlbnRQb3M7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlQXJyb3dFeHByZXNzaW9uKHRoaXMuc3RhcnROb2RlQXQoc3RhcnRQb3MsIHN0YXJ0TG9jKSwgZXhwckxpc3QsIHRydWUpXG4gICAgICB9XG4gICAgICB0aGlzLmNoZWNrRXhwcmVzc2lvbkVycm9ycyhyZWZEZXN0cnVjdHVyaW5nRXJyb3JzLCB0cnVlKTtcbiAgICAgIHRoaXMueWllbGRQb3MgPSBvbGRZaWVsZFBvcyB8fCB0aGlzLnlpZWxkUG9zO1xuICAgICAgdGhpcy5hd2FpdFBvcyA9IG9sZEF3YWl0UG9zIHx8IHRoaXMuYXdhaXRQb3M7XG4gICAgICB0aGlzLmF3YWl0SWRlbnRQb3MgPSBvbGRBd2FpdElkZW50UG9zIHx8IHRoaXMuYXdhaXRJZGVudFBvcztcbiAgICAgIHZhciBub2RlJDEgPSB0aGlzLnN0YXJ0Tm9kZUF0KHN0YXJ0UG9zLCBzdGFydExvYyk7XG4gICAgICBub2RlJDEuY2FsbGVlID0gYmFzZTtcbiAgICAgIG5vZGUkMS5hcmd1bWVudHMgPSBleHByTGlzdDtcbiAgICAgIGlmIChvcHRpb25hbFN1cHBvcnRlZCkge1xuICAgICAgICBub2RlJDEub3B0aW9uYWwgPSBvcHRpb25hbDtcbiAgICAgIH1cbiAgICAgIGJhc2UgPSB0aGlzLmZpbmlzaE5vZGUobm9kZSQxLCBcIkNhbGxFeHByZXNzaW9uXCIpO1xuICAgIH0gZWxzZSBpZiAodGhpcy50eXBlID09PSB0eXBlcy5iYWNrUXVvdGUpIHtcbiAgICAgIGlmIChvcHRpb25hbCB8fCBvcHRpb25hbENoYWluZWQpIHtcbiAgICAgICAgdGhpcy5yYWlzZSh0aGlzLnN0YXJ0LCBcIk9wdGlvbmFsIGNoYWluaW5nIGNhbm5vdCBhcHBlYXIgaW4gdGhlIHRhZyBvZiB0YWdnZWQgdGVtcGxhdGUgZXhwcmVzc2lvbnNcIik7XG4gICAgICB9XG4gICAgICB2YXIgbm9kZSQyID0gdGhpcy5zdGFydE5vZGVBdChzdGFydFBvcywgc3RhcnRMb2MpO1xuICAgICAgbm9kZSQyLnRhZyA9IGJhc2U7XG4gICAgICBub2RlJDIucXVhc2kgPSB0aGlzLnBhcnNlVGVtcGxhdGUoe2lzVGFnZ2VkOiB0cnVlfSk7XG4gICAgICBiYXNlID0gdGhpcy5maW5pc2hOb2RlKG5vZGUkMiwgXCJUYWdnZWRUZW1wbGF0ZUV4cHJlc3Npb25cIik7XG4gICAgfVxuICAgIHJldHVybiBiYXNlXG4gIH07XG5cbiAgLy8gUGFyc2UgYW4gYXRvbWljIGV4cHJlc3Npb24g4oCUIGVpdGhlciBhIHNpbmdsZSB0b2tlbiB0aGF0IGlzIGFuXG4gIC8vIGV4cHJlc3Npb24sIGFuIGV4cHJlc3Npb24gc3RhcnRlZCBieSBhIGtleXdvcmQgbGlrZSBgZnVuY3Rpb25gIG9yXG4gIC8vIGBuZXdgLCBvciBhbiBleHByZXNzaW9uIHdyYXBwZWQgaW4gcHVuY3R1YXRpb24gbGlrZSBgKClgLCBgW11gLFxuICAvLyBvciBge31gLlxuXG4gIHBwJDMucGFyc2VFeHByQXRvbSA9IGZ1bmN0aW9uKHJlZkRlc3RydWN0dXJpbmdFcnJvcnMpIHtcbiAgICAvLyBJZiBhIGRpdmlzaW9uIG9wZXJhdG9yIGFwcGVhcnMgaW4gYW4gZXhwcmVzc2lvbiBwb3NpdGlvbiwgdGhlXG4gICAgLy8gdG9rZW5pemVyIGdvdCBjb25mdXNlZCwgYW5kIHdlIGZvcmNlIGl0IHRvIHJlYWQgYSByZWdleHAgaW5zdGVhZC5cbiAgICBpZiAodGhpcy50eXBlID09PSB0eXBlcy5zbGFzaCkgeyB0aGlzLnJlYWRSZWdleHAoKTsgfVxuXG4gICAgdmFyIG5vZGUsIGNhbkJlQXJyb3cgPSB0aGlzLnBvdGVudGlhbEFycm93QXQgPT09IHRoaXMuc3RhcnQ7XG4gICAgc3dpdGNoICh0aGlzLnR5cGUpIHtcbiAgICBjYXNlIHR5cGVzLl9zdXBlcjpcbiAgICAgIGlmICghdGhpcy5hbGxvd1N1cGVyKVxuICAgICAgICB7IHRoaXMucmFpc2UodGhpcy5zdGFydCwgXCInc3VwZXInIGtleXdvcmQgb3V0c2lkZSBhIG1ldGhvZFwiKTsgfVxuICAgICAgbm9kZSA9IHRoaXMuc3RhcnROb2RlKCk7XG4gICAgICB0aGlzLm5leHQoKTtcbiAgICAgIGlmICh0aGlzLnR5cGUgPT09IHR5cGVzLnBhcmVuTCAmJiAhdGhpcy5hbGxvd0RpcmVjdFN1cGVyKVxuICAgICAgICB7IHRoaXMucmFpc2Uobm9kZS5zdGFydCwgXCJzdXBlcigpIGNhbGwgb3V0c2lkZSBjb25zdHJ1Y3RvciBvZiBhIHN1YmNsYXNzXCIpOyB9XG4gICAgICAvLyBUaGUgYHN1cGVyYCBrZXl3b3JkIGNhbiBhcHBlYXIgYXQgYmVsb3c6XG4gICAgICAvLyBTdXBlclByb3BlcnR5OlxuICAgICAgLy8gICAgIHN1cGVyIFsgRXhwcmVzc2lvbiBdXG4gICAgICAvLyAgICAgc3VwZXIgLiBJZGVudGlmaWVyTmFtZVxuICAgICAgLy8gU3VwZXJDYWxsOlxuICAgICAgLy8gICAgIHN1cGVyICggQXJndW1lbnRzIClcbiAgICAgIGlmICh0aGlzLnR5cGUgIT09IHR5cGVzLmRvdCAmJiB0aGlzLnR5cGUgIT09IHR5cGVzLmJyYWNrZXRMICYmIHRoaXMudHlwZSAhPT0gdHlwZXMucGFyZW5MKVxuICAgICAgICB7IHRoaXMudW5leHBlY3RlZCgpOyB9XG4gICAgICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsIFwiU3VwZXJcIilcblxuICAgIGNhc2UgdHlwZXMuX3RoaXM6XG4gICAgICBub2RlID0gdGhpcy5zdGFydE5vZGUoKTtcbiAgICAgIHRoaXMubmV4dCgpO1xuICAgICAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCBcIlRoaXNFeHByZXNzaW9uXCIpXG5cbiAgICBjYXNlIHR5cGVzLm5hbWU6XG4gICAgICB2YXIgc3RhcnRQb3MgPSB0aGlzLnN0YXJ0LCBzdGFydExvYyA9IHRoaXMuc3RhcnRMb2MsIGNvbnRhaW5zRXNjID0gdGhpcy5jb250YWluc0VzYztcbiAgICAgIHZhciBpZCA9IHRoaXMucGFyc2VJZGVudChmYWxzZSk7XG4gICAgICBpZiAodGhpcy5vcHRpb25zLmVjbWFWZXJzaW9uID49IDggJiYgIWNvbnRhaW5zRXNjICYmIGlkLm5hbWUgPT09IFwiYXN5bmNcIiAmJiAhdGhpcy5jYW5JbnNlcnRTZW1pY29sb24oKSAmJiB0aGlzLmVhdCh0eXBlcy5fZnVuY3Rpb24pKVxuICAgICAgICB7IHJldHVybiB0aGlzLnBhcnNlRnVuY3Rpb24odGhpcy5zdGFydE5vZGVBdChzdGFydFBvcywgc3RhcnRMb2MpLCAwLCBmYWxzZSwgdHJ1ZSkgfVxuICAgICAgaWYgKGNhbkJlQXJyb3cgJiYgIXRoaXMuY2FuSW5zZXJ0U2VtaWNvbG9uKCkpIHtcbiAgICAgICAgaWYgKHRoaXMuZWF0KHR5cGVzLmFycm93KSlcbiAgICAgICAgICB7IHJldHVybiB0aGlzLnBhcnNlQXJyb3dFeHByZXNzaW9uKHRoaXMuc3RhcnROb2RlQXQoc3RhcnRQb3MsIHN0YXJ0TG9jKSwgW2lkXSwgZmFsc2UpIH1cbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5lY21hVmVyc2lvbiA+PSA4ICYmIGlkLm5hbWUgPT09IFwiYXN5bmNcIiAmJiB0aGlzLnR5cGUgPT09IHR5cGVzLm5hbWUgJiYgIWNvbnRhaW5zRXNjICYmXG4gICAgICAgICAgICAoIXRoaXMucG90ZW50aWFsQXJyb3dJbkZvckF3YWl0IHx8IHRoaXMudmFsdWUgIT09IFwib2ZcIiB8fCB0aGlzLmNvbnRhaW5zRXNjKSkge1xuICAgICAgICAgIGlkID0gdGhpcy5wYXJzZUlkZW50KGZhbHNlKTtcbiAgICAgICAgICBpZiAodGhpcy5jYW5JbnNlcnRTZW1pY29sb24oKSB8fCAhdGhpcy5lYXQodHlwZXMuYXJyb3cpKVxuICAgICAgICAgICAgeyB0aGlzLnVuZXhwZWN0ZWQoKTsgfVxuICAgICAgICAgIHJldHVybiB0aGlzLnBhcnNlQXJyb3dFeHByZXNzaW9uKHRoaXMuc3RhcnROb2RlQXQoc3RhcnRQb3MsIHN0YXJ0TG9jKSwgW2lkXSwgdHJ1ZSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGlkXG5cbiAgICBjYXNlIHR5cGVzLnJlZ2V4cDpcbiAgICAgIHZhciB2YWx1ZSA9IHRoaXMudmFsdWU7XG4gICAgICBub2RlID0gdGhpcy5wYXJzZUxpdGVyYWwodmFsdWUudmFsdWUpO1xuICAgICAgbm9kZS5yZWdleCA9IHtwYXR0ZXJuOiB2YWx1ZS5wYXR0ZXJuLCBmbGFnczogdmFsdWUuZmxhZ3N9O1xuICAgICAgcmV0dXJuIG5vZGVcblxuICAgIGNhc2UgdHlwZXMubnVtOiBjYXNlIHR5cGVzLnN0cmluZzpcbiAgICAgIHJldHVybiB0aGlzLnBhcnNlTGl0ZXJhbCh0aGlzLnZhbHVlKVxuXG4gICAgY2FzZSB0eXBlcy5fbnVsbDogY2FzZSB0eXBlcy5fdHJ1ZTogY2FzZSB0eXBlcy5fZmFsc2U6XG4gICAgICBub2RlID0gdGhpcy5zdGFydE5vZGUoKTtcbiAgICAgIG5vZGUudmFsdWUgPSB0aGlzLnR5cGUgPT09IHR5cGVzLl9udWxsID8gbnVsbCA6IHRoaXMudHlwZSA9PT0gdHlwZXMuX3RydWU7XG4gICAgICBub2RlLnJhdyA9IHRoaXMudHlwZS5rZXl3b3JkO1xuICAgICAgdGhpcy5uZXh0KCk7XG4gICAgICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsIFwiTGl0ZXJhbFwiKVxuXG4gICAgY2FzZSB0eXBlcy5wYXJlbkw6XG4gICAgICB2YXIgc3RhcnQgPSB0aGlzLnN0YXJ0LCBleHByID0gdGhpcy5wYXJzZVBhcmVuQW5kRGlzdGluZ3Vpc2hFeHByZXNzaW9uKGNhbkJlQXJyb3cpO1xuICAgICAgaWYgKHJlZkRlc3RydWN0dXJpbmdFcnJvcnMpIHtcbiAgICAgICAgaWYgKHJlZkRlc3RydWN0dXJpbmdFcnJvcnMucGFyZW50aGVzaXplZEFzc2lnbiA8IDAgJiYgIXRoaXMuaXNTaW1wbGVBc3NpZ25UYXJnZXQoZXhwcikpXG4gICAgICAgICAgeyByZWZEZXN0cnVjdHVyaW5nRXJyb3JzLnBhcmVudGhlc2l6ZWRBc3NpZ24gPSBzdGFydDsgfVxuICAgICAgICBpZiAocmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycy5wYXJlbnRoZXNpemVkQmluZCA8IDApXG4gICAgICAgICAgeyByZWZEZXN0cnVjdHVyaW5nRXJyb3JzLnBhcmVudGhlc2l6ZWRCaW5kID0gc3RhcnQ7IH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBleHByXG5cbiAgICBjYXNlIHR5cGVzLmJyYWNrZXRMOlxuICAgICAgbm9kZSA9IHRoaXMuc3RhcnROb2RlKCk7XG4gICAgICB0aGlzLm5leHQoKTtcbiAgICAgIG5vZGUuZWxlbWVudHMgPSB0aGlzLnBhcnNlRXhwckxpc3QodHlwZXMuYnJhY2tldFIsIHRydWUsIHRydWUsIHJlZkRlc3RydWN0dXJpbmdFcnJvcnMpO1xuICAgICAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCBcIkFycmF5RXhwcmVzc2lvblwiKVxuXG4gICAgY2FzZSB0eXBlcy5icmFjZUw6XG4gICAgICByZXR1cm4gdGhpcy5wYXJzZU9iaihmYWxzZSwgcmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycylcblxuICAgIGNhc2UgdHlwZXMuX2Z1bmN0aW9uOlxuICAgICAgbm9kZSA9IHRoaXMuc3RhcnROb2RlKCk7XG4gICAgICB0aGlzLm5leHQoKTtcbiAgICAgIHJldHVybiB0aGlzLnBhcnNlRnVuY3Rpb24obm9kZSwgMClcblxuICAgIGNhc2UgdHlwZXMuX2NsYXNzOlxuICAgICAgcmV0dXJuIHRoaXMucGFyc2VDbGFzcyh0aGlzLnN0YXJ0Tm9kZSgpLCBmYWxzZSlcblxuICAgIGNhc2UgdHlwZXMuX25ldzpcbiAgICAgIHJldHVybiB0aGlzLnBhcnNlTmV3KClcblxuICAgIGNhc2UgdHlwZXMuYmFja1F1b3RlOlxuICAgICAgcmV0dXJuIHRoaXMucGFyc2VUZW1wbGF0ZSgpXG5cbiAgICBjYXNlIHR5cGVzLl9pbXBvcnQ6XG4gICAgICBpZiAodGhpcy5vcHRpb25zLmVjbWFWZXJzaW9uID49IDExKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlRXhwckltcG9ydCgpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdGhpcy51bmV4cGVjdGVkKClcbiAgICAgIH1cblxuICAgIGRlZmF1bHQ6XG4gICAgICB0aGlzLnVuZXhwZWN0ZWQoKTtcbiAgICB9XG4gIH07XG5cbiAgcHAkMy5wYXJzZUV4cHJJbXBvcnQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgbm9kZSA9IHRoaXMuc3RhcnROb2RlKCk7XG5cbiAgICAvLyBDb25zdW1lIGBpbXBvcnRgIGFzIGFuIGlkZW50aWZpZXIgZm9yIGBpbXBvcnQubWV0YWAuXG4gICAgLy8gQmVjYXVzZSBgdGhpcy5wYXJzZUlkZW50KHRydWUpYCBkb2Vzbid0IGNoZWNrIGVzY2FwZSBzZXF1ZW5jZXMsIGl0IG5lZWRzIHRoZSBjaGVjayBvZiBgdGhpcy5jb250YWluc0VzY2AuXG4gICAgaWYgKHRoaXMuY29udGFpbnNFc2MpIHsgdGhpcy5yYWlzZVJlY292ZXJhYmxlKHRoaXMuc3RhcnQsIFwiRXNjYXBlIHNlcXVlbmNlIGluIGtleXdvcmQgaW1wb3J0XCIpOyB9XG4gICAgdmFyIG1ldGEgPSB0aGlzLnBhcnNlSWRlbnQodHJ1ZSk7XG5cbiAgICBzd2l0Y2ggKHRoaXMudHlwZSkge1xuICAgIGNhc2UgdHlwZXMucGFyZW5MOlxuICAgICAgcmV0dXJuIHRoaXMucGFyc2VEeW5hbWljSW1wb3J0KG5vZGUpXG4gICAgY2FzZSB0eXBlcy5kb3Q6XG4gICAgICBub2RlLm1ldGEgPSBtZXRhO1xuICAgICAgcmV0dXJuIHRoaXMucGFyc2VJbXBvcnRNZXRhKG5vZGUpXG4gICAgZGVmYXVsdDpcbiAgICAgIHRoaXMudW5leHBlY3RlZCgpO1xuICAgIH1cbiAgfTtcblxuICBwcCQzLnBhcnNlRHluYW1pY0ltcG9ydCA9IGZ1bmN0aW9uKG5vZGUpIHtcbiAgICB0aGlzLm5leHQoKTsgLy8gc2tpcCBgKGBcblxuICAgIC8vIFBhcnNlIG5vZGUuc291cmNlLlxuICAgIG5vZGUuc291cmNlID0gdGhpcy5wYXJzZU1heWJlQXNzaWduKCk7XG5cbiAgICAvLyBWZXJpZnkgZW5kaW5nLlxuICAgIGlmICghdGhpcy5lYXQodHlwZXMucGFyZW5SKSkge1xuICAgICAgdmFyIGVycm9yUG9zID0gdGhpcy5zdGFydDtcbiAgICAgIGlmICh0aGlzLmVhdCh0eXBlcy5jb21tYSkgJiYgdGhpcy5lYXQodHlwZXMucGFyZW5SKSkge1xuICAgICAgICB0aGlzLnJhaXNlUmVjb3ZlcmFibGUoZXJyb3JQb3MsIFwiVHJhaWxpbmcgY29tbWEgaXMgbm90IGFsbG93ZWQgaW4gaW1wb3J0KClcIik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnVuZXhwZWN0ZWQoZXJyb3JQb3MpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJJbXBvcnRFeHByZXNzaW9uXCIpXG4gIH07XG5cbiAgcHAkMy5wYXJzZUltcG9ydE1ldGEgPSBmdW5jdGlvbihub2RlKSB7XG4gICAgdGhpcy5uZXh0KCk7IC8vIHNraXAgYC5gXG5cbiAgICB2YXIgY29udGFpbnNFc2MgPSB0aGlzLmNvbnRhaW5zRXNjO1xuICAgIG5vZGUucHJvcGVydHkgPSB0aGlzLnBhcnNlSWRlbnQodHJ1ZSk7XG5cbiAgICBpZiAobm9kZS5wcm9wZXJ0eS5uYW1lICE9PSBcIm1ldGFcIilcbiAgICAgIHsgdGhpcy5yYWlzZVJlY292ZXJhYmxlKG5vZGUucHJvcGVydHkuc3RhcnQsIFwiVGhlIG9ubHkgdmFsaWQgbWV0YSBwcm9wZXJ0eSBmb3IgaW1wb3J0IGlzICdpbXBvcnQubWV0YSdcIik7IH1cbiAgICBpZiAoY29udGFpbnNFc2MpXG4gICAgICB7IHRoaXMucmFpc2VSZWNvdmVyYWJsZShub2RlLnN0YXJ0LCBcIidpbXBvcnQubWV0YScgbXVzdCBub3QgY29udGFpbiBlc2NhcGVkIGNoYXJhY3RlcnNcIik7IH1cbiAgICBpZiAodGhpcy5vcHRpb25zLnNvdXJjZVR5cGUgIT09IFwibW9kdWxlXCIgJiYgIXRoaXMub3B0aW9ucy5hbGxvd0ltcG9ydEV4cG9ydEV2ZXJ5d2hlcmUpXG4gICAgICB7IHRoaXMucmFpc2VSZWNvdmVyYWJsZShub2RlLnN0YXJ0LCBcIkNhbm5vdCB1c2UgJ2ltcG9ydC5tZXRhJyBvdXRzaWRlIGEgbW9kdWxlXCIpOyB9XG5cbiAgICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsIFwiTWV0YVByb3BlcnR5XCIpXG4gIH07XG5cbiAgcHAkMy5wYXJzZUxpdGVyYWwgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHZhciBub2RlID0gdGhpcy5zdGFydE5vZGUoKTtcbiAgICBub2RlLnZhbHVlID0gdmFsdWU7XG4gICAgbm9kZS5yYXcgPSB0aGlzLmlucHV0LnNsaWNlKHRoaXMuc3RhcnQsIHRoaXMuZW5kKTtcbiAgICBpZiAobm9kZS5yYXcuY2hhckNvZGVBdChub2RlLnJhdy5sZW5ndGggLSAxKSA9PT0gMTEwKSB7IG5vZGUuYmlnaW50ID0gbm9kZS5yYXcuc2xpY2UoMCwgLTEpLnJlcGxhY2UoL18vZywgXCJcIik7IH1cbiAgICB0aGlzLm5leHQoKTtcbiAgICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsIFwiTGl0ZXJhbFwiKVxuICB9O1xuXG4gIHBwJDMucGFyc2VQYXJlbkV4cHJlc3Npb24gPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLmV4cGVjdCh0eXBlcy5wYXJlbkwpO1xuICAgIHZhciB2YWwgPSB0aGlzLnBhcnNlRXhwcmVzc2lvbigpO1xuICAgIHRoaXMuZXhwZWN0KHR5cGVzLnBhcmVuUik7XG4gICAgcmV0dXJuIHZhbFxuICB9O1xuXG4gIHBwJDMucGFyc2VQYXJlbkFuZERpc3Rpbmd1aXNoRXhwcmVzc2lvbiA9IGZ1bmN0aW9uKGNhbkJlQXJyb3cpIHtcbiAgICB2YXIgc3RhcnRQb3MgPSB0aGlzLnN0YXJ0LCBzdGFydExvYyA9IHRoaXMuc3RhcnRMb2MsIHZhbCwgYWxsb3dUcmFpbGluZ0NvbW1hID0gdGhpcy5vcHRpb25zLmVjbWFWZXJzaW9uID49IDg7XG4gICAgaWYgKHRoaXMub3B0aW9ucy5lY21hVmVyc2lvbiA+PSA2KSB7XG4gICAgICB0aGlzLm5leHQoKTtcblxuICAgICAgdmFyIGlubmVyU3RhcnRQb3MgPSB0aGlzLnN0YXJ0LCBpbm5lclN0YXJ0TG9jID0gdGhpcy5zdGFydExvYztcbiAgICAgIHZhciBleHByTGlzdCA9IFtdLCBmaXJzdCA9IHRydWUsIGxhc3RJc0NvbW1hID0gZmFsc2U7XG4gICAgICB2YXIgcmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycyA9IG5ldyBEZXN0cnVjdHVyaW5nRXJyb3JzLCBvbGRZaWVsZFBvcyA9IHRoaXMueWllbGRQb3MsIG9sZEF3YWl0UG9zID0gdGhpcy5hd2FpdFBvcywgc3ByZWFkU3RhcnQ7XG4gICAgICB0aGlzLnlpZWxkUG9zID0gMDtcbiAgICAgIHRoaXMuYXdhaXRQb3MgPSAwO1xuICAgICAgLy8gRG8gbm90IHNhdmUgYXdhaXRJZGVudFBvcyB0byBhbGxvdyBjaGVja2luZyBhd2FpdHMgbmVzdGVkIGluIHBhcmFtZXRlcnNcbiAgICAgIHdoaWxlICh0aGlzLnR5cGUgIT09IHR5cGVzLnBhcmVuUikge1xuICAgICAgICBmaXJzdCA/IGZpcnN0ID0gZmFsc2UgOiB0aGlzLmV4cGVjdCh0eXBlcy5jb21tYSk7XG4gICAgICAgIGlmIChhbGxvd1RyYWlsaW5nQ29tbWEgJiYgdGhpcy5hZnRlclRyYWlsaW5nQ29tbWEodHlwZXMucGFyZW5SLCB0cnVlKSkge1xuICAgICAgICAgIGxhc3RJc0NvbW1hID0gdHJ1ZTtcbiAgICAgICAgICBicmVha1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMudHlwZSA9PT0gdHlwZXMuZWxsaXBzaXMpIHtcbiAgICAgICAgICBzcHJlYWRTdGFydCA9IHRoaXMuc3RhcnQ7XG4gICAgICAgICAgZXhwckxpc3QucHVzaCh0aGlzLnBhcnNlUGFyZW5JdGVtKHRoaXMucGFyc2VSZXN0QmluZGluZygpKSk7XG4gICAgICAgICAgaWYgKHRoaXMudHlwZSA9PT0gdHlwZXMuY29tbWEpIHsgdGhpcy5yYWlzZSh0aGlzLnN0YXJ0LCBcIkNvbW1hIGlzIG5vdCBwZXJtaXR0ZWQgYWZ0ZXIgdGhlIHJlc3QgZWxlbWVudFwiKTsgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZXhwckxpc3QucHVzaCh0aGlzLnBhcnNlTWF5YmVBc3NpZ24oZmFsc2UsIHJlZkRlc3RydWN0dXJpbmdFcnJvcnMsIHRoaXMucGFyc2VQYXJlbkl0ZW0pKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdmFyIGlubmVyRW5kUG9zID0gdGhpcy5zdGFydCwgaW5uZXJFbmRMb2MgPSB0aGlzLnN0YXJ0TG9jO1xuICAgICAgdGhpcy5leHBlY3QodHlwZXMucGFyZW5SKTtcblxuICAgICAgaWYgKGNhbkJlQXJyb3cgJiYgIXRoaXMuY2FuSW5zZXJ0U2VtaWNvbG9uKCkgJiYgdGhpcy5lYXQodHlwZXMuYXJyb3cpKSB7XG4gICAgICAgIHRoaXMuY2hlY2tQYXR0ZXJuRXJyb3JzKHJlZkRlc3RydWN0dXJpbmdFcnJvcnMsIGZhbHNlKTtcbiAgICAgICAgdGhpcy5jaGVja1lpZWxkQXdhaXRJbkRlZmF1bHRQYXJhbXMoKTtcbiAgICAgICAgdGhpcy55aWVsZFBvcyA9IG9sZFlpZWxkUG9zO1xuICAgICAgICB0aGlzLmF3YWl0UG9zID0gb2xkQXdhaXRQb3M7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlUGFyZW5BcnJvd0xpc3Qoc3RhcnRQb3MsIHN0YXJ0TG9jLCBleHByTGlzdClcbiAgICAgIH1cblxuICAgICAgaWYgKCFleHByTGlzdC5sZW5ndGggfHwgbGFzdElzQ29tbWEpIHsgdGhpcy51bmV4cGVjdGVkKHRoaXMubGFzdFRva1N0YXJ0KTsgfVxuICAgICAgaWYgKHNwcmVhZFN0YXJ0KSB7IHRoaXMudW5leHBlY3RlZChzcHJlYWRTdGFydCk7IH1cbiAgICAgIHRoaXMuY2hlY2tFeHByZXNzaW9uRXJyb3JzKHJlZkRlc3RydWN0dXJpbmdFcnJvcnMsIHRydWUpO1xuICAgICAgdGhpcy55aWVsZFBvcyA9IG9sZFlpZWxkUG9zIHx8IHRoaXMueWllbGRQb3M7XG4gICAgICB0aGlzLmF3YWl0UG9zID0gb2xkQXdhaXRQb3MgfHwgdGhpcy5hd2FpdFBvcztcblxuICAgICAgaWYgKGV4cHJMaXN0Lmxlbmd0aCA+IDEpIHtcbiAgICAgICAgdmFsID0gdGhpcy5zdGFydE5vZGVBdChpbm5lclN0YXJ0UG9zLCBpbm5lclN0YXJ0TG9jKTtcbiAgICAgICAgdmFsLmV4cHJlc3Npb25zID0gZXhwckxpc3Q7XG4gICAgICAgIHRoaXMuZmluaXNoTm9kZUF0KHZhbCwgXCJTZXF1ZW5jZUV4cHJlc3Npb25cIiwgaW5uZXJFbmRQb3MsIGlubmVyRW5kTG9jKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbCA9IGV4cHJMaXN0WzBdO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB2YWwgPSB0aGlzLnBhcnNlUGFyZW5FeHByZXNzaW9uKCk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMub3B0aW9ucy5wcmVzZXJ2ZVBhcmVucykge1xuICAgICAgdmFyIHBhciA9IHRoaXMuc3RhcnROb2RlQXQoc3RhcnRQb3MsIHN0YXJ0TG9jKTtcbiAgICAgIHBhci5leHByZXNzaW9uID0gdmFsO1xuICAgICAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShwYXIsIFwiUGFyZW50aGVzaXplZEV4cHJlc3Npb25cIilcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHZhbFxuICAgIH1cbiAgfTtcblxuICBwcCQzLnBhcnNlUGFyZW5JdGVtID0gZnVuY3Rpb24oaXRlbSkge1xuICAgIHJldHVybiBpdGVtXG4gIH07XG5cbiAgcHAkMy5wYXJzZVBhcmVuQXJyb3dMaXN0ID0gZnVuY3Rpb24oc3RhcnRQb3MsIHN0YXJ0TG9jLCBleHByTGlzdCkge1xuICAgIHJldHVybiB0aGlzLnBhcnNlQXJyb3dFeHByZXNzaW9uKHRoaXMuc3RhcnROb2RlQXQoc3RhcnRQb3MsIHN0YXJ0TG9jKSwgZXhwckxpc3QpXG4gIH07XG5cbiAgLy8gTmV3J3MgcHJlY2VkZW5jZSBpcyBzbGlnaHRseSB0cmlja3kuIEl0IG11c3QgYWxsb3cgaXRzIGFyZ3VtZW50IHRvXG4gIC8vIGJlIGEgYFtdYCBvciBkb3Qgc3Vic2NyaXB0IGV4cHJlc3Npb24sIGJ1dCBub3QgYSBjYWxsIOKAlCBhdCBsZWFzdCxcbiAgLy8gbm90IHdpdGhvdXQgd3JhcHBpbmcgaXQgaW4gcGFyZW50aGVzZXMuIFRodXMsIGl0IHVzZXMgdGhlIG5vQ2FsbHNcbiAgLy8gYXJndW1lbnQgdG8gcGFyc2VTdWJzY3JpcHRzIHRvIHByZXZlbnQgaXQgZnJvbSBjb25zdW1pbmcgdGhlXG4gIC8vIGFyZ3VtZW50IGxpc3QuXG5cbiAgdmFyIGVtcHR5JDEgPSBbXTtcblxuICBwcCQzLnBhcnNlTmV3ID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMuY29udGFpbnNFc2MpIHsgdGhpcy5yYWlzZVJlY292ZXJhYmxlKHRoaXMuc3RhcnQsIFwiRXNjYXBlIHNlcXVlbmNlIGluIGtleXdvcmQgbmV3XCIpOyB9XG4gICAgdmFyIG5vZGUgPSB0aGlzLnN0YXJ0Tm9kZSgpO1xuICAgIHZhciBtZXRhID0gdGhpcy5wYXJzZUlkZW50KHRydWUpO1xuICAgIGlmICh0aGlzLm9wdGlvbnMuZWNtYVZlcnNpb24gPj0gNiAmJiB0aGlzLmVhdCh0eXBlcy5kb3QpKSB7XG4gICAgICBub2RlLm1ldGEgPSBtZXRhO1xuICAgICAgdmFyIGNvbnRhaW5zRXNjID0gdGhpcy5jb250YWluc0VzYztcbiAgICAgIG5vZGUucHJvcGVydHkgPSB0aGlzLnBhcnNlSWRlbnQodHJ1ZSk7XG4gICAgICBpZiAobm9kZS5wcm9wZXJ0eS5uYW1lICE9PSBcInRhcmdldFwiKVxuICAgICAgICB7IHRoaXMucmFpc2VSZWNvdmVyYWJsZShub2RlLnByb3BlcnR5LnN0YXJ0LCBcIlRoZSBvbmx5IHZhbGlkIG1ldGEgcHJvcGVydHkgZm9yIG5ldyBpcyAnbmV3LnRhcmdldCdcIik7IH1cbiAgICAgIGlmIChjb250YWluc0VzYylcbiAgICAgICAgeyB0aGlzLnJhaXNlUmVjb3ZlcmFibGUobm9kZS5zdGFydCwgXCInbmV3LnRhcmdldCcgbXVzdCBub3QgY29udGFpbiBlc2NhcGVkIGNoYXJhY3RlcnNcIik7IH1cbiAgICAgIGlmICghdGhpcy5pbk5vbkFycm93RnVuY3Rpb24pXG4gICAgICAgIHsgdGhpcy5yYWlzZVJlY292ZXJhYmxlKG5vZGUuc3RhcnQsIFwiJ25ldy50YXJnZXQnIGNhbiBvbmx5IGJlIHVzZWQgaW4gZnVuY3Rpb25zXCIpOyB9XG4gICAgICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsIFwiTWV0YVByb3BlcnR5XCIpXG4gICAgfVxuICAgIHZhciBzdGFydFBvcyA9IHRoaXMuc3RhcnQsIHN0YXJ0TG9jID0gdGhpcy5zdGFydExvYywgaXNJbXBvcnQgPSB0aGlzLnR5cGUgPT09IHR5cGVzLl9pbXBvcnQ7XG4gICAgbm9kZS5jYWxsZWUgPSB0aGlzLnBhcnNlU3Vic2NyaXB0cyh0aGlzLnBhcnNlRXhwckF0b20oKSwgc3RhcnRQb3MsIHN0YXJ0TG9jLCB0cnVlKTtcbiAgICBpZiAoaXNJbXBvcnQgJiYgbm9kZS5jYWxsZWUudHlwZSA9PT0gXCJJbXBvcnRFeHByZXNzaW9uXCIpIHtcbiAgICAgIHRoaXMucmFpc2Uoc3RhcnRQb3MsIFwiQ2Fubm90IHVzZSBuZXcgd2l0aCBpbXBvcnQoKVwiKTtcbiAgICB9XG4gICAgaWYgKHRoaXMuZWF0KHR5cGVzLnBhcmVuTCkpIHsgbm9kZS5hcmd1bWVudHMgPSB0aGlzLnBhcnNlRXhwckxpc3QodHlwZXMucGFyZW5SLCB0aGlzLm9wdGlvbnMuZWNtYVZlcnNpb24gPj0gOCwgZmFsc2UpOyB9XG4gICAgZWxzZSB7IG5vZGUuYXJndW1lbnRzID0gZW1wdHkkMTsgfVxuICAgIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJOZXdFeHByZXNzaW9uXCIpXG4gIH07XG5cbiAgLy8gUGFyc2UgdGVtcGxhdGUgZXhwcmVzc2lvbi5cblxuICBwcCQzLnBhcnNlVGVtcGxhdGVFbGVtZW50ID0gZnVuY3Rpb24ocmVmKSB7XG4gICAgdmFyIGlzVGFnZ2VkID0gcmVmLmlzVGFnZ2VkO1xuXG4gICAgdmFyIGVsZW0gPSB0aGlzLnN0YXJ0Tm9kZSgpO1xuICAgIGlmICh0aGlzLnR5cGUgPT09IHR5cGVzLmludmFsaWRUZW1wbGF0ZSkge1xuICAgICAgaWYgKCFpc1RhZ2dlZCkge1xuICAgICAgICB0aGlzLnJhaXNlUmVjb3ZlcmFibGUodGhpcy5zdGFydCwgXCJCYWQgZXNjYXBlIHNlcXVlbmNlIGluIHVudGFnZ2VkIHRlbXBsYXRlIGxpdGVyYWxcIik7XG4gICAgICB9XG4gICAgICBlbGVtLnZhbHVlID0ge1xuICAgICAgICByYXc6IHRoaXMudmFsdWUsXG4gICAgICAgIGNvb2tlZDogbnVsbFxuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgZWxlbS52YWx1ZSA9IHtcbiAgICAgICAgcmF3OiB0aGlzLmlucHV0LnNsaWNlKHRoaXMuc3RhcnQsIHRoaXMuZW5kKS5yZXBsYWNlKC9cXHJcXG4/L2csIFwiXFxuXCIpLFxuICAgICAgICBjb29rZWQ6IHRoaXMudmFsdWVcbiAgICAgIH07XG4gICAgfVxuICAgIHRoaXMubmV4dCgpO1xuICAgIGVsZW0udGFpbCA9IHRoaXMudHlwZSA9PT0gdHlwZXMuYmFja1F1b3RlO1xuICAgIHJldHVybiB0aGlzLmZpbmlzaE5vZGUoZWxlbSwgXCJUZW1wbGF0ZUVsZW1lbnRcIilcbiAgfTtcblxuICBwcCQzLnBhcnNlVGVtcGxhdGUgPSBmdW5jdGlvbihyZWYpIHtcbiAgICBpZiAoIHJlZiA9PT0gdm9pZCAwICkgcmVmID0ge307XG4gICAgdmFyIGlzVGFnZ2VkID0gcmVmLmlzVGFnZ2VkOyBpZiAoIGlzVGFnZ2VkID09PSB2b2lkIDAgKSBpc1RhZ2dlZCA9IGZhbHNlO1xuXG4gICAgdmFyIG5vZGUgPSB0aGlzLnN0YXJ0Tm9kZSgpO1xuICAgIHRoaXMubmV4dCgpO1xuICAgIG5vZGUuZXhwcmVzc2lvbnMgPSBbXTtcbiAgICB2YXIgY3VyRWx0ID0gdGhpcy5wYXJzZVRlbXBsYXRlRWxlbWVudCh7aXNUYWdnZWQ6IGlzVGFnZ2VkfSk7XG4gICAgbm9kZS5xdWFzaXMgPSBbY3VyRWx0XTtcbiAgICB3aGlsZSAoIWN1ckVsdC50YWlsKSB7XG4gICAgICBpZiAodGhpcy50eXBlID09PSB0eXBlcy5lb2YpIHsgdGhpcy5yYWlzZSh0aGlzLnBvcywgXCJVbnRlcm1pbmF0ZWQgdGVtcGxhdGUgbGl0ZXJhbFwiKTsgfVxuICAgICAgdGhpcy5leHBlY3QodHlwZXMuZG9sbGFyQnJhY2VMKTtcbiAgICAgIG5vZGUuZXhwcmVzc2lvbnMucHVzaCh0aGlzLnBhcnNlRXhwcmVzc2lvbigpKTtcbiAgICAgIHRoaXMuZXhwZWN0KHR5cGVzLmJyYWNlUik7XG4gICAgICBub2RlLnF1YXNpcy5wdXNoKGN1ckVsdCA9IHRoaXMucGFyc2VUZW1wbGF0ZUVsZW1lbnQoe2lzVGFnZ2VkOiBpc1RhZ2dlZH0pKTtcbiAgICB9XG4gICAgdGhpcy5uZXh0KCk7XG4gICAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCBcIlRlbXBsYXRlTGl0ZXJhbFwiKVxuICB9O1xuXG4gIHBwJDMuaXNBc3luY1Byb3AgPSBmdW5jdGlvbihwcm9wKSB7XG4gICAgcmV0dXJuICFwcm9wLmNvbXB1dGVkICYmIHByb3Aua2V5LnR5cGUgPT09IFwiSWRlbnRpZmllclwiICYmIHByb3Aua2V5Lm5hbWUgPT09IFwiYXN5bmNcIiAmJlxuICAgICAgKHRoaXMudHlwZSA9PT0gdHlwZXMubmFtZSB8fCB0aGlzLnR5cGUgPT09IHR5cGVzLm51bSB8fCB0aGlzLnR5cGUgPT09IHR5cGVzLnN0cmluZyB8fCB0aGlzLnR5cGUgPT09IHR5cGVzLmJyYWNrZXRMIHx8IHRoaXMudHlwZS5rZXl3b3JkIHx8ICh0aGlzLm9wdGlvbnMuZWNtYVZlcnNpb24gPj0gOSAmJiB0aGlzLnR5cGUgPT09IHR5cGVzLnN0YXIpKSAmJlxuICAgICAgIWxpbmVCcmVhay50ZXN0KHRoaXMuaW5wdXQuc2xpY2UodGhpcy5sYXN0VG9rRW5kLCB0aGlzLnN0YXJ0KSlcbiAgfTtcblxuICAvLyBQYXJzZSBhbiBvYmplY3QgbGl0ZXJhbCBvciBiaW5kaW5nIHBhdHRlcm4uXG5cbiAgcHAkMy5wYXJzZU9iaiA9IGZ1bmN0aW9uKGlzUGF0dGVybiwgcmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycykge1xuICAgIHZhciBub2RlID0gdGhpcy5zdGFydE5vZGUoKSwgZmlyc3QgPSB0cnVlLCBwcm9wSGFzaCA9IHt9O1xuICAgIG5vZGUucHJvcGVydGllcyA9IFtdO1xuICAgIHRoaXMubmV4dCgpO1xuICAgIHdoaWxlICghdGhpcy5lYXQodHlwZXMuYnJhY2VSKSkge1xuICAgICAgaWYgKCFmaXJzdCkge1xuICAgICAgICB0aGlzLmV4cGVjdCh0eXBlcy5jb21tYSk7XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuZWNtYVZlcnNpb24gPj0gNSAmJiB0aGlzLmFmdGVyVHJhaWxpbmdDb21tYSh0eXBlcy5icmFjZVIpKSB7IGJyZWFrIH1cbiAgICAgIH0gZWxzZSB7IGZpcnN0ID0gZmFsc2U7IH1cblxuICAgICAgdmFyIHByb3AgPSB0aGlzLnBhcnNlUHJvcGVydHkoaXNQYXR0ZXJuLCByZWZEZXN0cnVjdHVyaW5nRXJyb3JzKTtcbiAgICAgIGlmICghaXNQYXR0ZXJuKSB7IHRoaXMuY2hlY2tQcm9wQ2xhc2gocHJvcCwgcHJvcEhhc2gsIHJlZkRlc3RydWN0dXJpbmdFcnJvcnMpOyB9XG4gICAgICBub2RlLnByb3BlcnRpZXMucHVzaChwcm9wKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCBpc1BhdHRlcm4gPyBcIk9iamVjdFBhdHRlcm5cIiA6IFwiT2JqZWN0RXhwcmVzc2lvblwiKVxuICB9O1xuXG4gIHBwJDMucGFyc2VQcm9wZXJ0eSA9IGZ1bmN0aW9uKGlzUGF0dGVybiwgcmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycykge1xuICAgIHZhciBwcm9wID0gdGhpcy5zdGFydE5vZGUoKSwgaXNHZW5lcmF0b3IsIGlzQXN5bmMsIHN0YXJ0UG9zLCBzdGFydExvYztcbiAgICBpZiAodGhpcy5vcHRpb25zLmVjbWFWZXJzaW9uID49IDkgJiYgdGhpcy5lYXQodHlwZXMuZWxsaXBzaXMpKSB7XG4gICAgICBpZiAoaXNQYXR0ZXJuKSB7XG4gICAgICAgIHByb3AuYXJndW1lbnQgPSB0aGlzLnBhcnNlSWRlbnQoZmFsc2UpO1xuICAgICAgICBpZiAodGhpcy50eXBlID09PSB0eXBlcy5jb21tYSkge1xuICAgICAgICAgIHRoaXMucmFpc2UodGhpcy5zdGFydCwgXCJDb21tYSBpcyBub3QgcGVybWl0dGVkIGFmdGVyIHRoZSByZXN0IGVsZW1lbnRcIik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShwcm9wLCBcIlJlc3RFbGVtZW50XCIpXG4gICAgICB9XG4gICAgICAvLyBUbyBkaXNhbGxvdyBwYXJlbnRoZXNpemVkIGlkZW50aWZpZXIgdmlhIGB0aGlzLnRvQXNzaWduYWJsZSgpYC5cbiAgICAgIGlmICh0aGlzLnR5cGUgPT09IHR5cGVzLnBhcmVuTCAmJiByZWZEZXN0cnVjdHVyaW5nRXJyb3JzKSB7XG4gICAgICAgIGlmIChyZWZEZXN0cnVjdHVyaW5nRXJyb3JzLnBhcmVudGhlc2l6ZWRBc3NpZ24gPCAwKSB7XG4gICAgICAgICAgcmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycy5wYXJlbnRoZXNpemVkQXNzaWduID0gdGhpcy5zdGFydDtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycy5wYXJlbnRoZXNpemVkQmluZCA8IDApIHtcbiAgICAgICAgICByZWZEZXN0cnVjdHVyaW5nRXJyb3JzLnBhcmVudGhlc2l6ZWRCaW5kID0gdGhpcy5zdGFydDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gUGFyc2UgYXJndW1lbnQuXG4gICAgICBwcm9wLmFyZ3VtZW50ID0gdGhpcy5wYXJzZU1heWJlQXNzaWduKGZhbHNlLCByZWZEZXN0cnVjdHVyaW5nRXJyb3JzKTtcbiAgICAgIC8vIFRvIGRpc2FsbG93IHRyYWlsaW5nIGNvbW1hIHZpYSBgdGhpcy50b0Fzc2lnbmFibGUoKWAuXG4gICAgICBpZiAodGhpcy50eXBlID09PSB0eXBlcy5jb21tYSAmJiByZWZEZXN0cnVjdHVyaW5nRXJyb3JzICYmIHJlZkRlc3RydWN0dXJpbmdFcnJvcnMudHJhaWxpbmdDb21tYSA8IDApIHtcbiAgICAgICAgcmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycy50cmFpbGluZ0NvbW1hID0gdGhpcy5zdGFydDtcbiAgICAgIH1cbiAgICAgIC8vIEZpbmlzaFxuICAgICAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShwcm9wLCBcIlNwcmVhZEVsZW1lbnRcIilcbiAgICB9XG4gICAgaWYgKHRoaXMub3B0aW9ucy5lY21hVmVyc2lvbiA+PSA2KSB7XG4gICAgICBwcm9wLm1ldGhvZCA9IGZhbHNlO1xuICAgICAgcHJvcC5zaG9ydGhhbmQgPSBmYWxzZTtcbiAgICAgIGlmIChpc1BhdHRlcm4gfHwgcmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycykge1xuICAgICAgICBzdGFydFBvcyA9IHRoaXMuc3RhcnQ7XG4gICAgICAgIHN0YXJ0TG9jID0gdGhpcy5zdGFydExvYztcbiAgICAgIH1cbiAgICAgIGlmICghaXNQYXR0ZXJuKVxuICAgICAgICB7IGlzR2VuZXJhdG9yID0gdGhpcy5lYXQodHlwZXMuc3Rhcik7IH1cbiAgICB9XG4gICAgdmFyIGNvbnRhaW5zRXNjID0gdGhpcy5jb250YWluc0VzYztcbiAgICB0aGlzLnBhcnNlUHJvcGVydHlOYW1lKHByb3ApO1xuICAgIGlmICghaXNQYXR0ZXJuICYmICFjb250YWluc0VzYyAmJiB0aGlzLm9wdGlvbnMuZWNtYVZlcnNpb24gPj0gOCAmJiAhaXNHZW5lcmF0b3IgJiYgdGhpcy5pc0FzeW5jUHJvcChwcm9wKSkge1xuICAgICAgaXNBc3luYyA9IHRydWU7XG4gICAgICBpc0dlbmVyYXRvciA9IHRoaXMub3B0aW9ucy5lY21hVmVyc2lvbiA+PSA5ICYmIHRoaXMuZWF0KHR5cGVzLnN0YXIpO1xuICAgICAgdGhpcy5wYXJzZVByb3BlcnR5TmFtZShwcm9wLCByZWZEZXN0cnVjdHVyaW5nRXJyb3JzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaXNBc3luYyA9IGZhbHNlO1xuICAgIH1cbiAgICB0aGlzLnBhcnNlUHJvcGVydHlWYWx1ZShwcm9wLCBpc1BhdHRlcm4sIGlzR2VuZXJhdG9yLCBpc0FzeW5jLCBzdGFydFBvcywgc3RhcnRMb2MsIHJlZkRlc3RydWN0dXJpbmdFcnJvcnMsIGNvbnRhaW5zRXNjKTtcbiAgICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKHByb3AsIFwiUHJvcGVydHlcIilcbiAgfTtcblxuICBwcCQzLnBhcnNlUHJvcGVydHlWYWx1ZSA9IGZ1bmN0aW9uKHByb3AsIGlzUGF0dGVybiwgaXNHZW5lcmF0b3IsIGlzQXN5bmMsIHN0YXJ0UG9zLCBzdGFydExvYywgcmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycywgY29udGFpbnNFc2MpIHtcbiAgICBpZiAoKGlzR2VuZXJhdG9yIHx8IGlzQXN5bmMpICYmIHRoaXMudHlwZSA9PT0gdHlwZXMuY29sb24pXG4gICAgICB7IHRoaXMudW5leHBlY3RlZCgpOyB9XG5cbiAgICBpZiAodGhpcy5lYXQodHlwZXMuY29sb24pKSB7XG4gICAgICBwcm9wLnZhbHVlID0gaXNQYXR0ZXJuID8gdGhpcy5wYXJzZU1heWJlRGVmYXVsdCh0aGlzLnN0YXJ0LCB0aGlzLnN0YXJ0TG9jKSA6IHRoaXMucGFyc2VNYXliZUFzc2lnbihmYWxzZSwgcmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycyk7XG4gICAgICBwcm9wLmtpbmQgPSBcImluaXRcIjtcbiAgICB9IGVsc2UgaWYgKHRoaXMub3B0aW9ucy5lY21hVmVyc2lvbiA+PSA2ICYmIHRoaXMudHlwZSA9PT0gdHlwZXMucGFyZW5MKSB7XG4gICAgICBpZiAoaXNQYXR0ZXJuKSB7IHRoaXMudW5leHBlY3RlZCgpOyB9XG4gICAgICBwcm9wLmtpbmQgPSBcImluaXRcIjtcbiAgICAgIHByb3AubWV0aG9kID0gdHJ1ZTtcbiAgICAgIHByb3AudmFsdWUgPSB0aGlzLnBhcnNlTWV0aG9kKGlzR2VuZXJhdG9yLCBpc0FzeW5jKTtcbiAgICB9IGVsc2UgaWYgKCFpc1BhdHRlcm4gJiYgIWNvbnRhaW5zRXNjICYmXG4gICAgICAgICAgICAgICB0aGlzLm9wdGlvbnMuZWNtYVZlcnNpb24gPj0gNSAmJiAhcHJvcC5jb21wdXRlZCAmJiBwcm9wLmtleS50eXBlID09PSBcIklkZW50aWZpZXJcIiAmJlxuICAgICAgICAgICAgICAgKHByb3Aua2V5Lm5hbWUgPT09IFwiZ2V0XCIgfHwgcHJvcC5rZXkubmFtZSA9PT0gXCJzZXRcIikgJiZcbiAgICAgICAgICAgICAgICh0aGlzLnR5cGUgIT09IHR5cGVzLmNvbW1hICYmIHRoaXMudHlwZSAhPT0gdHlwZXMuYnJhY2VSICYmIHRoaXMudHlwZSAhPT0gdHlwZXMuZXEpKSB7XG4gICAgICBpZiAoaXNHZW5lcmF0b3IgfHwgaXNBc3luYykgeyB0aGlzLnVuZXhwZWN0ZWQoKTsgfVxuICAgICAgcHJvcC5raW5kID0gcHJvcC5rZXkubmFtZTtcbiAgICAgIHRoaXMucGFyc2VQcm9wZXJ0eU5hbWUocHJvcCk7XG4gICAgICBwcm9wLnZhbHVlID0gdGhpcy5wYXJzZU1ldGhvZChmYWxzZSk7XG4gICAgICB2YXIgcGFyYW1Db3VudCA9IHByb3Aua2luZCA9PT0gXCJnZXRcIiA/IDAgOiAxO1xuICAgICAgaWYgKHByb3AudmFsdWUucGFyYW1zLmxlbmd0aCAhPT0gcGFyYW1Db3VudCkge1xuICAgICAgICB2YXIgc3RhcnQgPSBwcm9wLnZhbHVlLnN0YXJ0O1xuICAgICAgICBpZiAocHJvcC5raW5kID09PSBcImdldFwiKVxuICAgICAgICAgIHsgdGhpcy5yYWlzZVJlY292ZXJhYmxlKHN0YXJ0LCBcImdldHRlciBzaG91bGQgaGF2ZSBubyBwYXJhbXNcIik7IH1cbiAgICAgICAgZWxzZVxuICAgICAgICAgIHsgdGhpcy5yYWlzZVJlY292ZXJhYmxlKHN0YXJ0LCBcInNldHRlciBzaG91bGQgaGF2ZSBleGFjdGx5IG9uZSBwYXJhbVwiKTsgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHByb3Aua2luZCA9PT0gXCJzZXRcIiAmJiBwcm9wLnZhbHVlLnBhcmFtc1swXS50eXBlID09PSBcIlJlc3RFbGVtZW50XCIpXG4gICAgICAgICAgeyB0aGlzLnJhaXNlUmVjb3ZlcmFibGUocHJvcC52YWx1ZS5wYXJhbXNbMF0uc3RhcnQsIFwiU2V0dGVyIGNhbm5vdCB1c2UgcmVzdCBwYXJhbXNcIik7IH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHRoaXMub3B0aW9ucy5lY21hVmVyc2lvbiA+PSA2ICYmICFwcm9wLmNvbXB1dGVkICYmIHByb3Aua2V5LnR5cGUgPT09IFwiSWRlbnRpZmllclwiKSB7XG4gICAgICBpZiAoaXNHZW5lcmF0b3IgfHwgaXNBc3luYykgeyB0aGlzLnVuZXhwZWN0ZWQoKTsgfVxuICAgICAgdGhpcy5jaGVja1VucmVzZXJ2ZWQocHJvcC5rZXkpO1xuICAgICAgaWYgKHByb3Aua2V5Lm5hbWUgPT09IFwiYXdhaXRcIiAmJiAhdGhpcy5hd2FpdElkZW50UG9zKVxuICAgICAgICB7IHRoaXMuYXdhaXRJZGVudFBvcyA9IHN0YXJ0UG9zOyB9XG4gICAgICBwcm9wLmtpbmQgPSBcImluaXRcIjtcbiAgICAgIGlmIChpc1BhdHRlcm4pIHtcbiAgICAgICAgcHJvcC52YWx1ZSA9IHRoaXMucGFyc2VNYXliZURlZmF1bHQoc3RhcnRQb3MsIHN0YXJ0TG9jLCB0aGlzLmNvcHlOb2RlKHByb3Aua2V5KSk7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMudHlwZSA9PT0gdHlwZXMuZXEgJiYgcmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycykge1xuICAgICAgICBpZiAocmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycy5zaG9ydGhhbmRBc3NpZ24gPCAwKVxuICAgICAgICAgIHsgcmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycy5zaG9ydGhhbmRBc3NpZ24gPSB0aGlzLnN0YXJ0OyB9XG4gICAgICAgIHByb3AudmFsdWUgPSB0aGlzLnBhcnNlTWF5YmVEZWZhdWx0KHN0YXJ0UG9zLCBzdGFydExvYywgdGhpcy5jb3B5Tm9kZShwcm9wLmtleSkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHJvcC52YWx1ZSA9IHRoaXMuY29weU5vZGUocHJvcC5rZXkpO1xuICAgICAgfVxuICAgICAgcHJvcC5zaG9ydGhhbmQgPSB0cnVlO1xuICAgIH0gZWxzZSB7IHRoaXMudW5leHBlY3RlZCgpOyB9XG4gIH07XG5cbiAgcHAkMy5wYXJzZVByb3BlcnR5TmFtZSA9IGZ1bmN0aW9uKHByb3ApIHtcbiAgICBpZiAodGhpcy5vcHRpb25zLmVjbWFWZXJzaW9uID49IDYpIHtcbiAgICAgIGlmICh0aGlzLmVhdCh0eXBlcy5icmFja2V0TCkpIHtcbiAgICAgICAgcHJvcC5jb21wdXRlZCA9IHRydWU7XG4gICAgICAgIHByb3Aua2V5ID0gdGhpcy5wYXJzZU1heWJlQXNzaWduKCk7XG4gICAgICAgIHRoaXMuZXhwZWN0KHR5cGVzLmJyYWNrZXRSKTtcbiAgICAgICAgcmV0dXJuIHByb3Aua2V5XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwcm9wLmNvbXB1dGVkID0gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBwcm9wLmtleSA9IHRoaXMudHlwZSA9PT0gdHlwZXMubnVtIHx8IHRoaXMudHlwZSA9PT0gdHlwZXMuc3RyaW5nID8gdGhpcy5wYXJzZUV4cHJBdG9tKCkgOiB0aGlzLnBhcnNlSWRlbnQodGhpcy5vcHRpb25zLmFsbG93UmVzZXJ2ZWQgIT09IFwibmV2ZXJcIilcbiAgfTtcblxuICAvLyBJbml0aWFsaXplIGVtcHR5IGZ1bmN0aW9uIG5vZGUuXG5cbiAgcHAkMy5pbml0RnVuY3Rpb24gPSBmdW5jdGlvbihub2RlKSB7XG4gICAgbm9kZS5pZCA9IG51bGw7XG4gICAgaWYgKHRoaXMub3B0aW9ucy5lY21hVmVyc2lvbiA+PSA2KSB7IG5vZGUuZ2VuZXJhdG9yID0gbm9kZS5leHByZXNzaW9uID0gZmFsc2U7IH1cbiAgICBpZiAodGhpcy5vcHRpb25zLmVjbWFWZXJzaW9uID49IDgpIHsgbm9kZS5hc3luYyA9IGZhbHNlOyB9XG4gIH07XG5cbiAgLy8gUGFyc2Ugb2JqZWN0IG9yIGNsYXNzIG1ldGhvZC5cblxuICBwcCQzLnBhcnNlTWV0aG9kID0gZnVuY3Rpb24oaXNHZW5lcmF0b3IsIGlzQXN5bmMsIGFsbG93RGlyZWN0U3VwZXIpIHtcbiAgICB2YXIgbm9kZSA9IHRoaXMuc3RhcnROb2RlKCksIG9sZFlpZWxkUG9zID0gdGhpcy55aWVsZFBvcywgb2xkQXdhaXRQb3MgPSB0aGlzLmF3YWl0UG9zLCBvbGRBd2FpdElkZW50UG9zID0gdGhpcy5hd2FpdElkZW50UG9zO1xuXG4gICAgdGhpcy5pbml0RnVuY3Rpb24obm9kZSk7XG4gICAgaWYgKHRoaXMub3B0aW9ucy5lY21hVmVyc2lvbiA+PSA2KVxuICAgICAgeyBub2RlLmdlbmVyYXRvciA9IGlzR2VuZXJhdG9yOyB9XG4gICAgaWYgKHRoaXMub3B0aW9ucy5lY21hVmVyc2lvbiA+PSA4KVxuICAgICAgeyBub2RlLmFzeW5jID0gISFpc0FzeW5jOyB9XG5cbiAgICB0aGlzLnlpZWxkUG9zID0gMDtcbiAgICB0aGlzLmF3YWl0UG9zID0gMDtcbiAgICB0aGlzLmF3YWl0SWRlbnRQb3MgPSAwO1xuICAgIHRoaXMuZW50ZXJTY29wZShmdW5jdGlvbkZsYWdzKGlzQXN5bmMsIG5vZGUuZ2VuZXJhdG9yKSB8IFNDT1BFX1NVUEVSIHwgKGFsbG93RGlyZWN0U3VwZXIgPyBTQ09QRV9ESVJFQ1RfU1VQRVIgOiAwKSk7XG5cbiAgICB0aGlzLmV4cGVjdCh0eXBlcy5wYXJlbkwpO1xuICAgIG5vZGUucGFyYW1zID0gdGhpcy5wYXJzZUJpbmRpbmdMaXN0KHR5cGVzLnBhcmVuUiwgZmFsc2UsIHRoaXMub3B0aW9ucy5lY21hVmVyc2lvbiA+PSA4KTtcbiAgICB0aGlzLmNoZWNrWWllbGRBd2FpdEluRGVmYXVsdFBhcmFtcygpO1xuICAgIHRoaXMucGFyc2VGdW5jdGlvbkJvZHkobm9kZSwgZmFsc2UsIHRydWUpO1xuXG4gICAgdGhpcy55aWVsZFBvcyA9IG9sZFlpZWxkUG9zO1xuICAgIHRoaXMuYXdhaXRQb3MgPSBvbGRBd2FpdFBvcztcbiAgICB0aGlzLmF3YWl0SWRlbnRQb3MgPSBvbGRBd2FpdElkZW50UG9zO1xuICAgIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJGdW5jdGlvbkV4cHJlc3Npb25cIilcbiAgfTtcblxuICAvLyBQYXJzZSBhcnJvdyBmdW5jdGlvbiBleHByZXNzaW9uIHdpdGggZ2l2ZW4gcGFyYW1ldGVycy5cblxuICBwcCQzLnBhcnNlQXJyb3dFeHByZXNzaW9uID0gZnVuY3Rpb24obm9kZSwgcGFyYW1zLCBpc0FzeW5jKSB7XG4gICAgdmFyIG9sZFlpZWxkUG9zID0gdGhpcy55aWVsZFBvcywgb2xkQXdhaXRQb3MgPSB0aGlzLmF3YWl0UG9zLCBvbGRBd2FpdElkZW50UG9zID0gdGhpcy5hd2FpdElkZW50UG9zO1xuXG4gICAgdGhpcy5lbnRlclNjb3BlKGZ1bmN0aW9uRmxhZ3MoaXNBc3luYywgZmFsc2UpIHwgU0NPUEVfQVJST1cpO1xuICAgIHRoaXMuaW5pdEZ1bmN0aW9uKG5vZGUpO1xuICAgIGlmICh0aGlzLm9wdGlvbnMuZWNtYVZlcnNpb24gPj0gOCkgeyBub2RlLmFzeW5jID0gISFpc0FzeW5jOyB9XG5cbiAgICB0aGlzLnlpZWxkUG9zID0gMDtcbiAgICB0aGlzLmF3YWl0UG9zID0gMDtcbiAgICB0aGlzLmF3YWl0SWRlbnRQb3MgPSAwO1xuXG4gICAgbm9kZS5wYXJhbXMgPSB0aGlzLnRvQXNzaWduYWJsZUxpc3QocGFyYW1zLCB0cnVlKTtcbiAgICB0aGlzLnBhcnNlRnVuY3Rpb25Cb2R5KG5vZGUsIHRydWUsIGZhbHNlKTtcblxuICAgIHRoaXMueWllbGRQb3MgPSBvbGRZaWVsZFBvcztcbiAgICB0aGlzLmF3YWl0UG9zID0gb2xkQXdhaXRQb3M7XG4gICAgdGhpcy5hd2FpdElkZW50UG9zID0gb2xkQXdhaXRJZGVudFBvcztcbiAgICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsIFwiQXJyb3dGdW5jdGlvbkV4cHJlc3Npb25cIilcbiAgfTtcblxuICAvLyBQYXJzZSBmdW5jdGlvbiBib2R5IGFuZCBjaGVjayBwYXJhbWV0ZXJzLlxuXG4gIHBwJDMucGFyc2VGdW5jdGlvbkJvZHkgPSBmdW5jdGlvbihub2RlLCBpc0Fycm93RnVuY3Rpb24sIGlzTWV0aG9kKSB7XG4gICAgdmFyIGlzRXhwcmVzc2lvbiA9IGlzQXJyb3dGdW5jdGlvbiAmJiB0aGlzLnR5cGUgIT09IHR5cGVzLmJyYWNlTDtcbiAgICB2YXIgb2xkU3RyaWN0ID0gdGhpcy5zdHJpY3QsIHVzZVN0cmljdCA9IGZhbHNlO1xuXG4gICAgaWYgKGlzRXhwcmVzc2lvbikge1xuICAgICAgbm9kZS5ib2R5ID0gdGhpcy5wYXJzZU1heWJlQXNzaWduKCk7XG4gICAgICBub2RlLmV4cHJlc3Npb24gPSB0cnVlO1xuICAgICAgdGhpcy5jaGVja1BhcmFtcyhub2RlLCBmYWxzZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBub25TaW1wbGUgPSB0aGlzLm9wdGlvbnMuZWNtYVZlcnNpb24gPj0gNyAmJiAhdGhpcy5pc1NpbXBsZVBhcmFtTGlzdChub2RlLnBhcmFtcyk7XG4gICAgICBpZiAoIW9sZFN0cmljdCB8fCBub25TaW1wbGUpIHtcbiAgICAgICAgdXNlU3RyaWN0ID0gdGhpcy5zdHJpY3REaXJlY3RpdmUodGhpcy5lbmQpO1xuICAgICAgICAvLyBJZiB0aGlzIGlzIGEgc3RyaWN0IG1vZGUgZnVuY3Rpb24sIHZlcmlmeSB0aGF0IGFyZ3VtZW50IG5hbWVzXG4gICAgICAgIC8vIGFyZSBub3QgcmVwZWF0ZWQsIGFuZCBpdCBkb2VzIG5vdCB0cnkgdG8gYmluZCB0aGUgd29yZHMgYGV2YWxgXG4gICAgICAgIC8vIG9yIGBhcmd1bWVudHNgLlxuICAgICAgICBpZiAodXNlU3RyaWN0ICYmIG5vblNpbXBsZSlcbiAgICAgICAgICB7IHRoaXMucmFpc2VSZWNvdmVyYWJsZShub2RlLnN0YXJ0LCBcIklsbGVnYWwgJ3VzZSBzdHJpY3QnIGRpcmVjdGl2ZSBpbiBmdW5jdGlvbiB3aXRoIG5vbi1zaW1wbGUgcGFyYW1ldGVyIGxpc3RcIik7IH1cbiAgICAgIH1cbiAgICAgIC8vIFN0YXJ0IGEgbmV3IHNjb3BlIHdpdGggcmVnYXJkIHRvIGxhYmVscyBhbmQgdGhlIGBpbkZ1bmN0aW9uYFxuICAgICAgLy8gZmxhZyAocmVzdG9yZSB0aGVtIHRvIHRoZWlyIG9sZCB2YWx1ZSBhZnRlcndhcmRzKS5cbiAgICAgIHZhciBvbGRMYWJlbHMgPSB0aGlzLmxhYmVscztcbiAgICAgIHRoaXMubGFiZWxzID0gW107XG4gICAgICBpZiAodXNlU3RyaWN0KSB7IHRoaXMuc3RyaWN0ID0gdHJ1ZTsgfVxuXG4gICAgICAvLyBBZGQgdGhlIHBhcmFtcyB0byB2YXJEZWNsYXJlZE5hbWVzIHRvIGVuc3VyZSB0aGF0IGFuIGVycm9yIGlzIHRocm93blxuICAgICAgLy8gaWYgYSBsZXQvY29uc3QgZGVjbGFyYXRpb24gaW4gdGhlIGZ1bmN0aW9uIGNsYXNoZXMgd2l0aCBvbmUgb2YgdGhlIHBhcmFtcy5cbiAgICAgIHRoaXMuY2hlY2tQYXJhbXMobm9kZSwgIW9sZFN0cmljdCAmJiAhdXNlU3RyaWN0ICYmICFpc0Fycm93RnVuY3Rpb24gJiYgIWlzTWV0aG9kICYmIHRoaXMuaXNTaW1wbGVQYXJhbUxpc3Qobm9kZS5wYXJhbXMpKTtcbiAgICAgIC8vIEVuc3VyZSB0aGUgZnVuY3Rpb24gbmFtZSBpc24ndCBhIGZvcmJpZGRlbiBpZGVudGlmaWVyIGluIHN0cmljdCBtb2RlLCBlLmcuICdldmFsJ1xuICAgICAgaWYgKHRoaXMuc3RyaWN0ICYmIG5vZGUuaWQpIHsgdGhpcy5jaGVja0xWYWxTaW1wbGUobm9kZS5pZCwgQklORF9PVVRTSURFKTsgfVxuICAgICAgbm9kZS5ib2R5ID0gdGhpcy5wYXJzZUJsb2NrKGZhbHNlLCB1bmRlZmluZWQsIHVzZVN0cmljdCAmJiAhb2xkU3RyaWN0KTtcbiAgICAgIG5vZGUuZXhwcmVzc2lvbiA9IGZhbHNlO1xuICAgICAgdGhpcy5hZGFwdERpcmVjdGl2ZVByb2xvZ3VlKG5vZGUuYm9keS5ib2R5KTtcbiAgICAgIHRoaXMubGFiZWxzID0gb2xkTGFiZWxzO1xuICAgIH1cbiAgICB0aGlzLmV4aXRTY29wZSgpO1xuICB9O1xuXG4gIHBwJDMuaXNTaW1wbGVQYXJhbUxpc3QgPSBmdW5jdGlvbihwYXJhbXMpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgbGlzdCA9IHBhcmFtczsgaSA8IGxpc3QubGVuZ3RoOyBpICs9IDEpXG4gICAgICB7XG4gICAgICB2YXIgcGFyYW0gPSBsaXN0W2ldO1xuXG4gICAgICBpZiAocGFyYW0udHlwZSAhPT0gXCJJZGVudGlmaWVyXCIpIHsgcmV0dXJuIGZhbHNlXG4gICAgfSB9XG4gICAgcmV0dXJuIHRydWVcbiAgfTtcblxuICAvLyBDaGVja3MgZnVuY3Rpb24gcGFyYW1zIGZvciB2YXJpb3VzIGRpc2FsbG93ZWQgcGF0dGVybnMgc3VjaCBhcyB1c2luZyBcImV2YWxcIlxuICAvLyBvciBcImFyZ3VtZW50c1wiIGFuZCBkdXBsaWNhdGUgcGFyYW1ldGVycy5cblxuICBwcCQzLmNoZWNrUGFyYW1zID0gZnVuY3Rpb24obm9kZSwgYWxsb3dEdXBsaWNhdGVzKSB7XG4gICAgdmFyIG5hbWVIYXNoID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICBmb3IgKHZhciBpID0gMCwgbGlzdCA9IG5vZGUucGFyYW1zOyBpIDwgbGlzdC5sZW5ndGg7IGkgKz0gMSlcbiAgICAgIHtcbiAgICAgIHZhciBwYXJhbSA9IGxpc3RbaV07XG5cbiAgICAgIHRoaXMuY2hlY2tMVmFsSW5uZXJQYXR0ZXJuKHBhcmFtLCBCSU5EX1ZBUiwgYWxsb3dEdXBsaWNhdGVzID8gbnVsbCA6IG5hbWVIYXNoKTtcbiAgICB9XG4gIH07XG5cbiAgLy8gUGFyc2VzIGEgY29tbWEtc2VwYXJhdGVkIGxpc3Qgb2YgZXhwcmVzc2lvbnMsIGFuZCByZXR1cm5zIHRoZW0gYXNcbiAgLy8gYW4gYXJyYXkuIGBjbG9zZWAgaXMgdGhlIHRva2VuIHR5cGUgdGhhdCBlbmRzIHRoZSBsaXN0LCBhbmRcbiAgLy8gYGFsbG93RW1wdHlgIGNhbiBiZSB0dXJuZWQgb24gdG8gYWxsb3cgc3Vic2VxdWVudCBjb21tYXMgd2l0aFxuICAvLyBub3RoaW5nIGluIGJldHdlZW4gdGhlbSB0byBiZSBwYXJzZWQgYXMgYG51bGxgICh3aGljaCBpcyBuZWVkZWRcbiAgLy8gZm9yIGFycmF5IGxpdGVyYWxzKS5cblxuICBwcCQzLnBhcnNlRXhwckxpc3QgPSBmdW5jdGlvbihjbG9zZSwgYWxsb3dUcmFpbGluZ0NvbW1hLCBhbGxvd0VtcHR5LCByZWZEZXN0cnVjdHVyaW5nRXJyb3JzKSB7XG4gICAgdmFyIGVsdHMgPSBbXSwgZmlyc3QgPSB0cnVlO1xuICAgIHdoaWxlICghdGhpcy5lYXQoY2xvc2UpKSB7XG4gICAgICBpZiAoIWZpcnN0KSB7XG4gICAgICAgIHRoaXMuZXhwZWN0KHR5cGVzLmNvbW1hKTtcbiAgICAgICAgaWYgKGFsbG93VHJhaWxpbmdDb21tYSAmJiB0aGlzLmFmdGVyVHJhaWxpbmdDb21tYShjbG9zZSkpIHsgYnJlYWsgfVxuICAgICAgfSBlbHNlIHsgZmlyc3QgPSBmYWxzZTsgfVxuXG4gICAgICB2YXIgZWx0ID0gKHZvaWQgMCk7XG4gICAgICBpZiAoYWxsb3dFbXB0eSAmJiB0aGlzLnR5cGUgPT09IHR5cGVzLmNvbW1hKVxuICAgICAgICB7IGVsdCA9IG51bGw7IH1cbiAgICAgIGVsc2UgaWYgKHRoaXMudHlwZSA9PT0gdHlwZXMuZWxsaXBzaXMpIHtcbiAgICAgICAgZWx0ID0gdGhpcy5wYXJzZVNwcmVhZChyZWZEZXN0cnVjdHVyaW5nRXJyb3JzKTtcbiAgICAgICAgaWYgKHJlZkRlc3RydWN0dXJpbmdFcnJvcnMgJiYgdGhpcy50eXBlID09PSB0eXBlcy5jb21tYSAmJiByZWZEZXN0cnVjdHVyaW5nRXJyb3JzLnRyYWlsaW5nQ29tbWEgPCAwKVxuICAgICAgICAgIHsgcmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycy50cmFpbGluZ0NvbW1hID0gdGhpcy5zdGFydDsgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZWx0ID0gdGhpcy5wYXJzZU1heWJlQXNzaWduKGZhbHNlLCByZWZEZXN0cnVjdHVyaW5nRXJyb3JzKTtcbiAgICAgIH1cbiAgICAgIGVsdHMucHVzaChlbHQpO1xuICAgIH1cbiAgICByZXR1cm4gZWx0c1xuICB9O1xuXG4gIHBwJDMuY2hlY2tVbnJlc2VydmVkID0gZnVuY3Rpb24ocmVmKSB7XG4gICAgdmFyIHN0YXJ0ID0gcmVmLnN0YXJ0O1xuICAgIHZhciBlbmQgPSByZWYuZW5kO1xuICAgIHZhciBuYW1lID0gcmVmLm5hbWU7XG5cbiAgICBpZiAodGhpcy5pbkdlbmVyYXRvciAmJiBuYW1lID09PSBcInlpZWxkXCIpXG4gICAgICB7IHRoaXMucmFpc2VSZWNvdmVyYWJsZShzdGFydCwgXCJDYW5ub3QgdXNlICd5aWVsZCcgYXMgaWRlbnRpZmllciBpbnNpZGUgYSBnZW5lcmF0b3JcIik7IH1cbiAgICBpZiAodGhpcy5pbkFzeW5jICYmIG5hbWUgPT09IFwiYXdhaXRcIilcbiAgICAgIHsgdGhpcy5yYWlzZVJlY292ZXJhYmxlKHN0YXJ0LCBcIkNhbm5vdCB1c2UgJ2F3YWl0JyBhcyBpZGVudGlmaWVyIGluc2lkZSBhbiBhc3luYyBmdW5jdGlvblwiKTsgfVxuICAgIGlmICh0aGlzLmN1cnJlbnRUaGlzU2NvcGUoKS5pbkNsYXNzRmllbGRJbml0ICYmIG5hbWUgPT09IFwiYXJndW1lbnRzXCIpXG4gICAgICB7IHRoaXMucmFpc2VSZWNvdmVyYWJsZShzdGFydCwgXCJDYW5ub3QgdXNlICdhcmd1bWVudHMnIGluIGNsYXNzIGZpZWxkIGluaXRpYWxpemVyXCIpOyB9XG4gICAgaWYgKHRoaXMua2V5d29yZHMudGVzdChuYW1lKSlcbiAgICAgIHsgdGhpcy5yYWlzZShzdGFydCwgKFwiVW5leHBlY3RlZCBrZXl3b3JkICdcIiArIG5hbWUgKyBcIidcIikpOyB9XG4gICAgaWYgKHRoaXMub3B0aW9ucy5lY21hVmVyc2lvbiA8IDYgJiZcbiAgICAgIHRoaXMuaW5wdXQuc2xpY2Uoc3RhcnQsIGVuZCkuaW5kZXhPZihcIlxcXFxcIikgIT09IC0xKSB7IHJldHVybiB9XG4gICAgdmFyIHJlID0gdGhpcy5zdHJpY3QgPyB0aGlzLnJlc2VydmVkV29yZHNTdHJpY3QgOiB0aGlzLnJlc2VydmVkV29yZHM7XG4gICAgaWYgKHJlLnRlc3QobmFtZSkpIHtcbiAgICAgIGlmICghdGhpcy5pbkFzeW5jICYmIG5hbWUgPT09IFwiYXdhaXRcIilcbiAgICAgICAgeyB0aGlzLnJhaXNlUmVjb3ZlcmFibGUoc3RhcnQsIFwiQ2Fubm90IHVzZSBrZXl3b3JkICdhd2FpdCcgb3V0c2lkZSBhbiBhc3luYyBmdW5jdGlvblwiKTsgfVxuICAgICAgdGhpcy5yYWlzZVJlY292ZXJhYmxlKHN0YXJ0LCAoXCJUaGUga2V5d29yZCAnXCIgKyBuYW1lICsgXCInIGlzIHJlc2VydmVkXCIpKTtcbiAgICB9XG4gIH07XG5cbiAgLy8gUGFyc2UgdGhlIG5leHQgdG9rZW4gYXMgYW4gaWRlbnRpZmllci4gSWYgYGxpYmVyYWxgIGlzIHRydWUgKHVzZWRcbiAgLy8gd2hlbiBwYXJzaW5nIHByb3BlcnRpZXMpLCBpdCB3aWxsIGFsc28gY29udmVydCBrZXl3b3JkcyBpbnRvXG4gIC8vIGlkZW50aWZpZXJzLlxuXG4gIHBwJDMucGFyc2VJZGVudCA9IGZ1bmN0aW9uKGxpYmVyYWwsIGlzQmluZGluZykge1xuICAgIHZhciBub2RlID0gdGhpcy5zdGFydE5vZGUoKTtcbiAgICBpZiAodGhpcy50eXBlID09PSB0eXBlcy5uYW1lKSB7XG4gICAgICBub2RlLm5hbWUgPSB0aGlzLnZhbHVlO1xuICAgIH0gZWxzZSBpZiAodGhpcy50eXBlLmtleXdvcmQpIHtcbiAgICAgIG5vZGUubmFtZSA9IHRoaXMudHlwZS5rZXl3b3JkO1xuXG4gICAgICAvLyBUbyBmaXggaHR0cHM6Ly9naXRodWIuY29tL2Fjb3JuanMvYWNvcm4vaXNzdWVzLzU3NVxuICAgICAgLy8gYGNsYXNzYCBhbmQgYGZ1bmN0aW9uYCBrZXl3b3JkcyBwdXNoIG5ldyBjb250ZXh0IGludG8gdGhpcy5jb250ZXh0LlxuICAgICAgLy8gQnV0IHRoZXJlIGlzIG5vIGNoYW5jZSB0byBwb3AgdGhlIGNvbnRleHQgaWYgdGhlIGtleXdvcmQgaXMgY29uc3VtZWQgYXMgYW4gaWRlbnRpZmllciBzdWNoIGFzIGEgcHJvcGVydHkgbmFtZS5cbiAgICAgIC8vIElmIHRoZSBwcmV2aW91cyB0b2tlbiBpcyBhIGRvdCwgdGhpcyBkb2VzIG5vdCBhcHBseSBiZWNhdXNlIHRoZSBjb250ZXh0LW1hbmFnaW5nIGNvZGUgYWxyZWFkeSBpZ25vcmVkIHRoZSBrZXl3b3JkXG4gICAgICBpZiAoKG5vZGUubmFtZSA9PT0gXCJjbGFzc1wiIHx8IG5vZGUubmFtZSA9PT0gXCJmdW5jdGlvblwiKSAmJlxuICAgICAgICAgICh0aGlzLmxhc3RUb2tFbmQgIT09IHRoaXMubGFzdFRva1N0YXJ0ICsgMSB8fCB0aGlzLmlucHV0LmNoYXJDb2RlQXQodGhpcy5sYXN0VG9rU3RhcnQpICE9PSA0NikpIHtcbiAgICAgICAgdGhpcy5jb250ZXh0LnBvcCgpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnVuZXhwZWN0ZWQoKTtcbiAgICB9XG4gICAgdGhpcy5uZXh0KCEhbGliZXJhbCk7XG4gICAgdGhpcy5maW5pc2hOb2RlKG5vZGUsIFwiSWRlbnRpZmllclwiKTtcbiAgICBpZiAoIWxpYmVyYWwpIHtcbiAgICAgIHRoaXMuY2hlY2tVbnJlc2VydmVkKG5vZGUpO1xuICAgICAgaWYgKG5vZGUubmFtZSA9PT0gXCJhd2FpdFwiICYmICF0aGlzLmF3YWl0SWRlbnRQb3MpXG4gICAgICAgIHsgdGhpcy5hd2FpdElkZW50UG9zID0gbm9kZS5zdGFydDsgfVxuICAgIH1cbiAgICByZXR1cm4gbm9kZVxuICB9O1xuXG4gIHBwJDMucGFyc2VQcml2YXRlSWRlbnQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgbm9kZSA9IHRoaXMuc3RhcnROb2RlKCk7XG4gICAgaWYgKHRoaXMudHlwZSA9PT0gdHlwZXMucHJpdmF0ZUlkKSB7XG4gICAgICBub2RlLm5hbWUgPSB0aGlzLnZhbHVlO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnVuZXhwZWN0ZWQoKTtcbiAgICB9XG4gICAgdGhpcy5uZXh0KCk7XG4gICAgdGhpcy5maW5pc2hOb2RlKG5vZGUsIFwiUHJpdmF0ZUlkZW50aWZpZXJcIik7XG5cbiAgICAvLyBGb3IgdmFsaWRhdGluZyBleGlzdGVuY2VcbiAgICBpZiAodGhpcy5wcml2YXRlTmFtZVN0YWNrLmxlbmd0aCA9PT0gMCkge1xuICAgICAgdGhpcy5yYWlzZShub2RlLnN0YXJ0LCAoXCJQcml2YXRlIGZpZWxkICcjXCIgKyAobm9kZS5uYW1lKSArIFwiJyBtdXN0IGJlIGRlY2xhcmVkIGluIGFuIGVuY2xvc2luZyBjbGFzc1wiKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucHJpdmF0ZU5hbWVTdGFja1t0aGlzLnByaXZhdGVOYW1lU3RhY2subGVuZ3RoIC0gMV0udXNlZC5wdXNoKG5vZGUpO1xuICAgIH1cblxuICAgIHJldHVybiBub2RlXG4gIH07XG5cbiAgLy8gUGFyc2VzIHlpZWxkIGV4cHJlc3Npb24gaW5zaWRlIGdlbmVyYXRvci5cblxuICBwcCQzLnBhcnNlWWllbGQgPSBmdW5jdGlvbihmb3JJbml0KSB7XG4gICAgaWYgKCF0aGlzLnlpZWxkUG9zKSB7IHRoaXMueWllbGRQb3MgPSB0aGlzLnN0YXJ0OyB9XG5cbiAgICB2YXIgbm9kZSA9IHRoaXMuc3RhcnROb2RlKCk7XG4gICAgdGhpcy5uZXh0KCk7XG4gICAgaWYgKHRoaXMudHlwZSA9PT0gdHlwZXMuc2VtaSB8fCB0aGlzLmNhbkluc2VydFNlbWljb2xvbigpIHx8ICh0aGlzLnR5cGUgIT09IHR5cGVzLnN0YXIgJiYgIXRoaXMudHlwZS5zdGFydHNFeHByKSkge1xuICAgICAgbm9kZS5kZWxlZ2F0ZSA9IGZhbHNlO1xuICAgICAgbm9kZS5hcmd1bWVudCA9IG51bGw7XG4gICAgfSBlbHNlIHtcbiAgICAgIG5vZGUuZGVsZWdhdGUgPSB0aGlzLmVhdCh0eXBlcy5zdGFyKTtcbiAgICAgIG5vZGUuYXJndW1lbnQgPSB0aGlzLnBhcnNlTWF5YmVBc3NpZ24oZm9ySW5pdCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJZaWVsZEV4cHJlc3Npb25cIilcbiAgfTtcblxuICBwcCQzLnBhcnNlQXdhaXQgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAoIXRoaXMuYXdhaXRQb3MpIHsgdGhpcy5hd2FpdFBvcyA9IHRoaXMuc3RhcnQ7IH1cblxuICAgIHZhciBub2RlID0gdGhpcy5zdGFydE5vZGUoKTtcbiAgICB0aGlzLm5leHQoKTtcbiAgICBub2RlLmFyZ3VtZW50ID0gdGhpcy5wYXJzZU1heWJlVW5hcnkobnVsbCwgdHJ1ZSk7XG4gICAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCBcIkF3YWl0RXhwcmVzc2lvblwiKVxuICB9O1xuXG4gIHZhciBwcCQ0ID0gUGFyc2VyLnByb3RvdHlwZTtcblxuICAvLyBUaGlzIGZ1bmN0aW9uIGlzIHVzZWQgdG8gcmFpc2UgZXhjZXB0aW9ucyBvbiBwYXJzZSBlcnJvcnMuIEl0XG4gIC8vIHRha2VzIGFuIG9mZnNldCBpbnRlZ2VyIChpbnRvIHRoZSBjdXJyZW50IGBpbnB1dGApIHRvIGluZGljYXRlXG4gIC8vIHRoZSBsb2NhdGlvbiBvZiB0aGUgZXJyb3IsIGF0dGFjaGVzIHRoZSBwb3NpdGlvbiB0byB0aGUgZW5kXG4gIC8vIG9mIHRoZSBlcnJvciBtZXNzYWdlLCBhbmQgdGhlbiByYWlzZXMgYSBgU3ludGF4RXJyb3JgIHdpdGggdGhhdFxuICAvLyBtZXNzYWdlLlxuXG4gIHBwJDQucmFpc2UgPSBmdW5jdGlvbihwb3MsIG1lc3NhZ2UpIHtcbiAgICB2YXIgbG9jID0gZ2V0TGluZUluZm8odGhpcy5pbnB1dCwgcG9zKTtcbiAgICBtZXNzYWdlICs9IFwiIChcIiArIGxvYy5saW5lICsgXCI6XCIgKyBsb2MuY29sdW1uICsgXCIpXCI7XG4gICAgdmFyIGVyciA9IG5ldyBTeW50YXhFcnJvcihtZXNzYWdlKTtcbiAgICBlcnIucG9zID0gcG9zOyBlcnIubG9jID0gbG9jOyBlcnIucmFpc2VkQXQgPSB0aGlzLnBvcztcbiAgICB0aHJvdyBlcnJcbiAgfTtcblxuICBwcCQ0LnJhaXNlUmVjb3ZlcmFibGUgPSBwcCQ0LnJhaXNlO1xuXG4gIHBwJDQuY3VyUG9zaXRpb24gPSBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy5vcHRpb25zLmxvY2F0aW9ucykge1xuICAgICAgcmV0dXJuIG5ldyBQb3NpdGlvbih0aGlzLmN1ckxpbmUsIHRoaXMucG9zIC0gdGhpcy5saW5lU3RhcnQpXG4gICAgfVxuICB9O1xuXG4gIHZhciBwcCQ1ID0gUGFyc2VyLnByb3RvdHlwZTtcblxuICB2YXIgU2NvcGUgPSBmdW5jdGlvbiBTY29wZShmbGFncykge1xuICAgIHRoaXMuZmxhZ3MgPSBmbGFncztcbiAgICAvLyBBIGxpc3Qgb2YgdmFyLWRlY2xhcmVkIG5hbWVzIGluIHRoZSBjdXJyZW50IGxleGljYWwgc2NvcGVcbiAgICB0aGlzLnZhciA9IFtdO1xuICAgIC8vIEEgbGlzdCBvZiBsZXhpY2FsbHktZGVjbGFyZWQgbmFtZXMgaW4gdGhlIGN1cnJlbnQgbGV4aWNhbCBzY29wZVxuICAgIHRoaXMubGV4aWNhbCA9IFtdO1xuICAgIC8vIEEgbGlzdCBvZiBsZXhpY2FsbHktZGVjbGFyZWQgRnVuY3Rpb25EZWNsYXJhdGlvbiBuYW1lcyBpbiB0aGUgY3VycmVudCBsZXhpY2FsIHNjb3BlXG4gICAgdGhpcy5mdW5jdGlvbnMgPSBbXTtcbiAgICAvLyBBIHN3aXRjaCB0byBkaXNhbGxvdyB0aGUgaWRlbnRpZmllciByZWZlcmVuY2UgJ2FyZ3VtZW50cydcbiAgICB0aGlzLmluQ2xhc3NGaWVsZEluaXQgPSBmYWxzZTtcbiAgfTtcblxuICAvLyBUaGUgZnVuY3Rpb25zIGluIHRoaXMgbW9kdWxlIGtlZXAgdHJhY2sgb2YgZGVjbGFyZWQgdmFyaWFibGVzIGluIHRoZSBjdXJyZW50IHNjb3BlIGluIG9yZGVyIHRvIGRldGVjdCBkdXBsaWNhdGUgdmFyaWFibGUgbmFtZXMuXG5cbiAgcHAkNS5lbnRlclNjb3BlID0gZnVuY3Rpb24oZmxhZ3MpIHtcbiAgICB0aGlzLnNjb3BlU3RhY2sucHVzaChuZXcgU2NvcGUoZmxhZ3MpKTtcbiAgfTtcblxuICBwcCQ1LmV4aXRTY29wZSA9IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuc2NvcGVTdGFjay5wb3AoKTtcbiAgfTtcblxuICAvLyBUaGUgc3BlYyBzYXlzOlxuICAvLyA+IEF0IHRoZSB0b3AgbGV2ZWwgb2YgYSBmdW5jdGlvbiwgb3Igc2NyaXB0LCBmdW5jdGlvbiBkZWNsYXJhdGlvbnMgYXJlXG4gIC8vID4gdHJlYXRlZCBsaWtlIHZhciBkZWNsYXJhdGlvbnMgcmF0aGVyIHRoYW4gbGlrZSBsZXhpY2FsIGRlY2xhcmF0aW9ucy5cbiAgcHAkNS50cmVhdEZ1bmN0aW9uc0FzVmFySW5TY29wZSA9IGZ1bmN0aW9uKHNjb3BlKSB7XG4gICAgcmV0dXJuIChzY29wZS5mbGFncyAmIFNDT1BFX0ZVTkNUSU9OKSB8fCAhdGhpcy5pbk1vZHVsZSAmJiAoc2NvcGUuZmxhZ3MgJiBTQ09QRV9UT1ApXG4gIH07XG5cbiAgcHAkNS5kZWNsYXJlTmFtZSA9IGZ1bmN0aW9uKG5hbWUsIGJpbmRpbmdUeXBlLCBwb3MpIHtcbiAgICB2YXIgcmVkZWNsYXJlZCA9IGZhbHNlO1xuICAgIGlmIChiaW5kaW5nVHlwZSA9PT0gQklORF9MRVhJQ0FMKSB7XG4gICAgICB2YXIgc2NvcGUgPSB0aGlzLmN1cnJlbnRTY29wZSgpO1xuICAgICAgcmVkZWNsYXJlZCA9IHNjb3BlLmxleGljYWwuaW5kZXhPZihuYW1lKSA+IC0xIHx8IHNjb3BlLmZ1bmN0aW9ucy5pbmRleE9mKG5hbWUpID4gLTEgfHwgc2NvcGUudmFyLmluZGV4T2YobmFtZSkgPiAtMTtcbiAgICAgIHNjb3BlLmxleGljYWwucHVzaChuYW1lKTtcbiAgICAgIGlmICh0aGlzLmluTW9kdWxlICYmIChzY29wZS5mbGFncyAmIFNDT1BFX1RPUCkpXG4gICAgICAgIHsgZGVsZXRlIHRoaXMudW5kZWZpbmVkRXhwb3J0c1tuYW1lXTsgfVxuICAgIH0gZWxzZSBpZiAoYmluZGluZ1R5cGUgPT09IEJJTkRfU0lNUExFX0NBVENIKSB7XG4gICAgICB2YXIgc2NvcGUkMSA9IHRoaXMuY3VycmVudFNjb3BlKCk7XG4gICAgICBzY29wZSQxLmxleGljYWwucHVzaChuYW1lKTtcbiAgICB9IGVsc2UgaWYgKGJpbmRpbmdUeXBlID09PSBCSU5EX0ZVTkNUSU9OKSB7XG4gICAgICB2YXIgc2NvcGUkMiA9IHRoaXMuY3VycmVudFNjb3BlKCk7XG4gICAgICBpZiAodGhpcy50cmVhdEZ1bmN0aW9uc0FzVmFyKVxuICAgICAgICB7IHJlZGVjbGFyZWQgPSBzY29wZSQyLmxleGljYWwuaW5kZXhPZihuYW1lKSA+IC0xOyB9XG4gICAgICBlbHNlXG4gICAgICAgIHsgcmVkZWNsYXJlZCA9IHNjb3BlJDIubGV4aWNhbC5pbmRleE9mKG5hbWUpID4gLTEgfHwgc2NvcGUkMi52YXIuaW5kZXhPZihuYW1lKSA+IC0xOyB9XG4gICAgICBzY29wZSQyLmZ1bmN0aW9ucy5wdXNoKG5hbWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy5zY29wZVN0YWNrLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBzY29wZSQzID0gdGhpcy5zY29wZVN0YWNrW2ldO1xuICAgICAgICBpZiAoc2NvcGUkMy5sZXhpY2FsLmluZGV4T2YobmFtZSkgPiAtMSAmJiAhKChzY29wZSQzLmZsYWdzICYgU0NPUEVfU0lNUExFX0NBVENIKSAmJiBzY29wZSQzLmxleGljYWxbMF0gPT09IG5hbWUpIHx8XG4gICAgICAgICAgICAhdGhpcy50cmVhdEZ1bmN0aW9uc0FzVmFySW5TY29wZShzY29wZSQzKSAmJiBzY29wZSQzLmZ1bmN0aW9ucy5pbmRleE9mKG5hbWUpID4gLTEpIHtcbiAgICAgICAgICByZWRlY2xhcmVkID0gdHJ1ZTtcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICAgIHNjb3BlJDMudmFyLnB1c2gobmFtZSk7XG4gICAgICAgIGlmICh0aGlzLmluTW9kdWxlICYmIChzY29wZSQzLmZsYWdzICYgU0NPUEVfVE9QKSlcbiAgICAgICAgICB7IGRlbGV0ZSB0aGlzLnVuZGVmaW5lZEV4cG9ydHNbbmFtZV07IH1cbiAgICAgICAgaWYgKHNjb3BlJDMuZmxhZ3MgJiBTQ09QRV9WQVIpIHsgYnJlYWsgfVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAocmVkZWNsYXJlZCkgeyB0aGlzLnJhaXNlUmVjb3ZlcmFibGUocG9zLCAoXCJJZGVudGlmaWVyICdcIiArIG5hbWUgKyBcIicgaGFzIGFscmVhZHkgYmVlbiBkZWNsYXJlZFwiKSk7IH1cbiAgfTtcblxuICBwcCQ1LmNoZWNrTG9jYWxFeHBvcnQgPSBmdW5jdGlvbihpZCkge1xuICAgIC8vIHNjb3BlLmZ1bmN0aW9ucyBtdXN0IGJlIGVtcHR5IGFzIE1vZHVsZSBjb2RlIGlzIGFsd2F5cyBzdHJpY3QuXG4gICAgaWYgKHRoaXMuc2NvcGVTdGFja1swXS5sZXhpY2FsLmluZGV4T2YoaWQubmFtZSkgPT09IC0xICYmXG4gICAgICAgIHRoaXMuc2NvcGVTdGFja1swXS52YXIuaW5kZXhPZihpZC5uYW1lKSA9PT0gLTEpIHtcbiAgICAgIHRoaXMudW5kZWZpbmVkRXhwb3J0c1tpZC5uYW1lXSA9IGlkO1xuICAgIH1cbiAgfTtcblxuICBwcCQ1LmN1cnJlbnRTY29wZSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnNjb3BlU3RhY2tbdGhpcy5zY29wZVN0YWNrLmxlbmd0aCAtIDFdXG4gIH07XG5cbiAgcHAkNS5jdXJyZW50VmFyU2NvcGUgPSBmdW5jdGlvbigpIHtcbiAgICBmb3IgKHZhciBpID0gdGhpcy5zY29wZVN0YWNrLmxlbmd0aCAtIDE7OyBpLS0pIHtcbiAgICAgIHZhciBzY29wZSA9IHRoaXMuc2NvcGVTdGFja1tpXTtcbiAgICAgIGlmIChzY29wZS5mbGFncyAmIFNDT1BFX1ZBUikgeyByZXR1cm4gc2NvcGUgfVxuICAgIH1cbiAgfTtcblxuICAvLyBDb3VsZCBiZSB1c2VmdWwgZm9yIGB0aGlzYCwgYG5ldy50YXJnZXRgLCBgc3VwZXIoKWAsIGBzdXBlci5wcm9wZXJ0eWAsIGFuZCBgc3VwZXJbcHJvcGVydHldYC5cbiAgcHAkNS5jdXJyZW50VGhpc1Njb3BlID0gZnVuY3Rpb24oKSB7XG4gICAgZm9yICh2YXIgaSA9IHRoaXMuc2NvcGVTdGFjay5sZW5ndGggLSAxOzsgaS0tKSB7XG4gICAgICB2YXIgc2NvcGUgPSB0aGlzLnNjb3BlU3RhY2tbaV07XG4gICAgICBpZiAoc2NvcGUuZmxhZ3MgJiBTQ09QRV9WQVIgJiYgIShzY29wZS5mbGFncyAmIFNDT1BFX0FSUk9XKSkgeyByZXR1cm4gc2NvcGUgfVxuICAgIH1cbiAgfTtcblxuICB2YXIgTm9kZSA9IGZ1bmN0aW9uIE5vZGUocGFyc2VyLCBwb3MsIGxvYykge1xuICAgIHRoaXMudHlwZSA9IFwiXCI7XG4gICAgdGhpcy5zdGFydCA9IHBvcztcbiAgICB0aGlzLmVuZCA9IDA7XG4gICAgaWYgKHBhcnNlci5vcHRpb25zLmxvY2F0aW9ucylcbiAgICAgIHsgdGhpcy5sb2MgPSBuZXcgU291cmNlTG9jYXRpb24ocGFyc2VyLCBsb2MpOyB9XG4gICAgaWYgKHBhcnNlci5vcHRpb25zLmRpcmVjdFNvdXJjZUZpbGUpXG4gICAgICB7IHRoaXMuc291cmNlRmlsZSA9IHBhcnNlci5vcHRpb25zLmRpcmVjdFNvdXJjZUZpbGU7IH1cbiAgICBpZiAocGFyc2VyLm9wdGlvbnMucmFuZ2VzKVxuICAgICAgeyB0aGlzLnJhbmdlID0gW3BvcywgMF07IH1cbiAgfTtcblxuICAvLyBTdGFydCBhbiBBU1Qgbm9kZSwgYXR0YWNoaW5nIGEgc3RhcnQgb2Zmc2V0LlxuXG4gIHZhciBwcCQ2ID0gUGFyc2VyLnByb3RvdHlwZTtcblxuICBwcCQ2LnN0YXJ0Tm9kZSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBuZXcgTm9kZSh0aGlzLCB0aGlzLnN0YXJ0LCB0aGlzLnN0YXJ0TG9jKVxuICB9O1xuXG4gIHBwJDYuc3RhcnROb2RlQXQgPSBmdW5jdGlvbihwb3MsIGxvYykge1xuICAgIHJldHVybiBuZXcgTm9kZSh0aGlzLCBwb3MsIGxvYylcbiAgfTtcblxuICAvLyBGaW5pc2ggYW4gQVNUIG5vZGUsIGFkZGluZyBgdHlwZWAgYW5kIGBlbmRgIHByb3BlcnRpZXMuXG5cbiAgZnVuY3Rpb24gZmluaXNoTm9kZUF0KG5vZGUsIHR5cGUsIHBvcywgbG9jKSB7XG4gICAgbm9kZS50eXBlID0gdHlwZTtcbiAgICBub2RlLmVuZCA9IHBvcztcbiAgICBpZiAodGhpcy5vcHRpb25zLmxvY2F0aW9ucylcbiAgICAgIHsgbm9kZS5sb2MuZW5kID0gbG9jOyB9XG4gICAgaWYgKHRoaXMub3B0aW9ucy5yYW5nZXMpXG4gICAgICB7IG5vZGUucmFuZ2VbMV0gPSBwb3M7IH1cbiAgICByZXR1cm4gbm9kZVxuICB9XG5cbiAgcHAkNi5maW5pc2hOb2RlID0gZnVuY3Rpb24obm9kZSwgdHlwZSkge1xuICAgIHJldHVybiBmaW5pc2hOb2RlQXQuY2FsbCh0aGlzLCBub2RlLCB0eXBlLCB0aGlzLmxhc3RUb2tFbmQsIHRoaXMubGFzdFRva0VuZExvYylcbiAgfTtcblxuICAvLyBGaW5pc2ggbm9kZSBhdCBnaXZlbiBwb3NpdGlvblxuXG4gIHBwJDYuZmluaXNoTm9kZUF0ID0gZnVuY3Rpb24obm9kZSwgdHlwZSwgcG9zLCBsb2MpIHtcbiAgICByZXR1cm4gZmluaXNoTm9kZUF0LmNhbGwodGhpcywgbm9kZSwgdHlwZSwgcG9zLCBsb2MpXG4gIH07XG5cbiAgcHAkNi5jb3B5Tm9kZSA9IGZ1bmN0aW9uKG5vZGUpIHtcbiAgICB2YXIgbmV3Tm9kZSA9IG5ldyBOb2RlKHRoaXMsIG5vZGUuc3RhcnQsIHRoaXMuc3RhcnRMb2MpO1xuICAgIGZvciAodmFyIHByb3AgaW4gbm9kZSkgeyBuZXdOb2RlW3Byb3BdID0gbm9kZVtwcm9wXTsgfVxuICAgIHJldHVybiBuZXdOb2RlXG4gIH07XG5cbiAgLy8gVGhlIGFsZ29yaXRobSB1c2VkIHRvIGRldGVybWluZSB3aGV0aGVyIGEgcmVnZXhwIGNhbiBhcHBlYXIgYXQgYVxuXG4gIHZhciBUb2tDb250ZXh0ID0gZnVuY3Rpb24gVG9rQ29udGV4dCh0b2tlbiwgaXNFeHByLCBwcmVzZXJ2ZVNwYWNlLCBvdmVycmlkZSwgZ2VuZXJhdG9yKSB7XG4gICAgdGhpcy50b2tlbiA9IHRva2VuO1xuICAgIHRoaXMuaXNFeHByID0gISFpc0V4cHI7XG4gICAgdGhpcy5wcmVzZXJ2ZVNwYWNlID0gISFwcmVzZXJ2ZVNwYWNlO1xuICAgIHRoaXMub3ZlcnJpZGUgPSBvdmVycmlkZTtcbiAgICB0aGlzLmdlbmVyYXRvciA9ICEhZ2VuZXJhdG9yO1xuICB9O1xuXG4gIHZhciB0eXBlcyQxID0ge1xuICAgIGJfc3RhdDogbmV3IFRva0NvbnRleHQoXCJ7XCIsIGZhbHNlKSxcbiAgICBiX2V4cHI6IG5ldyBUb2tDb250ZXh0KFwie1wiLCB0cnVlKSxcbiAgICBiX3RtcGw6IG5ldyBUb2tDb250ZXh0KFwiJHtcIiwgZmFsc2UpLFxuICAgIHBfc3RhdDogbmV3IFRva0NvbnRleHQoXCIoXCIsIGZhbHNlKSxcbiAgICBwX2V4cHI6IG5ldyBUb2tDb250ZXh0KFwiKFwiLCB0cnVlKSxcbiAgICBxX3RtcGw6IG5ldyBUb2tDb250ZXh0KFwiYFwiLCB0cnVlLCB0cnVlLCBmdW5jdGlvbiAocCkgeyByZXR1cm4gcC50cnlSZWFkVGVtcGxhdGVUb2tlbigpOyB9KSxcbiAgICBmX3N0YXQ6IG5ldyBUb2tDb250ZXh0KFwiZnVuY3Rpb25cIiwgZmFsc2UpLFxuICAgIGZfZXhwcjogbmV3IFRva0NvbnRleHQoXCJmdW5jdGlvblwiLCB0cnVlKSxcbiAgICBmX2V4cHJfZ2VuOiBuZXcgVG9rQ29udGV4dChcImZ1bmN0aW9uXCIsIHRydWUsIGZhbHNlLCBudWxsLCB0cnVlKSxcbiAgICBmX2dlbjogbmV3IFRva0NvbnRleHQoXCJmdW5jdGlvblwiLCBmYWxzZSwgZmFsc2UsIG51bGwsIHRydWUpXG4gIH07XG5cbiAgdmFyIHBwJDcgPSBQYXJzZXIucHJvdG90eXBlO1xuXG4gIHBwJDcuaW5pdGlhbENvbnRleHQgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gW3R5cGVzJDEuYl9zdGF0XVxuICB9O1xuXG4gIHBwJDcuYnJhY2VJc0Jsb2NrID0gZnVuY3Rpb24ocHJldlR5cGUpIHtcbiAgICB2YXIgcGFyZW50ID0gdGhpcy5jdXJDb250ZXh0KCk7XG4gICAgaWYgKHBhcmVudCA9PT0gdHlwZXMkMS5mX2V4cHIgfHwgcGFyZW50ID09PSB0eXBlcyQxLmZfc3RhdClcbiAgICAgIHsgcmV0dXJuIHRydWUgfVxuICAgIGlmIChwcmV2VHlwZSA9PT0gdHlwZXMuY29sb24gJiYgKHBhcmVudCA9PT0gdHlwZXMkMS5iX3N0YXQgfHwgcGFyZW50ID09PSB0eXBlcyQxLmJfZXhwcikpXG4gICAgICB7IHJldHVybiAhcGFyZW50LmlzRXhwciB9XG5cbiAgICAvLyBUaGUgY2hlY2sgZm9yIGB0dC5uYW1lICYmIGV4cHJBbGxvd2VkYCBkZXRlY3RzIHdoZXRoZXIgd2UgYXJlXG4gICAgLy8gYWZ0ZXIgYSBgeWllbGRgIG9yIGBvZmAgY29uc3RydWN0LiBTZWUgdGhlIGB1cGRhdGVDb250ZXh0YCBmb3JcbiAgICAvLyBgdHQubmFtZWAuXG4gICAgaWYgKHByZXZUeXBlID09PSB0eXBlcy5fcmV0dXJuIHx8IHByZXZUeXBlID09PSB0eXBlcy5uYW1lICYmIHRoaXMuZXhwckFsbG93ZWQpXG4gICAgICB7IHJldHVybiBsaW5lQnJlYWsudGVzdCh0aGlzLmlucHV0LnNsaWNlKHRoaXMubGFzdFRva0VuZCwgdGhpcy5zdGFydCkpIH1cbiAgICBpZiAocHJldlR5cGUgPT09IHR5cGVzLl9lbHNlIHx8IHByZXZUeXBlID09PSB0eXBlcy5zZW1pIHx8IHByZXZUeXBlID09PSB0eXBlcy5lb2YgfHwgcHJldlR5cGUgPT09IHR5cGVzLnBhcmVuUiB8fCBwcmV2VHlwZSA9PT0gdHlwZXMuYXJyb3cpXG4gICAgICB7IHJldHVybiB0cnVlIH1cbiAgICBpZiAocHJldlR5cGUgPT09IHR5cGVzLmJyYWNlTClcbiAgICAgIHsgcmV0dXJuIHBhcmVudCA9PT0gdHlwZXMkMS5iX3N0YXQgfVxuICAgIGlmIChwcmV2VHlwZSA9PT0gdHlwZXMuX3ZhciB8fCBwcmV2VHlwZSA9PT0gdHlwZXMuX2NvbnN0IHx8IHByZXZUeXBlID09PSB0eXBlcy5uYW1lKVxuICAgICAgeyByZXR1cm4gZmFsc2UgfVxuICAgIHJldHVybiAhdGhpcy5leHByQWxsb3dlZFxuICB9O1xuXG4gIHBwJDcuaW5HZW5lcmF0b3JDb250ZXh0ID0gZnVuY3Rpb24oKSB7XG4gICAgZm9yICh2YXIgaSA9IHRoaXMuY29udGV4dC5sZW5ndGggLSAxOyBpID49IDE7IGktLSkge1xuICAgICAgdmFyIGNvbnRleHQgPSB0aGlzLmNvbnRleHRbaV07XG4gICAgICBpZiAoY29udGV4dC50b2tlbiA9PT0gXCJmdW5jdGlvblwiKVxuICAgICAgICB7IHJldHVybiBjb250ZXh0LmdlbmVyYXRvciB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZVxuICB9O1xuXG4gIHBwJDcudXBkYXRlQ29udGV4dCA9IGZ1bmN0aW9uKHByZXZUeXBlKSB7XG4gICAgdmFyIHVwZGF0ZSwgdHlwZSA9IHRoaXMudHlwZTtcbiAgICBpZiAodHlwZS5rZXl3b3JkICYmIHByZXZUeXBlID09PSB0eXBlcy5kb3QpXG4gICAgICB7IHRoaXMuZXhwckFsbG93ZWQgPSBmYWxzZTsgfVxuICAgIGVsc2UgaWYgKHVwZGF0ZSA9IHR5cGUudXBkYXRlQ29udGV4dClcbiAgICAgIHsgdXBkYXRlLmNhbGwodGhpcywgcHJldlR5cGUpOyB9XG4gICAgZWxzZVxuICAgICAgeyB0aGlzLmV4cHJBbGxvd2VkID0gdHlwZS5iZWZvcmVFeHByOyB9XG4gIH07XG5cbiAgLy8gVG9rZW4tc3BlY2lmaWMgY29udGV4dCB1cGRhdGUgY29kZVxuXG4gIHR5cGVzLnBhcmVuUi51cGRhdGVDb250ZXh0ID0gdHlwZXMuYnJhY2VSLnVwZGF0ZUNvbnRleHQgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy5jb250ZXh0Lmxlbmd0aCA9PT0gMSkge1xuICAgICAgdGhpcy5leHByQWxsb3dlZCA9IHRydWU7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgdmFyIG91dCA9IHRoaXMuY29udGV4dC5wb3AoKTtcbiAgICBpZiAob3V0ID09PSB0eXBlcyQxLmJfc3RhdCAmJiB0aGlzLmN1ckNvbnRleHQoKS50b2tlbiA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICBvdXQgPSB0aGlzLmNvbnRleHQucG9wKCk7XG4gICAgfVxuICAgIHRoaXMuZXhwckFsbG93ZWQgPSAhb3V0LmlzRXhwcjtcbiAgfTtcblxuICB0eXBlcy5icmFjZUwudXBkYXRlQ29udGV4dCA9IGZ1bmN0aW9uKHByZXZUeXBlKSB7XG4gICAgdGhpcy5jb250ZXh0LnB1c2godGhpcy5icmFjZUlzQmxvY2socHJldlR5cGUpID8gdHlwZXMkMS5iX3N0YXQgOiB0eXBlcyQxLmJfZXhwcik7XG4gICAgdGhpcy5leHByQWxsb3dlZCA9IHRydWU7XG4gIH07XG5cbiAgdHlwZXMuZG9sbGFyQnJhY2VMLnVwZGF0ZUNvbnRleHQgPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLmNvbnRleHQucHVzaCh0eXBlcyQxLmJfdG1wbCk7XG4gICAgdGhpcy5leHByQWxsb3dlZCA9IHRydWU7XG4gIH07XG5cbiAgdHlwZXMucGFyZW5MLnVwZGF0ZUNvbnRleHQgPSBmdW5jdGlvbihwcmV2VHlwZSkge1xuICAgIHZhciBzdGF0ZW1lbnRQYXJlbnMgPSBwcmV2VHlwZSA9PT0gdHlwZXMuX2lmIHx8IHByZXZUeXBlID09PSB0eXBlcy5fZm9yIHx8IHByZXZUeXBlID09PSB0eXBlcy5fd2l0aCB8fCBwcmV2VHlwZSA9PT0gdHlwZXMuX3doaWxlO1xuICAgIHRoaXMuY29udGV4dC5wdXNoKHN0YXRlbWVudFBhcmVucyA/IHR5cGVzJDEucF9zdGF0IDogdHlwZXMkMS5wX2V4cHIpO1xuICAgIHRoaXMuZXhwckFsbG93ZWQgPSB0cnVlO1xuICB9O1xuXG4gIHR5cGVzLmluY0RlYy51cGRhdGVDb250ZXh0ID0gZnVuY3Rpb24oKSB7XG4gICAgLy8gdG9rRXhwckFsbG93ZWQgc3RheXMgdW5jaGFuZ2VkXG4gIH07XG5cbiAgdHlwZXMuX2Z1bmN0aW9uLnVwZGF0ZUNvbnRleHQgPSB0eXBlcy5fY2xhc3MudXBkYXRlQ29udGV4dCA9IGZ1bmN0aW9uKHByZXZUeXBlKSB7XG4gICAgaWYgKHByZXZUeXBlLmJlZm9yZUV4cHIgJiYgcHJldlR5cGUgIT09IHR5cGVzLl9lbHNlICYmXG4gICAgICAgICEocHJldlR5cGUgPT09IHR5cGVzLnNlbWkgJiYgdGhpcy5jdXJDb250ZXh0KCkgIT09IHR5cGVzJDEucF9zdGF0KSAmJlxuICAgICAgICAhKHByZXZUeXBlID09PSB0eXBlcy5fcmV0dXJuICYmIGxpbmVCcmVhay50ZXN0KHRoaXMuaW5wdXQuc2xpY2UodGhpcy5sYXN0VG9rRW5kLCB0aGlzLnN0YXJ0KSkpICYmXG4gICAgICAgICEoKHByZXZUeXBlID09PSB0eXBlcy5jb2xvbiB8fCBwcmV2VHlwZSA9PT0gdHlwZXMuYnJhY2VMKSAmJiB0aGlzLmN1ckNvbnRleHQoKSA9PT0gdHlwZXMkMS5iX3N0YXQpKVxuICAgICAgeyB0aGlzLmNvbnRleHQucHVzaCh0eXBlcyQxLmZfZXhwcik7IH1cbiAgICBlbHNlXG4gICAgICB7IHRoaXMuY29udGV4dC5wdXNoKHR5cGVzJDEuZl9zdGF0KTsgfVxuICAgIHRoaXMuZXhwckFsbG93ZWQgPSBmYWxzZTtcbiAgfTtcblxuICB0eXBlcy5iYWNrUXVvdGUudXBkYXRlQ29udGV4dCA9IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLmN1ckNvbnRleHQoKSA9PT0gdHlwZXMkMS5xX3RtcGwpXG4gICAgICB7IHRoaXMuY29udGV4dC5wb3AoKTsgfVxuICAgIGVsc2VcbiAgICAgIHsgdGhpcy5jb250ZXh0LnB1c2godHlwZXMkMS5xX3RtcGwpOyB9XG4gICAgdGhpcy5leHByQWxsb3dlZCA9IGZhbHNlO1xuICB9O1xuXG4gIHR5cGVzLnN0YXIudXBkYXRlQ29udGV4dCA9IGZ1bmN0aW9uKHByZXZUeXBlKSB7XG4gICAgaWYgKHByZXZUeXBlID09PSB0eXBlcy5fZnVuY3Rpb24pIHtcbiAgICAgIHZhciBpbmRleCA9IHRoaXMuY29udGV4dC5sZW5ndGggLSAxO1xuICAgICAgaWYgKHRoaXMuY29udGV4dFtpbmRleF0gPT09IHR5cGVzJDEuZl9leHByKVxuICAgICAgICB7IHRoaXMuY29udGV4dFtpbmRleF0gPSB0eXBlcyQxLmZfZXhwcl9nZW47IH1cbiAgICAgIGVsc2VcbiAgICAgICAgeyB0aGlzLmNvbnRleHRbaW5kZXhdID0gdHlwZXMkMS5mX2dlbjsgfVxuICAgIH1cbiAgICB0aGlzLmV4cHJBbGxvd2VkID0gdHJ1ZTtcbiAgfTtcblxuICB0eXBlcy5uYW1lLnVwZGF0ZUNvbnRleHQgPSBmdW5jdGlvbihwcmV2VHlwZSkge1xuICAgIHZhciBhbGxvd2VkID0gZmFsc2U7XG4gICAgaWYgKHRoaXMub3B0aW9ucy5lY21hVmVyc2lvbiA+PSA2ICYmIHByZXZUeXBlICE9PSB0eXBlcy5kb3QpIHtcbiAgICAgIGlmICh0aGlzLnZhbHVlID09PSBcIm9mXCIgJiYgIXRoaXMuZXhwckFsbG93ZWQgfHxcbiAgICAgICAgICB0aGlzLnZhbHVlID09PSBcInlpZWxkXCIgJiYgdGhpcy5pbkdlbmVyYXRvckNvbnRleHQoKSlcbiAgICAgICAgeyBhbGxvd2VkID0gdHJ1ZTsgfVxuICAgIH1cbiAgICB0aGlzLmV4cHJBbGxvd2VkID0gYWxsb3dlZDtcbiAgfTtcblxuICAvLyBUaGlzIGZpbGUgY29udGFpbnMgVW5pY29kZSBwcm9wZXJ0aWVzIGV4dHJhY3RlZCBmcm9tIHRoZSBFQ01BU2NyaXB0XG4gIC8vIHNwZWNpZmljYXRpb24uIFRoZSBsaXN0cyBhcmUgZXh0cmFjdGVkIGxpa2Ugc286XG4gIC8vICQkKCcjdGFibGUtYmluYXJ5LXVuaWNvZGUtcHJvcGVydGllcyA+IGZpZ3VyZSA+IHRhYmxlID4gdGJvZHkgPiB0ciA+IHRkOm50aC1jaGlsZCgxKSBjb2RlJykubWFwKGVsID0+IGVsLmlubmVyVGV4dClcblxuICAvLyAjdGFibGUtYmluYXJ5LXVuaWNvZGUtcHJvcGVydGllc1xuICB2YXIgZWNtYTlCaW5hcnlQcm9wZXJ0aWVzID0gXCJBU0NJSSBBU0NJSV9IZXhfRGlnaXQgQUhleCBBbHBoYWJldGljIEFscGhhIEFueSBBc3NpZ25lZCBCaWRpX0NvbnRyb2wgQmlkaV9DIEJpZGlfTWlycm9yZWQgQmlkaV9NIENhc2VfSWdub3JhYmxlIENJIENhc2VkIENoYW5nZXNfV2hlbl9DYXNlZm9sZGVkIENXQ0YgQ2hhbmdlc19XaGVuX0Nhc2VtYXBwZWQgQ1dDTSBDaGFuZ2VzX1doZW5fTG93ZXJjYXNlZCBDV0wgQ2hhbmdlc19XaGVuX05GS0NfQ2FzZWZvbGRlZCBDV0tDRiBDaGFuZ2VzX1doZW5fVGl0bGVjYXNlZCBDV1QgQ2hhbmdlc19XaGVuX1VwcGVyY2FzZWQgQ1dVIERhc2ggRGVmYXVsdF9JZ25vcmFibGVfQ29kZV9Qb2ludCBESSBEZXByZWNhdGVkIERlcCBEaWFjcml0aWMgRGlhIEVtb2ppIEVtb2ppX0NvbXBvbmVudCBFbW9qaV9Nb2RpZmllciBFbW9qaV9Nb2RpZmllcl9CYXNlIEVtb2ppX1ByZXNlbnRhdGlvbiBFeHRlbmRlciBFeHQgR3JhcGhlbWVfQmFzZSBHcl9CYXNlIEdyYXBoZW1lX0V4dGVuZCBHcl9FeHQgSGV4X0RpZ2l0IEhleCBJRFNfQmluYXJ5X09wZXJhdG9yIElEU0IgSURTX1RyaW5hcnlfT3BlcmF0b3IgSURTVCBJRF9Db250aW51ZSBJREMgSURfU3RhcnQgSURTIElkZW9ncmFwaGljIElkZW8gSm9pbl9Db250cm9sIEpvaW5fQyBMb2dpY2FsX09yZGVyX0V4Y2VwdGlvbiBMT0UgTG93ZXJjYXNlIExvd2VyIE1hdGggTm9uY2hhcmFjdGVyX0NvZGVfUG9pbnQgTkNoYXIgUGF0dGVybl9TeW50YXggUGF0X1N5biBQYXR0ZXJuX1doaXRlX1NwYWNlIFBhdF9XUyBRdW90YXRpb25fTWFyayBRTWFyayBSYWRpY2FsIFJlZ2lvbmFsX0luZGljYXRvciBSSSBTZW50ZW5jZV9UZXJtaW5hbCBTVGVybSBTb2Z0X0RvdHRlZCBTRCBUZXJtaW5hbF9QdW5jdHVhdGlvbiBUZXJtIFVuaWZpZWRfSWRlb2dyYXBoIFVJZGVvIFVwcGVyY2FzZSBVcHBlciBWYXJpYXRpb25fU2VsZWN0b3IgVlMgV2hpdGVfU3BhY2Ugc3BhY2UgWElEX0NvbnRpbnVlIFhJREMgWElEX1N0YXJ0IFhJRFNcIjtcbiAgdmFyIGVjbWExMEJpbmFyeVByb3BlcnRpZXMgPSBlY21hOUJpbmFyeVByb3BlcnRpZXMgKyBcIiBFeHRlbmRlZF9QaWN0b2dyYXBoaWNcIjtcbiAgdmFyIGVjbWExMUJpbmFyeVByb3BlcnRpZXMgPSBlY21hMTBCaW5hcnlQcm9wZXJ0aWVzO1xuICB2YXIgZWNtYTEyQmluYXJ5UHJvcGVydGllcyA9IGVjbWExMUJpbmFyeVByb3BlcnRpZXMgKyBcIiBFQmFzZSBFQ29tcCBFTW9kIEVQcmVzIEV4dFBpY3RcIjtcbiAgdmFyIHVuaWNvZGVCaW5hcnlQcm9wZXJ0aWVzID0ge1xuICAgIDk6IGVjbWE5QmluYXJ5UHJvcGVydGllcyxcbiAgICAxMDogZWNtYTEwQmluYXJ5UHJvcGVydGllcyxcbiAgICAxMTogZWNtYTExQmluYXJ5UHJvcGVydGllcyxcbiAgICAxMjogZWNtYTEyQmluYXJ5UHJvcGVydGllc1xuICB9O1xuXG4gIC8vICN0YWJsZS11bmljb2RlLWdlbmVyYWwtY2F0ZWdvcnktdmFsdWVzXG4gIHZhciB1bmljb2RlR2VuZXJhbENhdGVnb3J5VmFsdWVzID0gXCJDYXNlZF9MZXR0ZXIgTEMgQ2xvc2VfUHVuY3R1YXRpb24gUGUgQ29ubmVjdG9yX1B1bmN0dWF0aW9uIFBjIENvbnRyb2wgQ2MgY250cmwgQ3VycmVuY3lfU3ltYm9sIFNjIERhc2hfUHVuY3R1YXRpb24gUGQgRGVjaW1hbF9OdW1iZXIgTmQgZGlnaXQgRW5jbG9zaW5nX01hcmsgTWUgRmluYWxfUHVuY3R1YXRpb24gUGYgRm9ybWF0IENmIEluaXRpYWxfUHVuY3R1YXRpb24gUGkgTGV0dGVyIEwgTGV0dGVyX051bWJlciBObCBMaW5lX1NlcGFyYXRvciBabCBMb3dlcmNhc2VfTGV0dGVyIExsIE1hcmsgTSBDb21iaW5pbmdfTWFyayBNYXRoX1N5bWJvbCBTbSBNb2RpZmllcl9MZXR0ZXIgTG0gTW9kaWZpZXJfU3ltYm9sIFNrIE5vbnNwYWNpbmdfTWFyayBNbiBOdW1iZXIgTiBPcGVuX1B1bmN0dWF0aW9uIFBzIE90aGVyIEMgT3RoZXJfTGV0dGVyIExvIE90aGVyX051bWJlciBObyBPdGhlcl9QdW5jdHVhdGlvbiBQbyBPdGhlcl9TeW1ib2wgU28gUGFyYWdyYXBoX1NlcGFyYXRvciBacCBQcml2YXRlX1VzZSBDbyBQdW5jdHVhdGlvbiBQIHB1bmN0IFNlcGFyYXRvciBaIFNwYWNlX1NlcGFyYXRvciBacyBTcGFjaW5nX01hcmsgTWMgU3Vycm9nYXRlIENzIFN5bWJvbCBTIFRpdGxlY2FzZV9MZXR0ZXIgTHQgVW5hc3NpZ25lZCBDbiBVcHBlcmNhc2VfTGV0dGVyIEx1XCI7XG5cbiAgLy8gI3RhYmxlLXVuaWNvZGUtc2NyaXB0LXZhbHVlc1xuICB2YXIgZWNtYTlTY3JpcHRWYWx1ZXMgPSBcIkFkbGFtIEFkbG0gQWhvbSBBaG9tIEFuYXRvbGlhbl9IaWVyb2dseXBocyBIbHV3IEFyYWJpYyBBcmFiIEFybWVuaWFuIEFybW4gQXZlc3RhbiBBdnN0IEJhbGluZXNlIEJhbGkgQmFtdW0gQmFtdSBCYXNzYV9WYWggQmFzcyBCYXRhayBCYXRrIEJlbmdhbGkgQmVuZyBCaGFpa3N1a2kgQmhrcyBCb3BvbW9mbyBCb3BvIEJyYWhtaSBCcmFoIEJyYWlsbGUgQnJhaSBCdWdpbmVzZSBCdWdpIEJ1aGlkIEJ1aGQgQ2FuYWRpYW5fQWJvcmlnaW5hbCBDYW5zIENhcmlhbiBDYXJpIENhdWNhc2lhbl9BbGJhbmlhbiBBZ2hiIENoYWttYSBDYWttIENoYW0gQ2hhbSBDaGVyb2tlZSBDaGVyIENvbW1vbiBaeXl5IENvcHRpYyBDb3B0IFFhYWMgQ3VuZWlmb3JtIFhzdXggQ3lwcmlvdCBDcHJ0IEN5cmlsbGljIEN5cmwgRGVzZXJldCBEc3J0IERldmFuYWdhcmkgRGV2YSBEdXBsb3lhbiBEdXBsIEVneXB0aWFuX0hpZXJvZ2x5cGhzIEVneXAgRWxiYXNhbiBFbGJhIEV0aGlvcGljIEV0aGkgR2VvcmdpYW4gR2VvciBHbGFnb2xpdGljIEdsYWcgR290aGljIEdvdGggR3JhbnRoYSBHcmFuIEdyZWVrIEdyZWsgR3VqYXJhdGkgR3VqciBHdXJtdWtoaSBHdXJ1IEhhbiBIYW5pIEhhbmd1bCBIYW5nIEhhbnVub28gSGFubyBIYXRyYW4gSGF0ciBIZWJyZXcgSGViciBIaXJhZ2FuYSBIaXJhIEltcGVyaWFsX0FyYW1haWMgQXJtaSBJbmhlcml0ZWQgWmluaCBRYWFpIEluc2NyaXB0aW9uYWxfUGFobGF2aSBQaGxpIEluc2NyaXB0aW9uYWxfUGFydGhpYW4gUHJ0aSBKYXZhbmVzZSBKYXZhIEthaXRoaSBLdGhpIEthbm5hZGEgS25kYSBLYXRha2FuYSBLYW5hIEtheWFoX0xpIEthbGkgS2hhcm9zaHRoaSBLaGFyIEtobWVyIEtobXIgS2hvamtpIEtob2ogS2h1ZGF3YWRpIFNpbmQgTGFvIExhb28gTGF0aW4gTGF0biBMZXBjaGEgTGVwYyBMaW1idSBMaW1iIExpbmVhcl9BIExpbmEgTGluZWFyX0IgTGluYiBMaXN1IExpc3UgTHljaWFuIEx5Y2kgTHlkaWFuIEx5ZGkgTWFoYWphbmkgTWFoaiBNYWxheWFsYW0gTWx5bSBNYW5kYWljIE1hbmQgTWFuaWNoYWVhbiBNYW5pIE1hcmNoZW4gTWFyYyBNYXNhcmFtX0dvbmRpIEdvbm0gTWVldGVpX01heWVrIE10ZWkgTWVuZGVfS2lrYWt1aSBNZW5kIE1lcm9pdGljX0N1cnNpdmUgTWVyYyBNZXJvaXRpY19IaWVyb2dseXBocyBNZXJvIE1pYW8gUGxyZCBNb2RpIE1vZGkgTW9uZ29saWFuIE1vbmcgTXJvIE1yb28gTXVsdGFuaSBNdWx0IE15YW5tYXIgTXltciBOYWJhdGFlYW4gTmJhdCBOZXdfVGFpX0x1ZSBUYWx1IE5ld2EgTmV3YSBOa28gTmtvbyBOdXNodSBOc2h1IE9naGFtIE9nYW0gT2xfQ2hpa2kgT2xjayBPbGRfSHVuZ2FyaWFuIEh1bmcgT2xkX0l0YWxpYyBJdGFsIE9sZF9Ob3J0aF9BcmFiaWFuIE5hcmIgT2xkX1Blcm1pYyBQZXJtIE9sZF9QZXJzaWFuIFhwZW8gT2xkX1NvdXRoX0FyYWJpYW4gU2FyYiBPbGRfVHVya2ljIE9ya2ggT3JpeWEgT3J5YSBPc2FnZSBPc2dlIE9zbWFueWEgT3NtYSBQYWhhd2hfSG1vbmcgSG1uZyBQYWxteXJlbmUgUGFsbSBQYXVfQ2luX0hhdSBQYXVjIFBoYWdzX1BhIFBoYWcgUGhvZW5pY2lhbiBQaG54IFBzYWx0ZXJfUGFobGF2aSBQaGxwIFJlamFuZyBSam5nIFJ1bmljIFJ1bnIgU2FtYXJpdGFuIFNhbXIgU2F1cmFzaHRyYSBTYXVyIFNoYXJhZGEgU2hyZCBTaGF2aWFuIFNoYXcgU2lkZGhhbSBTaWRkIFNpZ25Xcml0aW5nIFNnbncgU2luaGFsYSBTaW5oIFNvcmFfU29tcGVuZyBTb3JhIFNveW9tYm8gU295byBTdW5kYW5lc2UgU3VuZCBTeWxvdGlfTmFncmkgU3lsbyBTeXJpYWMgU3lyYyBUYWdhbG9nIFRnbGcgVGFnYmFud2EgVGFnYiBUYWlfTGUgVGFsZSBUYWlfVGhhbSBMYW5hIFRhaV9WaWV0IFRhdnQgVGFrcmkgVGFrciBUYW1pbCBUYW1sIFRhbmd1dCBUYW5nIFRlbHVndSBUZWx1IFRoYWFuYSBUaGFhIFRoYWkgVGhhaSBUaWJldGFuIFRpYnQgVGlmaW5hZ2ggVGZuZyBUaXJodXRhIFRpcmggVWdhcml0aWMgVWdhciBWYWkgVmFpaSBXYXJhbmdfQ2l0aSBXYXJhIFlpIFlpaWkgWmFuYWJhemFyX1NxdWFyZSBaYW5iXCI7XG4gIHZhciBlY21hMTBTY3JpcHRWYWx1ZXMgPSBlY21hOVNjcmlwdFZhbHVlcyArIFwiIERvZ3JhIERvZ3IgR3VuamFsYV9Hb25kaSBHb25nIEhhbmlmaV9Sb2hpbmd5YSBSb2hnIE1ha2FzYXIgTWFrYSBNZWRlZmFpZHJpbiBNZWRmIE9sZF9Tb2dkaWFuIFNvZ28gU29nZGlhbiBTb2dkXCI7XG4gIHZhciBlY21hMTFTY3JpcHRWYWx1ZXMgPSBlY21hMTBTY3JpcHRWYWx1ZXMgKyBcIiBFbHltYWljIEVseW0gTmFuZGluYWdhcmkgTmFuZCBOeWlha2VuZ19QdWFjaHVlX0htb25nIEhtbnAgV2FuY2hvIFdjaG9cIjtcbiAgdmFyIGVjbWExMlNjcmlwdFZhbHVlcyA9IGVjbWExMVNjcmlwdFZhbHVlcyArIFwiIENob3Jhc21pYW4gQ2hycyBEaWFrIERpdmVzX0FrdXJ1IEtoaXRhbl9TbWFsbF9TY3JpcHQgS2l0cyBZZXppIFllemlkaVwiO1xuICB2YXIgdW5pY29kZVNjcmlwdFZhbHVlcyA9IHtcbiAgICA5OiBlY21hOVNjcmlwdFZhbHVlcyxcbiAgICAxMDogZWNtYTEwU2NyaXB0VmFsdWVzLFxuICAgIDExOiBlY21hMTFTY3JpcHRWYWx1ZXMsXG4gICAgMTI6IGVjbWExMlNjcmlwdFZhbHVlc1xuICB9O1xuXG4gIHZhciBkYXRhID0ge307XG4gIGZ1bmN0aW9uIGJ1aWxkVW5pY29kZURhdGEoZWNtYVZlcnNpb24pIHtcbiAgICB2YXIgZCA9IGRhdGFbZWNtYVZlcnNpb25dID0ge1xuICAgICAgYmluYXJ5OiB3b3Jkc1JlZ2V4cCh1bmljb2RlQmluYXJ5UHJvcGVydGllc1tlY21hVmVyc2lvbl0gKyBcIiBcIiArIHVuaWNvZGVHZW5lcmFsQ2F0ZWdvcnlWYWx1ZXMpLFxuICAgICAgbm9uQmluYXJ5OiB7XG4gICAgICAgIEdlbmVyYWxfQ2F0ZWdvcnk6IHdvcmRzUmVnZXhwKHVuaWNvZGVHZW5lcmFsQ2F0ZWdvcnlWYWx1ZXMpLFxuICAgICAgICBTY3JpcHQ6IHdvcmRzUmVnZXhwKHVuaWNvZGVTY3JpcHRWYWx1ZXNbZWNtYVZlcnNpb25dKVxuICAgICAgfVxuICAgIH07XG4gICAgZC5ub25CaW5hcnkuU2NyaXB0X0V4dGVuc2lvbnMgPSBkLm5vbkJpbmFyeS5TY3JpcHQ7XG5cbiAgICBkLm5vbkJpbmFyeS5nYyA9IGQubm9uQmluYXJ5LkdlbmVyYWxfQ2F0ZWdvcnk7XG4gICAgZC5ub25CaW5hcnkuc2MgPSBkLm5vbkJpbmFyeS5TY3JpcHQ7XG4gICAgZC5ub25CaW5hcnkuc2N4ID0gZC5ub25CaW5hcnkuU2NyaXB0X0V4dGVuc2lvbnM7XG4gIH1cbiAgYnVpbGRVbmljb2RlRGF0YSg5KTtcbiAgYnVpbGRVbmljb2RlRGF0YSgxMCk7XG4gIGJ1aWxkVW5pY29kZURhdGEoMTEpO1xuICBidWlsZFVuaWNvZGVEYXRhKDEyKTtcblxuICB2YXIgcHAkOCA9IFBhcnNlci5wcm90b3R5cGU7XG5cbiAgdmFyIFJlZ0V4cFZhbGlkYXRpb25TdGF0ZSA9IGZ1bmN0aW9uIFJlZ0V4cFZhbGlkYXRpb25TdGF0ZShwYXJzZXIpIHtcbiAgICB0aGlzLnBhcnNlciA9IHBhcnNlcjtcbiAgICB0aGlzLnZhbGlkRmxhZ3MgPSBcImdpbVwiICsgKHBhcnNlci5vcHRpb25zLmVjbWFWZXJzaW9uID49IDYgPyBcInV5XCIgOiBcIlwiKSArIChwYXJzZXIub3B0aW9ucy5lY21hVmVyc2lvbiA+PSA5ID8gXCJzXCIgOiBcIlwiKSArIChwYXJzZXIub3B0aW9ucy5lY21hVmVyc2lvbiA+PSAxMyA/IFwiZFwiIDogXCJcIik7XG4gICAgdGhpcy51bmljb2RlUHJvcGVydGllcyA9IGRhdGFbcGFyc2VyLm9wdGlvbnMuZWNtYVZlcnNpb24gPj0gMTIgPyAxMiA6IHBhcnNlci5vcHRpb25zLmVjbWFWZXJzaW9uXTtcbiAgICB0aGlzLnNvdXJjZSA9IFwiXCI7XG4gICAgdGhpcy5mbGFncyA9IFwiXCI7XG4gICAgdGhpcy5zdGFydCA9IDA7XG4gICAgdGhpcy5zd2l0Y2hVID0gZmFsc2U7XG4gICAgdGhpcy5zd2l0Y2hOID0gZmFsc2U7XG4gICAgdGhpcy5wb3MgPSAwO1xuICAgIHRoaXMubGFzdEludFZhbHVlID0gMDtcbiAgICB0aGlzLmxhc3RTdHJpbmdWYWx1ZSA9IFwiXCI7XG4gICAgdGhpcy5sYXN0QXNzZXJ0aW9uSXNRdWFudGlmaWFibGUgPSBmYWxzZTtcbiAgICB0aGlzLm51bUNhcHR1cmluZ1BhcmVucyA9IDA7XG4gICAgdGhpcy5tYXhCYWNrUmVmZXJlbmNlID0gMDtcbiAgICB0aGlzLmdyb3VwTmFtZXMgPSBbXTtcbiAgICB0aGlzLmJhY2tSZWZlcmVuY2VOYW1lcyA9IFtdO1xuICB9O1xuXG4gIFJlZ0V4cFZhbGlkYXRpb25TdGF0ZS5wcm90b3R5cGUucmVzZXQgPSBmdW5jdGlvbiByZXNldCAoc3RhcnQsIHBhdHRlcm4sIGZsYWdzKSB7XG4gICAgdmFyIHVuaWNvZGUgPSBmbGFncy5pbmRleE9mKFwidVwiKSAhPT0gLTE7XG4gICAgdGhpcy5zdGFydCA9IHN0YXJ0IHwgMDtcbiAgICB0aGlzLnNvdXJjZSA9IHBhdHRlcm4gKyBcIlwiO1xuICAgIHRoaXMuZmxhZ3MgPSBmbGFncztcbiAgICB0aGlzLnN3aXRjaFUgPSB1bmljb2RlICYmIHRoaXMucGFyc2VyLm9wdGlvbnMuZWNtYVZlcnNpb24gPj0gNjtcbiAgICB0aGlzLnN3aXRjaE4gPSB1bmljb2RlICYmIHRoaXMucGFyc2VyLm9wdGlvbnMuZWNtYVZlcnNpb24gPj0gOTtcbiAgfTtcblxuICBSZWdFeHBWYWxpZGF0aW9uU3RhdGUucHJvdG90eXBlLnJhaXNlID0gZnVuY3Rpb24gcmFpc2UgKG1lc3NhZ2UpIHtcbiAgICB0aGlzLnBhcnNlci5yYWlzZVJlY292ZXJhYmxlKHRoaXMuc3RhcnQsIChcIkludmFsaWQgcmVndWxhciBleHByZXNzaW9uOiAvXCIgKyAodGhpcy5zb3VyY2UpICsgXCIvOiBcIiArIG1lc3NhZ2UpKTtcbiAgfTtcblxuICAvLyBJZiB1IGZsYWcgaXMgZ2l2ZW4sIHRoaXMgcmV0dXJucyB0aGUgY29kZSBwb2ludCBhdCB0aGUgaW5kZXggKGl0IGNvbWJpbmVzIGEgc3Vycm9nYXRlIHBhaXIpLlxuICAvLyBPdGhlcndpc2UsIHRoaXMgcmV0dXJucyB0aGUgY29kZSB1bml0IG9mIHRoZSBpbmRleCAoY2FuIGJlIGEgcGFydCBvZiBhIHN1cnJvZ2F0ZSBwYWlyKS5cbiAgUmVnRXhwVmFsaWRhdGlvblN0YXRlLnByb3RvdHlwZS5hdCA9IGZ1bmN0aW9uIGF0IChpLCBmb3JjZVUpIHtcbiAgICAgIGlmICggZm9yY2VVID09PSB2b2lkIDAgKSBmb3JjZVUgPSBmYWxzZTtcblxuICAgIHZhciBzID0gdGhpcy5zb3VyY2U7XG4gICAgdmFyIGwgPSBzLmxlbmd0aDtcbiAgICBpZiAoaSA+PSBsKSB7XG4gICAgICByZXR1cm4gLTFcbiAgICB9XG4gICAgdmFyIGMgPSBzLmNoYXJDb2RlQXQoaSk7XG4gICAgaWYgKCEoZm9yY2VVIHx8IHRoaXMuc3dpdGNoVSkgfHwgYyA8PSAweEQ3RkYgfHwgYyA+PSAweEUwMDAgfHwgaSArIDEgPj0gbCkge1xuICAgICAgcmV0dXJuIGNcbiAgICB9XG4gICAgdmFyIG5leHQgPSBzLmNoYXJDb2RlQXQoaSArIDEpO1xuICAgIHJldHVybiBuZXh0ID49IDB4REMwMCAmJiBuZXh0IDw9IDB4REZGRiA/IChjIDw8IDEwKSArIG5leHQgLSAweDM1RkRDMDAgOiBjXG4gIH07XG5cbiAgUmVnRXhwVmFsaWRhdGlvblN0YXRlLnByb3RvdHlwZS5uZXh0SW5kZXggPSBmdW5jdGlvbiBuZXh0SW5kZXggKGksIGZvcmNlVSkge1xuICAgICAgaWYgKCBmb3JjZVUgPT09IHZvaWQgMCApIGZvcmNlVSA9IGZhbHNlO1xuXG4gICAgdmFyIHMgPSB0aGlzLnNvdXJjZTtcbiAgICB2YXIgbCA9IHMubGVuZ3RoO1xuICAgIGlmIChpID49IGwpIHtcbiAgICAgIHJldHVybiBsXG4gICAgfVxuICAgIHZhciBjID0gcy5jaGFyQ29kZUF0KGkpLCBuZXh0O1xuICAgIGlmICghKGZvcmNlVSB8fCB0aGlzLnN3aXRjaFUpIHx8IGMgPD0gMHhEN0ZGIHx8IGMgPj0gMHhFMDAwIHx8IGkgKyAxID49IGwgfHxcbiAgICAgICAgKG5leHQgPSBzLmNoYXJDb2RlQXQoaSArIDEpKSA8IDB4REMwMCB8fCBuZXh0ID4gMHhERkZGKSB7XG4gICAgICByZXR1cm4gaSArIDFcbiAgICB9XG4gICAgcmV0dXJuIGkgKyAyXG4gIH07XG5cbiAgUmVnRXhwVmFsaWRhdGlvblN0YXRlLnByb3RvdHlwZS5jdXJyZW50ID0gZnVuY3Rpb24gY3VycmVudCAoZm9yY2VVKSB7XG4gICAgICBpZiAoIGZvcmNlVSA9PT0gdm9pZCAwICkgZm9yY2VVID0gZmFsc2U7XG5cbiAgICByZXR1cm4gdGhpcy5hdCh0aGlzLnBvcywgZm9yY2VVKVxuICB9O1xuXG4gIFJlZ0V4cFZhbGlkYXRpb25TdGF0ZS5wcm90b3R5cGUubG9va2FoZWFkID0gZnVuY3Rpb24gbG9va2FoZWFkIChmb3JjZVUpIHtcbiAgICAgIGlmICggZm9yY2VVID09PSB2b2lkIDAgKSBmb3JjZVUgPSBmYWxzZTtcblxuICAgIHJldHVybiB0aGlzLmF0KHRoaXMubmV4dEluZGV4KHRoaXMucG9zLCBmb3JjZVUpLCBmb3JjZVUpXG4gIH07XG5cbiAgUmVnRXhwVmFsaWRhdGlvblN0YXRlLnByb3RvdHlwZS5hZHZhbmNlID0gZnVuY3Rpb24gYWR2YW5jZSAoZm9yY2VVKSB7XG4gICAgICBpZiAoIGZvcmNlVSA9PT0gdm9pZCAwICkgZm9yY2VVID0gZmFsc2U7XG5cbiAgICB0aGlzLnBvcyA9IHRoaXMubmV4dEluZGV4KHRoaXMucG9zLCBmb3JjZVUpO1xuICB9O1xuXG4gIFJlZ0V4cFZhbGlkYXRpb25TdGF0ZS5wcm90b3R5cGUuZWF0ID0gZnVuY3Rpb24gZWF0IChjaCwgZm9yY2VVKSB7XG4gICAgICBpZiAoIGZvcmNlVSA9PT0gdm9pZCAwICkgZm9yY2VVID0gZmFsc2U7XG5cbiAgICBpZiAodGhpcy5jdXJyZW50KGZvcmNlVSkgPT09IGNoKSB7XG4gICAgICB0aGlzLmFkdmFuY2UoZm9yY2VVKTtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICAgIHJldHVybiBmYWxzZVxuICB9O1xuXG4gIGZ1bmN0aW9uIGNvZGVQb2ludFRvU3RyaW5nKGNoKSB7XG4gICAgaWYgKGNoIDw9IDB4RkZGRikgeyByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShjaCkgfVxuICAgIGNoIC09IDB4MTAwMDA7XG4gICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoKGNoID4+IDEwKSArIDB4RDgwMCwgKGNoICYgMHgwM0ZGKSArIDB4REMwMClcbiAgfVxuXG4gIC8qKlxuICAgKiBWYWxpZGF0ZSB0aGUgZmxhZ3MgcGFydCBvZiBhIGdpdmVuIFJlZ0V4cExpdGVyYWwuXG4gICAqXG4gICAqIEBwYXJhbSB7UmVnRXhwVmFsaWRhdGlvblN0YXRlfSBzdGF0ZSBUaGUgc3RhdGUgdG8gdmFsaWRhdGUgUmVnRXhwLlxuICAgKiBAcmV0dXJucyB7dm9pZH1cbiAgICovXG4gIHBwJDgudmFsaWRhdGVSZWdFeHBGbGFncyA9IGZ1bmN0aW9uKHN0YXRlKSB7XG4gICAgdmFyIHZhbGlkRmxhZ3MgPSBzdGF0ZS52YWxpZEZsYWdzO1xuICAgIHZhciBmbGFncyA9IHN0YXRlLmZsYWdzO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBmbGFncy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGZsYWcgPSBmbGFncy5jaGFyQXQoaSk7XG4gICAgICBpZiAodmFsaWRGbGFncy5pbmRleE9mKGZsYWcpID09PSAtMSkge1xuICAgICAgICB0aGlzLnJhaXNlKHN0YXRlLnN0YXJ0LCBcIkludmFsaWQgcmVndWxhciBleHByZXNzaW9uIGZsYWdcIik7XG4gICAgICB9XG4gICAgICBpZiAoZmxhZ3MuaW5kZXhPZihmbGFnLCBpICsgMSkgPiAtMSkge1xuICAgICAgICB0aGlzLnJhaXNlKHN0YXRlLnN0YXJ0LCBcIkR1cGxpY2F0ZSByZWd1bGFyIGV4cHJlc3Npb24gZmxhZ1wiKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIFZhbGlkYXRlIHRoZSBwYXR0ZXJuIHBhcnQgb2YgYSBnaXZlbiBSZWdFeHBMaXRlcmFsLlxuICAgKlxuICAgKiBAcGFyYW0ge1JlZ0V4cFZhbGlkYXRpb25TdGF0ZX0gc3RhdGUgVGhlIHN0YXRlIHRvIHZhbGlkYXRlIFJlZ0V4cC5cbiAgICogQHJldHVybnMge3ZvaWR9XG4gICAqL1xuICBwcCQ4LnZhbGlkYXRlUmVnRXhwUGF0dGVybiA9IGZ1bmN0aW9uKHN0YXRlKSB7XG4gICAgdGhpcy5yZWdleHBfcGF0dGVybihzdGF0ZSk7XG5cbiAgICAvLyBUaGUgZ29hbCBzeW1ib2wgZm9yIHRoZSBwYXJzZSBpcyB8UGF0dGVyblt+VSwgfk5dfC4gSWYgdGhlIHJlc3VsdCBvZlxuICAgIC8vIHBhcnNpbmcgY29udGFpbnMgYSB8R3JvdXBOYW1lfCwgcmVwYXJzZSB3aXRoIHRoZSBnb2FsIHN5bWJvbFxuICAgIC8vIHxQYXR0ZXJuW35VLCArTl18IGFuZCB1c2UgdGhpcyByZXN1bHQgaW5zdGVhZC4gVGhyb3cgYSAqU3ludGF4RXJyb3IqXG4gICAgLy8gZXhjZXB0aW9uIGlmIF9QXyBkaWQgbm90IGNvbmZvcm0gdG8gdGhlIGdyYW1tYXIsIGlmIGFueSBlbGVtZW50cyBvZiBfUF9cbiAgICAvLyB3ZXJlIG5vdCBtYXRjaGVkIGJ5IHRoZSBwYXJzZSwgb3IgaWYgYW55IEVhcmx5IEVycm9yIGNvbmRpdGlvbnMgZXhpc3QuXG4gICAgaWYgKCFzdGF0ZS5zd2l0Y2hOICYmIHRoaXMub3B0aW9ucy5lY21hVmVyc2lvbiA+PSA5ICYmIHN0YXRlLmdyb3VwTmFtZXMubGVuZ3RoID4gMCkge1xuICAgICAgc3RhdGUuc3dpdGNoTiA9IHRydWU7XG4gICAgICB0aGlzLnJlZ2V4cF9wYXR0ZXJuKHN0YXRlKTtcbiAgICB9XG4gIH07XG5cbiAgLy8gaHR0cHM6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi84LjAvI3Byb2QtUGF0dGVyblxuICBwcCQ4LnJlZ2V4cF9wYXR0ZXJuID0gZnVuY3Rpb24oc3RhdGUpIHtcbiAgICBzdGF0ZS5wb3MgPSAwO1xuICAgIHN0YXRlLmxhc3RJbnRWYWx1ZSA9IDA7XG4gICAgc3RhdGUubGFzdFN0cmluZ1ZhbHVlID0gXCJcIjtcbiAgICBzdGF0ZS5sYXN0QXNzZXJ0aW9uSXNRdWFudGlmaWFibGUgPSBmYWxzZTtcbiAgICBzdGF0ZS5udW1DYXB0dXJpbmdQYXJlbnMgPSAwO1xuICAgIHN0YXRlLm1heEJhY2tSZWZlcmVuY2UgPSAwO1xuICAgIHN0YXRlLmdyb3VwTmFtZXMubGVuZ3RoID0gMDtcbiAgICBzdGF0ZS5iYWNrUmVmZXJlbmNlTmFtZXMubGVuZ3RoID0gMDtcblxuICAgIHRoaXMucmVnZXhwX2Rpc2p1bmN0aW9uKHN0YXRlKTtcblxuICAgIGlmIChzdGF0ZS5wb3MgIT09IHN0YXRlLnNvdXJjZS5sZW5ndGgpIHtcbiAgICAgIC8vIE1ha2UgdGhlIHNhbWUgbWVzc2FnZXMgYXMgVjguXG4gICAgICBpZiAoc3RhdGUuZWF0KDB4MjkgLyogKSAqLykpIHtcbiAgICAgICAgc3RhdGUucmFpc2UoXCJVbm1hdGNoZWQgJyknXCIpO1xuICAgICAgfVxuICAgICAgaWYgKHN0YXRlLmVhdCgweDVEIC8qIF0gKi8pIHx8IHN0YXRlLmVhdCgweDdEIC8qIH0gKi8pKSB7XG4gICAgICAgIHN0YXRlLnJhaXNlKFwiTG9uZSBxdWFudGlmaWVyIGJyYWNrZXRzXCIpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoc3RhdGUubWF4QmFja1JlZmVyZW5jZSA+IHN0YXRlLm51bUNhcHR1cmluZ1BhcmVucykge1xuICAgICAgc3RhdGUucmFpc2UoXCJJbnZhbGlkIGVzY2FwZVwiKTtcbiAgICB9XG4gICAgZm9yICh2YXIgaSA9IDAsIGxpc3QgPSBzdGF0ZS5iYWNrUmVmZXJlbmNlTmFtZXM7IGkgPCBsaXN0Lmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICB2YXIgbmFtZSA9IGxpc3RbaV07XG5cbiAgICAgIGlmIChzdGF0ZS5ncm91cE5hbWVzLmluZGV4T2YobmFtZSkgPT09IC0xKSB7XG4gICAgICAgIHN0YXRlLnJhaXNlKFwiSW52YWxpZCBuYW1lZCBjYXB0dXJlIHJlZmVyZW5jZWRcIik7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIC8vIGh0dHBzOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvOC4wLyNwcm9kLURpc2p1bmN0aW9uXG4gIHBwJDgucmVnZXhwX2Rpc2p1bmN0aW9uID0gZnVuY3Rpb24oc3RhdGUpIHtcbiAgICB0aGlzLnJlZ2V4cF9hbHRlcm5hdGl2ZShzdGF0ZSk7XG4gICAgd2hpbGUgKHN0YXRlLmVhdCgweDdDIC8qIHwgKi8pKSB7XG4gICAgICB0aGlzLnJlZ2V4cF9hbHRlcm5hdGl2ZShzdGF0ZSk7XG4gICAgfVxuXG4gICAgLy8gTWFrZSB0aGUgc2FtZSBtZXNzYWdlIGFzIFY4LlxuICAgIGlmICh0aGlzLnJlZ2V4cF9lYXRRdWFudGlmaWVyKHN0YXRlLCB0cnVlKSkge1xuICAgICAgc3RhdGUucmFpc2UoXCJOb3RoaW5nIHRvIHJlcGVhdFwiKTtcbiAgICB9XG4gICAgaWYgKHN0YXRlLmVhdCgweDdCIC8qIHsgKi8pKSB7XG4gICAgICBzdGF0ZS5yYWlzZShcIkxvbmUgcXVhbnRpZmllciBicmFja2V0c1wiKTtcbiAgICB9XG4gIH07XG5cbiAgLy8gaHR0cHM6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi84LjAvI3Byb2QtQWx0ZXJuYXRpdmVcbiAgcHAkOC5yZWdleHBfYWx0ZXJuYXRpdmUgPSBmdW5jdGlvbihzdGF0ZSkge1xuICAgIHdoaWxlIChzdGF0ZS5wb3MgPCBzdGF0ZS5zb3VyY2UubGVuZ3RoICYmIHRoaXMucmVnZXhwX2VhdFRlcm0oc3RhdGUpKVxuICAgICAgeyB9XG4gIH07XG5cbiAgLy8gaHR0cHM6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi84LjAvI3Byb2QtYW5uZXhCLVRlcm1cbiAgcHAkOC5yZWdleHBfZWF0VGVybSA9IGZ1bmN0aW9uKHN0YXRlKSB7XG4gICAgaWYgKHRoaXMucmVnZXhwX2VhdEFzc2VydGlvbihzdGF0ZSkpIHtcbiAgICAgIC8vIEhhbmRsZSBgUXVhbnRpZmlhYmxlQXNzZXJ0aW9uIFF1YW50aWZpZXJgIGFsdGVybmF0aXZlLlxuICAgICAgLy8gYHN0YXRlLmxhc3RBc3NlcnRpb25Jc1F1YW50aWZpYWJsZWAgaXMgdHJ1ZSBpZiB0aGUgbGFzdCBlYXRlbiBBc3NlcnRpb25cbiAgICAgIC8vIGlzIGEgUXVhbnRpZmlhYmxlQXNzZXJ0aW9uLlxuICAgICAgaWYgKHN0YXRlLmxhc3RBc3NlcnRpb25Jc1F1YW50aWZpYWJsZSAmJiB0aGlzLnJlZ2V4cF9lYXRRdWFudGlmaWVyKHN0YXRlKSkge1xuICAgICAgICAvLyBNYWtlIHRoZSBzYW1lIG1lc3NhZ2UgYXMgVjguXG4gICAgICAgIGlmIChzdGF0ZS5zd2l0Y2hVKSB7XG4gICAgICAgICAgc3RhdGUucmFpc2UoXCJJbnZhbGlkIHF1YW50aWZpZXJcIik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuXG4gICAgaWYgKHN0YXRlLnN3aXRjaFUgPyB0aGlzLnJlZ2V4cF9lYXRBdG9tKHN0YXRlKSA6IHRoaXMucmVnZXhwX2VhdEV4dGVuZGVkQXRvbShzdGF0ZSkpIHtcbiAgICAgIHRoaXMucmVnZXhwX2VhdFF1YW50aWZpZXIoc3RhdGUpO1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2VcbiAgfTtcblxuICAvLyBodHRwczovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzguMC8jcHJvZC1hbm5leEItQXNzZXJ0aW9uXG4gIHBwJDgucmVnZXhwX2VhdEFzc2VydGlvbiA9IGZ1bmN0aW9uKHN0YXRlKSB7XG4gICAgdmFyIHN0YXJ0ID0gc3RhdGUucG9zO1xuICAgIHN0YXRlLmxhc3RBc3NlcnRpb25Jc1F1YW50aWZpYWJsZSA9IGZhbHNlO1xuXG4gICAgLy8gXiwgJFxuICAgIGlmIChzdGF0ZS5lYXQoMHg1RSAvKiBeICovKSB8fCBzdGF0ZS5lYXQoMHgyNCAvKiAkICovKSkge1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG5cbiAgICAvLyBcXGIgXFxCXG4gICAgaWYgKHN0YXRlLmVhdCgweDVDIC8qIFxcICovKSkge1xuICAgICAgaWYgKHN0YXRlLmVhdCgweDQyIC8qIEIgKi8pIHx8IHN0YXRlLmVhdCgweDYyIC8qIGIgKi8pKSB7XG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgICB9XG4gICAgICBzdGF0ZS5wb3MgPSBzdGFydDtcbiAgICB9XG5cbiAgICAvLyBMb29rYWhlYWQgLyBMb29rYmVoaW5kXG4gICAgaWYgKHN0YXRlLmVhdCgweDI4IC8qICggKi8pICYmIHN0YXRlLmVhdCgweDNGIC8qID8gKi8pKSB7XG4gICAgICB2YXIgbG9va2JlaGluZCA9IGZhbHNlO1xuICAgICAgaWYgKHRoaXMub3B0aW9ucy5lY21hVmVyc2lvbiA+PSA5KSB7XG4gICAgICAgIGxvb2tiZWhpbmQgPSBzdGF0ZS5lYXQoMHgzQyAvKiA8ICovKTtcbiAgICAgIH1cbiAgICAgIGlmIChzdGF0ZS5lYXQoMHgzRCAvKiA9ICovKSB8fCBzdGF0ZS5lYXQoMHgyMSAvKiAhICovKSkge1xuICAgICAgICB0aGlzLnJlZ2V4cF9kaXNqdW5jdGlvbihzdGF0ZSk7XG4gICAgICAgIGlmICghc3RhdGUuZWF0KDB4MjkgLyogKSAqLykpIHtcbiAgICAgICAgICBzdGF0ZS5yYWlzZShcIlVudGVybWluYXRlZCBncm91cFwiKTtcbiAgICAgICAgfVxuICAgICAgICBzdGF0ZS5sYXN0QXNzZXJ0aW9uSXNRdWFudGlmaWFibGUgPSAhbG9va2JlaGluZDtcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH1cbiAgICB9XG5cbiAgICBzdGF0ZS5wb3MgPSBzdGFydDtcbiAgICByZXR1cm4gZmFsc2VcbiAgfTtcblxuICAvLyBodHRwczovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzguMC8jcHJvZC1RdWFudGlmaWVyXG4gIHBwJDgucmVnZXhwX2VhdFF1YW50aWZpZXIgPSBmdW5jdGlvbihzdGF0ZSwgbm9FcnJvcikge1xuICAgIGlmICggbm9FcnJvciA9PT0gdm9pZCAwICkgbm9FcnJvciA9IGZhbHNlO1xuXG4gICAgaWYgKHRoaXMucmVnZXhwX2VhdFF1YW50aWZpZXJQcmVmaXgoc3RhdGUsIG5vRXJyb3IpKSB7XG4gICAgICBzdGF0ZS5lYXQoMHgzRiAvKiA/ICovKTtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICAgIHJldHVybiBmYWxzZVxuICB9O1xuXG4gIC8vIGh0dHBzOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvOC4wLyNwcm9kLVF1YW50aWZpZXJQcmVmaXhcbiAgcHAkOC5yZWdleHBfZWF0UXVhbnRpZmllclByZWZpeCA9IGZ1bmN0aW9uKHN0YXRlLCBub0Vycm9yKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIHN0YXRlLmVhdCgweDJBIC8qICogKi8pIHx8XG4gICAgICBzdGF0ZS5lYXQoMHgyQiAvKiArICovKSB8fFxuICAgICAgc3RhdGUuZWF0KDB4M0YgLyogPyAqLykgfHxcbiAgICAgIHRoaXMucmVnZXhwX2VhdEJyYWNlZFF1YW50aWZpZXIoc3RhdGUsIG5vRXJyb3IpXG4gICAgKVxuICB9O1xuICBwcCQ4LnJlZ2V4cF9lYXRCcmFjZWRRdWFudGlmaWVyID0gZnVuY3Rpb24oc3RhdGUsIG5vRXJyb3IpIHtcbiAgICB2YXIgc3RhcnQgPSBzdGF0ZS5wb3M7XG4gICAgaWYgKHN0YXRlLmVhdCgweDdCIC8qIHsgKi8pKSB7XG4gICAgICB2YXIgbWluID0gMCwgbWF4ID0gLTE7XG4gICAgICBpZiAodGhpcy5yZWdleHBfZWF0RGVjaW1hbERpZ2l0cyhzdGF0ZSkpIHtcbiAgICAgICAgbWluID0gc3RhdGUubGFzdEludFZhbHVlO1xuICAgICAgICBpZiAoc3RhdGUuZWF0KDB4MkMgLyogLCAqLykgJiYgdGhpcy5yZWdleHBfZWF0RGVjaW1hbERpZ2l0cyhzdGF0ZSkpIHtcbiAgICAgICAgICBtYXggPSBzdGF0ZS5sYXN0SW50VmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN0YXRlLmVhdCgweDdEIC8qIH0gKi8pKSB7XG4gICAgICAgICAgLy8gU3ludGF4RXJyb3IgaW4gaHR0cHM6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi84LjAvI3NlYy10ZXJtXG4gICAgICAgICAgaWYgKG1heCAhPT0gLTEgJiYgbWF4IDwgbWluICYmICFub0Vycm9yKSB7XG4gICAgICAgICAgICBzdGF0ZS5yYWlzZShcIm51bWJlcnMgb3V0IG9mIG9yZGVyIGluIHt9IHF1YW50aWZpZXJcIik7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB0cnVlXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChzdGF0ZS5zd2l0Y2hVICYmICFub0Vycm9yKSB7XG4gICAgICAgIHN0YXRlLnJhaXNlKFwiSW5jb21wbGV0ZSBxdWFudGlmaWVyXCIpO1xuICAgICAgfVxuICAgICAgc3RhdGUucG9zID0gc3RhcnQ7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZVxuICB9O1xuXG4gIC8vIGh0dHBzOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvOC4wLyNwcm9kLUF0b21cbiAgcHAkOC5yZWdleHBfZWF0QXRvbSA9IGZ1bmN0aW9uKHN0YXRlKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIHRoaXMucmVnZXhwX2VhdFBhdHRlcm5DaGFyYWN0ZXJzKHN0YXRlKSB8fFxuICAgICAgc3RhdGUuZWF0KDB4MkUgLyogLiAqLykgfHxcbiAgICAgIHRoaXMucmVnZXhwX2VhdFJldmVyc2VTb2xpZHVzQXRvbUVzY2FwZShzdGF0ZSkgfHxcbiAgICAgIHRoaXMucmVnZXhwX2VhdENoYXJhY3RlckNsYXNzKHN0YXRlKSB8fFxuICAgICAgdGhpcy5yZWdleHBfZWF0VW5jYXB0dXJpbmdHcm91cChzdGF0ZSkgfHxcbiAgICAgIHRoaXMucmVnZXhwX2VhdENhcHR1cmluZ0dyb3VwKHN0YXRlKVxuICAgIClcbiAgfTtcbiAgcHAkOC5yZWdleHBfZWF0UmV2ZXJzZVNvbGlkdXNBdG9tRXNjYXBlID0gZnVuY3Rpb24oc3RhdGUpIHtcbiAgICB2YXIgc3RhcnQgPSBzdGF0ZS5wb3M7XG4gICAgaWYgKHN0YXRlLmVhdCgweDVDIC8qIFxcICovKSkge1xuICAgICAgaWYgKHRoaXMucmVnZXhwX2VhdEF0b21Fc2NhcGUoc3RhdGUpKSB7XG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgICB9XG4gICAgICBzdGF0ZS5wb3MgPSBzdGFydDtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlXG4gIH07XG4gIHBwJDgucmVnZXhwX2VhdFVuY2FwdHVyaW5nR3JvdXAgPSBmdW5jdGlvbihzdGF0ZSkge1xuICAgIHZhciBzdGFydCA9IHN0YXRlLnBvcztcbiAgICBpZiAoc3RhdGUuZWF0KDB4MjggLyogKCAqLykpIHtcbiAgICAgIGlmIChzdGF0ZS5lYXQoMHgzRiAvKiA/ICovKSAmJiBzdGF0ZS5lYXQoMHgzQSAvKiA6ICovKSkge1xuICAgICAgICB0aGlzLnJlZ2V4cF9kaXNqdW5jdGlvbihzdGF0ZSk7XG4gICAgICAgIGlmIChzdGF0ZS5lYXQoMHgyOSAvKiApICovKSkge1xuICAgICAgICAgIHJldHVybiB0cnVlXG4gICAgICAgIH1cbiAgICAgICAgc3RhdGUucmFpc2UoXCJVbnRlcm1pbmF0ZWQgZ3JvdXBcIik7XG4gICAgICB9XG4gICAgICBzdGF0ZS5wb3MgPSBzdGFydDtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlXG4gIH07XG4gIHBwJDgucmVnZXhwX2VhdENhcHR1cmluZ0dyb3VwID0gZnVuY3Rpb24oc3RhdGUpIHtcbiAgICBpZiAoc3RhdGUuZWF0KDB4MjggLyogKCAqLykpIHtcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuZWNtYVZlcnNpb24gPj0gOSkge1xuICAgICAgICB0aGlzLnJlZ2V4cF9ncm91cFNwZWNpZmllcihzdGF0ZSk7XG4gICAgICB9IGVsc2UgaWYgKHN0YXRlLmN1cnJlbnQoKSA9PT0gMHgzRiAvKiA/ICovKSB7XG4gICAgICAgIHN0YXRlLnJhaXNlKFwiSW52YWxpZCBncm91cFwiKTtcbiAgICAgIH1cbiAgICAgIHRoaXMucmVnZXhwX2Rpc2p1bmN0aW9uKHN0YXRlKTtcbiAgICAgIGlmIChzdGF0ZS5lYXQoMHgyOSAvKiApICovKSkge1xuICAgICAgICBzdGF0ZS5udW1DYXB0dXJpbmdQYXJlbnMgKz0gMTtcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH1cbiAgICAgIHN0YXRlLnJhaXNlKFwiVW50ZXJtaW5hdGVkIGdyb3VwXCIpO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2VcbiAgfTtcblxuICAvLyBodHRwczovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzguMC8jcHJvZC1hbm5leEItRXh0ZW5kZWRBdG9tXG4gIHBwJDgucmVnZXhwX2VhdEV4dGVuZGVkQXRvbSA9IGZ1bmN0aW9uKHN0YXRlKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIHN0YXRlLmVhdCgweDJFIC8qIC4gKi8pIHx8XG4gICAgICB0aGlzLnJlZ2V4cF9lYXRSZXZlcnNlU29saWR1c0F0b21Fc2NhcGUoc3RhdGUpIHx8XG4gICAgICB0aGlzLnJlZ2V4cF9lYXRDaGFyYWN0ZXJDbGFzcyhzdGF0ZSkgfHxcbiAgICAgIHRoaXMucmVnZXhwX2VhdFVuY2FwdHVyaW5nR3JvdXAoc3RhdGUpIHx8XG4gICAgICB0aGlzLnJlZ2V4cF9lYXRDYXB0dXJpbmdHcm91cChzdGF0ZSkgfHxcbiAgICAgIHRoaXMucmVnZXhwX2VhdEludmFsaWRCcmFjZWRRdWFudGlmaWVyKHN0YXRlKSB8fFxuICAgICAgdGhpcy5yZWdleHBfZWF0RXh0ZW5kZWRQYXR0ZXJuQ2hhcmFjdGVyKHN0YXRlKVxuICAgIClcbiAgfTtcblxuICAvLyBodHRwczovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzguMC8jcHJvZC1hbm5leEItSW52YWxpZEJyYWNlZFF1YW50aWZpZXJcbiAgcHAkOC5yZWdleHBfZWF0SW52YWxpZEJyYWNlZFF1YW50aWZpZXIgPSBmdW5jdGlvbihzdGF0ZSkge1xuICAgIGlmICh0aGlzLnJlZ2V4cF9lYXRCcmFjZWRRdWFudGlmaWVyKHN0YXRlLCB0cnVlKSkge1xuICAgICAgc3RhdGUucmFpc2UoXCJOb3RoaW5nIHRvIHJlcGVhdFwiKTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlXG4gIH07XG5cbiAgLy8gaHR0cHM6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi84LjAvI3Byb2QtU3ludGF4Q2hhcmFjdGVyXG4gIHBwJDgucmVnZXhwX2VhdFN5bnRheENoYXJhY3RlciA9IGZ1bmN0aW9uKHN0YXRlKSB7XG4gICAgdmFyIGNoID0gc3RhdGUuY3VycmVudCgpO1xuICAgIGlmIChpc1N5bnRheENoYXJhY3RlcihjaCkpIHtcbiAgICAgIHN0YXRlLmxhc3RJbnRWYWx1ZSA9IGNoO1xuICAgICAgc3RhdGUuYWR2YW5jZSgpO1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlXG4gIH07XG4gIGZ1bmN0aW9uIGlzU3ludGF4Q2hhcmFjdGVyKGNoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIGNoID09PSAweDI0IC8qICQgKi8gfHxcbiAgICAgIGNoID49IDB4MjggLyogKCAqLyAmJiBjaCA8PSAweDJCIC8qICsgKi8gfHxcbiAgICAgIGNoID09PSAweDJFIC8qIC4gKi8gfHxcbiAgICAgIGNoID09PSAweDNGIC8qID8gKi8gfHxcbiAgICAgIGNoID49IDB4NUIgLyogWyAqLyAmJiBjaCA8PSAweDVFIC8qIF4gKi8gfHxcbiAgICAgIGNoID49IDB4N0IgLyogeyAqLyAmJiBjaCA8PSAweDdEIC8qIH0gKi9cbiAgICApXG4gIH1cblxuICAvLyBodHRwczovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzguMC8jcHJvZC1QYXR0ZXJuQ2hhcmFjdGVyXG4gIC8vIEJ1dCBlYXQgZWFnZXIuXG4gIHBwJDgucmVnZXhwX2VhdFBhdHRlcm5DaGFyYWN0ZXJzID0gZnVuY3Rpb24oc3RhdGUpIHtcbiAgICB2YXIgc3RhcnQgPSBzdGF0ZS5wb3M7XG4gICAgdmFyIGNoID0gMDtcbiAgICB3aGlsZSAoKGNoID0gc3RhdGUuY3VycmVudCgpKSAhPT0gLTEgJiYgIWlzU3ludGF4Q2hhcmFjdGVyKGNoKSkge1xuICAgICAgc3RhdGUuYWR2YW5jZSgpO1xuICAgIH1cbiAgICByZXR1cm4gc3RhdGUucG9zICE9PSBzdGFydFxuICB9O1xuXG4gIC8vIGh0dHBzOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvOC4wLyNwcm9kLWFubmV4Qi1FeHRlbmRlZFBhdHRlcm5DaGFyYWN0ZXJcbiAgcHAkOC5yZWdleHBfZWF0RXh0ZW5kZWRQYXR0ZXJuQ2hhcmFjdGVyID0gZnVuY3Rpb24oc3RhdGUpIHtcbiAgICB2YXIgY2ggPSBzdGF0ZS5jdXJyZW50KCk7XG4gICAgaWYgKFxuICAgICAgY2ggIT09IC0xICYmXG4gICAgICBjaCAhPT0gMHgyNCAvKiAkICovICYmXG4gICAgICAhKGNoID49IDB4MjggLyogKCAqLyAmJiBjaCA8PSAweDJCIC8qICsgKi8pICYmXG4gICAgICBjaCAhPT0gMHgyRSAvKiAuICovICYmXG4gICAgICBjaCAhPT0gMHgzRiAvKiA/ICovICYmXG4gICAgICBjaCAhPT0gMHg1QiAvKiBbICovICYmXG4gICAgICBjaCAhPT0gMHg1RSAvKiBeICovICYmXG4gICAgICBjaCAhPT0gMHg3QyAvKiB8ICovXG4gICAgKSB7XG4gICAgICBzdGF0ZS5hZHZhbmNlKCk7XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2VcbiAgfTtcblxuICAvLyBHcm91cFNwZWNpZmllciA6OlxuICAvLyAgIFtlbXB0eV1cbiAgLy8gICBgP2AgR3JvdXBOYW1lXG4gIHBwJDgucmVnZXhwX2dyb3VwU3BlY2lmaWVyID0gZnVuY3Rpb24oc3RhdGUpIHtcbiAgICBpZiAoc3RhdGUuZWF0KDB4M0YgLyogPyAqLykpIHtcbiAgICAgIGlmICh0aGlzLnJlZ2V4cF9lYXRHcm91cE5hbWUoc3RhdGUpKSB7XG4gICAgICAgIGlmIChzdGF0ZS5ncm91cE5hbWVzLmluZGV4T2Yoc3RhdGUubGFzdFN0cmluZ1ZhbHVlKSAhPT0gLTEpIHtcbiAgICAgICAgICBzdGF0ZS5yYWlzZShcIkR1cGxpY2F0ZSBjYXB0dXJlIGdyb3VwIG5hbWVcIik7XG4gICAgICAgIH1cbiAgICAgICAgc3RhdGUuZ3JvdXBOYW1lcy5wdXNoKHN0YXRlLmxhc3RTdHJpbmdWYWx1ZSk7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgICAgc3RhdGUucmFpc2UoXCJJbnZhbGlkIGdyb3VwXCIpO1xuICAgIH1cbiAgfTtcblxuICAvLyBHcm91cE5hbWUgOjpcbiAgLy8gICBgPGAgUmVnRXhwSWRlbnRpZmllck5hbWUgYD5gXG4gIC8vIE5vdGU6IHRoaXMgdXBkYXRlcyBgc3RhdGUubGFzdFN0cmluZ1ZhbHVlYCBwcm9wZXJ0eSB3aXRoIHRoZSBlYXRlbiBuYW1lLlxuICBwcCQ4LnJlZ2V4cF9lYXRHcm91cE5hbWUgPSBmdW5jdGlvbihzdGF0ZSkge1xuICAgIHN0YXRlLmxhc3RTdHJpbmdWYWx1ZSA9IFwiXCI7XG4gICAgaWYgKHN0YXRlLmVhdCgweDNDIC8qIDwgKi8pKSB7XG4gICAgICBpZiAodGhpcy5yZWdleHBfZWF0UmVnRXhwSWRlbnRpZmllck5hbWUoc3RhdGUpICYmIHN0YXRlLmVhdCgweDNFIC8qID4gKi8pKSB7XG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgICB9XG4gICAgICBzdGF0ZS5yYWlzZShcIkludmFsaWQgY2FwdHVyZSBncm91cCBuYW1lXCIpO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2VcbiAgfTtcblxuICAvLyBSZWdFeHBJZGVudGlmaWVyTmFtZSA6OlxuICAvLyAgIFJlZ0V4cElkZW50aWZpZXJTdGFydFxuICAvLyAgIFJlZ0V4cElkZW50aWZpZXJOYW1lIFJlZ0V4cElkZW50aWZpZXJQYXJ0XG4gIC8vIE5vdGU6IHRoaXMgdXBkYXRlcyBgc3RhdGUubGFzdFN0cmluZ1ZhbHVlYCBwcm9wZXJ0eSB3aXRoIHRoZSBlYXRlbiBuYW1lLlxuICBwcCQ4LnJlZ2V4cF9lYXRSZWdFeHBJZGVudGlmaWVyTmFtZSA9IGZ1bmN0aW9uKHN0YXRlKSB7XG4gICAgc3RhdGUubGFzdFN0cmluZ1ZhbHVlID0gXCJcIjtcbiAgICBpZiAodGhpcy5yZWdleHBfZWF0UmVnRXhwSWRlbnRpZmllclN0YXJ0KHN0YXRlKSkge1xuICAgICAgc3RhdGUubGFzdFN0cmluZ1ZhbHVlICs9IGNvZGVQb2ludFRvU3RyaW5nKHN0YXRlLmxhc3RJbnRWYWx1ZSk7XG4gICAgICB3aGlsZSAodGhpcy5yZWdleHBfZWF0UmVnRXhwSWRlbnRpZmllclBhcnQoc3RhdGUpKSB7XG4gICAgICAgIHN0YXRlLmxhc3RTdHJpbmdWYWx1ZSArPSBjb2RlUG9pbnRUb1N0cmluZyhzdGF0ZS5sYXN0SW50VmFsdWUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlXG4gIH07XG5cbiAgLy8gUmVnRXhwSWRlbnRpZmllclN0YXJ0IDo6XG4gIC8vICAgVW5pY29kZUlEU3RhcnRcbiAgLy8gICBgJGBcbiAgLy8gICBgX2BcbiAgLy8gICBgXFxgIFJlZ0V4cFVuaWNvZGVFc2NhcGVTZXF1ZW5jZVsrVV1cbiAgcHAkOC5yZWdleHBfZWF0UmVnRXhwSWRlbnRpZmllclN0YXJ0ID0gZnVuY3Rpb24oc3RhdGUpIHtcbiAgICB2YXIgc3RhcnQgPSBzdGF0ZS5wb3M7XG4gICAgdmFyIGZvcmNlVSA9IHRoaXMub3B0aW9ucy5lY21hVmVyc2lvbiA+PSAxMTtcbiAgICB2YXIgY2ggPSBzdGF0ZS5jdXJyZW50KGZvcmNlVSk7XG4gICAgc3RhdGUuYWR2YW5jZShmb3JjZVUpO1xuXG4gICAgaWYgKGNoID09PSAweDVDIC8qIFxcICovICYmIHRoaXMucmVnZXhwX2VhdFJlZ0V4cFVuaWNvZGVFc2NhcGVTZXF1ZW5jZShzdGF0ZSwgZm9yY2VVKSkge1xuICAgICAgY2ggPSBzdGF0ZS5sYXN0SW50VmFsdWU7XG4gICAgfVxuICAgIGlmIChpc1JlZ0V4cElkZW50aWZpZXJTdGFydChjaCkpIHtcbiAgICAgIHN0YXRlLmxhc3RJbnRWYWx1ZSA9IGNoO1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG5cbiAgICBzdGF0ZS5wb3MgPSBzdGFydDtcbiAgICByZXR1cm4gZmFsc2VcbiAgfTtcbiAgZnVuY3Rpb24gaXNSZWdFeHBJZGVudGlmaWVyU3RhcnQoY2gpIHtcbiAgICByZXR1cm4gaXNJZGVudGlmaWVyU3RhcnQoY2gsIHRydWUpIHx8IGNoID09PSAweDI0IC8qICQgKi8gfHwgY2ggPT09IDB4NUYgLyogXyAqL1xuICB9XG5cbiAgLy8gUmVnRXhwSWRlbnRpZmllclBhcnQgOjpcbiAgLy8gICBVbmljb2RlSURDb250aW51ZVxuICAvLyAgIGAkYFxuICAvLyAgIGBfYFxuICAvLyAgIGBcXGAgUmVnRXhwVW5pY29kZUVzY2FwZVNlcXVlbmNlWytVXVxuICAvLyAgIDxaV05KPlxuICAvLyAgIDxaV0o+XG4gIHBwJDgucmVnZXhwX2VhdFJlZ0V4cElkZW50aWZpZXJQYXJ0ID0gZnVuY3Rpb24oc3RhdGUpIHtcbiAgICB2YXIgc3RhcnQgPSBzdGF0ZS5wb3M7XG4gICAgdmFyIGZvcmNlVSA9IHRoaXMub3B0aW9ucy5lY21hVmVyc2lvbiA+PSAxMTtcbiAgICB2YXIgY2ggPSBzdGF0ZS5jdXJyZW50KGZvcmNlVSk7XG4gICAgc3RhdGUuYWR2YW5jZShmb3JjZVUpO1xuXG4gICAgaWYgKGNoID09PSAweDVDIC8qIFxcICovICYmIHRoaXMucmVnZXhwX2VhdFJlZ0V4cFVuaWNvZGVFc2NhcGVTZXF1ZW5jZShzdGF0ZSwgZm9yY2VVKSkge1xuICAgICAgY2ggPSBzdGF0ZS5sYXN0SW50VmFsdWU7XG4gICAgfVxuICAgIGlmIChpc1JlZ0V4cElkZW50aWZpZXJQYXJ0KGNoKSkge1xuICAgICAgc3RhdGUubGFzdEludFZhbHVlID0gY2g7XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cblxuICAgIHN0YXRlLnBvcyA9IHN0YXJ0O1xuICAgIHJldHVybiBmYWxzZVxuICB9O1xuICBmdW5jdGlvbiBpc1JlZ0V4cElkZW50aWZpZXJQYXJ0KGNoKSB7XG4gICAgcmV0dXJuIGlzSWRlbnRpZmllckNoYXIoY2gsIHRydWUpIHx8IGNoID09PSAweDI0IC8qICQgKi8gfHwgY2ggPT09IDB4NUYgLyogXyAqLyB8fCBjaCA9PT0gMHgyMDBDIC8qIDxaV05KPiAqLyB8fCBjaCA9PT0gMHgyMDBEIC8qIDxaV0o+ICovXG4gIH1cblxuICAvLyBodHRwczovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzguMC8jcHJvZC1hbm5leEItQXRvbUVzY2FwZVxuICBwcCQ4LnJlZ2V4cF9lYXRBdG9tRXNjYXBlID0gZnVuY3Rpb24oc3RhdGUpIHtcbiAgICBpZiAoXG4gICAgICB0aGlzLnJlZ2V4cF9lYXRCYWNrUmVmZXJlbmNlKHN0YXRlKSB8fFxuICAgICAgdGhpcy5yZWdleHBfZWF0Q2hhcmFjdGVyQ2xhc3NFc2NhcGUoc3RhdGUpIHx8XG4gICAgICB0aGlzLnJlZ2V4cF9lYXRDaGFyYWN0ZXJFc2NhcGUoc3RhdGUpIHx8XG4gICAgICAoc3RhdGUuc3dpdGNoTiAmJiB0aGlzLnJlZ2V4cF9lYXRLR3JvdXBOYW1lKHN0YXRlKSlcbiAgICApIHtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICAgIGlmIChzdGF0ZS5zd2l0Y2hVKSB7XG4gICAgICAvLyBNYWtlIHRoZSBzYW1lIG1lc3NhZ2UgYXMgVjguXG4gICAgICBpZiAoc3RhdGUuY3VycmVudCgpID09PSAweDYzIC8qIGMgKi8pIHtcbiAgICAgICAgc3RhdGUucmFpc2UoXCJJbnZhbGlkIHVuaWNvZGUgZXNjYXBlXCIpO1xuICAgICAgfVxuICAgICAgc3RhdGUucmFpc2UoXCJJbnZhbGlkIGVzY2FwZVwiKTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlXG4gIH07XG4gIHBwJDgucmVnZXhwX2VhdEJhY2tSZWZlcmVuY2UgPSBmdW5jdGlvbihzdGF0ZSkge1xuICAgIHZhciBzdGFydCA9IHN0YXRlLnBvcztcbiAgICBpZiAodGhpcy5yZWdleHBfZWF0RGVjaW1hbEVzY2FwZShzdGF0ZSkpIHtcbiAgICAgIHZhciBuID0gc3RhdGUubGFzdEludFZhbHVlO1xuICAgICAgaWYgKHN0YXRlLnN3aXRjaFUpIHtcbiAgICAgICAgLy8gRm9yIFN5bnRheEVycm9yIGluIGh0dHBzOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvOC4wLyNzZWMtYXRvbWVzY2FwZVxuICAgICAgICBpZiAobiA+IHN0YXRlLm1heEJhY2tSZWZlcmVuY2UpIHtcbiAgICAgICAgICBzdGF0ZS5tYXhCYWNrUmVmZXJlbmNlID0gbjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgfVxuICAgICAgaWYgKG4gPD0gc3RhdGUubnVtQ2FwdHVyaW5nUGFyZW5zKSB7XG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgICB9XG4gICAgICBzdGF0ZS5wb3MgPSBzdGFydDtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlXG4gIH07XG4gIHBwJDgucmVnZXhwX2VhdEtHcm91cE5hbWUgPSBmdW5jdGlvbihzdGF0ZSkge1xuICAgIGlmIChzdGF0ZS5lYXQoMHg2QiAvKiBrICovKSkge1xuICAgICAgaWYgKHRoaXMucmVnZXhwX2VhdEdyb3VwTmFtZShzdGF0ZSkpIHtcbiAgICAgICAgc3RhdGUuYmFja1JlZmVyZW5jZU5hbWVzLnB1c2goc3RhdGUubGFzdFN0cmluZ1ZhbHVlKTtcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH1cbiAgICAgIHN0YXRlLnJhaXNlKFwiSW52YWxpZCBuYW1lZCByZWZlcmVuY2VcIik7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZVxuICB9O1xuXG4gIC8vIGh0dHBzOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvOC4wLyNwcm9kLWFubmV4Qi1DaGFyYWN0ZXJFc2NhcGVcbiAgcHAkOC5yZWdleHBfZWF0Q2hhcmFjdGVyRXNjYXBlID0gZnVuY3Rpb24oc3RhdGUpIHtcbiAgICByZXR1cm4gKFxuICAgICAgdGhpcy5yZWdleHBfZWF0Q29udHJvbEVzY2FwZShzdGF0ZSkgfHxcbiAgICAgIHRoaXMucmVnZXhwX2VhdENDb250cm9sTGV0dGVyKHN0YXRlKSB8fFxuICAgICAgdGhpcy5yZWdleHBfZWF0WmVybyhzdGF0ZSkgfHxcbiAgICAgIHRoaXMucmVnZXhwX2VhdEhleEVzY2FwZVNlcXVlbmNlKHN0YXRlKSB8fFxuICAgICAgdGhpcy5yZWdleHBfZWF0UmVnRXhwVW5pY29kZUVzY2FwZVNlcXVlbmNlKHN0YXRlLCBmYWxzZSkgfHxcbiAgICAgICghc3RhdGUuc3dpdGNoVSAmJiB0aGlzLnJlZ2V4cF9lYXRMZWdhY3lPY3RhbEVzY2FwZVNlcXVlbmNlKHN0YXRlKSkgfHxcbiAgICAgIHRoaXMucmVnZXhwX2VhdElkZW50aXR5RXNjYXBlKHN0YXRlKVxuICAgIClcbiAgfTtcbiAgcHAkOC5yZWdleHBfZWF0Q0NvbnRyb2xMZXR0ZXIgPSBmdW5jdGlvbihzdGF0ZSkge1xuICAgIHZhciBzdGFydCA9IHN0YXRlLnBvcztcbiAgICBpZiAoc3RhdGUuZWF0KDB4NjMgLyogYyAqLykpIHtcbiAgICAgIGlmICh0aGlzLnJlZ2V4cF9lYXRDb250cm9sTGV0dGVyKHN0YXRlKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgfVxuICAgICAgc3RhdGUucG9zID0gc3RhcnQ7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZVxuICB9O1xuICBwcCQ4LnJlZ2V4cF9lYXRaZXJvID0gZnVuY3Rpb24oc3RhdGUpIHtcbiAgICBpZiAoc3RhdGUuY3VycmVudCgpID09PSAweDMwIC8qIDAgKi8gJiYgIWlzRGVjaW1hbERpZ2l0KHN0YXRlLmxvb2thaGVhZCgpKSkge1xuICAgICAgc3RhdGUubGFzdEludFZhbHVlID0gMDtcbiAgICAgIHN0YXRlLmFkdmFuY2UoKTtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICAgIHJldHVybiBmYWxzZVxuICB9O1xuXG4gIC8vIGh0dHBzOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvOC4wLyNwcm9kLUNvbnRyb2xFc2NhcGVcbiAgcHAkOC5yZWdleHBfZWF0Q29udHJvbEVzY2FwZSA9IGZ1bmN0aW9uKHN0YXRlKSB7XG4gICAgdmFyIGNoID0gc3RhdGUuY3VycmVudCgpO1xuICAgIGlmIChjaCA9PT0gMHg3NCAvKiB0ICovKSB7XG4gICAgICBzdGF0ZS5sYXN0SW50VmFsdWUgPSAweDA5OyAvKiBcXHQgKi9cbiAgICAgIHN0YXRlLmFkdmFuY2UoKTtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICAgIGlmIChjaCA9PT0gMHg2RSAvKiBuICovKSB7XG4gICAgICBzdGF0ZS5sYXN0SW50VmFsdWUgPSAweDBBOyAvKiBcXG4gKi9cbiAgICAgIHN0YXRlLmFkdmFuY2UoKTtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICAgIGlmIChjaCA9PT0gMHg3NiAvKiB2ICovKSB7XG4gICAgICBzdGF0ZS5sYXN0SW50VmFsdWUgPSAweDBCOyAvKiBcXHYgKi9cbiAgICAgIHN0YXRlLmFkdmFuY2UoKTtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICAgIGlmIChjaCA9PT0gMHg2NiAvKiBmICovKSB7XG4gICAgICBzdGF0ZS5sYXN0SW50VmFsdWUgPSAweDBDOyAvKiBcXGYgKi9cbiAgICAgIHN0YXRlLmFkdmFuY2UoKTtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICAgIGlmIChjaCA9PT0gMHg3MiAvKiByICovKSB7XG4gICAgICBzdGF0ZS5sYXN0SW50VmFsdWUgPSAweDBEOyAvKiBcXHIgKi9cbiAgICAgIHN0YXRlLmFkdmFuY2UoKTtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICAgIHJldHVybiBmYWxzZVxuICB9O1xuXG4gIC8vIGh0dHBzOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvOC4wLyNwcm9kLUNvbnRyb2xMZXR0ZXJcbiAgcHAkOC5yZWdleHBfZWF0Q29udHJvbExldHRlciA9IGZ1bmN0aW9uKHN0YXRlKSB7XG4gICAgdmFyIGNoID0gc3RhdGUuY3VycmVudCgpO1xuICAgIGlmIChpc0NvbnRyb2xMZXR0ZXIoY2gpKSB7XG4gICAgICBzdGF0ZS5sYXN0SW50VmFsdWUgPSBjaCAlIDB4MjA7XG4gICAgICBzdGF0ZS5hZHZhbmNlKCk7XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2VcbiAgfTtcbiAgZnVuY3Rpb24gaXNDb250cm9sTGV0dGVyKGNoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIChjaCA+PSAweDQxIC8qIEEgKi8gJiYgY2ggPD0gMHg1QSAvKiBaICovKSB8fFxuICAgICAgKGNoID49IDB4NjEgLyogYSAqLyAmJiBjaCA8PSAweDdBIC8qIHogKi8pXG4gICAgKVxuICB9XG5cbiAgLy8gaHR0cHM6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi84LjAvI3Byb2QtUmVnRXhwVW5pY29kZUVzY2FwZVNlcXVlbmNlXG4gIHBwJDgucmVnZXhwX2VhdFJlZ0V4cFVuaWNvZGVFc2NhcGVTZXF1ZW5jZSA9IGZ1bmN0aW9uKHN0YXRlLCBmb3JjZVUpIHtcbiAgICBpZiAoIGZvcmNlVSA9PT0gdm9pZCAwICkgZm9yY2VVID0gZmFsc2U7XG5cbiAgICB2YXIgc3RhcnQgPSBzdGF0ZS5wb3M7XG4gICAgdmFyIHN3aXRjaFUgPSBmb3JjZVUgfHwgc3RhdGUuc3dpdGNoVTtcblxuICAgIGlmIChzdGF0ZS5lYXQoMHg3NSAvKiB1ICovKSkge1xuICAgICAgaWYgKHRoaXMucmVnZXhwX2VhdEZpeGVkSGV4RGlnaXRzKHN0YXRlLCA0KSkge1xuICAgICAgICB2YXIgbGVhZCA9IHN0YXRlLmxhc3RJbnRWYWx1ZTtcbiAgICAgICAgaWYgKHN3aXRjaFUgJiYgbGVhZCA+PSAweEQ4MDAgJiYgbGVhZCA8PSAweERCRkYpIHtcbiAgICAgICAgICB2YXIgbGVhZFN1cnJvZ2F0ZUVuZCA9IHN0YXRlLnBvcztcbiAgICAgICAgICBpZiAoc3RhdGUuZWF0KDB4NUMgLyogXFwgKi8pICYmIHN0YXRlLmVhdCgweDc1IC8qIHUgKi8pICYmIHRoaXMucmVnZXhwX2VhdEZpeGVkSGV4RGlnaXRzKHN0YXRlLCA0KSkge1xuICAgICAgICAgICAgdmFyIHRyYWlsID0gc3RhdGUubGFzdEludFZhbHVlO1xuICAgICAgICAgICAgaWYgKHRyYWlsID49IDB4REMwMCAmJiB0cmFpbCA8PSAweERGRkYpIHtcbiAgICAgICAgICAgICAgc3RhdGUubGFzdEludFZhbHVlID0gKGxlYWQgLSAweEQ4MDApICogMHg0MDAgKyAodHJhaWwgLSAweERDMDApICsgMHgxMDAwMDtcbiAgICAgICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgc3RhdGUucG9zID0gbGVhZFN1cnJvZ2F0ZUVuZDtcbiAgICAgICAgICBzdGF0ZS5sYXN0SW50VmFsdWUgPSBsZWFkO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgICB9XG4gICAgICBpZiAoXG4gICAgICAgIHN3aXRjaFUgJiZcbiAgICAgICAgc3RhdGUuZWF0KDB4N0IgLyogeyAqLykgJiZcbiAgICAgICAgdGhpcy5yZWdleHBfZWF0SGV4RGlnaXRzKHN0YXRlKSAmJlxuICAgICAgICBzdGF0ZS5lYXQoMHg3RCAvKiB9ICovKSAmJlxuICAgICAgICBpc1ZhbGlkVW5pY29kZShzdGF0ZS5sYXN0SW50VmFsdWUpXG4gICAgICApIHtcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH1cbiAgICAgIGlmIChzd2l0Y2hVKSB7XG4gICAgICAgIHN0YXRlLnJhaXNlKFwiSW52YWxpZCB1bmljb2RlIGVzY2FwZVwiKTtcbiAgICAgIH1cbiAgICAgIHN0YXRlLnBvcyA9IHN0YXJ0O1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZVxuICB9O1xuICBmdW5jdGlvbiBpc1ZhbGlkVW5pY29kZShjaCkge1xuICAgIHJldHVybiBjaCA+PSAwICYmIGNoIDw9IDB4MTBGRkZGXG4gIH1cblxuICAvLyBodHRwczovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzguMC8jcHJvZC1hbm5leEItSWRlbnRpdHlFc2NhcGVcbiAgcHAkOC5yZWdleHBfZWF0SWRlbnRpdHlFc2NhcGUgPSBmdW5jdGlvbihzdGF0ZSkge1xuICAgIGlmIChzdGF0ZS5zd2l0Y2hVKSB7XG4gICAgICBpZiAodGhpcy5yZWdleHBfZWF0U3ludGF4Q2hhcmFjdGVyKHN0YXRlKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgfVxuICAgICAgaWYgKHN0YXRlLmVhdCgweDJGIC8qIC8gKi8pKSB7XG4gICAgICAgIHN0YXRlLmxhc3RJbnRWYWx1ZSA9IDB4MkY7IC8qIC8gKi9cbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cblxuICAgIHZhciBjaCA9IHN0YXRlLmN1cnJlbnQoKTtcbiAgICBpZiAoY2ggIT09IDB4NjMgLyogYyAqLyAmJiAoIXN0YXRlLnN3aXRjaE4gfHwgY2ggIT09IDB4NkIgLyogayAqLykpIHtcbiAgICAgIHN0YXRlLmxhc3RJbnRWYWx1ZSA9IGNoO1xuICAgICAgc3RhdGUuYWR2YW5jZSgpO1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2VcbiAgfTtcblxuICAvLyBodHRwczovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzguMC8jcHJvZC1EZWNpbWFsRXNjYXBlXG4gIHBwJDgucmVnZXhwX2VhdERlY2ltYWxFc2NhcGUgPSBmdW5jdGlvbihzdGF0ZSkge1xuICAgIHN0YXRlLmxhc3RJbnRWYWx1ZSA9IDA7XG4gICAgdmFyIGNoID0gc3RhdGUuY3VycmVudCgpO1xuICAgIGlmIChjaCA+PSAweDMxIC8qIDEgKi8gJiYgY2ggPD0gMHgzOSAvKiA5ICovKSB7XG4gICAgICBkbyB7XG4gICAgICAgIHN0YXRlLmxhc3RJbnRWYWx1ZSA9IDEwICogc3RhdGUubGFzdEludFZhbHVlICsgKGNoIC0gMHgzMCAvKiAwICovKTtcbiAgICAgICAgc3RhdGUuYWR2YW5jZSgpO1xuICAgICAgfSB3aGlsZSAoKGNoID0gc3RhdGUuY3VycmVudCgpKSA+PSAweDMwIC8qIDAgKi8gJiYgY2ggPD0gMHgzOSAvKiA5ICovKVxuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlXG4gIH07XG5cbiAgLy8gaHR0cHM6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi84LjAvI3Byb2QtQ2hhcmFjdGVyQ2xhc3NFc2NhcGVcbiAgcHAkOC5yZWdleHBfZWF0Q2hhcmFjdGVyQ2xhc3NFc2NhcGUgPSBmdW5jdGlvbihzdGF0ZSkge1xuICAgIHZhciBjaCA9IHN0YXRlLmN1cnJlbnQoKTtcblxuICAgIGlmIChpc0NoYXJhY3RlckNsYXNzRXNjYXBlKGNoKSkge1xuICAgICAgc3RhdGUubGFzdEludFZhbHVlID0gLTE7XG4gICAgICBzdGF0ZS5hZHZhbmNlKCk7XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cblxuICAgIGlmIChcbiAgICAgIHN0YXRlLnN3aXRjaFUgJiZcbiAgICAgIHRoaXMub3B0aW9ucy5lY21hVmVyc2lvbiA+PSA5ICYmXG4gICAgICAoY2ggPT09IDB4NTAgLyogUCAqLyB8fCBjaCA9PT0gMHg3MCAvKiBwICovKVxuICAgICkge1xuICAgICAgc3RhdGUubGFzdEludFZhbHVlID0gLTE7XG4gICAgICBzdGF0ZS5hZHZhbmNlKCk7XG4gICAgICBpZiAoXG4gICAgICAgIHN0YXRlLmVhdCgweDdCIC8qIHsgKi8pICYmXG4gICAgICAgIHRoaXMucmVnZXhwX2VhdFVuaWNvZGVQcm9wZXJ0eVZhbHVlRXhwcmVzc2lvbihzdGF0ZSkgJiZcbiAgICAgICAgc3RhdGUuZWF0KDB4N0QgLyogfSAqLylcbiAgICAgICkge1xuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgfVxuICAgICAgc3RhdGUucmFpc2UoXCJJbnZhbGlkIHByb3BlcnR5IG5hbWVcIik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlXG4gIH07XG4gIGZ1bmN0aW9uIGlzQ2hhcmFjdGVyQ2xhc3NFc2NhcGUoY2gpIHtcbiAgICByZXR1cm4gKFxuICAgICAgY2ggPT09IDB4NjQgLyogZCAqLyB8fFxuICAgICAgY2ggPT09IDB4NDQgLyogRCAqLyB8fFxuICAgICAgY2ggPT09IDB4NzMgLyogcyAqLyB8fFxuICAgICAgY2ggPT09IDB4NTMgLyogUyAqLyB8fFxuICAgICAgY2ggPT09IDB4NzcgLyogdyAqLyB8fFxuICAgICAgY2ggPT09IDB4NTcgLyogVyAqL1xuICAgIClcbiAgfVxuXG4gIC8vIFVuaWNvZGVQcm9wZXJ0eVZhbHVlRXhwcmVzc2lvbiA6OlxuICAvLyAgIFVuaWNvZGVQcm9wZXJ0eU5hbWUgYD1gIFVuaWNvZGVQcm9wZXJ0eVZhbHVlXG4gIC8vICAgTG9uZVVuaWNvZGVQcm9wZXJ0eU5hbWVPclZhbHVlXG4gIHBwJDgucmVnZXhwX2VhdFVuaWNvZGVQcm9wZXJ0eVZhbHVlRXhwcmVzc2lvbiA9IGZ1bmN0aW9uKHN0YXRlKSB7XG4gICAgdmFyIHN0YXJ0ID0gc3RhdGUucG9zO1xuXG4gICAgLy8gVW5pY29kZVByb3BlcnR5TmFtZSBgPWAgVW5pY29kZVByb3BlcnR5VmFsdWVcbiAgICBpZiAodGhpcy5yZWdleHBfZWF0VW5pY29kZVByb3BlcnR5TmFtZShzdGF0ZSkgJiYgc3RhdGUuZWF0KDB4M0QgLyogPSAqLykpIHtcbiAgICAgIHZhciBuYW1lID0gc3RhdGUubGFzdFN0cmluZ1ZhbHVlO1xuICAgICAgaWYgKHRoaXMucmVnZXhwX2VhdFVuaWNvZGVQcm9wZXJ0eVZhbHVlKHN0YXRlKSkge1xuICAgICAgICB2YXIgdmFsdWUgPSBzdGF0ZS5sYXN0U3RyaW5nVmFsdWU7XG4gICAgICAgIHRoaXMucmVnZXhwX3ZhbGlkYXRlVW5pY29kZVByb3BlcnR5TmFtZUFuZFZhbHVlKHN0YXRlLCBuYW1lLCB2YWx1ZSk7XG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgICB9XG4gICAgfVxuICAgIHN0YXRlLnBvcyA9IHN0YXJ0O1xuXG4gICAgLy8gTG9uZVVuaWNvZGVQcm9wZXJ0eU5hbWVPclZhbHVlXG4gICAgaWYgKHRoaXMucmVnZXhwX2VhdExvbmVVbmljb2RlUHJvcGVydHlOYW1lT3JWYWx1ZShzdGF0ZSkpIHtcbiAgICAgIHZhciBuYW1lT3JWYWx1ZSA9IHN0YXRlLmxhc3RTdHJpbmdWYWx1ZTtcbiAgICAgIHRoaXMucmVnZXhwX3ZhbGlkYXRlVW5pY29kZVByb3BlcnR5TmFtZU9yVmFsdWUoc3RhdGUsIG5hbWVPclZhbHVlKTtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICAgIHJldHVybiBmYWxzZVxuICB9O1xuICBwcCQ4LnJlZ2V4cF92YWxpZGF0ZVVuaWNvZGVQcm9wZXJ0eU5hbWVBbmRWYWx1ZSA9IGZ1bmN0aW9uKHN0YXRlLCBuYW1lLCB2YWx1ZSkge1xuICAgIGlmICghaGFzKHN0YXRlLnVuaWNvZGVQcm9wZXJ0aWVzLm5vbkJpbmFyeSwgbmFtZSkpXG4gICAgICB7IHN0YXRlLnJhaXNlKFwiSW52YWxpZCBwcm9wZXJ0eSBuYW1lXCIpOyB9XG4gICAgaWYgKCFzdGF0ZS51bmljb2RlUHJvcGVydGllcy5ub25CaW5hcnlbbmFtZV0udGVzdCh2YWx1ZSkpXG4gICAgICB7IHN0YXRlLnJhaXNlKFwiSW52YWxpZCBwcm9wZXJ0eSB2YWx1ZVwiKTsgfVxuICB9O1xuICBwcCQ4LnJlZ2V4cF92YWxpZGF0ZVVuaWNvZGVQcm9wZXJ0eU5hbWVPclZhbHVlID0gZnVuY3Rpb24oc3RhdGUsIG5hbWVPclZhbHVlKSB7XG4gICAgaWYgKCFzdGF0ZS51bmljb2RlUHJvcGVydGllcy5iaW5hcnkudGVzdChuYW1lT3JWYWx1ZSkpXG4gICAgICB7IHN0YXRlLnJhaXNlKFwiSW52YWxpZCBwcm9wZXJ0eSBuYW1lXCIpOyB9XG4gIH07XG5cbiAgLy8gVW5pY29kZVByb3BlcnR5TmFtZSA6OlxuICAvLyAgIFVuaWNvZGVQcm9wZXJ0eU5hbWVDaGFyYWN0ZXJzXG4gIHBwJDgucmVnZXhwX2VhdFVuaWNvZGVQcm9wZXJ0eU5hbWUgPSBmdW5jdGlvbihzdGF0ZSkge1xuICAgIHZhciBjaCA9IDA7XG4gICAgc3RhdGUubGFzdFN0cmluZ1ZhbHVlID0gXCJcIjtcbiAgICB3aGlsZSAoaXNVbmljb2RlUHJvcGVydHlOYW1lQ2hhcmFjdGVyKGNoID0gc3RhdGUuY3VycmVudCgpKSkge1xuICAgICAgc3RhdGUubGFzdFN0cmluZ1ZhbHVlICs9IGNvZGVQb2ludFRvU3RyaW5nKGNoKTtcbiAgICAgIHN0YXRlLmFkdmFuY2UoKTtcbiAgICB9XG4gICAgcmV0dXJuIHN0YXRlLmxhc3RTdHJpbmdWYWx1ZSAhPT0gXCJcIlxuICB9O1xuICBmdW5jdGlvbiBpc1VuaWNvZGVQcm9wZXJ0eU5hbWVDaGFyYWN0ZXIoY2gpIHtcbiAgICByZXR1cm4gaXNDb250cm9sTGV0dGVyKGNoKSB8fCBjaCA9PT0gMHg1RiAvKiBfICovXG4gIH1cblxuICAvLyBVbmljb2RlUHJvcGVydHlWYWx1ZSA6OlxuICAvLyAgIFVuaWNvZGVQcm9wZXJ0eVZhbHVlQ2hhcmFjdGVyc1xuICBwcCQ4LnJlZ2V4cF9lYXRVbmljb2RlUHJvcGVydHlWYWx1ZSA9IGZ1bmN0aW9uKHN0YXRlKSB7XG4gICAgdmFyIGNoID0gMDtcbiAgICBzdGF0ZS5sYXN0U3RyaW5nVmFsdWUgPSBcIlwiO1xuICAgIHdoaWxlIChpc1VuaWNvZGVQcm9wZXJ0eVZhbHVlQ2hhcmFjdGVyKGNoID0gc3RhdGUuY3VycmVudCgpKSkge1xuICAgICAgc3RhdGUubGFzdFN0cmluZ1ZhbHVlICs9IGNvZGVQb2ludFRvU3RyaW5nKGNoKTtcbiAgICAgIHN0YXRlLmFkdmFuY2UoKTtcbiAgICB9XG4gICAgcmV0dXJuIHN0YXRlLmxhc3RTdHJpbmdWYWx1ZSAhPT0gXCJcIlxuICB9O1xuICBmdW5jdGlvbiBpc1VuaWNvZGVQcm9wZXJ0eVZhbHVlQ2hhcmFjdGVyKGNoKSB7XG4gICAgcmV0dXJuIGlzVW5pY29kZVByb3BlcnR5TmFtZUNoYXJhY3RlcihjaCkgfHwgaXNEZWNpbWFsRGlnaXQoY2gpXG4gIH1cblxuICAvLyBMb25lVW5pY29kZVByb3BlcnR5TmFtZU9yVmFsdWUgOjpcbiAgLy8gICBVbmljb2RlUHJvcGVydHlWYWx1ZUNoYXJhY3RlcnNcbiAgcHAkOC5yZWdleHBfZWF0TG9uZVVuaWNvZGVQcm9wZXJ0eU5hbWVPclZhbHVlID0gZnVuY3Rpb24oc3RhdGUpIHtcbiAgICByZXR1cm4gdGhpcy5yZWdleHBfZWF0VW5pY29kZVByb3BlcnR5VmFsdWUoc3RhdGUpXG4gIH07XG5cbiAgLy8gaHR0cHM6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi84LjAvI3Byb2QtQ2hhcmFjdGVyQ2xhc3NcbiAgcHAkOC5yZWdleHBfZWF0Q2hhcmFjdGVyQ2xhc3MgPSBmdW5jdGlvbihzdGF0ZSkge1xuICAgIGlmIChzdGF0ZS5lYXQoMHg1QiAvKiBbICovKSkge1xuICAgICAgc3RhdGUuZWF0KDB4NUUgLyogXiAqLyk7XG4gICAgICB0aGlzLnJlZ2V4cF9jbGFzc1JhbmdlcyhzdGF0ZSk7XG4gICAgICBpZiAoc3RhdGUuZWF0KDB4NUQgLyogXSAqLykpIHtcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH1cbiAgICAgIC8vIFVucmVhY2hhYmxlIHNpbmNlIGl0IHRocmV3IFwidW50ZXJtaW5hdGVkIHJlZ3VsYXIgZXhwcmVzc2lvblwiIGVycm9yIGJlZm9yZS5cbiAgICAgIHN0YXRlLnJhaXNlKFwiVW50ZXJtaW5hdGVkIGNoYXJhY3RlciBjbGFzc1wiKTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlXG4gIH07XG5cbiAgLy8gaHR0cHM6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi84LjAvI3Byb2QtQ2xhc3NSYW5nZXNcbiAgLy8gaHR0cHM6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi84LjAvI3Byb2QtTm9uZW1wdHlDbGFzc1Jhbmdlc1xuICAvLyBodHRwczovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzguMC8jcHJvZC1Ob25lbXB0eUNsYXNzUmFuZ2VzTm9EYXNoXG4gIHBwJDgucmVnZXhwX2NsYXNzUmFuZ2VzID0gZnVuY3Rpb24oc3RhdGUpIHtcbiAgICB3aGlsZSAodGhpcy5yZWdleHBfZWF0Q2xhc3NBdG9tKHN0YXRlKSkge1xuICAgICAgdmFyIGxlZnQgPSBzdGF0ZS5sYXN0SW50VmFsdWU7XG4gICAgICBpZiAoc3RhdGUuZWF0KDB4MkQgLyogLSAqLykgJiYgdGhpcy5yZWdleHBfZWF0Q2xhc3NBdG9tKHN0YXRlKSkge1xuICAgICAgICB2YXIgcmlnaHQgPSBzdGF0ZS5sYXN0SW50VmFsdWU7XG4gICAgICAgIGlmIChzdGF0ZS5zd2l0Y2hVICYmIChsZWZ0ID09PSAtMSB8fCByaWdodCA9PT0gLTEpKSB7XG4gICAgICAgICAgc3RhdGUucmFpc2UoXCJJbnZhbGlkIGNoYXJhY3RlciBjbGFzc1wiKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobGVmdCAhPT0gLTEgJiYgcmlnaHQgIT09IC0xICYmIGxlZnQgPiByaWdodCkge1xuICAgICAgICAgIHN0YXRlLnJhaXNlKFwiUmFuZ2Ugb3V0IG9mIG9yZGVyIGluIGNoYXJhY3RlciBjbGFzc1wiKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICAvLyBodHRwczovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzguMC8jcHJvZC1DbGFzc0F0b21cbiAgLy8gaHR0cHM6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi84LjAvI3Byb2QtQ2xhc3NBdG9tTm9EYXNoXG4gIHBwJDgucmVnZXhwX2VhdENsYXNzQXRvbSA9IGZ1bmN0aW9uKHN0YXRlKSB7XG4gICAgdmFyIHN0YXJ0ID0gc3RhdGUucG9zO1xuXG4gICAgaWYgKHN0YXRlLmVhdCgweDVDIC8qIFxcICovKSkge1xuICAgICAgaWYgKHRoaXMucmVnZXhwX2VhdENsYXNzRXNjYXBlKHN0YXRlKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgfVxuICAgICAgaWYgKHN0YXRlLnN3aXRjaFUpIHtcbiAgICAgICAgLy8gTWFrZSB0aGUgc2FtZSBtZXNzYWdlIGFzIFY4LlxuICAgICAgICB2YXIgY2gkMSA9IHN0YXRlLmN1cnJlbnQoKTtcbiAgICAgICAgaWYgKGNoJDEgPT09IDB4NjMgLyogYyAqLyB8fCBpc09jdGFsRGlnaXQoY2gkMSkpIHtcbiAgICAgICAgICBzdGF0ZS5yYWlzZShcIkludmFsaWQgY2xhc3MgZXNjYXBlXCIpO1xuICAgICAgICB9XG4gICAgICAgIHN0YXRlLnJhaXNlKFwiSW52YWxpZCBlc2NhcGVcIik7XG4gICAgICB9XG4gICAgICBzdGF0ZS5wb3MgPSBzdGFydDtcbiAgICB9XG5cbiAgICB2YXIgY2ggPSBzdGF0ZS5jdXJyZW50KCk7XG4gICAgaWYgKGNoICE9PSAweDVEIC8qIF0gKi8pIHtcbiAgICAgIHN0YXRlLmxhc3RJbnRWYWx1ZSA9IGNoO1xuICAgICAgc3RhdGUuYWR2YW5jZSgpO1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2VcbiAgfTtcblxuICAvLyBodHRwczovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzguMC8jcHJvZC1hbm5leEItQ2xhc3NFc2NhcGVcbiAgcHAkOC5yZWdleHBfZWF0Q2xhc3NFc2NhcGUgPSBmdW5jdGlvbihzdGF0ZSkge1xuICAgIHZhciBzdGFydCA9IHN0YXRlLnBvcztcblxuICAgIGlmIChzdGF0ZS5lYXQoMHg2MiAvKiBiICovKSkge1xuICAgICAgc3RhdGUubGFzdEludFZhbHVlID0gMHgwODsgLyogPEJTPiAqL1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG5cbiAgICBpZiAoc3RhdGUuc3dpdGNoVSAmJiBzdGF0ZS5lYXQoMHgyRCAvKiAtICovKSkge1xuICAgICAgc3RhdGUubGFzdEludFZhbHVlID0gMHgyRDsgLyogLSAqL1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG5cbiAgICBpZiAoIXN0YXRlLnN3aXRjaFUgJiYgc3RhdGUuZWF0KDB4NjMgLyogYyAqLykpIHtcbiAgICAgIGlmICh0aGlzLnJlZ2V4cF9lYXRDbGFzc0NvbnRyb2xMZXR0ZXIoc3RhdGUpKSB7XG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgICB9XG4gICAgICBzdGF0ZS5wb3MgPSBzdGFydDtcbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgdGhpcy5yZWdleHBfZWF0Q2hhcmFjdGVyQ2xhc3NFc2NhcGUoc3RhdGUpIHx8XG4gICAgICB0aGlzLnJlZ2V4cF9lYXRDaGFyYWN0ZXJFc2NhcGUoc3RhdGUpXG4gICAgKVxuICB9O1xuXG4gIC8vIGh0dHBzOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvOC4wLyNwcm9kLWFubmV4Qi1DbGFzc0NvbnRyb2xMZXR0ZXJcbiAgcHAkOC5yZWdleHBfZWF0Q2xhc3NDb250cm9sTGV0dGVyID0gZnVuY3Rpb24oc3RhdGUpIHtcbiAgICB2YXIgY2ggPSBzdGF0ZS5jdXJyZW50KCk7XG4gICAgaWYgKGlzRGVjaW1hbERpZ2l0KGNoKSB8fCBjaCA9PT0gMHg1RiAvKiBfICovKSB7XG4gICAgICBzdGF0ZS5sYXN0SW50VmFsdWUgPSBjaCAlIDB4MjA7XG4gICAgICBzdGF0ZS5hZHZhbmNlKCk7XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2VcbiAgfTtcblxuICAvLyBodHRwczovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzguMC8jcHJvZC1IZXhFc2NhcGVTZXF1ZW5jZVxuICBwcCQ4LnJlZ2V4cF9lYXRIZXhFc2NhcGVTZXF1ZW5jZSA9IGZ1bmN0aW9uKHN0YXRlKSB7XG4gICAgdmFyIHN0YXJ0ID0gc3RhdGUucG9zO1xuICAgIGlmIChzdGF0ZS5lYXQoMHg3OCAvKiB4ICovKSkge1xuICAgICAgaWYgKHRoaXMucmVnZXhwX2VhdEZpeGVkSGV4RGlnaXRzKHN0YXRlLCAyKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgfVxuICAgICAgaWYgKHN0YXRlLnN3aXRjaFUpIHtcbiAgICAgICAgc3RhdGUucmFpc2UoXCJJbnZhbGlkIGVzY2FwZVwiKTtcbiAgICAgIH1cbiAgICAgIHN0YXRlLnBvcyA9IHN0YXJ0O1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2VcbiAgfTtcblxuICAvLyBodHRwczovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzguMC8jcHJvZC1EZWNpbWFsRGlnaXRzXG4gIHBwJDgucmVnZXhwX2VhdERlY2ltYWxEaWdpdHMgPSBmdW5jdGlvbihzdGF0ZSkge1xuICAgIHZhciBzdGFydCA9IHN0YXRlLnBvcztcbiAgICB2YXIgY2ggPSAwO1xuICAgIHN0YXRlLmxhc3RJbnRWYWx1ZSA9IDA7XG4gICAgd2hpbGUgKGlzRGVjaW1hbERpZ2l0KGNoID0gc3RhdGUuY3VycmVudCgpKSkge1xuICAgICAgc3RhdGUubGFzdEludFZhbHVlID0gMTAgKiBzdGF0ZS5sYXN0SW50VmFsdWUgKyAoY2ggLSAweDMwIC8qIDAgKi8pO1xuICAgICAgc3RhdGUuYWR2YW5jZSgpO1xuICAgIH1cbiAgICByZXR1cm4gc3RhdGUucG9zICE9PSBzdGFydFxuICB9O1xuICBmdW5jdGlvbiBpc0RlY2ltYWxEaWdpdChjaCkge1xuICAgIHJldHVybiBjaCA+PSAweDMwIC8qIDAgKi8gJiYgY2ggPD0gMHgzOSAvKiA5ICovXG4gIH1cblxuICAvLyBodHRwczovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzguMC8jcHJvZC1IZXhEaWdpdHNcbiAgcHAkOC5yZWdleHBfZWF0SGV4RGlnaXRzID0gZnVuY3Rpb24oc3RhdGUpIHtcbiAgICB2YXIgc3RhcnQgPSBzdGF0ZS5wb3M7XG4gICAgdmFyIGNoID0gMDtcbiAgICBzdGF0ZS5sYXN0SW50VmFsdWUgPSAwO1xuICAgIHdoaWxlIChpc0hleERpZ2l0KGNoID0gc3RhdGUuY3VycmVudCgpKSkge1xuICAgICAgc3RhdGUubGFzdEludFZhbHVlID0gMTYgKiBzdGF0ZS5sYXN0SW50VmFsdWUgKyBoZXhUb0ludChjaCk7XG4gICAgICBzdGF0ZS5hZHZhbmNlKCk7XG4gICAgfVxuICAgIHJldHVybiBzdGF0ZS5wb3MgIT09IHN0YXJ0XG4gIH07XG4gIGZ1bmN0aW9uIGlzSGV4RGlnaXQoY2gpIHtcbiAgICByZXR1cm4gKFxuICAgICAgKGNoID49IDB4MzAgLyogMCAqLyAmJiBjaCA8PSAweDM5IC8qIDkgKi8pIHx8XG4gICAgICAoY2ggPj0gMHg0MSAvKiBBICovICYmIGNoIDw9IDB4NDYgLyogRiAqLykgfHxcbiAgICAgIChjaCA+PSAweDYxIC8qIGEgKi8gJiYgY2ggPD0gMHg2NiAvKiBmICovKVxuICAgIClcbiAgfVxuICBmdW5jdGlvbiBoZXhUb0ludChjaCkge1xuICAgIGlmIChjaCA+PSAweDQxIC8qIEEgKi8gJiYgY2ggPD0gMHg0NiAvKiBGICovKSB7XG4gICAgICByZXR1cm4gMTAgKyAoY2ggLSAweDQxIC8qIEEgKi8pXG4gICAgfVxuICAgIGlmIChjaCA+PSAweDYxIC8qIGEgKi8gJiYgY2ggPD0gMHg2NiAvKiBmICovKSB7XG4gICAgICByZXR1cm4gMTAgKyAoY2ggLSAweDYxIC8qIGEgKi8pXG4gICAgfVxuICAgIHJldHVybiBjaCAtIDB4MzAgLyogMCAqL1xuICB9XG5cbiAgLy8gaHR0cHM6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi84LjAvI3Byb2QtYW5uZXhCLUxlZ2FjeU9jdGFsRXNjYXBlU2VxdWVuY2VcbiAgLy8gQWxsb3dzIG9ubHkgMC0zNzcob2N0YWwpIGkuZS4gMC0yNTUoZGVjaW1hbCkuXG4gIHBwJDgucmVnZXhwX2VhdExlZ2FjeU9jdGFsRXNjYXBlU2VxdWVuY2UgPSBmdW5jdGlvbihzdGF0ZSkge1xuICAgIGlmICh0aGlzLnJlZ2V4cF9lYXRPY3RhbERpZ2l0KHN0YXRlKSkge1xuICAgICAgdmFyIG4xID0gc3RhdGUubGFzdEludFZhbHVlO1xuICAgICAgaWYgKHRoaXMucmVnZXhwX2VhdE9jdGFsRGlnaXQoc3RhdGUpKSB7XG4gICAgICAgIHZhciBuMiA9IHN0YXRlLmxhc3RJbnRWYWx1ZTtcbiAgICAgICAgaWYgKG4xIDw9IDMgJiYgdGhpcy5yZWdleHBfZWF0T2N0YWxEaWdpdChzdGF0ZSkpIHtcbiAgICAgICAgICBzdGF0ZS5sYXN0SW50VmFsdWUgPSBuMSAqIDY0ICsgbjIgKiA4ICsgc3RhdGUubGFzdEludFZhbHVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN0YXRlLmxhc3RJbnRWYWx1ZSA9IG4xICogOCArIG4yO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdGF0ZS5sYXN0SW50VmFsdWUgPSBuMTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICAgIHJldHVybiBmYWxzZVxuICB9O1xuXG4gIC8vIGh0dHBzOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvOC4wLyNwcm9kLU9jdGFsRGlnaXRcbiAgcHAkOC5yZWdleHBfZWF0T2N0YWxEaWdpdCA9IGZ1bmN0aW9uKHN0YXRlKSB7XG4gICAgdmFyIGNoID0gc3RhdGUuY3VycmVudCgpO1xuICAgIGlmIChpc09jdGFsRGlnaXQoY2gpKSB7XG4gICAgICBzdGF0ZS5sYXN0SW50VmFsdWUgPSBjaCAtIDB4MzA7IC8qIDAgKi9cbiAgICAgIHN0YXRlLmFkdmFuY2UoKTtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICAgIHN0YXRlLmxhc3RJbnRWYWx1ZSA9IDA7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH07XG4gIGZ1bmN0aW9uIGlzT2N0YWxEaWdpdChjaCkge1xuICAgIHJldHVybiBjaCA+PSAweDMwIC8qIDAgKi8gJiYgY2ggPD0gMHgzNyAvKiA3ICovXG4gIH1cblxuICAvLyBodHRwczovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzguMC8jcHJvZC1IZXg0RGlnaXRzXG4gIC8vIGh0dHBzOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvOC4wLyNwcm9kLUhleERpZ2l0XG4gIC8vIEFuZCBIZXhEaWdpdCBIZXhEaWdpdCBpbiBodHRwczovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzguMC8jcHJvZC1IZXhFc2NhcGVTZXF1ZW5jZVxuICBwcCQ4LnJlZ2V4cF9lYXRGaXhlZEhleERpZ2l0cyA9IGZ1bmN0aW9uKHN0YXRlLCBsZW5ndGgpIHtcbiAgICB2YXIgc3RhcnQgPSBzdGF0ZS5wb3M7XG4gICAgc3RhdGUubGFzdEludFZhbHVlID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgICB2YXIgY2ggPSBzdGF0ZS5jdXJyZW50KCk7XG4gICAgICBpZiAoIWlzSGV4RGlnaXQoY2gpKSB7XG4gICAgICAgIHN0YXRlLnBvcyA9IHN0YXJ0O1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICAgIHN0YXRlLmxhc3RJbnRWYWx1ZSA9IDE2ICogc3RhdGUubGFzdEludFZhbHVlICsgaGV4VG9JbnQoY2gpO1xuICAgICAgc3RhdGUuYWR2YW5jZSgpO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZVxuICB9O1xuXG4gIC8vIE9iamVjdCB0eXBlIHVzZWQgdG8gcmVwcmVzZW50IHRva2Vucy4gTm90ZSB0aGF0IG5vcm1hbGx5LCB0b2tlbnNcbiAgLy8gc2ltcGx5IGV4aXN0IGFzIHByb3BlcnRpZXMgb24gdGhlIHBhcnNlciBvYmplY3QuIFRoaXMgaXMgb25seVxuICAvLyB1c2VkIGZvciB0aGUgb25Ub2tlbiBjYWxsYmFjayBhbmQgdGhlIGV4dGVybmFsIHRva2VuaXplci5cblxuICB2YXIgVG9rZW4gPSBmdW5jdGlvbiBUb2tlbihwKSB7XG4gICAgdGhpcy50eXBlID0gcC50eXBlO1xuICAgIHRoaXMudmFsdWUgPSBwLnZhbHVlO1xuICAgIHRoaXMuc3RhcnQgPSBwLnN0YXJ0O1xuICAgIHRoaXMuZW5kID0gcC5lbmQ7XG4gICAgaWYgKHAub3B0aW9ucy5sb2NhdGlvbnMpXG4gICAgICB7IHRoaXMubG9jID0gbmV3IFNvdXJjZUxvY2F0aW9uKHAsIHAuc3RhcnRMb2MsIHAuZW5kTG9jKTsgfVxuICAgIGlmIChwLm9wdGlvbnMucmFuZ2VzKVxuICAgICAgeyB0aGlzLnJhbmdlID0gW3Auc3RhcnQsIHAuZW5kXTsgfVxuICB9O1xuXG4gIC8vICMjIFRva2VuaXplclxuXG4gIHZhciBwcCQ5ID0gUGFyc2VyLnByb3RvdHlwZTtcblxuICAvLyBNb3ZlIHRvIHRoZSBuZXh0IHRva2VuXG5cbiAgcHAkOS5uZXh0ID0gZnVuY3Rpb24oaWdub3JlRXNjYXBlU2VxdWVuY2VJbktleXdvcmQpIHtcbiAgICBpZiAoIWlnbm9yZUVzY2FwZVNlcXVlbmNlSW5LZXl3b3JkICYmIHRoaXMudHlwZS5rZXl3b3JkICYmIHRoaXMuY29udGFpbnNFc2MpXG4gICAgICB7IHRoaXMucmFpc2VSZWNvdmVyYWJsZSh0aGlzLnN0YXJ0LCBcIkVzY2FwZSBzZXF1ZW5jZSBpbiBrZXl3b3JkIFwiICsgdGhpcy50eXBlLmtleXdvcmQpOyB9XG4gICAgaWYgKHRoaXMub3B0aW9ucy5vblRva2VuKVxuICAgICAgeyB0aGlzLm9wdGlvbnMub25Ub2tlbihuZXcgVG9rZW4odGhpcykpOyB9XG5cbiAgICB0aGlzLmxhc3RUb2tFbmQgPSB0aGlzLmVuZDtcbiAgICB0aGlzLmxhc3RUb2tTdGFydCA9IHRoaXMuc3RhcnQ7XG4gICAgdGhpcy5sYXN0VG9rRW5kTG9jID0gdGhpcy5lbmRMb2M7XG4gICAgdGhpcy5sYXN0VG9rU3RhcnRMb2MgPSB0aGlzLnN0YXJ0TG9jO1xuICAgIHRoaXMubmV4dFRva2VuKCk7XG4gIH07XG5cbiAgcHAkOS5nZXRUb2tlbiA9IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMubmV4dCgpO1xuICAgIHJldHVybiBuZXcgVG9rZW4odGhpcylcbiAgfTtcblxuICAvLyBJZiB3ZSdyZSBpbiBhbiBFUzYgZW52aXJvbm1lbnQsIG1ha2UgcGFyc2VycyBpdGVyYWJsZVxuICBpZiAodHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIilcbiAgICB7IHBwJDlbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIG5leHQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB2YXIgdG9rZW4gPSB0aGlzJDEuZ2V0VG9rZW4oKTtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZG9uZTogdG9rZW4udHlwZSA9PT0gdHlwZXMuZW9mLFxuICAgICAgICAgICAgdmFsdWU6IHRva2VuXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfTsgfVxuXG4gIC8vIFRvZ2dsZSBzdHJpY3QgbW9kZS4gUmUtcmVhZHMgdGhlIG5leHQgbnVtYmVyIG9yIHN0cmluZyB0byBwbGVhc2VcbiAgLy8gcGVkYW50aWMgdGVzdHMgKGBcInVzZSBzdHJpY3RcIjsgMDEwO2Agc2hvdWxkIGZhaWwpLlxuXG4gIHBwJDkuY3VyQ29udGV4dCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLmNvbnRleHRbdGhpcy5jb250ZXh0Lmxlbmd0aCAtIDFdXG4gIH07XG5cbiAgLy8gUmVhZCBhIHNpbmdsZSB0b2tlbiwgdXBkYXRpbmcgdGhlIHBhcnNlciBvYmplY3QncyB0b2tlbi1yZWxhdGVkXG4gIC8vIHByb3BlcnRpZXMuXG5cbiAgcHAkOS5uZXh0VG9rZW4gPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgY3VyQ29udGV4dCA9IHRoaXMuY3VyQ29udGV4dCgpO1xuICAgIGlmICghY3VyQ29udGV4dCB8fCAhY3VyQ29udGV4dC5wcmVzZXJ2ZVNwYWNlKSB7IHRoaXMuc2tpcFNwYWNlKCk7IH1cblxuICAgIHRoaXMuc3RhcnQgPSB0aGlzLnBvcztcbiAgICBpZiAodGhpcy5vcHRpb25zLmxvY2F0aW9ucykgeyB0aGlzLnN0YXJ0TG9jID0gdGhpcy5jdXJQb3NpdGlvbigpOyB9XG4gICAgaWYgKHRoaXMucG9zID49IHRoaXMuaW5wdXQubGVuZ3RoKSB7IHJldHVybiB0aGlzLmZpbmlzaFRva2VuKHR5cGVzLmVvZikgfVxuXG4gICAgaWYgKGN1ckNvbnRleHQub3ZlcnJpZGUpIHsgcmV0dXJuIGN1ckNvbnRleHQub3ZlcnJpZGUodGhpcykgfVxuICAgIGVsc2UgeyB0aGlzLnJlYWRUb2tlbih0aGlzLmZ1bGxDaGFyQ29kZUF0UG9zKCkpOyB9XG4gIH07XG5cbiAgcHAkOS5yZWFkVG9rZW4gPSBmdW5jdGlvbihjb2RlKSB7XG4gICAgLy8gSWRlbnRpZmllciBvciBrZXl3b3JkLiAnXFx1WFhYWCcgc2VxdWVuY2VzIGFyZSBhbGxvd2VkIGluXG4gICAgLy8gaWRlbnRpZmllcnMsIHNvICdcXCcgYWxzbyBkaXNwYXRjaGVzIHRvIHRoYXQuXG4gICAgaWYgKGlzSWRlbnRpZmllclN0YXJ0KGNvZGUsIHRoaXMub3B0aW9ucy5lY21hVmVyc2lvbiA+PSA2KSB8fCBjb2RlID09PSA5MiAvKiAnXFwnICovKVxuICAgICAgeyByZXR1cm4gdGhpcy5yZWFkV29yZCgpIH1cblxuICAgIHJldHVybiB0aGlzLmdldFRva2VuRnJvbUNvZGUoY29kZSlcbiAgfTtcblxuICBwcCQ5LmZ1bGxDaGFyQ29kZUF0UG9zID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGNvZGUgPSB0aGlzLmlucHV0LmNoYXJDb2RlQXQodGhpcy5wb3MpO1xuICAgIGlmIChjb2RlIDw9IDB4ZDdmZiB8fCBjb2RlID49IDB4ZGMwMCkgeyByZXR1cm4gY29kZSB9XG4gICAgdmFyIG5leHQgPSB0aGlzLmlucHV0LmNoYXJDb2RlQXQodGhpcy5wb3MgKyAxKTtcbiAgICByZXR1cm4gbmV4dCA8PSAweGRiZmYgfHwgbmV4dCA+PSAweGUwMDAgPyBjb2RlIDogKGNvZGUgPDwgMTApICsgbmV4dCAtIDB4MzVmZGMwMFxuICB9O1xuXG4gIHBwJDkuc2tpcEJsb2NrQ29tbWVudCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBzdGFydExvYyA9IHRoaXMub3B0aW9ucy5vbkNvbW1lbnQgJiYgdGhpcy5jdXJQb3NpdGlvbigpO1xuICAgIHZhciBzdGFydCA9IHRoaXMucG9zLCBlbmQgPSB0aGlzLmlucHV0LmluZGV4T2YoXCIqL1wiLCB0aGlzLnBvcyArPSAyKTtcbiAgICBpZiAoZW5kID09PSAtMSkgeyB0aGlzLnJhaXNlKHRoaXMucG9zIC0gMiwgXCJVbnRlcm1pbmF0ZWQgY29tbWVudFwiKTsgfVxuICAgIHRoaXMucG9zID0gZW5kICsgMjtcbiAgICBpZiAodGhpcy5vcHRpb25zLmxvY2F0aW9ucykge1xuICAgICAgbGluZUJyZWFrRy5sYXN0SW5kZXggPSBzdGFydDtcbiAgICAgIHZhciBtYXRjaDtcbiAgICAgIHdoaWxlICgobWF0Y2ggPSBsaW5lQnJlYWtHLmV4ZWModGhpcy5pbnB1dCkpICYmIG1hdGNoLmluZGV4IDwgdGhpcy5wb3MpIHtcbiAgICAgICAgKyt0aGlzLmN1ckxpbmU7XG4gICAgICAgIHRoaXMubGluZVN0YXJ0ID0gbWF0Y2guaW5kZXggKyBtYXRjaFswXS5sZW5ndGg7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICh0aGlzLm9wdGlvbnMub25Db21tZW50KVxuICAgICAgeyB0aGlzLm9wdGlvbnMub25Db21tZW50KHRydWUsIHRoaXMuaW5wdXQuc2xpY2Uoc3RhcnQgKyAyLCBlbmQpLCBzdGFydCwgdGhpcy5wb3MsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0TG9jLCB0aGlzLmN1clBvc2l0aW9uKCkpOyB9XG4gIH07XG5cbiAgcHAkOS5za2lwTGluZUNvbW1lbnQgPSBmdW5jdGlvbihzdGFydFNraXApIHtcbiAgICB2YXIgc3RhcnQgPSB0aGlzLnBvcztcbiAgICB2YXIgc3RhcnRMb2MgPSB0aGlzLm9wdGlvbnMub25Db21tZW50ICYmIHRoaXMuY3VyUG9zaXRpb24oKTtcbiAgICB2YXIgY2ggPSB0aGlzLmlucHV0LmNoYXJDb2RlQXQodGhpcy5wb3MgKz0gc3RhcnRTa2lwKTtcbiAgICB3aGlsZSAodGhpcy5wb3MgPCB0aGlzLmlucHV0Lmxlbmd0aCAmJiAhaXNOZXdMaW5lKGNoKSkge1xuICAgICAgY2ggPSB0aGlzLmlucHV0LmNoYXJDb2RlQXQoKyt0aGlzLnBvcyk7XG4gICAgfVxuICAgIGlmICh0aGlzLm9wdGlvbnMub25Db21tZW50KVxuICAgICAgeyB0aGlzLm9wdGlvbnMub25Db21tZW50KGZhbHNlLCB0aGlzLmlucHV0LnNsaWNlKHN0YXJ0ICsgc3RhcnRTa2lwLCB0aGlzLnBvcyksIHN0YXJ0LCB0aGlzLnBvcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRMb2MsIHRoaXMuY3VyUG9zaXRpb24oKSk7IH1cbiAgfTtcblxuICAvLyBDYWxsZWQgYXQgdGhlIHN0YXJ0IG9mIHRoZSBwYXJzZSBhbmQgYWZ0ZXIgZXZlcnkgdG9rZW4uIFNraXBzXG4gIC8vIHdoaXRlc3BhY2UgYW5kIGNvbW1lbnRzLCBhbmQuXG5cbiAgcHAkOS5za2lwU3BhY2UgPSBmdW5jdGlvbigpIHtcbiAgICBsb29wOiB3aGlsZSAodGhpcy5wb3MgPCB0aGlzLmlucHV0Lmxlbmd0aCkge1xuICAgICAgdmFyIGNoID0gdGhpcy5pbnB1dC5jaGFyQ29kZUF0KHRoaXMucG9zKTtcbiAgICAgIHN3aXRjaCAoY2gpIHtcbiAgICAgIGNhc2UgMzI6IGNhc2UgMTYwOiAvLyAnICdcbiAgICAgICAgKyt0aGlzLnBvcztcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgMTM6XG4gICAgICAgIGlmICh0aGlzLmlucHV0LmNoYXJDb2RlQXQodGhpcy5wb3MgKyAxKSA9PT0gMTApIHtcbiAgICAgICAgICArK3RoaXMucG9zO1xuICAgICAgICB9XG4gICAgICBjYXNlIDEwOiBjYXNlIDgyMzI6IGNhc2UgODIzMzpcbiAgICAgICAgKyt0aGlzLnBvcztcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5sb2NhdGlvbnMpIHtcbiAgICAgICAgICArK3RoaXMuY3VyTGluZTtcbiAgICAgICAgICB0aGlzLmxpbmVTdGFydCA9IHRoaXMucG9zO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlIDQ3OiAvLyAnLydcbiAgICAgICAgc3dpdGNoICh0aGlzLmlucHV0LmNoYXJDb2RlQXQodGhpcy5wb3MgKyAxKSkge1xuICAgICAgICBjYXNlIDQyOiAvLyAnKidcbiAgICAgICAgICB0aGlzLnNraXBCbG9ja0NvbW1lbnQoKTtcbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDQ3OlxuICAgICAgICAgIHRoaXMuc2tpcExpbmVDb21tZW50KDIpO1xuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgYnJlYWsgbG9vcFxuICAgICAgICB9XG4gICAgICAgIGJyZWFrXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAoY2ggPiA4ICYmIGNoIDwgMTQgfHwgY2ggPj0gNTc2MCAmJiBub25BU0NJSXdoaXRlc3BhY2UudGVzdChTdHJpbmcuZnJvbUNoYXJDb2RlKGNoKSkpIHtcbiAgICAgICAgICArK3RoaXMucG9zO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGJyZWFrIGxvb3BcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICAvLyBDYWxsZWQgYXQgdGhlIGVuZCBvZiBldmVyeSB0b2tlbi4gU2V0cyBgZW5kYCwgYHZhbGAsIGFuZFxuICAvLyBtYWludGFpbnMgYGNvbnRleHRgIGFuZCBgZXhwckFsbG93ZWRgLCBhbmQgc2tpcHMgdGhlIHNwYWNlIGFmdGVyXG4gIC8vIHRoZSB0b2tlbiwgc28gdGhhdCB0aGUgbmV4dCBvbmUncyBgc3RhcnRgIHdpbGwgcG9pbnQgYXQgdGhlXG4gIC8vIHJpZ2h0IHBvc2l0aW9uLlxuXG4gIHBwJDkuZmluaXNoVG9rZW4gPSBmdW5jdGlvbih0eXBlLCB2YWwpIHtcbiAgICB0aGlzLmVuZCA9IHRoaXMucG9zO1xuICAgIGlmICh0aGlzLm9wdGlvbnMubG9jYXRpb25zKSB7IHRoaXMuZW5kTG9jID0gdGhpcy5jdXJQb3NpdGlvbigpOyB9XG4gICAgdmFyIHByZXZUeXBlID0gdGhpcy50eXBlO1xuICAgIHRoaXMudHlwZSA9IHR5cGU7XG4gICAgdGhpcy52YWx1ZSA9IHZhbDtcblxuICAgIHRoaXMudXBkYXRlQ29udGV4dChwcmV2VHlwZSk7XG4gIH07XG5cbiAgLy8gIyMjIFRva2VuIHJlYWRpbmdcblxuICAvLyBUaGlzIGlzIHRoZSBmdW5jdGlvbiB0aGF0IGlzIGNhbGxlZCB0byBmZXRjaCB0aGUgbmV4dCB0b2tlbi4gSXRcbiAgLy8gaXMgc29tZXdoYXQgb2JzY3VyZSwgYmVjYXVzZSBpdCB3b3JrcyBpbiBjaGFyYWN0ZXIgY29kZXMgcmF0aGVyXG4gIC8vIHRoYW4gY2hhcmFjdGVycywgYW5kIGJlY2F1c2Ugb3BlcmF0b3IgcGFyc2luZyBoYXMgYmVlbiBpbmxpbmVkXG4gIC8vIGludG8gaXQuXG4gIC8vXG4gIC8vIEFsbCBpbiB0aGUgbmFtZSBvZiBzcGVlZC5cbiAgLy9cbiAgcHAkOS5yZWFkVG9rZW5fZG90ID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIG5leHQgPSB0aGlzLmlucHV0LmNoYXJDb2RlQXQodGhpcy5wb3MgKyAxKTtcbiAgICBpZiAobmV4dCA+PSA0OCAmJiBuZXh0IDw9IDU3KSB7IHJldHVybiB0aGlzLnJlYWROdW1iZXIodHJ1ZSkgfVxuICAgIHZhciBuZXh0MiA9IHRoaXMuaW5wdXQuY2hhckNvZGVBdCh0aGlzLnBvcyArIDIpO1xuICAgIGlmICh0aGlzLm9wdGlvbnMuZWNtYVZlcnNpb24gPj0gNiAmJiBuZXh0ID09PSA0NiAmJiBuZXh0MiA9PT0gNDYpIHsgLy8gNDYgPSBkb3QgJy4nXG4gICAgICB0aGlzLnBvcyArPSAzO1xuICAgICAgcmV0dXJuIHRoaXMuZmluaXNoVG9rZW4odHlwZXMuZWxsaXBzaXMpXG4gICAgfSBlbHNlIHtcbiAgICAgICsrdGhpcy5wb3M7XG4gICAgICByZXR1cm4gdGhpcy5maW5pc2hUb2tlbih0eXBlcy5kb3QpXG4gICAgfVxuICB9O1xuXG4gIHBwJDkucmVhZFRva2VuX3NsYXNoID0gZnVuY3Rpb24oKSB7IC8vICcvJ1xuICAgIHZhciBuZXh0ID0gdGhpcy5pbnB1dC5jaGFyQ29kZUF0KHRoaXMucG9zICsgMSk7XG4gICAgaWYgKHRoaXMuZXhwckFsbG93ZWQpIHsgKyt0aGlzLnBvczsgcmV0dXJuIHRoaXMucmVhZFJlZ2V4cCgpIH1cbiAgICBpZiAobmV4dCA9PT0gNjEpIHsgcmV0dXJuIHRoaXMuZmluaXNoT3AodHlwZXMuYXNzaWduLCAyKSB9XG4gICAgcmV0dXJuIHRoaXMuZmluaXNoT3AodHlwZXMuc2xhc2gsIDEpXG4gIH07XG5cbiAgcHAkOS5yZWFkVG9rZW5fbXVsdF9tb2R1bG9fZXhwID0gZnVuY3Rpb24oY29kZSkgeyAvLyAnJSonXG4gICAgdmFyIG5leHQgPSB0aGlzLmlucHV0LmNoYXJDb2RlQXQodGhpcy5wb3MgKyAxKTtcbiAgICB2YXIgc2l6ZSA9IDE7XG4gICAgdmFyIHRva2VudHlwZSA9IGNvZGUgPT09IDQyID8gdHlwZXMuc3RhciA6IHR5cGVzLm1vZHVsbztcblxuICAgIC8vIGV4cG9uZW50aWF0aW9uIG9wZXJhdG9yICoqIGFuZCAqKj1cbiAgICBpZiAodGhpcy5vcHRpb25zLmVjbWFWZXJzaW9uID49IDcgJiYgY29kZSA9PT0gNDIgJiYgbmV4dCA9PT0gNDIpIHtcbiAgICAgICsrc2l6ZTtcbiAgICAgIHRva2VudHlwZSA9IHR5cGVzLnN0YXJzdGFyO1xuICAgICAgbmV4dCA9IHRoaXMuaW5wdXQuY2hhckNvZGVBdCh0aGlzLnBvcyArIDIpO1xuICAgIH1cblxuICAgIGlmIChuZXh0ID09PSA2MSkgeyByZXR1cm4gdGhpcy5maW5pc2hPcCh0eXBlcy5hc3NpZ24sIHNpemUgKyAxKSB9XG4gICAgcmV0dXJuIHRoaXMuZmluaXNoT3AodG9rZW50eXBlLCBzaXplKVxuICB9O1xuXG4gIHBwJDkucmVhZFRva2VuX3BpcGVfYW1wID0gZnVuY3Rpb24oY29kZSkgeyAvLyAnfCYnXG4gICAgdmFyIG5leHQgPSB0aGlzLmlucHV0LmNoYXJDb2RlQXQodGhpcy5wb3MgKyAxKTtcbiAgICBpZiAobmV4dCA9PT0gY29kZSkge1xuICAgICAgaWYgKHRoaXMub3B0aW9ucy5lY21hVmVyc2lvbiA+PSAxMikge1xuICAgICAgICB2YXIgbmV4dDIgPSB0aGlzLmlucHV0LmNoYXJDb2RlQXQodGhpcy5wb3MgKyAyKTtcbiAgICAgICAgaWYgKG5leHQyID09PSA2MSkgeyByZXR1cm4gdGhpcy5maW5pc2hPcCh0eXBlcy5hc3NpZ24sIDMpIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLmZpbmlzaE9wKGNvZGUgPT09IDEyNCA/IHR5cGVzLmxvZ2ljYWxPUiA6IHR5cGVzLmxvZ2ljYWxBTkQsIDIpXG4gICAgfVxuICAgIGlmIChuZXh0ID09PSA2MSkgeyByZXR1cm4gdGhpcy5maW5pc2hPcCh0eXBlcy5hc3NpZ24sIDIpIH1cbiAgICByZXR1cm4gdGhpcy5maW5pc2hPcChjb2RlID09PSAxMjQgPyB0eXBlcy5iaXR3aXNlT1IgOiB0eXBlcy5iaXR3aXNlQU5ELCAxKVxuICB9O1xuXG4gIHBwJDkucmVhZFRva2VuX2NhcmV0ID0gZnVuY3Rpb24oKSB7IC8vICdeJ1xuICAgIHZhciBuZXh0ID0gdGhpcy5pbnB1dC5jaGFyQ29kZUF0KHRoaXMucG9zICsgMSk7XG4gICAgaWYgKG5leHQgPT09IDYxKSB7IHJldHVybiB0aGlzLmZpbmlzaE9wKHR5cGVzLmFzc2lnbiwgMikgfVxuICAgIHJldHVybiB0aGlzLmZpbmlzaE9wKHR5cGVzLmJpdHdpc2VYT1IsIDEpXG4gIH07XG5cbiAgcHAkOS5yZWFkVG9rZW5fcGx1c19taW4gPSBmdW5jdGlvbihjb2RlKSB7IC8vICcrLSdcbiAgICB2YXIgbmV4dCA9IHRoaXMuaW5wdXQuY2hhckNvZGVBdCh0aGlzLnBvcyArIDEpO1xuICAgIGlmIChuZXh0ID09PSBjb2RlKSB7XG4gICAgICBpZiAobmV4dCA9PT0gNDUgJiYgIXRoaXMuaW5Nb2R1bGUgJiYgdGhpcy5pbnB1dC5jaGFyQ29kZUF0KHRoaXMucG9zICsgMikgPT09IDYyICYmXG4gICAgICAgICAgKHRoaXMubGFzdFRva0VuZCA9PT0gMCB8fCBsaW5lQnJlYWsudGVzdCh0aGlzLmlucHV0LnNsaWNlKHRoaXMubGFzdFRva0VuZCwgdGhpcy5wb3MpKSkpIHtcbiAgICAgICAgLy8gQSBgLS0+YCBsaW5lIGNvbW1lbnRcbiAgICAgICAgdGhpcy5za2lwTGluZUNvbW1lbnQoMyk7XG4gICAgICAgIHRoaXMuc2tpcFNwYWNlKCk7XG4gICAgICAgIHJldHVybiB0aGlzLm5leHRUb2tlbigpXG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5maW5pc2hPcCh0eXBlcy5pbmNEZWMsIDIpXG4gICAgfVxuICAgIGlmIChuZXh0ID09PSA2MSkgeyByZXR1cm4gdGhpcy5maW5pc2hPcCh0eXBlcy5hc3NpZ24sIDIpIH1cbiAgICByZXR1cm4gdGhpcy5maW5pc2hPcCh0eXBlcy5wbHVzTWluLCAxKVxuICB9O1xuXG4gIHBwJDkucmVhZFRva2VuX2x0X2d0ID0gZnVuY3Rpb24oY29kZSkgeyAvLyAnPD4nXG4gICAgdmFyIG5leHQgPSB0aGlzLmlucHV0LmNoYXJDb2RlQXQodGhpcy5wb3MgKyAxKTtcbiAgICB2YXIgc2l6ZSA9IDE7XG4gICAgaWYgKG5leHQgPT09IGNvZGUpIHtcbiAgICAgIHNpemUgPSBjb2RlID09PSA2MiAmJiB0aGlzLmlucHV0LmNoYXJDb2RlQXQodGhpcy5wb3MgKyAyKSA9PT0gNjIgPyAzIDogMjtcbiAgICAgIGlmICh0aGlzLmlucHV0LmNoYXJDb2RlQXQodGhpcy5wb3MgKyBzaXplKSA9PT0gNjEpIHsgcmV0dXJuIHRoaXMuZmluaXNoT3AodHlwZXMuYXNzaWduLCBzaXplICsgMSkgfVxuICAgICAgcmV0dXJuIHRoaXMuZmluaXNoT3AodHlwZXMuYml0U2hpZnQsIHNpemUpXG4gICAgfVxuICAgIGlmIChuZXh0ID09PSAzMyAmJiBjb2RlID09PSA2MCAmJiAhdGhpcy5pbk1vZHVsZSAmJiB0aGlzLmlucHV0LmNoYXJDb2RlQXQodGhpcy5wb3MgKyAyKSA9PT0gNDUgJiZcbiAgICAgICAgdGhpcy5pbnB1dC5jaGFyQ29kZUF0KHRoaXMucG9zICsgMykgPT09IDQ1KSB7XG4gICAgICAvLyBgPCEtLWAsIGFuIFhNTC1zdHlsZSBjb21tZW50IHRoYXQgc2hvdWxkIGJlIGludGVycHJldGVkIGFzIGEgbGluZSBjb21tZW50XG4gICAgICB0aGlzLnNraXBMaW5lQ29tbWVudCg0KTtcbiAgICAgIHRoaXMuc2tpcFNwYWNlKCk7XG4gICAgICByZXR1cm4gdGhpcy5uZXh0VG9rZW4oKVxuICAgIH1cbiAgICBpZiAobmV4dCA9PT0gNjEpIHsgc2l6ZSA9IDI7IH1cbiAgICByZXR1cm4gdGhpcy5maW5pc2hPcCh0eXBlcy5yZWxhdGlvbmFsLCBzaXplKVxuICB9O1xuXG4gIHBwJDkucmVhZFRva2VuX2VxX2V4Y2wgPSBmdW5jdGlvbihjb2RlKSB7IC8vICc9ISdcbiAgICB2YXIgbmV4dCA9IHRoaXMuaW5wdXQuY2hhckNvZGVBdCh0aGlzLnBvcyArIDEpO1xuICAgIGlmIChuZXh0ID09PSA2MSkgeyByZXR1cm4gdGhpcy5maW5pc2hPcCh0eXBlcy5lcXVhbGl0eSwgdGhpcy5pbnB1dC5jaGFyQ29kZUF0KHRoaXMucG9zICsgMikgPT09IDYxID8gMyA6IDIpIH1cbiAgICBpZiAoY29kZSA9PT0gNjEgJiYgbmV4dCA9PT0gNjIgJiYgdGhpcy5vcHRpb25zLmVjbWFWZXJzaW9uID49IDYpIHsgLy8gJz0+J1xuICAgICAgdGhpcy5wb3MgKz0gMjtcbiAgICAgIHJldHVybiB0aGlzLmZpbmlzaFRva2VuKHR5cGVzLmFycm93KVxuICAgIH1cbiAgICByZXR1cm4gdGhpcy5maW5pc2hPcChjb2RlID09PSA2MSA/IHR5cGVzLmVxIDogdHlwZXMucHJlZml4LCAxKVxuICB9O1xuXG4gIHBwJDkucmVhZFRva2VuX3F1ZXN0aW9uID0gZnVuY3Rpb24oKSB7IC8vICc/J1xuICAgIHZhciBlY21hVmVyc2lvbiA9IHRoaXMub3B0aW9ucy5lY21hVmVyc2lvbjtcbiAgICBpZiAoZWNtYVZlcnNpb24gPj0gMTEpIHtcbiAgICAgIHZhciBuZXh0ID0gdGhpcy5pbnB1dC5jaGFyQ29kZUF0KHRoaXMucG9zICsgMSk7XG4gICAgICBpZiAobmV4dCA9PT0gNDYpIHtcbiAgICAgICAgdmFyIG5leHQyID0gdGhpcy5pbnB1dC5jaGFyQ29kZUF0KHRoaXMucG9zICsgMik7XG4gICAgICAgIGlmIChuZXh0MiA8IDQ4IHx8IG5leHQyID4gNTcpIHsgcmV0dXJuIHRoaXMuZmluaXNoT3AodHlwZXMucXVlc3Rpb25Eb3QsIDIpIH1cbiAgICAgIH1cbiAgICAgIGlmIChuZXh0ID09PSA2Mykge1xuICAgICAgICBpZiAoZWNtYVZlcnNpb24gPj0gMTIpIHtcbiAgICAgICAgICB2YXIgbmV4dDIkMSA9IHRoaXMuaW5wdXQuY2hhckNvZGVBdCh0aGlzLnBvcyArIDIpO1xuICAgICAgICAgIGlmIChuZXh0MiQxID09PSA2MSkgeyByZXR1cm4gdGhpcy5maW5pc2hPcCh0eXBlcy5hc3NpZ24sIDMpIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5maW5pc2hPcCh0eXBlcy5jb2FsZXNjZSwgMilcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuZmluaXNoT3AodHlwZXMucXVlc3Rpb24sIDEpXG4gIH07XG5cbiAgcHAkOS5yZWFkVG9rZW5fbnVtYmVyU2lnbiA9IGZ1bmN0aW9uKCkgeyAvLyAnIydcbiAgICB2YXIgZWNtYVZlcnNpb24gPSB0aGlzLm9wdGlvbnMuZWNtYVZlcnNpb247XG4gICAgdmFyIGNvZGUgPSAzNTsgLy8gJyMnXG4gICAgaWYgKGVjbWFWZXJzaW9uID49IDEzKSB7XG4gICAgICArK3RoaXMucG9zO1xuICAgICAgY29kZSA9IHRoaXMuZnVsbENoYXJDb2RlQXRQb3MoKTtcbiAgICAgIGlmIChpc0lkZW50aWZpZXJTdGFydChjb2RlLCB0cnVlKSB8fCBjb2RlID09PSA5MiAvKiAnXFwnICovKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmZpbmlzaFRva2VuKHR5cGVzLnByaXZhdGVJZCwgdGhpcy5yZWFkV29yZDEoKSlcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLnJhaXNlKHRoaXMucG9zLCBcIlVuZXhwZWN0ZWQgY2hhcmFjdGVyICdcIiArIGNvZGVQb2ludFRvU3RyaW5nJDEoY29kZSkgKyBcIidcIik7XG4gIH07XG5cbiAgcHAkOS5nZXRUb2tlbkZyb21Db2RlID0gZnVuY3Rpb24oY29kZSkge1xuICAgIHN3aXRjaCAoY29kZSkge1xuICAgIC8vIFRoZSBpbnRlcnByZXRhdGlvbiBvZiBhIGRvdCBkZXBlbmRzIG9uIHdoZXRoZXIgaXQgaXMgZm9sbG93ZWRcbiAgICAvLyBieSBhIGRpZ2l0IG9yIGFub3RoZXIgdHdvIGRvdHMuXG4gICAgY2FzZSA0NjogLy8gJy4nXG4gICAgICByZXR1cm4gdGhpcy5yZWFkVG9rZW5fZG90KClcblxuICAgIC8vIFB1bmN0dWF0aW9uIHRva2Vucy5cbiAgICBjYXNlIDQwOiArK3RoaXMucG9zOyByZXR1cm4gdGhpcy5maW5pc2hUb2tlbih0eXBlcy5wYXJlbkwpXG4gICAgY2FzZSA0MTogKyt0aGlzLnBvczsgcmV0dXJuIHRoaXMuZmluaXNoVG9rZW4odHlwZXMucGFyZW5SKVxuICAgIGNhc2UgNTk6ICsrdGhpcy5wb3M7IHJldHVybiB0aGlzLmZpbmlzaFRva2VuKHR5cGVzLnNlbWkpXG4gICAgY2FzZSA0NDogKyt0aGlzLnBvczsgcmV0dXJuIHRoaXMuZmluaXNoVG9rZW4odHlwZXMuY29tbWEpXG4gICAgY2FzZSA5MTogKyt0aGlzLnBvczsgcmV0dXJuIHRoaXMuZmluaXNoVG9rZW4odHlwZXMuYnJhY2tldEwpXG4gICAgY2FzZSA5MzogKyt0aGlzLnBvczsgcmV0dXJuIHRoaXMuZmluaXNoVG9rZW4odHlwZXMuYnJhY2tldFIpXG4gICAgY2FzZSAxMjM6ICsrdGhpcy5wb3M7IHJldHVybiB0aGlzLmZpbmlzaFRva2VuKHR5cGVzLmJyYWNlTClcbiAgICBjYXNlIDEyNTogKyt0aGlzLnBvczsgcmV0dXJuIHRoaXMuZmluaXNoVG9rZW4odHlwZXMuYnJhY2VSKVxuICAgIGNhc2UgNTg6ICsrdGhpcy5wb3M7IHJldHVybiB0aGlzLmZpbmlzaFRva2VuKHR5cGVzLmNvbG9uKVxuXG4gICAgY2FzZSA5NjogLy8gJ2AnXG4gICAgICBpZiAodGhpcy5vcHRpb25zLmVjbWFWZXJzaW9uIDwgNikgeyBicmVhayB9XG4gICAgICArK3RoaXMucG9zO1xuICAgICAgcmV0dXJuIHRoaXMuZmluaXNoVG9rZW4odHlwZXMuYmFja1F1b3RlKVxuXG4gICAgY2FzZSA0ODogLy8gJzAnXG4gICAgICB2YXIgbmV4dCA9IHRoaXMuaW5wdXQuY2hhckNvZGVBdCh0aGlzLnBvcyArIDEpO1xuICAgICAgaWYgKG5leHQgPT09IDEyMCB8fCBuZXh0ID09PSA4OCkgeyByZXR1cm4gdGhpcy5yZWFkUmFkaXhOdW1iZXIoMTYpIH0gLy8gJzB4JywgJzBYJyAtIGhleCBudW1iZXJcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuZWNtYVZlcnNpb24gPj0gNikge1xuICAgICAgICBpZiAobmV4dCA9PT0gMTExIHx8IG5leHQgPT09IDc5KSB7IHJldHVybiB0aGlzLnJlYWRSYWRpeE51bWJlcig4KSB9IC8vICcwbycsICcwTycgLSBvY3RhbCBudW1iZXJcbiAgICAgICAgaWYgKG5leHQgPT09IDk4IHx8IG5leHQgPT09IDY2KSB7IHJldHVybiB0aGlzLnJlYWRSYWRpeE51bWJlcigyKSB9IC8vICcwYicsICcwQicgLSBiaW5hcnkgbnVtYmVyXG4gICAgICB9XG5cbiAgICAvLyBBbnl0aGluZyBlbHNlIGJlZ2lubmluZyB3aXRoIGEgZGlnaXQgaXMgYW4gaW50ZWdlciwgb2N0YWxcbiAgICAvLyBudW1iZXIsIG9yIGZsb2F0LlxuICAgIGNhc2UgNDk6IGNhc2UgNTA6IGNhc2UgNTE6IGNhc2UgNTI6IGNhc2UgNTM6IGNhc2UgNTQ6IGNhc2UgNTU6IGNhc2UgNTY6IGNhc2UgNTc6IC8vIDEtOVxuICAgICAgcmV0dXJuIHRoaXMucmVhZE51bWJlcihmYWxzZSlcblxuICAgIC8vIFF1b3RlcyBwcm9kdWNlIHN0cmluZ3MuXG4gICAgY2FzZSAzNDogY2FzZSAzOTogLy8gJ1wiJywgXCInXCJcbiAgICAgIHJldHVybiB0aGlzLnJlYWRTdHJpbmcoY29kZSlcblxuICAgIC8vIE9wZXJhdG9ycyBhcmUgcGFyc2VkIGlubGluZSBpbiB0aW55IHN0YXRlIG1hY2hpbmVzLiAnPScgKDYxKSBpc1xuICAgIC8vIG9mdGVuIHJlZmVycmVkIHRvLiBgZmluaXNoT3BgIHNpbXBseSBza2lwcyB0aGUgYW1vdW50IG9mXG4gICAgLy8gY2hhcmFjdGVycyBpdCBpcyBnaXZlbiBhcyBzZWNvbmQgYXJndW1lbnQsIGFuZCByZXR1cm5zIGEgdG9rZW5cbiAgICAvLyBvZiB0aGUgdHlwZSBnaXZlbiBieSBpdHMgZmlyc3QgYXJndW1lbnQuXG5cbiAgICBjYXNlIDQ3OiAvLyAnLydcbiAgICAgIHJldHVybiB0aGlzLnJlYWRUb2tlbl9zbGFzaCgpXG5cbiAgICBjYXNlIDM3OiBjYXNlIDQyOiAvLyAnJSonXG4gICAgICByZXR1cm4gdGhpcy5yZWFkVG9rZW5fbXVsdF9tb2R1bG9fZXhwKGNvZGUpXG5cbiAgICBjYXNlIDEyNDogY2FzZSAzODogLy8gJ3wmJ1xuICAgICAgcmV0dXJuIHRoaXMucmVhZFRva2VuX3BpcGVfYW1wKGNvZGUpXG5cbiAgICBjYXNlIDk0OiAvLyAnXidcbiAgICAgIHJldHVybiB0aGlzLnJlYWRUb2tlbl9jYXJldCgpXG5cbiAgICBjYXNlIDQzOiBjYXNlIDQ1OiAvLyAnKy0nXG4gICAgICByZXR1cm4gdGhpcy5yZWFkVG9rZW5fcGx1c19taW4oY29kZSlcblxuICAgIGNhc2UgNjA6IGNhc2UgNjI6IC8vICc8PidcbiAgICAgIHJldHVybiB0aGlzLnJlYWRUb2tlbl9sdF9ndChjb2RlKVxuXG4gICAgY2FzZSA2MTogY2FzZSAzMzogLy8gJz0hJ1xuICAgICAgcmV0dXJuIHRoaXMucmVhZFRva2VuX2VxX2V4Y2woY29kZSlcblxuICAgIGNhc2UgNjM6IC8vICc/J1xuICAgICAgcmV0dXJuIHRoaXMucmVhZFRva2VuX3F1ZXN0aW9uKClcblxuICAgIGNhc2UgMTI2OiAvLyAnfidcbiAgICAgIHJldHVybiB0aGlzLmZpbmlzaE9wKHR5cGVzLnByZWZpeCwgMSlcblxuICAgIGNhc2UgMzU6IC8vICcjJ1xuICAgICAgcmV0dXJuIHRoaXMucmVhZFRva2VuX251bWJlclNpZ24oKVxuICAgIH1cblxuICAgIHRoaXMucmFpc2UodGhpcy5wb3MsIFwiVW5leHBlY3RlZCBjaGFyYWN0ZXIgJ1wiICsgY29kZVBvaW50VG9TdHJpbmckMShjb2RlKSArIFwiJ1wiKTtcbiAgfTtcblxuICBwcCQ5LmZpbmlzaE9wID0gZnVuY3Rpb24odHlwZSwgc2l6ZSkge1xuICAgIHZhciBzdHIgPSB0aGlzLmlucHV0LnNsaWNlKHRoaXMucG9zLCB0aGlzLnBvcyArIHNpemUpO1xuICAgIHRoaXMucG9zICs9IHNpemU7XG4gICAgcmV0dXJuIHRoaXMuZmluaXNoVG9rZW4odHlwZSwgc3RyKVxuICB9O1xuXG4gIHBwJDkucmVhZFJlZ2V4cCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBlc2NhcGVkLCBpbkNsYXNzLCBzdGFydCA9IHRoaXMucG9zO1xuICAgIGZvciAoOzspIHtcbiAgICAgIGlmICh0aGlzLnBvcyA+PSB0aGlzLmlucHV0Lmxlbmd0aCkgeyB0aGlzLnJhaXNlKHN0YXJ0LCBcIlVudGVybWluYXRlZCByZWd1bGFyIGV4cHJlc3Npb25cIik7IH1cbiAgICAgIHZhciBjaCA9IHRoaXMuaW5wdXQuY2hhckF0KHRoaXMucG9zKTtcbiAgICAgIGlmIChsaW5lQnJlYWsudGVzdChjaCkpIHsgdGhpcy5yYWlzZShzdGFydCwgXCJVbnRlcm1pbmF0ZWQgcmVndWxhciBleHByZXNzaW9uXCIpOyB9XG4gICAgICBpZiAoIWVzY2FwZWQpIHtcbiAgICAgICAgaWYgKGNoID09PSBcIltcIikgeyBpbkNsYXNzID0gdHJ1ZTsgfVxuICAgICAgICBlbHNlIGlmIChjaCA9PT0gXCJdXCIgJiYgaW5DbGFzcykgeyBpbkNsYXNzID0gZmFsc2U7IH1cbiAgICAgICAgZWxzZSBpZiAoY2ggPT09IFwiL1wiICYmICFpbkNsYXNzKSB7IGJyZWFrIH1cbiAgICAgICAgZXNjYXBlZCA9IGNoID09PSBcIlxcXFxcIjtcbiAgICAgIH0gZWxzZSB7IGVzY2FwZWQgPSBmYWxzZTsgfVxuICAgICAgKyt0aGlzLnBvcztcbiAgICB9XG4gICAgdmFyIHBhdHRlcm4gPSB0aGlzLmlucHV0LnNsaWNlKHN0YXJ0LCB0aGlzLnBvcyk7XG4gICAgKyt0aGlzLnBvcztcbiAgICB2YXIgZmxhZ3NTdGFydCA9IHRoaXMucG9zO1xuICAgIHZhciBmbGFncyA9IHRoaXMucmVhZFdvcmQxKCk7XG4gICAgaWYgKHRoaXMuY29udGFpbnNFc2MpIHsgdGhpcy51bmV4cGVjdGVkKGZsYWdzU3RhcnQpOyB9XG5cbiAgICAvLyBWYWxpZGF0ZSBwYXR0ZXJuXG4gICAgdmFyIHN0YXRlID0gdGhpcy5yZWdleHBTdGF0ZSB8fCAodGhpcy5yZWdleHBTdGF0ZSA9IG5ldyBSZWdFeHBWYWxpZGF0aW9uU3RhdGUodGhpcykpO1xuICAgIHN0YXRlLnJlc2V0KHN0YXJ0LCBwYXR0ZXJuLCBmbGFncyk7XG4gICAgdGhpcy52YWxpZGF0ZVJlZ0V4cEZsYWdzKHN0YXRlKTtcbiAgICB0aGlzLnZhbGlkYXRlUmVnRXhwUGF0dGVybihzdGF0ZSk7XG5cbiAgICAvLyBDcmVhdGUgTGl0ZXJhbCN2YWx1ZSBwcm9wZXJ0eSB2YWx1ZS5cbiAgICB2YXIgdmFsdWUgPSBudWxsO1xuICAgIHRyeSB7XG4gICAgICB2YWx1ZSA9IG5ldyBSZWdFeHAocGF0dGVybiwgZmxhZ3MpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIC8vIEVTVHJlZSByZXF1aXJlcyBudWxsIGlmIGl0IGZhaWxlZCB0byBpbnN0YW50aWF0ZSBSZWdFeHAgb2JqZWN0LlxuICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2VzdHJlZS9lc3RyZWUvYmxvYi9hMjcwMDNhZGY0ZmQ3YmZhZDQ0ZGU5Y2VmMzcyYTJlYWNkNTI3YjFjL2VzNS5tZCNyZWdleHBsaXRlcmFsXG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuZmluaXNoVG9rZW4odHlwZXMucmVnZXhwLCB7cGF0dGVybjogcGF0dGVybiwgZmxhZ3M6IGZsYWdzLCB2YWx1ZTogdmFsdWV9KVxuICB9O1xuXG4gIC8vIFJlYWQgYW4gaW50ZWdlciBpbiB0aGUgZ2l2ZW4gcmFkaXguIFJldHVybiBudWxsIGlmIHplcm8gZGlnaXRzXG4gIC8vIHdlcmUgcmVhZCwgdGhlIGludGVnZXIgdmFsdWUgb3RoZXJ3aXNlLiBXaGVuIGBsZW5gIGlzIGdpdmVuLCB0aGlzXG4gIC8vIHdpbGwgcmV0dXJuIGBudWxsYCB1bmxlc3MgdGhlIGludGVnZXIgaGFzIGV4YWN0bHkgYGxlbmAgZGlnaXRzLlxuXG4gIHBwJDkucmVhZEludCA9IGZ1bmN0aW9uKHJhZGl4LCBsZW4sIG1heWJlTGVnYWN5T2N0YWxOdW1lcmljTGl0ZXJhbCkge1xuICAgIC8vIGBsZW5gIGlzIHVzZWQgZm9yIGNoYXJhY3RlciBlc2NhcGUgc2VxdWVuY2VzLiBJbiB0aGF0IGNhc2UsIGRpc2FsbG93IHNlcGFyYXRvcnMuXG4gICAgdmFyIGFsbG93U2VwYXJhdG9ycyA9IHRoaXMub3B0aW9ucy5lY21hVmVyc2lvbiA+PSAxMiAmJiBsZW4gPT09IHVuZGVmaW5lZDtcblxuICAgIC8vIGBtYXliZUxlZ2FjeU9jdGFsTnVtZXJpY0xpdGVyYWxgIGlzIHRydWUgaWYgaXQgZG9lc24ndCBoYXZlIHByZWZpeCAoMHgsMG8sMGIpXG4gICAgLy8gYW5kIGlzbid0IGZyYWN0aW9uIHBhcnQgbm9yIGV4cG9uZW50IHBhcnQuIEluIHRoYXQgY2FzZSwgaWYgdGhlIGZpcnN0IGRpZ2l0XG4gICAgLy8gaXMgemVybyB0aGVuIGRpc2FsbG93IHNlcGFyYXRvcnMuXG4gICAgdmFyIGlzTGVnYWN5T2N0YWxOdW1lcmljTGl0ZXJhbCA9IG1heWJlTGVnYWN5T2N0YWxOdW1lcmljTGl0ZXJhbCAmJiB0aGlzLmlucHV0LmNoYXJDb2RlQXQodGhpcy5wb3MpID09PSA0ODtcblxuICAgIHZhciBzdGFydCA9IHRoaXMucG9zLCB0b3RhbCA9IDAsIGxhc3RDb2RlID0gMDtcbiAgICBmb3IgKHZhciBpID0gMCwgZSA9IGxlbiA9PSBudWxsID8gSW5maW5pdHkgOiBsZW47IGkgPCBlOyArK2ksICsrdGhpcy5wb3MpIHtcbiAgICAgIHZhciBjb2RlID0gdGhpcy5pbnB1dC5jaGFyQ29kZUF0KHRoaXMucG9zKSwgdmFsID0gKHZvaWQgMCk7XG5cbiAgICAgIGlmIChhbGxvd1NlcGFyYXRvcnMgJiYgY29kZSA9PT0gOTUpIHtcbiAgICAgICAgaWYgKGlzTGVnYWN5T2N0YWxOdW1lcmljTGl0ZXJhbCkgeyB0aGlzLnJhaXNlUmVjb3ZlcmFibGUodGhpcy5wb3MsIFwiTnVtZXJpYyBzZXBhcmF0b3IgaXMgbm90IGFsbG93ZWQgaW4gbGVnYWN5IG9jdGFsIG51bWVyaWMgbGl0ZXJhbHNcIik7IH1cbiAgICAgICAgaWYgKGxhc3RDb2RlID09PSA5NSkgeyB0aGlzLnJhaXNlUmVjb3ZlcmFibGUodGhpcy5wb3MsIFwiTnVtZXJpYyBzZXBhcmF0b3IgbXVzdCBiZSBleGFjdGx5IG9uZSB1bmRlcnNjb3JlXCIpOyB9XG4gICAgICAgIGlmIChpID09PSAwKSB7IHRoaXMucmFpc2VSZWNvdmVyYWJsZSh0aGlzLnBvcywgXCJOdW1lcmljIHNlcGFyYXRvciBpcyBub3QgYWxsb3dlZCBhdCB0aGUgZmlyc3Qgb2YgZGlnaXRzXCIpOyB9XG4gICAgICAgIGxhc3RDb2RlID0gY29kZTtcbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgaWYgKGNvZGUgPj0gOTcpIHsgdmFsID0gY29kZSAtIDk3ICsgMTA7IH0gLy8gYVxuICAgICAgZWxzZSBpZiAoY29kZSA+PSA2NSkgeyB2YWwgPSBjb2RlIC0gNjUgKyAxMDsgfSAvLyBBXG4gICAgICBlbHNlIGlmIChjb2RlID49IDQ4ICYmIGNvZGUgPD0gNTcpIHsgdmFsID0gY29kZSAtIDQ4OyB9IC8vIDAtOVxuICAgICAgZWxzZSB7IHZhbCA9IEluZmluaXR5OyB9XG4gICAgICBpZiAodmFsID49IHJhZGl4KSB7IGJyZWFrIH1cbiAgICAgIGxhc3RDb2RlID0gY29kZTtcbiAgICAgIHRvdGFsID0gdG90YWwgKiByYWRpeCArIHZhbDtcbiAgICB9XG5cbiAgICBpZiAoYWxsb3dTZXBhcmF0b3JzICYmIGxhc3RDb2RlID09PSA5NSkgeyB0aGlzLnJhaXNlUmVjb3ZlcmFibGUodGhpcy5wb3MgLSAxLCBcIk51bWVyaWMgc2VwYXJhdG9yIGlzIG5vdCBhbGxvd2VkIGF0IHRoZSBsYXN0IG9mIGRpZ2l0c1wiKTsgfVxuICAgIGlmICh0aGlzLnBvcyA9PT0gc3RhcnQgfHwgbGVuICE9IG51bGwgJiYgdGhpcy5wb3MgLSBzdGFydCAhPT0gbGVuKSB7IHJldHVybiBudWxsIH1cblxuICAgIHJldHVybiB0b3RhbFxuICB9O1xuXG4gIGZ1bmN0aW9uIHN0cmluZ1RvTnVtYmVyKHN0ciwgaXNMZWdhY3lPY3RhbE51bWVyaWNMaXRlcmFsKSB7XG4gICAgaWYgKGlzTGVnYWN5T2N0YWxOdW1lcmljTGl0ZXJhbCkge1xuICAgICAgcmV0dXJuIHBhcnNlSW50KHN0ciwgOClcbiAgICB9XG5cbiAgICAvLyBgcGFyc2VGbG9hdCh2YWx1ZSlgIHN0b3BzIHBhcnNpbmcgYXQgdGhlIGZpcnN0IG51bWVyaWMgc2VwYXJhdG9yIHRoZW4gcmV0dXJucyBhIHdyb25nIHZhbHVlLlxuICAgIHJldHVybiBwYXJzZUZsb2F0KHN0ci5yZXBsYWNlKC9fL2csIFwiXCIpKVxuICB9XG5cbiAgZnVuY3Rpb24gc3RyaW5nVG9CaWdJbnQoc3RyKSB7XG4gICAgaWYgKHR5cGVvZiBCaWdJbnQgIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgcmV0dXJuIG51bGxcbiAgICB9XG5cbiAgICAvLyBgQmlnSW50KHZhbHVlKWAgdGhyb3dzIHN5bnRheCBlcnJvciBpZiB0aGUgc3RyaW5nIGNvbnRhaW5zIG51bWVyaWMgc2VwYXJhdG9ycy5cbiAgICByZXR1cm4gQmlnSW50KHN0ci5yZXBsYWNlKC9fL2csIFwiXCIpKVxuICB9XG5cbiAgcHAkOS5yZWFkUmFkaXhOdW1iZXIgPSBmdW5jdGlvbihyYWRpeCkge1xuICAgIHZhciBzdGFydCA9IHRoaXMucG9zO1xuICAgIHRoaXMucG9zICs9IDI7IC8vIDB4XG4gICAgdmFyIHZhbCA9IHRoaXMucmVhZEludChyYWRpeCk7XG4gICAgaWYgKHZhbCA9PSBudWxsKSB7IHRoaXMucmFpc2UodGhpcy5zdGFydCArIDIsIFwiRXhwZWN0ZWQgbnVtYmVyIGluIHJhZGl4IFwiICsgcmFkaXgpOyB9XG4gICAgaWYgKHRoaXMub3B0aW9ucy5lY21hVmVyc2lvbiA+PSAxMSAmJiB0aGlzLmlucHV0LmNoYXJDb2RlQXQodGhpcy5wb3MpID09PSAxMTApIHtcbiAgICAgIHZhbCA9IHN0cmluZ1RvQmlnSW50KHRoaXMuaW5wdXQuc2xpY2Uoc3RhcnQsIHRoaXMucG9zKSk7XG4gICAgICArK3RoaXMucG9zO1xuICAgIH0gZWxzZSBpZiAoaXNJZGVudGlmaWVyU3RhcnQodGhpcy5mdWxsQ2hhckNvZGVBdFBvcygpKSkgeyB0aGlzLnJhaXNlKHRoaXMucG9zLCBcIklkZW50aWZpZXIgZGlyZWN0bHkgYWZ0ZXIgbnVtYmVyXCIpOyB9XG4gICAgcmV0dXJuIHRoaXMuZmluaXNoVG9rZW4odHlwZXMubnVtLCB2YWwpXG4gIH07XG5cbiAgLy8gUmVhZCBhbiBpbnRlZ2VyLCBvY3RhbCBpbnRlZ2VyLCBvciBmbG9hdGluZy1wb2ludCBudW1iZXIuXG5cbiAgcHAkOS5yZWFkTnVtYmVyID0gZnVuY3Rpb24oc3RhcnRzV2l0aERvdCkge1xuICAgIHZhciBzdGFydCA9IHRoaXMucG9zO1xuICAgIGlmICghc3RhcnRzV2l0aERvdCAmJiB0aGlzLnJlYWRJbnQoMTAsIHVuZGVmaW5lZCwgdHJ1ZSkgPT09IG51bGwpIHsgdGhpcy5yYWlzZShzdGFydCwgXCJJbnZhbGlkIG51bWJlclwiKTsgfVxuICAgIHZhciBvY3RhbCA9IHRoaXMucG9zIC0gc3RhcnQgPj0gMiAmJiB0aGlzLmlucHV0LmNoYXJDb2RlQXQoc3RhcnQpID09PSA0ODtcbiAgICBpZiAob2N0YWwgJiYgdGhpcy5zdHJpY3QpIHsgdGhpcy5yYWlzZShzdGFydCwgXCJJbnZhbGlkIG51bWJlclwiKTsgfVxuICAgIHZhciBuZXh0ID0gdGhpcy5pbnB1dC5jaGFyQ29kZUF0KHRoaXMucG9zKTtcbiAgICBpZiAoIW9jdGFsICYmICFzdGFydHNXaXRoRG90ICYmIHRoaXMub3B0aW9ucy5lY21hVmVyc2lvbiA+PSAxMSAmJiBuZXh0ID09PSAxMTApIHtcbiAgICAgIHZhciB2YWwkMSA9IHN0cmluZ1RvQmlnSW50KHRoaXMuaW5wdXQuc2xpY2Uoc3RhcnQsIHRoaXMucG9zKSk7XG4gICAgICArK3RoaXMucG9zO1xuICAgICAgaWYgKGlzSWRlbnRpZmllclN0YXJ0KHRoaXMuZnVsbENoYXJDb2RlQXRQb3MoKSkpIHsgdGhpcy5yYWlzZSh0aGlzLnBvcywgXCJJZGVudGlmaWVyIGRpcmVjdGx5IGFmdGVyIG51bWJlclwiKTsgfVxuICAgICAgcmV0dXJuIHRoaXMuZmluaXNoVG9rZW4odHlwZXMubnVtLCB2YWwkMSlcbiAgICB9XG4gICAgaWYgKG9jdGFsICYmIC9bODldLy50ZXN0KHRoaXMuaW5wdXQuc2xpY2Uoc3RhcnQsIHRoaXMucG9zKSkpIHsgb2N0YWwgPSBmYWxzZTsgfVxuICAgIGlmIChuZXh0ID09PSA0NiAmJiAhb2N0YWwpIHsgLy8gJy4nXG4gICAgICArK3RoaXMucG9zO1xuICAgICAgdGhpcy5yZWFkSW50KDEwKTtcbiAgICAgIG5leHQgPSB0aGlzLmlucHV0LmNoYXJDb2RlQXQodGhpcy5wb3MpO1xuICAgIH1cbiAgICBpZiAoKG5leHQgPT09IDY5IHx8IG5leHQgPT09IDEwMSkgJiYgIW9jdGFsKSB7IC8vICdlRSdcbiAgICAgIG5leHQgPSB0aGlzLmlucHV0LmNoYXJDb2RlQXQoKyt0aGlzLnBvcyk7XG4gICAgICBpZiAobmV4dCA9PT0gNDMgfHwgbmV4dCA9PT0gNDUpIHsgKyt0aGlzLnBvczsgfSAvLyAnKy0nXG4gICAgICBpZiAodGhpcy5yZWFkSW50KDEwKSA9PT0gbnVsbCkgeyB0aGlzLnJhaXNlKHN0YXJ0LCBcIkludmFsaWQgbnVtYmVyXCIpOyB9XG4gICAgfVxuICAgIGlmIChpc0lkZW50aWZpZXJTdGFydCh0aGlzLmZ1bGxDaGFyQ29kZUF0UG9zKCkpKSB7IHRoaXMucmFpc2UodGhpcy5wb3MsIFwiSWRlbnRpZmllciBkaXJlY3RseSBhZnRlciBudW1iZXJcIik7IH1cblxuICAgIHZhciB2YWwgPSBzdHJpbmdUb051bWJlcih0aGlzLmlucHV0LnNsaWNlKHN0YXJ0LCB0aGlzLnBvcyksIG9jdGFsKTtcbiAgICByZXR1cm4gdGhpcy5maW5pc2hUb2tlbih0eXBlcy5udW0sIHZhbClcbiAgfTtcblxuICAvLyBSZWFkIGEgc3RyaW5nIHZhbHVlLCBpbnRlcnByZXRpbmcgYmFja3NsYXNoLWVzY2FwZXMuXG5cbiAgcHAkOS5yZWFkQ29kZVBvaW50ID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGNoID0gdGhpcy5pbnB1dC5jaGFyQ29kZUF0KHRoaXMucG9zKSwgY29kZTtcblxuICAgIGlmIChjaCA9PT0gMTIzKSB7IC8vICd7J1xuICAgICAgaWYgKHRoaXMub3B0aW9ucy5lY21hVmVyc2lvbiA8IDYpIHsgdGhpcy51bmV4cGVjdGVkKCk7IH1cbiAgICAgIHZhciBjb2RlUG9zID0gKyt0aGlzLnBvcztcbiAgICAgIGNvZGUgPSB0aGlzLnJlYWRIZXhDaGFyKHRoaXMuaW5wdXQuaW5kZXhPZihcIn1cIiwgdGhpcy5wb3MpIC0gdGhpcy5wb3MpO1xuICAgICAgKyt0aGlzLnBvcztcbiAgICAgIGlmIChjb2RlID4gMHgxMEZGRkYpIHsgdGhpcy5pbnZhbGlkU3RyaW5nVG9rZW4oY29kZVBvcywgXCJDb2RlIHBvaW50IG91dCBvZiBib3VuZHNcIik7IH1cbiAgICB9IGVsc2Uge1xuICAgICAgY29kZSA9IHRoaXMucmVhZEhleENoYXIoNCk7XG4gICAgfVxuICAgIHJldHVybiBjb2RlXG4gIH07XG5cbiAgZnVuY3Rpb24gY29kZVBvaW50VG9TdHJpbmckMShjb2RlKSB7XG4gICAgLy8gVVRGLTE2IERlY29kaW5nXG4gICAgaWYgKGNvZGUgPD0gMHhGRkZGKSB7IHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKGNvZGUpIH1cbiAgICBjb2RlIC09IDB4MTAwMDA7XG4gICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoKGNvZGUgPj4gMTApICsgMHhEODAwLCAoY29kZSAmIDEwMjMpICsgMHhEQzAwKVxuICB9XG5cbiAgcHAkOS5yZWFkU3RyaW5nID0gZnVuY3Rpb24ocXVvdGUpIHtcbiAgICB2YXIgb3V0ID0gXCJcIiwgY2h1bmtTdGFydCA9ICsrdGhpcy5wb3M7XG4gICAgZm9yICg7Oykge1xuICAgICAgaWYgKHRoaXMucG9zID49IHRoaXMuaW5wdXQubGVuZ3RoKSB7IHRoaXMucmFpc2UodGhpcy5zdGFydCwgXCJVbnRlcm1pbmF0ZWQgc3RyaW5nIGNvbnN0YW50XCIpOyB9XG4gICAgICB2YXIgY2ggPSB0aGlzLmlucHV0LmNoYXJDb2RlQXQodGhpcy5wb3MpO1xuICAgICAgaWYgKGNoID09PSBxdW90ZSkgeyBicmVhayB9XG4gICAgICBpZiAoY2ggPT09IDkyKSB7IC8vICdcXCdcbiAgICAgICAgb3V0ICs9IHRoaXMuaW5wdXQuc2xpY2UoY2h1bmtTdGFydCwgdGhpcy5wb3MpO1xuICAgICAgICBvdXQgKz0gdGhpcy5yZWFkRXNjYXBlZENoYXIoZmFsc2UpO1xuICAgICAgICBjaHVua1N0YXJ0ID0gdGhpcy5wb3M7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoaXNOZXdMaW5lKGNoLCB0aGlzLm9wdGlvbnMuZWNtYVZlcnNpb24gPj0gMTApKSB7IHRoaXMucmFpc2UodGhpcy5zdGFydCwgXCJVbnRlcm1pbmF0ZWQgc3RyaW5nIGNvbnN0YW50XCIpOyB9XG4gICAgICAgICsrdGhpcy5wb3M7XG4gICAgICB9XG4gICAgfVxuICAgIG91dCArPSB0aGlzLmlucHV0LnNsaWNlKGNodW5rU3RhcnQsIHRoaXMucG9zKyspO1xuICAgIHJldHVybiB0aGlzLmZpbmlzaFRva2VuKHR5cGVzLnN0cmluZywgb3V0KVxuICB9O1xuXG4gIC8vIFJlYWRzIHRlbXBsYXRlIHN0cmluZyB0b2tlbnMuXG5cbiAgdmFyIElOVkFMSURfVEVNUExBVEVfRVNDQVBFX0VSUk9SID0ge307XG5cbiAgcHAkOS50cnlSZWFkVGVtcGxhdGVUb2tlbiA9IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuaW5UZW1wbGF0ZUVsZW1lbnQgPSB0cnVlO1xuICAgIHRyeSB7XG4gICAgICB0aGlzLnJlYWRUbXBsVG9rZW4oKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIGlmIChlcnIgPT09IElOVkFMSURfVEVNUExBVEVfRVNDQVBFX0VSUk9SKSB7XG4gICAgICAgIHRoaXMucmVhZEludmFsaWRUZW1wbGF0ZVRva2VuKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBlcnJcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLmluVGVtcGxhdGVFbGVtZW50ID0gZmFsc2U7XG4gIH07XG5cbiAgcHAkOS5pbnZhbGlkU3RyaW5nVG9rZW4gPSBmdW5jdGlvbihwb3NpdGlvbiwgbWVzc2FnZSkge1xuICAgIGlmICh0aGlzLmluVGVtcGxhdGVFbGVtZW50ICYmIHRoaXMub3B0aW9ucy5lY21hVmVyc2lvbiA+PSA5KSB7XG4gICAgICB0aHJvdyBJTlZBTElEX1RFTVBMQVRFX0VTQ0FQRV9FUlJPUlxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnJhaXNlKHBvc2l0aW9uLCBtZXNzYWdlKTtcbiAgICB9XG4gIH07XG5cbiAgcHAkOS5yZWFkVG1wbFRva2VuID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIG91dCA9IFwiXCIsIGNodW5rU3RhcnQgPSB0aGlzLnBvcztcbiAgICBmb3IgKDs7KSB7XG4gICAgICBpZiAodGhpcy5wb3MgPj0gdGhpcy5pbnB1dC5sZW5ndGgpIHsgdGhpcy5yYWlzZSh0aGlzLnN0YXJ0LCBcIlVudGVybWluYXRlZCB0ZW1wbGF0ZVwiKTsgfVxuICAgICAgdmFyIGNoID0gdGhpcy5pbnB1dC5jaGFyQ29kZUF0KHRoaXMucG9zKTtcbiAgICAgIGlmIChjaCA9PT0gOTYgfHwgY2ggPT09IDM2ICYmIHRoaXMuaW5wdXQuY2hhckNvZGVBdCh0aGlzLnBvcyArIDEpID09PSAxMjMpIHsgLy8gJ2AnLCAnJHsnXG4gICAgICAgIGlmICh0aGlzLnBvcyA9PT0gdGhpcy5zdGFydCAmJiAodGhpcy50eXBlID09PSB0eXBlcy50ZW1wbGF0ZSB8fCB0aGlzLnR5cGUgPT09IHR5cGVzLmludmFsaWRUZW1wbGF0ZSkpIHtcbiAgICAgICAgICBpZiAoY2ggPT09IDM2KSB7XG4gICAgICAgICAgICB0aGlzLnBvcyArPSAyO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZmluaXNoVG9rZW4odHlwZXMuZG9sbGFyQnJhY2VMKVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICArK3RoaXMucG9zO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZmluaXNoVG9rZW4odHlwZXMuYmFja1F1b3RlKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBvdXQgKz0gdGhpcy5pbnB1dC5zbGljZShjaHVua1N0YXJ0LCB0aGlzLnBvcyk7XG4gICAgICAgIHJldHVybiB0aGlzLmZpbmlzaFRva2VuKHR5cGVzLnRlbXBsYXRlLCBvdXQpXG4gICAgICB9XG4gICAgICBpZiAoY2ggPT09IDkyKSB7IC8vICdcXCdcbiAgICAgICAgb3V0ICs9IHRoaXMuaW5wdXQuc2xpY2UoY2h1bmtTdGFydCwgdGhpcy5wb3MpO1xuICAgICAgICBvdXQgKz0gdGhpcy5yZWFkRXNjYXBlZENoYXIodHJ1ZSk7XG4gICAgICAgIGNodW5rU3RhcnQgPSB0aGlzLnBvcztcbiAgICAgIH0gZWxzZSBpZiAoaXNOZXdMaW5lKGNoKSkge1xuICAgICAgICBvdXQgKz0gdGhpcy5pbnB1dC5zbGljZShjaHVua1N0YXJ0LCB0aGlzLnBvcyk7XG4gICAgICAgICsrdGhpcy5wb3M7XG4gICAgICAgIHN3aXRjaCAoY2gpIHtcbiAgICAgICAgY2FzZSAxMzpcbiAgICAgICAgICBpZiAodGhpcy5pbnB1dC5jaGFyQ29kZUF0KHRoaXMucG9zKSA9PT0gMTApIHsgKyt0aGlzLnBvczsgfVxuICAgICAgICBjYXNlIDEwOlxuICAgICAgICAgIG91dCArPSBcIlxcblwiO1xuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgb3V0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoY2gpO1xuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5sb2NhdGlvbnMpIHtcbiAgICAgICAgICArK3RoaXMuY3VyTGluZTtcbiAgICAgICAgICB0aGlzLmxpbmVTdGFydCA9IHRoaXMucG9zO1xuICAgICAgICB9XG4gICAgICAgIGNodW5rU3RhcnQgPSB0aGlzLnBvcztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICsrdGhpcy5wb3M7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIC8vIFJlYWRzIGEgdGVtcGxhdGUgdG9rZW4gdG8gc2VhcmNoIGZvciB0aGUgZW5kLCB3aXRob3V0IHZhbGlkYXRpbmcgYW55IGVzY2FwZSBzZXF1ZW5jZXNcbiAgcHAkOS5yZWFkSW52YWxpZFRlbXBsYXRlVG9rZW4gPSBmdW5jdGlvbigpIHtcbiAgICBmb3IgKDsgdGhpcy5wb3MgPCB0aGlzLmlucHV0Lmxlbmd0aDsgdGhpcy5wb3MrKykge1xuICAgICAgc3dpdGNoICh0aGlzLmlucHV0W3RoaXMucG9zXSkge1xuICAgICAgY2FzZSBcIlxcXFxcIjpcbiAgICAgICAgKyt0aGlzLnBvcztcbiAgICAgICAgYnJlYWtcblxuICAgICAgY2FzZSBcIiRcIjpcbiAgICAgICAgaWYgKHRoaXMuaW5wdXRbdGhpcy5wb3MgKyAxXSAhPT0gXCJ7XCIpIHtcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICAvLyBmYWxscyB0aHJvdWdoXG5cbiAgICAgIGNhc2UgXCJgXCI6XG4gICAgICAgIHJldHVybiB0aGlzLmZpbmlzaFRva2VuKHR5cGVzLmludmFsaWRUZW1wbGF0ZSwgdGhpcy5pbnB1dC5zbGljZSh0aGlzLnN0YXJ0LCB0aGlzLnBvcykpXG5cbiAgICAgIC8vIG5vIGRlZmF1bHRcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5yYWlzZSh0aGlzLnN0YXJ0LCBcIlVudGVybWluYXRlZCB0ZW1wbGF0ZVwiKTtcbiAgfTtcblxuICAvLyBVc2VkIHRvIHJlYWQgZXNjYXBlZCBjaGFyYWN0ZXJzXG5cbiAgcHAkOS5yZWFkRXNjYXBlZENoYXIgPSBmdW5jdGlvbihpblRlbXBsYXRlKSB7XG4gICAgdmFyIGNoID0gdGhpcy5pbnB1dC5jaGFyQ29kZUF0KCsrdGhpcy5wb3MpO1xuICAgICsrdGhpcy5wb3M7XG4gICAgc3dpdGNoIChjaCkge1xuICAgIGNhc2UgMTEwOiByZXR1cm4gXCJcXG5cIiAvLyAnbicgLT4gJ1xcbidcbiAgICBjYXNlIDExNDogcmV0dXJuIFwiXFxyXCIgLy8gJ3InIC0+ICdcXHInXG4gICAgY2FzZSAxMjA6IHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKHRoaXMucmVhZEhleENoYXIoMikpIC8vICd4J1xuICAgIGNhc2UgMTE3OiByZXR1cm4gY29kZVBvaW50VG9TdHJpbmckMSh0aGlzLnJlYWRDb2RlUG9pbnQoKSkgLy8gJ3UnXG4gICAgY2FzZSAxMTY6IHJldHVybiBcIlxcdFwiIC8vICd0JyAtPiAnXFx0J1xuICAgIGNhc2UgOTg6IHJldHVybiBcIlxcYlwiIC8vICdiJyAtPiAnXFxiJ1xuICAgIGNhc2UgMTE4OiByZXR1cm4gXCJcXHUwMDBiXCIgLy8gJ3YnIC0+ICdcXHUwMDBiJ1xuICAgIGNhc2UgMTAyOiByZXR1cm4gXCJcXGZcIiAvLyAnZicgLT4gJ1xcZidcbiAgICBjYXNlIDEzOiBpZiAodGhpcy5pbnB1dC5jaGFyQ29kZUF0KHRoaXMucG9zKSA9PT0gMTApIHsgKyt0aGlzLnBvczsgfSAvLyAnXFxyXFxuJ1xuICAgIGNhc2UgMTA6IC8vICcgXFxuJ1xuICAgICAgaWYgKHRoaXMub3B0aW9ucy5sb2NhdGlvbnMpIHsgdGhpcy5saW5lU3RhcnQgPSB0aGlzLnBvczsgKyt0aGlzLmN1ckxpbmU7IH1cbiAgICAgIHJldHVybiBcIlwiXG4gICAgY2FzZSA1NjpcbiAgICBjYXNlIDU3OlxuICAgICAgaWYgKHRoaXMuc3RyaWN0KSB7XG4gICAgICAgIHRoaXMuaW52YWxpZFN0cmluZ1Rva2VuKFxuICAgICAgICAgIHRoaXMucG9zIC0gMSxcbiAgICAgICAgICBcIkludmFsaWQgZXNjYXBlIHNlcXVlbmNlXCJcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGlmIChpblRlbXBsYXRlKSB7XG4gICAgICAgIHZhciBjb2RlUG9zID0gdGhpcy5wb3MgLSAxO1xuXG4gICAgICAgIHRoaXMuaW52YWxpZFN0cmluZ1Rva2VuKFxuICAgICAgICAgIGNvZGVQb3MsXG4gICAgICAgICAgXCJJbnZhbGlkIGVzY2FwZSBzZXF1ZW5jZSBpbiB0ZW1wbGF0ZSBzdHJpbmdcIlxuICAgICAgICApO1xuXG4gICAgICAgIHJldHVybiBudWxsXG4gICAgICB9XG4gICAgZGVmYXVsdDpcbiAgICAgIGlmIChjaCA+PSA0OCAmJiBjaCA8PSA1NSkge1xuICAgICAgICB2YXIgb2N0YWxTdHIgPSB0aGlzLmlucHV0LnN1YnN0cih0aGlzLnBvcyAtIDEsIDMpLm1hdGNoKC9eWzAtN10rLylbMF07XG4gICAgICAgIHZhciBvY3RhbCA9IHBhcnNlSW50KG9jdGFsU3RyLCA4KTtcbiAgICAgICAgaWYgKG9jdGFsID4gMjU1KSB7XG4gICAgICAgICAgb2N0YWxTdHIgPSBvY3RhbFN0ci5zbGljZSgwLCAtMSk7XG4gICAgICAgICAgb2N0YWwgPSBwYXJzZUludChvY3RhbFN0ciwgOCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5wb3MgKz0gb2N0YWxTdHIubGVuZ3RoIC0gMTtcbiAgICAgICAgY2ggPSB0aGlzLmlucHV0LmNoYXJDb2RlQXQodGhpcy5wb3MpO1xuICAgICAgICBpZiAoKG9jdGFsU3RyICE9PSBcIjBcIiB8fCBjaCA9PT0gNTYgfHwgY2ggPT09IDU3KSAmJiAodGhpcy5zdHJpY3QgfHwgaW5UZW1wbGF0ZSkpIHtcbiAgICAgICAgICB0aGlzLmludmFsaWRTdHJpbmdUb2tlbihcbiAgICAgICAgICAgIHRoaXMucG9zIC0gMSAtIG9jdGFsU3RyLmxlbmd0aCxcbiAgICAgICAgICAgIGluVGVtcGxhdGVcbiAgICAgICAgICAgICAgPyBcIk9jdGFsIGxpdGVyYWwgaW4gdGVtcGxhdGUgc3RyaW5nXCJcbiAgICAgICAgICAgICAgOiBcIk9jdGFsIGxpdGVyYWwgaW4gc3RyaWN0IG1vZGVcIlxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUob2N0YWwpXG4gICAgICB9XG4gICAgICBpZiAoaXNOZXdMaW5lKGNoKSkge1xuICAgICAgICAvLyBVbmljb2RlIG5ldyBsaW5lIGNoYXJhY3RlcnMgYWZ0ZXIgXFwgZ2V0IHJlbW92ZWQgZnJvbSBvdXRwdXQgaW4gYm90aFxuICAgICAgICAvLyB0ZW1wbGF0ZSBsaXRlcmFscyBhbmQgc3RyaW5nc1xuICAgICAgICByZXR1cm4gXCJcIlxuICAgICAgfVxuICAgICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoY2gpXG4gICAgfVxuICB9O1xuXG4gIC8vIFVzZWQgdG8gcmVhZCBjaGFyYWN0ZXIgZXNjYXBlIHNlcXVlbmNlcyAoJ1xceCcsICdcXHUnLCAnXFxVJykuXG5cbiAgcHAkOS5yZWFkSGV4Q2hhciA9IGZ1bmN0aW9uKGxlbikge1xuICAgIHZhciBjb2RlUG9zID0gdGhpcy5wb3M7XG4gICAgdmFyIG4gPSB0aGlzLnJlYWRJbnQoMTYsIGxlbik7XG4gICAgaWYgKG4gPT09IG51bGwpIHsgdGhpcy5pbnZhbGlkU3RyaW5nVG9rZW4oY29kZVBvcywgXCJCYWQgY2hhcmFjdGVyIGVzY2FwZSBzZXF1ZW5jZVwiKTsgfVxuICAgIHJldHVybiBuXG4gIH07XG5cbiAgLy8gUmVhZCBhbiBpZGVudGlmaWVyLCBhbmQgcmV0dXJuIGl0IGFzIGEgc3RyaW5nLiBTZXRzIGB0aGlzLmNvbnRhaW5zRXNjYFxuICAvLyB0byB3aGV0aGVyIHRoZSB3b3JkIGNvbnRhaW5lZCBhICdcXHUnIGVzY2FwZS5cbiAgLy9cbiAgLy8gSW5jcmVtZW50YWxseSBhZGRzIG9ubHkgZXNjYXBlZCBjaGFycywgYWRkaW5nIG90aGVyIGNodW5rcyBhcy1pc1xuICAvLyBhcyBhIG1pY3JvLW9wdGltaXphdGlvbi5cblxuICBwcCQ5LnJlYWRXb3JkMSA9IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuY29udGFpbnNFc2MgPSBmYWxzZTtcbiAgICB2YXIgd29yZCA9IFwiXCIsIGZpcnN0ID0gdHJ1ZSwgY2h1bmtTdGFydCA9IHRoaXMucG9zO1xuICAgIHZhciBhc3RyYWwgPSB0aGlzLm9wdGlvbnMuZWNtYVZlcnNpb24gPj0gNjtcbiAgICB3aGlsZSAodGhpcy5wb3MgPCB0aGlzLmlucHV0Lmxlbmd0aCkge1xuICAgICAgdmFyIGNoID0gdGhpcy5mdWxsQ2hhckNvZGVBdFBvcygpO1xuICAgICAgaWYgKGlzSWRlbnRpZmllckNoYXIoY2gsIGFzdHJhbCkpIHtcbiAgICAgICAgdGhpcy5wb3MgKz0gY2ggPD0gMHhmZmZmID8gMSA6IDI7XG4gICAgICB9IGVsc2UgaWYgKGNoID09PSA5MikgeyAvLyBcIlxcXCJcbiAgICAgICAgdGhpcy5jb250YWluc0VzYyA9IHRydWU7XG4gICAgICAgIHdvcmQgKz0gdGhpcy5pbnB1dC5zbGljZShjaHVua1N0YXJ0LCB0aGlzLnBvcyk7XG4gICAgICAgIHZhciBlc2NTdGFydCA9IHRoaXMucG9zO1xuICAgICAgICBpZiAodGhpcy5pbnB1dC5jaGFyQ29kZUF0KCsrdGhpcy5wb3MpICE9PSAxMTcpIC8vIFwidVwiXG4gICAgICAgICAgeyB0aGlzLmludmFsaWRTdHJpbmdUb2tlbih0aGlzLnBvcywgXCJFeHBlY3RpbmcgVW5pY29kZSBlc2NhcGUgc2VxdWVuY2UgXFxcXHVYWFhYXCIpOyB9XG4gICAgICAgICsrdGhpcy5wb3M7XG4gICAgICAgIHZhciBlc2MgPSB0aGlzLnJlYWRDb2RlUG9pbnQoKTtcbiAgICAgICAgaWYgKCEoZmlyc3QgPyBpc0lkZW50aWZpZXJTdGFydCA6IGlzSWRlbnRpZmllckNoYXIpKGVzYywgYXN0cmFsKSlcbiAgICAgICAgICB7IHRoaXMuaW52YWxpZFN0cmluZ1Rva2VuKGVzY1N0YXJ0LCBcIkludmFsaWQgVW5pY29kZSBlc2NhcGVcIik7IH1cbiAgICAgICAgd29yZCArPSBjb2RlUG9pbnRUb1N0cmluZyQxKGVzYyk7XG4gICAgICAgIGNodW5rU3RhcnQgPSB0aGlzLnBvcztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgICBmaXJzdCA9IGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gd29yZCArIHRoaXMuaW5wdXQuc2xpY2UoY2h1bmtTdGFydCwgdGhpcy5wb3MpXG4gIH07XG5cbiAgLy8gUmVhZCBhbiBpZGVudGlmaWVyIG9yIGtleXdvcmQgdG9rZW4uIFdpbGwgY2hlY2sgZm9yIHJlc2VydmVkXG4gIC8vIHdvcmRzIHdoZW4gbmVjZXNzYXJ5LlxuXG4gIHBwJDkucmVhZFdvcmQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgd29yZCA9IHRoaXMucmVhZFdvcmQxKCk7XG4gICAgdmFyIHR5cGUgPSB0eXBlcy5uYW1lO1xuICAgIGlmICh0aGlzLmtleXdvcmRzLnRlc3Qod29yZCkpIHtcbiAgICAgIHR5cGUgPSBrZXl3b3JkcyQxW3dvcmRdO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5maW5pc2hUb2tlbih0eXBlLCB3b3JkKVxuICB9O1xuXG4gIC8vIEFjb3JuIGlzIGEgdGlueSwgZmFzdCBKYXZhU2NyaXB0IHBhcnNlciB3cml0dGVuIGluIEphdmFTY3JpcHQuXG5cbiAgdmFyIHZlcnNpb24gPSBcIjguMy4wXCI7XG5cbiAgUGFyc2VyLmFjb3JuID0ge1xuICAgIFBhcnNlcjogUGFyc2VyLFxuICAgIHZlcnNpb246IHZlcnNpb24sXG4gICAgZGVmYXVsdE9wdGlvbnM6IGRlZmF1bHRPcHRpb25zLFxuICAgIFBvc2l0aW9uOiBQb3NpdGlvbixcbiAgICBTb3VyY2VMb2NhdGlvbjogU291cmNlTG9jYXRpb24sXG4gICAgZ2V0TGluZUluZm86IGdldExpbmVJbmZvLFxuICAgIE5vZGU6IE5vZGUsXG4gICAgVG9rZW5UeXBlOiBUb2tlblR5cGUsXG4gICAgdG9rVHlwZXM6IHR5cGVzLFxuICAgIGtleXdvcmRUeXBlczoga2V5d29yZHMkMSxcbiAgICBUb2tDb250ZXh0OiBUb2tDb250ZXh0LFxuICAgIHRva0NvbnRleHRzOiB0eXBlcyQxLFxuICAgIGlzSWRlbnRpZmllckNoYXI6IGlzSWRlbnRpZmllckNoYXIsXG4gICAgaXNJZGVudGlmaWVyU3RhcnQ6IGlzSWRlbnRpZmllclN0YXJ0LFxuICAgIFRva2VuOiBUb2tlbixcbiAgICBpc05ld0xpbmU6IGlzTmV3TGluZSxcbiAgICBsaW5lQnJlYWs6IGxpbmVCcmVhayxcbiAgICBsaW5lQnJlYWtHOiBsaW5lQnJlYWtHLFxuICAgIG5vbkFTQ0lJd2hpdGVzcGFjZTogbm9uQVNDSUl3aGl0ZXNwYWNlXG4gIH07XG5cbiAgLy8gVGhlIG1haW4gZXhwb3J0ZWQgaW50ZXJmYWNlICh1bmRlciBgc2VsZi5hY29ybmAgd2hlbiBpbiB0aGVcbiAgLy8gYnJvd3NlcikgaXMgYSBgcGFyc2VgIGZ1bmN0aW9uIHRoYXQgdGFrZXMgYSBjb2RlIHN0cmluZyBhbmRcbiAgLy8gcmV0dXJucyBhbiBhYnN0cmFjdCBzeW50YXggdHJlZSBhcyBzcGVjaWZpZWQgYnkgW01vemlsbGEgcGFyc2VyXG4gIC8vIEFQSV1bYXBpXS5cbiAgLy9cbiAgLy8gW2FwaV06IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvU3BpZGVyTW9ua2V5L1BhcnNlcl9BUElcblxuICBmdW5jdGlvbiBwYXJzZShpbnB1dCwgb3B0aW9ucykge1xuICAgIHJldHVybiBQYXJzZXIucGFyc2UoaW5wdXQsIG9wdGlvbnMpXG4gIH1cblxuICAvLyBUaGlzIGZ1bmN0aW9uIHRyaWVzIHRvIHBhcnNlIGEgc2luZ2xlIGV4cHJlc3Npb24gYXQgYSBnaXZlblxuICAvLyBvZmZzZXQgaW4gYSBzdHJpbmcuIFVzZWZ1bCBmb3IgcGFyc2luZyBtaXhlZC1sYW5ndWFnZSBmb3JtYXRzXG4gIC8vIHRoYXQgZW1iZWQgSmF2YVNjcmlwdCBleHByZXNzaW9ucy5cblxuICBmdW5jdGlvbiBwYXJzZUV4cHJlc3Npb25BdChpbnB1dCwgcG9zLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIFBhcnNlci5wYXJzZUV4cHJlc3Npb25BdChpbnB1dCwgcG9zLCBvcHRpb25zKVxuICB9XG5cbiAgLy8gQWNvcm4gaXMgb3JnYW5pemVkIGFzIGEgdG9rZW5pemVyIGFuZCBhIHJlY3Vyc2l2ZS1kZXNjZW50IHBhcnNlci5cbiAgLy8gVGhlIGB0b2tlbml6ZXJgIGV4cG9ydCBwcm92aWRlcyBhbiBpbnRlcmZhY2UgdG8gdGhlIHRva2VuaXplci5cblxuICBmdW5jdGlvbiB0b2tlbml6ZXIoaW5wdXQsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gUGFyc2VyLnRva2VuaXplcihpbnB1dCwgb3B0aW9ucylcbiAgfVxuXG4gIGV4cG9ydHMuTm9kZSA9IE5vZGU7XG4gIGV4cG9ydHMuUGFyc2VyID0gUGFyc2VyO1xuICBleHBvcnRzLlBvc2l0aW9uID0gUG9zaXRpb247XG4gIGV4cG9ydHMuU291cmNlTG9jYXRpb24gPSBTb3VyY2VMb2NhdGlvbjtcbiAgZXhwb3J0cy5Ub2tDb250ZXh0ID0gVG9rQ29udGV4dDtcbiAgZXhwb3J0cy5Ub2tlbiA9IFRva2VuO1xuICBleHBvcnRzLlRva2VuVHlwZSA9IFRva2VuVHlwZTtcbiAgZXhwb3J0cy5kZWZhdWx0T3B0aW9ucyA9IGRlZmF1bHRPcHRpb25zO1xuICBleHBvcnRzLmdldExpbmVJbmZvID0gZ2V0TGluZUluZm87XG4gIGV4cG9ydHMuaXNJZGVudGlmaWVyQ2hhciA9IGlzSWRlbnRpZmllckNoYXI7XG4gIGV4cG9ydHMuaXNJZGVudGlmaWVyU3RhcnQgPSBpc0lkZW50aWZpZXJTdGFydDtcbiAgZXhwb3J0cy5pc05ld0xpbmUgPSBpc05ld0xpbmU7XG4gIGV4cG9ydHMua2V5d29yZFR5cGVzID0ga2V5d29yZHMkMTtcbiAgZXhwb3J0cy5saW5lQnJlYWsgPSBsaW5lQnJlYWs7XG4gIGV4cG9ydHMubGluZUJyZWFrRyA9IGxpbmVCcmVha0c7XG4gIGV4cG9ydHMubm9uQVNDSUl3aGl0ZXNwYWNlID0gbm9uQVNDSUl3aGl0ZXNwYWNlO1xuICBleHBvcnRzLnBhcnNlID0gcGFyc2U7XG4gIGV4cG9ydHMucGFyc2VFeHByZXNzaW9uQXQgPSBwYXJzZUV4cHJlc3Npb25BdDtcbiAgZXhwb3J0cy50b2tDb250ZXh0cyA9IHR5cGVzJDE7XG4gIGV4cG9ydHMudG9rVHlwZXMgPSB0eXBlcztcbiAgZXhwb3J0cy50b2tlbml6ZXIgPSB0b2tlbml6ZXI7XG4gIGV4cG9ydHMudmVyc2lvbiA9IHZlcnNpb247XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxufSkpKTtcbiIsIi8vIGdsb2JhbCB1dGlsXG4vLyBjb25zdCBpblJhbmdlID0gKHBvcywgbG9jKSA9PiB7XG4vLyAgIGNvbnN0IHtzdGFydCwgZW5kfSA9IGxvYztcbi8vICAgcmV0dXJuIChzdGFydC5saW5lIDw9IHBvcy5saW5lICYmIHBvcy5saW5lIDw9IGVuZC5saW5lKSAmJlxuLy8gICAgIChzdGFydC5jb2x1bW4gPD0gcG9zLmNvbHVtbiAmJiBwb3MuY29sdW1uIDw9IGVuZC5jb2x1bW4pXG4vLyB9XG5jb25zdCBwb3BJZHggPSAoaWR4LCBhcnIpID0+IHtcbiAgcmV0dXJuIGFyci5zbGljZSgwLCBpZHgpLmNvbmNhdChhcnIuc2xpY2UoaWR4ICsgMSwgYXJyLmxlbmd0aCkpO1xufVxuXG4vLyBzYXZlIG9yaWdpbmFsIHNvdXJjZVxudmFyIF9zcmMgPSBcIlwiO1xuY29uc3QgaW5pdFNyYyA9IChzcmMpID0+IF9zcmMgPSBzcmM7XG5jb25zdCBzbGljZVNyYyA9IChzdGFydCwgZW5kKSA9PiB7XG4gIHJldHVybiBfc3JjLnNsaWNlKHN0YXJ0LCBlbmQpO1xufVxuXG5cbi8vIEhhbmRsZSB0cmFpbGluZyBjb21tYVxudmFyIF9jb21tYXMgPSBbXTtcbmNvbnN0IGluaXRDb21tYSA9ICgpID0+IF9jb21tYXMgPSBbXTtcbmNvbnN0IGFkZENvbW1hID0gcG9zID0+IF9jb21tYXMucHVzaChwb3MpO1xuY29uc3QgY2hlY2tDb21tYSA9IChzdGFydCwgZW5kLCBsYXN0Q2hhcikgPT4ge1xuICBjb25zdCBjb2RlID0gc2xpY2VTcmMoc3RhcnQsIGVuZCk7XG4gIFxuICAvLyByZWZpbmUgcmFuZ2VzIGJ5IGxhc3RDaGFyXG4gIGxldCBwYXNzQ2hhciA9IHRydWU7XG4gIGxldCBwYXNzQ29tbWEgPSB0cnVlO1xuICBsZXQgb2Zmc2V0ID0gMDtcbiAgZm9yIChsZXQgaSA9IGNvZGUubGVuZ3RoIC0gMTsgaSA+PSAwIDsgaSAtPSAxKSB7XG4gICAgbGV0IGMgPSBjb2RlW2ldO1xuICAgIGlmIChjID09PSAnICcgfHwgYyA9PT0gJ1xcbicgfHwgYyA9PT0gJ1xcdCcpIGNvbnRpbnVlO1xuICAgIGVsc2UgaWYgKGMgPT09ICcsJyAmJiBwYXNzQ29tbWEpIHBhc3NDb21tYSA9IGZhbHNlO1xuICAgIGVsc2UgaWYgKGNvZGVbaV0gPT09IGxhc3RDaGFyICYmIHBhc3NDaGFyKSBwYXNzQ2hhciA9IGZhbHNlO1xuICAgIGVsc2UgeyBvZmZzZXQgPSBpOyBicmVhazsgfVxuICB9XG4gIHN0YXJ0ICs9IG9mZnNldDtcblxuICBmb3IgKGxldCBpID0gMCA7IGkgPCBfY29tbWFzLmxlbmd0aCA7IGkgKz0gMSkge1xuICAgIGxldCBjb21tYVBvcyA9IF9jb21tYXNbaV07XG4gICAgaWYgKHN0YXJ0IDw9IGNvbW1hUG9zICYmIGNvbW1hUG9zIDwgZW5kKSB7XG4gICAgICBfY29tbWFzID0gcG9wSWR4KGksIF9jb21tYXMpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxuLy8gY2hlY2tDb3ZlckNhbGxFeHByZXNzaW9uQW5kQXN5bmNBcnJvd0hlYWRcbmNvbnN0IGNoZWNrQ292ZXJDYWxsRXhwcmVzc2lvbkFuZEFzeW5jQXJyb3dIZWFkID0gKHN0YXJ0LCBlbmQpID0+IHtcbiAgbGV0IGNvZGUgPSBzbGljZVNyYyhzdGFydCwgZW5kKTtcbiAgcmV0dXJuIGNvZGUuaW5kZXhPZihcIihcIikgPiAtMSAmJiBjb2RlLmluZGV4T2YoXCIpXCIpID4gLTFcbn1cblxuLy8gY3JlYXRlIHNlbWktY29sb24gQ2xhc3NFbGVtZW50XG5jb25zdCBjcmVhdGVTZW1pY29sb24gPSAoc3RhcnQsIGVuZCkgPT4ge1xuICBsZXQgY29kZSA9IHNsaWNlU3JjKHN0YXJ0LCBlbmQpO1xuICBsZXQgY250ID0gY29kZS5zcGxpdChcIjtcIikubGVuZ3RoIC0gMTtcbiAgcmV0dXJuIEFycmF5KGNudCkuZmlsbChudWxsKTtcbn1cblxuLy8gaW5pdFxuY29uc3QgaW5pdCA9IChzcmMpID0+IHtcbiAgaW5pdFNyYyhzcmMpO1xuICBpbml0Q29tbWEoKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGluaXQsXG4gIGFkZENvbW1hLFxuICBjaGVja0NvbW1hLFxuICBjcmVhdGVTZW1pY29sb24sXG4gIGNoZWNrQ292ZXJDYWxsRXhwcmVzc2lvbkFuZEFzeW5jQXJyb3dIZWFkLFxufTtcbiIsImNsYXNzIExleGljYWxOb2RlIHtcbiAgY29uc3RydWN0b3Ioa2luZCwgc3RyKSB7XG4gICAgdGhpcy5raW5kID0ga2luZDtcbiAgICB0aGlzLnN0ciA9IHN0cjtcbiAgfVxuICBcbiAgY29tcHJlc3MoKSB7XG4gICAgcmV0dXJuIFt0aGlzLmtpbmQsIHRoaXMuc3RyXTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IExleGljYWxOb2RlO1xuIiwiY29uc3QgTGV4aWNhbE5vZGUgPSByZXF1aXJlKCcuL0xleGljYWxOb2RlJyk7XG5cbmNsYXNzIE5vZGUge1xuICBjb25zdHJ1Y3RvcihraW5kLCBlbGVtLCBpbmRleCwgY2hpbGRyZW4sIHBhcmFtcykge1xuICAgIGlmIChjaGlsZHJlbiA9PT0gdW5kZWZpbmVkKSBjaGlsZHJlbiA9IFtdO1xuICAgIGlmIChwYXJhbXMgPT09IHVuZGVmaW5lZCkgcGFyYW1zID0gW107XG4gICAgaWYgKGVsZW0/LmxvYykgdGhpcy5sb2MgPSBlbGVtLmxvYztcbiAgICB0aGlzLmtpbmQgPSBraW5kO1xuICAgIHRoaXMuaW5kZXggPSBpbmRleDtcbiAgICB0aGlzLmNoaWxkcmVuID0gY2hpbGRyZW47XG4gICAgdGhpcy5wYXJhbXMgPSBwYXJhbXM7XG4gIH1cblxuICBjb21wcmVzcygpIHtcbiAgICBsZXQgcm9vdCA9IFtdO1xuICAgIGxldCBxdWV1ZSA9IFt7IHBhcmVudDogcm9vdCwgdGFyZ2V0OiB0aGlzfV07XG5cbiAgICB3aGlsZSAocXVldWUubGVuZ3RoID4gMCkge1xuICAgICAgbGV0IHsgcGFyZW50LCB0YXJnZXQgfSA9IHF1ZXVlLnNoaWZ0KCk7XG4gICAgICBpZiAodGFyZ2V0IGluc3RhbmNlb2YgTGV4aWNhbE5vZGUpXG4gICAgICAgIHBhcmVudC5wdXNoKHRhcmdldC5jb21wcmVzcygpKTtcbiAgICAgIGVsc2UgaWYgKHRhcmdldCBpbnN0YW5jZW9mIE5vZGUpIHtcbiAgICAgICAgbGV0IGFyciA9IFtdO1xuICAgICAgICBsZXQgcmVzdWx0ID0gW1xuICAgICAgICAgIHRhcmdldC5pbmRleCxcbiAgICAgICAgICBhcnIsXG4gICAgICAgICAgdGFyZ2V0LnBhcmFtcy5tYXAoTnVtYmVyKSxcbiAgICAgICAgICB0YXJnZXQuY29tcHJlc3NlZExvYygpLFxuICAgICAgICBdO1xuICAgICAgICBwYXJlbnQucHVzaChyZXN1bHQpO1xuICAgICAgICB0YXJnZXQuY2hpbGRyZW4uZm9yRWFjaChjaGlsZCA9PiB7XG4gICAgICAgICAgcXVldWUucHVzaCh7IHBhcmVudDogYXJyLCB0YXJnZXQ6IGNoaWxkIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhcmVudC5wdXNoKHRhcmdldCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHJvb3RbMF07XG4gIH1cblxuICBjb21wcmVzc2VkTG9jKCkge1xuICAgIGlmICghdGhpcy5sb2MpIHJldHVybiBbLTEsIC0xLCAtMSwgLTFdO1xuICAgIGxldCB7IHN0YXJ0LCBlbmQgfSA9IHRoaXMubG9jO1xuICAgIHJldHVybiBbc3RhcnQubGluZSwgc3RhcnQuY29sdW1uLCBlbmQubGluZSwgZW5kLmNvbHVtbl07XG4gIH1cbn1cbk5vZGUuZnJvbUxpc3QgPSAoa2luZCwgZWxlbXMsIGdlbkNoaWxkLCBwYXJhbXMpID0+IHtcbiAgbGV0IGxpc3Q7XG4gIGZvciAobGV0IGVsZW0gb2YgZWxlbXMpIHtcbiAgICBsZXQgY2hpbGQgPSBnZW5DaGlsZChlbGVtKTtcbiAgICBpZiAobGlzdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBsaXN0ID0gbmV3IE5vZGUoa2luZCwgZWxlbSwgMCwgW2NoaWxkXSwgcGFyYW1zKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbGlzdCA9IG5ldyBOb2RlKGtpbmQsIGVsZW0sIDEsIFtsaXN0LCBjaGlsZF0sIHBhcmFtcyk7XG4gICAgICBsaXN0LmVuZCA9IGNoaWxkLmVuZDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGxpc3Q7XG59XG5Ob2RlLmdldFJocyA9IChuYW1lTGlzdCwgZ2VuTGlzdCwgZ2l2ZW4pID0+IHtcbiAgbGV0IGluZGV4ID0gbmFtZUxpc3QuaW5kZXhPZihnaXZlbi50eXBlKTtcbiAgaWYgKGluZGV4ID09PSAtMSkgcmV0dXJuIG51bGw7XG4gIGxldCBjaGlsZCA9IGdlbkxpc3RbaW5kZXhdKGdpdmVuKTtcbiAgcmV0dXJuIHsgaW5kZXgsIGNoaWxkIH07XG59XG5Ob2RlLlRPRE8gPSAobXNnKSA9PiB7XG4gIHRocm93IGBbVE9ET10gJHttc2d9YFxufTtcblxuTm9kZS5nZXRCaW5hcnkgPSAoZ2l2ZW4sIG9wcywgZ2VuTGVmdCwgZ2VuUmlnaHQpID0+IHtcbiAgbGV0IHsgb3BlcmF0b3IsIGxlZnQsIHJpZ2h0IH0gPSBnaXZlbjtcbiAgbGV0IGluZGV4ID0gb3BzLmluZGV4T2Yob3BlcmF0b3IpICsgMTtcbiAgbGV0IGluZm8gPSB7IGluZGV4IH07XG4gIGlmIChpbmRleCA+IDApIHtcbiAgICBsZXQgbCA9IGdlbkxlZnQobGVmdCk7XG4gICAgbGV0IHIgPSBnZW5SaWdodChyaWdodCk7XG4gICAgaW5mby5jaGlsZHJlbiA9IFtsLCByXTtcbiAgfSBlbHNlIHtcbiAgICBsZXQgZXhwciA9IGdlblJpZ2h0KGdpdmVuKTtcbiAgICBpbmZvLmNoaWxkcmVuID0gW2V4cHJdO1xuICB9XG4gIHJldHVybiBpbmZvO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IE5vZGVcbiIsImNvbnN0IGFjb3JuID0gcmVxdWlyZShcImFjb3JuXCIpO1xuY29uc3QgeyBpbml0LCBhZGRDb21tYSB9ID0gcmVxdWlyZShcIi4vR2xvYmFsXCIpO1xuXG5jbGFzcyBUcmFuc2xhdG9yIHtcbiAgY29uc3RydWN0b3IoZWNtYVZlcnNpb24pIHtcbiAgICB0aGlzLmVjbWFWZXJzaW9uID0gZWNtYVZlcnNpb247XG4gICAgdGhpcy5TY3JpcHQgPSByZXF1aXJlKGAuL2VzJHt0aGlzLmVjbWFWZXJzaW9ufS9TY3JpcHRgKTtcbiAgfVxuXG4gIGFjb3JuUGFyc2UoY29kZSkge1xuICAgIHRyeSB7XG4gICAgICBpbml0KGNvZGUpO1xuICAgICAgcmV0dXJuIGFjb3JuLnBhcnNlKGNvZGUsIHtcbiAgICAgICAgZWNtYVZlcnNpb246IHRoaXMuZWNtYVZlcnNpb24sXG4gICAgICAgIHByZXNlcnZlUGFyZW5zOiB0cnVlLFxuICAgICAgICBsb2NhdGlvbnM6IHRydWUsXG4gICAgICAgIG9uVHJhaWxpbmdDb21tYTogKG9mZnNldCwgXykgPT4gYWRkQ29tbWEob2Zmc2V0KSxcbiAgICAgIH0pO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoYFtTeW50YXhFcnJvcl0gJHtlfWApO1xuICAgIH1cbiAgfVxuXG4gIHRyYW5zKGFjb3JuQXN0KSB7XG4gICAgcmV0dXJuIHRoaXMuU2NyaXB0KGFjb3JuQXN0KTtcbiAgfVxuXG4gIHBhcnNlKGNvZGUpIHtcbiAgICBjb25zdCBhY29ybkFzdCA9IHRoaXMuYWNvcm5QYXJzZShjb2RlKTtcbiAgICByZXR1cm4gdGhpcy50cmFucyhhY29ybkFzdCk7XG4gIH1cblxuICBwYXJzZVdpdGhDb21wcmVzcyhjb2RlKSB7XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHRoaXMucGFyc2UoY29kZSkuY29tcHJlc3MoKSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBUcmFuc2xhdG9yO1xuIiwiY29uc3QgTm9kZSA9IHJlcXVpcmUoJy4uL05vZGUnKTtcblxuLy8gQWRkaXRpdmVFeHByZXNzaW9uW1lpZWxkLCBBd2FpdF0gOlxuLy8gICAgTXVsdGlwbGljYXRpdmVFeHByZXNzaW9uWz9ZaWVsZCwgP0F3YWl0XVxuLy8gICAgQWRkaXRpdmVFeHByZXNzaW9uWz9ZaWVsZCwgP0F3YWl0XSArIE11bHRpcGxpY2F0aXZlRXhwcmVzc2lvbls/WWllbGQsID9Bd2FpdF1cbi8vICAgIEFkZGl0aXZlRXhwcmVzc2lvbls/WWllbGQsID9Bd2FpdF0gLSBNdWx0aXBsaWNhdGl2ZUV4cHJlc3Npb25bP1lpZWxkLCA/QXdhaXRdXG5sZXQgQWRkaXRpdmVFeHByZXNzaW9uID0gKFlpZWxkLCBBd2FpdCkgPT4gKGdpdmVuKSA9PiB7XG4gIGxldCBNdWx0aXBsaWNhdGl2ZUV4cHJlc3Npb24gPSByZXF1aXJlKCcuL011bHRpcGxpY2F0aXZlRXhwcmVzc2lvbicpO1xuXG4gIGxldCBwYXJhbXMgPSBbWWllbGQsIEF3YWl0XTtcbiAgbGV0IHsgdHlwZSB9ID0gZ2l2ZW47XG4gIHN3aXRjaCAodHlwZSkge1xuICAgIGNhc2UgJ0F3YWl0RXhwcmVzc2lvbic6XG4gICAgY2FzZSAnVW5hcnlFeHByZXNzaW9uJzpcbiAgICBjYXNlICdVcGRhdGVFeHByZXNzaW9uJzpcbiAgICBjYXNlICdDYWxsRXhwcmVzc2lvbic6XG4gICAgY2FzZSAnTmV3RXhwcmVzc2lvbic6XG4gICAgY2FzZSAnTWVtYmVyRXhwcmVzc2lvbic6XG4gICAgY2FzZSAnT2JqZWN0RXhwcmVzc2lvbic6XG4gICAgY2FzZSAnQXJyYXlFeHByZXNzaW9uJzpcbiAgICBjYXNlICdGdW5jdGlvbkV4cHJlc3Npb24nOlxuICAgIGNhc2UgJ0NsYXNzRXhwcmVzc2lvbic6XG4gICAgY2FzZSAnU2VxdWVuY2VFeHByZXNzaW9uJzpcbiAgICBjYXNlICdQYXJlbnRoZXNpemVkRXhwcmVzc2lvbic6XG4gICAgY2FzZSAnVGFnZ2VkVGVtcGxhdGVFeHByZXNzaW9uJzpcbiAgICBjYXNlICdUZW1wbGF0ZUxpdGVyYWwnOlxuICAgIGNhc2UgJ0lkZW50aWZpZXInOlxuICAgIGNhc2UgJ1RoaXNFeHByZXNzaW9uJzpcbiAgICBjYXNlICdBcnJheVBhdHRlcm4nOlxuICAgIGNhc2UgJ09iamVjdFBhdHRlcm4nOlxuICAgIGNhc2UgJ01ldGFQcm9wZXJ0eSc6XG4gICAgY2FzZSAnTGl0ZXJhbCc6IHtcbiAgICAgIGxldCBleHByID0gTXVsdGlwbGljYXRpdmVFeHByZXNzaW9uKFlpZWxkLCBBd2FpdCkoZ2l2ZW4pO1xuICAgICAgcmV0dXJuIG5ldyBOb2RlKCdBZGRpdGl2ZUV4cHJlc3Npb24nLCBnaXZlbiwgMCwgW2V4cHJdLCBwYXJhbXMpO1xuICAgIH1cbiAgICBjYXNlICdCaW5hcnlFeHByZXNzaW9uJzoge1xuICAgICAgbGV0IHsgaW5kZXgsIGNoaWxkcmVuIH0gPSBOb2RlLmdldEJpbmFyeShcbiAgICAgICAgZ2l2ZW4sXG4gICAgICAgIFsnKycsICctJ10sXG4gICAgICAgIEFkZGl0aXZlRXhwcmVzc2lvbihZaWVsZCwgQXdhaXQpLFxuICAgICAgICBNdWx0aXBsaWNhdGl2ZUV4cHJlc3Npb24oWWllbGQsIEF3YWl0KSxcbiAgICAgICk7XG4gICAgICByZXR1cm4gbmV3IE5vZGUoJ0FkZGl0aXZlRXhwcmVzc2lvbicsIGdpdmVuLCBpbmRleCwgY2hpbGRyZW4sIHBhcmFtcyk7XG4gICAgfVxuICAgIGRlZmF1bHQ6XG4gICAgICBOb2RlLlRPRE8oYCR7dHlwZX0gQCBBZGRpdGl2ZUV4cHJlc3Npb25gKTtcbiAgfVxuICBOb2RlLlRPRE8oJ0FkZGl0aXZlRXhwcmVzc2lvbicpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEFkZGl0aXZlRXhwcmVzc2lvbjtcbiIsImNvbnN0IE5vZGUgPSByZXF1aXJlKCcuLi9Ob2RlJyk7XG5cbi8vIEFyZ3VtZW50TGlzdFtZaWVsZCwgQXdhaXRdIDpcbi8vICAgIEFzc2lnbm1lbnRFeHByZXNzaW9uWytJbiwgP1lpZWxkLCA/QXdhaXRdXG4vLyAgICAuLi4gQXNzaWdubWVudEV4cHJlc3Npb25bK0luLCA/WWllbGQsID9Bd2FpdF1cbi8vICAgIEFyZ3VtZW50TGlzdFs/WWllbGQsID9Bd2FpdF0gLCBBc3NpZ25tZW50RXhwcmVzc2lvblsrSW4sID9ZaWVsZCwgP0F3YWl0XVxuLy8gICAgQXJndW1lbnRMaXN0Wz9ZaWVsZCwgP0F3YWl0XSAsIC4uLiBBc3NpZ25tZW50RXhwcmVzc2lvblsrSW4sID9ZaWVsZCwgP0F3YWl0XVxubGV0IEFyZ3VtZW50TGlzdCA9IChZaWVsZCwgQXdhaXQpID0+IChnaXZlbikgPT4ge1xuICBjb25zdCBBc3NpZ25tZW50RXhwcmVzc2lvbiA9IHJlcXVpcmUoJy4vQXNzaWdubWVudEV4cHJlc3Npb24nKTtcbiAgbGV0IHBhcmFtcyA9IFtZaWVsZCwgQXdhaXRdO1xuICBsZXQgc2l6ZSA9IGdpdmVuLmxlbmd0aDtcbiAgbGV0IGxhc3QgPSBnaXZlbi5wb3AoKTtcbiAgbGV0IGV4cHIsIGluZGV4O1xuICBpZiAobGFzdC50eXBlICE9ICdTcHJlYWRFbGVtZW50Jykge1xuICAgIGV4cHIgPSBBc3NpZ25tZW50RXhwcmVzc2lvbih0cnVlLCBZaWVsZCwgQXdhaXQpKGxhc3QpO1xuICAgIGluZGV4ID0gMDtcbiAgfSBlbHNlIHtcbiAgICBleHByID0gQXNzaWdubWVudEV4cHJlc3Npb24odHJ1ZSwgWWllbGQsIEF3YWl0KShsYXN0LmFyZ3VtZW50KTtcbiAgICBpbmRleCA9IDE7XG4gIH1cblxuICBpZiAoc2l6ZSA9PSAxKSB7XG4gICAgcmV0dXJuIG5ldyBOb2RlKCdBcmd1bWVudExpc3QnLCBsYXN0LCBpbmRleCwgW2V4cHJdLCBwYXJhbXMpO1xuICB9IGVsc2Uge1xuICAgIGluZGV4ICs9IDI7XG4gICAgbGV0IGxpc3QgPSBBcmd1bWVudExpc3QoWWllbGQsIEF3YWl0KShnaXZlbik7XG4gICAgcmV0dXJuIG5ldyBOb2RlKCdBcmd1bWVudExpc3QnLCBsYXN0LCBpbmRleCwgW2xpc3QsIGV4cHJdLCBwYXJhbXMpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQXJndW1lbnRMaXN0O1xuIiwiY29uc3QgTm9kZSA9IHJlcXVpcmUoJy4uL05vZGUnKTtcblxuLy8gQXJndW1lbnRzW1lpZWxkLCBBd2FpdF0gOlxuLy8gICAgKCApXG4vLyAgICAoIEFyZ3VtZW50TGlzdFs/WWllbGQsID9Bd2FpdF0gKVxuLy8gICAgKCBBcmd1bWVudExpc3RbP1lpZWxkLCA/QXdhaXRdICwgKVxubGV0IEFyZ3VtZW50cyA9IChZaWVsZCwgQXdhaXQpID0+IChnaXZlbiwgaGFzQ29tbWEpID0+IHtcbiAgY29uc3QgQXJndW1lbnRMaXN0ID0gcmVxdWlyZSgnLi9Bcmd1bWVudExpc3QnKTtcbiAgbGV0IHBhcmFtcyA9IFtZaWVsZCwgQXdhaXRdO1xuICBsZXQgc2l6ZSA9IGdpdmVuLmxlbmd0aDtcbiAgaWYgKHNpemUgPT0gMCkge1xuICAgIHJldHVybiBuZXcgTm9kZSgnQXJndW1lbnRzJywgZ2l2ZW4sIDAsIFtdLCBwYXJhbXMpO1xuICB9IGVsc2Uge1xuICAgIGxldCBsaXN0ID0gQXJndW1lbnRMaXN0KFlpZWxkLCBBd2FpdCkoZ2l2ZW4pO1xuICAgIGxldCBpZHggPSBoYXNDb21tYSA/IDIgOiAxO1xuICAgIHJldHVybiBuZXcgTm9kZSgnQXJndW1lbnRzJywgZ2l2ZW4sIGlkeCwgW2xpc3RdLCBwYXJhbXMpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQXJndW1lbnRzO1xuIiwiY29uc3QgTm9kZSA9IHJlcXVpcmUoJy4uL05vZGUnKTtcbmNvbnN0IHsgY2hlY2tDb21tYSB9ID0gcmVxdWlyZSgnLi4vR2xvYmFsJyk7XG5cbi8vIEFycmF5QmluZGluZ1BhdHRlcm5bWWllbGQsIEF3YWl0XToge1xuLy8gICBgW2AgRWxpc2lvbj8gQmluZGluZ1Jlc3RFbGVtZW50Wz9ZaWVsZCwgP0F3YWl0XT8gYF1gIHxcbi8vICAgYFtgIEJpbmRpbmdFbGVtZW50TGlzdFs/WWllbGQsID9Bd2FpdF0gYF1gIHxcbi8vICAgYFtgIEJpbmRpbmdFbGVtZW50TGlzdFs/WWllbGQsID9Bd2FpdF0gYCxgIEVsaXNpb24/IEJpbmRpbmdSZXN0RWxlbWVudFs/WWllbGQsID9Bd2FpdF0/IGBdYFxuLy8gfVxubGV0IEFycmF5QmluZGluZ1BhdHRlcm4gPSAoWWllbGQsIEF3YWl0KSA9PiAoZ2l2ZW4pID0+IHtcbiAgbGV0IEVsaXNpb24gPSByZXF1aXJlKCcuL0VsaXNpb24nKTtcbiAgbGV0IEJpbmRpbmdFbGVtZW50TGlzdCA9IHJlcXVpcmUoJy4vQmluZGluZ0VsZW1lbnRMaXN0Jyk7XG4gIGxldCBCaW5kaW5nUmVzdEVsZW1lbnQgPSByZXF1aXJlKCcuL0JpbmRpbmdSZXN0RWxlbWVudCcpO1xuICBcbiAgbGV0IHBhcmFtcyA9IFtZaWVsZCwgQXdhaXRdO1xuICBsZXQgZWxlbWVudHMgPSBnaXZlbi5lbGVtZW50cztcbiAgXG4gIC8vIFswLDBdLCBbMCwyXVxuICBpZiAoZWxlbWVudHMuZXZlcnkoZWxlbSA9PiBlbGVtID09PSBudWxsKSkge1xuICAgIGxldCBlbGlzaW9uID0gbnVsbDtcbiAgICBpZiAoZWxlbWVudHMubGVuZ3RoID4gMCkgZWxpc2lvbiA9IEVsaXNpb24oZWxlbWVudHMpO1xuICAgIHJldHVybiBuZXcgTm9kZSgnQXJyYXlCaW5kaW5nUGF0dGVybicsIGdpdmVuLCAwLCBbZWxpc2lvbiwgbnVsbF0sIHBhcmFtcyk7XG4gIH1cbiAgZWxzZSB7XG4gICAgbGV0IGxhc3RFbGVtID0gZWxlbWVudHMucG9wKCk7XG4gICAgXG4gICAgLy8gWzIsMF0sIFsyLDJdXG4gICAgY29uc3QgaGFzQ29tbWEgPSBjaGVja0NvbW1hKGdpdmVuLnN0YXJ0LCBnaXZlbi5lbmQsICddJyk7XG4gICAgaWYobGFzdEVsZW0gPT09IG51bGwgfHwgaGFzQ29tbWEpIHtcbiAgICAgIGlmKGhhc0NvbW1hKSBlbGVtZW50cy5wdXNoKGxhc3RFbGVtKTtcbiAgICAgIGxldCBudWxsTGlzdCA9IFtdO1xuICAgICAgZm9yIChsZXQgaSA9IGVsZW1lbnRzLmxlbmd0aCAtIDE7IGkgPj0gMCA7IGkgLT0gMSkge1xuICAgICAgICBpZiAoZWxlbWVudHNbaV0gIT09IG51bGwpIGJyZWFrO1xuICAgICAgICBlbHNlIG51bGxMaXN0LnB1c2goZWxlbWVudHMucG9wKCkpO1xuICAgICAgfVxuICAgICAgbGV0IGVsaXNpb24gPSBudWxsO1xuICAgICAgaWYgKG51bGxMaXN0Lmxlbmd0aCA+IDApIGVsaXNpb24gPSBFbGlzaW9uKG51bGxMaXN0KTtcbiAgICAgIGxldCBlbGVtTGlzdCA9IEJpbmRpbmdFbGVtZW50TGlzdChZaWVsZCwgQXdhaXQpKGVsZW1lbnRzKTtcbiAgICAgIHJldHVybiBuZXcgTm9kZSgnQXJyYXlCaW5kaW5nUGF0dGVybicsIGdpdmVuLCAyLCBbZWxlbUxpc3QsIGVsaXNpb24sIG51bGxdLCBwYXJhbXMpO1xuICAgIH0gXG4gICAgLy8gWzAsMV0sIFswLDNdLCBbMiwxXSwgWzIsM11cbiAgICBlbHNlIGlmICggbGFzdEVsZW0udHlwZSA9PT0gJ1Jlc3RFbGVtZW50Jykge1xuICAgICAgbGV0IHJlc3RFbGVtID0gQmluZGluZ1Jlc3RFbGVtZW50KFlpZWxkLCBBd2FpdCkobGFzdEVsZW0pO1xuICAgICAgLy8gWzAsMV0sIFswLDNdXG4gICAgICBpZiAoZWxlbWVudHMuZXZlcnkoZWxlbSA9PiBlbGVtID09PSBudWxsKSkge1xuICAgICAgICBsZXQgZWxpc2lvbiA9IG51bGw7XG4gICAgICAgIGlmIChlbGVtZW50cy5sZW5ndGggPiAwKSBlbGlzaW9uID0gRWxpc2lvbihlbGVtZW50cyk7XG4gICAgICAgIHJldHVybiBuZXcgTm9kZSgnQXJyYXlCaW5kaW5nUGF0dGVybicsIGdpdmVuLCAwLCBbZWxpc2lvbiwgcmVzdEVsZW1dLCBwYXJhbXMpO1xuICAgICAgfSBcbiAgICAgIC8vIFsyLDFdLCBbMiwzXVxuICAgICAgbGV0IG51bGxMaXN0ID0gW107XG4gICAgICBmb3IgKGxldCBpID0gZWxlbWVudHMubGVuZ3RoIC0gMTsgaSA+PSAwIDsgaSAtPSAxKSB7XG4gICAgICAgIGlmIChlbGVtZW50c1tpXSAhPT0gbnVsbCkgYnJlYWs7XG4gICAgICAgIGVsc2UgbnVsbExpc3QucHVzaChlbGVtZW50cy5wb3AoKSk7XG4gICAgICB9XG4gICAgICBsZXQgZWxpc2lvbiA9IG51bGw7XG4gICAgICBpZiAobnVsbExpc3QubGVuZ3RoID4gMCkgZWxpc2lvbiA9IEVsaXNpb24obnVsbExpc3QpO1xuICAgICAgbGV0IGVsZW1MaXN0ID0gQmluZGluZ0VsZW1lbnRMaXN0KFlpZWxkLCBBd2FpdCkoZWxlbWVudHMpO1xuICAgICAgcmV0dXJuIG5ldyBOb2RlKCdBcnJheUJpbmRpbmdQYXR0ZXJuJywgZ2l2ZW4sIDIsIFtlbGVtTGlzdCwgZWxpc2lvbiwgcmVzdEVsZW1dLCBwYXJhbXMpO1xuICAgIH0gXG4gICAgLy8gWzEsMF1cbiAgICBlbHNlIHtcbiAgICAgIGVsZW1lbnRzLnB1c2gobGFzdEVsZW0pO1xuICAgICAgbGV0IGVsZW1MaXN0ID0gQmluZGluZ0VsZW1lbnRMaXN0KFlpZWxkLCBBd2FpdCkoZWxlbWVudHMpO1xuICAgICAgcmV0dXJuIG5ldyBOb2RlKCdBcnJheUJpbmRpbmdQYXR0ZXJuJywgZ2l2ZW4sIDEsIFtlbGVtTGlzdF0sIHBhcmFtcyk7XG4gICAgfVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQXJyYXlCaW5kaW5nUGF0dGVybjtcbiIsImNvbnN0IE5vZGUgPSByZXF1aXJlKCcuLi9Ob2RlJyk7XG5jb25zdCB7IGNoZWNrQ29tbWEgfSA9IHJlcXVpcmUoJy4uL0dsb2JhbCcpO1xuXG4vLyBBcnJheUxpdGVyYWxbWWllbGQsIEF3YWl0XSA6XG4vLyAgICBbIEVsaXNpb25fb3B0IF1cbi8vICAgIFsgRWxlbWVudExpc3RbP1lpZWxkLCA/QXdhaXRdIF1cbi8vICAgIFsgRWxlbWVudExpc3RbP1lpZWxkLCA/QXdhaXRdICwgRWxpc2lvbl9vcHQgXVxubGV0IEFycmF5TGl0ZXJhbCA9IChZaWVsZCwgQXdhaXQpID0+IChnaXZlbikgPT4ge1xuICBsZXQgRWxpc2lvbiA9IHJlcXVpcmUoJy4vRWxpc2lvbicpO1xuICBsZXQgRWxlbWVudExpc3QgPSByZXF1aXJlKCcuL0VsZW1lbnRMaXN0Jyk7XG5cbiAgbGV0IHBhcmFtcyA9IFtZaWVsZCwgQXdhaXRdO1xuICBsZXQgeyBlbGVtZW50cyB9ID0gZ2l2ZW47XG4gIGxldCBzaXplID0gZWxlbWVudHMubGVuZ3RoO1xuICBcbiAgaWYgKHNpemUgPT0gMCkge1xuICAgIHJldHVybiBuZXcgTm9kZSgnQXJyYXlMaXRlcmFsJywgZ2l2ZW4sIDAsIFtudWxsXSwgcGFyYW1zKTtcbiAgfSBlbHNlIGlmIChlbGVtZW50cy5ldmVyeSh4ID0+IHggPT0gbnVsbCkpIHtcbiAgICBsZXQgZWxpc2lvbiA9IEVsaXNpb24oZWxlbWVudHMpO1xuICAgIHJldHVybiBuZXcgTm9kZSgnQXJyYXlMaXRlcmFsJywgZ2l2ZW4sIDAsIFtlbGlzaW9uXSwgcGFyYW1zKTtcbiAgfSBlbHNlIGlmIChlbGVtZW50c1tzaXplIC0gMV0gIT0gbnVsbCkge1xuICAgIGxldCBsaXN0ID0gRWxlbWVudExpc3QoWWllbGQsIEF3YWl0KShlbGVtZW50cyk7XG4gICAgY29uc3QgaGFzQ29tbWEgPSBjaGVja0NvbW1hKGdpdmVuLnN0YXJ0LCBnaXZlbi5lbmQsICddJyk7XG4gICAgaWYgKGhhc0NvbW1hKSByZXR1cm4gbmV3IE5vZGUoJ0FycmF5TGl0ZXJhbCcsIGdpdmVuLCAyLCBbbGlzdCwgbnVsbF0sIHBhcmFtcyk7XG4gICAgZWxzZSByZXR1cm4gbmV3IE5vZGUoJ0FycmF5TGl0ZXJhbCcsIGdpdmVuLCAxLCBbbGlzdF0sIHBhcmFtcyk7XG4gIH0gZWxzZSB7XG4gICAgbGV0IG51bGxMaXN0ID0gW107XG4gICAgZm9yIChsZXQgaSA9IGVsZW1lbnRzLmxlbmd0aCAtIDE7IGkgPj0gMCA7IGkgLT0gMSkge1xuICAgICAgaWYgKGVsZW1lbnRzW2ldICE9PSBudWxsKSBicmVhaztcbiAgICAgIGVsc2UgbnVsbExpc3QucHVzaChlbGVtZW50cy5wb3AoKSk7XG4gICAgfVxuICAgIGxldCBlbGlzaW9uID0gbnVsbDtcbiAgICBpZiAobnVsbExpc3QubGVuZ3RoID4gMCkgZWxpc2lvbiA9IEVsaXNpb24obnVsbExpc3QpO1xuXG4gICAgbGV0IGxpc3QgPSBFbGVtZW50TGlzdChZaWVsZCwgQXdhaXQpKGVsZW1lbnRzKTtcbiAgICByZXR1cm4gbmV3IE5vZGUoJ0FycmF5TGl0ZXJhbCcsIGdpdmVuLCAyLCBbbGlzdCwgZWxpc2lvbl0sIHBhcmFtcyk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBBcnJheUxpdGVyYWw7XG4iLCJjb25zdCBOb2RlID0gcmVxdWlyZSgnLi4vTm9kZScpO1xuXG4vLyBBcnJvd0Z1bmN0aW9uW0luLCBZaWVsZCwgQXdhaXRdIDpcbi8vICAgIEFycm93UGFyYW1ldGVyc1s/WWllbGQsID9Bd2FpdF0gW25vIExpbmVUZXJtaW5hdG9yIGhlcmVdID0+IENvbmNpc2VCb2R5Wz9Jbl1cbmxldCBBcnJvd0Z1bmN0aW9uID0gKEluLCBZaWVsZCwgQXdhaXQpID0+IChnaXZlbikgPT4ge1xuICBjb25zdCBBcnJvd1BhcmFtZXRlcnMgPSByZXF1aXJlKCcuL0Fycm93UGFyYW1ldGVycycpO1xuICBjb25zdCBDb25jaXNlQm9keSA9IHJlcXVpcmUoJy4vQ29uY2lzZUJvZHknKTtcblxuICAvLyBzZXQgbG9jIGluZm8gZm9yIEFycm93UGFyYW1ldGVyc1xuICBnaXZlbi5wYXJhbXMuc3RhcnQgPSBnaXZlbi5zdGFydFxuICBnaXZlbi5wYXJhbXMuZW5kID0gZ2l2ZW4uYm9keS5zdGFydFxuXG4gIGxldCBwYXJhbXMgPSBbSW4sIFlpZWxkLCBBd2FpdF07XG4gIGxldCBwcyA9IEFycm93UGFyYW1ldGVycyhZaWVsZCwgQXdhaXQpKGdpdmVuLnBhcmFtcyk7XG4gIGxldCBiID0gQ29uY2lzZUJvZHkoSW4pKGdpdmVuLmJvZHkpO1xuICByZXR1cm4gbmV3IE5vZGUoJ0Fycm93RnVuY3Rpb24nLCBnaXZlbiwgMCwgW3BzLCBiXSwgcGFyYW1zKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBBcnJvd0Z1bmN0aW9uO1xuIiwiY29uc3QgTm9kZSA9IHJlcXVpcmUoJy4uL05vZGUnKTtcbmNvbnN0IHsgY2hlY2tDb3ZlckNhbGxFeHByZXNzaW9uQW5kQXN5bmNBcnJvd0hlYWQgfSA9IHJlcXVpcmUoJy4uL0dsb2JhbCcpO1xuXG4vLyBBcnJvd1BhcmFtZXRlcnNbWWllbGQsIEF3YWl0XSA6XG4vLyAgICBCaW5kaW5nSWRlbnRpZmllcls/WWllbGQsID9Bd2FpdF1cbi8vICAgIENvdmVyUGFyZW50aGVzaXplZEV4cHJlc3Npb25BbmRBcnJvd1BhcmFtZXRlckxpc3RbP1lpZWxkLCA/QXdhaXRdXG4vLyBUT0RPIGZpeCBzcGFuXG5sZXQgQXJyb3dQYXJhbWV0ZXJzID0gKFlpZWxkLCBBd2FpdCkgPT4gKGdpdmVuKSA9PiB7XG4gIGNvbnN0IEJpbmRpbmdJZGVudGlmaWVyID0gcmVxdWlyZSgnLi9CaW5kaW5nSWRlbnRpZmllcicpO1xuICBjb25zdCBDb3ZlclBhcmVudGhlc2l6ZWRFeHByZXNzaW9uQW5kQXJyb3dQYXJhbWV0ZXJMaXN0ID0gcmVxdWlyZSgnLi9Db3ZlclBhcmVudGhlc2l6ZWRFeHByZXNzaW9uQW5kQXJyb3dQYXJhbWV0ZXJMaXN0Jyk7XG4gIGxldCBwYXJhbXMgPSBbWWllbGQsIEF3YWl0XTtcbiAgXG4gIC8vIGNoZWNrIGlmIENvdmVyUGFyZW50aGVzaXplZEV4cHJlc3Npb25BbmRBcnJvd1BhcmFtZXRlckxpc3RcbiAgbGV0IGlzQ292ZXIgPSBjaGVja0NvdmVyQ2FsbEV4cHJlc3Npb25BbmRBc3luY0Fycm93SGVhZChnaXZlbi5zdGFydCwgZ2l2ZW4uZW5kKTtcbiAgXG4gIGlmIChpc0NvdmVyKSB7XG4gICAgbGV0IGNvdmVyID0gQ292ZXJQYXJlbnRoZXNpemVkRXhwcmVzc2lvbkFuZEFycm93UGFyYW1ldGVyTGlzdChZaWVsZCwgQXdhaXQpKGdpdmVuKTtcbiAgICByZXR1cm4gbmV3IE5vZGUoJ0Fycm93UGFyYW1ldGVycycsIGdpdmVuLCAxLCBbY292ZXJdLCBwYXJhbXMpO1xuICB9IGVsc2Uge1xuICAgIGxldCBiaW5kaW5nID0gQmluZGluZ0lkZW50aWZpZXIoWWllbGQsIEF3YWl0KShnaXZlblswXSk7XG4gICAgcmV0dXJuIG5ldyBOb2RlKCdBcnJvd1BhcmFtZXRlcnMnLCBnaXZlbiwgMCwgW2JpbmRpbmddLCBwYXJhbXMpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQXJyb3dQYXJhbWV0ZXJzO1xuIiwiY29uc3QgTm9kZSA9IHJlcXVpcmUoJy4uL05vZGUnKTtcblxuLy8gQXNzaWdubWVudEV4cHJlc3Npb25bSW4sIFlpZWxkLCBBd2FpdF0gOlxuLy8gICAgQ29uZGl0aW9uYWxFeHByZXNzaW9uWz9JbiwgP1lpZWxkLCA/QXdhaXRdXG4vLyAgICBbK1lpZWxkXVlpZWxkRXhwcmVzc2lvbls/SW4sID9Bd2FpdF1cbi8vICAgIEFycm93RnVuY3Rpb25bP0luLCA/WWllbGQsID9Bd2FpdF1cbi8vICAgIEFzeW5jQXJyb3dGdW5jdGlvbls/SW4sID9ZaWVsZCwgP0F3YWl0XVxuLy8gICAgTGVmdEhhbmRTaWRlRXhwcmVzc2lvbls/WWllbGQsID9Bd2FpdF0gPSBBc3NpZ25tZW50RXhwcmVzc2lvbls/SW4sID9ZaWVsZCwgP0F3YWl0XVxuLy8gICAgTGVmdEhhbmRTaWRlRXhwcmVzc2lvbls/WWllbGQsID9Bd2FpdF0gQXNzaWdubWVudE9wZXJhdG9yIEFzc2lnbm1lbnRFeHByZXNzaW9uWz9JbiwgP1lpZWxkLCA/QXdhaXRdXG4vLyAgICBMZWZ0SGFuZFNpZGVFeHByZXNzaW9uWz9ZaWVsZCwgP0F3YWl0XSAmJj0gQXNzaWdubWVudEV4cHJlc3Npb25bP0luLCA/WWllbGQsID9Bd2FpdF1cbi8vICAgIExlZnRIYW5kU2lkZUV4cHJlc3Npb25bP1lpZWxkLCA/QXdhaXRdIHx8PSBBc3NpZ25tZW50RXhwcmVzc2lvbls/SW4sID9ZaWVsZCwgP0F3YWl0XVxuLy8gICAgTGVmdEhhbmRTaWRlRXhwcmVzc2lvbls/WWllbGQsID9Bd2FpdF0gPz89IEFzc2lnbm1lbnRFeHByZXNzaW9uWz9JbiwgP1lpZWxkLCA/QXdhaXRdXG5sZXQgQXNzaWdubWVudEV4cHJlc3Npb24gPSAoSW4sIFlpZWxkLCBBd2FpdCkgPT4gKGdpdmVuKSA9PiB7XG4gIGNvbnN0IENvbmRpdGlvbmFsRXhwcmVzc2lvbiA9IHJlcXVpcmUoJy4vQ29uZGl0aW9uYWxFeHByZXNzaW9uJyk7XG4gIGNvbnN0IFlpZWxkRXhwcmVzc2lvbiA9IHJlcXVpcmUoJy4vWWllbGRFeHByZXNzaW9uJyk7XG4gIGNvbnN0IEFycm93RnVuY3Rpb24gPSByZXF1aXJlKCcuL0Fycm93RnVuY3Rpb24nKTtcbiAgY29uc3QgQXN5bmNBcnJvd0Z1bmN0aW9uID0gcmVxdWlyZSgnLi9Bc3luY0Fycm93RnVuY3Rpb24nKTtcbiAgY29uc3QgTGVmdEhhbmRTaWRlRXhwcmVzc2lvbiA9IHJlcXVpcmUoJy4vTGVmdEhhbmRTaWRlRXhwcmVzc2lvbicpO1xuICBsZXQgcGFyYW1zID0gW0luLCBZaWVsZCwgQXdhaXRdO1xuICBsZXQgeyB0eXBlIH0gPSBnaXZlbjtcbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSAnQXdhaXRFeHByZXNzaW9uJzpcbiAgICBjYXNlICdVbmFyeUV4cHJlc3Npb24nOlxuICAgIGNhc2UgJ0xvZ2ljYWxFeHByZXNzaW9uJzpcbiAgICBjYXNlICdCaW5hcnlFeHByZXNzaW9uJzpcbiAgICBjYXNlICdVcGRhdGVFeHByZXNzaW9uJzpcbiAgICBjYXNlICdDYWxsRXhwcmVzc2lvbic6XG4gICAgY2FzZSAnTmV3RXhwcmVzc2lvbic6XG4gICAgY2FzZSAnTWVtYmVyRXhwcmVzc2lvbic6XG4gICAgY2FzZSAnT2JqZWN0RXhwcmVzc2lvbic6XG4gICAgY2FzZSAnQXJyYXlFeHByZXNzaW9uJzpcbiAgICBjYXNlICdGdW5jdGlvbkV4cHJlc3Npb24nOlxuICAgIGNhc2UgJ0NsYXNzRXhwcmVzc2lvbic6XG4gICAgY2FzZSAnU2VxdWVuY2VFeHByZXNzaW9uJzpcbiAgICBjYXNlICdQYXJlbnRoZXNpemVkRXhwcmVzc2lvbic6XG4gICAgY2FzZSAnVGVtcGxhdGVMaXRlcmFsJzpcbiAgICBjYXNlICdUYWdnZWRUZW1wbGF0ZUV4cHJlc3Npb24nOlxuICAgIGNhc2UgJ0lkZW50aWZpZXInOlxuICAgIGNhc2UgJ1RoaXNFeHByZXNzaW9uJzpcbiAgICBjYXNlICdBcnJheVBhdHRlcm4nOlxuICAgIGNhc2UgJ09iamVjdFBhdHRlcm4nOlxuICAgIGNhc2UgJ0NvbmRpdGlvbmFsRXhwcmVzc2lvbic6XG4gICAgY2FzZSAnTWV0YVByb3BlcnR5JzpcbiAgICBjYXNlICdMaXRlcmFsJzoge1xuICAgICAgbGV0IGNvbmQgPSBDb25kaXRpb25hbEV4cHJlc3Npb24oSW4sIFlpZWxkLCBBd2FpdCkoZ2l2ZW4pO1xuICAgICAgcmV0dXJuIG5ldyBOb2RlKCdBc3NpZ25tZW50RXhwcmVzc2lvbicsIGdpdmVuLCAwLCBbY29uZF0sIHBhcmFtcyk7XG4gICAgfVxuICAgIGNhc2UgJ1lpZWxkRXhwcmVzc2lvbic6IHtcbiAgICAgIGxldCBleHByID0gWWllbGRFeHByZXNzaW9uKEluLCBBd2FpdCkoZ2l2ZW4pO1xuICAgICAgcmV0dXJuIG5ldyBOb2RlKCdBc3NpZ25tZW50RXhwcmVzc2lvbicsIGdpdmVuLCAxLCBbZXhwcl0sIHBhcmFtcyk7XG4gICAgfVxuICAgIGNhc2UgJ0Fycm93RnVuY3Rpb25FeHByZXNzaW9uJzoge1xuICAgICAgaWYgKCFnaXZlbi5hc3luYykge1xuICAgICAgICBsZXQgYXJyb3cgPSBBcnJvd0Z1bmN0aW9uKEluLCBZaWVsZCwgQXdhaXQpKGdpdmVuKTtcbiAgICAgICAgcmV0dXJuIG5ldyBOb2RlKCdBc3NpZ25tZW50RXhwcmVzc2lvbicsIGdpdmVuLCAyLCBbYXJyb3ddLCBwYXJhbXMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGV0IGFycm93ID0gQXN5bmNBcnJvd0Z1bmN0aW9uKEluLCBZaWVsZCwgQXdhaXQpKGdpdmVuKTtcbiAgICAgICAgcmV0dXJuIG5ldyBOb2RlKCdBc3NpZ25tZW50RXhwcmVzc2lvbicsIGdpdmVuLCAzLCBbYXJyb3ddLCBwYXJhbXMpO1xuICAgICAgfVxuICAgIH1cbiAgICBjYXNlICdBc3NpZ25tZW50UGF0dGVybic6IHtcbiAgICAgIGNvbnN0IHsgbGVmdCwgcmlnaHQgfSA9IGdpdmVuO1xuICAgICAgY29uc3QgbGhzID0gTGVmdEhhbmRTaWRlRXhwcmVzc2lvbihZaWVsZCwgQXdhaXQpKGxlZnQpO1xuICAgICAgY29uc3QgZXhwciA9IEFzc2lnbm1lbnRFeHByZXNzaW9uKEluLCBZaWVsZCwgQXdhaXQpKHJpZ2h0KTtcbiAgICAgIHJldHVybiBuZXcgTm9kZSgnQXNzaWdubWVudEV4cHJlc3Npb24nLCBnaXZlbiwgNCwgW2xocywgZXhwcl0sIHBhcmFtcyk7XG4gICAgfVxuICAgIGNhc2UgJ0Fzc2lnbm1lbnRFeHByZXNzaW9uJzoge1xuICAgICAgbGV0IHsgbGVmdCwgb3BlcmF0b3IsIHJpZ2h0IH0gPSBnaXZlbjtcbiAgICAgIGxldCBsaHMgPSBMZWZ0SGFuZFNpZGVFeHByZXNzaW9uKFlpZWxkLCBBd2FpdCkobGVmdCk7XG4gICAgICBsZXQgZXhwciA9IEFzc2lnbm1lbnRFeHByZXNzaW9uKEluLCBZaWVsZCwgQXdhaXQpKHJpZ2h0KTtcbiAgICAgIGxldCBub2RlID0gbmV3IE5vZGUoJ0Fzc2lnbm1lbnRFeHByZXNzaW9uJywgZ2l2ZW4sIDQsIFtsaHMsIGV4cHJdLCBwYXJhbXMpO1xuICAgICAgc3dpdGNoIChvcGVyYXRvcikge1xuICAgICAgICBjYXNlICc9JzogYnJlYWs7XG4gICAgICAgIGNhc2UgJyYmPSc6IG5vZGUuaW5kZXggPSA2OyBicmVhaztcbiAgICAgICAgY2FzZSAnfHw9Jzogbm9kZS5pbmRleCA9IDc7IGJyZWFrO1xuICAgICAgICBjYXNlICc/Pz0nOiBub2RlLmluZGV4ID0gODsgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICBsZXQgb3BzID0gWycqPScsICcvPScsICclPScsICcrPScsICctPScsXG4gICAgICAgICAgICAnPDw9JywgJz4+PScsICc+Pj49JywgJyY9JywgJ149JywgJ3w9JywgJyoqPSddO1xuICAgICAgICAgIGxldCBpbmRleCA9IG9wcy5pbmRleE9mKG9wZXJhdG9yKTtcbiAgICAgICAgICBsZXQgb3AgPSBuZXcgTm9kZSgnQXNzaWdubWVudE9wZXJhdG9yJywge30sIGluZGV4KTtcbiAgICAgICAgICBub2RlLmluZGV4ID0gNTtcbiAgICAgICAgICBub2RlLmNoaWxkcmVuID0gW2xocywgb3AsIGV4cHJdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbm9kZTtcbiAgICB9XG4gICAgZGVmYXVsdDpcbiAgICAgIE5vZGUuVE9ETyhgJHt0eXBlfSBAIEFzc2lnbm1lbnRFeHByZXNzaW9uYCk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBBc3NpZ25tZW50RXhwcmVzc2lvbjtcbiIsImNvbnN0IE5vZGUgPSByZXF1aXJlKCcuLi9Ob2RlJyk7XG5cbi8vIEFzeW5jQXJyb3dCaW5kaW5nSWRlbnRpZmllcltZaWVsZF06IHtcbi8vICAgQmluZGluZ0lkZW50aWZpZXJbP1lpZWxkLCArQXdhaXRdXG4vLyB9XG5cbmxldCBBc3luY0Fycm93QmluZGluZ0lkZW50aWZpZXIgPSAoWWllbGQpID0+IChnaXZlbikgPT4ge1xuICBjb25zdCBCaW5kaW5nSWRlbnRpZmllciA9IHJlcXVpcmUoJy4vQmluZGluZ0lkZW50aWZpZXInKTtcbiAgbGV0IHBhcmFtcyA9IFtZaWVsZF07XG4gIGxldCBpZCA9IEJpbmRpbmdJZGVudGlmaWVyKFlpZWxkLCB0cnVlKShnaXZlbik7XG4gIHJldHVybiBuZXcgTm9kZSgnQXN5bmNBcnJvd0JpbmRpbmdJZGVudGlmaWVyJywgZ2l2ZW4sIDAsIFtpZF0sIHBhcmFtcyk7XG5cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBBc3luY0Fycm93QmluZGluZ0lkZW50aWZpZXI7XG4iLCJjb25zdCBOb2RlID0gcmVxdWlyZSgnLi4vTm9kZScpO1xuY29uc3Qge2NoZWNrQ292ZXJDYWxsRXhwcmVzc2lvbkFuZEFzeW5jQXJyb3dIZWFkfSA9IHJlcXVpcmUoJy4uL0dsb2JhbCcpO1xuXG4vLyBBc3luY0Fycm93RnVuY3Rpb25bSW4sIFlpZWxkLCBBd2FpdF06IHtcbi8vICAgYGFzeW5jYCBbbm8gTGluZVRlcm1pbmF0b3IgaGVyZV0gQXN5bmNBcnJvd0JpbmRpbmdJZGVudGlmaWVyWz9ZaWVsZF0gW25vIExpbmVUZXJtaW5hdG9yIGhlcmVdIGA9PmAgQXN5bmNDb25jaXNlQm9keVs/SW5dIHxcbi8vICAgQ292ZXJDYWxsRXhwcmVzc2lvbkFuZEFzeW5jQXJyb3dIZWFkWz9ZaWVsZCwgP0F3YWl0XSBbbm8gTGluZVRlcm1pbmF0b3IgaGVyZV0gYD0+YCBBc3luY0NvbmNpc2VCb2R5Wz9Jbl1cbi8vIH1cblxubGV0IEFzeW5jQXJyb3dGdW5jdGlvbiA9IChJbiwgWWllbGQsIEF3YWl0KSA9PiAoZ2l2ZW4pID0+IHtcbiAgY29uc3QgQXN5bmNBcnJvd0JpbmRpbmdJZGVudGlmaWVyID0gcmVxdWlyZSgnLi9Bc3luY0Fycm93QmluZGluZ0lkZW50aWZpZXInKTtcbiAgY29uc3QgQXN5bmNDb25jaXNlQm9keSA9IHJlcXVpcmUoJy4vQXN5bmNDb25jaXNlQm9keScpO1xuICBjb25zdCBDb3ZlckNhbGxFeHByZXNzaW9uQW5kQXN5bmNBcnJvd0hlYWQgPSByZXF1aXJlKCcuL0NvdmVyQ2FsbEV4cHJlc3Npb25BbmRBc3luY0Fycm93SGVhZCcpO1xuICBcbiAgY29uc3QgaXNIZWFkID0gY2hlY2tDb3ZlckNhbGxFeHByZXNzaW9uQW5kQXN5bmNBcnJvd0hlYWQoZ2l2ZW4uc3RhcnQsIGdpdmVuLmJvZHkuc3RhcnQpO1xuXG4gIGxldCBwYXJhbXMgPSBbSW4sIFlpZWxkLCBBd2FpdF07XG4gIGxldCBiID0gQXN5bmNDb25jaXNlQm9keShJbikoZ2l2ZW4uYm9keSk7XG4gIFxuICBpZiAoaXNIZWFkKSB7XG4gICAgLy8gY3JlYXRlIGhlYWQgZ2l2ZW5cbiAgICAvLyBUT0RPIGZpeCBzcGFuXG4gICAgbGV0IGhlYWRHaXZlbiA9IHtcbiAgICAgIGNhbGxlZTogeyBcInR5cGVcIjogXCJJZGVudGlmaWVyXCIsIFwibmFtZVwiOiBcImFzeW5jXCJ9LFxuICAgICAgYXJndW1lbnRzOiBnaXZlbi5wYXJhbXMsXG4gICAgfVxuICAgIGxldCBoZWFkID0gQ292ZXJDYWxsRXhwcmVzc2lvbkFuZEFzeW5jQXJyb3dIZWFkKFlpZWxkLCBBd2FpdCkoaGVhZEdpdmVuKTtcbiAgICByZXR1cm4gbmV3IE5vZGUoJ0FzeW5jQXJyb3dGdW5jdGlvbicsIGdpdmVuLCAxLCBbaGVhZCwgYl0sIHBhcmFtcyk7XG4gIH0gZWxzZSB7XG4gICAgbGV0IGlkID0gQXN5bmNBcnJvd0JpbmRpbmdJZGVudGlmaWVyKFlpZWxkKShnaXZlbi5wYXJhbXNbMF0pO1xuICAgIHJldHVybiBuZXcgTm9kZSgnQXN5bmNBcnJvd0Z1bmN0aW9uJywgZ2l2ZW4sIDAsIFtpZCwgYl0sIHBhcmFtcyk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBBc3luY0Fycm93RnVuY3Rpb247XG4iLCJjb25zdCBOb2RlID0gcmVxdWlyZSgnLi4vTm9kZScpO1xuXG4vLyBBc3luY0NvbmNpc2VCb2R5W0luXToge1xuLy8gICBbbG9va2FoZWFkIDwhIHtge2B9XSBFeHByZXNzaW9uQm9keVs/SW4sICtBd2FpdF0gfFxuLy8gICBge2AgQXN5bmNGdW5jdGlvbkJvZHkgYH1gXG4vLyB9XG5cbmxldCBBc3luY0NvbmNpc2VCb2R5ID0gKEluKSA9PiAoZ2l2ZW4pID0+IHtcbiAgY29uc3QgRXhwcmVzc2lvbkJvZHkgPSByZXF1aXJlKCcuL0V4cHJlc3Npb25Cb2R5Jyk7XG4gIGNvbnN0IEFzeW5jRnVuY3Rpb25Cb2R5ID0gcmVxdWlyZSgnLi9Bc3luY0Z1bmN0aW9uQm9keScpO1xuICBcbiAgbGV0IHBhcmFtcyA9IFtJbl07XG4gIFxuICAvLyBbMSwwXVxuICBpZiAoZ2l2ZW4uYm9keSkge1xuICAgIC8vIFRPRE8gZml4IHNwYW5cbiAgICBsZXQgYiA9IEFzeW5jRnVuY3Rpb25Cb2R5KGdpdmVuKTtcbiAgICByZXR1cm4gbmV3IE5vZGUoJ0FzeW5jQ29uY2lzZUJvZHknLCBnaXZlbiwgMSwgW2JdLCBwYXJhbXMpO1xuICB9XG4gIC8vIFswLDBdXG4gIGVsc2Uge1xuICAgIGxldCBleHByID0gRXhwcmVzc2lvbkJvZHkoSW4sIHRydWUpKGdpdmVuKTtcbiAgICByZXR1cm4gbmV3IE5vZGUoJ0FzeW5jQ29uY2lzZUJvZHknLCBnaXZlbiwgMCwgW2V4cHJdLCBwYXJhbXMpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQXN5bmNDb25jaXNlQm9keTtcbiIsImNvbnN0IE5vZGUgPSByZXF1aXJlKCcuLi9Ob2RlJyk7XG5cbi8vIEFzeW5jRnVuY3Rpb25Cb2R5IDpcbi8vICAgIEZ1bmN0aW9uQm9keVt+WWllbGQsICtBd2FpdF1cbmxldCBBc3luY0Z1bmN0aW9uQm9keSA9IChnaXZlbikgPT4ge1xuICBjb25zdCBGdW5jdGlvbkJvZHkgPSByZXF1aXJlKCcuL0Z1bmN0aW9uQm9keScpO1xuICBsZXQgYm9keSA9IEZ1bmN0aW9uQm9keShmYWxzZSwgdHJ1ZSkoZ2l2ZW4pO1xuICByZXR1cm4gbmV3IE5vZGUoJ0FzeW5jRnVuY3Rpb25Cb2R5JywgZ2l2ZW4sIDAsIFtib2R5XSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQXN5bmNGdW5jdGlvbkJvZHk7XG4iLCJjb25zdCBOb2RlID0gcmVxdWlyZSgnLi4vTm9kZScpO1xuY29uc3QgeyBjaGVja0NvbW1hIH0gPSByZXF1aXJlKCcuLi9HbG9iYWwnKTtcblxuLy8gQXN5bmNGdW5jdGlvbkRlY2xhcmF0aW9uW1lpZWxkLCBBd2FpdCwgRGVmYXVsdF0gOlxuLy8gICAgYXN5bmMgW25vIExpbmVUZXJtaW5hdG9yIGhlcmVdIGZ1bmN0aW9uIEJpbmRpbmdJZGVudGlmaWVyWz9ZaWVsZCwgP0F3YWl0XSAoIEZvcm1hbFBhcmFtZXRlcnNbfllpZWxkLCArQXdhaXRdICkgeyBBc3luY0Z1bmN0aW9uQm9keSB9XG4vLyAgICBbK0RlZmF1bHRdIGFzeW5jIFtubyBMaW5lVGVybWluYXRvciBoZXJlXSBmdW5jdGlvbiAoIEZvcm1hbFBhcmFtZXRlcnNbfllpZWxkLCArQXdhaXRdICkgeyBBc3luY0Z1bmN0aW9uQm9keSB9XG5sZXQgQXN5bmNGdW5jdGlvbkRlY2xhcmF0aW9uID0gKFlpZWxkLCBBd2FpdCwgRGVmYXVsdCkgPT4gKGdpdmVuKSA9PiB7XG4gIGNvbnN0IEJpbmRpbmdJZGVudGlmaWVyID0gcmVxdWlyZSgnLi9CaW5kaW5nSWRlbnRpZmllcicpO1xuICBjb25zdCBGb3JtYWxQYXJhbWV0ZXJzID0gcmVxdWlyZSgnLi9Gb3JtYWxQYXJhbWV0ZXJzJyk7XG4gIGNvbnN0IEFzeW5jRnVuY3Rpb25Cb2R5ID0gcmVxdWlyZSgnLi9Bc3luY0Z1bmN0aW9uQm9keScpO1xuICBsZXQgcGFyYW1zID0gW1lpZWxkLCBBd2FpdCwgRGVmYXVsdF07XG4gIGxldCB7IGlkLCBib2R5IH0gPSBnaXZlbjtcbiAgbGV0IGhhc0NvbW1hID0gY2hlY2tDb21tYShpZC5lbmQsIGJvZHkuc3RhcnQsICcpJyk7XG4gIGxldCBwcyA9IEZvcm1hbFBhcmFtZXRlcnMoZmFsc2UsIHRydWUpKGdpdmVuLnBhcmFtcywgaGFzQ29tbWEpO1xuICBsZXQgYiA9IEFzeW5jRnVuY3Rpb25Cb2R5KGJvZHkpO1xuICBpZiAoaWQpIHtcbiAgICBsZXQgeCA9IEJpbmRpbmdJZGVudGlmaWVyKFlpZWxkLCBBd2FpdCkoaWQpO1xuICAgIHJldHVybiBuZXcgTm9kZSgnQXN5bmNGdW5jdGlvbkRlY2xhcmF0aW9uJywgZ2l2ZW4sIDAsIFt4LCBwcywgYl0sIHBhcmFtcyk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG5ldyBOb2RlKCdBc3luY0Z1bmN0aW9uRGVjbGFyYXRpb24nLCBnaXZlbiwgMSwgW3BzLCBiXSwgcGFyYW1zKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEFzeW5jRnVuY3Rpb25EZWNsYXJhdGlvbjtcbiIsImNvbnN0IE5vZGUgPSByZXF1aXJlKCcuLi9Ob2RlJyk7XG5jb25zdCB7IGNoZWNrQ29tbWEgfSA9IHJlcXVpcmUoJy4uL0dsb2JhbCcpO1xuXG4vLyBBc3luY0Z1bmN0aW9uRXhwcmVzc2lvbjoge1xuLy8gICBgYXN5bmNgIFtubyBMaW5lVGVybWluYXRvciBoZXJlXSBgZnVuY3Rpb25gIEJpbmRpbmdJZGVudGlmaWVyW35ZaWVsZCwgK0F3YWl0XT8gYChgIEZvcm1hbFBhcmFtZXRlcnNbfllpZWxkLCArQXdhaXRdIGApYCBge2AgQXN5bmNGdW5jdGlvbkJvZHkgYH1gXG4vLyB9XG5cbmxldCBBc3luY0Z1bmN0aW9uRXhwcmVzc2lvbiA9IChnaXZlbikgPT4ge1xuICBjb25zdCBCaW5kaW5nSWRlbnRpZmllciA9IHJlcXVpcmUoJy4vQmluZGluZ0lkZW50aWZpZXInKTtcbiAgY29uc3QgRm9ybWFsUGFyYW1ldGVycyA9IHJlcXVpcmUoJy4vRm9ybWFsUGFyYW1ldGVycycpO1xuICBjb25zdCBBc3luY0Z1bmN0aW9uQm9keSA9IHJlcXVpcmUoJy4vQXN5bmNGdW5jdGlvbkJvZHknKTtcblxuICBsZXQgeyBpZCwgcGFyYW1zLCBib2R5IH0gPSBnaXZlbjtcblxuICBsZXQgYmluZGluZyA9IG51bGw7XG4gIGlmIChpZCAhPSBudWxsKSBiaW5kaW5nID0gQmluZGluZ0lkZW50aWZpZXIoZmFsc2UsIHRydWUpKGlkKTtcbiAgLy8gVE9ETyBoYW5kbGUgc3BhblxuICBsZXQgaGFzQ29tbWEgPSBjaGVja0NvbW1hKGdpdmVuLnN0YXJ0LCBib2R5LnN0YXJ0LCAnKScpO1xuICBsZXQgcHMgPSBGb3JtYWxQYXJhbWV0ZXJzKGZhbHNlLCB0cnVlKShwYXJhbXMsIGhhc0NvbW1hKTtcbiAgbGV0IGIgPSBBc3luY0Z1bmN0aW9uQm9keShib2R5KTtcbiAgcmV0dXJuIG5ldyBOb2RlKCdBc3luY0Z1bmN0aW9uRXhwcmVzc2lvbicsIGdpdmVuLCAwLCBbYmluZGluZywgcHMsIGJdKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBBc3luY0Z1bmN0aW9uRXhwcmVzc2lvbjtcbiIsImNvbnN0IE5vZGUgPSByZXF1aXJlKCcuLi9Ob2RlJyk7XG5cbi8vIEFzeW5jR2VuZXJhdG9yQm9keSA6XG4vLyAgICBGdW5jdGlvbkJvZHlbK1lpZWxkLCArQXdhaXRdXG5sZXQgQXN5bmNHZW5lcmF0b3JCb2R5ID0gKGdpdmVuKSA9PiB7XG4gIGNvbnN0IEZ1bmN0aW9uQm9keSA9IHJlcXVpcmUoJy4vRnVuY3Rpb25Cb2R5Jyk7XG4gIGxldCBib2R5ID0gRnVuY3Rpb25Cb2R5KHRydWUsIHRydWUpKGdpdmVuKTtcbiAgcmV0dXJuIG5ldyBOb2RlKCdBc3luY0dlbmVyYXRvckJvZHknLCBnaXZlbiwgMCwgW2JvZHldKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBBc3luY0dlbmVyYXRvckJvZHk7XG4iLCJjb25zdCBOb2RlID0gcmVxdWlyZSgnLi4vTm9kZScpO1xuY29uc3QgeyBjaGVja0NvbW1hIH0gPSByZXF1aXJlKCcuLi9HbG9iYWwnKTtcblxuLy8gQXN5bmNHZW5lcmF0b3JEZWNsYXJhdGlvbltZaWVsZCwgQXdhaXQsIERlZmF1bHRdIDpcbi8vICAgIGFzeW5jIFtubyBMaW5lVGVybWluYXRvciBoZXJlXSBmdW5jdGlvbiAqIEJpbmRpbmdJZGVudGlmaWVyWz9ZaWVsZCwgP0F3YWl0XSAoIEZvcm1hbFBhcmFtZXRlcnNbK1lpZWxkLCArQXdhaXRdICkgeyBBc3luY0dlbmVyYXRvckJvZHkgfVxuLy8gICAgWytEZWZhdWx0XSBhc3luYyBbbm8gTGluZVRlcm1pbmF0b3IgaGVyZV0gZnVuY3Rpb24gKiAoIEZvcm1hbFBhcmFtZXRlcnNbK1lpZWxkLCArQXdhaXRdICkgeyBBc3luY0dlbmVyYXRvckJvZHkgfVxubGV0IEFzeW5jR2VuZXJhdG9yRGVjbGFyYXRpb24gPSAoWWllbGQsIEF3YWl0LCBEZWZhdWx0KSA9PiAoZ2l2ZW4pID0+IHtcbiAgY29uc3QgQmluZGluZ0lkZW50aWZpZXIgPSByZXF1aXJlKCcuL0JpbmRpbmdJZGVudGlmaWVyJyk7XG4gIGNvbnN0IEZvcm1hbFBhcmFtZXRlcnMgPSByZXF1aXJlKCcuL0Zvcm1hbFBhcmFtZXRlcnMnKTtcbiAgY29uc3QgQXN5bmNHZW5lcmF0b3JCb2R5ID0gcmVxdWlyZSgnLi9Bc3luY0dlbmVyYXRvckJvZHknKTtcbiAgbGV0IHBhcmFtcyA9IFtZaWVsZCwgQXdhaXQsIERlZmF1bHRdO1xuICBsZXQgeyBpZCwgYm9keSB9ID0gZ2l2ZW47XG4gIGxldCBoYXNDb21tYSA9IGNoZWNrQ29tbWEoaWQuZW5kLCBib2R5LnN0YXJ0LCAnKScpO1xuICBsZXQgcHMgPSBGb3JtYWxQYXJhbWV0ZXJzKHRydWUsIHRydWUpKGdpdmVuLnBhcmFtcywgaGFzQ29tbWEpO1xuICBsZXQgYiA9IEFzeW5jR2VuZXJhdG9yQm9keShib2R5KTtcbiAgaWYgKGlkKSB7XG4gICAgbGV0IHggPSBCaW5kaW5nSWRlbnRpZmllcihZaWVsZCwgQXdhaXQpKGlkKTtcbiAgICByZXR1cm4gbmV3IE5vZGUoJ0FzeW5jR2VuZXJhdG9yRGVjbGFyYXRpb24nLCBnaXZlbiwgMCwgW3gsIHBzLCBiXSwgcGFyYW1zKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbmV3IE5vZGUoJ0FzeW5jR2VuZXJhdG9yRGVjbGFyYXRpb24nLCBnaXZlbiwgMSwgW3BzLCBiXSwgcGFyYW1zKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEFzeW5jR2VuZXJhdG9yRGVjbGFyYXRpb247XG4iLCJjb25zdCBOb2RlID0gcmVxdWlyZSgnLi4vTm9kZScpO1xuY29uc3QgeyBjaGVja0NvbW1hIH0gPSByZXF1aXJlKCcuLi9HbG9iYWwnKTtcblxuLy8gQXN5bmNHZW5lcmF0b3JFeHByZXNzaW9uOiB7XG4vLyAgIGBhc3luY2AgW25vIExpbmVUZXJtaW5hdG9yIGhlcmVdIGBmdW5jdGlvbmAgYCpgIEJpbmRpbmdJZGVudGlmaWVyWytZaWVsZCwgK0F3YWl0XT8gYChgIEZvcm1hbFBhcmFtZXRlcnNbK1lpZWxkLCArQXdhaXRdIGApYCBge2AgQXN5bmNHZW5lcmF0b3JCb2R5IGB9YFxuLy8gfVxuXG5sZXQgQXN5bmNHZW5lcmF0b3JFeHByZXNzaW9uID0gKGdpdmVuKSA9PiB7XG4gIGNvbnN0IEJpbmRpbmdJZGVudGlmaWVyID0gcmVxdWlyZSgnLi9CaW5kaW5nSWRlbnRpZmllcicpO1xuICBjb25zdCBGb3JtYWxQYXJhbWV0ZXJzID0gcmVxdWlyZSgnLi9Gb3JtYWxQYXJhbWV0ZXJzJyk7XG4gIGNvbnN0IEFzeW5jR2VuZXJhdG9yQm9keSA9IHJlcXVpcmUoJy4vQXN5bmNHZW5lcmF0b3JCb2R5Jyk7XG5cbiAgbGV0IHsgaWQsIHBhcmFtcywgYm9keSB9ID0gZ2l2ZW47XG5cbiAgbGV0IGJpbmRpbmcgPSBudWxsO1xuICBpZiAoaWQgIT0gbnVsbCkgYmluZGluZyA9IEJpbmRpbmdJZGVudGlmaWVyKHRydWUsIHRydWUpKGlkKTtcbiAgLy8gVE9ETyBoYW5kbGUgc3BhblxuICBsZXQgaGFzQ29tbWEgPSBjaGVja0NvbW1hKGdpdmVuLnN0YXJ0LCBib2R5LnN0YXJ0LCAnKScpO1xuICBsZXQgcHMgPSBGb3JtYWxQYXJhbWV0ZXJzKHRydWUsIHRydWUpKHBhcmFtcywgaGFzQ29tbWEpO1xuICBsZXQgYiA9IEFzeW5jR2VuZXJhdG9yQm9keShib2R5KTtcbiAgcmV0dXJuIG5ldyBOb2RlKCdBc3luY0dlbmVyYXRvckV4cHJlc3Npb24nLCBnaXZlbiwgMCwgW2JpbmRpbmcsIHBzLCBiXSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQXN5bmNHZW5lcmF0b3JFeHByZXNzaW9uO1xuIiwiY29uc3QgTm9kZSA9IHJlcXVpcmUoJy4uL05vZGUnKTtcbmNvbnN0IHsgY2hlY2tDb21tYSB9ID0gcmVxdWlyZSgnLi4vR2xvYmFsJyk7XG5cbi8vIEFzeW5jR2VuZXJhdG9yTWV0aG9kW1lpZWxkLCBBd2FpdF06IHtcbi8vICAgYGFzeW5jYCBbbm8gTGluZVRlcm1pbmF0b3IgaGVyZV0gYCpgIFByb3BlcnR5TmFtZVs/WWllbGQsID9Bd2FpdF0gYChgIFVuaXF1ZUZvcm1hbFBhcmFtZXRlcnNbK1lpZWxkLCArQXdhaXRdIGApYCBge2AgQXN5bmNHZW5lcmF0b3JCb2R5IGB9YFxuLy8gfVxuXG5sZXQgQXN5bmNHZW5lcmF0b3JNZXRob2QgPSAoWWllbGQsIEF3YWl0KSA9PiAoZ2l2ZW4pID0+IHtcbiAgY29uc3QgUHJvcGVydHlOYW1lID0gcmVxdWlyZSgnLi9Qcm9wZXJ0eU5hbWUnKTtcbiAgY29uc3QgVW5pcXVlRm9ybWFsUGFyYW1ldGVycyA9IHJlcXVpcmUoJy4vVW5pcXVlRm9ybWFsUGFyYW1ldGVycycpO1xuICBjb25zdCBBc3luY0dlbmVyYXRvckJvZHkgPSByZXF1aXJlKCcuL0FzeW5jR2VuZXJhdG9yQm9keScpO1xuICBcbiAgbGV0IHBhcmFtcyA9IFtZaWVsZCwgQXdhaXRdO1xuICBsZXQgbmFtZSA9IFByb3BlcnR5TmFtZShZaWVsZCwgQXdhaXQpKGdpdmVuKTtcbiAgXG4gIGxldCBoYXNDb21tYSA9IGNoZWNrQ29tbWEoZ2l2ZW4ua2V5LmVuZCwgZ2l2ZW4udmFsdWUuYm9keS5zdGFydCwgJyknKTtcbiAgbGV0IHBzID0gVW5pcXVlRm9ybWFsUGFyYW1ldGVycyh0cnVlLCB0cnVlKShnaXZlbi52YWx1ZS5wYXJhbXMsIGhhc0NvbW1hKTtcblxuICBsZXQgYiA9IEFzeW5jR2VuZXJhdG9yQm9keShnaXZlbi52YWx1ZS5ib2R5KTtcbiAgcmV0dXJuIG5ldyBOb2RlKCdBc3luY0dlbmVyYXRvck1ldGhvZCcsIGdpdmVuLCAwLCBbbmFtZSwgcHMsIGJdLCBwYXJhbXMpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEFzeW5jR2VuZXJhdG9yTWV0aG9kO1xuIiwiY29uc3QgTm9kZSA9IHJlcXVpcmUoJy4uL05vZGUnKTtcbmNvbnN0IHsgY2hlY2tDb21tYSB9ID0gcmVxdWlyZSgnLi4vR2xvYmFsJyk7XG5cbi8vIEFzeW5jTWV0aG9kW1lpZWxkLCBBd2FpdF06IHtcbi8vICAgYGFzeW5jYCBbbm8gTGluZVRlcm1pbmF0b3IgaGVyZV0gUHJvcGVydHlOYW1lWz9ZaWVsZCwgP0F3YWl0XSBgKGAgVW5pcXVlRm9ybWFsUGFyYW1ldGVyc1t+WWllbGQsICtBd2FpdF0gYClgIGB7YCBBc3luY0Z1bmN0aW9uQm9keSBgfWBcbi8vIH1cblxubGV0IEFzeW5jTWV0aG9kID0gKFlpZWxkLCBBd2FpdCkgPT4gKGdpdmVuKSA9PiB7XG4gIFxuICBjb25zdCBQcm9wZXJ0eU5hbWUgPSByZXF1aXJlKCcuL1Byb3BlcnR5TmFtZScpO1xuICBjb25zdCBVbmlxdWVGb3JtYWxQYXJhbWV0ZXJzID0gcmVxdWlyZSgnLi9VbmlxdWVGb3JtYWxQYXJhbWV0ZXJzJyk7XG4gIGNvbnN0IEFzeW5jRnVuY3Rpb25Cb2R5ID0gcmVxdWlyZSgnLi9Bc3luY0Z1bmN0aW9uQm9keScpO1xuICBcbiAgbGV0IHBhcmFtcyA9IFtZaWVsZCwgQXdhaXRdO1xuICBsZXQgbmFtZSA9IFByb3BlcnR5TmFtZShZaWVsZCwgQXdhaXQpKGdpdmVuKTtcbiAgbGV0IGhhc0NvbW1hID0gY2hlY2tDb21tYShnaXZlbi5rZXkuZW5kLCBnaXZlbi52YWx1ZS5ib2R5LnN0YXJ0LCAnKScpO1xuICBsZXQgcHMgPSBVbmlxdWVGb3JtYWxQYXJhbWV0ZXJzKGZhbHNlLCB0cnVlKShnaXZlbi52YWx1ZS5wYXJhbXMsIGhhc0NvbW1hKTtcblxuICBsZXQgYiA9IEFzeW5jRnVuY3Rpb25Cb2R5KGdpdmVuLnZhbHVlLmJvZHkpO1xuICByZXR1cm4gbmV3IE5vZGUoJ0FzeW5jTWV0aG9kJywgZ2l2ZW4sIDAsIFtuYW1lLCBwcywgYl0sIHBhcmFtcyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQXN5bmNNZXRob2Q7XG4iLCJjb25zdCBOb2RlID0gcmVxdWlyZSgnLi4vTm9kZScpO1xuXG4vLyBBd2FpdEV4cHJlc3Npb25bWWllbGRdIDpcbi8vICAgIGF3YWl0IFVuYXJ5RXhwcmVzc2lvbls/WWllbGQsICtBd2FpdF1cbmxldCBBd2FpdEV4cHJlc3Npb24gPSAoWWllbGQpID0+IChnaXZlbikgPT4ge1xuICBjb25zdCBVbmFyeUV4cHJlc3Npb24gPSByZXF1aXJlKCcuL1VuYXJ5RXhwcmVzc2lvbicpO1xuICBsZXQgcGFyYW1zID0gW1lpZWxkXTtcbiAgbGV0IGV4cHIgPSBVbmFyeUV4cHJlc3Npb24oWWllbGQsIHRydWUpKGdpdmVuLmFyZ3VtZW50KTtcbiAgcmV0dXJuIG5ldyBOb2RlKCdBd2FpdEV4cHJlc3Npb24nLCBnaXZlbiwgMCwgW2V4cHJdLCBwYXJhbXMpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEF3YWl0RXhwcmVzc2lvbjtcbiIsImNvbnN0IE5vZGUgPSByZXF1aXJlKCcuLi9Ob2RlJyk7XG5cbi8vIEJpbmRpbmdFbGVtZW50W1lpZWxkLCBBd2FpdF0gOlxuLy8gICAgU2luZ2xlTmFtZUJpbmRpbmdbP1lpZWxkLCA/QXdhaXRdXG4vLyAgICBCaW5kaW5nUGF0dGVybls/WWllbGQsID9Bd2FpdF0gSW5pdGlhbGl6ZXJbK0luLCA/WWllbGQsID9Bd2FpdF1fb3B0XG5sZXQgQmluZGluZ0VsZW1lbnQgPSAoWWllbGQsIEF3YWl0KSA9PiAoZ2l2ZW4pID0+IHtcbiAgY29uc3QgU2luZ2xlTmFtZUJpbmRpbmcgPSByZXF1aXJlKCcuL1NpbmdsZU5hbWVCaW5kaW5nJyk7XG4gIGNvbnN0IEJpbmRpbmdQYXR0ZXJuID0gcmVxdWlyZSgnLi9CaW5kaW5nUGF0dGVybicpO1xuICBjb25zdCBJbml0aWFsaXplciA9IHJlcXVpcmUoJy4vSW5pdGlhbGl6ZXInKTtcbiAgbGV0IHBhcmFtcyA9IFtZaWVsZCwgQXdhaXRdO1xuICBsZXQgeyB0eXBlIH0gPSBnaXZlbjtcbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSAnSWRlbnRpZmllcic6IHtcbiAgICAgIGxldCBzaW5nbGUgPSBTaW5nbGVOYW1lQmluZGluZyhZaWVsZCwgQXdhaXQpKGdpdmVuKTtcbiAgICAgIHJldHVybiBuZXcgTm9kZSgnQmluZGluZ0VsZW1lbnQnLCBnaXZlbiwgMCwgW3NpbmdsZV0sIHBhcmFtcyk7XG4gICAgfVxuICAgIGNhc2UgJ0Fzc2lnbm1lbnRQYXR0ZXJuJzoge1xuICAgICAgbGV0IHsgbGVmdCwgcmlnaHQgfSA9IGdpdmVuO1xuICAgICAgaWYgKGxlZnQudHlwZSA9PT0gJ0lkZW50aWZpZXInKSB7XG4gICAgICAgIGxldCBzaW5nbGUgPSBTaW5nbGVOYW1lQmluZGluZyhZaWVsZCwgQXdhaXQpKGdpdmVuKTtcbiAgICAgICAgcmV0dXJuIG5ldyBOb2RlKCdCaW5kaW5nRWxlbWVudCcsIGdpdmVuLCAwLCBbc2luZ2xlXSwgcGFyYW1zKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxldCBiaW5kID0gQmluZGluZ1BhdHRlcm4oWWllbGQsIEF3YWl0KShsZWZ0KTtcbiAgICAgICAgbGV0IGluaXQgPSBJbml0aWFsaXplcih0cnVlLCBZaWVsZCwgQXdhaXQpKHJpZ2h0KTtcbiAgICAgICAgcmV0dXJuIG5ldyBOb2RlKCdCaW5kaW5nRWxlbWVudCcsIGdpdmVuLCAxLCBbYmluZCwgaW5pdF0sIHBhcmFtcyk7XG4gICAgICB9XG4gICAgfVxuICAgIGNhc2UgJ0FycmF5UGF0dGVybic6XG4gICAgY2FzZSAnT2JqZWN0UGF0dGVybic6IHtcbiAgICAgIGxldCBiaW5kID0gQmluZGluZ1BhdHRlcm4oWWllbGQsIEF3YWl0KShnaXZlbik7XG4gICAgICByZXR1cm4gbmV3IE5vZGUoJ0JpbmRpbmdFbGVtZW50JywgZ2l2ZW4sIDEsIFtiaW5kLCBudWxsXSwgcGFyYW1zKTtcbiAgICB9XG4gICAgZGVmYXVsdDpcbiAgICAgIE5vZGUuVE9ETyhgJHt0eXBlfSBAIEJpbmRpbmdFbGVtZW50YCk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBCaW5kaW5nRWxlbWVudDtcbiIsImNvbnN0IE5vZGUgPSByZXF1aXJlKCcuLi9Ob2RlJyk7XG5cbi8vIEJpbmRpbmdFbGVtZW50TGlzdFtZaWVsZCwgQXdhaXRdOiB7XG4vLyAgIEJpbmRpbmdFbGlzaW9uRWxlbWVudFs/WWllbGQsID9Bd2FpdF0gfFxuLy8gICBCaW5kaW5nRWxlbWVudExpc3RbP1lpZWxkLCA/QXdhaXRdIGAsYCBCaW5kaW5nRWxpc2lvbkVsZW1lbnRbP1lpZWxkLCA/QXdhaXRdXG4vLyB9XG5cbi8vIFRPRE8gY2hlY2sgc3BhbiBpbmZvXG5sZXQgQmluZGluZ0VsZW1lbnRMaXN0ID0gKFlpZWxkLCBBd2FpdCkgPT4gKGdpdmVuKSA9PiB7XG4gIGxldCBCaW5kaW5nRWxpc2lvbkVsZW1lbnQgPSByZXF1aXJlKCcuL0JpbmRpbmdFbGlzaW9uRWxlbWVudCcpO1xuICBsZXQgcGFyYW1zID0gW1lpZWxkLCBBd2FpdF07XG4gIFxuICBsZXQgZWxlbXMgPSBbZ2l2ZW4ucG9wKCldO1xuICBmb3IgKGxldCBpID0gZ2l2ZW4ubGVuZ3RoIC0gMTsgaSA+PSAwOyBpIC09IDEpIHtcbiAgICBpZiAoZ2l2ZW5baV0gIT09IG51bGwpIGJyZWFrO1xuICAgIGVsZW1zLnVuc2hpZnQoZ2l2ZW4ucG9wKCkpO1xuICB9XG4gIFxuICAvLyBbMCwwXVxuICBpZiAoZ2l2ZW4ubGVuZ3RoID09PSAwKSB7XG4gICAgbGV0IGVsaXNpb25FbGVtID0gQmluZGluZ0VsaXNpb25FbGVtZW50KFlpZWxkLCBBd2FpdCkoZWxlbXMpO1xuICAgIHJldHVybiBuZXcgTm9kZSgnQmluZGluZ0VsZW1lbnRMaXN0JywgZ2l2ZW4sIDAsIFtlbGlzaW9uRWxlbV0sIHBhcmFtcyk7XG4gIH1cbiAgLy8gWzEsMF1cbiAgZWxzZSB7XG4gICAgbGV0IGVsaXNpb25FbGVtID0gQmluZGluZ0VsaXNpb25FbGVtZW50KFlpZWxkLCBBd2FpdCkoZWxlbXMpO1xuICAgIGxldCBsaXN0RWxlbSA9IEJpbmRpbmdFbGVtZW50TGlzdChZaWVsZCwgQXdhaXQpKGdpdmVuKTtcbiAgICByZXR1cm4gbmV3IE5vZGUoJ0JpbmRpbmdFbGVtZW50TGlzdCcsIGdpdmVuLCAxLCBbbGlzdEVsZW0sIGVsaXNpb25FbGVtXSwgcGFyYW1zKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEJpbmRpbmdFbGVtZW50TGlzdDtcbiIsImNvbnN0IE5vZGUgPSByZXF1aXJlKCcuLi9Ob2RlJyk7XG5cbi8vIEJpbmRpbmdFbGlzaW9uRWxlbWVudFtZaWVsZCwgQXdhaXRdOiB7XG4vLyAgIEVsaXNpb24/IEJpbmRpbmdFbGVtZW50Wz9ZaWVsZCwgP0F3YWl0XVxuLy8gfVxuXG4vLyBUT0RPIGNoZWNrIHNwYW4gaW5mb1xubGV0IEJpbmRpbmdFbGlzaW9uRWxlbWVudCA9IChZaWVsZCwgQXdhaXQpID0+IChnaXZlbikgPT4ge1xuICBsZXQgQmluZGluZ0VsZW1lbnQgPSByZXF1aXJlKCcuL0JpbmRpbmdFbGVtZW50Jyk7XG4gIGxldCBFbGlzaW9uID0gcmVxdWlyZSgnLi9FbGlzaW9uJyk7XG4gIGxldCBwYXJhbXMgPSBbWWllbGQsIEF3YWl0XTtcblxuICBsZXQgYmluZGluZyA9IEJpbmRpbmdFbGVtZW50KFlpZWxkLCBBd2FpdCkoZ2l2ZW4ucG9wKCkpO1xuICBsZXQgZWxpc2lvbiA9IG51bGw7XG4gIGlmIChnaXZlbi5sZW5ndGggPiAwKSBlbGlzaW9uID0gRWxpc2lvbihnaXZlbik7XG4gIFxuICByZXR1cm4gbmV3IE5vZGUoJ0JpbmRpbmdFbGlzaW9uRWxlbWVudCcsIGdpdmVuLCAwLCBbZWxpc2lvbiwgYmluZGluZ10sIHBhcmFtcyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQmluZGluZ0VsaXNpb25FbGVtZW50O1xuIiwiY29uc3QgTm9kZSA9IHJlcXVpcmUoJy4uL05vZGUnKTtcblxuLy8gQmluZGluZ0lkZW50aWZpZXJbWWllbGQsIEF3YWl0XSA6XG4vLyAgICBJZGVudGlmaWVyXG4vLyAgICB5aWVsZFxuLy8gICAgYXdhaXRcbmxldCBCaW5kaW5nSWRlbnRpZmllciA9IChZaWVsZCwgQXdhaXQpID0+IChnaXZlbikgPT4ge1xuICBjb25zdCBJZGVudGlmaWVyID0gcmVxdWlyZSgnLi9JZGVudGlmaWVyJyk7XG4gIGxldCBwYXJhbXMgPSBbWWllbGQsIEF3YWl0XTtcbiAgaWYgKCFZaWVsZCAmJiAhQXdhaXQpIFxuICAgIHJldHVybiBuZXcgTm9kZSgnQmluZGluZ0lkZW50aWZpZXInLCBnaXZlbiwgMCwgW0lkZW50aWZpZXIoZ2l2ZW4pXSwgcGFyYW1zKTtcbiAgZWxzZSBzd2l0Y2ggKGdpdmVuLm5hbWUpIHtcbiAgICBjYXNlICd5aWVsZCc6XG4gICAgICByZXR1cm4gbmV3IE5vZGUoJ0JpbmRpbmdJZGVudGlmaWVyJywgZ2l2ZW4sIDEsIFtdLCBwYXJhbXMpO1xuICAgIGNhc2UgJ2F3YWl0JzpcbiAgICAgIHJldHVybiBuZXcgTm9kZSgnQmluZGluZ0lkZW50aWZpZXInLCBnaXZlbiwgMiwgW10sIHBhcmFtcyk7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBuZXcgTm9kZSgnQmluZGluZ0lkZW50aWZpZXInLCBnaXZlbiwgMCwgW0lkZW50aWZpZXIoZ2l2ZW4pXSwgcGFyYW1zKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEJpbmRpbmdJZGVudGlmaWVyO1xuIiwiY29uc3QgTm9kZSA9IHJlcXVpcmUoJy4uL05vZGUnKTtcblxuLy8gQmluZGluZ0xpc3RbSW4sIFlpZWxkLCBBd2FpdF0gOlxuLy8gICAgTGV4aWNhbEJpbmRpbmdbP0luLCA/WWllbGQsID9Bd2FpdF1cbi8vICAgIEJpbmRpbmdMaXN0Wz9JbiwgP1lpZWxkLCA/QXdhaXRdICwgTGV4aWNhbEJpbmRpbmdbP0luLCA/WWllbGQsID9Bd2FpdF1cbmxldCBCaW5kaW5nTGlzdCA9IChJbiwgWWllbGQsIEF3YWl0KSA9PiAoZ2l2ZW4pID0+IHtcbiAgY29uc3QgTGV4aWNhbEJpbmRpbmcgPSByZXF1aXJlKCcuL0xleGljYWxCaW5kaW5nJyk7XG4gIGxldCBnZW5DaGlsZCA9IExleGljYWxCaW5kaW5nKEluLCBZaWVsZCwgQXdhaXQpO1xuICBsZXQgcGFyYW1zID0gW0luLCBZaWVsZCwgQXdhaXRdO1xuICByZXR1cm4gTm9kZS5mcm9tTGlzdCgnQmluZGluZ0xpc3QnLCBnaXZlbiwgZ2VuQ2hpbGQsIHBhcmFtcyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQmluZGluZ0xpc3Q7XG4iLCJjb25zdCBOb2RlID0gcmVxdWlyZSgnLi4vTm9kZScpO1xuXG4vLyBCaW5kaW5nUGF0dGVybltZaWVsZCwgQXdhaXRdOiB7XG4vLyAgIE9iamVjdEJpbmRpbmdQYXR0ZXJuWz9ZaWVsZCwgP0F3YWl0XSB8XG4vLyAgIEFycmF5QmluZGluZ1BhdHRlcm5bP1lpZWxkLCA/QXdhaXRdXG4vLyB9XG5sZXQgQmluZGluZ1BhdHRlcm4gPSAoWWllbGQsIEF3YWl0KSA9PiAoZ2l2ZW4pID0+IHtcbiAgbGV0IE9iamVjdEJpbmRpbmdQYXR0ZXJuID0gcmVxdWlyZSgnLi9PYmplY3RCaW5kaW5nUGF0dGVybicpO1xuICBsZXQgQXJyYXlCaW5kaW5nUGF0dGVybiA9IHJlcXVpcmUoJy4vQXJyYXlCaW5kaW5nUGF0dGVybicpO1xuICBcbiAgbGV0IHBhcmFtcyA9IFtZaWVsZCwgQXdhaXRdO1xuICBpZiAoZ2l2ZW4udHlwZSA9PT0gJ0FycmF5UGF0dGVybicpIHtcbiAgICBsZXQgcGF0ID0gQXJyYXlCaW5kaW5nUGF0dGVybihZaWVsZCwgQXdhaXQpKGdpdmVuKTtcbiAgICByZXR1cm4gbmV3IE5vZGUoJ0JpbmRpbmdQYXR0ZXJuJywgZ2l2ZW4sIDEsIFtwYXRdLCBwYXJhbXMpO1xuICB9IGVsc2Uge1xuICAgIGxldCBwYXQgPSBPYmplY3RCaW5kaW5nUGF0dGVybihZaWVsZCwgQXdhaXQpKGdpdmVuKTtcbiAgICByZXR1cm4gbmV3IE5vZGUoJ0JpbmRpbmdQYXR0ZXJuJywgZ2l2ZW4sIDAsIFtwYXRdLCBwYXJhbXMpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQmluZGluZ1BhdHRlcm47XG4iLCJjb25zdCBOb2RlID0gcmVxdWlyZSgnLi4vTm9kZScpO1xuXG4vLyBCaW5kaW5nUHJvcGVydHlbWWllbGQsIEF3YWl0XToge1xuLy8gICBTaW5nbGVOYW1lQmluZGluZ1s/WWllbGQsID9Bd2FpdF0gfFxuLy8gICBQcm9wZXJ0eU5hbWVbP1lpZWxkLCA/QXdhaXRdIGA6YCBCaW5kaW5nRWxlbWVudFs/WWllbGQsID9Bd2FpdF1cbi8vIH1cblxubGV0IEJpbmRpbmdQcm9wZXJ0eSA9IChZaWVsZCwgQXdhaXQpID0+IChnaXZlbikgPT4ge1xuICBsZXQgU2luZ2xlTmFtZUJpbmRpbmcgPSByZXF1aXJlKCcuL1NpbmdsZU5hbWVCaW5kaW5nJyk7XG4gIGxldCBQcm9wZXJ0eU5hbWUgPSByZXF1aXJlKCcuL1Byb3BlcnR5TmFtZScpO1xuICBsZXQgQmluZGluZ0VsZW1lbnQgPSByZXF1aXJlKCcuL0JpbmRpbmdFbGVtZW50Jyk7XG4gIGxldCBwYXJhbXMgPSBbWWllbGQsIEF3YWl0XTtcbiAgXG4gIGxldCB7c2hvcnRoYW5kLCBrZXksIHZhbHVlfSA9IGdpdmVuO1xuICAvLyBbMCwwXVxuICBpZiAoc2hvcnRoYW5kKSB7XG4gICAgbGV0IGJpbmRpbmc7XG4gICAgaWYgKGtleS50eXBlID09PSAnSWRlbnRpZmllcicgJiYgdmFsdWUudHlwZSA9PT0gJ0lkZW50aWZpZXInICYmIGtleS5uYW1lID09PSB2YWx1ZS5uYW1lKVxuICAgICAgYmluZGluZyA9IFNpbmdsZU5hbWVCaW5kaW5nKFlpZWxkLCBBd2FpdCkoa2V5KTtcbiAgICBlbHNlIGJpbmRpbmcgPSBTaW5nbGVOYW1lQmluZGluZyhZaWVsZCwgQXdhaXQpKHtsZWZ0OmtleSwgcmlnaHQ6IHZhbHVlfSk7XG4gICAgcmV0dXJuIG5ldyBOb2RlKCdCaW5kaW5nUHJvcGVydHknLCBnaXZlbiwgMCwgW2JpbmRpbmddLCBwYXJhbXMpO1xuICB9IFxuICAvLyBbMSwwXVxuICBlbHNlIHtcbiAgICBsZXQgbmFtZSA9IFByb3BlcnR5TmFtZShZaWVsZCwgQXdhaXQpKGdpdmVuKTtcbiAgICBsZXQgZWxlbSA9IEJpbmRpbmdFbGVtZW50KFlpZWxkLCBBd2FpdCkodmFsdWUpO1xuICAgIHJldHVybiBuZXcgTm9kZSgnQmluZGluZ1Byb3BlcnR5JywgZ2l2ZW4sIDEsIFtuYW1lLCBlbGVtXSwgcGFyYW1zKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEJpbmRpbmdQcm9wZXJ0eTtcbiIsImNvbnN0IE5vZGUgPSByZXF1aXJlKCcuLi9Ob2RlJyk7XG5cbi8vIEJpbmRpbmdQcm9wZXJ0eUxpc3RbWWllbGQsIEF3YWl0XToge1xuLy8gICBCaW5kaW5nUHJvcGVydHlbP1lpZWxkLCA/QXdhaXRdIHxcbi8vICAgQmluZGluZ1Byb3BlcnR5TGlzdFs/WWllbGQsID9Bd2FpdF0gYCxgIEJpbmRpbmdQcm9wZXJ0eVs/WWllbGQsID9Bd2FpdF1cbi8vIH1cblxuLy8gVE9ETyBjaGVjayAmIGhhbmRsZSBzcGFuXG5sZXQgQmluZGluZ1Byb3BlcnR5TGlzdCA9IChZaWVsZCwgQXdhaXQpID0+IChnaXZlbikgPT4ge1xuICBsZXQgQmluZGluZ1Byb3BlcnR5ID0gcmVxdWlyZSgnLi9CaW5kaW5nUHJvcGVydHknKTtcbiAgbGV0IGdlbkNoaWxkID0gQmluZGluZ1Byb3BlcnR5KFlpZWxkLCBBd2FpdCk7XG4gIGxldCBwYXJhbXMgPSBbWWllbGQsIEF3YWl0XTtcbiAgcmV0dXJuIE5vZGUuZnJvbUxpc3QoJ0JpbmRpbmdQcm9wZXJ0eUxpc3QnLCBnaXZlbiwgZ2VuQ2hpbGQsIHBhcmFtcyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQmluZGluZ1Byb3BlcnR5TGlzdDtcbiIsImNvbnN0IE5vZGUgPSByZXF1aXJlKCcuLi9Ob2RlJyk7XG5cbi8vIEJpbmRpbmdSZXN0RWxlbWVudFtZaWVsZCwgQXdhaXRdIDpcbi8vICAgIC4uLiBCaW5kaW5nSWRlbnRpZmllcls/WWllbGQsID9Bd2FpdF1cbi8vICAgIC4uLiBCaW5kaW5nUGF0dGVybls/WWllbGQsID9Bd2FpdF1cbmxldCBCaW5kaW5nUmVzdEVsZW1lbnQgPSAoWWllbGQsIEF3YWl0KSA9PiAoZ2l2ZW4pID0+IHtcbiAgY29uc3QgQmluZGluZ0lkZW50aWZpZXIgPSByZXF1aXJlKCcuL0JpbmRpbmdJZGVudGlmaWVyJyk7XG4gIGNvbnN0IEJpbmRpbmdQYXR0ZXJuID0gcmVxdWlyZSgnLi9CaW5kaW5nUGF0dGVybicpO1xuICBsZXQgcGFyYW1zID0gW1lpZWxkLCBBd2FpdF07XG4gIGxldCB7IGFyZ3VtZW50IH0gPSBnaXZlbjtcbiAgbGV0IHsgdHlwZSB9ID0gYXJndW1lbnQ7XG4gIGlmICh0eXBlID09ICdJZGVudGlmaWVyJykge1xuICAgIGxldCBpZCA9IEJpbmRpbmdJZGVudGlmaWVyKFlpZWxkLCBBd2FpdCkoYXJndW1lbnQpO1xuICAgIHJldHVybiBuZXcgTm9kZSgnQmluZGluZ1Jlc3RFbGVtZW50JywgZ2l2ZW4sIDAsIFtpZF0sIHBhcmFtcyk7XG4gIH0gZWxzZSB7XG4gICAgbGV0IHBhdCA9IEJpbmRpbmdQYXR0ZXJuKFlpZWxkLCBBd2FpdCkoYXJndW1lbnQpO1xuICAgIHJldHVybiBuZXcgTm9kZSgnQmluZGluZ1Jlc3RFbGVtZW50JywgZ2l2ZW4sIDEsIFtwYXRdLCBwYXJhbXMpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQmluZGluZ1Jlc3RFbGVtZW50O1xuIiwiY29uc3QgTm9kZSA9IHJlcXVpcmUoJy4uL05vZGUnKTtcblxuLy8gQmluZGluZ1Jlc3RQcm9wZXJ0eVtZaWVsZCwgQXdhaXRdOiB7XG4vLyAgIGAuLi5gIEJpbmRpbmdJZGVudGlmaWVyWz9ZaWVsZCwgP0F3YWl0XVxuLy8gfVxuXG5sZXQgQmluZGluZ1Jlc3RQcm9wZXJ0eSA9IChZaWVsZCwgQXdhaXQpID0+IGdpdmVuID0+IHtcbiAgbGV0IEJpbmRpbmdJZGVudGlmaWVyID0gcmVxdWlyZSgnLi9CaW5kaW5nSWRlbnRpZmllcicpO1xuICBsZXQgcGFyYW1zID0gW1lpZWxkLCBBd2FpdF07XG4gIGxldCBpZCA9IEJpbmRpbmdJZGVudGlmaWVyKFlpZWxkLCBBd2FpdCkoZ2l2ZW4uYXJndW1lbnQpO1xuICByZXR1cm4gbmV3IE5vZGUoJ0JpbmRpbmdSZXN0UHJvcGVydHknLCBnaXZlbiwgMCwgW2lkXSwgcGFyYW1zKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBCaW5kaW5nUmVzdFByb3BlcnR5O1xuIiwiY29uc3QgTm9kZSA9IHJlcXVpcmUoJy4uL05vZGUnKTtcblxuLy8gQml0d2lzZUFOREV4cHJlc3Npb25bSW4sIFlpZWxkLCBBd2FpdF0gOlxuLy8gICAgRXF1YWxpdHlFeHByZXNzaW9uWz9JbiwgP1lpZWxkLCA/QXdhaXRdXG4vLyAgICBCaXR3aXNlQU5ERXhwcmVzc2lvbls/SW4sID9ZaWVsZCwgP0F3YWl0XSAmIEVxdWFsaXR5RXhwcmVzc2lvbls/SW4sID9ZaWVsZCwgP0F3YWl0XVxubGV0IEJpdHdpc2VBTkRFeHByZXNzaW9uID0gKEluLCBZaWVsZCwgQXdhaXQpID0+IChnaXZlbikgPT4ge1xuICBsZXQgRXF1YWxpdHlFeHByZXNzaW9uID0gcmVxdWlyZSgnLi9FcXVhbGl0eUV4cHJlc3Npb24nKTtcblxuICBsZXQgcGFyYW1zID0gW0luLCBZaWVsZCwgQXdhaXRdO1xuICBsZXQgeyB0eXBlIH0gPSBnaXZlbjtcbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSAnQXdhaXRFeHByZXNzaW9uJzpcbiAgICBjYXNlICdVbmFyeUV4cHJlc3Npb24nOlxuICAgIGNhc2UgJ1VwZGF0ZUV4cHJlc3Npb24nOlxuICAgIGNhc2UgJ0NhbGxFeHByZXNzaW9uJzpcbiAgICBjYXNlICdOZXdFeHByZXNzaW9uJzpcbiAgICBjYXNlICdNZW1iZXJFeHByZXNzaW9uJzpcbiAgICBjYXNlICdPYmplY3RFeHByZXNzaW9uJzpcbiAgICBjYXNlICdBcnJheUV4cHJlc3Npb24nOlxuICAgIGNhc2UgJ0Z1bmN0aW9uRXhwcmVzc2lvbic6XG4gICAgY2FzZSAnQ2xhc3NFeHByZXNzaW9uJzpcbiAgICBjYXNlICdTZXF1ZW5jZUV4cHJlc3Npb24nOlxuICAgIGNhc2UgJ1BhcmVudGhlc2l6ZWRFeHByZXNzaW9uJzpcbiAgICBjYXNlICdUZW1wbGF0ZUxpdGVyYWwnOlxuICAgIGNhc2UgJ1RhZ2dlZFRlbXBsYXRlRXhwcmVzc2lvbic6XG4gICAgY2FzZSAnSWRlbnRpZmllcic6XG4gICAgY2FzZSAnVGhpc0V4cHJlc3Npb24nOlxuICAgIGNhc2UgJ0FycmF5UGF0dGVybic6XG4gICAgY2FzZSAnT2JqZWN0UGF0dGVybic6XG4gICAgY2FzZSAnTWV0YVByb3BlcnR5JzpcbiAgICBjYXNlICdMaXRlcmFsJzoge1xuICAgICAgbGV0IGV4cHIgPSBFcXVhbGl0eUV4cHJlc3Npb24oSW4sIFlpZWxkLCBBd2FpdCkoZ2l2ZW4pO1xuICAgICAgcmV0dXJuIG5ldyBOb2RlKCdCaXR3aXNlQU5ERXhwcmVzc2lvbicsIGdpdmVuLCAwLCBbZXhwcl0sIHBhcmFtcyk7XG4gICAgfVxuICAgIGNhc2UgJ0JpbmFyeUV4cHJlc3Npb24nOiB7XG4gICAgICBsZXQgeyBpbmRleCwgY2hpbGRyZW4gfSA9IE5vZGUuZ2V0QmluYXJ5KGdpdmVuLCBbJyYnXSxcbiAgICAgICAgQml0d2lzZUFOREV4cHJlc3Npb24oSW4sIFlpZWxkLCBBd2FpdCksXG4gICAgICAgIEVxdWFsaXR5RXhwcmVzc2lvbihJbiwgWWllbGQsIEF3YWl0KSxcbiAgICAgICk7XG4gICAgICByZXR1cm4gbmV3IE5vZGUoJ0JpdHdpc2VBTkRFeHByZXNzaW9uJywgZ2l2ZW4sIGluZGV4LCBjaGlsZHJlbiwgcGFyYW1zKTtcbiAgICB9XG4gICAgZGVmYXVsdDpcbiAgICAgIE5vZGUuVE9ETyhgJHt0eXBlfSBAIEJpdHdpc2VBTkRFeHByZXNzaW9uYCk7XG4gIH1cbiAgTm9kZS5UT0RPKCdCaXR3aXNlQU5ERXhwcmVzc2lvbicpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEJpdHdpc2VBTkRFeHByZXNzaW9uO1xuIiwiY29uc3QgTm9kZSA9IHJlcXVpcmUoJy4uL05vZGUnKTtcblxuLy8gQml0d2lzZU9SRXhwcmVzc2lvbltJbiwgWWllbGQsIEF3YWl0XSA6XG4vLyAgICBCaXR3aXNlWE9SRXhwcmVzc2lvbls/SW4sID9ZaWVsZCwgP0F3YWl0XVxuLy8gICAgQml0d2lzZU9SRXhwcmVzc2lvbls/SW4sID9ZaWVsZCwgP0F3YWl0XSB8IEJpdHdpc2VYT1JFeHByZXNzaW9uWz9JbiwgP1lpZWxkLCA/QXdhaXRdXG5sZXQgQml0d2lzZU9SRXhwcmVzc2lvbiA9IChJbiwgWWllbGQsIEF3YWl0KSA9PiAoZ2l2ZW4pID0+IHtcbiAgbGV0IEJpdHdpc2VYT1JFeHByZXNzaW9uID0gcmVxdWlyZSgnLi9CaXR3aXNlWE9SRXhwcmVzc2lvbicpO1xuXG4gIGxldCBwYXJhbXMgPSBbSW4sIFlpZWxkLCBBd2FpdF07XG4gIGxldCB7IHR5cGUgfSA9IGdpdmVuO1xuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlICdBd2FpdEV4cHJlc3Npb24nOlxuICAgIGNhc2UgJ1VuYXJ5RXhwcmVzc2lvbic6XG4gICAgY2FzZSAnVXBkYXRlRXhwcmVzc2lvbic6XG4gICAgY2FzZSAnQ2FsbEV4cHJlc3Npb24nOlxuICAgIGNhc2UgJ05ld0V4cHJlc3Npb24nOlxuICAgIGNhc2UgJ01lbWJlckV4cHJlc3Npb24nOlxuICAgIGNhc2UgJ09iamVjdEV4cHJlc3Npb24nOlxuICAgIGNhc2UgJ0FycmF5RXhwcmVzc2lvbic6XG4gICAgY2FzZSAnRnVuY3Rpb25FeHByZXNzaW9uJzpcbiAgICBjYXNlICdDbGFzc0V4cHJlc3Npb24nOlxuICAgIGNhc2UgJ1NlcXVlbmNlRXhwcmVzc2lvbic6XG4gICAgY2FzZSAnUGFyZW50aGVzaXplZEV4cHJlc3Npb24nOlxuICAgIGNhc2UgJ1RlbXBsYXRlTGl0ZXJhbCc6XG4gICAgY2FzZSAnVGFnZ2VkVGVtcGxhdGVFeHByZXNzaW9uJzpcbiAgICBjYXNlICdJZGVudGlmaWVyJzpcbiAgICBjYXNlICdUaGlzRXhwcmVzc2lvbic6XG4gICAgY2FzZSAnQXJyYXlQYXR0ZXJuJzpcbiAgICBjYXNlICdPYmplY3RQYXR0ZXJuJzpcbiAgICBjYXNlICdNZXRhUHJvcGVydHknOlxuICAgIGNhc2UgJ0xpdGVyYWwnOiB7XG4gICAgICBsZXQgZXhwciA9IEJpdHdpc2VYT1JFeHByZXNzaW9uKEluLCBZaWVsZCwgQXdhaXQpKGdpdmVuKTtcbiAgICAgIHJldHVybiBuZXcgTm9kZSgnQml0d2lzZU9SRXhwcmVzc2lvbicsIGdpdmVuLCAwLCBbZXhwcl0sIHBhcmFtcyk7XG4gICAgfVxuICAgIGNhc2UgJ0JpbmFyeUV4cHJlc3Npb24nOiB7XG4gICAgICBsZXQgeyBpbmRleCwgY2hpbGRyZW4gfSA9IE5vZGUuZ2V0QmluYXJ5KGdpdmVuLCBbJ3wnXSxcbiAgICAgICAgQml0d2lzZU9SRXhwcmVzc2lvbihJbiwgWWllbGQsIEF3YWl0KSxcbiAgICAgICAgQml0d2lzZVhPUkV4cHJlc3Npb24oSW4sIFlpZWxkLCBBd2FpdCksXG4gICAgICApO1xuICAgICAgcmV0dXJuIG5ldyBOb2RlKCdCaXR3aXNlT1JFeHByZXNzaW9uJywgZ2l2ZW4sIGluZGV4LCBjaGlsZHJlbiwgcGFyYW1zKTtcbiAgICB9XG4gICAgZGVmYXVsdDpcbiAgICAgIE5vZGUuVE9ETyhgJHt0eXBlfSBAIEJpdHdpc2VPUkV4cHJlc3Npb25gKTtcbiAgfVxuICBOb2RlLlRPRE8oJ0JpdHdpc2VPUkV4cHJlc3Npb24nKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBCaXR3aXNlT1JFeHByZXNzaW9uO1xuIiwiY29uc3QgTm9kZSA9IHJlcXVpcmUoJy4uL05vZGUnKTtcblxuLy8gQml0d2lzZVhPUkV4cHJlc3Npb25bSW4sIFlpZWxkLCBBd2FpdF0gOlxuLy8gICAgQml0d2lzZUFOREV4cHJlc3Npb25bP0luLCA/WWllbGQsID9Bd2FpdF1cbi8vICAgIEJpdHdpc2VYT1JFeHByZXNzaW9uWz9JbiwgP1lpZWxkLCA/QXdhaXRdIF4gQml0d2lzZUFOREV4cHJlc3Npb25bP0luLCA/WWllbGQsID9Bd2FpdF1cbmxldCBCaXR3aXNlWE9SRXhwcmVzc2lvbiA9IChJbiwgWWllbGQsIEF3YWl0KSA9PiAoZ2l2ZW4pID0+IHtcbiAgbGV0IEJpdHdpc2VBTkRFeHByZXNzaW9uID0gcmVxdWlyZSgnLi9CaXR3aXNlQU5ERXhwcmVzc2lvbicpO1xuXG4gIGxldCBwYXJhbXMgPSBbSW4sIFlpZWxkLCBBd2FpdF07XG4gIGxldCB7IHR5cGUgfSA9IGdpdmVuO1xuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlICdBd2FpdEV4cHJlc3Npb24nOlxuICAgIGNhc2UgJ1VuYXJ5RXhwcmVzc2lvbic6XG4gICAgY2FzZSAnVXBkYXRlRXhwcmVzc2lvbic6XG4gICAgY2FzZSAnQ2FsbEV4cHJlc3Npb24nOlxuICAgIGNhc2UgJ05ld0V4cHJlc3Npb24nOlxuICAgIGNhc2UgJ01lbWJlckV4cHJlc3Npb24nOlxuICAgIGNhc2UgJ09iamVjdEV4cHJlc3Npb24nOlxuICAgIGNhc2UgJ0FycmF5RXhwcmVzc2lvbic6XG4gICAgY2FzZSAnRnVuY3Rpb25FeHByZXNzaW9uJzpcbiAgICBjYXNlICdDbGFzc0V4cHJlc3Npb24nOlxuICAgIGNhc2UgJ1NlcXVlbmNlRXhwcmVzc2lvbic6XG4gICAgY2FzZSAnUGFyZW50aGVzaXplZEV4cHJlc3Npb24nOlxuICAgIGNhc2UgJ1RlbXBsYXRlTGl0ZXJhbCc6XG4gICAgY2FzZSAnVGFnZ2VkVGVtcGxhdGVFeHByZXNzaW9uJzpcbiAgICBjYXNlICdJZGVudGlmaWVyJzpcbiAgICBjYXNlICdUaGlzRXhwcmVzc2lvbic6XG4gICAgY2FzZSAnQXJyYXlQYXR0ZXJuJzpcbiAgICBjYXNlICdPYmplY3RQYXR0ZXJuJzpcbiAgICBjYXNlICdNZXRhUHJvcGVydHknOlxuICAgIGNhc2UgJ0xpdGVyYWwnOiB7XG4gICAgICBsZXQgZXhwciA9IEJpdHdpc2VBTkRFeHByZXNzaW9uKEluLCBZaWVsZCwgQXdhaXQpKGdpdmVuKTtcbiAgICAgIHJldHVybiBuZXcgTm9kZSgnQml0d2lzZVhPUkV4cHJlc3Npb24nLCBnaXZlbiwgMCwgW2V4cHJdLCBwYXJhbXMpO1xuICAgIH1cbiAgICBjYXNlICdCaW5hcnlFeHByZXNzaW9uJzoge1xuICAgICAgbGV0IHsgaW5kZXgsIGNoaWxkcmVuIH0gPSBOb2RlLmdldEJpbmFyeShnaXZlbiwgWydeJ10sXG4gICAgICAgIEJpdHdpc2VYT1JFeHByZXNzaW9uKEluLCBZaWVsZCwgQXdhaXQpLFxuICAgICAgICBCaXR3aXNlQU5ERXhwcmVzc2lvbihJbiwgWWllbGQsIEF3YWl0KSxcbiAgICAgICk7XG4gICAgICByZXR1cm4gbmV3IE5vZGUoJ0JpdHdpc2VYT1JFeHByZXNzaW9uJywgZ2l2ZW4sIGluZGV4LCBjaGlsZHJlbiwgcGFyYW1zKTtcbiAgICB9XG4gICAgZGVmYXVsdDpcbiAgICAgIE5vZGUuVE9ETyhgJHt0eXBlfSBAIEJpdHdpc2VYT1JFeHByZXNzaW9uYCk7XG4gIH1cbiAgTm9kZS5UT0RPKCdCaXR3aXNlWE9SRXhwcmVzc2lvbicpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEJpdHdpc2VYT1JFeHByZXNzaW9uO1xuIiwiY29uc3QgTm9kZSA9IHJlcXVpcmUoJy4uL05vZGUnKTtcblxuLy8gQmxvY2tbWWllbGQsIEF3YWl0LCBSZXR1cm5dIDpcbi8vICAgIHsgU3RhdGVtZW50TGlzdFs/WWllbGQsID9Bd2FpdCwgP1JldHVybl1fb3B0IH1cbmxldCBCbG9jayA9IChZaWVsZCwgQXdhaXQsIFJldHVybikgPT4gKGdpdmVuKSA9PiB7XG4gIGNvbnN0IFN0YXRlbWVudExpc3QgPSByZXF1aXJlKCcuL1N0YXRlbWVudExpc3QnKTtcbiAgbGV0IHBhcmFtcyA9IFtZaWVsZCwgQXdhaXQsIFJldHVybl07XG4gIGxldCBsaXN0ID0gbnVsbDtcbiAgaWYgKGdpdmVuLmJvZHkubGVuZ3RoID4gMCkgbGlzdCA9IFN0YXRlbWVudExpc3QoWWllbGQsIEF3YWl0LCBSZXR1cm4pKGdpdmVuLmJvZHkpO1xuICByZXR1cm4gbmV3IE5vZGUoJ0Jsb2NrJywgZ2l2ZW4sIDAsIFtsaXN0XSwgcGFyYW1zKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBCbG9jaztcbiIsImNvbnN0IE5vZGUgPSByZXF1aXJlKCcuLi9Ob2RlJyk7XG5cbi8vIEJsb2NrU3RhdGVtZW50W1lpZWxkLCBBd2FpdCwgUmV0dXJuXSA6XG4vLyAgICBCbG9ja1s/WWllbGQsID9Bd2FpdCwgP1JldHVybl1cbmxldCBCbG9ja1N0YXRlbWVudCA9IChZaWVsZCwgQXdhaXQsIFJldHVybikgPT4gKGdpdmVuKSA9PiB7XG4gIGNvbnN0IEJsb2NrID0gcmVxdWlyZSgnLi9CbG9jaycpO1xuICBsZXQgcGFyYW1zID0gW1lpZWxkLCBBd2FpdCwgUmV0dXJuXTtcbiAgbGV0IGJsb2NrID0gQmxvY2soWWllbGQsIEF3YWl0LCBSZXR1cm4pKGdpdmVuKTtcbiAgcmV0dXJuIG5ldyBOb2RlKCdCbG9ja1N0YXRlbWVudCcsIGdpdmVuLCAwLCBbYmxvY2tdLCBwYXJhbXMpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEJsb2NrU3RhdGVtZW50O1xuIiwiY29uc3QgTm9kZSA9IHJlcXVpcmUoJy4uL05vZGUnKTtcblxuLy8gQnJlYWtTdGF0ZW1lbnRbWWllbGQsIEF3YWl0XSA6XG4vLyAgICBicmVhayA7XG4vLyAgICBicmVhayBbbm8gTGluZVRlcm1pbmF0b3IgaGVyZV0gTGFiZWxJZGVudGlmaWVyWz9ZaWVsZCwgP0F3YWl0XSA7XG5sZXQgQnJlYWtTdGF0ZW1lbnQgPSAoWWllbGQsIEF3YWl0KSA9PiAoZ2l2ZW4pID0+IHtcbiAgY29uc3QgTGFiZWxJZGVudGlmaWVyID0gcmVxdWlyZSgnLi9MYWJlbElkZW50aWZpZXInKTtcbiAgbGV0IHBhcmFtcyA9IFtZaWVsZCwgQXdhaXRdO1xuICBsZXQgeyBsYWJlbCB9ID0gZ2l2ZW47XG4gIGlmIChsYWJlbCA9PSBudWxsKSB7XG4gICAgcmV0dXJuIG5ldyBOb2RlKCdCcmVha1N0YXRlbWVudCcsIGdpdmVuLCAwLCBbXSwgcGFyYW1zKTtcbiAgfSBlbHNlIHtcbiAgICBsZXQgeCA9IExhYmVsSWRlbnRpZmllcihZaWVsZCwgQXdhaXQpKGxhYmVsKTtcbiAgICByZXR1cm4gbmV3IE5vZGUoJ0JyZWFrU3RhdGVtZW50JywgZ2l2ZW4sIDEsIFt4XSwgcGFyYW1zKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEJyZWFrU3RhdGVtZW50O1xuIiwiY29uc3QgTm9kZSA9IHJlcXVpcmUoJy4uL05vZGUnKTtcblxuLy8gQnJlYWthYmxlU3RhdGVtZW50W1lpZWxkLCBBd2FpdCwgUmV0dXJuXSA6XG4vLyAgICBJdGVyYXRpb25TdGF0ZW1lbnRbP1lpZWxkLCA/QXdhaXQsID9SZXR1cm5dXG4vLyAgICBTd2l0Y2hTdGF0ZW1lbnRbP1lpZWxkLCA/QXdhaXQsID9SZXR1cm5dXG5sZXQgQnJlYWthYmxlU3RhdGVtZW50ID0gKFlpZWxkLCBBd2FpdCwgUmV0dXJuKSA9PiAoZ2l2ZW4pID0+IHtcbiAgY29uc3QgSXRlcmF0aW9uU3RhdGVtZW50ID0gcmVxdWlyZSgnLi9JdGVyYXRpb25TdGF0ZW1lbnQnKTtcbiAgY29uc3QgU3dpdGNoU3RhdGVtZW50ID0gcmVxdWlyZSgnLi9Td2l0Y2hTdGF0ZW1lbnQnKTtcbiAgbGV0IHBhcmFtcyA9IFtZaWVsZCwgQXdhaXQsIFJldHVybl07XG4gIHN3aXRjaCAoZ2l2ZW4udHlwZSkge1xuICAgIGNhc2UgJ1N3aXRjaFN0YXRlbWVudCc6IHtcbiAgICAgIGxldCBzdG10ID0gU3dpdGNoU3RhdGVtZW50KFlpZWxkLCBBd2FpdCwgUmV0dXJuKShnaXZlbik7XG4gICAgICByZXR1cm4gbmV3IE5vZGUoJ0JyZWFrYWJsZVN0YXRlbWVudCcsIGdpdmVuLCAxLCBbc3RtdF0sIHBhcmFtcyk7XG4gICAgfVxuICAgIGRlZmF1bHQ6IHtcbiAgICAgIGxldCBzdG10ID0gSXRlcmF0aW9uU3RhdGVtZW50KFlpZWxkLCBBd2FpdCwgUmV0dXJuKShnaXZlbik7XG4gICAgICByZXR1cm4gbmV3IE5vZGUoJ0JyZWFrYWJsZVN0YXRlbWVudCcsIGdpdmVuLCAwLCBbc3RtdF0sIHBhcmFtcyk7XG4gICAgfVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQnJlYWthYmxlU3RhdGVtZW50O1xuIiwiY29uc3QgTm9kZSA9IHJlcXVpcmUoJy4uL05vZGUnKTtcbmNvbnN0IExleGljYWxOb2RlID0gcmVxdWlyZSgnLi4vTGV4aWNhbE5vZGUnKTtcblxuLy8gQ2FsbEV4cHJlc3Npb25bWWllbGQsIEF3YWl0XSA6XG4vLyAgICBDb3ZlckNhbGxFeHByZXNzaW9uQW5kQXN5bmNBcnJvd0hlYWRbP1lpZWxkLCA/QXdhaXRdXG4vLyAgICBTdXBlckNhbGxbP1lpZWxkLCA/QXdhaXRdXG4vLyAgICBJbXBvcnRDYWxsWz9ZaWVsZCwgP0F3YWl0XVxuLy8gICAgQ2FsbEV4cHJlc3Npb25bP1lpZWxkLCA/QXdhaXRdIEFyZ3VtZW50c1s/WWllbGQsID9Bd2FpdF1cbi8vICAgIENhbGxFeHByZXNzaW9uWz9ZaWVsZCwgP0F3YWl0XSBbIEV4cHJlc3Npb25bK0luLCA/WWllbGQsID9Bd2FpdF0gXVxuLy8gICAgQ2FsbEV4cHJlc3Npb25bP1lpZWxkLCA/QXdhaXRdIC4gSWRlbnRpZmllck5hbWVcbi8vICAgIENhbGxFeHByZXNzaW9uWz9ZaWVsZCwgP0F3YWl0XSBUZW1wbGF0ZUxpdGVyYWxbP1lpZWxkLCA/QXdhaXQsICtUYWdnZWRdXG5sZXQgQ2FsbEV4cHJlc3Npb24gPSAoWWllbGQsIEF3YWl0KSA9PiAoZ2l2ZW4pID0+IHtcbiAgY29uc3QgQ292ZXJDYWxsRXhwcmVzc2lvbkFuZEFzeW5jQXJyb3dIZWFkID0gcmVxdWlyZSgnLi9Db3ZlckNhbGxFeHByZXNzaW9uQW5kQXN5bmNBcnJvd0hlYWQnKTtcbiAgY29uc3QgRXhwcmVzc2lvbiA9IHJlcXVpcmUoJy4vRXhwcmVzc2lvbicpO1xuICBjb25zdCBBcmd1bWVudHMgPSByZXF1aXJlKCcuL0FyZ3VtZW50cycpO1xuICBjb25zdCBTdXBlckNhbGwgPSByZXF1aXJlKCcuL1N1cGVyQ2FsbCcpO1xuICBjb25zdCBUZW1wbGF0ZUxpdGVyYWwgPSByZXF1aXJlKCcuL1RlbXBsYXRlTGl0ZXJhbCcpO1xuXG4gIGxldCBwYXJhbXMgPSBbWWllbGQsIEF3YWl0XTtcbiAgbGV0IHsgdHlwZSwgY2FsbGVlIH0gPSBnaXZlbjtcblxuICBpZiAodHlwZSA9PT0gJ01lbWJlckV4cHJlc3Npb24nKSB7XG4gICAgY29uc3QgeyBvYmplY3QsIHByb3BlcnR5LCBjb21wdXRlZCB9ID0gZ2l2ZW47XG4gICAgY29uc3QgY2FsbEV4cHIgPSBDYWxsRXhwcmVzc2lvbihZaWVsZCwgQXdhaXQpKG9iamVjdCk7XG4gICAgaWYgKCFjb21wdXRlZCkge1xuICAgICAgbGV0IHByb3BOYW1lID0gbmV3IExleGljYWxOb2RlKCdJZGVudGlmaWVyTmFtZScsIHByb3BlcnR5Lm5hbWUpO1xuICAgICAgcmV0dXJuIG5ldyBOb2RlKCdDYWxsRXhwcmVzc2lvbicsIGdpdmVuLCA1LCBbY2FsbEV4cHIsIHByb3BOYW1lXSwgcGFyYW1zKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBjb25zdCBleHByID0gRXhwcmVzc2lvbih0cnVlLCBZaWVsZCwgQXdhaXQpKHByb3BlcnR5KTtcbiAgICAgIHJldHVybiBuZXcgTm9kZSgnQ2FsbEV4cHJlc3Npb24nLCBnaXZlbiwgNCwgW2NhbGxFeHByLCBleHByXSwgcGFyYW1zKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAodHlwZSA9PT0gJ1RhZ2dlZFRlbXBsYXRlRXhwcmVzc2lvbicpIHtcbiAgICBjb25zdCBjYWxsRXhwciA9IENhbGxFeHByZXNzaW9uKFlpZWxkLCBBd2FpdCkoZ2l2ZW4udGFnKTtcbiAgICBjb25zdCBxdWFzaSA9IFRlbXBsYXRlTGl0ZXJhbChZaWVsZCwgQXdhaXQsIHRydWUpKGdpdmVuLnF1YXNpKTtcbiAgICByZXR1cm4gbmV3IE5vZGUoJ0NhbGxFeHByZXNzaW9uJywgZ2l2ZW4sIDYsIFtjYWxsRXhwciwgcXVhc2ldLCBwYXJhbXMpO1xuICB9IGVsc2UgaWYgKHR5cGUgIT0gJ0NhbGxFeHByZXNzaW9uJykge1xuICAgIE5vZGUuVE9ETyhgJHt0eXBlfSBAIENhbGxFeHByZXNzaW9uYCk7XG4gIH0gZWxzZSBpZiAoY2FsbGVlLnR5cGUgPT0gJ1N1cGVyJykge1xuICAgIGNvbnN0IGNhbGwgPSBTdXBlckNhbGwoWWllbGQsIEF3YWl0KShnaXZlbik7XG4gICAgcmV0dXJuIG5ldyBOb2RlKCdDYWxsRXhwcmVzc2lvbicsIGdpdmVuLCAxLCBbY2FsbF0sIHBhcmFtcyk7XG4gIH0gZWxzZSBpZiAoXG4gICAgKGNhbGxlZS50eXBlID09PSAnTWVtYmVyRXhwcmVzc2lvbicgJiYgY2FsbGVlLm9iamVjdC50eXBlID09PSAnQ2FsbEV4cHJlc3Npb24nICkgfHwgXG4gICAgY2FsbGVlLnR5cGUgPT09ICdDYWxsRXhwcmVzc2lvbidcbiAgKSB7XG4gICAgLy8gaGFuZGxlcyBleHByZXNzaW9ucyBsaWtlIGEoKS5iKClcbiAgICBjb25zdCBjYWxsRXhwciA9IENhbGxFeHByZXNzaW9uKFlpZWxkLCBBd2FpdCkoY2FsbGVlKTtcbiAgICBjb25zdCBhcmdzID0gQXJndW1lbnRzKFlpZWxkLCBBd2FpdCkoZ2l2ZW4uYXJndW1lbnRzKTtcbiAgICBjb25zdCBub2RlID0gbmV3IE5vZGUoJ0NhbGxFeHByZXNzaW9uJywgZ2l2ZW4sIDMsIFtjYWxsRXhwciwgYXJnc10sIHBhcmFtcyk7XG4gICAgcmV0dXJuIG5vZGU7XG4gIH0gZWxzZSB7XG4gICAgbGV0IGNvdmVyID0gQ292ZXJDYWxsRXhwcmVzc2lvbkFuZEFzeW5jQXJyb3dIZWFkKFlpZWxkLCBBd2FpdCkoZ2l2ZW4pXG4gICAgcmV0dXJuIG5ldyBOb2RlKCdDYWxsRXhwcmVzc2lvbicsIGdpdmVuLCAwLCBbY292ZXJdLCBwYXJhbXMpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQ2FsbEV4cHJlc3Npb247XG4iLCJjb25zdCBOb2RlID0gcmVxdWlyZSgnLi4vTm9kZScpO1xuXG4vLyBDYXNlQmxvY2tbWWllbGQsIEF3YWl0LCBSZXR1cm5dIDpcbi8vICAgIHsgQ2FzZUNsYXVzZXNbP1lpZWxkLCA/QXdhaXQsID9SZXR1cm5dX29wdCB9XG4vLyAgICB7IENhc2VDbGF1c2VzWz9ZaWVsZCwgP0F3YWl0LCA/UmV0dXJuXV9vcHQgRGVmYXVsdENsYXVzZVs/WWllbGQsID9Bd2FpdCwgP1JldHVybl0gQ2FzZUNsYXVzZXNbP1lpZWxkLCA/QXdhaXQsID9SZXR1cm5dX29wdCB9XG5sZXQgQ2FzZUJsb2NrID0gKFlpZWxkLCBBd2FpdCwgUmV0dXJuKSA9PiAoZ2l2ZW4pID0+IHtcbiAgY29uc3QgQ2FzZUNsYXVzZXMgPSByZXF1aXJlKCcuL0Nhc2VDbGF1c2VzJyk7XG4gIGNvbnN0IERlZmF1bHRDbGF1c2UgPSByZXF1aXJlKCcuL0RlZmF1bHRDbGF1c2UnKTtcbiAgbGV0IHBhcmFtcyA9IFtZaWVsZCwgQXdhaXQsIFJldHVybl07XG4gIGxldCBkZWZhdWx0SWR4ID0gZ2l2ZW4uZmluZEluZGV4KHggPT4geC50ZXN0ID09IG51bGwpO1xuICBsZXQgc2l6ZSA9IGdpdmVuLmxlbmd0aDtcbiAgaWYgKGRlZmF1bHRJZHggPT0gLTEpIHtcbiAgICBsZXQgYyA9IG51bGw7XG4gICAgaWYgKHNpemUgPiAwKSBjID0gQ2FzZUNsYXVzZXMoWWllbGQsIEF3YWl0LCBSZXR1cm4pKGdpdmVuKTtcbiAgICByZXR1cm4gbmV3IE5vZGUoJ0Nhc2VCbG9jaycsIHt9LCAwLCBbY10sIHBhcmFtcyk7XG4gIH0gZWxzZSB7XG4gICAgbGV0IGwgPSBudWxsO1xuICAgIGxldCBscyA9IGdpdmVuLnNsaWNlKDAsIGRlZmF1bHRJZHgpO1xuICAgIGlmIChscy5sZW5ndGggPiAwKSBsID0gQ2FzZUNsYXVzZXMoWWllbGQsIEF3YWl0LCBSZXR1cm4pKGxzKTtcbiAgICBsZXQgZCA9IERlZmF1bHRDbGF1c2UoWWllbGQsIEF3YWl0LCBSZXR1cm4pKGdpdmVuW2RlZmF1bHRJZHhdKTtcbiAgICBsZXQgciA9IG51bGw7XG4gICAgbGV0IHJzID0gZ2l2ZW4uc2xpY2UoZGVmYXVsdElkeCArIDEpO1xuICAgIGlmIChycy5sZW5ndGggPiAwKSByID0gQ2FzZUNsYXVzZXMoWWllbGQsIEF3YWl0LCBSZXR1cm4pKHJzKTtcbiAgICByZXR1cm4gbmV3IE5vZGUoJ0Nhc2VCbG9jaycsIHt9LCAxLCBbbCwgZCwgcl0sIHBhcmFtcyk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBDYXNlQmxvY2s7XG4iLCJjb25zdCBOb2RlID0gcmVxdWlyZSgnLi4vTm9kZScpO1xuXG4vLyBDYXNlQ2xhdXNlW1lpZWxkLCBBd2FpdCwgUmV0dXJuXSA6XG4vLyAgICBjYXNlIEV4cHJlc3Npb25bK0luLCA/WWllbGQsID9Bd2FpdF0gOiBTdGF0ZW1lbnRMaXN0Wz9ZaWVsZCwgP0F3YWl0LCA/UmV0dXJuXV9vcHRcbmxldCBDYXNlQ2xhdXNlID0gKFlpZWxkLCBBd2FpdCwgUmV0dXJuKSA9PiAoZ2l2ZW4pID0+IHtcbiAgY29uc3QgRXhwcmVzc2lvbiA9IHJlcXVpcmUoJy4vRXhwcmVzc2lvbicpO1xuICBjb25zdCBTdGF0ZW1lbnRMaXN0ID0gcmVxdWlyZSgnLi9TdGF0ZW1lbnRMaXN0Jyk7XG4gIGxldCBwYXJhbXMgPSBbWWllbGQsIEF3YWl0LCBSZXR1cm5dO1xuICBsZXQgZXhwciA9IEV4cHJlc3Npb24odHJ1ZSwgWWllbGQsIEF3YWl0KShnaXZlbi50ZXN0KTtcbiAgbGV0IGxpc3QgPSBudWxsO1xuICBpZiAoZ2l2ZW4uY29uc2VxdWVudC5sZW5ndGggPiAwKSB7XG4gICAgbGlzdCA9IFN0YXRlbWVudExpc3QoWWllbGQsIEF3YWl0LCBSZXR1cm4pKGdpdmVuLmNvbnNlcXVlbnQpO1xuICB9XG4gIHJldHVybiBuZXcgTm9kZSgnQ2FzZUNsYXVzZScsIGdpdmVuLCAwLCBbZXhwciwgbGlzdF0sIHBhcmFtcyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQ2FzZUNsYXVzZTtcbiIsImNvbnN0IE5vZGUgPSByZXF1aXJlKCcuLi9Ob2RlJyk7XG5cbi8vIENhc2VDbGF1c2VzW1lpZWxkLCBBd2FpdCwgUmV0dXJuXSA6XG4vLyAgICBDYXNlQ2xhdXNlWz9ZaWVsZCwgP0F3YWl0LCA/UmV0dXJuXVxuLy8gICAgQ2FzZUNsYXVzZXNbP1lpZWxkLCA/QXdhaXQsID9SZXR1cm5dIENhc2VDbGF1c2VbP1lpZWxkLCA/QXdhaXQsID9SZXR1cm5dXG5sZXQgQ2FzZUNsYXVzZXMgPSAoWWllbGQsIEF3YWl0LCBSZXR1cm4pID0+IChnaXZlbikgPT4ge1xuICBjb25zdCBDYXNlQ2xhdXNlID0gcmVxdWlyZSgnLi9DYXNlQ2xhdXNlJyk7XG4gIGxldCBnZW5DaGlsZCA9IENhc2VDbGF1c2UoWWllbGQsIEF3YWl0LCBSZXR1cm4pO1xuICBsZXQgcGFyYW1zID0gW1lpZWxkLCBBd2FpdCwgUmV0dXJuXTtcbiAgcmV0dXJuIE5vZGUuZnJvbUxpc3QoJ0Nhc2VDbGF1c2UnLCBnaXZlbiwgZ2VuQ2hpbGQsIHBhcmFtcyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQ2FzZUNsYXVzZXM7XG4iLCJjb25zdCBOb2RlID0gcmVxdWlyZSgnLi4vTm9kZScpO1xuXG4vLyBDYXRjaFtZaWVsZCwgQXdhaXQsIFJldHVybl0gOlxuLy8gICAgY2F0Y2ggKCBDYXRjaFBhcmFtZXRlcls/WWllbGQsID9Bd2FpdF0gKSBCbG9ja1s/WWllbGQsID9Bd2FpdCwgP1JldHVybl1cbi8vICAgIGNhdGNoIEJsb2NrWz9ZaWVsZCwgP0F3YWl0LCA/UmV0dXJuXVxuXG5sZXQgQ2F0Y2ggPSAoWWllbGQsIEF3YWl0LCBSZXR1cm4pID0+IChnaXZlbikgPT4ge1xuICBjb25zdCBDYXRjaFBhcmFtZXRlciA9IHJlcXVpcmUoJy4vQ2F0Y2hQYXJhbWV0ZXInKTtcbiAgY29uc3QgQmxvY2sgPSByZXF1aXJlKCcuL0Jsb2NrJyk7XG4gIGxldCBwYXJhbXMgPSBbWWllbGQsIEF3YWl0LCBSZXR1cm5dO1xuICBsZXQgeyBib2R5LCBwYXJhbSB9ID0gZ2l2ZW47XG4gIGxldCBiID0gQmxvY2soWWllbGQsIEF3YWl0LCBSZXR1cm4pKGJvZHkpXG4gIGlmIChwYXJhbSAhPSBudWxsKSB7XG4gICAgbGV0IGMgPSBDYXRjaFBhcmFtZXRlcihZaWVsZCwgQXdhaXQpKHBhcmFtKTtcbiAgICByZXR1cm4gbmV3IE5vZGUoJ0NhdGNoJywgZ2l2ZW4sIDAsIFtjLCBiXSwgcGFyYW1zKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbmV3IE5vZGUoJ0NhdGNoJywgZ2l2ZW4sIDEsIFtiXSwgcGFyYW1zKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IENhdGNoO1xuIiwiY29uc3QgTm9kZSA9IHJlcXVpcmUoJy4uL05vZGUnKTtcblxuLy8gQ2F0Y2hQYXJhbWV0ZXJbWWllbGQsIEF3YWl0XSA6XG4vLyAgICBCaW5kaW5nSWRlbnRpZmllcls/WWllbGQsID9Bd2FpdF1cbi8vICAgIEJpbmRpbmdQYXR0ZXJuWz9ZaWVsZCwgP0F3YWl0XVxubGV0IENhdGNoUGFyYW1ldGVyID0gKFlpZWxkLCBBd2FpdCkgPT4gKGdpdmVuKSA9PiB7XG4gIGNvbnN0IEJpbmRpbmdJZGVudGlmaWVyID0gcmVxdWlyZSgnLi9CaW5kaW5nSWRlbnRpZmllcicpO1xuICBjb25zdCBCaW5kaW5nUGF0dGVybiA9IHJlcXVpcmUoJy4vQmluZGluZ1BhdHRlcm4nKTtcblxuICBsZXQgcGFyYW1zID0gW1lpZWxkLCBBd2FpdF07XG4gIGxldCB7IHR5cGUgfSA9IGdpdmVuO1xuICBpZiAodHlwZSA9PT0gJ0lkZW50aWZpZXInKSB7XG4gICAgbGV0IGlkID0gQmluZGluZ0lkZW50aWZpZXIoWWllbGQsIEF3YWl0KShnaXZlbik7XG4gICAgcmV0dXJuIG5ldyBOb2RlKCdDYXRjaFBhcmFtZXRlcicsIGdpdmVuLCAwLCBbaWRdLCBwYXJhbXMpO1xuICB9IGVsc2UgaWYgKHR5cGUgPT09ICdBcnJheVBhdHRlcm4nIHx8IHR5cGUgPT09ICdPYmplY3RQYXR0ZXJuJykge1xuICAgIGNvbnN0IHBhdHRlcm4gPSBCaW5kaW5nUGF0dGVybihZaWVsZCwgQXdhaXQpKGdpdmVuKTtcbiAgICByZXR1cm4gbmV3IE5vZGUoJ0NhdGNoUGFyYW1ldGVyJywgZ2l2ZW4sIDEsIFtwYXR0ZXJuXSwgcGFyYW1zKTtcbiAgfSBlbHNlIHtcbiAgICBOb2RlLlRPRE8oYCR7dHlwZX0gQCBDYXRjaFBhcmFtZXRlcmApO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQ2F0Y2hQYXJhbWV0ZXI7XG4iLCJjb25zdCBOb2RlID0gcmVxdWlyZSgnLi4vTm9kZScpO1xuXG4vLyBDbGFzc0JvZHlbWWllbGQsIEF3YWl0XSA6XG4vLyAgICBDbGFzc0VsZW1lbnRMaXN0Wz9ZaWVsZCwgP0F3YWl0XVxubGV0IENsYXNzQm9keSA9IChZaWVsZCwgQXdhaXQpID0+IChnaXZlbikgPT4ge1xuICBjb25zdCBDbGFzc0VsZW1lbnRMaXN0ID0gcmVxdWlyZSgnLi9DbGFzc0VsZW1lbnRMaXN0Jyk7XG4gIGxldCBwYXJhbXMgPSBbWWllbGQsIEF3YWl0XTtcbiAgbGV0IGxpc3QgPSBDbGFzc0VsZW1lbnRMaXN0KFlpZWxkLCBBd2FpdCkoZ2l2ZW4pO1xuICByZXR1cm4gbmV3IE5vZGUoJ0NsYXNzQm9keScsIGdpdmVuLCAwLCBbbGlzdF0sIHBhcmFtcyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQ2xhc3NCb2R5O1xuIiwiY29uc3QgTm9kZSA9IHJlcXVpcmUoJy4uL05vZGUnKTtcblxuLy8gQ2xhc3NEZWNsYXJhdGlvbltZaWVsZCwgQXdhaXQsIERlZmF1bHRdIDpcbi8vICAgIGNsYXNzIEJpbmRpbmdJZGVudGlmaWVyWz9ZaWVsZCwgP0F3YWl0XSBDbGFzc1RhaWxbP1lpZWxkLCA/QXdhaXRdXG4vLyAgICBbK0RlZmF1bHRdIGNsYXNzIENsYXNzVGFpbFs/WWllbGQsID9Bd2FpdF1cbmxldCBDbGFzc0RlY2xhcmF0aW9uID0gKFlpZWxkLCBBd2FpdCwgRGVmYXVsdCkgPT4gKGdpdmVuKSA9PiB7XG4gIGNvbnN0IEJpbmRpbmdJZGVudGlmaWVyID0gcmVxdWlyZSgnLi9CaW5kaW5nSWRlbnRpZmllcicpO1xuICBjb25zdCBDbGFzc1RhaWwgPSByZXF1aXJlKCcuL0NsYXNzVGFpbCcpO1xuICBsZXQgcGFyYW1zID0gW1lpZWxkLCBBd2FpdCwgRGVmYXVsdF07XG4gIGxldCB7IGlkIH0gPSBnaXZlbjtcbiAgbGV0IHRhaWwgPSBDbGFzc1RhaWwoWWllbGQsIEF3YWl0KShnaXZlbik7XG4gIGlmIChpZCkge1xuICAgIGxldCB4ID0gQmluZGluZ0lkZW50aWZpZXIoWWllbGQsIEF3YWl0KShpZCk7XG4gICAgcmV0dXJuIG5ldyBOb2RlKCdDbGFzc0RlY2xhcmF0aW9uJywgZ2l2ZW4sIDAsIFt4LCB0YWlsXSwgcGFyYW1zKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbmV3IE5vZGUoJ0NsYXNzRGVjbGFyYXRpb24nLCBnaXZlbiwgMSwgW3RhaWxdLCBwYXJhbXMpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQ2xhc3NEZWNsYXJhdGlvbjtcbiIsImNvbnN0IE5vZGUgPSByZXF1aXJlKCcuLi9Ob2RlJyk7XG5cbi8vIENsYXNzRWxlbWVudFtZaWVsZCwgQXdhaXRdIDpcbi8vICAgIE1ldGhvZERlZmluaXRpb25bP1lpZWxkLCA/QXdhaXRdXG4vLyAgICBzdGF0aWMgTWV0aG9kRGVmaW5pdGlvbls/WWllbGQsID9Bd2FpdF1cbi8vICAgIDtcbmxldCBDbGFzc0VsZW1lbnQgPSAoWWllbGQsIEF3YWl0KSA9PiAoZ2l2ZW4pID0+IHtcbiAgY29uc3QgTWV0aG9kRGVmaW5pdGlvbiA9IHJlcXVpcmUoJy4vTWV0aG9kRGVmaW5pdGlvbicpO1xuICBsZXQgcGFyYW1zID0gW1lpZWxkLCBBd2FpdF07XG4gIC8vIFsyLDBdXG4gIGlmIChnaXZlbiA9PT0gbnVsbClcbiAgICByZXR1cm4gbmV3IE5vZGUoJ0NsYXNzRWxlbWVudCcsIGdpdmVuLCAyLCBbXSwgcGFyYW1zKTtcbiAgZWxzZSB7XG4gICAgbGV0IHsgc3RhdGljIH0gPSBnaXZlbjtcbiAgICBsZXQgaW5kZXggPSAwO1xuICAgIGlmIChzdGF0aWMpIGluZGV4ID0gMTtcbiAgICBsZXQgbWV0aG9kID0gTWV0aG9kRGVmaW5pdGlvbihZaWVsZCwgQXdhaXQpKGdpdmVuKTtcbiAgICByZXR1cm4gbmV3IE5vZGUoJ0NsYXNzRWxlbWVudCcsIGdpdmVuLCBpbmRleCwgW21ldGhvZF0sIHBhcmFtcyk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBDbGFzc0VsZW1lbnQ7XG4iLCJjb25zdCBOb2RlID0gcmVxdWlyZSgnLi4vTm9kZScpO1xuXG4vLyBDbGFzc0VsZW1lbnRMaXN0W1lpZWxkLCBBd2FpdF0gOlxuLy8gICAgQ2xhc3NFbGVtZW50Wz9ZaWVsZCwgP0F3YWl0XVxuLy8gICAgQ2xhc3NFbGVtZW50TGlzdFs/WWllbGQsID9Bd2FpdF0gQ2xhc3NFbGVtZW50Wz9ZaWVsZCwgP0F3YWl0XVxubGV0IENsYXNzRWxlbWVudExpc3QgPSAoWWllbGQsIEF3YWl0KSA9PiAoZ2l2ZW4pID0+IHtcbiAgY29uc3QgQ2xhc3NFbGVtZW50ID0gcmVxdWlyZSgnLi9DbGFzc0VsZW1lbnQnKTtcbiAgbGV0IGdlbkNoaWxkID0gQ2xhc3NFbGVtZW50KFlpZWxkLCBBd2FpdCk7XG4gIGxldCBwYXJhbXMgPSBbWWllbGQsIEF3YWl0XTtcbiAgcmV0dXJuIE5vZGUuZnJvbUxpc3QoJ0NsYXNzRWxlbWVudExpc3QnLCBnaXZlbi5ib2R5LCBnZW5DaGlsZCwgcGFyYW1zKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBDbGFzc0VsZW1lbnRMaXN0O1xuIiwiY29uc3QgTm9kZSA9IHJlcXVpcmUoJy4uL05vZGUnKTtcblxuLy8gQ2xhc3NFeHByZXNzaW9uW1lpZWxkLCBBd2FpdF06IHtcbi8vICAgYGNsYXNzYCBCaW5kaW5nSWRlbnRpZmllcls/WWllbGQsID9Bd2FpdF0/IENsYXNzVGFpbFs/WWllbGQsID9Bd2FpdF1cbi8vIH1cblxubGV0IENsYXNzRXhwcmVzc2lvbiA9IChZaWVsZCwgQXdhaXQpID0+IChnaXZlbikgPT4ge1xuICBjb25zdCBCaW5kaW5nSWRlbnRpZmllciA9IHJlcXVpcmUoJy4vQmluZGluZ0lkZW50aWZpZXInKTtcbiAgY29uc3QgQ2xhc3NUYWlsID0gcmVxdWlyZSgnLi9DbGFzc1RhaWwnKTtcbiAgbGV0IHBhcmFtcyA9IFtZaWVsZCwgQXdhaXRdO1xuICBsZXQgeyBpZCwgc3VwZXJDbGFzcywgYm9keSB9ID0gZ2l2ZW47XG5cbiAgbGV0IGJpbmRpbmcgPSBudWxsO1xuICBpZiAoaWQgIT0gbnVsbCkgYmluZGluZyA9IEJpbmRpbmdJZGVudGlmaWVyKFlpZWxkLCBBd2FpdCkoaWQpO1xuICAvLyBUT0RPIGhhbmRsZSBzcGFuXG4gIGxldCB0YWlsID0gQ2xhc3NUYWlsKFlpZWxkLCBBd2FpdCkoe3N1cGVyQ2xhc3MsIGJvZHl9KTtcbiAgcmV0dXJuIG5ldyBOb2RlKCdDbGFzc0V4cHJlc3Npb24nLCBnaXZlbiwgMCwgW2JpbmRpbmcsIHRhaWxdLCBwYXJhbXMpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IENsYXNzRXhwcmVzc2lvbjtcbiIsImNvbnN0IE5vZGUgPSByZXF1aXJlKCcuLi9Ob2RlJyk7XG5cbi8vIENsYXNzSGVyaXRhZ2VbWWllbGQsIEF3YWl0XToge1xuLy8gICBgZXh0ZW5kc2AgTGVmdEhhbmRTaWRlRXhwcmVzc2lvbls/WWllbGQsID9Bd2FpdF1cbi8vIH1cblxubGV0IENsYXNzSGVyaXRhZ2UgPSAoWWllbGQsIEF3YWl0KSA9PiAoZ2l2ZW4pID0+IHtcbiAgbGV0IExlZnRIYW5kU2lkZUV4cHJlc3Npb24gPSByZXF1aXJlKCcuL0xlZnRIYW5kU2lkZUV4cHJlc3Npb24nKTtcbiAgbGV0IHBhcmFtcyA9IFtZaWVsZCwgQXdhaXRdO1xuICBsZXQgbGhzID0gTGVmdEhhbmRTaWRlRXhwcmVzc2lvbihZaWVsZCwgQXdhaXQpKGdpdmVuKTtcbiAgcmV0dXJuIG5ldyBOb2RlKCdDbGFzc0hlcml0YWdlJywgZ2l2ZW4sIDAsIFtsaHNdLCBwYXJhbXMpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IENsYXNzSGVyaXRhZ2U7XG4iLCJjb25zdCBOb2RlID0gcmVxdWlyZSgnLi4vTm9kZScpO1xuY29uc3QgeyBjcmVhdGVTZW1pY29sb24gfSA9IHJlcXVpcmUoJy4uL0dsb2JhbCcpO1xuXG4vLyBDbGFzc1RhaWxbWWllbGQsIEF3YWl0XSA6XG4vLyAgICBDbGFzc0hlcml0YWdlWz9ZaWVsZCwgP0F3YWl0XV9vcHQgeyBDbGFzc0JvZHlbP1lpZWxkLCA/QXdhaXRdX29wdCB9XG5sZXQgQ2xhc3NUYWlsID0gKFlpZWxkLCBBd2FpdCkgPT4gKGdpdmVuKSA9PiB7XG4gIGNvbnN0IENsYXNzSGVyaXRhZ2UgPSByZXF1aXJlKCcuL0NsYXNzSGVyaXRhZ2UnKTtcbiAgY29uc3QgQ2xhc3NCb2R5ID0gcmVxdWlyZSgnLi9DbGFzc0JvZHknKTtcbiAgbGV0IHBhcmFtcyA9IFtZaWVsZCwgQXdhaXRdO1xuICBsZXQgeyBzdXBlckNsYXNzLCBib2R5IH0gPSBnaXZlbjtcbiAgbGV0IGggPSBudWxsO1xuICBpZiAoc3VwZXJDbGFzcykge1xuICAgIGggPSBDbGFzc0hlcml0YWdlKFlpZWxkLCBBd2FpdCkoc3VwZXJDbGFzcyk7XG4gIH1cbiAgLy8gVE9ETyBmaXggc3BhblxuICAvLyBoYW5kbGUgQ2xhc3NFbGVtZW50WzIsMF1cbiAgbGV0IGIgPSBudWxsO1xuICBsZXQgc3RhcnQgPSBib2R5LnN0YXJ0O1xuICBsZXQgZW5kID0gYm9keS5lbmQ7XG4gIFxuICBpZiAoYm9keS5ib2R5Lmxlbmd0aCA9PT0gMClcbiAgICBib2R5LmJvZHkgPSBjcmVhdGVTZW1pY29sb24oc3RhcnQsIGVuZCk7XG4gIGVsc2Uge1xuICAgIGxldCBpZHggPSAwO1xuICAgIHdoaWxlKHRydWUpIHtcbiAgICAgIGxldCBlbGVtID0gYm9keS5ib2R5W2lkeF07XG4gICAgICBsZXQgYXJyMCA9IGJvZHkuYm9keS5zbGljZSgwLCBpZHgpO1xuICAgICAgbGV0IHNlbWlzID0gY3JlYXRlU2VtaWNvbG9uKHN0YXJ0LCBlbGVtLnN0YXJ0KTtcbiAgICAgIGxldCBhcnIxID0gYm9keS5ib2R5LnNsaWNlKGlkeCwgYm9keS5ib2R5Lmxlbmd0aCk7XG4gICAgICBib2R5LmJvZHkgPSBhcnIwLmNvbmNhdChzZW1pcykuY29uY2F0KGFycjEpO1xuICAgICAgaWR4ICs9IDEgKyBzZW1pcy5sZW5ndGg7XG4gICAgICBzdGFydCA9IGVsZW0uZW5kO1xuICAgICAgaWYgKGlkeCA+PSBib2R5LmJvZHkubGVuZ3RoKSB7XG4gICAgICAgIGxldCBsYXN0U2VtaXMgPSBjcmVhdGVTZW1pY29sb24oZWxlbS5lbmQsIGVuZCk7XG4gICAgICAgIGJvZHkuYm9keSA9IGJvZHkuYm9keS5jb25jYXQobGFzdFNlbWlzKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGlmIChib2R5LmJvZHkubGVuZ3RoID4gMCkge1xuICAgIGIgPSBDbGFzc0JvZHkoWWllbGQsIEF3YWl0KShib2R5KTtcbiAgfVxuICByZXR1cm4gbmV3IE5vZGUoJ0NsYXNzVGFpbCcsIGdpdmVuLCAwLCBbaCwgYl0sIHBhcmFtcyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQ2xhc3NUYWlsO1xuIiwiY29uc3QgTm9kZSA9IHJlcXVpcmUoJy4uL05vZGUnKTtcblxuLy8gQ29tcHV0ZWRQcm9wZXJ0eU5hbWVbWWllbGQsIEF3YWl0XToge1xuLy8gICBgW2AgQXNzaWdubWVudEV4cHJlc3Npb25bK0luLCA/WWllbGQsID9Bd2FpdF0gYF1gXG4vLyB9XG5cbmxldCBDb21wdXRlZFByb3BlcnR5TmFtZSA9IChZaWVsZCwgQXdhaXQpID0+IChnaXZlbikgPT4ge1xuICBsZXQgQXNzaWdubWVudEV4cHJlc3Npb24gPSByZXF1aXJlKCcuL0Fzc2lnbm1lbnRFeHByZXNzaW9uJyk7XG4gIGxldCBwYXJhbXMgPSBbWWllbGQsIEF3YWl0XTtcbiAgbGV0IG5hbWUgPSBBc3NpZ25tZW50RXhwcmVzc2lvbih0cnVlLCBZaWVsZCwgQXdhaXQpKGdpdmVuKTtcbiAgcmV0dXJuIG5ldyBOb2RlKCdDb21wdXRlZFByb3BlcnR5TmFtZScsIGdpdmVuLCAwLCBbbmFtZV0sIHBhcmFtcyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQ29tcHV0ZWRQcm9wZXJ0eU5hbWU7XG4iLCJjb25zdCBOb2RlID0gcmVxdWlyZSgnLi4vTm9kZScpO1xuXG4vLyBDb25jaXNlQm9keVtJbl0gOlxuLy8gICAgW2xvb2thaGVhZCDiiaAge10gRXhwcmVzc2lvbkJvZHlbP0luLCB+QXdhaXRdXG4vLyAgICB7IEZ1bmN0aW9uQm9keVt+WWllbGQsIH5Bd2FpdF0gfVxubGV0IENvbmNpc2VCb2R5ID0gKEluKSA9PiAoZ2l2ZW4pID0+IHtcbiAgY29uc3QgRXhwcmVzc2lvbkJvZHkgPSByZXF1aXJlKCcuL0V4cHJlc3Npb25Cb2R5Jyk7XG4gIGNvbnN0IEZ1bmN0aW9uQm9keSA9IHJlcXVpcmUoJy4vRnVuY3Rpb25Cb2R5Jyk7XG4gIGxldCBwYXJhbXMgPSBbSW5dO1xuICBsZXQgeyB0eXBlIH0gPSBnaXZlbjtcbiAgaWYgKHR5cGUgIT0gJ0Jsb2NrU3RhdGVtZW50Jykge1xuICAgIGxldCBib2R5ID0gRXhwcmVzc2lvbkJvZHkoSW4sIGZhbHNlKShnaXZlbik7XG4gICAgcmV0dXJuIG5ldyBOb2RlKCdDb25jaXNlQm9keScsIGdpdmVuLCAwLCBbYm9keV0sIHBhcmFtcyk7XG4gIH0gZWxzZSB7XG4gICAgbGV0IGJvZHkgPSBGdW5jdGlvbkJvZHkoZmFsc2UsIGZhbHNlKShnaXZlbik7XG4gICAgcmV0dXJuIG5ldyBOb2RlKCdDb25jaXNlQm9keScsIGdpdmVuLCAxLCBbYm9keV0sIHBhcmFtcyk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBDb25jaXNlQm9keTtcbiIsImNvbnN0IE5vZGUgPSByZXF1aXJlKCcuLi9Ob2RlJyk7XG5cbi8vIENvbmRpdGlvbmFsRXhwcmVzc2lvbltJbiwgWWllbGQsIEF3YWl0XSA6XG4vLyAgICBTaG9ydENpcmN1aXRFeHByZXNzaW9uWz9JbiwgP1lpZWxkLCA/QXdhaXRdXG4vLyAgICBTaG9ydENpcmN1aXRFeHByZXNzaW9uWz9JbiwgP1lpZWxkLCA/QXdhaXRdID8gQXNzaWdubWVudEV4cHJlc3Npb25bK0luLCA/WWllbGQsID9Bd2FpdF0gOiBBc3NpZ25tZW50RXhwcmVzc2lvbls/SW4sID9ZaWVsZCwgP0F3YWl0XVxubGV0IENvbmRpdGlvbmFsRXhwcmVzc2lvbiA9IChJbiwgWWllbGQsIEF3YWl0KSA9PiAoZ2l2ZW4pID0+IHtcbiAgbGV0IFNob3J0Q2lyY3VpdEV4cHJlc3Npb24gPSByZXF1aXJlKCcuL1Nob3J0Q2lyY3VpdEV4cHJlc3Npb24nKTtcbiAgbGV0IEFzc2lnbm1lbnRFeHByZXNzaW9uID0gcmVxdWlyZSgnLi9Bc3NpZ25tZW50RXhwcmVzc2lvbicpO1xuXG4gIGxldCBwYXJhbXMgPSBbSW4sIFlpZWxkLCBBd2FpdF07XG4gIGxldCB7IHR5cGUgfSA9IGdpdmVuO1xuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlICdBd2FpdEV4cHJlc3Npb24nOlxuICAgIGNhc2UgJ1VuYXJ5RXhwcmVzc2lvbic6XG4gICAgY2FzZSAnTG9naWNhbEV4cHJlc3Npb24nOlxuICAgIGNhc2UgJ0JpbmFyeUV4cHJlc3Npb24nOlxuICAgIGNhc2UgJ1VwZGF0ZUV4cHJlc3Npb24nOlxuICAgIGNhc2UgJ0NhbGxFeHByZXNzaW9uJzpcbiAgICBjYXNlICdOZXdFeHByZXNzaW9uJzpcbiAgICBjYXNlICdNZW1iZXJFeHByZXNzaW9uJzpcbiAgICBjYXNlICdPYmplY3RFeHByZXNzaW9uJzpcbiAgICBjYXNlICdBcnJheUV4cHJlc3Npb24nOlxuICAgIGNhc2UgJ0Z1bmN0aW9uRXhwcmVzc2lvbic6XG4gICAgY2FzZSAnQ2xhc3NFeHByZXNzaW9uJzpcbiAgICBjYXNlICdTZXF1ZW5jZUV4cHJlc3Npb24nOlxuICAgIGNhc2UgJ1BhcmVudGhlc2l6ZWRFeHByZXNzaW9uJzpcbiAgICBjYXNlICdUZW1wbGF0ZUxpdGVyYWwnOlxuICAgIGNhc2UgJ1RhZ2dlZFRlbXBsYXRlRXhwcmVzc2lvbic6XG4gICAgY2FzZSAnSWRlbnRpZmllcic6XG4gICAgY2FzZSAnVGhpc0V4cHJlc3Npb24nOlxuICAgIGNhc2UgJ0FycmF5UGF0dGVybic6XG4gICAgY2FzZSAnT2JqZWN0UGF0dGVybic6XG4gICAgY2FzZSAnTWV0YVByb3BlcnR5JzpcbiAgICBjYXNlICdMaXRlcmFsJzoge1xuICAgICAgbGV0IGNpcmMgPSBTaG9ydENpcmN1aXRFeHByZXNzaW9uKEluLCBZaWVsZCwgQXdhaXQpKGdpdmVuKTtcbiAgICAgIHJldHVybiBuZXcgTm9kZSgnQ29uZGl0aW9uYWxFeHByZXNzaW9uJywgZ2l2ZW4sIDAsIFtjaXJjXSwgcGFyYW1zKTtcbiAgICB9XG4gICAgY2FzZSAnQ29uZGl0aW9uYWxFeHByZXNzaW9uJzoge1xuICAgICAgbGV0IHRlc3QgPSBTaG9ydENpcmN1aXRFeHByZXNzaW9uKEluLCBZaWVsZCwgQXdhaXQpKGdpdmVuLnRlc3QpO1xuICAgICAgbGV0IGNvbnMgPSBBc3NpZ25tZW50RXhwcmVzc2lvbih0cnVlLCBZaWVsZCwgQXdhaXQpKGdpdmVuLmNvbnNlcXVlbnQpO1xuICAgICAgbGV0IGFsdCA9IEFzc2lnbm1lbnRFeHByZXNzaW9uKEluLCBZaWVsZCwgQXdhaXQpKGdpdmVuLmFsdGVybmF0ZSk7XG4gICAgICByZXR1cm4gbmV3IE5vZGUoJ0NvbmRpdGlvbmFsRXhwcmVzc2lvbicsIGdpdmVuLCAxLCBbdGVzdCwgY29ucywgYWx0XSwgcGFyYW1zKTtcbiAgICB9XG4gICAgZGVmYXVsdDpcbiAgICAgIE5vZGUuVE9ETyhgJHt0eXBlfSBAIENvbmRpdGlvbmFsRXhwcmVzc2lvbmApO1xuICB9XG4gIE5vZGUuVE9ETygnQ29uZGl0aW9uYWxFeHByZXNzaW9uJyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQ29uZGl0aW9uYWxFeHByZXNzaW9uO1xuIiwiY29uc3QgTm9kZSA9IHJlcXVpcmUoJy4uL05vZGUnKTtcblxuLy8gQ29udGludWVTdGF0ZW1lbnRbWWllbGQsIEF3YWl0XToge1xuLy8gICBgY29udGludWVgIGA7YCB8XG4vLyAgIGBjb250aW51ZWAgW25vIExpbmVUZXJtaW5hdG9yIGhlcmVdIExhYmVsSWRlbnRpZmllcls/WWllbGQsID9Bd2FpdF0gYDtgXG4vLyB9XG5cbmxldCBDb250aW51ZVN0YXRlbWVudCA9IChZaWVsZCwgQXdhaXQpID0+IChnaXZlbikgPT4ge1xuICBjb25zdCBMYWJlbElkZW50aWZpZXIgPSByZXF1aXJlKCcuL0xhYmVsSWRlbnRpZmllcicpO1xuICBsZXQgcGFyYW1zID0gW1lpZWxkLCBBd2FpdF07XG4gIFxuICAvLyBbMCwwXVxuICBpZiAoZ2l2ZW4ubGFiZWwgPT09IG51bGwpIFxuICAgIHJldHVybiBuZXcgTm9kZSgnQ29udGludWVTdGF0ZW1lbnQnLCBnaXZlbiwgMCwgW10sIHBhcmFtcyk7XG4gIC8vIFsxLDBdXG4gIGVsc2Uge1xuICAgIGxldCBsYWJlbCA9IExhYmVsSWRlbnRpZmllcihZaWVsZCwgQXdhaXQpKGdpdmVuLmxhYmVsKTtcbiAgICByZXR1cm4gbmV3IE5vZGUoJ0NvbnRpbnVlU3RhdGVtZW50JywgZ2l2ZW4sIDEsIFtsYWJlbF0sIHBhcmFtcyk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBDb250aW51ZVN0YXRlbWVudDtcbiIsImNvbnN0IE5vZGUgPSByZXF1aXJlKCcuLi9Ob2RlJyk7XG5jb25zdCB7IGNoZWNrQ29tbWEgfSA9IHJlcXVpcmUoJy4uL0dsb2JhbCcpO1xuXG4vLyBDb3ZlckNhbGxFeHByZXNzaW9uQW5kQXN5bmNBcnJvd0hlYWRbWWllbGQsIEF3YWl0XSA6XG4vLyAgICBNZW1iZXJFeHByZXNzaW9uWz9ZaWVsZCwgP0F3YWl0XSBBcmd1bWVudHNbP1lpZWxkLCA/QXdhaXRdXG5sZXQgQ292ZXJDYWxsRXhwcmVzc2lvbkFuZEFzeW5jQXJyb3dIZWFkID0gKFlpZWxkLCBBd2FpdCkgPT4gKGdpdmVuKSA9PiB7XG4gIGNvbnN0IE1lbWJlckV4cHJlc3Npb24gPSByZXF1aXJlKCcuL01lbWJlckV4cHJlc3Npb24nKTtcbiAgY29uc3QgQXJndW1lbnRzID0gcmVxdWlyZSgnLi9Bcmd1bWVudHMnKTtcbiAgbGV0IHBhcmFtcyA9IFtZaWVsZCwgQXdhaXRdO1xuICBsZXQgeyBjYWxsZWUgfSA9IGdpdmVuO1xuICBsZXQgbWVtYmVyID0gTWVtYmVyRXhwcmVzc2lvbihZaWVsZCwgQXdhaXQpKGNhbGxlZSk7XG4gIGxldCBoYXNDb21tYSA9IGNoZWNrQ29tbWEoY2FsbGVlLmVuZCwgZ2l2ZW4uZW5kLCAnKScpO1xuICBsZXQgYXJncyA9IEFyZ3VtZW50cyhZaWVsZCwgQXdhaXQpKGdpdmVuLmFyZ3VtZW50cywgaGFzQ29tbWEpO1xuICByZXR1cm4gbmV3IE5vZGUoJ0NvdmVyQ2FsbEV4cHJlc3Npb25BbmRBc3luY0Fycm93SGVhZCcsIGdpdmVuLCAwLCBbbWVtYmVyLCBhcmdzXSwgcGFyYW1zKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBDb3ZlckNhbGxFeHByZXNzaW9uQW5kQXN5bmNBcnJvd0hlYWQ7XG4iLCJjb25zdCBOb2RlID0gcmVxdWlyZSgnLi4vTm9kZScpO1xuXG4vLyBDb3ZlckluaXRpYWxpemVkTmFtZVtZaWVsZCwgQXdhaXRdIDpcbi8vICAgICBJZGVudGlmaWVyUmVmZXJlbmNlWz9ZaWVsZCwgP0F3YWl0XSBJbml0aWFsaXplclsrSW4sID9ZaWVsZCwgP0F3YWl0XVxubGV0IENvdmVySW5pdGlhbGl6ZWROYW1lID0gKFlpZWxkLCBBd2FpdCkgPT4gKGdpdmVuKSA9PiB7XG4gIGNvbnN0IElkZW50aWZpZXJSZWZlcmVuY2UgPSByZXF1aXJlKCcuL0lkZW50aWZpZXJSZWZlcmVuY2UnKTtcbiAgY29uc3QgSW5pdGlhbGl6ZXIgPSByZXF1aXJlKCcuL0luaXRpYWxpemVyJyk7XG5cbiAgbGV0IHBhcmFtcyA9IFtZaWVsZCwgQXdhaXRdO1xuICBsZXQgeyBsZWZ0LCByaWdodCB9ID0gZ2l2ZW47XG4gIGxldCByZWYgPSBJZGVudGlmaWVyUmVmZXJlbmNlKFlpZWxkLCBBd2FpdCkobGVmdCk7XG4gIGxldCBpbml0ID0gSW5pdGlhbGl6ZXIodHJ1ZSwgWWllbGQsIEF3YWl0KShyaWdodCk7XG4gIHJldHVybiBuZXcgTm9kZSgnQ292ZXJJbml0aWFsaXplZE5hbWUnLCBnaXZlbiwgMCwgW3JlZiwgaW5pdF0sIHBhcmFtcyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQ292ZXJJbml0aWFsaXplZE5hbWU7IiwiY29uc3QgTm9kZSA9IHJlcXVpcmUoJy4uL05vZGUnKTtcblxuLy8gQ292ZXJQYXJlbnRoZXNpemVkRXhwcmVzc2lvbkFuZEFycm93UGFyYW1ldGVyTGlzdFtZaWVsZCwgQXdhaXRdIDpcbi8vICAgICggRXhwcmVzc2lvblsrSW4sID9ZaWVsZCwgP0F3YWl0XSApXG4vLyAgICAoIEV4cHJlc3Npb25bK0luLCA/WWllbGQsID9Bd2FpdF0gLCApXG4vLyAgICAoIClcbi8vICAgICggLi4uIEJpbmRpbmdJZGVudGlmaWVyWz9ZaWVsZCwgP0F3YWl0XSApXG4vLyAgICAoIC4uLiBCaW5kaW5nUGF0dGVybls/WWllbGQsID9Bd2FpdF0gKVxuLy8gICAgKCBFeHByZXNzaW9uWytJbiwgP1lpZWxkLCA/QXdhaXRdICwgLi4uIEJpbmRpbmdJZGVudGlmaWVyWz9ZaWVsZCwgP0F3YWl0XSApXG4vLyAgICAoIEV4cHJlc3Npb25bK0luLCA/WWllbGQsID9Bd2FpdF0gLCAuLi4gQmluZGluZ1BhdHRlcm5bP1lpZWxkLCA/QXdhaXRdIClcbmxldCBDb3ZlclBhcmVudGhlc2l6ZWRFeHByZXNzaW9uQW5kQXJyb3dQYXJhbWV0ZXJMaXN0ID0gKFlpZWxkLCBBd2FpdCkgPT4gKGdpdmVuKSA9PiB7XG4gIGNvbnN0IEV4cHJlc3Npb24gPSByZXF1aXJlKCcuL0V4cHJlc3Npb24nKTtcbiAgY29uc3QgQmluZGluZ0lkZW50aWZpZXIgPSByZXF1aXJlKCcuL0JpbmRpbmdJZGVudGlmaWVyJyk7XG4gIGNvbnN0IEJpbmRpbmdQYXR0ZXJuID0gcmVxdWlyZSgnLi9CaW5kaW5nUGF0dGVybicpO1xuICBcbiAgbGV0IG5hbWUgPSAnQ292ZXJQYXJlbnRoZXNpemVkRXhwcmVzc2lvbkFuZEFycm93UGFyYW1ldGVyTGlzdCc7XG4gIGxldCBwYXJhbXMgPSBbWWllbGQsIEF3YWl0XTtcbiAgaWYgKGdpdmVuLnR5cGUgPT0gJ1BhcmVudGhlc2l6ZWRFeHByZXNzaW9uJykge1xuICAgIGdpdmVuID0gZ2l2ZW4uZXhwcmVzc2lvbjtcbiAgICBpZiAoZ2l2ZW4udHlwZSA9PSAnU2VxdWVuY2VFeHByZXNzaW9uJykge1xuICAgICAgZ2l2ZW4gPSBnaXZlbi5leHByZXNzaW9ucztcbiAgICB9IGVsc2Uge1xuICAgICAgZ2l2ZW4gPSBbZ2l2ZW5dO1xuICAgIH1cbiAgfVxuICBpZiAoZ2l2ZW4udHlwZSA9PSAnU2VxdWVuY2VFeHByZXNzaW9uJykge1xuICAgIGdpdmVuID0gZ2l2ZW4uZXhwcmVzc2lvbnM7XG4gIH1cbiAgbGV0IHNpemUgPSBnaXZlbi5sZW5ndGg7XG4gIGlmIChzaXplID09IDApIHtcbiAgICByZXR1cm4gbmV3IE5vZGUobmFtZSwge30sIDIsIFtdLCBwYXJhbXMpO1xuICB9XG4gIGxldCBsYXN0ID0gZ2l2ZW5bc2l6ZS0xXTtcbiAgaWYgKGxhc3QudHlwZSA9PSAnUmVzdEVsZW1lbnQnKSB7XG4gICAgaWYgKHNpemUgPT0gMSkge1xuICAgICAgaWYgKGxhc3QuYXJndW1lbnQudHlwZSA9PSAnSWRlbnRpZmllcicpIHtcbiAgICAgICAgbGV0IHggPSBCaW5kaW5nSWRlbnRpZmllcihZaWVsZCwgQXdhaXQpKGxhc3QuYXJndW1lbnQpO1xuICAgICAgICByZXR1cm4gbmV3IE5vZGUobmFtZSwgbGFzdCwgMywgW3hdLCBwYXJhbXMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGV0IHAgPSBCaW5kaW5nUGF0dGVybihZaWVsZCwgQXdhaXQpKGxhc3QuYXJndW1lbnQpO1xuICAgICAgICByZXR1cm4gbmV3IE5vZGUobmFtZSwgbGFzdCwgNCwgW3BdLCBwYXJhbXMpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBnaXZlbi5wb3AoKTsgLy8gcG9wIGxhc3QgYXJndW1lbnRcbiAgICAgIGxldCBleHByID0gRXhwcmVzc2lvbih0cnVlLCBZaWVsZCwgQXdhaXQpKGdpdmVuKTtcbiAgICAgIGlmIChsYXN0LmFyZ3VtZW50LnR5cGUgPT0gJ0lkZW50aWZpZXInKSB7XG4gICAgICAgIGxldCBiaW5kaW5nID0gQmluZGluZ0lkZW50aWZpZXIoWWllbGQsIEF3YWl0KShsYXN0LmFyZ3VtZW50KTtcbiAgICAgICAgcmV0dXJuIG5ldyBOb2RlKG5hbWUsIGdpdmVuLCA1LCBbZXhwciwgYmluZGluZ10sIHBhcmFtcyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsZXQgcGF0ID0gQmluZGluZ1BhdHRlcm4oWWllbGQsIEF3YWl0KShsYXN0LmFyZ3VtZW50KTtcbiAgICAgICAgcmV0dXJuIG5ldyBOb2RlKG5hbWUsIGdpdmVuLCA2LCBbZXhwciwgcGF0XSwgcGFyYW1zKTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgbGV0IGV4cHIgPSBFeHByZXNzaW9uKHRydWUsIFlpZWxkLCBBd2FpdCkoZ2l2ZW4pO1xuICAgIHJldHVybiBuZXcgTm9kZShuYW1lLCB7fSwgMCwgW2V4cHJdLCBwYXJhbXMpXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBDb3ZlclBhcmVudGhlc2l6ZWRFeHByZXNzaW9uQW5kQXJyb3dQYXJhbWV0ZXJMaXN0O1xuIiwiY29uc3QgTm9kZSA9IHJlcXVpcmUoJy4uL05vZGUnKTtcblxuLy8gRGVidWdnZXJTdGF0ZW1lbnQ6IHtcbi8vICAgYGRlYnVnZ2VyYCBgO2Bcbi8vIH1cblxubGV0IERlYnVnZ2VyU3RhdGVtZW50ID0gKGdpdmVuKSA9PiB7XG4gIHJldHVybiBuZXcgTm9kZSgnRGVidWdnZXJTdGF0ZW1lbnQnLCBnaXZlbiwgMCwgW10pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IERlYnVnZ2VyU3RhdGVtZW50O1xuIiwiY29uc3QgTm9kZSA9IHJlcXVpcmUoJy4uL05vZGUnKTtcblxuLy8gRGVjbGFyYXRpb25bWWllbGQsIEF3YWl0XSA6XG4vLyAgICBIb2lzdGFibGVEZWNsYXJhdGlvbls/WWllbGQsID9Bd2FpdCwgfkRlZmF1bHRdXG4vLyAgICBDbGFzc0RlY2xhcmF0aW9uWz9ZaWVsZCwgP0F3YWl0LCB+RGVmYXVsdF1cbi8vICAgIExleGljYWxEZWNsYXJhdGlvblsrSW4sID9ZaWVsZCwgP0F3YWl0XVxubGV0IERlY2xhcmF0aW9uID0gKFlpZWxkLCBBd2FpdCkgPT4gKGdpdmVuKSA9PiB7XG4gIGNvbnN0IExleGljYWxEZWNsYXJhdGlvbiA9IHJlcXVpcmUoJy4vTGV4aWNhbERlY2xhcmF0aW9uJyk7XG4gIGNvbnN0IEhvaXN0YWJsZURlY2xhcmF0aW9uID0gcmVxdWlyZSgnLi9Ib2lzdGFibGVEZWNsYXJhdGlvbicpO1xuICBjb25zdCBDbGFzc0RlY2xhcmF0aW9uID0gcmVxdWlyZSgnLi9DbGFzc0RlY2xhcmF0aW9uJyk7XG4gIGxldCBwYXJhbXMgPSBbWWllbGQsIEF3YWl0XTtcbiAgbGV0IHsgdHlwZSB9ID0gZ2l2ZW47XG4gIHN3aXRjaCAodHlwZSkge1xuICAgIGNhc2UgJ0Z1bmN0aW9uRGVjbGFyYXRpb24nOiB7XG4gICAgICBsZXQgaG9pc3QgPSBIb2lzdGFibGVEZWNsYXJhdGlvbihZaWVsZCwgQXdhaXQsIGZhbHNlKShnaXZlbik7XG4gICAgICByZXR1cm4gbmV3IE5vZGUoJ0RlY2xhcmF0aW9uJywgZ2l2ZW4sIDAsIFtob2lzdF0sIHBhcmFtcyk7XG4gICAgfVxuICAgIGNhc2UgJ0NsYXNzRGVjbGFyYXRpb24nOiB7XG4gICAgICBsZXQgZGVjbCA9IENsYXNzRGVjbGFyYXRpb24oWWllbGQsIEF3YWl0LCBmYWxzZSkoZ2l2ZW4pO1xuICAgICAgcmV0dXJuIG5ldyBOb2RlKCdEZWNsYXJhdGlvbicsIGdpdmVuLCAxLCBbZGVjbF0sIHBhcmFtcyk7XG4gICAgfVxuICAgIGNhc2UgJ1ZhcmlhYmxlRGVjbGFyYXRpb24nOiB7XG4gICAgICBsZXQgbGV4ID0gTGV4aWNhbERlY2xhcmF0aW9uKHRydWUsIFlpZWxkLCBBd2FpdCkoZ2l2ZW4pO1xuICAgICAgcmV0dXJuIG5ldyBOb2RlKCdEZWNsYXJhdGlvbicsIGdpdmVuLCAyLCBbbGV4XSwgcGFyYW1zKTtcbiAgICB9XG4gICAgZGVmYXVsdDpcbiAgICAgIE5vZGUuVE9ETyhgJHt0eXBlfSBAIERlY2xhcmF0aW9uYCk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBEZWNsYXJhdGlvbjtcbiIsImNvbnN0IE5vZGUgPSByZXF1aXJlKCcuLi9Ob2RlJyk7XG5cbi8vIERlZmF1bHRDbGF1c2VbWWllbGQsIEF3YWl0LCBSZXR1cm5dIDpcbi8vICAgIGRlZmF1bHQgOiBTdGF0ZW1lbnRMaXN0Wz9ZaWVsZCwgP0F3YWl0LCA/UmV0dXJuXV9vcHRcbmxldCBEZWZhdWx0Q2xhdXNlID0gKFlpZWxkLCBBd2FpdCwgUmV0dXJuKSA9PiAoZ2l2ZW4pID0+IHtcbiAgY29uc3QgU3RhdGVtZW50TGlzdCA9IHJlcXVpcmUoJy4vU3RhdGVtZW50TGlzdCcpO1xuICBsZXQgcGFyYW1zID0gW1lpZWxkLCBBd2FpdCwgUmV0dXJuXTtcbiAgbGV0IGxpc3QgPSBudWxsO1xuICBpZiAoZ2l2ZW4uY29uc2VxdWVudC5sZW5ndGggPiAwKSB7XG4gICAgbGlzdCA9IFN0YXRlbWVudExpc3QoWWllbGQsIEF3YWl0LCBSZXR1cm4pKGdpdmVuLmNvbnNlcXVlbnQpO1xuICB9XG4gIHJldHVybiBuZXcgTm9kZSgnRGVmYXVsdENsYXVzZScsIGdpdmVuLCAwLCBbbGlzdF0sIHBhcmFtcyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gRGVmYXVsdENsYXVzZTtcbiIsImNvbnN0IE5vZGUgPSByZXF1aXJlKCcuLi9Ob2RlJyk7XG5cbi8vIERvV2hpbGVTdGF0ZW1lbnRbWWllbGQsIEF3YWl0LCBSZXR1cm5dOiB7XG4vLyAgIGBkb2AgU3RhdGVtZW50Wz9ZaWVsZCwgP0F3YWl0LCA/UmV0dXJuXSBgd2hpbGVgIGAoYCBFeHByZXNzaW9uWytJbiwgP1lpZWxkLCA/QXdhaXRdIGApYCBgO2Bcbi8vIH1cblxubGV0IERvV2hpbGVTdGF0ZW1lbnQgPSAoWWllbGQsIEF3YWl0LCBSZXR1cm4pID0+IChnaXZlbikgPT4ge1xuICBjb25zdCBTdGF0ZW1lbnQgPSByZXF1aXJlKCcuL1N0YXRlbWVudCcpO1xuICBjb25zdCBFeHByZXNzaW9uID0gcmVxdWlyZSgnLi9FeHByZXNzaW9uJyk7XG4gIFxuICBsZXQgcGFyYW1zID0gW1lpZWxkLCBBd2FpdCwgUmV0dXJuXTtcbiAgY29uc3QgYm9keSA9IFN0YXRlbWVudChZaWVsZCwgQXdhaXQsIFJldHVybikoZ2l2ZW4uYm9keSk7XG4gIGNvbnN0IHRlc3QgPSBFeHByZXNzaW9uKHRydWUsIFlpZWxkLCBBd2FpdCkoZ2l2ZW4udGVzdCk7XG4gIFxuICByZXR1cm4gbmV3IE5vZGUoJ0RvV2hpbGVTdGF0ZW1lbnQnLCBnaXZlbiwgMCwgW2JvZHksIHRlc3RdLCBwYXJhbXMpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IERvV2hpbGVTdGF0ZW1lbnQ7XG4iLCJjb25zdCBOb2RlID0gcmVxdWlyZSgnLi4vTm9kZScpO1xuXG4vLyBFbGVtZW50TGlzdFtZaWVsZCwgQXdhaXRdIDpcbi8vICAgIEVsaXNpb25fb3B0IEFzc2lnbm1lbnRFeHByZXNzaW9uWytJbiwgP1lpZWxkLCA/QXdhaXRdXG4vLyAgICBFbGlzaW9uX29wdCBTcHJlYWRFbGVtZW50Wz9ZaWVsZCwgP0F3YWl0XVxuLy8gICAgRWxlbWVudExpc3RbP1lpZWxkLCA/QXdhaXRdICwgRWxpc2lvbl9vcHQgQXNzaWdubWVudEV4cHJlc3Npb25bK0luLCA/WWllbGQsID9Bd2FpdF1cbi8vICAgIEVsZW1lbnRMaXN0Wz9ZaWVsZCwgP0F3YWl0XSAsIEVsaXNpb25fb3B0IFNwcmVhZEVsZW1lbnRbP1lpZWxkLCA/QXdhaXRdXG5sZXQgRWxlbWVudExpc3QgPSAoWWllbGQsIEF3YWl0KSA9PiAoZ2l2ZW4pID0+IHtcbiAgbGV0IEVsaXNpb24gPSByZXF1aXJlKCcuL0VsaXNpb24nKTtcbiAgbGV0IFNwcmVhZEVsZW1lbnQgPSByZXF1aXJlKCcuL1NwcmVhZEVsZW1lbnQnKTtcbiAgbGV0IEFzc2lnbm1lbnRFeHByZXNzaW9uID0gcmVxdWlyZSgnLi9Bc3NpZ25tZW50RXhwcmVzc2lvbicpO1xuXG4gIGxldCBwYXJhbXMgPSBbWWllbGQsIEF3YWl0XTtcbiAgbGV0IGVsZW0gPSBnaXZlbi5wb3AoKTtcbiAgbGV0IG51bGxMaXN0ID0gW107XG4gIHdoaWxlIChnaXZlbi5sZW5ndGggPiAwKSB7XG4gICAgbGV0IHRvcCA9IGdpdmVuLnBvcCgpO1xuICAgIGlmICh0b3AgPT0gbnVsbCkgbnVsbExpc3QucHVzaCh0b3ApO1xuICAgIGVsc2Uge1xuICAgICAgZ2l2ZW4ucHVzaCh0b3ApO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgbGV0IGVsaXNpb24gPSBudWxsO1xuICBpZiAobnVsbExpc3QubGVuZ3RoID4gMCkgZWxpc2lvbiA9IEVsaXNpb24obnVsbExpc3QpO1xuXG4gIGlmIChnaXZlbi5sZW5ndGggPT0gMCkge1xuICAgIHN3aXRjaChlbGVtLnR5cGUpIHtcbiAgICAgIGNhc2UgJ1NwcmVhZEVsZW1lbnQnOlxuICAgICAgY2FzZSAnUmVzdEVsZW1lbnQnOiB7XG4gICAgICAgIGxldCBleHByID0gU3ByZWFkRWxlbWVudChZaWVsZCwgQXdhaXQpKGVsZW0pO1xuICAgICAgICByZXR1cm4gbmV3IE5vZGUoJ0VsZW1lbnRMaXN0JywgZWxlbSwgMSwgW2VsaXNpb24sIGV4cHJdLCBwYXJhbXMpO1xuICAgICAgfVxuICAgICAgZGVmYXVsdDoge1xuICAgICAgICBsZXQgZXhwciA9IEFzc2lnbm1lbnRFeHByZXNzaW9uKHRydWUsIFlpZWxkLCBBd2FpdCkoZWxlbSk7XG4gICAgICAgIHJldHVybiBuZXcgTm9kZSgnRWxlbWVudExpc3QnLCBlbGVtLCAwLCBbZWxpc2lvbiwgZXhwcl0sIHBhcmFtcyk7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHN3aXRjaChlbGVtLnR5cGUpIHtcbiAgICAgIGNhc2UgJ1NwcmVhZEVsZW1lbnQnOlxuICAgICAgY2FzZSAnUmVzdEVsZW1lbnQnOiB7XG4gICAgICAgIGxldCBsaXN0ID0gRWxlbWVudExpc3QoWWllbGQsIEF3YWl0KShnaXZlbik7XG4gICAgICAgIGxldCBleHByID0gU3ByZWFkRWxlbWVudChZaWVsZCwgQXdhaXQpKGVsZW0pO1xuICAgICAgICByZXR1cm4gbmV3IE5vZGUoJ0VsZW1lbnRMaXN0JywgZWxlbSwgMywgW2xpc3QsIGVsaXNpb24sIGV4cHJdLCBwYXJhbXMpO1xuICAgICAgfVxuICAgICAgZGVmYXVsdDoge1xuICAgICAgICBsZXQgbGlzdCA9IEVsZW1lbnRMaXN0KFlpZWxkLCBBd2FpdCkoZ2l2ZW4pO1xuICAgICAgICBsZXQgZXhwciA9IEFzc2lnbm1lbnRFeHByZXNzaW9uKHRydWUsIFlpZWxkLCBBd2FpdCkoZWxlbSk7XG4gICAgICAgIHJldHVybiBuZXcgTm9kZSgnRWxlbWVudExpc3QnLCBlbGVtLCAyLCBbbGlzdCwgZWxpc2lvbiwgZXhwcl0sIHBhcmFtcyk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gRWxlbWVudExpc3Q7XG4iLCJjb25zdCBOb2RlID0gcmVxdWlyZSgnLi4vTm9kZScpO1xuXG4vLyBFbGlzaW9uIDpcbi8vICAgICxcbi8vICAgIEVsaXNpb24gLFxubGV0IEVsaXNpb24gPSAoZ2l2ZW4pID0+IHtcbiAgbGV0IHNpemUgPSBnaXZlbi5sZW5ndGg7XG4gIGxldCBlbGlzaW9uID0gbmV3IE5vZGUoJ0VsaXNpb24nLCB7fSwgMCk7XG4gIGZvciAobGV0IGkgPSAxOyBpIDwgc2l6ZTsgaSsrKSB7XG4gICAgZWxpc2lvbiA9IG5ldyBOb2RlKCdFbGlzaW9uJywge30sIDEsIFtlbGlzaW9uXSk7XG4gIH1cbiAgcmV0dXJuIGVsaXNpb247XG59XG5cbm1vZHVsZS5leHBvcnRzID0gRWxpc2lvbjtcbiIsImNvbnN0IE5vZGUgPSByZXF1aXJlKCcuLi9Ob2RlJyk7XG5cbmxldCBFbXB0eVN0YXRlbWVudCA9IChnaXZlbikgPT4ge1xuICByZXR1cm4gbmV3IE5vZGUoJ0VtcHR5U3RhdGVtZW50JywgZ2l2ZW4sIDApO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEVtcHR5U3RhdGVtZW50O1xuIiwiY29uc3QgTm9kZSA9IHJlcXVpcmUoJy4uL05vZGUnKTtcblxuLy8gRXF1YWxpdHlFeHByZXNzaW9uW0luLCBZaWVsZCwgQXdhaXRdIDpcbi8vICAgIFJlbGF0aW9uYWxFeHByZXNzaW9uWz9JbiwgP1lpZWxkLCA/QXdhaXRdXG4vLyAgICBFcXVhbGl0eUV4cHJlc3Npb25bP0luLCA/WWllbGQsID9Bd2FpdF0gPT0gUmVsYXRpb25hbEV4cHJlc3Npb25bP0luLCA/WWllbGQsID9Bd2FpdF1cbi8vICAgIEVxdWFsaXR5RXhwcmVzc2lvbls/SW4sID9ZaWVsZCwgP0F3YWl0XSAhPSBSZWxhdGlvbmFsRXhwcmVzc2lvbls/SW4sID9ZaWVsZCwgP0F3YWl0XVxuLy8gICAgRXF1YWxpdHlFeHByZXNzaW9uWz9JbiwgP1lpZWxkLCA/QXdhaXRdID09PSBSZWxhdGlvbmFsRXhwcmVzc2lvbls/SW4sID9ZaWVsZCwgP0F3YWl0XVxuLy8gICAgRXF1YWxpdHlFeHByZXNzaW9uWz9JbiwgP1lpZWxkLCA/QXdhaXRdICE9PSBSZWxhdGlvbmFsRXhwcmVzc2lvbls/SW4sID9ZaWVsZCwgP0F3YWl0XVxubGV0IEVxdWFsaXR5RXhwcmVzc2lvbiA9IChJbiwgWWllbGQsIEF3YWl0KSA9PiAoZ2l2ZW4pID0+IHtcbiAgbGV0IFJlbGF0aW9uYWxFeHByZXNzaW9uID0gcmVxdWlyZSgnLi9SZWxhdGlvbmFsRXhwcmVzc2lvbicpO1xuXG4gIGxldCBwYXJhbXMgPSBbSW4sIFlpZWxkLCBBd2FpdF07XG4gIGxldCB7IHR5cGUgfSA9IGdpdmVuO1xuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlICdBd2FpdEV4cHJlc3Npb24nOlxuICAgIGNhc2UgJ1VuYXJ5RXhwcmVzc2lvbic6XG4gICAgY2FzZSAnVXBkYXRlRXhwcmVzc2lvbic6XG4gICAgY2FzZSAnQ2FsbEV4cHJlc3Npb24nOlxuICAgIGNhc2UgJ05ld0V4cHJlc3Npb24nOlxuICAgIGNhc2UgJ01lbWJlckV4cHJlc3Npb24nOlxuICAgIGNhc2UgJ09iamVjdEV4cHJlc3Npb24nOlxuICAgIGNhc2UgJ0FycmF5RXhwcmVzc2lvbic6XG4gICAgY2FzZSAnRnVuY3Rpb25FeHByZXNzaW9uJzpcbiAgICBjYXNlICdDbGFzc0V4cHJlc3Npb24nOlxuICAgIGNhc2UgJ1NlcXVlbmNlRXhwcmVzc2lvbic6XG4gICAgY2FzZSAnUGFyZW50aGVzaXplZEV4cHJlc3Npb24nOlxuICAgIGNhc2UgJ1RlbXBsYXRlTGl0ZXJhbCc6XG4gICAgY2FzZSAnVGFnZ2VkVGVtcGxhdGVFeHByZXNzaW9uJzpcbiAgICBjYXNlICdJZGVudGlmaWVyJzpcbiAgICBjYXNlICdUaGlzRXhwcmVzc2lvbic6XG4gICAgY2FzZSAnQXJyYXlQYXR0ZXJuJzpcbiAgICBjYXNlICdPYmplY3RQYXR0ZXJuJzpcbiAgICBjYXNlICdNZXRhUHJvcGVydHknOlxuICAgIGNhc2UgJ0xpdGVyYWwnOiB7XG4gICAgICBsZXQgZXhwciA9IFJlbGF0aW9uYWxFeHByZXNzaW9uKEluLCBZaWVsZCwgQXdhaXQpKGdpdmVuKTtcbiAgICAgIHJldHVybiBuZXcgTm9kZSgnRXF1YWxpdHlFeHByZXNzaW9uJywgZ2l2ZW4sIDAsIFtleHByXSwgcGFyYW1zKTtcbiAgICB9XG4gICAgY2FzZSAnQmluYXJ5RXhwcmVzc2lvbic6IHtcbiAgICAgIGxldCB7IGluZGV4LCBjaGlsZHJlbiB9ID0gTm9kZS5nZXRCaW5hcnkoZ2l2ZW4sIFsnPT0nLCAnIT0nLCAnPT09JywgJyE9PSddLFxuICAgICAgICBFcXVhbGl0eUV4cHJlc3Npb24oSW4sIFlpZWxkLCBBd2FpdCksXG4gICAgICAgIFJlbGF0aW9uYWxFeHByZXNzaW9uKEluLCBZaWVsZCwgQXdhaXQpLFxuICAgICAgKTtcbiAgICAgIHJldHVybiBuZXcgTm9kZSgnRXF1YWxpdHlFeHByZXNzaW9uJywgZ2l2ZW4sIGluZGV4LCBjaGlsZHJlbiwgcGFyYW1zKTtcbiAgICB9XG4gICAgZGVmYXVsdDpcbiAgICAgIE5vZGUuVE9ETyhgJHt0eXBlfSBAIEVxdWFsaXR5RXhwcmVzc2lvbmApO1xuICB9XG4gIE5vZGUuVE9ETygnRXF1YWxpdHlFeHByZXNzaW9uJyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gRXF1YWxpdHlFeHByZXNzaW9uO1xuIiwiY29uc3QgTm9kZSA9IHJlcXVpcmUoJy4uL05vZGUnKTtcblxuLy8gRXhwb25lbnRpYXRpb25FeHByZXNzaW9uW1lpZWxkLCBBd2FpdF0gOlxuLy8gICAgVW5hcnlFeHByZXNzaW9uWz9ZaWVsZCwgP0F3YWl0XVxuLy8gICAgVXBkYXRlRXhwcmVzc2lvbls/WWllbGQsID9Bd2FpdF0gKiogRXhwb25lbnRpYXRpb25FeHByZXNzaW9uWz9ZaWVsZCwgP0F3YWl0XVxubGV0IEV4cG9uZW50aWF0aW9uRXhwcmVzc2lvbiA9IChZaWVsZCwgQXdhaXQpID0+IChnaXZlbikgPT4ge1xuICBsZXQgVW5hcnlFeHByZXNzaW9uID0gcmVxdWlyZSgnLi9VbmFyeUV4cHJlc3Npb24nKTtcbiAgbGV0IFVwZGF0ZUV4cHJlc3Npb24gPSByZXF1aXJlKCcuL1VwZGF0ZUV4cHJlc3Npb24nKTtcblxuICBsZXQgcGFyYW1zID0gW1lpZWxkLCBBd2FpdF07XG4gIGxldCB7IHR5cGUgfSA9IGdpdmVuO1xuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlICdBd2FpdEV4cHJlc3Npb24nOlxuICAgIGNhc2UgJ1VuYXJ5RXhwcmVzc2lvbic6XG4gICAgY2FzZSAnVXBkYXRlRXhwcmVzc2lvbic6XG4gICAgY2FzZSAnQ2FsbEV4cHJlc3Npb24nOlxuICAgIGNhc2UgJ05ld0V4cHJlc3Npb24nOlxuICAgIGNhc2UgJ01lbWJlckV4cHJlc3Npb24nOlxuICAgIGNhc2UgJ09iamVjdEV4cHJlc3Npb24nOlxuICAgIGNhc2UgJ0FycmF5RXhwcmVzc2lvbic6XG4gICAgY2FzZSAnRnVuY3Rpb25FeHByZXNzaW9uJzpcbiAgICBjYXNlICdDbGFzc0V4cHJlc3Npb24nOlxuICAgIGNhc2UgJ1NlcXVlbmNlRXhwcmVzc2lvbic6XG4gICAgY2FzZSAnUGFyZW50aGVzaXplZEV4cHJlc3Npb24nOlxuICAgIGNhc2UgJ1RlbXBsYXRlTGl0ZXJhbCc6XG4gICAgY2FzZSAnVGFnZ2VkVGVtcGxhdGVFeHByZXNzaW9uJzpcbiAgICBjYXNlICdJZGVudGlmaWVyJzpcbiAgICBjYXNlICdUaGlzRXhwcmVzc2lvbic6XG4gICAgY2FzZSAnQXJyYXlQYXR0ZXJuJzpcbiAgICBjYXNlICdPYmplY3RQYXR0ZXJuJzpcbiAgICBjYXNlICdNZXRhUHJvcGVydHknOlxuICAgIGNhc2UgJ0xpdGVyYWwnOiB7XG4gICAgICBsZXQgZXhwciA9IFVuYXJ5RXhwcmVzc2lvbihZaWVsZCwgQXdhaXQpKGdpdmVuKTtcbiAgICAgIHJldHVybiBuZXcgTm9kZSgnRXhwb25lbnRpYXRpb25FeHByZXNzaW9uJywgZ2l2ZW4sIDAsIFtleHByXSwgcGFyYW1zKTtcbiAgICB9XG4gICAgY2FzZSAnQmluYXJ5RXhwcmVzc2lvbic6IHtcbiAgICAgIGxldCB7IG9wZXJhdG9yLCBsZWZ0LCByaWdodCB9ID0gZ2l2ZW47XG4gICAgICBpZiAob3BlcmF0b3IgPT0gJyoqJykge1xuICAgICAgICBsZXQgbCA9IFVwZGF0ZUV4cHJlc3Npb24oWWllbGQsIEF3YWl0KShsZWZ0KTtcbiAgICAgICAgbGV0IHIgPSBFeHBvbmVudGlhdGlvbkV4cHJlc3Npb24oWWllbGQsIEF3YWl0KShyaWdodCk7XG4gICAgICAgIHJldHVybiBuZXcgTm9kZSgnRXhwb25lbnRpYXRpb25FeHByZXNzaW9uJywgZ2l2ZW4sIDEsIFtsLCByXSwgcGFyYW1zKTtcbiAgICAgIH1cbiAgICAgIGxldCBleHByID0gVW5hcnlFeHByZXNzaW9uKFlpZWxkLCBBd2FpdCkoZ2l2ZW4pO1xuICAgICAgcmV0dXJuIG5ldyBOb2RlKCdFeHBvbmVudGlhdGlvbkV4cHJlc3Npb24nLCBnaXZlbiwgMCwgW2V4cHJdLCBwYXJhbXMpO1xuICAgIH1cbiAgICBkZWZhdWx0OlxuICAgICAgTm9kZS5UT0RPKGAke3R5cGV9IEAgRXhwb25lbnRpYXRpb25FeHByZXNzaW9uYCk7XG4gIH1cbiAgTm9kZS5UT0RPKCdFeHBvbmVudGlhdGlvbkV4cHJlc3Npb24nKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBFeHBvbmVudGlhdGlvbkV4cHJlc3Npb247XG4iLCJjb25zdCBOb2RlID0gcmVxdWlyZSgnLi4vTm9kZScpO1xuXG4vLyBFeHByZXNzaW9uW0luLCBZaWVsZCwgQXdhaXRdIDpcbi8vICAgIEFzc2lnbm1lbnRFeHByZXNzaW9uWz9JbiwgP1lpZWxkLCA/QXdhaXRdXG4vLyAgICBFeHByZXNzaW9uWz9JbiwgP1lpZWxkLCA/QXdhaXRdICwgQXNzaWdubWVudEV4cHJlc3Npb25bP0luLCA/WWllbGQsID9Bd2FpdF1cbmxldCBFeHByZXNzaW9uID0gKEluLCBZaWVsZCwgQXdhaXQpID0+IChnaXZlbikgPT4ge1xuICBjb25zdCBBc3NpZ25tZW50RXhwcmVzc2lvbiA9IHJlcXVpcmUoJy4vQXNzaWdubWVudEV4cHJlc3Npb24nKTtcbiAgbGV0IHBhcmFtcyA9IFtJbiwgWWllbGQsIEF3YWl0XTtcbiAgbGV0IGxvYyA9IGdpdmVuLmxvYztcbiAgXG4gIGlmIChnaXZlbi50eXBlID09PSAnU2VxdWVuY2VFeHByZXNzaW9uJykgZ2l2ZW4gPSBnaXZlbi5leHByZXNzaW9ucztcbiAgZWxzZSBpZiAoIUFycmF5LmlzQXJyYXkoZ2l2ZW4pKSBnaXZlbiA9IFtnaXZlbl07XG5cbiAgbGV0IHNpemUgPSBnaXZlbi5sZW5ndGg7XG4gIGlmIChzaXplID09IDEpIHtcbiAgICBsZXQgZXhwciA9IEFzc2lnbm1lbnRFeHByZXNzaW9uKEluLCBZaWVsZCwgQXdhaXQpKGdpdmVuWzBdKTtcbiAgICBsZXQgbm9kZSA9IG5ldyBOb2RlKCdFeHByZXNzaW9uJywgZ2l2ZW5bMF0sIDAsIFtleHByXSwgcGFyYW1zKTtcbiAgICBub2RlLmxvYyA9IGxvYztcbiAgICByZXR1cm4gbm9kZTtcbiAgfSBlbHNlIHtcbiAgICBsZXQgZ2VuQ2hpbGQgPSBBc3NpZ25tZW50RXhwcmVzc2lvbihJbiwgWWllbGQsIEF3YWl0KTtcbiAgICBsZXQgbm9kZSA9IE5vZGUuZnJvbUxpc3QoJ0V4cHJlc3Npb24nLCBnaXZlbiwgZ2VuQ2hpbGQsIHBhcmFtcyk7XG4gICAgbm9kZS5sb2MgPSBsb2M7XG4gICAgcmV0dXJuIG5vZGU7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBFeHByZXNzaW9uO1xuIiwiY29uc3QgTm9kZSA9IHJlcXVpcmUoJy4uL05vZGUnKTtcblxuLy8gRXhwcmVzc2lvbkJvZHlbSW4sIEF3YWl0XToge1xuLy8gICBBc3NpZ25tZW50RXhwcmVzc2lvbls/SW4sIH5ZaWVsZCwgP0F3YWl0XVxuLy8gfVxuXG5sZXQgRXhwcmVzc2lvbkJvZHkgPSAoSW4sIEF3YWl0KSA9PiAoZ2l2ZW4pID0+IHtcbiAgY29uc3QgQXNzaWdubWVudEV4cHJlc3Npb24gPSByZXF1aXJlKCcuL0Fzc2lnbm1lbnRFeHByZXNzaW9uJyk7XG4gIGxldCBwYXJhbXMgPSBbSW4sIEF3YWl0XTtcbiAgbGV0IGV4cHIgPSBBc3NpZ25tZW50RXhwcmVzc2lvbihJbiwgZmFsc2UsIEF3YWl0KShnaXZlbik7XG4gIHJldHVybiBuZXcgTm9kZSgnRXhwcmVzc2lvbkJvZHknLCBnaXZlbiwgMCwgW2V4cHJdLCBwYXJhbXMpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEV4cHJlc3Npb25Cb2R5O1xuIiwiY29uc3QgTm9kZSA9IHJlcXVpcmUoJy4uL05vZGUnKTtcblxuLy8gRXhwcmVzc2lvblN0YXRlbWVudFtZaWVsZCwgQXdhaXRdIDpcbi8vICAgIFtsb29rYWhlYWQg4oiJIHsgeywgZnVuY3Rpb24sIGFzeW5jIFtubyBMaW5lVGVybWluYXRvciBoZXJlXSBmdW5jdGlvbiwgY2xhc3MsIGxldCBbIH1dIEV4cHJlc3Npb25bK0luLCA/WWllbGQsID9Bd2FpdF0gO1xubGV0IEV4cHJlc3Npb25TdGF0ZW1lbnQgPSAoWWllbGQsIEF3YWl0KSA9PiAoZ2l2ZW4pID0+IHtcbiAgY29uc3QgRXhwcmVzc2lvbiA9IHJlcXVpcmUoJy4vRXhwcmVzc2lvbicpO1xuICBsZXQgcGFyYW1zID0gW1lpZWxkLCBBd2FpdF07XG4gIGxldCBleHByID0gRXhwcmVzc2lvbih0cnVlLCBZaWVsZCwgQXdhaXQpKGdpdmVuLmV4cHJlc3Npb24pO1xuICByZXR1cm4gbmV3IE5vZGUoJ0V4cHJlc3Npb25TdGF0ZW1lbnQnLCBnaXZlbiwgMCwgW2V4cHJdLCBwYXJhbXMpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEV4cHJlc3Npb25TdGF0ZW1lbnQ7XG4iLCJjb25zdCBOb2RlID0gcmVxdWlyZSgnLi4vTm9kZScpO1xuXG4vLyBGaW5hbGx5W1lpZWxkLCBBd2FpdCwgUmV0dXJuXToge1xuLy8gICBgZmluYWxseWAgQmxvY2tbP1lpZWxkLCA/QXdhaXQsID9SZXR1cm5dXG4vLyB9XG5cbmxldCBGaW5hbGx5ID0gKFlpZWxkLCBBd2FpdCwgUmV0dXJuKSA9PiAoZ2l2ZW4pID0+IHtcbiAgbGV0IEJsb2NrID0gcmVxdWlyZSgnLi9CbG9jaycpO1xuICBsZXQgcGFyYW1zID0gW1lpZWxkLCBBd2FpdCwgUmV0dXJuXTtcbiAgbGV0IGIgPSBCbG9jayhZaWVsZCwgQXdhaXQsIFJldHVybikoZ2l2ZW4pO1xuICByZXR1cm4gbmV3IE5vZGUoJ0ZpbmFsbHknLCBnaXZlbiwgMCwgW2JdLCBwYXJhbXMpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEZpbmFsbHk7XG4iLCJjb25zdCBOb2RlID0gcmVxdWlyZSgnLi4vTm9kZScpO1xuXG4vLyBGb3JCaW5kaW5nW1lpZWxkLCBBd2FpdF0gOlxuLy8gICAgQmluZGluZ0lkZW50aWZpZXJbP1lpZWxkLCA/QXdhaXRdXG4vLyAgICBCaW5kaW5nUGF0dGVybls/WWllbGQsID9Bd2FpdF1cbmxldCBGb3JCaW5kaW5nID0gKFlpZWxkLCBBd2FpdCkgPT4gKGdpdmVuKSA9PiB7XG4gIGNvbnN0IEJpbmRpbmdJZGVudGlmaWVyID0gcmVxdWlyZSgnLi9CaW5kaW5nSWRlbnRpZmllcicpO1xuICBjb25zdCBCaW5kaW5nUGF0dGVybiA9IHJlcXVpcmUoJy4vQmluZGluZ1BhdHRlcm4nKTtcbiAgY29uc3QgcGFyYW1zID0gW1lpZWxkLCBBd2FpdF07XG4gIGNvbnN0IHsgaWQgfSA9IGdpdmVuO1xuICBpZiAoaWQudHlwZSA9PSAnSWRlbnRpZmllcicpIHtcbiAgICBsZXQgeCA9IEJpbmRpbmdJZGVudGlmaWVyKFlpZWxkLCBBd2FpdCkoaWQpO1xuICAgIHJldHVybiBuZXcgTm9kZSgnRm9yQmluZGluZycsIGdpdmVuLCAwLCBbeF0sIHBhcmFtcyk7XG4gIH0gZWxzZSBpZiAoaWQudHlwZSA9PT0gJ0FycmF5UGF0dGVybicgfHwgaWQudHlwZSA9PT0gJ09iamVjdFBhdHRlcm4nKSB7XG4gICAgY29uc3QgYmluZGluZ1BhdHRlcm4gPSBCaW5kaW5nUGF0dGVybihZaWVsZCwgQXdhaXQpKGlkKTtcbiAgICByZXR1cm4gbmV3IE5vZGUoJ0ZvckJpbmRpbmcnLCBnaXZlbiwgMSwgW2JpbmRpbmdQYXR0ZXJuXSwgcGFyYW1zKTtcbiAgfSBlbHNlIHtcbiAgICBOb2RlLlRPRE8oYCR7aWQudHlwZX0gQCBGb3JCaW5kaW5nYCk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBGb3JCaW5kaW5nO1xuIiwiY29uc3QgTm9kZSA9IHJlcXVpcmUoJy4uL05vZGUnKTtcblxuLy8gRm9yRGVjbGFyYXRpb25bWWllbGQsIEF3YWl0XSA6XG4vLyAgICBMZXRPckNvbnN0IEZvckJpbmRpbmdbP1lpZWxkLCA/QXdhaXRdXG5sZXQgRm9yRGVjbGFyYXRpb24gPSAoWWllbGQsIEF3YWl0KSA9PiAoZ2l2ZW4pID0+IHtcbiAgY29uc3QgRm9yQmluZGluZyA9IHJlcXVpcmUoJy4vRm9yQmluZGluZycpO1xuICBjb25zdCBMZXRPckNvbnN0ID0gcmVxdWlyZSgnLi9MZXRPckNvbnN0Jyk7XG4gIGxldCBwYXJhbXMgPSBbWWllbGQsIEF3YWl0XTtcbiAgbGV0IHsga2luZCwgZGVjbGFyYXRpb25zIH0gPSBnaXZlbjtcbiAgbGV0IHByZSA9IExldE9yQ29uc3Qoa2luZCk7XG4gIGxldCBiaW5kaW5nID0gRm9yQmluZGluZyhZaWVsZCwgQXdhaXQpKGRlY2xhcmF0aW9uc1swXSk7XG4gIHJldHVybiBuZXcgTm9kZSgnRm9yRGVjbGFyYXRpb24nLCBnaXZlbiwgMCwgW3ByZSwgYmluZGluZ10sIHBhcmFtcyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gRm9yRGVjbGFyYXRpb247XG4iLCJjb25zdCBOb2RlID0gcmVxdWlyZSgnLi4vTm9kZScpO1xuXG4vLyBGb3JJbk9mU3RhdGVtZW50W1lpZWxkLCBBd2FpdCwgUmV0dXJuXSA6XG4vLyAgICBmb3IgKCBbbG9va2FoZWFkIOKJoCBsZXQgW10gTGVmdEhhbmRTaWRlRXhwcmVzc2lvbls/WWllbGQsID9Bd2FpdF0gaW4gRXhwcmVzc2lvblsrSW4sID9ZaWVsZCwgP0F3YWl0XSApIFN0YXRlbWVudFs/WWllbGQsID9Bd2FpdCwgP1JldHVybl1cbi8vICAgIGZvciAoIHZhciBGb3JCaW5kaW5nWz9ZaWVsZCwgP0F3YWl0XSBpbiBFeHByZXNzaW9uWytJbiwgP1lpZWxkLCA/QXdhaXRdICkgU3RhdGVtZW50Wz9ZaWVsZCwgP0F3YWl0LCA/UmV0dXJuXVxuLy8gICAgZm9yICggRm9yRGVjbGFyYXRpb25bP1lpZWxkLCA/QXdhaXRdIGluIEV4cHJlc3Npb25bK0luLCA/WWllbGQsID9Bd2FpdF0gKSBTdGF0ZW1lbnRbP1lpZWxkLCA/QXdhaXQsID9SZXR1cm5dXG4vLyAgICBmb3IgKCBbbG9va2FoZWFkIOKIiSB7IGxldCwgYXN5bmMgb2YgfV0gTGVmdEhhbmRTaWRlRXhwcmVzc2lvbls/WWllbGQsID9Bd2FpdF0gb2YgQXNzaWdubWVudEV4cHJlc3Npb25bK0luLCA/WWllbGQsID9Bd2FpdF0gKSBTdGF0ZW1lbnRbP1lpZWxkLCA/QXdhaXQsID9SZXR1cm5dXG4vLyAgICBmb3IgKCB2YXIgRm9yQmluZGluZ1s/WWllbGQsID9Bd2FpdF0gb2YgQXNzaWdubWVudEV4cHJlc3Npb25bK0luLCA/WWllbGQsID9Bd2FpdF0gKSBTdGF0ZW1lbnRbP1lpZWxkLCA/QXdhaXQsID9SZXR1cm5dXG4vLyAgICBmb3IgKCBGb3JEZWNsYXJhdGlvbls/WWllbGQsID9Bd2FpdF0gb2YgQXNzaWdubWVudEV4cHJlc3Npb25bK0luLCA/WWllbGQsID9Bd2FpdF0gKSBTdGF0ZW1lbnRbP1lpZWxkLCA/QXdhaXQsID9SZXR1cm5dXG4vLyAgICBbK0F3YWl0XSBmb3IgYXdhaXQgKCBbbG9va2FoZWFkIOKJoCBsZXRdIExlZnRIYW5kU2lkZUV4cHJlc3Npb25bP1lpZWxkLCA/QXdhaXRdIG9mIEFzc2lnbm1lbnRFeHByZXNzaW9uWytJbiwgP1lpZWxkLCA/QXdhaXRdICkgU3RhdGVtZW50Wz9ZaWVsZCwgP0F3YWl0LCA/UmV0dXJuXVxuLy8gICAgWytBd2FpdF0gZm9yIGF3YWl0ICggdmFyIEZvckJpbmRpbmdbP1lpZWxkLCA/QXdhaXRdIG9mIEFzc2lnbm1lbnRFeHByZXNzaW9uWytJbiwgP1lpZWxkLCA/QXdhaXRdICkgU3RhdGVtZW50Wz9ZaWVsZCwgP0F3YWl0LCA/UmV0dXJuXVxuLy8gICAgWytBd2FpdF0gZm9yIGF3YWl0ICggRm9yRGVjbGFyYXRpb25bP1lpZWxkLCA/QXdhaXRdIG9mIEFzc2lnbm1lbnRFeHByZXNzaW9uWytJbiwgP1lpZWxkLCA/QXdhaXRdICkgU3RhdGVtZW50Wz9ZaWVsZCwgP0F3YWl0LCA/UmV0dXJuXVxubGV0IEZvckluT2ZTdGF0ZW1lbnQgPSAoWWllbGQsIEF3YWl0LCBSZXR1cm4pID0+IChnaXZlbikgPT4ge1xuICBjb25zdCBMZWZ0SGFuZFNpZGVFeHByZXNzaW9uID0gcmVxdWlyZSgnLi9MZWZ0SGFuZFNpZGVFeHByZXNzaW9uJyk7XG4gIGNvbnN0IEV4cHJlc3Npb24gPSByZXF1aXJlKCcuL0V4cHJlc3Npb24nKTtcbiAgY29uc3QgU3RhdGVtZW50ID0gcmVxdWlyZSgnLi9TdGF0ZW1lbnQnKTtcbiAgY29uc3QgRm9yQmluZGluZyA9IHJlcXVpcmUoJy4vRm9yQmluZGluZycpO1xuICBjb25zdCBGb3JEZWNsYXJhdGlvbiA9IHJlcXVpcmUoJy4vRm9yRGVjbGFyYXRpb24nKTtcbiAgY29uc3QgQXNzaWdubWVudEV4cHJlc3Npb24gPSByZXF1aXJlKCcuL0Fzc2lnbm1lbnRFeHByZXNzaW9uJyk7XG4gIGxldCBwYXJhbXMgPSBbWWllbGQsIEF3YWl0LCBSZXR1cm5dO1xuICBsZXQgeyB0eXBlLCBhd2FpdCwgbGVmdCwgcmlnaHQsIGJvZHkgfSA9IGdpdmVuO1xuICBsZXQgaW5kZXgsIGwsIHIsIGI7XG4gIGlmIChsZWZ0LnR5cGUgIT0gJ1ZhcmlhYmxlRGVjbGFyYXRpb24nKSB7XG4gICAgaW5kZXggPSAwO1xuICAgIGwgPSBMZWZ0SGFuZFNpZGVFeHByZXNzaW9uKFlpZWxkLCBBd2FpdCkobGVmdCk7XG4gIH0gZWxzZSBpZiAobGVmdC5raW5kID09ICd2YXInKSB7XG4gICAgaW5kZXggPSAxO1xuICAgIGwgPSBGb3JCaW5kaW5nKFlpZWxkLCBBd2FpdCkobGVmdC5kZWNsYXJhdGlvbnNbMF0pO1xuICB9IGVsc2Uge1xuICAgIGluZGV4ID0gMjtcbiAgICBsID0gRm9yRGVjbGFyYXRpb24oWWllbGQsIEF3YWl0KShsZWZ0KTtcbiAgfVxuICBpZiAodHlwZSA9PSAnRm9yT2ZTdGF0ZW1lbnQnKSB7XG4gICAgaW5kZXggKz0gMztcbiAgICByID0gQXNzaWdubWVudEV4cHJlc3Npb24odHJ1ZSwgWWllbGQsIEF3YWl0KShyaWdodCk7XG4gIH0gZWxzZSB7XG4gICAgciA9IEV4cHJlc3Npb24odHJ1ZSwgWWllbGQsIEF3YWl0KShyaWdodCk7XG4gIH1cbiAgaWYgKGF3YWl0KSBpbmRleCArPSAzO1xuICBiID0gU3RhdGVtZW50KFlpZWxkLCBBd2FpdCwgUmV0dXJuKShib2R5KTtcbiAgcmV0dXJuIG5ldyBOb2RlKCdGb3JJbk9mU3RhdGVtZW50JywgZ2l2ZW4sIGluZGV4LCBbbCwgciwgYl0sIHBhcmFtcyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gRm9ySW5PZlN0YXRlbWVudDtcbiIsImNvbnN0IE5vZGUgPSByZXF1aXJlKCcuLi9Ob2RlJyk7XG5cbi8vIEZvclN0YXRlbWVudFtZaWVsZCwgQXdhaXQsIFJldHVybl0gOlxuLy8gICAgZm9yICggW2xvb2thaGVhZCDiiaAgbGV0IFtdIEV4cHJlc3Npb25bfkluLCA/WWllbGQsID9Bd2FpdF1fb3B0IDsgRXhwcmVzc2lvblsrSW4sID9ZaWVsZCwgP0F3YWl0XV9vcHQgOyBFeHByZXNzaW9uWytJbiwgP1lpZWxkLCA/QXdhaXRdX29wdCApIFN0YXRlbWVudFs/WWllbGQsID9Bd2FpdCwgP1JldHVybl1cbi8vICAgIGZvciAoIHZhciBWYXJpYWJsZURlY2xhcmF0aW9uTGlzdFt+SW4sID9ZaWVsZCwgP0F3YWl0XSA7IEV4cHJlc3Npb25bK0luLCA/WWllbGQsID9Bd2FpdF1fb3B0IDsgRXhwcmVzc2lvblsrSW4sID9ZaWVsZCwgP0F3YWl0XV9vcHQgKSBTdGF0ZW1lbnRbP1lpZWxkLCA/QXdhaXQsID9SZXR1cm5dXG4vLyAgICBmb3IgKCBMZXhpY2FsRGVjbGFyYXRpb25bfkluLCA/WWllbGQsID9Bd2FpdF0gRXhwcmVzc2lvblsrSW4sID9ZaWVsZCwgP0F3YWl0XV9vcHQgOyBFeHByZXNzaW9uWytJbiwgP1lpZWxkLCA/QXdhaXRdX29wdCApIFN0YXRlbWVudFs/WWllbGQsID9Bd2FpdCwgP1JldHVybl1cbmxldCBGb3JTdGF0ZW1lbnQgPSAoWWllbGQsIEF3YWl0LCBSZXR1cm4pID0+IChnaXZlbikgPT4ge1xuICBjb25zdCBFeHByZXNzaW9uID0gcmVxdWlyZSgnLi9FeHByZXNzaW9uJyk7XG4gIGNvbnN0IFN0YXRlbWVudCA9IHJlcXVpcmUoJy4vU3RhdGVtZW50Jyk7XG4gIGNvbnN0IExleGljYWxEZWNsYXJhdGlvbiA9IHJlcXVpcmUoJy4vTGV4aWNhbERlY2xhcmF0aW9uJyk7XG4gIGNvbnN0IFZhcmlhYmxlRGVjbGFyYXRpb25MaXN0ID0gcmVxdWlyZSgnLi9WYXJpYWJsZURlY2xhcmF0aW9uTGlzdCcpO1xuICBsZXQgcGFyYW1zID0gW1lpZWxkLCBBd2FpdCwgUmV0dXJuXTtcbiAgbGV0IHsgaW5pdCwgdGVzdCwgdXBkYXRlLCBib2R5IH0gPSBnaXZlbjtcbiAgbGV0IGluZGV4O1xuICBsZXQgaSA9IG51bGw7XG4gIGlmIChpbml0ICE9IG51bGwpIHN3aXRjaCAoaW5pdC50eXBlKSB7XG4gICAgY2FzZSAnVmFyaWFibGVEZWNsYXJhdGlvbic6IHtcbiAgICAgIGlmIChpbml0LmtpbmQgPT0gJ3ZhcicpIHtcbiAgICAgICAgaW5kZXggPSAxO1xuICAgICAgICBpID0gVmFyaWFibGVEZWNsYXJhdGlvbkxpc3QoZmFsc2UsIFlpZWxkLCBBd2FpdCkoaW5pdCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpbmRleCA9IDI7XG4gICAgICAgIGkgPSBMZXhpY2FsRGVjbGFyYXRpb24oZmFsc2UsIFlpZWxkLCBBd2FpdCkoaW5pdCk7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgZGVmYXVsdDpcbiAgICAgIGluZGV4ID0gMDtcbiAgICAgIGkgPSBFeHByZXNzaW9uKGZhbHNlLCBZaWVsZCwgQXdhaXQpKGluaXQpXG4gIH1cbiAgbGV0IHQgPSBudWxsXG4gIGlmICh0ZXN0ICE9IG51bGwpIHQgPSBFeHByZXNzaW9uKHRydWUsIFlpZWxkLCBBd2FpdCkodGVzdClcbiAgbGV0IHUgPSBudWxsXG4gIGlmICh1cGRhdGUgIT0gbnVsbCkgdSA9IEV4cHJlc3Npb24odHJ1ZSwgWWllbGQsIEF3YWl0KSh1cGRhdGUpXG4gIGxldCBiID0gU3RhdGVtZW50KFlpZWxkLCBBd2FpdCwgUmV0dXJuKShib2R5KVxuICByZXR1cm4gbmV3IE5vZGUoJ0ZvclN0YXRlbWVudCcsIGdpdmVuLCBpbmRleCwgW2ksIHQsIHUsIGJdLCBwYXJhbXMpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEZvclN0YXRlbWVudDtcbiIsImNvbnN0IE5vZGUgPSByZXF1aXJlKCcuLi9Ob2RlJyk7XG5cbi8vIEZvcm1hbFBhcmFtZXRlcltZaWVsZCwgQXdhaXRdIDpcbi8vICAgIEJpbmRpbmdFbGVtZW50Wz9ZaWVsZCwgP0F3YWl0XVxubGV0IEZvcm1hbFBhcmFtZXRlciA9IChZaWVsZCwgQXdhaXQpID0+IChnaXZlbikgPT4ge1xuICBjb25zdCBCaW5kaW5nRWxlbWVudCA9IHJlcXVpcmUoJy4vQmluZGluZ0VsZW1lbnQnKTtcbiAgbGV0IHBhcmFtcyA9IFtZaWVsZCwgQXdhaXRdO1xuICBsZXQgZWxlbSA9IEJpbmRpbmdFbGVtZW50KFlpZWxkLCBBd2FpdCkoZ2l2ZW4pO1xuICByZXR1cm4gbmV3IE5vZGUoJ0Zvcm1hbFBhcmFtZXRlcicsIGdpdmVuLCAwLCBbZWxlbV0sIHBhcmFtcyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gRm9ybWFsUGFyYW1ldGVyO1xuIiwiY29uc3QgTm9kZSA9IHJlcXVpcmUoJy4uL05vZGUnKTtcblxuLy8gRm9ybWFsUGFyYW1ldGVyTGlzdFtZaWVsZCwgQXdhaXRdIDpcbi8vICAgIEZvcm1hbFBhcmFtZXRlcls/WWllbGQsID9Bd2FpdF1cbi8vICAgIEZvcm1hbFBhcmFtZXRlckxpc3RbP1lpZWxkLCA/QXdhaXRdICwgRm9ybWFsUGFyYW1ldGVyWz9ZaWVsZCwgP0F3YWl0XVxubGV0IEZvcm1hbFBhcmFtZXRlckxpc3QgPSAoWWllbGQsIEF3YWl0KSA9PiAoZ2l2ZW4pID0+IHtcbiAgY29uc3QgRm9ybWFsUGFyYW1ldGVyID0gcmVxdWlyZSgnLi9Gb3JtYWxQYXJhbWV0ZXInKTtcbiAgbGV0IGdlbkNoaWxkID0gRm9ybWFsUGFyYW1ldGVyKFlpZWxkLCBBd2FpdCk7XG4gIGxldCBwYXJhbXMgPSBbWWllbGQsIEF3YWl0XTtcbiAgcmV0dXJuIE5vZGUuZnJvbUxpc3QoJ0Zvcm1hbFBhcmFtZXRlckxpc3QnLCBnaXZlbiwgZ2VuQ2hpbGQsIHBhcmFtcyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gRm9ybWFsUGFyYW1ldGVyTGlzdDtcbiIsImNvbnN0IE5vZGUgPSByZXF1aXJlKCcuLi9Ob2RlJyk7XG5cbi8vIEZvcm1hbFBhcmFtZXRlcnNbWWllbGQsIEF3YWl0XSA6XG4vLyAgICBbZW1wdHldXG4vLyAgICBGdW5jdGlvblJlc3RQYXJhbWV0ZXJbP1lpZWxkLCA/QXdhaXRdXG4vLyAgICBGb3JtYWxQYXJhbWV0ZXJMaXN0Wz9ZaWVsZCwgP0F3YWl0XVxuLy8gICAgRm9ybWFsUGFyYW1ldGVyTGlzdFs/WWllbGQsID9Bd2FpdF0gLFxuLy8gICAgRm9ybWFsUGFyYW1ldGVyTGlzdFs/WWllbGQsID9Bd2FpdF0gLCBGdW5jdGlvblJlc3RQYXJhbWV0ZXJbP1lpZWxkLCA/QXdhaXRdXG4vLyBUT0RPIGZpeCBzcGFuXG5sZXQgRm9ybWFsUGFyYW1ldGVycyA9IChZaWVsZCwgQXdhaXQpID0+IChnaXZlbiwgaGFzQ29tbWEpID0+IHtcbiAgY29uc3QgRnVuY3Rpb25SZXN0UGFyYW1ldGVyID0gcmVxdWlyZSgnLi9GdW5jdGlvblJlc3RQYXJhbWV0ZXInKTtcbiAgY29uc3QgRm9ybWFsUGFyYW1ldGVyTGlzdCA9IHJlcXVpcmUoJy4vRm9ybWFsUGFyYW1ldGVyTGlzdCcpO1xuICBsZXQgcGFyYW1zID0gW1lpZWxkLCBBd2FpdF07XG4gIGxldCBzaXplID0gZ2l2ZW4ubGVuZ3RoO1xuICBsZXQgbGFzdCA9IGdpdmVuW3NpemUgLSAxXTtcbiAgaWYgKHNpemUgPT0gMCkge1xuICAgIHJldHVybiBuZXcgTm9kZSgnRm9ybWFsUGFyYW1ldGVycycsIHt9LCAwLCBbXSwgcGFyYW1zKTtcbiAgfSBlbHNlIGlmIChzaXplID09IDEgJiYgbGFzdC50eXBlID09ICdSZXN0RWxlbWVudCcpIHtcbiAgICBsZXQgcmVzdCA9IEZ1bmN0aW9uUmVzdFBhcmFtZXRlcihZaWVsZCwgQXdhaXQpKGxhc3QpO1xuICAgIHJldHVybiBuZXcgTm9kZSgnRm9ybWFsUGFyYW1ldGVycycsIGxhc3QsIDEsIFtyZXN0XSwgcGFyYW1zKTtcbiAgfSBlbHNlIGlmIChsYXN0LnR5cGUgIT0gJ1Jlc3RFbGVtZW50Jykge1xuICAgIGxldCBsaXN0ID0gRm9ybWFsUGFyYW1ldGVyTGlzdChZaWVsZCwgQXdhaXQpKGdpdmVuKTtcbiAgICBsZXQgaWR4ID0gaGFzQ29tbWEgPyAzIDogMjtcbiAgICByZXR1cm4gbmV3IE5vZGUoJ0Zvcm1hbFBhcmFtZXRlcnMnLCBsaXN0LCBpZHgsIFtsaXN0XSwgcGFyYW1zKTtcbiAgfSBlbHNlIHtcbiAgICBnaXZlbi5wb3AoKTtcbiAgICBsZXQgbGlzdCA9IEZvcm1hbFBhcmFtZXRlckxpc3QoWWllbGQsIEF3YWl0KShnaXZlbik7XG4gICAgbGV0IHJlc3QgPSBGdW5jdGlvblJlc3RQYXJhbWV0ZXIoWWllbGQsIEF3YWl0KShsYXN0KTtcbiAgICBsZXQgbm9kZSA9IG5ldyBOb2RlKCdGb3JtYWxQYXJhbWV0ZXJzJywge30sIDQsIFtsaXN0LCByZXN0XSwgcGFyYW1zKTtcbiAgICBub2RlLnN0YXJ0ID0gbGlzdC5zdGFydDtcbiAgICBub2RlLmVuZCA9IHJlc3QuZW5kO1xuICAgIHJldHVybiBub2RlO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gRm9ybWFsUGFyYW1ldGVycztcbiIsImNvbnN0IE5vZGUgPSByZXF1aXJlKCcuLi9Ob2RlJyk7XG5cbi8vIEZ1bmN0aW9uQm9keVtZaWVsZCwgQXdhaXRdIDpcbi8vICAgIEZ1bmN0aW9uU3RhdGVtZW50TGlzdFs/WWllbGQsID9Bd2FpdF1cbmxldCBGdW5jdGlvbkJvZHkgPSAoWWllbGQsIEF3YWl0KSA9PiAoZ2l2ZW4pID0+IHtcbiAgY29uc3QgRnVuY3Rpb25TdGF0ZW1lbnRMaXN0ID0gcmVxdWlyZSgnLi9GdW5jdGlvblN0YXRlbWVudExpc3QnKTtcbiAgbGV0IHBhcmFtcyA9IFtZaWVsZCwgQXdhaXRdO1xuICBsZXQgbGlzdCA9IEZ1bmN0aW9uU3RhdGVtZW50TGlzdChZaWVsZCwgQXdhaXQpKGdpdmVuKTtcbiAgcmV0dXJuIG5ldyBOb2RlKCdGdW5jdGlvbkJvZHknLCBnaXZlbiwgMCwgW2xpc3RdLCBwYXJhbXMpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEZ1bmN0aW9uQm9keTtcbiIsImNvbnN0IE5vZGUgPSByZXF1aXJlKCcuLi9Ob2RlJyk7XG5jb25zdCB7IGNoZWNrQ29tbWEgfSA9IHJlcXVpcmUoJy4uL0dsb2JhbCcpO1xuXG4vLyBGdW5jdGlvbkRlY2xhcmF0aW9uW1lpZWxkLCBBd2FpdCwgRGVmYXVsdF0gOlxuLy8gICAgZnVuY3Rpb24gQmluZGluZ0lkZW50aWZpZXJbP1lpZWxkLCA/QXdhaXRdICggRm9ybWFsUGFyYW1ldGVyc1t+WWllbGQsIH5Bd2FpdF0gKSB7IEZ1bmN0aW9uQm9keVt+WWllbGQsIH5Bd2FpdF0gfVxuLy8gICAgWytEZWZhdWx0XSBmdW5jdGlvbiAoIEZvcm1hbFBhcmFtZXRlcnNbfllpZWxkLCB+QXdhaXRdICkgeyBGdW5jdGlvbkJvZHlbfllpZWxkLCB+QXdhaXRdIH1cbmxldCBGdW5jdGlvbkRlY2xhcmF0aW9uID0gKFlpZWxkLCBBd2FpdCwgRGVmYXVsdCkgPT4gKGdpdmVuKSA9PiB7XG4gIGNvbnN0IEJpbmRpbmdJZGVudGlmaWVyID0gcmVxdWlyZSgnLi9CaW5kaW5nSWRlbnRpZmllcicpO1xuICBjb25zdCBGb3JtYWxQYXJhbWV0ZXJzID0gcmVxdWlyZSgnLi9Gb3JtYWxQYXJhbWV0ZXJzJyk7XG4gIGNvbnN0IEZ1bmN0aW9uQm9keSA9IHJlcXVpcmUoJy4vRnVuY3Rpb25Cb2R5Jyk7XG4gIGxldCBwYXJhbXMgPSBbWWllbGQsIEF3YWl0LCBEZWZhdWx0XTtcbiAgbGV0IHsgaWQsIGJvZHkgfSA9IGdpdmVuO1xuICBcbiAgbGV0IGhhc0NvbW1hID0gY2hlY2tDb21tYShpZC5lbmQsIGJvZHkuc3RhcnQsICcpJyk7XG4gIGxldCBwcyA9IEZvcm1hbFBhcmFtZXRlcnMoZmFsc2UsIGZhbHNlKShnaXZlbi5wYXJhbXMsIGhhc0NvbW1hKTtcbiAgbGV0IGIgPSBGdW5jdGlvbkJvZHkoZmFsc2UsIGZhbHNlKShib2R5KTtcbiAgaWYgKGlkKSB7XG4gICAgbGV0IHggPSBCaW5kaW5nSWRlbnRpZmllcihZaWVsZCwgQXdhaXQpKGlkKTtcbiAgICByZXR1cm4gbmV3IE5vZGUoJ0Z1bmN0aW9uRGVjbGFyYXRpb24nLCBnaXZlbiwgMCwgW3gsIHBzLCBiXSwgcGFyYW1zKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbmV3IE5vZGUoJ0Z1bmN0aW9uRGVjbGFyYXRpb24nLCBnaXZlbiwgMSwgW3BzLCBiXSwgcGFyYW1zKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEZ1bmN0aW9uRGVjbGFyYXRpb247XG4iLCJjb25zdCBOb2RlID0gcmVxdWlyZSgnLi4vTm9kZScpO1xuY29uc3QgeyBjaGVja0NvbW1hIH0gPSByZXF1aXJlKCcuLi9HbG9iYWwnKTtcblxuLy8gRnVuY3Rpb25FeHByZXNzaW9uIDpcbi8vICAgIGZ1bmN0aW9uIEJpbmRpbmdJZGVudGlmaWVyW35ZaWVsZCwgfkF3YWl0XV9vcHQgKCBGb3JtYWxQYXJhbWV0ZXJzW35ZaWVsZCwgfkF3YWl0XSApIHsgRnVuY3Rpb25Cb2R5W35ZaWVsZCwgfkF3YWl0XSB9XG5sZXQgRnVuY3Rpb25FeHByZXNzaW9uID0gKGdpdmVuKSA9PiB7XG4gIGNvbnN0IEJpbmRpbmdJZGVudGlmaWVyID0gcmVxdWlyZSgnLi9CaW5kaW5nSWRlbnRpZmllcicpO1xuICBjb25zdCBGb3JtYWxQYXJhbWV0ZXJzID0gcmVxdWlyZSgnLi9Gb3JtYWxQYXJhbWV0ZXJzJyk7XG4gIGNvbnN0IEZ1bmN0aW9uQm9keSA9IHJlcXVpcmUoJy4vRnVuY3Rpb25Cb2R5Jyk7XG4gIGxldCB7IGlkLCBwYXJhbXMsIGJvZHkgfSA9IGdpdmVuO1xuICBsZXQgeCA9IG51bGw7XG4gIGlmIChpZCAhPSBudWxsKSB4ID0gQmluZGluZ0lkZW50aWZpZXIoZmFsc2UsIGZhbHNlKShpZCk7XG4gIGxldCBoYXNDb21tYSA9IGNoZWNrQ29tbWEoZ2l2ZW4uc3RhcnQsIGJvZHkuc3RhcnQsICcpJyk7XG4gIGxldCBwcyA9IEZvcm1hbFBhcmFtZXRlcnMoZmFsc2UsIGZhbHNlKShwYXJhbXMsIGhhc0NvbW1hKTtcbiAgbGV0IGIgPSBGdW5jdGlvbkJvZHkoZmFsc2UsIGZhbHNlKShib2R5KTtcbiAgcmV0dXJuIG5ldyBOb2RlKCdGdW5jdGlvbkV4cHJlc3Npb24nLCBnaXZlbiwgMCwgW3gsIHBzLCBiXSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gRnVuY3Rpb25FeHByZXNzaW9uO1xuIiwiY29uc3QgTm9kZSA9IHJlcXVpcmUoJy4uL05vZGUnKTtcblxuLy8gRnVuY3Rpb25SZXN0UGFyYW1ldGVyW1lpZWxkLCBBd2FpdF0gOlxuLy8gICAgQmluZGluZ1Jlc3RFbGVtZW50Wz9ZaWVsZCwgP0F3YWl0XVxubGV0IEZ1bmN0aW9uUmVzdFBhcmFtZXRlciA9IChZaWVsZCwgQXdhaXQpID0+IChnaXZlbikgPT4ge1xuICBjb25zdCBCaW5kaW5nUmVzdEVsZW1lbnQgPSByZXF1aXJlKCcuL0JpbmRpbmdSZXN0RWxlbWVudCcpO1xuICBsZXQgcGFyYW1zID0gW1lpZWxkLCBBd2FpdF07XG4gIGxldCByZXN0ID0gQmluZGluZ1Jlc3RFbGVtZW50KFlpZWxkLCBBd2FpdCkoZ2l2ZW4pO1xuICByZXR1cm4gbmV3IE5vZGUoJ0Z1bmN0aW9uUmVzdFBhcmFtZXRlcicsIGdpdmVuLCAwLCBbcmVzdF0sIHBhcmFtcyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gRnVuY3Rpb25SZXN0UGFyYW1ldGVyO1xuIiwiY29uc3QgTm9kZSA9IHJlcXVpcmUoJy4uL05vZGUnKTtcblxuLy8gRnVuY3Rpb25TdGF0ZW1lbnRMaXN0W1lpZWxkLCBBd2FpdF0gOlxuLy8gICAgU3RhdGVtZW50TGlzdFs/WWllbGQsID9Bd2FpdCwgK1JldHVybl1fb3B0XG5sZXQgRnVuY3Rpb25TdGF0ZW1lbnRMaXN0ID0gKFlpZWxkLCBBd2FpdCkgPT4gKGdpdmVuKSA9PiB7XG4gIGNvbnN0IFN0YXRlbWVudExpc3QgPSByZXF1aXJlKCcuL1N0YXRlbWVudExpc3QnKTtcbiAgbGV0IHBhcmFtcyA9IFtZaWVsZCwgQXdhaXRdO1xuICBsZXQgbGlzdCA9IG51bGw7XG4gIGlmIChnaXZlbi5ib2R5Lmxlbmd0aCA+IDApIGxpc3QgPSBTdGF0ZW1lbnRMaXN0KFlpZWxkLCBBd2FpdCwgdHJ1ZSkoZ2l2ZW4uYm9keSk7XG4gIHJldHVybiBuZXcgTm9kZSgnRnVuY3Rpb25TdGF0ZW1lbnRMaXN0JywgZ2l2ZW4sIDAsIFtsaXN0XSwgcGFyYW1zKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBGdW5jdGlvblN0YXRlbWVudExpc3Q7XG4iLCJjb25zdCBOb2RlID0gcmVxdWlyZSgnLi4vTm9kZScpO1xuXG4vLyBHZW5lcmF0b3JCb2R5IDpcbi8vICAgIEZ1bmN0aW9uQm9keVsrWWllbGQsIH5Bd2FpdF1cbmxldCBHZW5lcmF0b3JCb2R5ID0gKGdpdmVuKSA9PiB7XG4gIGNvbnN0IEZ1bmN0aW9uQm9keSA9IHJlcXVpcmUoJy4vRnVuY3Rpb25Cb2R5Jyk7XG4gIGxldCBib2R5ID0gRnVuY3Rpb25Cb2R5KHRydWUsIGZhbHNlKShnaXZlbik7XG4gIHJldHVybiBuZXcgTm9kZSgnR2VuZXJhdG9yQm9keScsIGdpdmVuLCAwLCBbYm9keV0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEdlbmVyYXRvckJvZHk7XG4iLCJjb25zdCBOb2RlID0gcmVxdWlyZSgnLi4vTm9kZScpO1xuY29uc3QgeyBjaGVja0NvbW1hIH0gPSByZXF1aXJlKCcuLi9HbG9iYWwnKTtcblxuLy8gR2VuZXJhdG9yRGVjbGFyYXRpb25bWWllbGQsIEF3YWl0LCBEZWZhdWx0XSA6XG4vLyAgICBmdW5jdGlvbiAqIEJpbmRpbmdJZGVudGlmaWVyWz9ZaWVsZCwgP0F3YWl0XSAoIEZvcm1hbFBhcmFtZXRlcnNbK1lpZWxkLCB+QXdhaXRdICkgeyBHZW5lcmF0b3JCb2R5IH1cbi8vICAgIFsrRGVmYXVsdF0gZnVuY3Rpb24gKiAoIEZvcm1hbFBhcmFtZXRlcnNbK1lpZWxkLCB+QXdhaXRdICkgeyBHZW5lcmF0b3JCb2R5IH1cbmxldCBHZW5lcmF0b3JEZWNsYXJhdGlvbiA9IChZaWVsZCwgQXdhaXQsIERlZmF1bHQpID0+IChnaXZlbikgPT4ge1xuICBjb25zdCBCaW5kaW5nSWRlbnRpZmllciA9IHJlcXVpcmUoJy4vQmluZGluZ0lkZW50aWZpZXInKTtcbiAgY29uc3QgRm9ybWFsUGFyYW1ldGVycyA9IHJlcXVpcmUoJy4vRm9ybWFsUGFyYW1ldGVycycpO1xuICBjb25zdCBHZW5lcmF0b3JCb2R5ID0gcmVxdWlyZSgnLi9HZW5lcmF0b3JCb2R5Jyk7XG4gIGxldCBwYXJhbXMgPSBbWWllbGQsIEF3YWl0LCBEZWZhdWx0XTtcbiAgbGV0IHsgaWQsIGJvZHkgfSA9IGdpdmVuO1xuICBsZXQgaGFzQ29tbWEgPSBjaGVja0NvbW1hKGlkLmVuZCwgYm9keS5zdGFydCwgJyknKTtcbiAgbGV0IHBzID0gRm9ybWFsUGFyYW1ldGVycyh0cnVlLCBmYWxzZSkoZ2l2ZW4ucGFyYW1zLCBoYXNDb21tYSk7XG4gIGxldCBiID0gR2VuZXJhdG9yQm9keShib2R5KTtcbiAgaWYgKGlkKSB7XG4gICAgbGV0IHggPSBCaW5kaW5nSWRlbnRpZmllcihZaWVsZCwgQXdhaXQpKGlkKTtcbiAgICByZXR1cm4gbmV3IE5vZGUoJ0dlbmVyYXRvckRlY2xhcmF0aW9uJywgZ2l2ZW4sIDAsIFt4LCBwcywgYl0sIHBhcmFtcyk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG5ldyBOb2RlKCdHZW5lcmF0b3JEZWNsYXJhdGlvbicsIGdpdmVuLCAxLCBbcHMsIGJdLCBwYXJhbXMpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gR2VuZXJhdG9yRGVjbGFyYXRpb247XG4iLCJjb25zdCBOb2RlID0gcmVxdWlyZSgnLi4vTm9kZScpO1xuY29uc3QgeyBjaGVja0NvbW1hIH0gPSByZXF1aXJlKCcuLi9HbG9iYWwnKTtcblxuLy8gR2VuZXJhdG9yRXhwcmVzc2lvbjoge1xuLy8gICBgZnVuY3Rpb25gIGAqYCBCaW5kaW5nSWRlbnRpZmllclsrWWllbGQsIH5Bd2FpdF0/IGAoYCBGb3JtYWxQYXJhbWV0ZXJzWytZaWVsZCwgfkF3YWl0XSBgKWAgYHtgIEdlbmVyYXRvckJvZHkgYH1gXG4vLyB9XG5cbmxldCBHZW5lcmF0b3JFeHByZXNzaW9uID0gKGdpdmVuKSA9PiB7XG4gIGNvbnN0IEJpbmRpbmdJZGVudGlmaWVyID0gcmVxdWlyZSgnLi9CaW5kaW5nSWRlbnRpZmllcicpO1xuICBjb25zdCBGb3JtYWxQYXJhbWV0ZXJzID0gcmVxdWlyZSgnLi9Gb3JtYWxQYXJhbWV0ZXJzJyk7XG4gIGNvbnN0IEdlbmVyYXRvckJvZHkgPSByZXF1aXJlKCcuL0dlbmVyYXRvckJvZHknKTtcblxuICBsZXQgeyBpZCwgcGFyYW1zLCBib2R5IH0gPSBnaXZlbjtcblxuICBsZXQgYmluZGluZyA9IG51bGw7XG4gIGlmIChpZCAhPSBudWxsKSBiaW5kaW5nID0gQmluZGluZ0lkZW50aWZpZXIodHJ1ZSwgZmFsc2UpKGlkKTtcbiAgLy8gVE9ETyBoYW5kbGUgc3BhblxuICBsZXQgaGFzQ29tbWEgPSBjaGVja0NvbW1hKGdpdmVuLnN0YXJ0LCBib2R5LnN0YXJ0LCAnKScpO1xuICBsZXQgcHMgPSBGb3JtYWxQYXJhbWV0ZXJzKHRydWUsIGZhbHNlKShwYXJhbXMsIGhhc0NvbW1hKTtcbiAgbGV0IGIgPSBHZW5lcmF0b3JCb2R5KGJvZHkpO1xuICByZXR1cm4gbmV3IE5vZGUoJ0dlbmVyYXRvckV4cHJlc3Npb24nLCBnaXZlbiwgMCwgW2JpbmRpbmcsIHBzLCBiXSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gR2VuZXJhdG9yRXhwcmVzc2lvbjtcbiIsImNvbnN0IE5vZGUgPSByZXF1aXJlKCcuLi9Ob2RlJyk7XG5jb25zdCB7IGNoZWNrQ29tbWEgfSA9IHJlcXVpcmUoJy4uL0dsb2JhbCcpO1xuXG4vLyBHZW5lcmF0b3JNZXRob2RbWWllbGQsIEF3YWl0XToge1xuLy8gICBgKmAgUHJvcGVydHlOYW1lWz9ZaWVsZCwgP0F3YWl0XSBgKGAgVW5pcXVlRm9ybWFsUGFyYW1ldGVyc1srWWllbGQsIH5Bd2FpdF0gYClgIGB7YCBHZW5lcmF0b3JCb2R5IGB9YFxuLy8gfVxuXG5sZXQgR2VuZXJhdG9yTWV0aG9kID0gKFlpZWxkLCBBd2FpdCkgPT4gKGdpdmVuKSA9PiB7XG4gIGNvbnN0IFByb3BlcnR5TmFtZSA9IHJlcXVpcmUoJy4vUHJvcGVydHlOYW1lJyk7XG4gIGNvbnN0IFVuaXF1ZUZvcm1hbFBhcmFtZXRlcnMgPSByZXF1aXJlKCcuL1VuaXF1ZUZvcm1hbFBhcmFtZXRlcnMnKTtcbiAgY29uc3QgR2VuZXJhdG9yQm9keSA9IHJlcXVpcmUoJy4vR2VuZXJhdG9yQm9keScpO1xuICBcbiAgbGV0IHBhcmFtcyA9IFtZaWVsZCwgQXdhaXRdO1xuICBsZXQgbmFtZSA9IFByb3BlcnR5TmFtZShZaWVsZCwgQXdhaXQpKGdpdmVuKTtcbiAgbGV0IGhhc0NvbW1hID0gY2hlY2tDb21tYShnaXZlbi5rZXkuZW5kLCBnaXZlbi52YWx1ZS5ib2R5LnN0YXJ0LCAnKScpO1xuICBsZXQgcHMgPSBVbmlxdWVGb3JtYWxQYXJhbWV0ZXJzKHRydWUsIGZhbHNlKShnaXZlbi52YWx1ZS5wYXJhbXMsIGhhc0NvbW1hKTtcblxuICBsZXQgYiA9IEdlbmVyYXRvckJvZHkoZ2l2ZW4udmFsdWUuYm9keSk7XG4gIHJldHVybiBuZXcgTm9kZSgnR2VuZXJhdG9yTWV0aG9kJywgZ2l2ZW4sIDAsIFtuYW1lLCBwcywgYl0sIHBhcmFtcyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gR2VuZXJhdG9yTWV0aG9kO1xuIiwiY29uc3QgTm9kZSA9IHJlcXVpcmUoJy4uL05vZGUnKTtcblxuLy8gSG9pc3RhYmxlRGVjbGFyYXRpb25bWWllbGQsIEF3YWl0LCBEZWZhdWx0XSA6XG4vLyAgICBGdW5jdGlvbkRlY2xhcmF0aW9uWz9ZaWVsZCwgP0F3YWl0LCA/RGVmYXVsdF1cbi8vICAgIEdlbmVyYXRvckRlY2xhcmF0aW9uWz9ZaWVsZCwgP0F3YWl0LCA/RGVmYXVsdF1cbi8vICAgIEFzeW5jRnVuY3Rpb25EZWNsYXJhdGlvbls/WWllbGQsID9Bd2FpdCwgP0RlZmF1bHRdXG4vLyAgICBBc3luY0dlbmVyYXRvckRlY2xhcmF0aW9uWz9ZaWVsZCwgP0F3YWl0LCA/RGVmYXVsdF1cbmxldCBIb2lzdGFibGVEZWNsYXJhdGlvbiA9IChZaWVsZCwgQXdhaXQsIERlZmF1bHQpID0+IChnaXZlbikgPT4ge1xuICBjb25zdCBGdW5jdGlvbkRlY2xhcmF0aW9uID0gcmVxdWlyZSgnLi9GdW5jdGlvbkRlY2xhcmF0aW9uJyk7XG4gIGNvbnN0IEdlbmVyYXRvckRlY2xhcmF0aW9uID0gcmVxdWlyZSgnLi9HZW5lcmF0b3JEZWNsYXJhdGlvbicpO1xuICBjb25zdCBBc3luY0Z1bmN0aW9uRGVjbGFyYXRpb24gPSByZXF1aXJlKCcuL0FzeW5jRnVuY3Rpb25EZWNsYXJhdGlvbicpO1xuICBjb25zdCBBc3luY0dlbmVyYXRvckRlY2xhcmF0aW9uID0gcmVxdWlyZSgnLi9Bc3luY0dlbmVyYXRvckRlY2xhcmF0aW9uJyk7XG4gIGxldCBwYXJhbXMgPSBbWWllbGQsIEF3YWl0LCBEZWZhdWx0XTtcbiAgbGV0IHsgYXN5bmMsIGdlbmVyYXRvciB9ID0gZ2l2ZW47XG4gIGxldCBpbmRleCwgZnVuYztcbiAgaWYgKCFhc3luYyAmJiAhZ2VuZXJhdG9yKSB7XG4gICAgaW5kZXggPSAwO1xuICAgIGZ1bmMgPSBGdW5jdGlvbkRlY2xhcmF0aW9uKFlpZWxkLCBBd2FpdCwgRGVmYXVsdCkoZ2l2ZW4pO1xuICB9IGVsc2UgaWYgKCFhc3luYyAmJiBnZW5lcmF0b3IpIHtcbiAgICBpbmRleCA9IDE7XG4gICAgZnVuYyA9IEdlbmVyYXRvckRlY2xhcmF0aW9uKFlpZWxkLCBBd2FpdCwgRGVmYXVsdCkoZ2l2ZW4pO1xuICB9IGVsc2UgaWYgKGFzeW5jICYmICFnZW5lcmF0b3IpIHtcbiAgICBpbmRleCA9IDI7XG4gICAgZnVuYyA9IEFzeW5jRnVuY3Rpb25EZWNsYXJhdGlvbihZaWVsZCwgQXdhaXQsIERlZmF1bHQpKGdpdmVuKTtcbiAgfSBlbHNlIHtcbiAgICBpbmRleCA9IDM7XG4gICAgZnVuYyA9IEFzeW5jR2VuZXJhdG9yRGVjbGFyYXRpb24oWWllbGQsIEF3YWl0LCBEZWZhdWx0KShnaXZlbik7XG4gIH1cbiAgcmV0dXJuIG5ldyBOb2RlKCdIb2lzdGFibGVEZWNsYXJhdGlvbicsIGdpdmVuLCBpbmRleCwgW2Z1bmNdLCBwYXJhbXMpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEhvaXN0YWJsZURlY2xhcmF0aW9uO1xuIiwiY29uc3QgTm9kZSA9IHJlcXVpcmUoJy4uL05vZGUnKTtcbmNvbnN0IExleGljYWxOb2RlID0gcmVxdWlyZSgnLi4vTGV4aWNhbE5vZGUnKTtcblxuLy8gSWRlbnRpZmllciA6XG4vLyAgICBJZGVudGlmaWVyTmFtZSBidXQgbm90IFJlc2VydmVkV29yZFxubGV0IElkZW50aWZpZXIgPSAoZ2l2ZW4pID0+IHtcbiAgbGV0IGlkTmFtZSA9IG5ldyBMZXhpY2FsTm9kZSgnKElkZW50aWZpZXJOYW1lIFxcXFwgKFJlc2VydmVkV29yZCkpJywgZ2l2ZW4ubmFtZSk7XG4gIHJldHVybiBuZXcgTm9kZSgnSWRlbnRpZmllcicsIGdpdmVuLCAwLCBbaWROYW1lXSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gSWRlbnRpZmllcjtcbiIsImNvbnN0IE5vZGUgPSByZXF1aXJlKCcuLi9Ob2RlJyk7XG5cbi8vIElkZW50aWZpZXJSZWZlcmVuY2VbWWllbGQsIEF3YWl0XSA6XG4vLyAgICBJZGVudGlmaWVyXG4vLyAgICBbfllpZWxkXXlpZWxkXG4vLyAgICBbfkF3YWl0XWF3YWl0XG5sZXQgSWRlbnRpZmllclJlZmVyZW5jZSA9IChZaWVsZCwgQXdhaXQpID0+IChnaXZlbikgPT4ge1xuICBsZXQgSWRlbnRpZmllciA9IHJlcXVpcmUoJy4vSWRlbnRpZmllcicpO1xuXG4gIGxldCBwYXJhbXMgPSBbWWllbGQsIEF3YWl0XTtcbiAgc3dpdGNoIChnaXZlbi5uYW1lKSB7XG4gICAgY2FzZSAneWllbGQnOlxuICAgICAgcmV0dXJuIG5ldyBOb2RlKCdJZGVudGlmaWVyUmVmZXJlbmNlJywgZ2l2ZW4sIDEsIFtdLCBwYXJhbXMpO1xuICAgIGNhc2UgJ2F3YWl0JzpcbiAgICAgIHJldHVybiBuZXcgTm9kZSgnSWRlbnRpZmllclJlZmVyZW5jZScsIGdpdmVuLCAyLCBbXSwgcGFyYW1zKTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIG5ldyBOb2RlKCdJZGVudGlmaWVyUmVmZXJlbmNlJywgZ2l2ZW4sIDAsIFtJZGVudGlmaWVyKGdpdmVuKV0sIHBhcmFtcyk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBJZGVudGlmaWVyUmVmZXJlbmNlO1xuIiwiY29uc3QgTm9kZSA9IHJlcXVpcmUoJy4uL05vZGUnKTtcblxuLy8gSWZTdGF0ZW1lbnRbWWllbGQsIEF3YWl0LCBSZXR1cm5dIDpcbi8vICAgIGlmICggRXhwcmVzc2lvblsrSW4sID9ZaWVsZCwgP0F3YWl0XSApIFN0YXRlbWVudFs/WWllbGQsID9Bd2FpdCwgP1JldHVybl0gZWxzZSBTdGF0ZW1lbnRbP1lpZWxkLCA/QXdhaXQsID9SZXR1cm5dXG4vLyAgICBpZiAoIEV4cHJlc3Npb25bK0luLCA/WWllbGQsID9Bd2FpdF0gKSBTdGF0ZW1lbnRbP1lpZWxkLCA/QXdhaXQsID9SZXR1cm5dIFtsb29rYWhlYWQg4omgIGVsc2VdXG5sZXQgSWZTdGF0ZW1lbnQgPSAoWWllbGQsIEF3YWl0LCBSZXR1cm4pID0+IChnaXZlbikgPT4ge1xuICBjb25zdCBFeHByZXNzaW9uID0gcmVxdWlyZSgnLi9FeHByZXNzaW9uJyk7XG4gIGNvbnN0IFN0YXRlbWVudCA9IHJlcXVpcmUoJy4vU3RhdGVtZW50Jyk7XG4gIGxldCBwYXJhbXMgPSBbWWllbGQsIEF3YWl0LCBSZXR1cm5dO1xuICBsZXQgeyB0ZXN0LCBjb25zZXF1ZW50LCBhbHRlcm5hdGUgfSA9IGdpdmVuO1xuICBsZXQgZXhwciA9IEV4cHJlc3Npb24odHJ1ZSwgWWllbGQsIEF3YWl0KSh0ZXN0KTtcbiAgbGV0IGNvbnMgPSBTdGF0ZW1lbnQoWWllbGQsIEF3YWl0LCBSZXR1cm4pKGNvbnNlcXVlbnQpO1xuICBpZiAoYWx0ZXJuYXRlICE9IG51bGwpIHtcbiAgICBsZXQgYWx0ZXIgPSBTdGF0ZW1lbnQoWWllbGQsIEF3YWl0LCBSZXR1cm4pKGFsdGVybmF0ZSk7XG4gICAgcmV0dXJuIG5ldyBOb2RlKCdJZlN0YXRlbWVudCcsIGdpdmVuLCAwLCBbZXhwciwgY29ucywgYWx0ZXJdLCBwYXJhbXMpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBuZXcgTm9kZSgnSWZTdGF0ZW1lbnQnLCBnaXZlbiwgMSwgW2V4cHIsIGNvbnNdLCBwYXJhbXMpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gSWZTdGF0ZW1lbnQ7XG4iLCJjb25zdCBOb2RlID0gcmVxdWlyZSgnLi4vTm9kZScpO1xuXG4vLyBJbml0aWFsaXplcltJbiwgWWllbGQsIEF3YWl0XSA6XG4vLyAgICA9IEFzc2lnbm1lbnRFeHByZXNzaW9uWz9JbiwgP1lpZWxkLCA/QXdhaXRdXG5sZXQgSW5pdGlhbGl6ZXIgPSAoSW4sIFlpZWxkLCBBd2FpdCkgPT4gKGdpdmVuKSA9PiB7XG4gIGxldCBBc3NpZ25tZW50RXhwcmVzc2lvbiA9IHJlcXVpcmUoJy4vQXNzaWdubWVudEV4cHJlc3Npb24nKTtcbiAgbGV0IGV4cHIgPSBBc3NpZ25tZW50RXhwcmVzc2lvbihJbiwgWWllbGQsIEF3YWl0KShnaXZlbik7XG4gIGxldCBwYXJhbXMgPSBbSW4sIFlpZWxkLCBBd2FpdF07XG4gIHJldHVybiBuZXcgTm9kZSgnSW5pdGlhbGl6ZXInLCBnaXZlbiwgMCwgW2V4cHJdLCBwYXJhbXMpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEluaXRpYWxpemVyO1xuIiwiY29uc3QgTm9kZSA9IHJlcXVpcmUoJy4uL05vZGUnKTtcblxuLy8gSXRlcmF0aW9uU3RhdGVtZW50W1lpZWxkLCBBd2FpdCwgUmV0dXJuXSA6XG4vLyAgICBEb1doaWxlU3RhdGVtZW50Wz9ZaWVsZCwgP0F3YWl0LCA/UmV0dXJuXVxuLy8gICAgV2hpbGVTdGF0ZW1lbnRbP1lpZWxkLCA/QXdhaXQsID9SZXR1cm5dXG4vLyAgICBGb3JTdGF0ZW1lbnRbP1lpZWxkLCA/QXdhaXQsID9SZXR1cm5dXG4vLyAgICBGb3JJbk9mU3RhdGVtZW50Wz9ZaWVsZCwgP0F3YWl0LCA/UmV0dXJuXVxubGV0IEl0ZXJhdGlvblN0YXRlbWVudCA9IChZaWVsZCwgQXdhaXQsIFJldHVybikgPT4gKGdpdmVuKSA9PiB7XG4gIGNvbnN0IERvV2hpbGVTdGF0ZW1lbnQgPSByZXF1aXJlKCcuL0RvV2hpbGVTdGF0ZW1lbnQnKTtcbiAgY29uc3QgV2hpbGVTdGF0ZW1lbnQgPSByZXF1aXJlKCcuL1doaWxlU3RhdGVtZW50Jyk7XG4gIGNvbnN0IEZvclN0YXRlbWVudCA9IHJlcXVpcmUoJy4vRm9yU3RhdGVtZW50Jyk7XG4gIGNvbnN0IEZvckluT2ZTdGF0ZW1lbnQgPSByZXF1aXJlKCcuL0ZvckluT2ZTdGF0ZW1lbnQnKTtcbiAgbGV0IHBhcmFtcyA9IFtZaWVsZCwgQXdhaXQsIFJldHVybl07XG4gIGxldCB7IHR5cGUgfSA9IGdpdmVuO1xuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlICdEb1doaWxlU3RhdGVtZW50Jzoge1xuICAgICAgbGV0IHN0bXQgPSBEb1doaWxlU3RhdGVtZW50KFlpZWxkLCBBd2FpdCwgUmV0dXJuKShnaXZlbik7XG4gICAgICByZXR1cm4gbmV3IE5vZGUoJ0l0ZXJhdGlvblN0YXRlbWVudCcsIGdpdmVuLCAwLCBbc3RtdF0sIHBhcmFtcyk7XG4gICAgfVxuICAgIGNhc2UgJ1doaWxlU3RhdGVtZW50Jzoge1xuICAgICAgbGV0IHN0bXQgPSBXaGlsZVN0YXRlbWVudChZaWVsZCwgQXdhaXQsIFJldHVybikoZ2l2ZW4pO1xuICAgICAgcmV0dXJuIG5ldyBOb2RlKCdJdGVyYXRpb25TdGF0ZW1lbnQnLCBnaXZlbiwgMSwgW3N0bXRdLCBwYXJhbXMpO1xuICAgIH1cbiAgICBjYXNlICdGb3JTdGF0ZW1lbnQnOiB7XG4gICAgICBsZXQgc3RtdCA9IEZvclN0YXRlbWVudChZaWVsZCwgQXdhaXQsIFJldHVybikoZ2l2ZW4pO1xuICAgICAgcmV0dXJuIG5ldyBOb2RlKCdJdGVyYXRpb25TdGF0ZW1lbnQnLCBnaXZlbiwgMiwgW3N0bXRdLCBwYXJhbXMpO1xuICAgIH1cbiAgICBjYXNlICdGb3JPZlN0YXRlbWVudCc6XG4gICAgY2FzZSAnRm9ySW5TdGF0ZW1lbnQnOiB7XG4gICAgICBsZXQgc3RtdCA9IEZvckluT2ZTdGF0ZW1lbnQoWWllbGQsIEF3YWl0LCBSZXR1cm4pKGdpdmVuKTtcbiAgICAgIHJldHVybiBuZXcgTm9kZSgnSXRlcmF0aW9uU3RhdGVtZW50JywgZ2l2ZW4sIDMsIFtzdG10XSwgcGFyYW1zKTtcbiAgICB9XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBJdGVyYXRpb25TdGF0ZW1lbnQ7XG4iLCJjb25zdCBOb2RlID0gcmVxdWlyZSgnLi4vTm9kZScpO1xuXG4vLyBMYWJlbElkZW50aWZpZXJbWWllbGQsIEF3YWl0XToge1xuLy8gICBJZGVudGlmaWVyIHxcbi8vICAgW35ZaWVsZF0gYHlpZWxkYCB8XG4vLyAgIFt+QXdhaXRdIGBhd2FpdGBcbi8vIH1cblxubGV0IExhYmVsSWRlbnRpZmllciA9IChZaWVsZCwgQXdhaXQpID0+IChnaXZlbikgPT4ge1xuICBjb25zdCBJZGVudGlmaWVyID0gcmVxdWlyZSgnLi9JZGVudGlmaWVyJyk7XG4gIGxldCBwYXJhbXMgPSBbWWllbGQsIEF3YWl0XTtcbiAgc3dpdGNoIChnaXZlbi5uYW1lKSB7XG4gICAgY2FzZSAneWllbGQnOlxuICAgICAgcmV0dXJuIG5ldyBOb2RlKCdMYWJlbElkZW50aWZpZXInLCBnaXZlbiwgMSwgW10sIHBhcmFtcyk7XG4gICAgY2FzZSAnYXdhaXQnOlxuICAgICAgcmV0dXJuIG5ldyBOb2RlKCdMYWJlbElkZW50aWZpZXInLCBnaXZlbiwgMiwgW10sIHBhcmFtcyk7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBuZXcgTm9kZSgnTGFiZWxJZGVudGlmaWVyJywgZ2l2ZW4sIDAsIFtJZGVudGlmaWVyKGdpdmVuKV0sIHBhcmFtcyk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBMYWJlbElkZW50aWZpZXI7XG4iLCJjb25zdCBOb2RlID0gcmVxdWlyZSgnLi4vTm9kZScpO1xuXG4vLyBMYWJlbGxlZEl0ZW1bWWllbGQsIEF3YWl0LCBSZXR1cm5dOiB7XG4vLyAgIFN0YXRlbWVudFs/WWllbGQsID9Bd2FpdCwgP1JldHVybl0gfFxuLy8gICBGdW5jdGlvbkRlY2xhcmF0aW9uWz9ZaWVsZCwgP0F3YWl0LCB+RGVmYXVsdF1cbi8vIH1cblxubGV0IExhYmVsbGVkSXRlbSA9IChZaWVsZCwgQXdhaXQsIFJldHVybikgPT4gKGdpdmVuKSA9PiB7XG4gIGNvbnN0IFN0YXRlbWVudCA9IHJlcXVpcmUoJy4vU3RhdGVtZW50Jyk7XG4gIGNvbnN0IEZ1bmN0aW9uRGVjbGFyYXRpb24gPSByZXF1aXJlKCcuL0Z1bmN0aW9uRGVjbGFyYXRpb24nKTtcbiAgbGV0IHBhcmFtcyA9IFtZaWVsZCwgQXdhaXQsIFJldHVybl07XG4gIHN3aXRjaChnaXZlbi50eXBlKSB7XG4gICAgY2FzZSAnRG9XaGlsZVN0YXRlbWVudCc6XG4gICAgY2FzZSAnV2hpbGVTdGF0ZW1lbnQnOlxuICAgIGNhc2UgJ0ZvclN0YXRlbWVudCc6XG4gICAgY2FzZSAnRXhwcmVzc2lvblN0YXRlbWVudCc6XG4gICAgY2FzZSAnQmxvY2tTdGF0ZW1lbnQnOiB7XG4gICAgICBsZXQgc3RtdCA9IFN0YXRlbWVudChZaWVsZCwgQXdhaXQsIFJldHVybikoZ2l2ZW4pO1xuICAgICAgcmV0dXJuIG5ldyBOb2RlKCdMYWJlbGxlZEl0ZW0nLCBnaXZlbiwgMCwgW3N0bXRdLCBwYXJhbXMpO1xuICAgIH1cbiAgICBjYXNlICdGdW5jdGlvbkRlY2xhcmF0aW9uJzoge1xuICAgICAgbGV0IGZ1bmMgPSBGdW5jdGlvbkRlY2xhcmF0aW9uKFlpZWxkLCBBd2FpdCwgZmFsc2UpKGdpdmVuKTtcbiAgICAgIHJldHVybiBuZXcgTm9kZSgnTGFiZWxsZWRJdGVtJywgZ2l2ZW4sIDEsIFtmdW5jXSwgcGFyYW1zKTtcbiAgICB9XG4gICAgZGVmYXVsdDpcbiAgICAgIE5vZGUuVE9ETyhgJHtnaXZlbi50eXBlfSBAIExhYmVsbGVkSXRlbWApO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gTGFiZWxsZWRJdGVtO1xuIiwiY29uc3QgTm9kZSA9IHJlcXVpcmUoJy4uL05vZGUnKTtcblxuLy8gTGFiZWxsZWRTdGF0ZW1lbnRbWWllbGQsIEF3YWl0LCBSZXR1cm5dOiB7XG4vLyAgIExhYmVsSWRlbnRpZmllcls/WWllbGQsID9Bd2FpdF0gYDpgIExhYmVsbGVkSXRlbVs/WWllbGQsID9Bd2FpdCwgP1JldHVybl1cbi8vIH1cblxubGV0IExhYmVsbGVkU3RhdGVtZW50ID0gKFlpZWxkLCBBd2FpdCwgUmV0dXJuKSA9PiAoZ2l2ZW4pID0+IHtcbiAgY29uc3QgTGFiZWxJZGVudGlmaWVyID0gcmVxdWlyZSgnLi9MYWJlbElkZW50aWZpZXInKTtcbiAgY29uc3QgTGFiZWxsZWRJdGVtID0gcmVxdWlyZSgnLi9MYWJlbGxlZEl0ZW0nKTtcbiAgbGV0IHBhcmFtcyA9IFtZaWVsZCwgQXdhaXQsIFJldHVybl07XG4gIFxuICBjb25zdCBsYWJlbCA9IExhYmVsSWRlbnRpZmllcihZaWVsZCwgQXdhaXQpKGdpdmVuLmxhYmVsKTtcbiAgY29uc3QgYm9keSA9IExhYmVsbGVkSXRlbShZaWVsZCwgQXdhaXQsIFJldHVybikoZ2l2ZW4uYm9keSk7XG4gIFxuICByZXR1cm4gbmV3IE5vZGUoJ0xhYmVsbGVkU3RhdGVtZW50JywgZ2l2ZW4sIDAsIFtsYWJlbCwgYm9keV0sIHBhcmFtcyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gTGFiZWxsZWRTdGF0ZW1lbnQ7XG4iLCJjb25zdCBOb2RlID0gcmVxdWlyZSgnLi4vTm9kZScpO1xuXG4vLyBMZWZ0SGFuZFNpZGVFeHByZXNzaW9uW1lpZWxkLCBBd2FpdF0gOlxuLy8gICAgTmV3RXhwcmVzc2lvbls/WWllbGQsID9Bd2FpdF1cbi8vICAgIENhbGxFeHByZXNzaW9uWz9ZaWVsZCwgP0F3YWl0XVxuLy8gICAgT3B0aW9uYWxFeHByZXNzaW9uWz9ZaWVsZCwgP0F3YWl0XVxubGV0IExlZnRIYW5kU2lkZUV4cHJlc3Npb24gPSAoWWllbGQsIEF3YWl0KSA9PiAoZ2l2ZW4pID0+IHtcbiAgY29uc3QgTmV3RXhwcmVzc2lvbiA9IHJlcXVpcmUoJy4vTmV3RXhwcmVzc2lvbicpO1xuICBjb25zdCBDYWxsRXhwcmVzc2lvbiA9IHJlcXVpcmUoJy4vQ2FsbEV4cHJlc3Npb24nKTtcbiAgbGV0IHBhcmFtcyA9IFtZaWVsZCwgQXdhaXRdO1xuICBsZXQgeyB0eXBlIH0gPSBnaXZlbjtcbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSAnTWV0YVByb3BlcnR5JzpcbiAgICBjYXNlICdOZXdFeHByZXNzaW9uJzoge1xuICAgICAgbGV0IGV4cHIgPSBOZXdFeHByZXNzaW9uKFlpZWxkLCBBd2FpdCkoZ2l2ZW4pO1xuICAgICAgcmV0dXJuIG5ldyBOb2RlKCdMZWZ0SGFuZFNpZGVFeHByZXNzaW9uJywgZ2l2ZW4sIDAsIFtleHByXSwgcGFyYW1zKTtcbiAgICB9XG4gICAgY2FzZSAnTWVtYmVyRXhwcmVzc2lvbic6IHtcbiAgICAgIGxldCBjdXIgPSBnaXZlbjtcbiAgICAgIHdoaWxlIChjdXI/LnR5cGUgPT0gJ01lbWJlckV4cHJlc3Npb24nKSB7IGN1ciA9IGN1ci5vYmplY3Q7IH1cbiAgICAgIGxldCBleHByLCBpbmRleDtcbiAgICAgIGlmIChjdXI/LnR5cGUgPT0gJ0NhbGxFeHByZXNzaW9uJykge1xuICAgICAgICBpbmRleCA9IDE7XG4gICAgICAgIGV4cHIgPSBDYWxsRXhwcmVzc2lvbihZaWVsZCwgQXdhaXQpKGdpdmVuKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGluZGV4ID0gMDtcbiAgICAgICAgZXhwciA9IE5ld0V4cHJlc3Npb24oWWllbGQsIEF3YWl0KShnaXZlbik7XG4gICAgICB9XG4gICAgICByZXR1cm4gbmV3IE5vZGUoJ0xlZnRIYW5kU2lkZUV4cHJlc3Npb24nLCBnaXZlbiwgaW5kZXgsIFtleHByXSwgcGFyYW1zKTtcbiAgICB9XG4gICAgY2FzZSAnT2JqZWN0RXhwcmVzc2lvbic6XG4gICAgY2FzZSAnQXJyYXlFeHByZXNzaW9uJzpcbiAgICBjYXNlICdGdW5jdGlvbkV4cHJlc3Npb24nOlxuICAgIGNhc2UgJ0NsYXNzRXhwcmVzc2lvbic6XG4gICAgY2FzZSAnU2VxdWVuY2VFeHByZXNzaW9uJzpcbiAgICBjYXNlICdQYXJlbnRoZXNpemVkRXhwcmVzc2lvbic6XG4gICAgY2FzZSAnVGVtcGxhdGVMaXRlcmFsJzpcbiAgICBjYXNlICdJZGVudGlmaWVyJzpcbiAgICBjYXNlICdUaGlzRXhwcmVzc2lvbic6XG4gICAgY2FzZSAnTGl0ZXJhbCc6IHtcbiAgICAgIGxldCBleHByID0gTmV3RXhwcmVzc2lvbihZaWVsZCwgQXdhaXQpKGdpdmVuKTtcbiAgICAgIHJldHVybiBuZXcgTm9kZSgnTGVmdEhhbmRTaWRlRXhwcmVzc2lvbicsIGdpdmVuLCAwLCBbZXhwcl0sIHBhcmFtcyk7XG4gICAgfVxuICAgIGNhc2UgJ1RhZ2dlZFRlbXBsYXRlRXhwcmVzc2lvbic6IHtcbiAgICAgIGlmIChnaXZlbi50YWcudHlwZSA9PT0gJ0NhbGxFeHByZXNzaW9uJykge1xuICAgICAgICBsZXQgZXhwciA9IENhbGxFeHByZXNzaW9uKFlpZWxkLCBBd2FpdCkoZ2l2ZW4pO1xuICAgICAgICByZXR1cm4gbmV3IE5vZGUoJ0xlZnRIYW5kU2lkZUV4cHJlc3Npb24nLCBnaXZlbiwgMSwgW2V4cHJdLCBwYXJhbXMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGV0IGV4cHIgPSBOZXdFeHByZXNzaW9uKFlpZWxkLCBBd2FpdCkoZ2l2ZW4pO1xuICAgICAgICByZXR1cm4gbmV3IE5vZGUoJ0xlZnRIYW5kU2lkZUV4cHJlc3Npb24nLCBnaXZlbiwgMCwgW2V4cHJdLCBwYXJhbXMpO1xuICAgICAgfVxuICAgIH1cbiAgICBjYXNlICdDYWxsRXhwcmVzc2lvbic6IHtcbiAgICAgIGxldCBleHByID0gQ2FsbEV4cHJlc3Npb24oWWllbGQsIEF3YWl0KShnaXZlbik7XG4gICAgICByZXR1cm4gbmV3IE5vZGUoJ0xlZnRIYW5kU2lkZUV4cHJlc3Npb24nLCBnaXZlbiwgMSwgW2V4cHJdLCBwYXJhbXMpO1xuICAgIH1cbiAgICBjYXNlICdPYmplY3RQYXR0ZXJuJzpcbiAgICBjYXNlICdBcnJheVBhdHRlcm4nOiB7XG4gICAgICAvLyBjaGFuZ2UgYXJyYXkgcGF0dGVybiB0byBsaHMgZXhwcmVzc2lvbiBmb3JtXG4gICAgICBsZXQgZXhwciA9IE5ld0V4cHJlc3Npb24oWWllbGQsIEF3YWl0KShnaXZlbik7XG4gICAgICByZXR1cm4gbmV3IE5vZGUoJ0xlZnRIYW5kU2lkZUV4cHJlc3Npb24nLCBnaXZlbiwgMCwgW2V4cHJdLCBwYXJhbXMpO1xuICAgIH1cbiAgICBkZWZhdWx0OlxuICAgICAgTm9kZS5UT0RPKGAke3R5cGV9IEAgTGVmdEhhbmRTaWRlRXhwcmVzc2lvbmApO1xuICB9XG4gIE5vZGUuVE9ETygnTGVmdEhhbmRTaWRlRXhwcmVzc2lvbicpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IExlZnRIYW5kU2lkZUV4cHJlc3Npb247XG4iLCJjb25zdCBOb2RlID0gcmVxdWlyZSgnLi4vTm9kZScpO1xuXG4vLyBMZXRPckNvbnN0IDpcbi8vICAgIGxldFxuLy8gICAgY29uc3RcbmxldCBMZXRPckNvbnN0ID0gKGdpdmVuKSA9PiB7XG4gIGxldCBpbmRleCA9IDA7XG4gIGlmIChnaXZlbiA9PSAnY29uc3QnKSBpbmRleCA9IDE7XG4gIHJldHVybiBuZXcgTm9kZSgnTGV0T3JDb25zdCcsIHt9LCBpbmRleCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gTGV0T3JDb25zdDtcbiIsImNvbnN0IE5vZGUgPSByZXF1aXJlKCcuLi9Ob2RlJyk7XG5cbi8vIExleGljYWxCaW5kaW5nW0luLCBZaWVsZCwgQXdhaXRdIDpcbi8vICAgIEJpbmRpbmdJZGVudGlmaWVyWz9ZaWVsZCwgP0F3YWl0XSBJbml0aWFsaXplcls/SW4sID9ZaWVsZCwgP0F3YWl0XV9vcHRcbi8vICAgIEJpbmRpbmdQYXR0ZXJuWz9ZaWVsZCwgP0F3YWl0XSBJbml0aWFsaXplcls/SW4sID9ZaWVsZCwgP0F3YWl0XVxubGV0IExleGljYWxCaW5kaW5nID0gKEluLCBZaWVsZCwgQXdhaXQpID0+IChnaXZlbikgPT4ge1xuICBjb25zdCBCaW5kaW5nSWRlbnRpZmllciA9IHJlcXVpcmUoJy4vQmluZGluZ0lkZW50aWZpZXInKTtcbiAgY29uc3QgQmluZGluZ1BhdHRlcm4gPSByZXF1aXJlKCcuL0JpbmRpbmdQYXR0ZXJuJyk7XG4gIGNvbnN0IEluaXRpYWxpemVyID0gcmVxdWlyZSgnLi9Jbml0aWFsaXplcicpO1xuICBjb25zdCBwYXJhbXMgPSBbSW4sIFlpZWxkLCBBd2FpdF07XG5cbiAgaWYgKGdpdmVuLmlkLnR5cGUgPT09ICdJZGVudGlmaWVyJykge1xuICAgIGxldCBiaW5kaW5nSWQgPSBCaW5kaW5nSWRlbnRpZmllcihZaWVsZCwgQXdhaXQpKGdpdmVuLmlkKTtcbiAgICBsZXQgaW5pdCA9IG51bGw7XG4gICAgaWYgKGdpdmVuLmluaXQpIGluaXQgPSBJbml0aWFsaXplcihJbiwgWWllbGQsIEF3YWl0KShnaXZlbi5pbml0KTtcbiAgICByZXR1cm4gbmV3IE5vZGUoJ0xleGljYWxCaW5kaW5nJywgZ2l2ZW4sIDAsIFtiaW5kaW5nSWQsIGluaXRdLCBwYXJhbXMpO1xuICB9IGVsc2UgaWYgKGdpdmVuLmlkLnR5cGUgPT09ICdBcnJheVBhdHRlcm4nIHx8IGdpdmVuLmlkLnR5cGUgPT09ICdPYmplY3RQYXR0ZXJuJykge1xuICAgIGNvbnN0IGJpbmRpbmdQYXR0ZXJuID0gQmluZGluZ1BhdHRlcm4oWWllbGQsIEF3YWl0KShnaXZlbi5pZCk7XG4gICAgY29uc3QgaW5pdCA9IEluaXRpYWxpemVyKEluLCBZaWVsZCwgQXdhaXQpKGdpdmVuLmluaXQpO1xuICAgIHJldHVybiBuZXcgTm9kZSgnTGV4aWNhbEJpbmRpbmcnLCBnaXZlbiwgMSwgW2JpbmRpbmdQYXR0ZXJuLCBpbml0XSwgcGFyYW1zKTtcbiAgfSBlbHNlIHtcbiAgICBOb2RlLlRPRE8oYCR7Z2l2ZW4uaWQudHlwZX0gQCBMZXhpY2FsQmluZGluZ2ApO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gTGV4aWNhbEJpbmRpbmc7XG4iLCJjb25zdCBOb2RlID0gcmVxdWlyZSgnLi4vTm9kZScpO1xuXG4vLyBMZXhpY2FsRGVjbGFyYXRpb25bSW4sIFlpZWxkLCBBd2FpdF0gOlxuLy8gICAgTGV0T3JDb25zdCBCaW5kaW5nTGlzdFs/SW4sID9ZaWVsZCwgP0F3YWl0XSA7XG5sZXQgTGV4aWNhbERlY2xhcmF0aW9uID0gKEluLCBZaWVsZCwgQXdhaXQpID0+IChnaXZlbikgPT4ge1xuICBjb25zdCBCaW5kaW5nTGlzdCA9IHJlcXVpcmUoJy4vQmluZGluZ0xpc3QnKTtcbiAgY29uc3QgTGV0T3JDb25zdCA9IHJlcXVpcmUoJy4vTGV0T3JDb25zdCcpO1xuICBsZXQgcGFyYW1zID0gW0luLCBZaWVsZCwgQXdhaXRdO1xuICBsZXQgeyBraW5kLCBkZWNsYXJhdGlvbnMgfSA9IGdpdmVuO1xuICBsZXQgcHJlID0gTGV0T3JDb25zdChraW5kKTtcbiAgbGV0IGxpc3QgPSBCaW5kaW5nTGlzdChJbiwgWWllbGQsIEF3YWl0KShkZWNsYXJhdGlvbnMpO1xuICByZXR1cm4gbmV3IE5vZGUoJ0xleGljYWxEZWNsYXJhdGlvbicsIGdpdmVuLCAwLCBbcHJlLCBsaXN0XSwgcGFyYW1zKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBMZXhpY2FsRGVjbGFyYXRpb247XG4iLCJjb25zdCBOb2RlID0gcmVxdWlyZSgnLi4vTm9kZScpO1xuY29uc3QgTGV4aWNhbE5vZGUgPSByZXF1aXJlKCcuLi9MZXhpY2FsTm9kZScpO1xuXG4vLyBMaXRlcmFsIDpcbi8vICAgIE51bGxMaXRlcmFsXG4vLyAgICBCb29sZWFuTGl0ZXJhbFxuLy8gICAgTnVtZXJpY0xpdGVyYWxcbi8vICAgIFN0cmluZ0xpdGVyYWxcbmxldCBMaXRlcmFsID0gKGdpdmVuKSA9PiB7XG4gIGxldCB7IHZhbHVlLCByYXcgfSA9IGdpdmVuO1xuICBpZiAodmFsdWUgPT09IG51bGwpIHtcbiAgICBsZXQgbGV4aWNhbCA9IG5ldyBMZXhpY2FsTm9kZSgnTnVsbExpdGVyYWwnLCByYXcpO1xuICAgIHJldHVybiBuZXcgTm9kZSgnTGl0ZXJhbCcsIGdpdmVuLCAwLCBbbGV4aWNhbF0pO1xuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgbGV0IGxleGljYWwgPSBuZXcgTGV4aWNhbE5vZGUoJ0Jvb2xlYW5MaXRlcmFsJywgcmF3KTtcbiAgICByZXR1cm4gbmV3IE5vZGUoJ0xpdGVyYWwnLCBnaXZlbiwgMSwgW2xleGljYWxdKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInIHx8IHR5cGVvZiB2YWx1ZSA9PT0gJ2JpZ2ludCcpIHtcbiAgICBsZXQgbGV4aWNhbCA9IG5ldyBMZXhpY2FsTm9kZSgnTnVtZXJpY0xpdGVyYWwnLCByYXcpO1xuICAgIHJldHVybiBuZXcgTm9kZSgnTGl0ZXJhbCcsIGdpdmVuLCAyLCBbbGV4aWNhbF0pO1xuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICBsZXQgbGV4aWNhbCA9IG5ldyBMZXhpY2FsTm9kZSgnU3RyaW5nTGl0ZXJhbCcsIHJhdyk7XG4gICAgcmV0dXJuIG5ldyBOb2RlKCdMaXRlcmFsJywgZ2l2ZW4sIDMsIFtsZXhpY2FsXSk7XG4gIH0gZWxzZSB7XG4gICAgTm9kZS5UT0RPKGAke3ZhbHVlfSBAIExpdGVyYWxgKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IExpdGVyYWw7XG4iLCJjb25zdCBOb2RlID0gcmVxdWlyZSgnLi4vTm9kZScpO1xuY29uc3QgTGV4aWNhbE5vZGUgPSByZXF1aXJlKCcuLi9MZXhpY2FsTm9kZScpO1xuXG4vLyBMaXRlcmFsUHJvcGVydHlOYW1lIDpcbi8vICAgIElkZW50aWZpZXJOYW1lXG4vLyAgICBTdHJpbmdMaXRlcmFsXG4vLyAgICBOdW1lcmljTGl0ZXJhbFxubGV0IExpdGVyYWxQcm9wZXJ0eU5hbWUgPSAoZ2l2ZW4pID0+IHtcbiAgbGV0IHsgdHlwZSwgbmFtZSwgdmFsdWUsIHJhdyB9ID0gZ2l2ZW47XG4gIGlmICh0eXBlID09ICdJZGVudGlmaWVyJykge1xuICAgIGxldCBsZXhpY2FsID0gbmV3IExleGljYWxOb2RlKCdJZGVudGlmaWVyTmFtZScsIG5hbWUpO1xuICAgIHJldHVybiBuZXcgTm9kZSgnTGl0ZXJhbFByb3BlcnR5TmFtZScsIGdpdmVuLCAwLCBbbGV4aWNhbF0pO1xuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICBsZXQgbGV4aWNhbCA9IG5ldyBMZXhpY2FsTm9kZSgnU3RyaW5nTGl0ZXJhbCcsIHJhdyk7XG4gICAgcmV0dXJuIG5ldyBOb2RlKCdMaXRlcmFsUHJvcGVydHlOYW1lJywgZ2l2ZW4sIDEsIFtsZXhpY2FsXSk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xuICAgIGxldCBsZXhpY2FsID0gbmV3IExleGljYWxOb2RlKCdOdW1lcmljTGl0ZXJhbCcsIHJhdyk7XG4gICAgcmV0dXJuIG5ldyBOb2RlKCdMaXRlcmFsUHJvcGVydHlOYW1lJywgZ2l2ZW4sIDIsIFtsZXhpY2FsXSk7XG4gIH0gZWxzZSB7XG4gICAgTm9kZS5UT0RPKGAke3ZhbHVlfSBAIExpdGVyYWxgKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IExpdGVyYWxQcm9wZXJ0eU5hbWU7XG4iLCJjb25zdCBOb2RlID0gcmVxdWlyZSgnLi4vTm9kZScpO1xuXG4vLyBMb2dpY2FsQU5ERXhwcmVzc2lvbltJbiwgWWllbGQsIEF3YWl0XSA6XG4vLyAgICBCaXR3aXNlT1JFeHByZXNzaW9uWz9JbiwgP1lpZWxkLCA/QXdhaXRdXG4vLyAgICBMb2dpY2FsQU5ERXhwcmVzc2lvbls/SW4sID9ZaWVsZCwgP0F3YWl0XSAmJiBCaXR3aXNlT1JFeHByZXNzaW9uWz9JbiwgP1lpZWxkLCA/QXdhaXRdXG5sZXQgTG9naWNhbEFOREV4cHJlc3Npb24gPSAoSW4sIFlpZWxkLCBBd2FpdCkgPT4gKGdpdmVuKSA9PiB7XG4gIGxldCBCaXR3aXNlT1JFeHByZXNzaW9uID0gcmVxdWlyZSgnLi9CaXR3aXNlT1JFeHByZXNzaW9uJyk7XG5cbiAgbGV0IHBhcmFtcyA9IFtJbiwgWWllbGQsIEF3YWl0XTtcbiAgbGV0IHsgdHlwZSB9ID0gZ2l2ZW47XG4gIHN3aXRjaCAodHlwZSkge1xuICAgIGNhc2UgJ0F3YWl0RXhwcmVzc2lvbic6XG4gICAgY2FzZSAnVW5hcnlFeHByZXNzaW9uJzpcbiAgICBjYXNlICdCaW5hcnlFeHByZXNzaW9uJzpcbiAgICBjYXNlICdVcGRhdGVFeHByZXNzaW9uJzpcbiAgICBjYXNlICdDYWxsRXhwcmVzc2lvbic6XG4gICAgY2FzZSAnTmV3RXhwcmVzc2lvbic6XG4gICAgY2FzZSAnTWVtYmVyRXhwcmVzc2lvbic6XG4gICAgY2FzZSAnT2JqZWN0RXhwcmVzc2lvbic6XG4gICAgY2FzZSAnQXJyYXlFeHByZXNzaW9uJzpcbiAgICBjYXNlICdGdW5jdGlvbkV4cHJlc3Npb24nOlxuICAgIGNhc2UgJ0NsYXNzRXhwcmVzc2lvbic6XG4gICAgY2FzZSAnU2VxdWVuY2VFeHByZXNzaW9uJzpcbiAgICBjYXNlICdQYXJlbnRoZXNpemVkRXhwcmVzc2lvbic6XG4gICAgY2FzZSAnVGVtcGxhdGVMaXRlcmFsJzpcbiAgICBjYXNlICdUYWdnZWRUZW1wbGF0ZUV4cHJlc3Npb24nOlxuICAgIGNhc2UgJ0lkZW50aWZpZXInOlxuICAgIGNhc2UgJ1RoaXNFeHByZXNzaW9uJzpcbiAgICBjYXNlICdBcnJheVBhdHRlcm4nOlxuICAgIGNhc2UgJ09iamVjdFBhdHRlcm4nOlxuICAgIGNhc2UgJ01ldGFQcm9wZXJ0eSc6XG4gICAgY2FzZSAnTGl0ZXJhbCc6IHtcbiAgICAgIGxldCBleHByID0gQml0d2lzZU9SRXhwcmVzc2lvbihJbiwgWWllbGQsIEF3YWl0KShnaXZlbik7XG4gICAgICByZXR1cm4gbmV3IE5vZGUoJ0xvZ2ljYWxBTkRFeHByZXNzaW9uJywgZ2l2ZW4sIDAsIFtleHByXSwgcGFyYW1zKTtcbiAgICB9XG4gICAgY2FzZSAnTG9naWNhbEV4cHJlc3Npb24nOiB7XG4gICAgICBsZXQgeyBvcGVyYXRvciwgbGVmdCwgcmlnaHQgfSA9IGdpdmVuO1xuICAgICAgaWYgKG9wZXJhdG9yID09ICcmJicpIHtcbiAgICAgICAgbGV0IGwgPSBMb2dpY2FsQU5ERXhwcmVzc2lvbihJbiwgWWllbGQsIEF3YWl0KShsZWZ0KTtcbiAgICAgICAgbGV0IHIgPSBCaXR3aXNlT1JFeHByZXNzaW9uKEluLCBZaWVsZCwgQXdhaXQpKHJpZ2h0KTtcbiAgICAgICAgcmV0dXJuIG5ldyBOb2RlKCdMb2dpY2FsT1JFeHByZXNzaW9uJywgZ2l2ZW4sIDEsIFtsLCByXSwgcGFyYW1zKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxldCBleHByID0gQml0d2lzZU9SRXhwcmVzc2lvbihJbiwgWWllbGQsIEF3YWl0KShnaXZlbik7XG4gICAgICAgIHJldHVybiBuZXcgTm9kZSgnTG9naWNhbEFOREV4cHJlc3Npb24nLCBnaXZlbiwgMCwgW2V4cHJdLCBwYXJhbXMpO1xuICAgICAgfVxuICAgIH1cbiAgICBkZWZhdWx0OlxuICAgICAgTm9kZS5UT0RPKGAke3R5cGV9IEAgTG9naWNhbEFOREV4cHJlc3Npb25gKTtcbiAgfVxuICBOb2RlLlRPRE8oJ0xvZ2ljYWxBTkRFeHByZXNzaW9uJyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gTG9naWNhbEFOREV4cHJlc3Npb247XG4iLCJjb25zdCBOb2RlID0gcmVxdWlyZSgnLi4vTm9kZScpO1xuXG4vLyBMb2dpY2FsT1JFeHByZXNzaW9uW0luLCBZaWVsZCwgQXdhaXRdIDpcbi8vICAgIExvZ2ljYWxBTkRFeHByZXNzaW9uWz9JbiwgP1lpZWxkLCA/QXdhaXRdXG4vLyAgICBMb2dpY2FsT1JFeHByZXNzaW9uWz9JbiwgP1lpZWxkLCA/QXdhaXRdIHx8IExvZ2ljYWxBTkRFeHByZXNzaW9uWz9JbiwgP1lpZWxkLCA/QXdhaXRdXG5sZXQgTG9naWNhbE9SRXhwcmVzc2lvbiA9IChJbiwgWWllbGQsIEF3YWl0KSA9PiAoZ2l2ZW4pID0+IHtcbiAgbGV0IExvZ2ljYWxBTkRFeHByZXNzaW9uID0gcmVxdWlyZSgnLi9Mb2dpY2FsQU5ERXhwcmVzc2lvbicpO1xuXG4gIGxldCBwYXJhbXMgPSBbSW4sIFlpZWxkLCBBd2FpdF07XG4gIGxldCB7IHR5cGUgfSA9IGdpdmVuO1xuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlICdBd2FpdEV4cHJlc3Npb24nOlxuICAgIGNhc2UgJ1VuYXJ5RXhwcmVzc2lvbic6XG4gICAgY2FzZSAnQmluYXJ5RXhwcmVzc2lvbic6XG4gICAgY2FzZSAnVXBkYXRlRXhwcmVzc2lvbic6XG4gICAgY2FzZSAnQ2FsbEV4cHJlc3Npb24nOlxuICAgIGNhc2UgJ05ld0V4cHJlc3Npb24nOlxuICAgIGNhc2UgJ01lbWJlckV4cHJlc3Npb24nOlxuICAgIGNhc2UgJ09iamVjdEV4cHJlc3Npb24nOlxuICAgIGNhc2UgJ0FycmF5RXhwcmVzc2lvbic6XG4gICAgY2FzZSAnRnVuY3Rpb25FeHByZXNzaW9uJzpcbiAgICBjYXNlICdDbGFzc0V4cHJlc3Npb24nOlxuICAgIGNhc2UgJ1NlcXVlbmNlRXhwcmVzc2lvbic6XG4gICAgY2FzZSAnUGFyZW50aGVzaXplZEV4cHJlc3Npb24nOlxuICAgIGNhc2UgJ1RlbXBsYXRlTGl0ZXJhbCc6XG4gICAgY2FzZSAnVGFnZ2VkVGVtcGxhdGVFeHByZXNzaW9uJzpcbiAgICBjYXNlICdJZGVudGlmaWVyJzpcbiAgICBjYXNlICdUaGlzRXhwcmVzc2lvbic6XG4gICAgY2FzZSAnQXJyYXlQYXR0ZXJuJzpcbiAgICBjYXNlICdPYmplY3RQYXR0ZXJuJzpcbiAgICBjYXNlICdNZXRhUHJvcGVydHknOlxuICAgIGNhc2UgJ0xpdGVyYWwnOiB7XG4gICAgICBsZXQgZXhwciA9IExvZ2ljYWxBTkRFeHByZXNzaW9uKEluLCBZaWVsZCwgQXdhaXQpKGdpdmVuKTtcbiAgICAgIHJldHVybiBuZXcgTm9kZSgnTG9naWNhbE9SRXhwcmVzc2lvbicsIGdpdmVuLCAwLCBbZXhwcl0sIHBhcmFtcyk7XG4gICAgfVxuICAgIGNhc2UgJ0xvZ2ljYWxFeHByZXNzaW9uJzoge1xuICAgICAgbGV0IHsgb3BlcmF0b3IsIGxlZnQsIHJpZ2h0IH0gPSBnaXZlbjtcbiAgICAgIGlmIChvcGVyYXRvciA9PSAnfHwnKSB7XG4gICAgICAgIGxldCBsID0gTG9naWNhbE9SRXhwcmVzc2lvbihJbiwgWWllbGQsIEF3YWl0KShsZWZ0KTtcbiAgICAgICAgbGV0IHIgPSBMb2dpY2FsQU5ERXhwcmVzc2lvbihJbiwgWWllbGQsIEF3YWl0KShyaWdodCk7XG4gICAgICAgIHJldHVybiBuZXcgTm9kZSgnTG9naWNhbE9SRXhwcmVzc2lvbicsIGdpdmVuLCAxLCBbbCwgcl0sIHBhcmFtcyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsZXQgZXhwciA9IExvZ2ljYWxBTkRFeHByZXNzaW9uKEluLCBZaWVsZCwgQXdhaXQpKGdpdmVuKTtcbiAgICAgICAgcmV0dXJuIG5ldyBOb2RlKCdMb2dpY2FsT1JFeHByZXNzaW9uJywgZ2l2ZW4sIDAsIFtleHByXSwgcGFyYW1zKTtcbiAgICAgIH1cbiAgICB9XG4gICAgZGVmYXVsdDpcbiAgICAgIE5vZGUuVE9ETyhgJHt0eXBlfSBAIExvZ2ljYWxPUkV4cHJlc3Npb25gKTtcbiAgfVxuICBOb2RlLlRPRE8oJ0xvZ2ljYWxPUkV4cHJlc3Npb24nKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBMb2dpY2FsT1JFeHByZXNzaW9uO1xuIiwiY29uc3QgTm9kZSA9IHJlcXVpcmUoJy4uL05vZGUnKTtcbmNvbnN0IExleGljYWxOb2RlID0gcmVxdWlyZSgnLi4vTGV4aWNhbE5vZGUnKTtcblxuLy8gTWVtYmVyRXhwcmVzc2lvbltZaWVsZCwgQXdhaXRdIDpcbi8vICAgIFByaW1hcnlFeHByZXNzaW9uWz9ZaWVsZCwgP0F3YWl0XVxuLy8gICAgTWVtYmVyRXhwcmVzc2lvbls/WWllbGQsID9Bd2FpdF0gWyBFeHByZXNzaW9uWytJbiwgP1lpZWxkLCA/QXdhaXRdIF1cbi8vICAgIE1lbWJlckV4cHJlc3Npb25bP1lpZWxkLCA/QXdhaXRdIC4gSWRlbnRpZmllck5hbWVcbi8vICAgIE1lbWJlckV4cHJlc3Npb25bP1lpZWxkLCA/QXdhaXRdIFRlbXBsYXRlTGl0ZXJhbFs/WWllbGQsID9Bd2FpdCwgK1RhZ2dlZF1cbi8vICAgIFN1cGVyUHJvcGVydHlbP1lpZWxkLCA/QXdhaXRdXG4vLyAgICBNZXRhUHJvcGVydHlcbi8vICAgIG5ldyBNZW1iZXJFeHByZXNzaW9uWz9ZaWVsZCwgP0F3YWl0XSBBcmd1bWVudHNbP1lpZWxkLCA/QXdhaXRdXG5sZXQgTWVtYmVyRXhwcmVzc2lvbiA9IChZaWVsZCwgQXdhaXQpID0+IChnaXZlbikgPT4ge1xuICBjb25zdCBQcmltYXJ5RXhwcmVzc2lvbiA9IHJlcXVpcmUoJy4vUHJpbWFyeUV4cHJlc3Npb24nKTtcbiAgY29uc3QgQ2FsbEV4cHJlc3Npb24gPSByZXF1aXJlKCcuL0NhbGxFeHByZXNzaW9uJyk7XG4gIGNvbnN0IEV4cHJlc3Npb24gPSByZXF1aXJlKCcuL0V4cHJlc3Npb24nKTtcbiAgY29uc3QgU3VwZXJQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vU3VwZXJQcm9wZXJ0eScpO1xuICBjb25zdCBNZXRhUHJvcGVydHkgPSByZXF1aXJlKCcuL01ldGFQcm9wZXJ0eScpO1xuICBjb25zdCBBcmd1bWVudHMgPSByZXF1aXJlKCcuL0FyZ3VtZW50cycpO1xuICBjb25zdCBUZW1wbGF0ZUxpdGVyYWwgPSByZXF1aXJlKCcuL1RlbXBsYXRlTGl0ZXJhbCcpO1xuICBsZXQgcGFyYW1zID0gW1lpZWxkLCBBd2FpdF07XG4gIGxldCB7IHR5cGUgfSA9IGdpdmVuO1xuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlICdPYmplY3RFeHByZXNzaW9uJzpcbiAgICBjYXNlICdBcnJheUV4cHJlc3Npb24nOlxuICAgIGNhc2UgJ0Z1bmN0aW9uRXhwcmVzc2lvbic6XG4gICAgY2FzZSAnQ2xhc3NFeHByZXNzaW9uJzpcbiAgICBjYXNlICdTZXF1ZW5jZUV4cHJlc3Npb24nOlxuICAgIGNhc2UgJ1BhcmVudGhlc2l6ZWRFeHByZXNzaW9uJzpcbiAgICBjYXNlICdUZW1wbGF0ZUxpdGVyYWwnOlxuICAgIGNhc2UgJ0lkZW50aWZpZXInOlxuICAgIGNhc2UgJ1RoaXNFeHByZXNzaW9uJzpcbiAgICBjYXNlICdPYmplY3RQYXR0ZXJuJzpcbiAgICBjYXNlICdBcnJheVBhdHRlcm4nOlxuICAgIGNhc2UgJ0xpdGVyYWwnOiB7XG4gICAgICBsZXQgZXhwciA9IFByaW1hcnlFeHByZXNzaW9uKFlpZWxkLCBBd2FpdCkoZ2l2ZW4pO1xuICAgICAgcmV0dXJuIG5ldyBOb2RlKCdNZW1iZXJFeHByZXNzaW9uJywgZ2l2ZW4sIDAsIFtleHByXSwgcGFyYW1zKTtcbiAgICB9XG4gICAgY2FzZSAnVGFnZ2VkVGVtcGxhdGVFeHByZXNzaW9uJzoge1xuICAgICAgbGV0IG1lbWJlciA9IE1lbWJlckV4cHJlc3Npb24oWWllbGQsIEF3YWl0KShnaXZlbi50YWcpO1xuICAgICAgbGV0IHRlbXAgPSBUZW1wbGF0ZUxpdGVyYWwoWWllbGQsIEF3YWl0LCB0cnVlKShnaXZlbi5xdWFzaSk7XG4gICAgICByZXR1cm4gbmV3IE5vZGUoJ01lbWJlckV4cHJlc3Npb24nLCBnaXZlbiwgMywgW21lbWJlciwgdGVtcF0sIHBhcmFtcyk7XG4gICAgfVxuICAgIGNhc2UgJ05ld0V4cHJlc3Npb24nOiB7XG4gICAgICBsZXQgbWVtYmVyID0gTWVtYmVyRXhwcmVzc2lvbihZaWVsZCwgQXdhaXQpKGdpdmVuLmNhbGxlZSk7XG4gICAgICBsZXQgYXJncyA9IEFyZ3VtZW50cyhZaWVsZCwgQXdhaXQpKGdpdmVuLmFyZ3VtZW50cyk7XG4gICAgICByZXR1cm4gbmV3IE5vZGUoJ01lbWJlckV4cHJlc3Npb24nLCBnaXZlbiwgNiwgW21lbWJlciwgYXJnc10sIHBhcmFtcyk7XG4gICAgfVxuICAgIGNhc2UgJ01ldGFQcm9wZXJ0eSc6IHtcbiAgICAgIGxldCBtZXRhID0gTWV0YVByb3BlcnR5KGdpdmVuKTtcbiAgICAgIHJldHVybiBuZXcgTm9kZSgnTWVtYmVyRXhwcmVzc2lvbicsIGdpdmVuLCA1LCBbbWV0YV0sIHBhcmFtcyk7XG4gICAgfVxuICAgIGNhc2UgJ01lbWJlckV4cHJlc3Npb24nOiB7XG4gICAgICBsZXQgeyBvYmplY3QsIG1ldGEsIHByb3BlcnR5LCBjb21wdXRlZCB9ID0gZ2l2ZW47XG4gICAgICBpZiAobWV0YSkge1xuICAgICAgICBsZXQgbWV0YVByb3AgPSBNZXRhUHJvcGVydHkoWWllbGQsIEF3YWl0KShnaXZlbik7XG4gICAgICAgIHJldHVybiBuZXcgTm9kZSgnTWVtYmVyRXhwcmVzc2lvbicsIGdpdmVuLCA1LCBbbWV0YVByb3BdLCBwYXJhbXMpO1xuICAgICAgfSBlbHNlIGlmIChvYmplY3QgJiYgb2JqZWN0LnR5cGUgPT0gJ1N1cGVyJykge1xuICAgICAgICBsZXQgc3VwZXJQcm9wID0gU3VwZXJQcm9wZXJ0eShZaWVsZCwgQXdhaXQpKGdpdmVuKTtcbiAgICAgICAgcmV0dXJuIG5ldyBOb2RlKCdNZW1iZXJFeHByZXNzaW9uJywgZ2l2ZW4sIDQsIFtzdXBlclByb3BdLCBwYXJhbXMpO1xuICAgICAgfSBlbHNlIGlmIChvYmplY3QgJiYgb2JqZWN0LnR5cGUgPT09ICdDYWxsRXhwcmVzc2lvbicpIHtcbiAgICAgICAgaWYgKGNvbXB1dGVkKVxuICAgICAgICAgIE5vZGUuVE9ETygnY29tcHV0ZWQgQCBNZW1iZXJFeHByZXNzaW9uJyk7XG5cbiAgICAgICAgLy8gZS5nLiBnLm5leHQoKS52YWx1ZVxuICAgICAgICByZXR1cm4gQ2FsbEV4cHJlc3Npb24oWWllbGQsIEF3YWl0KShnaXZlbik7XG4gICAgICB9IGVsc2UgaWYgKG9iamVjdCAmJiBjb21wdXRlZCkge1xuICAgICAgICBsZXQgbWVtYmVyID0gTWVtYmVyRXhwcmVzc2lvbihZaWVsZCwgQXdhaXQpKG9iamVjdCk7XG4gICAgICAgIGxldCBleHByID0gRXhwcmVzc2lvbih0cnVlLCBZaWVsZCwgQXdhaXQpKHByb3BlcnR5KTtcbiAgICAgICAgcmV0dXJuIG5ldyBOb2RlKCdNZW1iZXJFeHByZXNzaW9uJywgZ2l2ZW4sIDEsIFttZW1iZXIsIGV4cHJdLCBwYXJhbXMpO1xuICAgICAgfSBlbHNlIGlmIChvYmplY3QgJiYgIWNvbXB1dGVkKSB7XG4gICAgICAgIGxldCBtZW1iZXIgPSBNZW1iZXJFeHByZXNzaW9uKFlpZWxkLCBBd2FpdCkob2JqZWN0KTtcbiAgICAgICAgbGV0IG5hbWUgPSBuZXcgTGV4aWNhbE5vZGUoJ0lkZW50aWZpZXJOYW1lJywgcHJvcGVydHkubmFtZSk7XG4gICAgICAgIHJldHVybiBuZXcgTm9kZSgnTWVtYmVyRXhwcmVzc2lvbicsIGdpdmVuLCAyLCBbbWVtYmVyLCBuYW1lXSwgcGFyYW1zKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIE5vZGUuVE9ETygnTWVtYmVyRXhwcmVzc2lvbicpO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGRlZmF1bHQ6XG4gICAgICBOb2RlLlRPRE8oYCR7dHlwZX0gQCBNZW1iZXJFeHByZXNzaW9uYCk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBNZW1iZXJFeHByZXNzaW9uO1xuIiwiY29uc3QgTm9kZSA9IHJlcXVpcmUoJy4uL05vZGUnKTtcblxuLy8gTWV0YVByb3BlcnR5OiB7XG4vLyAgIE5ld1RhcmdldCB8XG4vLyAgIEltcG9ydE1ldGFcbi8vIH1cblxubGV0IE1ldGFQcm9wZXJ0eSA9IChnaXZlbikgPT4ge1xuICBjb25zdCBOZXdUYXJnZXQgPSByZXF1aXJlKCcuL05ld1RhcmdldCcpO1xuICBcbiAgc3dpdGNoIChnaXZlbi5tZXRhLm5hbWUpIHtcbiAgICBjYXNlICduZXcnOlxuICAgICAgcmV0dXJuIG5ldyBOb2RlKCdNZXRhUHJvcGVydHknLCBnaXZlbiwgMCwgW05ld1RhcmdldChnaXZlbildLCBbXSk7XG4gICAgZGVmYXVsdDpcbiAgICAgIE5vZGUuVE9ETyhgJHtnaXZlbi5tZXRhLm5hbWV9IEAgTWV0YVByb3BlcnR5YCk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBNZXRhUHJvcGVydHk7XG4iLCJjb25zdCBOb2RlID0gcmVxdWlyZSgnLi4vTm9kZScpO1xuY29uc3QgeyBjaGVja0NvbW1hIH0gPSByZXF1aXJlKCcuLi9HbG9iYWwnKTtcblxuLy8gTWV0aG9kRGVmaW5pdGlvbltZaWVsZCwgQXdhaXRdIDpcbi8vICAgIFByb3BlcnR5TmFtZVs/WWllbGQsID9Bd2FpdF0gKCBVbmlxdWVGb3JtYWxQYXJhbWV0ZXJzW35ZaWVsZCwgfkF3YWl0XSApIHsgRnVuY3Rpb25Cb2R5W35ZaWVsZCwgfkF3YWl0XSB9XG4vLyAgICBHZW5lcmF0b3JNZXRob2RbP1lpZWxkLCA/QXdhaXRdXG4vLyAgICBBc3luY01ldGhvZFs/WWllbGQsID9Bd2FpdF1cbi8vICAgIEFzeW5jR2VuZXJhdG9yTWV0aG9kWz9ZaWVsZCwgP0F3YWl0XVxuLy8gICAgZ2V0IFByb3BlcnR5TmFtZVs/WWllbGQsID9Bd2FpdF0gKCApIHsgRnVuY3Rpb25Cb2R5W35ZaWVsZCwgfkF3YWl0XSB9XG4vLyAgICBzZXQgUHJvcGVydHlOYW1lWz9ZaWVsZCwgP0F3YWl0XSAoIFByb3BlcnR5U2V0UGFyYW1ldGVyTGlzdCApIHsgRnVuY3Rpb25Cb2R5W35ZaWVsZCwgfkF3YWl0XSB9XG5sZXQgTWV0aG9kRGVmaW5pdGlvbiA9IChZaWVsZCwgQXdhaXQpID0+IChnaXZlbikgPT4ge1xuICBjb25zdCBQcm9wZXJ0eU5hbWUgPSByZXF1aXJlKCcuL1Byb3BlcnR5TmFtZScpO1xuICBjb25zdCBVbmlxdWVGb3JtYWxQYXJhbWV0ZXJzID0gcmVxdWlyZSgnLi9VbmlxdWVGb3JtYWxQYXJhbWV0ZXJzJyk7XG4gIGNvbnN0IEdlbmVyYXRvck1ldGhvZCA9IHJlcXVpcmUoJy4vR2VuZXJhdG9yTWV0aG9kJyk7XG4gIGNvbnN0IEFzeW5jTWV0aG9kID0gcmVxdWlyZSgnLi9Bc3luY01ldGhvZCcpO1xuICBjb25zdCBBc3luY0dlbmVyYXRvck1ldGhvZCA9IHJlcXVpcmUoJy4vQXN5bmNHZW5lcmF0b3JNZXRob2QnKTtcbiAgY29uc3QgRnVuY3Rpb25Cb2R5ID0gcmVxdWlyZSgnLi9GdW5jdGlvbkJvZHknKTtcbiAgY29uc3QgUHJvcGVydHlTZXRQYXJhbWV0ZXJMaXN0ID0gcmVxdWlyZSgnLi9Qcm9wZXJ0eVNldFBhcmFtZXRlckxpc3QnKTtcblxuICBsZXQgcGFyYW1zID0gW1lpZWxkLCBBd2FpdF07XG4gIGxldCB7IGtpbmQsIGtleSwgdmFsdWUsIGdlbmVyYXRvciwgYXN5bmMsIGNvbXB1dGVkIH0gPSBnaXZlbjtcbiAgc3dpdGNoIChraW5kKSB7XG4gICAgY2FzZSAnY29uc3RydWN0b3InOlxuICAgIGNhc2UgJ2luaXQnOlxuICAgIGNhc2UgJ21ldGhvZCc6IHtcbiAgICAgIGFzeW5jID0gYXN5bmMgfHwgdmFsdWUuYXN5bmM7XG4gICAgICBnZW5lcmF0b3IgPSBnZW5lcmF0b3IgfHwgdmFsdWUuZ2VuZXJhdG9yO1xuICAgICAgaWYgKCFhc3luYyAmJiAhZ2VuZXJhdG9yKSB7XG4gICAgICAgIGxldCB4ID0gUHJvcGVydHlOYW1lKFlpZWxkLCBBd2FpdCkoZ2l2ZW4pO1xuICAgICAgICBsZXQgaGFzQ29tbWEgPSBjaGVja0NvbW1hKGdpdmVuLmtleS5lbmQsIGdpdmVuLnZhbHVlLmJvZHkuc3RhcnQsICcpJyk7XG4gICAgICAgIGxldCBwcyA9IFVuaXF1ZUZvcm1hbFBhcmFtZXRlcnMoZmFsc2UsIGZhbHNlKSh2YWx1ZS5wYXJhbXMsIGhhc0NvbW1hKTtcbiAgICAgICAgbGV0IGIgPSBGdW5jdGlvbkJvZHkoZmFsc2UsIGZhbHNlKSh2YWx1ZS5ib2R5KTtcbiAgICAgICAgcmV0dXJuIG5ldyBOb2RlKCdNZXRob2REZWZpbml0aW9uJywgZ2l2ZW4sIDAsIFt4LCBwcywgYl0sIHBhcmFtcyk7XG4gICAgICB9IGVsc2UgaWYgKCFhc3luYyAmJiBnZW5lcmF0b3IpIHtcbiAgICAgICAgbGV0IG1ldGhvZCA9IEdlbmVyYXRvck1ldGhvZChZaWVsZCwgQXdhaXQpKGdpdmVuKTtcbiAgICAgICAgcmV0dXJuIG5ldyBOb2RlKCdNZXRob2REZWZpbml0aW9uJywgZ2l2ZW4sIDEsIFttZXRob2RdLCBwYXJhbXMpO1xuICAgICAgfSBlbHNlIGlmIChhc3luYyAmJiAhZ2VuZXJhdG9yKSB7XG4gICAgICAgIGxldCBtZXRob2QgPSBBc3luY01ldGhvZChZaWVsZCwgQXdhaXQpKGdpdmVuKTtcbiAgICAgICAgcmV0dXJuIG5ldyBOb2RlKCdNZXRob2REZWZpbml0aW9uJywgZ2l2ZW4sIDIsIFttZXRob2RdLCBwYXJhbXMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGV0IG1ldGhvZCA9IEFzeW5jR2VuZXJhdG9yTWV0aG9kKFlpZWxkLCBBd2FpdCkoZ2l2ZW4pO1xuICAgICAgICByZXR1cm4gbmV3IE5vZGUoJ01ldGhvZERlZmluaXRpb24nLCBnaXZlbiwgMywgW21ldGhvZF0sIHBhcmFtcyk7XG4gICAgICB9XG4gICAgfVxuICAgIGNhc2UgJ2dldCc6IHtcbiAgICAgIGxldCBuYW1lID0gUHJvcGVydHlOYW1lKFlpZWxkLCBBd2FpdCkoe2tleSwgbG9jOiBrZXkubG9jLCBjb21wdXRlZH0pO1xuICAgICAgbGV0IGJvZHkgPSBGdW5jdGlvbkJvZHkoZmFsc2UsIGZhbHNlKSh2YWx1ZS5ib2R5KTtcbiAgICAgIHJldHVybiBuZXcgTm9kZSgnTWV0aG9kRGVmaW5pdGlvbicsIGdpdmVuLCA0LCBbbmFtZSwgYm9keV0sIHBhcmFtcyk7XG4gICAgfVxuICAgIGNhc2UgJ3NldCc6IHtcbiAgICAgIGxldCBuYW1lID0gUHJvcGVydHlOYW1lKFlpZWxkLCBBd2FpdCkoe2tleSwgbG9jOiBrZXkubG9jLCBjb21wdXRlZH0pO1xuICAgICAgbGV0IHBzID0gUHJvcGVydHlTZXRQYXJhbWV0ZXJMaXN0KCkodmFsdWUucGFyYW1zWzBdKTtcbiAgICAgIGxldCBib2R5ID0gRnVuY3Rpb25Cb2R5KGZhbHNlLCBmYWxzZSkodmFsdWUuYm9keSk7XG4gICAgICByZXR1cm4gbmV3IE5vZGUoJ01ldGhvZERlZmluaXRpb24nLCBnaXZlbiwgNSwgW25hbWUsIHBzLCBib2R5XSwgcGFyYW1zKTtcbiAgICB9XG4gICAgZGVmYXVsdDpcbiAgICAgIE5vZGUuVE9ETyhgJHtraW5kfSBAIE1ldGhvZERlZmluaXRpb25gKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IE1ldGhvZERlZmluaXRpb247XG4iLCJjb25zdCBOb2RlID0gcmVxdWlyZSgnLi4vTm9kZScpO1xuXG4vLyBNdWx0aXBsaWNhdGl2ZUV4cHJlc3Npb25bWWllbGQsIEF3YWl0XSA6XG4vLyAgICBFeHBvbmVudGlhdGlvbkV4cHJlc3Npb25bP1lpZWxkLCA/QXdhaXRdXG4vLyAgICBNdWx0aXBsaWNhdGl2ZUV4cHJlc3Npb25bP1lpZWxkLCA/QXdhaXRdIE11bHRpcGxpY2F0aXZlT3BlcmF0b3IgRXhwb25lbnRpYXRpb25FeHByZXNzaW9uWz9ZaWVsZCwgP0F3YWl0XVxubGV0IE11bHRpcGxpY2F0aXZlRXhwcmVzc2lvbiA9IChZaWVsZCwgQXdhaXQpID0+IChnaXZlbikgPT4ge1xuICBsZXQgRXhwb25lbnRpYXRpb25FeHByZXNzaW9uID0gcmVxdWlyZSgnLi9FeHBvbmVudGlhdGlvbkV4cHJlc3Npb24nKTtcblxuICBsZXQgcGFyYW1zID0gW1lpZWxkLCBBd2FpdF07XG4gIGxldCB7IHR5cGUgfSA9IGdpdmVuO1xuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlICdBd2FpdEV4cHJlc3Npb24nOlxuICAgIGNhc2UgJ1VuYXJ5RXhwcmVzc2lvbic6XG4gICAgY2FzZSAnVXBkYXRlRXhwcmVzc2lvbic6XG4gICAgY2FzZSAnQ2FsbEV4cHJlc3Npb24nOlxuICAgIGNhc2UgJ05ld0V4cHJlc3Npb24nOlxuICAgIGNhc2UgJ01lbWJlckV4cHJlc3Npb24nOlxuICAgIGNhc2UgJ09iamVjdEV4cHJlc3Npb24nOlxuICAgIGNhc2UgJ0FycmF5RXhwcmVzc2lvbic6XG4gICAgY2FzZSAnRnVuY3Rpb25FeHByZXNzaW9uJzpcbiAgICBjYXNlICdDbGFzc0V4cHJlc3Npb24nOlxuICAgIGNhc2UgJ1NlcXVlbmNlRXhwcmVzc2lvbic6XG4gICAgY2FzZSAnUGFyZW50aGVzaXplZEV4cHJlc3Npb24nOlxuICAgIGNhc2UgJ1RlbXBsYXRlTGl0ZXJhbCc6XG4gICAgY2FzZSAnVGFnZ2VkVGVtcGxhdGVFeHByZXNzaW9uJzpcbiAgICBjYXNlICdJZGVudGlmaWVyJzpcbiAgICBjYXNlICdUaGlzRXhwcmVzc2lvbic6XG4gICAgY2FzZSAnQXJyYXlQYXR0ZXJuJzpcbiAgICBjYXNlICdPYmplY3RQYXR0ZXJuJzpcbiAgICBjYXNlICdNZXRhUHJvcGVydHknOlxuICAgIGNhc2UgJ0xpdGVyYWwnOiB7XG4gICAgICBsZXQgZXhwciA9IEV4cG9uZW50aWF0aW9uRXhwcmVzc2lvbihZaWVsZCwgQXdhaXQpKGdpdmVuKTtcbiAgICAgIHJldHVybiBuZXcgTm9kZSgnTXVsdGlwbGljYXRpdmVFeHByZXNzaW9uJywgZ2l2ZW4sIDAsIFtleHByXSwgcGFyYW1zKTtcbiAgICB9XG4gICAgY2FzZSAnQmluYXJ5RXhwcmVzc2lvbic6IHtcbiAgICAgIGxldCB7IGluZGV4LCBjaGlsZHJlbiB9ID0gTm9kZS5nZXRCaW5hcnkoXG4gICAgICAgIGdpdmVuLFxuICAgICAgICBbJyonLCAnLycsICclJ10sXG4gICAgICAgIE11bHRpcGxpY2F0aXZlRXhwcmVzc2lvbihZaWVsZCwgQXdhaXQpLFxuICAgICAgICBFeHBvbmVudGlhdGlvbkV4cHJlc3Npb24oWWllbGQsIEF3YWl0KSxcbiAgICAgICk7XG4gICAgICBpZiAoaW5kZXggPiAwKSB7XG4gICAgICAgIGxldCBbbCwgcl0gPSBjaGlsZHJlbjtcbiAgICAgICAgbGV0IG9wID0gbmV3IE5vZGUoJ011bHRpcGxpY2F0aXZlT3BlcmF0b3InLCB7fSwgaW5kZXggLSAxKTtcbiAgICAgICAgY2hpbGRyZW4gPSBbbCwgb3AsIHJdO1xuICAgICAgICBpbmRleCA9IDE7XG4gICAgICB9XG4gICAgICByZXR1cm4gbmV3IE5vZGUoJ0FkZGl0aXZlRXhwcmVzc2lvbicsIGdpdmVuLCBpbmRleCwgY2hpbGRyZW4sIHBhcmFtcyk7XG4gICAgfVxuICAgIGRlZmF1bHQ6XG4gICAgICBOb2RlLlRPRE8oYCR7dHlwZX0gQCBNdWx0aXBsaWNhdGl2ZUV4cHJlc3Npb25gKTtcbiAgfVxuICBOb2RlLlRPRE8oJ011bHRpcGxpY2F0aXZlRXhwcmVzc2lvbicpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IE11bHRpcGxpY2F0aXZlRXhwcmVzc2lvbjtcbiIsImNvbnN0IE5vZGUgPSByZXF1aXJlKCcuLi9Ob2RlJyk7XG5cbi8vIE5ld0V4cHJlc3Npb25bWWllbGQsIEF3YWl0XSA6XG4vLyAgICBNZW1iZXJFeHByZXNzaW9uWz9ZaWVsZCwgP0F3YWl0XVxuLy8gICAgbmV3IE5ld0V4cHJlc3Npb25bP1lpZWxkLCA/QXdhaXRdXG5sZXQgTmV3RXhwcmVzc2lvbiA9IChZaWVsZCwgQXdhaXQpID0+IChnaXZlbikgPT4ge1xuICBsZXQgTWVtYmVyRXhwcmVzc2lvbiA9IHJlcXVpcmUoJy4vTWVtYmVyRXhwcmVzc2lvbicpO1xuXG4gIGxldCBwYXJhbXMgPSBbWWllbGQsIEF3YWl0XTtcbiAgbGV0IHsgdHlwZSB9ID0gZ2l2ZW47XG4gIHN3aXRjaCAodHlwZSkge1xuICAgIGNhc2UgJ01lbWJlckV4cHJlc3Npb24nOlxuICAgIGNhc2UgJ09iamVjdEV4cHJlc3Npb24nOlxuICAgIGNhc2UgJ0FycmF5RXhwcmVzc2lvbic6XG4gICAgY2FzZSAnRnVuY3Rpb25FeHByZXNzaW9uJzpcbiAgICBjYXNlICdDbGFzc0V4cHJlc3Npb24nOlxuICAgIGNhc2UgJ1NlcXVlbmNlRXhwcmVzc2lvbic6XG4gICAgY2FzZSAnUGFyZW50aGVzaXplZEV4cHJlc3Npb24nOlxuICAgIGNhc2UgJ1RlbXBsYXRlTGl0ZXJhbCc6XG4gICAgY2FzZSAnVGFnZ2VkVGVtcGxhdGVFeHByZXNzaW9uJzpcbiAgICBjYXNlICdJZGVudGlmaWVyJzpcbiAgICBjYXNlICdUaGlzRXhwcmVzc2lvbic6XG4gICAgY2FzZSAnT2JqZWN0UGF0dGVybic6XG4gICAgY2FzZSAnQXJyYXlQYXR0ZXJuJzpcbiAgICBjYXNlICdNZXRhUHJvcGVydHknOlxuICAgIGNhc2UgJ0xpdGVyYWwnOiB7XG4gICAgICBsZXQgZXhwciA9IE1lbWJlckV4cHJlc3Npb24oWWllbGQsIEF3YWl0KShnaXZlbik7XG4gICAgICByZXR1cm4gbmV3IE5vZGUoJ05ld0V4cHJlc3Npb24nLCBnaXZlbiwgMCwgW2V4cHJdLCBwYXJhbXMpO1xuICAgIH1cbiAgICBjYXNlICdOZXdFeHByZXNzaW9uJzoge1xuICAgICAgbGV0IHsgY2FsbGVlIH0gPSBnaXZlbjtcbiAgICAgIGlmIChjYWxsZWUuZW5kICE9IGdpdmVuLmVuZCkge1xuICAgICAgICBsZXQgZXhwciA9IE1lbWJlckV4cHJlc3Npb24oWWllbGQsIEF3YWl0KShnaXZlbik7XG4gICAgICAgIHJldHVybiBuZXcgTm9kZSgnTmV3RXhwcmVzc2lvbicsIGdpdmVuLCAwLCBbZXhwcl0sIHBhcmFtcyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsZXQgZXhwciA9IE5ld0V4cHJlc3Npb24oWWllbGQsIEF3YWl0KShjYWxsZWUpO1xuICAgICAgICByZXR1cm4gbmV3IE5vZGUoJ05ld0V4cHJlc3Npb24nLCBnaXZlbiwgMSwgW2V4cHJdLCBwYXJhbXMpO1xuICAgICAgfVxuICAgIH1cbiAgICBkZWZhdWx0OlxuICAgICAgTm9kZS5UT0RPKGAke3R5cGV9IEAgTmV3RXhwcmVzc2lvbmApO1xuICB9XG4gIE5vZGUuVE9ETygnTmV3RXhwcmVzc2lvbicpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IE5ld0V4cHJlc3Npb247XG4iLCJjb25zdCBOb2RlID0gcmVxdWlyZSgnLi4vTm9kZScpO1xuXG4vLyBOZXdUYXJnZXQ6IHtcbi8vICAgYG5ld2AgYC5gIGB0YXJnZXRgXG4vLyB9XG5cbmxldCBOZXdUYXJnZXQgPSAoZ2l2ZW4pID0+IHtcbiAgcmV0dXJuIG5ldyBOb2RlKCdOZXdUYXJnZXQnLCBnaXZlbiwgMCwgW10sIFtdKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBOZXdUYXJnZXQ7XG4iLCJjb25zdCBOb2RlID0gcmVxdWlyZSgnLi4vTm9kZScpO1xuY29uc3QgeyBjaGVja0NvbW1hIH0gPSByZXF1aXJlKCcuLi9HbG9iYWwnKTtcblxuLy8gT2JqZWN0QmluZGluZ1BhdHRlcm5bWWllbGQsIEF3YWl0XToge1xuLy8gICBge2AgYH1gIHxcbi8vICAgYHtgIEJpbmRpbmdSZXN0UHJvcGVydHlbP1lpZWxkLCA/QXdhaXRdIGB9YCB8XG4vLyAgIGB7YCBCaW5kaW5nUHJvcGVydHlMaXN0Wz9ZaWVsZCwgP0F3YWl0XSBgfWAgfFxuLy8gICBge2AgQmluZGluZ1Byb3BlcnR5TGlzdFs/WWllbGQsID9Bd2FpdF0gYCxgIEJpbmRpbmdSZXN0UHJvcGVydHlbP1lpZWxkLCA/QXdhaXRdPyBgfWBcbi8vIH1cbmxldCBPYmplY3RCaW5kaW5nUGF0dGVybiA9IChZaWVsZCwgQXdhaXQpID0+IChnaXZlbikgPT4ge1xuICBsZXQgQmluZGluZ1Jlc3RQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vQmluZGluZ1Jlc3RQcm9wZXJ0eScpO1xuICBsZXQgQmluZGluZ1Byb3BlcnR5TGlzdCA9IHJlcXVpcmUoJy4vQmluZGluZ1Byb3BlcnR5TGlzdCcpO1xuICBcbiAgbGV0IHBhcmFtcyA9IFtZaWVsZCwgQXdhaXRdO1xuICBsZXQgcHJvcGVydGllcyA9IGdpdmVuLnByb3BlcnRpZXM7XG4gIFxuICAvLyBbMCwwXVxuICBpZiAocHJvcGVydGllcy5sZW5ndGggPT09IDApIFxuICAgIHJldHVybiBuZXcgTm9kZSgnT2JqZWN0QmluZGluZ1BhdHRlcm4nLCBnaXZlbiwgMCwgW10sIHBhcmFtcyk7XG4gIGVsc2Uge1xuICAgIC8vIGNoZWNrIGlmIGxhc3QgZWxlbWVudCBpcyBCaW5kaW5nUmVzdFByb3BlcnR5XG4gICAgbGV0IGxhc3RQcm9wID0gcHJvcGVydGllcy5wb3AoKTtcbiAgICBcbiAgICAvLyBbMywwXVxuICAgIGNvbnN0IGhhc0NvbW1hID0gY2hlY2tDb21tYShnaXZlbi5zdGFydCwgZ2l2ZW4uZW5kLCAnfScpO1xuICAgIGlmIChsYXN0UHJvcCA9PT0gbnVsbCB8fCBoYXNDb21tYSkge1xuICAgICAgaWYgKGhhc0NvbW1hKSBwcm9wZXJ0aWVzLnB1c2gobGFzdFByb3ApO1xuICAgICAgbGV0IHByb3BMaXN0ID0gQmluZGluZ1Byb3BlcnR5TGlzdChZaWVsZCwgQXdhaXQpKHByb3BlcnRpZXMpO1xuICAgICAgcmV0dXJuIG5ldyBOb2RlKCdPYmplY3RCaW5kaW5nUGF0dGVybicsIGdpdmVuLCAzLCBbcHJvcExpc3QsIG51bGxdLCBwYXJhbXMpO1xuICAgIH1cbiAgICAvLyBbMSwwXSwgWzMsMV1cbiAgICBlbHNlIGlmIChsYXN0UHJvcC50eXBlID09PSAnUmVzdEVsZW1lbnQnKSB7XG4gICAgICBsZXQgcmVzdFByb3AgPSBCaW5kaW5nUmVzdFByb3BlcnR5KFlpZWxkLCBBd2FpdCkobGFzdFByb3ApO1xuICAgICAgLy8gWzEsMF1cbiAgICAgIGlmIChwcm9wZXJ0aWVzLmxlbmd0aCA9PT0gMClcbiAgICAgICAgcmV0dXJuIG5ldyBOb2RlKCdPYmplY3RCaW5kaW5nUGF0dGVybicsIGdpdmVuLCAxLCBbcmVzdFByb3BdLCBwYXJhbXMpO1xuICAgICAgLy8gWzMsMV1cbiAgICAgIGVsc2Uge1xuICAgICAgICBsZXQgcHJvcExpc3QgPSBCaW5kaW5nUHJvcGVydHlMaXN0KFlpZWxkLCBBd2FpdCkocHJvcGVydGllcyk7XG4gICAgICAgIHJldHVybiBuZXcgTm9kZSgnT2JqZWN0QmluZGluZ1BhdHRlcm4nLCBnaXZlbiwgMywgW3Byb3BMaXN0LCByZXN0UHJvcF0sIHBhcmFtcyk7XG4gICAgICB9XG4gICAgfVxuICAgIC8vIFsyLDBdXG4gICAgZWxzZSB7XG4gICAgICBwcm9wZXJ0aWVzLnB1c2gobGFzdFByb3ApO1xuICAgICAgbGV0IHByb3BMaXN0ID0gQmluZGluZ1Byb3BlcnR5TGlzdChZaWVsZCwgQXdhaXQpKHByb3BlcnRpZXMpO1xuICAgICAgcmV0dXJuIG5ldyBOb2RlKCdPYmplY3RCaW5kaW5nUGF0dGVybicsIGdpdmVuLCAyLCBbcHJvcExpc3RdLCBwYXJhbXMpO1xuICAgIH1cbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdEJpbmRpbmdQYXR0ZXJuO1xuIiwiY29uc3QgTm9kZSA9IHJlcXVpcmUoJy4uL05vZGUnKTtcbmNvbnN0IHsgY2hlY2tDb21tYSB9ID0gcmVxdWlyZSgnLi4vR2xvYmFsJyk7XG5cbi8vIE9iamVjdExpdGVyYWxbWWllbGQsIEF3YWl0XSA6XG4vLyAgICB7IH1cbi8vICAgIHsgUHJvcGVydHlEZWZpbml0aW9uTGlzdFs/WWllbGQsID9Bd2FpdF0gfVxuLy8gICAgeyBQcm9wZXJ0eURlZmluaXRpb25MaXN0Wz9ZaWVsZCwgP0F3YWl0XSAsIH1cbmxldCBPYmplY3RMaXRlcmFsID0gKFlpZWxkLCBBd2FpdCkgPT4gKGdpdmVuKSA9PiB7XG4gIGxldCBQcm9wZXJ0eURlZmluaXRpb25MaXN0ID0gcmVxdWlyZSgnLi9Qcm9wZXJ0eURlZmluaXRpb25MaXN0Jyk7XG4gIFxuICBsZXQgcGFyYW1zID0gW1lpZWxkLCBBd2FpdF07XG4gIGxldCB7IHByb3BlcnRpZXMgfSA9IGdpdmVuO1xuICBpZiAocHJvcGVydGllcy5sZW5ndGggPT0gMCkge1xuICAgIHJldHVybiBuZXcgTm9kZSgnT2JqZWN0TGl0ZXJhbCcsIGdpdmVuLCAwLCBbXSwgcGFyYW1zKTtcbiAgfSBlbHNlIHtcbiAgICBsZXQgbGlzdCA9IFByb3BlcnR5RGVmaW5pdGlvbkxpc3QoWWllbGQsIEF3YWl0KShnaXZlbik7XG4gICAgY29uc3QgaGFzQ29tbWEgPSBjaGVja0NvbW1hKGdpdmVuLnN0YXJ0LCBnaXZlbi5lbmQsICd9Jyk7XG4gICAgcmV0dXJuIG5ldyBOb2RlKCdPYmplY3RMaXRlcmFsJywgZ2l2ZW4sIGhhc0NvbW1hID8gMiA6IDEsIFtsaXN0XSwgcGFyYW1zKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdExpdGVyYWw7XG4iLCJjb25zdCBOb2RlID0gcmVxdWlyZSgnLi4vTm9kZScpO1xuY29uc3QgTGV4aWNhbE5vZGUgPSByZXF1aXJlKCcuLi9MZXhpY2FsTm9kZScpO1xuXG4vLyBQcmltYXJ5RXhwcmVzc2lvbltZaWVsZCwgQXdhaXRdIDpcbi8vICAgIHRoaXNcbi8vICAgIElkZW50aWZpZXJSZWZlcmVuY2VbP1lpZWxkLCA/QXdhaXRdXG4vLyAgICBMaXRlcmFsXG4vLyAgICBBcnJheUxpdGVyYWxbP1lpZWxkLCA/QXdhaXRdXG4vLyAgICBPYmplY3RMaXRlcmFsWz9ZaWVsZCwgP0F3YWl0XVxuLy8gICAgRnVuY3Rpb25FeHByZXNzaW9uXG4vLyAgICBDbGFzc0V4cHJlc3Npb25bP1lpZWxkLCA/QXdhaXRdXG4vLyAgICBHZW5lcmF0b3JFeHByZXNzaW9uXG4vLyAgICBBc3luY0Z1bmN0aW9uRXhwcmVzc2lvblxuLy8gICAgQXN5bmNHZW5lcmF0b3JFeHByZXNzaW9uXG4vLyAgICBSZWd1bGFyRXhwcmVzc2lvbkxpdGVyYWxcbi8vICAgIFRlbXBsYXRlTGl0ZXJhbFs/WWllbGQsID9Bd2FpdCwgflRhZ2dlZF1cbi8vICAgIENvdmVyUGFyZW50aGVzaXplZEV4cHJlc3Npb25BbmRBcnJvd1BhcmFtZXRlckxpc3RbP1lpZWxkLCA/QXdhaXRdXG5sZXQgUHJpbWFyeUV4cHJlc3Npb24gPSAoWWllbGQsIEF3YWl0KSA9PiAoZ2l2ZW4pID0+IHtcbiAgY29uc3QgTGl0ZXJhbCA9IHJlcXVpcmUoJy4vTGl0ZXJhbCcpO1xuICBjb25zdCBJZGVudGlmaWVyUmVmZXJlbmNlID0gcmVxdWlyZSgnLi9JZGVudGlmaWVyUmVmZXJlbmNlJyk7XG4gIGNvbnN0IEFycmF5TGl0ZXJhbD0gcmVxdWlyZSgnLi9BcnJheUxpdGVyYWwnKTtcbiAgY29uc3QgT2JqZWN0TGl0ZXJhbCA9IHJlcXVpcmUoJy4vT2JqZWN0TGl0ZXJhbCcpO1xuICBjb25zdCBGdW5jdGlvbkV4cHJlc3Npb24gPSByZXF1aXJlKCcuL0Z1bmN0aW9uRXhwcmVzc2lvbicpO1xuICBjb25zdCBDbGFzc0V4cHJlc3Npb24gPSByZXF1aXJlKCcuL0NsYXNzRXhwcmVzc2lvbicpO1xuICBjb25zdCBHZW5lcmF0b3JFeHByZXNzaW9uID0gcmVxdWlyZSgnLi9HZW5lcmF0b3JFeHByZXNzaW9uJyk7XG4gIGNvbnN0IEFzeW5jRnVuY3Rpb25FeHByZXNzaW9uID0gcmVxdWlyZSgnLi9Bc3luY0Z1bmN0aW9uRXhwcmVzc2lvbicpO1xuICBjb25zdCBBc3luY0dlbmVyYXRvckV4cHJlc3Npb249IHJlcXVpcmUoJy4vQXN5bmNHZW5lcmF0b3JFeHByZXNzaW9uJyk7XG4gIGNvbnN0IFRlbXBsYXRlTGl0ZXJhbCA9IHJlcXVpcmUoJy4vVGVtcGxhdGVMaXRlcmFsJyk7XG4gIGNvbnN0IENvdmVyUGFyZW50aGVzaXplZEV4cHJlc3Npb25BbmRBcnJvd1BhcmFtZXRlckxpc3QgPSByZXF1aXJlKCcuL0NvdmVyUGFyZW50aGVzaXplZEV4cHJlc3Npb25BbmRBcnJvd1BhcmFtZXRlckxpc3QnKTtcblxuICBsZXQgcGFyYW1zID0gW1lpZWxkLCBBd2FpdF07XG4gIGxldCB7IHR5cGUgfSA9IGdpdmVuO1xuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlICdUaGlzRXhwcmVzc2lvbic6IHtcbiAgICAgIHJldHVybiBuZXcgTm9kZSgnUHJpbWFyeUV4cHJlc3Npb24nLCBnaXZlbiwgMCwgW10sIHBhcmFtcyk7XG4gICAgfVxuICAgIGNhc2UgJ0lkZW50aWZpZXInOiB7XG4gICAgICBsZXQgcmVmID0gSWRlbnRpZmllclJlZmVyZW5jZShZaWVsZCwgQXdhaXQpKGdpdmVuKTtcbiAgICAgIHJldHVybiBuZXcgTm9kZSgnUHJpbWFyeUV4cHJlc3Npb24nLCBnaXZlbiwgMSwgW3JlZl0sIHBhcmFtcyk7XG4gICAgfVxuICAgIGNhc2UgJ0xpdGVyYWwnOiB7XG4gICAgICBpZiAoZ2l2ZW4ucmVnZXgpIHtcbiAgICAgICAgbGV0IHJlZ2V4ID0gbmV3IExleGljYWxOb2RlKCdSZWd1bGFyRXhwcmVzc2lvbkxpdGVyYWwnLCBnaXZlbi5yYXcpO1xuICAgICAgICByZXR1cm4gbmV3IE5vZGUoJ1ByaW1hcnlFeHByZXNzaW9uJywgZ2l2ZW4sIDEwLCBbcmVnZXhdLCBwYXJhbXMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGV0IGxpdGVyYWwgPSBMaXRlcmFsKGdpdmVuKTtcbiAgICAgICAgcmV0dXJuIG5ldyBOb2RlKCdQcmltYXJ5RXhwcmVzc2lvbicsIGdpdmVuLCAyLCBbbGl0ZXJhbF0sIHBhcmFtcyk7XG4gICAgICB9XG4gICAgfVxuICAgIGNhc2UgJ0FycmF5UGF0dGVybic6XG4gICAgY2FzZSAnQXJyYXlFeHByZXNzaW9uJzoge1xuICAgICAgbGV0IGFyciA9IEFycmF5TGl0ZXJhbChZaWVsZCwgQXdhaXQpKGdpdmVuKTtcbiAgICAgIHJldHVybiBuZXcgTm9kZSgnUHJpbWFyeUV4cHJlc3Npb24nLCBnaXZlbiwgMywgW2Fycl0sIHBhcmFtcyk7XG4gICAgfVxuICAgIGNhc2UgJ09iamVjdFBhdHRlcm4nOlxuICAgIGNhc2UgJ09iamVjdEV4cHJlc3Npb24nOiB7XG4gICAgICBsZXQgb2JqID0gT2JqZWN0TGl0ZXJhbChZaWVsZCwgQXdhaXQpKGdpdmVuKTtcbiAgICAgIHJldHVybiBuZXcgTm9kZSgnUHJpbWFyeUV4cHJlc3Npb24nLCBnaXZlbiwgNCwgW29ial0sIHBhcmFtcyk7XG4gICAgfVxuICAgIGNhc2UgJ0Z1bmN0aW9uRXhwcmVzc2lvbic6IHtcbiAgICAgIGxldCB7IGFzeW5jLCBnZW5lcmF0b3IgfSA9IGdpdmVuO1xuICAgICAgbGV0IGluZGV4LCBmdW5jO1xuICAgICAgaWYgKCFhc3luYyAmJiAhZ2VuZXJhdG9yKSB7XG4gICAgICAgIGluZGV4ID0gNTtcbiAgICAgICAgZnVuYyA9IEZ1bmN0aW9uRXhwcmVzc2lvbihnaXZlbik7XG4gICAgICB9IGVsc2UgaWYgKCFhc3luYyAmJiBnZW5lcmF0b3IpIHtcbiAgICAgICAgaW5kZXggPSA3O1xuICAgICAgICBmdW5jID0gR2VuZXJhdG9yRXhwcmVzc2lvbihnaXZlbik7XG4gICAgICB9IGVsc2UgaWYgKGFzeW5jICYmICFnZW5lcmF0b3IpIHtcbiAgICAgICAgaW5kZXggPSA4O1xuICAgICAgICBmdW5jID0gQXN5bmNGdW5jdGlvbkV4cHJlc3Npb24oZ2l2ZW4pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaW5kZXggPSA5O1xuICAgICAgICBmdW5jID0gQXN5bmNHZW5lcmF0b3JFeHByZXNzaW9uKGdpdmVuKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBuZXcgTm9kZSgnUHJpbWFyeUV4cHJlc3Npb24nLCBnaXZlbiwgaW5kZXgsIFtmdW5jXSwgcGFyYW1zKTtcbiAgICB9XG4gICAgY2FzZSAnQ2xhc3NFeHByZXNzaW9uJzoge1xuICAgICAgbGV0IGV4cHIgPSBDbGFzc0V4cHJlc3Npb24oWWllbGQsIEF3YWl0KShnaXZlbik7XG4gICAgICByZXR1cm4gbmV3IE5vZGUoJ1ByaW1hcnlFeHByZXNzaW9uJywgZ2l2ZW4sIDYsIFtleHByXSwgcGFyYW1zKTtcbiAgICB9XG4gICAgY2FzZSAnVGVtcGxhdGVMaXRlcmFsJzoge1xuICAgICAgbGV0IHRlbXAgPSBUZW1wbGF0ZUxpdGVyYWwoWWllbGQsIEF3YWl0LCBmYWxzZSkoZ2l2ZW4pO1xuICAgICAgcmV0dXJuIG5ldyBOb2RlKCdQcmltYXJ5RXhwcmVzc2lvbicsIGdpdmVuLCAxMSwgW3RlbXBdLCBwYXJhbXMpO1xuICAgIH1cbiAgICBjYXNlICdTZXF1ZW5jZUV4cHJlc3Npb24nOlxuICAgIGNhc2UgJ1BhcmVudGhlc2l6ZWRFeHByZXNzaW9uJzoge1xuICAgICAgbGV0IGNvdmVyID0gQ292ZXJQYXJlbnRoZXNpemVkRXhwcmVzc2lvbkFuZEFycm93UGFyYW1ldGVyTGlzdChZaWVsZCwgQXdhaXQpKGdpdmVuKTtcbiAgICAgIHJldHVybiBuZXcgTm9kZSgnUHJpbWFyeUV4cHJlc3Npb24nLCBnaXZlbiwgMTIsIFtjb3Zlcl0sIHBhcmFtcyk7XG4gICAgfVxuICAgIGRlZmF1bHQ6XG4gICAgICBOb2RlLlRPRE8oYCR7dHlwZX0gQCBQcmltYXJ5RXhwcmVzc2lvbmApO1xuICB9XG4gIE5vZGUuVE9ETygnUHJpbWFyeUV4cHJlc3Npb24nKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBQcmltYXJ5RXhwcmVzc2lvbjtcbiIsImNvbnN0IE5vZGUgPSByZXF1aXJlKCcuLi9Ob2RlJyk7XG5cbi8vIFByb3BlcnR5RGVmaW5pdGlvbltZaWVsZCwgQXdhaXRdIDpcbi8vICAgIElkZW50aWZpZXJSZWZlcmVuY2VbP1lpZWxkLCA/QXdhaXRdXG4vLyAgICBDb3ZlckluaXRpYWxpemVkTmFtZVs/WWllbGQsID9Bd2FpdF1cbi8vICAgIFByb3BlcnR5TmFtZVs/WWllbGQsID9Bd2FpdF0gOiBBc3NpZ25tZW50RXhwcmVzc2lvblsrSW4sID9ZaWVsZCwgP0F3YWl0XVxuLy8gICAgTWV0aG9kRGVmaW5pdGlvbls/WWllbGQsID9Bd2FpdF1cbi8vICAgIC4uLiBBc3NpZ25tZW50RXhwcmVzc2lvblsrSW4sID9ZaWVsZCwgP0F3YWl0XVxubGV0IFByb3BlcnR5RGVmaW5pdGlvbiA9IChZaWVsZCwgQXdhaXQpID0+IChnaXZlbikgPT4ge1xuICBsZXQgSWRlbnRpZmllclJlZmVyZW5jZSA9IHJlcXVpcmUoJy4vSWRlbnRpZmllclJlZmVyZW5jZScpO1xuICBsZXQgQ292ZXJJbml0aWFsaXplZE5hbWUgPSByZXF1aXJlKCcuL0NvdmVySW5pdGlhbGl6ZWROYW1lJyk7XG4gIGxldCBQcm9wZXJ0eU5hbWUgPSByZXF1aXJlKCcuL1Byb3BlcnR5TmFtZScpO1xuICBsZXQgTWV0aG9kRGVmaW5pdGlvbiA9IHJlcXVpcmUoJy4vTWV0aG9kRGVmaW5pdGlvbicpO1xuXG4gIGxldCBBc3NpZ25tZW50RXhwcmVzc2lvbiA9IHJlcXVpcmUoJy4vQXNzaWdubWVudEV4cHJlc3Npb24nKTtcbiAgbGV0IHBhcmFtcyA9IFtZaWVsZCwgQXdhaXRdO1xuICBsZXQgeyB0eXBlIH0gPSBnaXZlblxuICBcbiAgaWYgKHR5cGUgPT09ICdQcm9wZXJ0eScpIHtcbiAgICBsZXQgeyBtZXRob2QsIHNob3J0aGFuZCwga2V5LCB2YWx1ZSB9ID0gZ2l2ZW47XG4gICAgc3dpdGNoIChnaXZlbi5raW5kKSB7XG4gICAgICBjYXNlICdnZXQnOiBcbiAgICAgIGNhc2UgJ3NldCc6IHtcbiAgICAgICAgbGV0IG1ldGhvZCA9IE1ldGhvZERlZmluaXRpb24oWWllbGQsIEF3YWl0KShnaXZlbik7XG4gICAgICAgIHJldHVybiBuZXcgTm9kZSgnUHJvcGVydHlEZWZpbml0aW9uJywgZ2l2ZW4sIDMsIFttZXRob2RdLCBwYXJhbXMpO1xuICAgICAgfVxuICAgICAgY2FzZSAnaW5pdCc6IHtcbiAgICAgICAgaWYgKHNob3J0aGFuZCAmJiB2YWx1ZS50eXBlID09PSAnQXNzaWdubWVudFBhdHRlcm4nKSB7XG4gICAgICAgICAgbGV0IGNvdiA9IENvdmVySW5pdGlhbGl6ZWROYW1lKFlpZWxkLCBBd2FpdCkodmFsdWUpO1xuICAgICAgICAgIHJldHVybiBuZXcgTm9kZSgnUHJvcGVydHlEZWZpbml0aW9uJywgZ2l2ZW4sIDEsIFtjb3ZdLCBwYXJhbXMpO1xuICAgICAgICB9IGVsc2UgaWYgKHNob3J0aGFuZCkge1xuICAgICAgICAgIGxldCByZWYgPSBJZGVudGlmaWVyUmVmZXJlbmNlKFlpZWxkLCBBd2FpdCkoa2V5KTtcbiAgICAgICAgICByZXR1cm4gbmV3IE5vZGUoJ1Byb3BlcnR5RGVmaW5pdGlvbicsIGdpdmVuLCAwLCBbcmVmXSwgcGFyYW1zKTtcbiAgICAgICAgfSBlbHNlIGlmICghbWV0aG9kKSB7XG4gICAgICAgICAgbGV0IG5hbWUgPSBQcm9wZXJ0eU5hbWUoWWllbGQsIEF3YWl0KShnaXZlbik7XG4gICAgICAgICAgbGV0IGV4cHIgPSBBc3NpZ25tZW50RXhwcmVzc2lvbih0cnVlLCBZaWVsZCwgQXdhaXQpKHZhbHVlKTtcbiAgICAgICAgICByZXR1cm4gbmV3IE5vZGUoJ1Byb3BlcnR5RGVmaW5pdGlvbicsIGdpdmVuLCAyLCBbbmFtZSwgZXhwcl0sIHBhcmFtcyk7XG4gICAgICAgIH0gZWxzZSBpZiAobWV0aG9kKSB7XG4gICAgICAgICAgbGV0IG1ldGhvZCA9IE1ldGhvZERlZmluaXRpb24oWWllbGQsIEF3YWl0KShnaXZlbik7XG4gICAgICAgICAgcmV0dXJuIG5ldyBOb2RlKCdQcm9wZXJ0eURlZmluaXRpb24nLCBnaXZlbiwgMywgW21ldGhvZF0sIHBhcmFtcyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIE5vZGUuVE9ETyhgaW5pdCBAIFByb3BlcnR5RGVmaW5pdGlvbmApO1xuICAgICAgfVxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgTm9kZS5UT0RPKGAke2dpdmVuLmtpbmR9IEAgUHJvcGVydHlEZWZpbml0aW9uYCk7XG4gICAgfVxuICB9IGVsc2UgaWYgKHR5cGUgPT09ICdSZXN0RWxlbWVudCcgfHwgdHlwZSA9PT0gJ1NwcmVhZEVsZW1lbnQnKSB7XG4gICAgbGV0IHsgYXJndW1lbnQgfSA9IGdpdmVuO1xuICAgIGxldCBleHByID0gQXNzaWdubWVudEV4cHJlc3Npb24odHJ1ZSwgWWllbGQsIEF3YWl0KShhcmd1bWVudCk7XG4gICAgcmV0dXJuIG5ldyBOb2RlKCdQcm9wZXJ0eURlZmluaXRpb24nLCBnaXZlbiwgNCwgW2V4cHJdLCBwYXJhbXMpO1xuICB9IGVsc2Uge1xuICAgIE5vZGUuVE9ETyhgJHtnaXZlbi50eXBlfSBAIFByb3BlcnR5RGVmaW5pdGlvbmApO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gUHJvcGVydHlEZWZpbml0aW9uO1xuIiwiY29uc3QgTm9kZSA9IHJlcXVpcmUoJy4uL05vZGUnKTtcblxuLy8gUHJvcGVydHlEZWZpbml0aW9uTGlzdFtZaWVsZCwgQXdhaXRdIDpcbi8vICAgIFByb3BlcnR5RGVmaW5pdGlvbls/WWllbGQsID9Bd2FpdF1cbi8vICAgIFByb3BlcnR5RGVmaW5pdGlvbkxpc3RbP1lpZWxkLCA/QXdhaXRdICwgUHJvcGVydHlEZWZpbml0aW9uWz9ZaWVsZCwgP0F3YWl0XVxubGV0IFByb3BlcnR5RGVmaW5pdGlvbkxpc3QgPSAoWWllbGQsIEF3YWl0KSA9PiAoZ2l2ZW4pID0+IHtcbiAgbGV0IFByb3BlcnR5RGVmaW5pdGlvbiA9IHJlcXVpcmUoJy4vUHJvcGVydHlEZWZpbml0aW9uJyk7XG5cbiAgbGV0IGdlbkNoaWxkID0gUHJvcGVydHlEZWZpbml0aW9uKFlpZWxkLCBBd2FpdCk7XG4gIGxldCBwYXJhbXMgPSBbWWllbGQsIEF3YWl0XTtcbiAgbGV0IHsgcHJvcGVydGllcyB9ID0gZ2l2ZW47XG4gIHJldHVybiBOb2RlLmZyb21MaXN0KCdQcm9wZXJ0eURlZmluaXRpb25MaXN0JywgcHJvcGVydGllcywgZ2VuQ2hpbGQsIHBhcmFtcyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gUHJvcGVydHlEZWZpbml0aW9uTGlzdDtcbiIsImNvbnN0IE5vZGUgPSByZXF1aXJlKCcuLi9Ob2RlJyk7XG5cbi8vIFByb3BlcnR5TmFtZVtZaWVsZCwgQXdhaXRdIDpcbi8vICAgIExpdGVyYWxQcm9wZXJ0eU5hbWVcbi8vICAgIENvbXB1dGVkUHJvcGVydHlOYW1lWz9ZaWVsZCwgP0F3YWl0XVxuXG4vLyBUT0RPIGZpeCBzcGFuXG5sZXQgUHJvcGVydHlOYW1lID0gKFlpZWxkLCBBd2FpdCkgPT4gKGdpdmVuKSA9PiB7XG4gIGxldCBMaXRlcmFsUHJvcGVydHlOYW1lID0gcmVxdWlyZSgnLi9MaXRlcmFsUHJvcGVydHlOYW1lJyk7XG4gIGxldCBDb21wdXRlZFByb3BlcnR5TmFtZSA9IHJlcXVpcmUoJy4vQ29tcHV0ZWRQcm9wZXJ0eU5hbWUnKTtcbiAgXG4gIGxldCBwYXJhbXMgPSBbWWllbGQsIEF3YWl0XTtcbiAgbGV0IHsgY29tcHV0ZWQsIGtleSB9ID0gZ2l2ZW47XG4gIGlmICghY29tcHV0ZWQpIHtcbiAgICBsZXQgbmFtZSA9IExpdGVyYWxQcm9wZXJ0eU5hbWUoa2V5KTtcbiAgICByZXR1cm4gbmV3IE5vZGUoJ1Byb3BlcnR5TmFtZScsIGdpdmVuLCAwLCBbbmFtZV0sIHBhcmFtcyk7XG4gIH0gZWxzZSB7XG4gICAgbGV0IG5hbWUgPSBDb21wdXRlZFByb3BlcnR5TmFtZShZaWVsZCwgQXdhaXQpKGtleSk7XG4gICAgcmV0dXJuIG5ldyBOb2RlKCdQcm9wZXJ0eU5hbWUnLCBnaXZlbiwgMSwgW25hbWVdLCBwYXJhbXMpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gUHJvcGVydHlOYW1lO1xuIiwiY29uc3QgTm9kZSA9IHJlcXVpcmUoJy4uL05vZGUnKTtcblxuLy8gUHJvcGVydHlTZXRQYXJhbWV0ZXJMaXN0OiB7XG4vLyAgIEZvcm1hbFBhcmFtZXRlclt+WWllbGQsIH5Bd2FpdF1cbi8vIH1cblxubGV0IFByb3BlcnR5U2V0UGFyYW1ldGVyTGlzdCA9ICgpID0+IChnaXZlbikgPT4ge1xuICBjb25zdCBGb3JtYWxQYXJhbWV0ZXIgPSByZXF1aXJlKCcuL0Zvcm1hbFBhcmFtZXRlcicpO1xuICBsZXQgcCA9IEZvcm1hbFBhcmFtZXRlcihmYWxzZSwgZmFsc2UpKGdpdmVuKTtcbiAgcmV0dXJuIG5ldyBOb2RlKCdQcm9wZXJ0eVNldFBhcmFtZXRlckxpc3QnLCBnaXZlbiwgMCwgW3BdLCBbXSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gUHJvcGVydHlTZXRQYXJhbWV0ZXJMaXN0O1xuIiwiY29uc3QgTm9kZSA9IHJlcXVpcmUoJy4uL05vZGUnKTtcblxuLy8gUmVsYXRpb25hbEV4cHJlc3Npb25bSW4sIFlpZWxkLCBBd2FpdF0gOlxuLy8gICAgU2hpZnRFeHByZXNzaW9uWz9ZaWVsZCwgP0F3YWl0XVxuLy8gICAgUmVsYXRpb25hbEV4cHJlc3Npb25bP0luLCA/WWllbGQsID9Bd2FpdF0gPCBTaGlmdEV4cHJlc3Npb25bP1lpZWxkLCA/QXdhaXRdXG4vLyAgICBSZWxhdGlvbmFsRXhwcmVzc2lvbls/SW4sID9ZaWVsZCwgP0F3YWl0XSA+IFNoaWZ0RXhwcmVzc2lvbls/WWllbGQsID9Bd2FpdF1cbi8vICAgIFJlbGF0aW9uYWxFeHByZXNzaW9uWz9JbiwgP1lpZWxkLCA/QXdhaXRdIDw9IFNoaWZ0RXhwcmVzc2lvbls/WWllbGQsID9Bd2FpdF1cbi8vICAgIFJlbGF0aW9uYWxFeHByZXNzaW9uWz9JbiwgP1lpZWxkLCA/QXdhaXRdID49IFNoaWZ0RXhwcmVzc2lvbls/WWllbGQsID9Bd2FpdF1cbi8vICAgIFJlbGF0aW9uYWxFeHByZXNzaW9uWz9JbiwgP1lpZWxkLCA/QXdhaXRdIGluc3RhbmNlb2YgU2hpZnRFeHByZXNzaW9uWz9ZaWVsZCwgP0F3YWl0XVxuLy8gICAgWytJbl0gUmVsYXRpb25hbEV4cHJlc3Npb25bK0luLCA/WWllbGQsID9Bd2FpdF0gaW4gU2hpZnRFeHByZXNzaW9uWz9ZaWVsZCwgP0F3YWl0XVxubGV0IFJlbGF0aW9uYWxFeHByZXNzaW9uID0gKEluLCBZaWVsZCwgQXdhaXQpID0+IChnaXZlbikgPT4ge1xuICBsZXQgU2hpZnRFeHByZXNzaW9uID0gcmVxdWlyZSgnLi9TaGlmdEV4cHJlc3Npb24nKTtcblxuICBsZXQgcGFyYW1zID0gW0luLCBZaWVsZCwgQXdhaXRdO1xuICBsZXQgeyB0eXBlIH0gPSBnaXZlbjtcbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSAnQXdhaXRFeHByZXNzaW9uJzpcbiAgICBjYXNlICdVbmFyeUV4cHJlc3Npb24nOlxuICAgIGNhc2UgJ1VwZGF0ZUV4cHJlc3Npb24nOlxuICAgIGNhc2UgJ0NhbGxFeHByZXNzaW9uJzpcbiAgICBjYXNlICdOZXdFeHByZXNzaW9uJzpcbiAgICBjYXNlICdNZW1iZXJFeHByZXNzaW9uJzpcbiAgICBjYXNlICdPYmplY3RFeHByZXNzaW9uJzpcbiAgICBjYXNlICdBcnJheUV4cHJlc3Npb24nOlxuICAgIGNhc2UgJ0Z1bmN0aW9uRXhwcmVzc2lvbic6XG4gICAgY2FzZSAnQ2xhc3NFeHByZXNzaW9uJzpcbiAgICBjYXNlICdTZXF1ZW5jZUV4cHJlc3Npb24nOlxuICAgIGNhc2UgJ1BhcmVudGhlc2l6ZWRFeHByZXNzaW9uJzpcbiAgICBjYXNlICdUZW1wbGF0ZUxpdGVyYWwnOlxuICAgIGNhc2UgJ1RhZ2dlZFRlbXBsYXRlRXhwcmVzc2lvbic6XG4gICAgY2FzZSAnSWRlbnRpZmllcic6XG4gICAgY2FzZSAnVGhpc0V4cHJlc3Npb24nOlxuICAgIGNhc2UgJ0FycmF5UGF0dGVybic6XG4gICAgY2FzZSAnT2JqZWN0UGF0dGVybic6XG4gICAgY2FzZSAnTWV0YVByb3BlcnR5JzpcbiAgICBjYXNlICdMaXRlcmFsJzoge1xuICAgICAgbGV0IGV4cHIgPSBTaGlmdEV4cHJlc3Npb24oWWllbGQsIEF3YWl0KShnaXZlbik7XG4gICAgICByZXR1cm4gbmV3IE5vZGUoJ1JlbGF0aW9uYWxFeHByZXNzaW9uJywgZ2l2ZW4sIDAsIFtleHByXSwgcGFyYW1zKTtcbiAgICB9XG4gICAgY2FzZSAnQmluYXJ5RXhwcmVzc2lvbic6IHtcbiAgICAgIGlmIChnaXZlbi5vcGVyYXRvciA9PSAnaW4nKSB7XG4gICAgICAgIGxldCB7IGxlZnQsIHJpZ2h0IH0gPSBnaXZlbjtcbiAgICAgICAgbGV0IGwgPSBSZWxhdGlvbmFsRXhwcmVzc2lvbih0cnVlLCBZaWVsZCwgQXdhaXQpKGxlZnQpO1xuICAgICAgICBsZXQgciA9IFNoaWZ0RXhwcmVzc2lvbihZaWVsZCwgQXdhaXQpKHJpZ2h0KTtcbiAgICAgICAgcmV0dXJuIG5ldyBOb2RlKCdSZWxhdGlvbmFsRXhwcmVzc2lvbicsIGdpdmVuLCA2LCBbbCwgcl0sIHBhcmFtcyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsZXQgeyBpbmRleCwgY2hpbGRyZW4gfSA9IE5vZGUuZ2V0QmluYXJ5KFxuICAgICAgICAgIGdpdmVuLFxuICAgICAgICAgIFsnPCcsICc+JywgJzw9JywgJz49JywgJ2luc3RhbmNlb2YnXSxcbiAgICAgICAgICBSZWxhdGlvbmFsRXhwcmVzc2lvbihJbiwgWWllbGQsIEF3YWl0KSxcbiAgICAgICAgICBTaGlmdEV4cHJlc3Npb24oWWllbGQsIEF3YWl0KSxcbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuIG5ldyBOb2RlKCdSZWxhdGlvbmFsRXhwcmVzc2lvbicsIGdpdmVuLCBpbmRleCwgY2hpbGRyZW4sIHBhcmFtcyk7XG4gICAgICB9XG4gICAgfVxuICAgIGRlZmF1bHQ6XG4gICAgICBOb2RlLlRPRE8oYCR7dHlwZX0gQCBSZWxhdGlvbmFsRXhwcmVzc2lvbmApO1xuICB9XG4gIE5vZGUuVE9ETygnUmVsYXRpb25hbEV4cHJlc3Npb24nKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBSZWxhdGlvbmFsRXhwcmVzc2lvbjtcbiIsImNvbnN0IE5vZGUgPSByZXF1aXJlKCcuLi9Ob2RlJyk7XG5cbi8vIFJldHVyblN0YXRlbWVudFtZaWVsZCwgQXdhaXRdIDpcbi8vICAgIHJldHVybiA7XG4vLyAgICByZXR1cm4gW25vIExpbmVUZXJtaW5hdG9yIGhlcmVdIEV4cHJlc3Npb25bK0luLCA/WWllbGQsID9Bd2FpdF0gO1xubGV0IFJldHVyblN0YXRlbWVudCA9IChZaWVsZCwgQXdhaXQpID0+IChnaXZlbikgPT4ge1xuICBjb25zdCBFeHByZXNzaW9uID0gcmVxdWlyZSgnLi9FeHByZXNzaW9uJyk7XG4gIGxldCBwYXJhbXMgPSBbWWllbGQsIEF3YWl0XTtcbiAgbGV0IHsgYXJndW1lbnQgfSA9IGdpdmVuO1xuICBpZiAoYXJndW1lbnQgPT0gbnVsbCkge1xuICAgIHJldHVybiBuZXcgTm9kZSgnUmV0dXJuU3RhdGVtZW50JywgZ2l2ZW4sIDAsIFtdLCBwYXJhbXMpO1xuICB9IGVsc2Uge1xuICAgIGxldCBleHByID0gRXhwcmVzc2lvbih0cnVlLCBZaWVsZCwgQXdhaXQpKGFyZ3VtZW50KTtcbiAgICByZXR1cm4gbmV3IE5vZGUoJ1JldHVyblN0YXRlbWVudCcsIGdpdmVuLCAxLCBbZXhwcl0sIHBhcmFtcyk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBSZXR1cm5TdGF0ZW1lbnQ7XG4iLCJjb25zdCBOb2RlID0gcmVxdWlyZSgnLi4vTm9kZScpO1xuXG4vLyBTY3JpcHQgOiBTY3JpcHRCb2R5X29wdFxubGV0IFNjcmlwdCA9IChnaXZlbikgPT4ge1xuICBjb25zdCBTY3JpcHRCb2R5ID0gcmVxdWlyZSgnLi9TY3JpcHRCb2R5Jyk7XG5cbiAgbGV0IGJvZHkgPSBudWxsO1xuICBpZiAoZ2l2ZW4uYm9keS5sZW5ndGggPiAwKSBib2R5ID0gU2NyaXB0Qm9keShnaXZlbik7XG4gIHJldHVybiBuZXcgTm9kZSgnU2NyaXB0JywgZ2l2ZW4sIDAsIFtib2R5XSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gU2NyaXB0O1xuIiwiY29uc3QgTm9kZSA9IHJlcXVpcmUoJy4uL05vZGUnKTtcblxuLy8gU2NyaXB0Qm9keSA6IFN0YXRlbWVudExpc3RbfllpZWxkLCB+QXdhaXQsIH5SZXR1cm5dXG5sZXQgU2NyaXB0Qm9keSA9IChnaXZlbikgPT4ge1xuICBjb25zdCBTdGF0ZW1lbnRMaXN0ID0gcmVxdWlyZSgnLi9TdGF0ZW1lbnRMaXN0Jyk7XG5cbiAgbGV0IGxpc3QgPSBTdGF0ZW1lbnRMaXN0KGZhbHNlLCBmYWxzZSwgZmFsc2UpKGdpdmVuLmJvZHkpO1xuICByZXR1cm4gbmV3IE5vZGUoJ1NjcmlwdEJvZHknLCBnaXZlbiwgMCwgW2xpc3RdKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBTY3JpcHRCb2R5O1xuIiwiY29uc3QgTm9kZSA9IHJlcXVpcmUoJy4uL05vZGUnKTtcblxuLy8gU2hpZnRFeHByZXNzaW9uW1lpZWxkLCBBd2FpdF0gOlxuLy8gICAgQWRkaXRpdmVFeHByZXNzaW9uWz9ZaWVsZCwgP0F3YWl0XVxuLy8gICAgU2hpZnRFeHByZXNzaW9uWz9ZaWVsZCwgP0F3YWl0XSA8PCBBZGRpdGl2ZUV4cHJlc3Npb25bP1lpZWxkLCA/QXdhaXRdXG4vLyAgICBTaGlmdEV4cHJlc3Npb25bP1lpZWxkLCA/QXdhaXRdID4+IEFkZGl0aXZlRXhwcmVzc2lvbls/WWllbGQsID9Bd2FpdF1cbi8vICAgIFNoaWZ0RXhwcmVzc2lvbls/WWllbGQsID9Bd2FpdF0gPj4+IEFkZGl0aXZlRXhwcmVzc2lvbls/WWllbGQsID9Bd2FpdF1cbmxldCBTaGlmdEV4cHJlc3Npb24gPSAoWWllbGQsIEF3YWl0KSA9PiAoZ2l2ZW4pID0+IHtcbiAgbGV0IEFkZGl0aXZlRXhwcmVzc2lvbiA9IHJlcXVpcmUoJy4vQWRkaXRpdmVFeHByZXNzaW9uJyk7XG5cbiAgbGV0IHBhcmFtcyA9IFtZaWVsZCwgQXdhaXRdO1xuICBsZXQgeyB0eXBlIH0gPSBnaXZlbjtcbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSAnQXdhaXRFeHByZXNzaW9uJzpcbiAgICBjYXNlICdVbmFyeUV4cHJlc3Npb24nOlxuICAgIGNhc2UgJ1VwZGF0ZUV4cHJlc3Npb24nOlxuICAgIGNhc2UgJ0NhbGxFeHByZXNzaW9uJzpcbiAgICBjYXNlICdOZXdFeHByZXNzaW9uJzpcbiAgICBjYXNlICdNZW1iZXJFeHByZXNzaW9uJzpcbiAgICBjYXNlICdPYmplY3RFeHByZXNzaW9uJzpcbiAgICBjYXNlICdBcnJheUV4cHJlc3Npb24nOlxuICAgIGNhc2UgJ0Z1bmN0aW9uRXhwcmVzc2lvbic6XG4gICAgY2FzZSAnQ2xhc3NFeHByZXNzaW9uJzpcbiAgICBjYXNlICdTZXF1ZW5jZUV4cHJlc3Npb24nOlxuICAgIGNhc2UgJ1BhcmVudGhlc2l6ZWRFeHByZXNzaW9uJzpcbiAgICBjYXNlICdUZW1wbGF0ZUxpdGVyYWwnOlxuICAgIGNhc2UgJ1RhZ2dlZFRlbXBsYXRlRXhwcmVzc2lvbic6XG4gICAgY2FzZSAnSWRlbnRpZmllcic6XG4gICAgY2FzZSAnVGhpc0V4cHJlc3Npb24nOlxuICAgIGNhc2UgJ0FycmF5UGF0dGVybic6XG4gICAgY2FzZSAnT2JqZWN0UGF0dGVybic6XG4gICAgY2FzZSAnTWV0YVByb3BlcnR5JzpcbiAgICBjYXNlICdMaXRlcmFsJzoge1xuICAgICAgbGV0IGV4cHIgPSBBZGRpdGl2ZUV4cHJlc3Npb24oWWllbGQsIEF3YWl0KShnaXZlbik7XG4gICAgICByZXR1cm4gbmV3IE5vZGUoJ1NoaWZ0RXhwcmVzc2lvbicsIGdpdmVuLCAwLCBbZXhwcl0sIHBhcmFtcyk7XG4gICAgfVxuICAgIGNhc2UgJ0JpbmFyeUV4cHJlc3Npb24nOiB7XG4gICAgICBsZXQgeyBpbmRleCwgY2hpbGRyZW4gfSA9IE5vZGUuZ2V0QmluYXJ5KFxuICAgICAgICBnaXZlbixcbiAgICAgICAgWyc8PCcsICc+PicsICc+Pj4nXSxcbiAgICAgICAgU2hpZnRFeHByZXNzaW9uKFlpZWxkLCBBd2FpdCksXG4gICAgICAgIEFkZGl0aXZlRXhwcmVzc2lvbihZaWVsZCwgQXdhaXQpLFxuICAgICAgKTtcbiAgICAgIHJldHVybiBuZXcgTm9kZSgnU2hpZnRFeHByZXNzaW9uJywgZ2l2ZW4sIGluZGV4LCBjaGlsZHJlbiwgcGFyYW1zKTtcbiAgICB9XG4gICAgZGVmYXVsdDpcbiAgICAgIE5vZGUuVE9ETyhgJHt0eXBlfSBAIFNoaWZ0RXhwcmVzc2lvbmApO1xuICB9XG4gIE5vZGUuVE9ETygnU2hpZnRFeHByZXNzaW9uJyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gU2hpZnRFeHByZXNzaW9uO1xuIiwiY29uc3QgTm9kZSA9IHJlcXVpcmUoJy4uL05vZGUnKTtcblxuLy8gU2hvcnRDaXJjdWl0RXhwcmVzc2lvbltJbiwgWWllbGQsIEF3YWl0XSA6XG4vLyAgICBMb2dpY2FsT1JFeHByZXNzaW9uWz9JbiwgP1lpZWxkLCA/QXdhaXRdXG4vLyAgICBDb2FsZXNjZUV4cHJlc3Npb25bP0luLCA/WWllbGQsID9Bd2FpdF1cbmxldCBTaG9ydENpcmN1aXRFeHByZXNzaW9uID0gKEluLCBZaWVsZCwgQXdhaXQpID0+IChnaXZlbikgPT4ge1xuICBsZXQgTG9naWNhbE9SRXhwcmVzc2lvbiA9IHJlcXVpcmUoJy4vTG9naWNhbE9SRXhwcmVzc2lvbicpO1xuXG4gIGxldCBwYXJhbXMgPSBbSW4sIFlpZWxkLCBBd2FpdF07XG4gIGxldCB7IHR5cGUgfSA9IGdpdmVuO1xuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlICdBd2FpdEV4cHJlc3Npb24nOlxuICAgIGNhc2UgJ1VuYXJ5RXhwcmVzc2lvbic6XG4gICAgY2FzZSAnTG9naWNhbEV4cHJlc3Npb24nOlxuICAgIGNhc2UgJ0JpbmFyeUV4cHJlc3Npb24nOlxuICAgIGNhc2UgJ1VwZGF0ZUV4cHJlc3Npb24nOlxuICAgIGNhc2UgJ0NhbGxFeHByZXNzaW9uJzpcbiAgICBjYXNlICdOZXdFeHByZXNzaW9uJzpcbiAgICBjYXNlICdNZW1iZXJFeHByZXNzaW9uJzpcbiAgICBjYXNlICdPYmplY3RFeHByZXNzaW9uJzpcbiAgICBjYXNlICdBcnJheUV4cHJlc3Npb24nOlxuICAgIGNhc2UgJ0Z1bmN0aW9uRXhwcmVzc2lvbic6XG4gICAgY2FzZSAnQ2xhc3NFeHByZXNzaW9uJzpcbiAgICBjYXNlICdTZXF1ZW5jZUV4cHJlc3Npb24nOlxuICAgIGNhc2UgJ1BhcmVudGhlc2l6ZWRFeHByZXNzaW9uJzpcbiAgICBjYXNlICdUZW1wbGF0ZUxpdGVyYWwnOlxuICAgIGNhc2UgJ1RhZ2dlZFRlbXBsYXRlRXhwcmVzc2lvbic6XG4gICAgY2FzZSAnSWRlbnRpZmllcic6XG4gICAgY2FzZSAnVGhpc0V4cHJlc3Npb24nOlxuICAgIGNhc2UgJ0FycmF5UGF0dGVybic6XG4gICAgY2FzZSAnT2JqZWN0UGF0dGVybic6XG4gICAgY2FzZSAnTWV0YVByb3BlcnR5JzpcbiAgICBjYXNlICdMaXRlcmFsJzoge1xuICAgICAgbGV0IGV4cHIgPSBMb2dpY2FsT1JFeHByZXNzaW9uKEluLCBZaWVsZCwgQXdhaXQpKGdpdmVuKTtcbiAgICAgIHJldHVybiBuZXcgTm9kZSgnU2hvcnRDaXJjdWl0RXhwcmVzc2lvbicsIGdpdmVuLCAwLCBbZXhwcl0sIHBhcmFtcyk7XG4gICAgfVxuICAgIGRlZmF1bHQ6XG4gICAgICBOb2RlLlRPRE8oYCR7dHlwZX0gQCBTaG9ydENpcmN1aXRFeHByZXNzaW9uYCk7XG4gIH1cbiAgTm9kZS5UT0RPKCdTaG9ydENpcmN1aXRFeHByZXNzaW9uJyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gU2hvcnRDaXJjdWl0RXhwcmVzc2lvbjtcbiIsImNvbnN0IE5vZGUgPSByZXF1aXJlKCcuLi9Ob2RlJyk7XG5cbi8vIFNpbmdsZU5hbWVCaW5kaW5nW1lpZWxkLCBBd2FpdF0gOlxuLy8gICAgQmluZGluZ0lkZW50aWZpZXJbP1lpZWxkLCA/QXdhaXRdIEluaXRpYWxpemVyWytJbiwgP1lpZWxkLCA/QXdhaXRdb3B0XG5sZXQgU2luZ2xlTmFtZUJpbmRpbmcgPSAoWWllbGQsIEF3YWl0KSA9PiAoZ2l2ZW4pID0+IHtcbiAgY29uc3QgQmluZGluZ0lkZW50aWZpZXIgPSByZXF1aXJlKCcuL0JpbmRpbmdJZGVudGlmaWVyJyk7XG4gIGNvbnN0IEluaXRpYWxpemVyID0gcmVxdWlyZSgnLi9Jbml0aWFsaXplcicpO1xuICBsZXQgcGFyYW1zID0gW1lpZWxkLCBBd2FpdF07XG4gIGxldCB7IHR5cGUsIGxlZnQsIHJpZ2h0IH0gPSBnaXZlbjtcbiAgaWYgKHR5cGUgPT0gJ0lkZW50aWZpZXInKSB7XG4gICAgbGV0IHggPSBCaW5kaW5nSWRlbnRpZmllcihZaWVsZCwgQXdhaXQpKGdpdmVuKTtcbiAgICByZXR1cm4gbmV3IE5vZGUoJ1NpbmdsZU5hbWVCaW5kaW5nJywgZ2l2ZW4sIDAsIFt4LCBudWxsXSwgcGFyYW1zKTtcbiAgfSBlbHNlIHtcbiAgICBpZiAocmlnaHQudHlwZSA9PT0gJ0Fzc2lnbm1lbnRQYXR0ZXJuJykge1xuICAgICAgbGVmdCA9IHJpZ2h0LmxlZnQ7XG4gICAgICByaWdodCA9IHJpZ2h0LnJpZ2h0O1xuICAgIH1cbiAgICBsZXQgeCA9IEJpbmRpbmdJZGVudGlmaWVyKFlpZWxkLCBBd2FpdCkobGVmdCk7XG4gICAgbGV0IGluaXQgPSBJbml0aWFsaXplcih0cnVlLCBZaWVsZCwgQXdhaXQpKHJpZ2h0KTtcbiAgICByZXR1cm4gbmV3IE5vZGUoJ1NpbmdsZU5hbWVCaW5kaW5nJywgZ2l2ZW4sIDAsIFt4LCBpbml0XSwgcGFyYW1zKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFNpbmdsZU5hbWVCaW5kaW5nO1xuIiwiY29uc3QgTm9kZSA9IHJlcXVpcmUoJy4uL05vZGUnKTtcblxuLy8gU3ByZWFkRWxlbWVudFtZaWVsZCwgQXdhaXRdIDpcbi8vICAgIC4uLiBBc3NpZ25tZW50RXhwcmVzc2lvblsrSW4sID9ZaWVsZCwgP0F3YWl0XVxubGV0IFNwcmVhZEVsZW1lbnQgPSAoWWllbGQsIEF3YWl0KSA9PiAoZ2l2ZW4pID0+IHtcbiAgbGV0IEFzc2lnbm1lbnRFeHByZXNzaW9uID0gcmVxdWlyZSgnLi9Bc3NpZ25tZW50RXhwcmVzc2lvbicpO1xuICBsZXQgcGFyYW1zID0gW1lpZWxkLCBBd2FpdF07XG4gIGxldCBleHByID0gQXNzaWdubWVudEV4cHJlc3Npb24odHJ1ZSwgWWllbGQsIEF3YWl0KShnaXZlbi5hcmd1bWVudCk7XG4gIHJldHVybiBuZXcgTm9kZSgnU3ByZWFkRWxlbWVudCcsIGdpdmVuLCAwLCBbZXhwcl0sIHBhcmFtcyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gU3ByZWFkRWxlbWVudDtcbiIsImNvbnN0IE5vZGUgPSByZXF1aXJlKCcuLi9Ob2RlJyk7XG5cbi8vIFN0YXRlbWVudFtZaWVsZCwgQXdhaXQsIFJldHVybl0gOlxuLy8gICAgQmxvY2tTdGF0ZW1lbnRbP1lpZWxkLCA/QXdhaXQsID9SZXR1cm5dXG4vLyAgICBWYXJpYWJsZVN0YXRlbWVudFs/WWllbGQsID9Bd2FpdF1cbi8vICAgIEVtcHR5U3RhdGVtZW50XG4vLyAgICBFeHByZXNzaW9uU3RhdGVtZW50Wz9ZaWVsZCwgP0F3YWl0XVxuLy8gICAgSWZTdGF0ZW1lbnRbP1lpZWxkLCA/QXdhaXQsID9SZXR1cm5dXG4vLyAgICBCcmVha2FibGVTdGF0ZW1lbnRbP1lpZWxkLCA/QXdhaXQsID9SZXR1cm5dXG4vLyAgICBDb250aW51ZVN0YXRlbWVudFs/WWllbGQsID9Bd2FpdF1cbi8vICAgIEJyZWFrU3RhdGVtZW50Wz9ZaWVsZCwgP0F3YWl0XVxuLy8gICAgWytSZXR1cm5dIFJldHVyblN0YXRlbWVudFs/WWllbGQsID9Bd2FpdF1cbi8vICAgIFdpdGhTdGF0ZW1lbnRbP1lpZWxkLCA/QXdhaXQsID9SZXR1cm5dXG4vLyAgICBMYWJlbGxlZFN0YXRlbWVudFs/WWllbGQsID9Bd2FpdCwgP1JldHVybl1cbi8vICAgIFRocm93U3RhdGVtZW50Wz9ZaWVsZCwgP0F3YWl0XVxuLy8gICAgVHJ5U3RhdGVtZW50Wz9ZaWVsZCwgP0F3YWl0LCA/UmV0dXJuXVxuLy8gICAgRGVidWdnZXJTdGF0ZW1lbnRcbmxldCBTdGF0ZW1lbnQgPSAoWWllbGQsIEF3YWl0LCBSZXR1cm4pID0+IChnaXZlbikgPT4ge1xuICBjb25zdCBCbG9ja1N0YXRlbWVudCA9IHJlcXVpcmUoJy4vQmxvY2tTdGF0ZW1lbnQnKTtcbiAgY29uc3QgVmFyaWFibGVTdGF0ZW1lbnQgPSByZXF1aXJlKCcuL1ZhcmlhYmxlU3RhdGVtZW50Jyk7XG4gIGNvbnN0IEVtcHR5U3RhdGVtZW50ID0gcmVxdWlyZSgnLi9FbXB0eVN0YXRlbWVudCcpO1xuICBjb25zdCBFeHByZXNzaW9uU3RhdGVtZW50ID0gcmVxdWlyZSgnLi9FeHByZXNzaW9uU3RhdGVtZW50Jyk7XG4gIGNvbnN0IElmU3RhdGVtZW50ID0gcmVxdWlyZSgnLi9JZlN0YXRlbWVudCcpO1xuICBjb25zdCBCcmVha2FibGVTdGF0ZW1lbnQgPSByZXF1aXJlKCcuL0JyZWFrYWJsZVN0YXRlbWVudCcpO1xuICBjb25zdCBDb250aW51ZVN0YXRlbWVudCA9IHJlcXVpcmUoJy4vQ29udGludWVTdGF0ZW1lbnQnKTtcbiAgY29uc3QgQnJlYWtTdGF0ZW1lbnQgPSByZXF1aXJlKCcuL0JyZWFrU3RhdGVtZW50Jyk7XG4gIGNvbnN0IFJldHVyblN0YXRlbWVudCA9IHJlcXVpcmUoJy4vUmV0dXJuU3RhdGVtZW50Jyk7XG4gIGNvbnN0IFdpdGhTdGF0ZW1lbnQgPSByZXF1aXJlKCcuL1dpdGhTdGF0ZW1lbnQnKTtcbiAgY29uc3QgTGFiZWxsZWRTdGF0ZW1lbnQgPSByZXF1aXJlKCcuL0xhYmVsbGVkU3RhdGVtZW50Jyk7XG4gIGNvbnN0IFRocm93U3RhdGVtZW50ID0gcmVxdWlyZSgnLi9UaHJvd1N0YXRlbWVudCcpO1xuICBjb25zdCBUcnlTdGF0ZW1lbnQgPSByZXF1aXJlKCcuL1RyeVN0YXRlbWVudCcpO1xuICBjb25zdCBEZWJ1Z2dlclN0YXRlbWVudCA9IHJlcXVpcmUoJy4vRGVidWdnZXJTdGF0ZW1lbnQnKTtcblxuICBsZXQgbmFtZUxpc3QgPSBbXG4gICAgJ0Jsb2NrU3RhdGVtZW50JyxcbiAgICAnVmFyaWFibGVTdGF0ZW1lbnQnLFxuICAgICdFbXB0eVN0YXRlbWVudCcsXG4gICAgJ0V4cHJlc3Npb25TdGF0ZW1lbnQnLFxuICAgICdJZlN0YXRlbWVudCcsXG4gICAgJ0JyZWFrYWJsZVN0YXRlbWVudCcsXG4gICAgJ0NvbnRpbnVlU3RhdGVtZW50JyxcbiAgICAnQnJlYWtTdGF0ZW1lbnQnLFxuICAgICdSZXR1cm5TdGF0ZW1lbnQnLFxuICAgICdXaXRoU3RhdGVtZW50JyxcbiAgICAnTGFiZWxlZFN0YXRlbWVudCcsXG4gICAgJ1Rocm93U3RhdGVtZW50JyxcbiAgICAnVHJ5U3RhdGVtZW50JyxcbiAgICAnRGVidWdnZXJTdGF0ZW1lbnQnLFxuICBdO1xuXG4gIGxldCBnZW5MaXN0ID0gW1xuICAgIEJsb2NrU3RhdGVtZW50KFlpZWxkLCBBd2FpdCwgUmV0dXJuKSxcbiAgICBWYXJpYWJsZVN0YXRlbWVudChZaWVsZCwgQXdhaXQpLFxuICAgIEVtcHR5U3RhdGVtZW50LFxuICAgIEV4cHJlc3Npb25TdGF0ZW1lbnQoWWllbGQsIEF3YWl0KSxcbiAgICBJZlN0YXRlbWVudChZaWVsZCwgQXdhaXQsIFJldHVybiksXG4gICAgQnJlYWthYmxlU3RhdGVtZW50KFlpZWxkLCBBd2FpdCwgUmV0dXJuKSxcbiAgICBDb250aW51ZVN0YXRlbWVudChZaWVsZCwgQXdhaXQpLFxuICAgIEJyZWFrU3RhdGVtZW50KFlpZWxkLCBBd2FpdCksXG4gICAgUmV0dXJuU3RhdGVtZW50KFlpZWxkLCBBd2FpdCksXG4gICAgV2l0aFN0YXRlbWVudChZaWVsZCwgQXdhaXQsIFJldHVybiksXG4gICAgTGFiZWxsZWRTdGF0ZW1lbnQoWWllbGQsIEF3YWl0LCBSZXR1cm4pLFxuICAgIFRocm93U3RhdGVtZW50KFlpZWxkLCBBd2FpdCksXG4gICAgVHJ5U3RhdGVtZW50KFlpZWxkLCBBd2FpdCwgUmV0dXJuKSxcbiAgICBEZWJ1Z2dlclN0YXRlbWVudCxcbiAgXTtcbiAgbGV0IHBhcmFtcyA9IFtZaWVsZCwgQXdhaXQsIFJldHVybl07XG4gIHN3aXRjaCAoZ2l2ZW4udHlwZSkge1xuICAgIGNhc2UgJ1ZhcmlhYmxlRGVjbGFyYXRpb24nOiB7XG4gICAgICBsZXQgdmFyU3RtdCA9IFZhcmlhYmxlU3RhdGVtZW50KFlpZWxkLCBBd2FpdCkoZ2l2ZW4pO1xuICAgICAgcmV0dXJuIG5ldyBOb2RlKCdTdGF0ZW1lbnQnLCBnaXZlbiwgMSwgW3ZhclN0bXRdLCBwYXJhbXMpO1xuICAgIH1cbiAgICBjYXNlICdTd2l0Y2hTdGF0ZW1lbnQnOlxuICAgIGNhc2UgJ1doaWxlU3RhdGVtZW50JzpcbiAgICBjYXNlICdEb1doaWxlU3RhdGVtZW50JzpcbiAgICBjYXNlICdGb3JTdGF0ZW1lbnQnOlxuICAgIGNhc2UgJ0ZvckluU3RhdGVtZW50JzpcbiAgICBjYXNlICdGb3JPZlN0YXRlbWVudCc6IHtcbiAgICAgIGxldCBzdG10ID0gQnJlYWthYmxlU3RhdGVtZW50KFlpZWxkLCBBd2FpdCwgUmV0dXJuKShnaXZlbik7XG4gICAgICByZXR1cm4gbmV3IE5vZGUoJ1N0YXRlbWVudCcsIGdpdmVuLCA1LCBbc3RtdF0sIHBhcmFtcyk7XG4gICAgfVxuICAgIGRlZmF1bHQ6IHtcbiAgICAgIGxldCByaHMgPSBOb2RlLmdldFJocyhuYW1lTGlzdCwgZ2VuTGlzdCwgZ2l2ZW4pO1xuICAgICAgaWYgKHJocyA9PT0gbnVsbCkgTm9kZS5UT0RPKGAke2dpdmVuLnR5cGV9IEAgU3RhdGVtZW50YCk7XG4gICAgICBsZXQgeyBpbmRleCwgY2hpbGQgfSA9IHJocztcbiAgICAgIHJldHVybiBuZXcgTm9kZSgnU3RhdGVtZW50JywgZ2l2ZW4sIGluZGV4LCBbY2hpbGRdLCBwYXJhbXMpO1xuICAgIH1cbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFN0YXRlbWVudDtcbiIsImNvbnN0IE5vZGUgPSByZXF1aXJlKCcuLi9Ob2RlJyk7XG5cbi8vIFN0YXRlbWVudExpc3RbWWllbGQsIEF3YWl0LCBSZXR1cm5dIDpcbi8vICAgIFN0YXRlbWVudExpc3RJdGVtWz9ZaWVsZCwgP0F3YWl0LCA/UmV0dXJuXVxuLy8gICAgU3RhdGVtZW50TGlzdFs/WWllbGQsID9Bd2FpdCwgP1JldHVybl0gU3RhdGVtZW50TGlzdEl0ZW1bP1lpZWxkLCA/QXdhaXQsID9SZXR1cm5dXG5sZXQgU3RhdGVtZW50TGlzdCA9IChZaWVsZCwgQXdhaXQsIFJldHVybikgPT4gKGdpdmVuKSA9PiB7XG4gIGNvbnN0IFN0YXRlbWVudExpc3RJdGVtID0gcmVxdWlyZSgnLi9TdGF0ZW1lbnRMaXN0SXRlbScpO1xuICBsZXQgZ2VuQ2hpbGQgPSBTdGF0ZW1lbnRMaXN0SXRlbShZaWVsZCwgQXdhaXQsIFJldHVybik7XG4gIGxldCBwYXJhbXMgPSBbWWllbGQsIEF3YWl0LCBSZXR1cm5dO1xuICByZXR1cm4gTm9kZS5mcm9tTGlzdCgnU3RhdGVtZW50TGlzdCcsIGdpdmVuLCBnZW5DaGlsZCwgcGFyYW1zKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBTdGF0ZW1lbnRMaXN0O1xuIiwiY29uc3QgTm9kZSA9IHJlcXVpcmUoJy4uL05vZGUnKTtcblxuLy8gU3RhdGVtZW50TGlzdEl0ZW1bWWllbGQsIEF3YWl0LCBSZXR1cm5dIDpcbi8vICAgIFN0YXRlbWVudFs/WWllbGQsID9Bd2FpdCwgP1JldHVybl1cbi8vICAgIERlY2xhcmF0aW9uWz9ZaWVsZCwgP0F3YWl0XVxubGV0IFN0YXRlbWVudExpc3RJdGVtID0gKFlpZWxkLCBBd2FpdCwgUmV0dXJuKSA9PiAoZ2l2ZW4pID0+IHtcbiAgY29uc3QgU3RhdGVtZW50ID0gcmVxdWlyZSgnLi9TdGF0ZW1lbnQnKTtcbiAgY29uc3QgRGVjbGFyYXRpb24gPSByZXF1aXJlKCcuL0RlY2xhcmF0aW9uJyk7XG5cbiAgbGV0IHBhcmFtcyA9IFtZaWVsZCwgQXdhaXQsIFJldHVybl07XG4gIGxldCB7IHR5cGUsIGtpbmQgfSA9IGdpdmVuXG4gIGlmICh0eXBlLmVuZHNXaXRoKCdTdGF0ZW1lbnQnKSB8fCAoXG4gICAgdHlwZSA9PT0gJ1ZhcmlhYmxlRGVjbGFyYXRpb24nICYmXG4gICAga2luZCA9PT0gJ3ZhcidcbiAgKSkge1xuICAgIGxldCBzdG10ID0gU3RhdGVtZW50KFlpZWxkLCBBd2FpdCwgUmV0dXJuKShnaXZlbik7XG4gICAgcmV0dXJuIG5ldyBOb2RlKCdTdGF0ZW1lbnRMaXN0SXRlbScsIGdpdmVuLCAwLCBbc3RtdF0sIHBhcmFtcyk7XG4gIH0gZWxzZSB7XG4gICAgbGV0IGRlY2wgPSBEZWNsYXJhdGlvbihZaWVsZCwgQXdhaXQpKGdpdmVuKTtcbiAgICByZXR1cm4gbmV3IE5vZGUoJ1N0YXRlbWVudExpc3RJdGVtJywgZ2l2ZW4sIDEsIFtkZWNsXSwgcGFyYW1zKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFN0YXRlbWVudExpc3RJdGVtO1xuIiwiY29uc3QgTm9kZSA9IHJlcXVpcmUoJy4uL05vZGUnKTtcbmNvbnN0IExleGljYWxOb2RlID0gcmVxdWlyZSgnLi4vTGV4aWNhbE5vZGUnKTtcblxuLy8gU3Vic3RpdHV0aW9uVGVtcGxhdGVbWWllbGQsIEF3YWl0LCBUYWdnZWRdIDpcbi8vICAgIFRlbXBsYXRlSGVhZCBFeHByZXNzaW9uWytJbiwgP1lpZWxkLCA/QXdhaXRdIFRlbXBsYXRlU3BhbnNbP1lpZWxkLCA/QXdhaXQsID9UYWdnZWRdXG5sZXQgU3Vic3RpdHV0aW9uVGVtcGxhdGUgPSAoWWllbGQsIEF3YWl0LCBUYWdnZWQpID0+IChnaXZlbikgPT4ge1xuICBjb25zdCBFeHByZXNzaW9uID0gcmVxdWlyZSgnLi9FeHByZXNzaW9uJyk7XG4gIGNvbnN0IFRlbXBsYXRlU3BhbnMgPSByZXF1aXJlKCcuL1RlbXBsYXRlU3BhbnMnKTtcbiAgbGV0IHBhcmFtcyA9IFtZaWVsZCwgQXdhaXQsIFRhZ2dlZF07XG4gIGxldCB7IHF1YXNpcywgZXhwcmVzc2lvbnMgfSA9IGdpdmVuO1xuICBsZXQgaGVhZCA9ICdgJyArIHF1YXNpcy5zaGlmdCgpLnZhbHVlLnJhdyArICckeyc7XG4gIGxldCBoZWFkTGV4aWNhbCA9IG5ldyBMZXhpY2FsTm9kZSgnVGVtcGxhdGVIZWFkJywgaGVhZCk7XG4gIGxldCBleHByID0gRXhwcmVzc2lvbih0cnVlLCBZaWVsZCwgQXdhaXQpKGV4cHJlc3Npb25zLnNoaWZ0KCkpO1xuICBsZXQgc3BhbnMgPSBUZW1wbGF0ZVNwYW5zKFlpZWxkLCBBd2FpdCwgVGFnZ2VkKShnaXZlbik7XG4gIHJldHVybiBuZXcgTm9kZSgnU3Vic3RpdHV0aW9uVGVtcGxhdGUnLCBnaXZlbiwgMCwgW2hlYWRMZXhpY2FsLCBleHByLCBzcGFuc10sIHBhcmFtcyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gU3Vic3RpdHV0aW9uVGVtcGxhdGU7XG4iLCJjb25zdCBOb2RlID0gcmVxdWlyZSgnLi4vTm9kZScpO1xuXG4vLyBTdXBlckNhbGxbWWllbGQsIEF3YWl0XToge1xuLy8gICBgc3VwZXJgIEFyZ3VtZW50c1s/WWllbGQsID9Bd2FpdF1cbi8vIH1cblxubGV0IFN1cGVyQ2FsbCA9IChZaWVsZCwgQXdhaXQpID0+IChnaXZlbikgPT4ge1xuICBjb25zdCBBcmd1bWVudHMgPSByZXF1aXJlKCcuL0FyZ3VtZW50cycpO1xuICBsZXQgcGFyYW1zID0gW1lpZWxkLCBBd2FpdF07XG4gIC8vIFRPRE8gZml4IHNwYW5cbiAgY29uc3QgYXJncyA9IEFyZ3VtZW50cyhZaWVsZCwgQXdhaXQpKGdpdmVuLmFyZ3VtZW50cyk7XG4gIHJldHVybiBuZXcgTm9kZSgnU3VwZXJDYWxsJywgZ2l2ZW4sIDAsIFthcmdzXSwgcGFyYW1zKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBTdXBlckNhbGw7XG4iLCJjb25zdCBOb2RlID0gcmVxdWlyZSgnLi4vTm9kZScpO1xuXG4vLyBTdXBlclByb3BlcnR5W1lpZWxkLCBBd2FpdF0gOlxuLy8gICBzdXBlciBbIEV4cHJlc3Npb25bK0luLCA/WWllbGQsID9Bd2FpdF0gXVxuLy8gICBzdXBlciAuIElkZW50aWZpZXJOYW1lXG5cbmxldCBTdXBlclByb3BlcnR5ID0gKFlpZWxkLCBBd2FpdCkgPT4gKGdpdmVuKSA9PiB7XG4gIGNvbnN0IEV4cHJlc3Npb24gPSByZXF1aXJlKCcuL0V4cHJlc3Npb24nKTtcblxuICBsZXQgcGFyYW1zID0gW1lpZWxkLCBBd2FpdF07XG4gIGxldCB7IG9iamVjdCwgcHJvcGVydHksIGNvbXB1dGVkIH0gPSBnaXZlbjtcbiAgaWYgKG9iamVjdC50eXBlID09PSAnU3VwZXInKSB7XG4gICAgaWYgKHByb3BlcnR5LnR5cGUgPT09ICdJZGVudGlmaWVyJyAmJiAhY29tcHV0ZWQpIHtcbiAgICAgIHJldHVybiBuZXcgTm9kZSgnU3VwZXJQcm9wZXJ0eScsIGdpdmVuLCAxLCBbcHJvcGVydHkubmFtZV0sIHBhcmFtcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxldCBleHByID0gRXhwcmVzc2lvbih0cnVlLCBZaWVsZCwgQXdhaXQpKHByb3BlcnR5KTtcbiAgICAgIHJldHVybiBuZXcgTm9kZSgnU3VwZXJQcm9wZXJ0eScsIHByb3BlcnR5LCAwLCBbZXhwcl0sIHBhcmFtcyk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIE5vZGUuVE9ETygnU3VwZXJQcm9wZXJ0eScpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gU3VwZXJQcm9wZXJ0eTtcbiIsImNvbnN0IE5vZGUgPSByZXF1aXJlKCcuLi9Ob2RlJyk7XG5cbi8vIFN3aXRjaFN0YXRlbWVudFtZaWVsZCwgQXdhaXQsIFJldHVybl0gOlxuLy8gICAgc3dpdGNoICggRXhwcmVzc2lvblsrSW4sID9ZaWVsZCwgP0F3YWl0XSApIENhc2VCbG9ja1s/WWllbGQsID9Bd2FpdCwgP1JldHVybl1cbmxldCBTd2l0Y2hTdGF0ZW1lbnQgPSAoWWllbGQsIEF3YWl0LCBSZXR1cm4pID0+IChnaXZlbikgPT4ge1xuICBjb25zdCBFeHByZXNzaW9uID0gcmVxdWlyZSgnLi9FeHByZXNzaW9uJyk7XG4gIGNvbnN0IENhc2VCbG9jayA9IHJlcXVpcmUoJy4vQ2FzZUJsb2NrJyk7XG4gIGxldCBwYXJhbXMgPSBbWWllbGQsIEF3YWl0LCBSZXR1cm5dO1xuICBsZXQgZXhwciA9IEV4cHJlc3Npb24odHJ1ZSwgWWllbGQsIEF3YWl0KShnaXZlbi5kaXNjcmltaW5hbnQpO1xuICBsZXQgYmxvY2sgPSBDYXNlQmxvY2soWWllbGQsIEF3YWl0LCBSZXR1cm4pKGdpdmVuLmNhc2VzKTtcbiAgcmV0dXJuIG5ldyBOb2RlKCdTd2l0Y2hTdGF0ZW1lbnQnLCBnaXZlbiwgMCwgW2V4cHIsIGJsb2NrXSwgcGFyYW1zKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBTd2l0Y2hTdGF0ZW1lbnQ7XG4iLCJjb25zdCBOb2RlID0gcmVxdWlyZSgnLi4vTm9kZScpO1xuY29uc3QgTGV4aWNhbE5vZGUgPSByZXF1aXJlKCcuLi9MZXhpY2FsTm9kZScpO1xuXG4vLyBUZW1wbGF0ZUxpdGVyYWxbWWllbGQsIEF3YWl0LCBUYWdnZWRdIDpcbi8vICAgIE5vU3Vic3RpdHV0aW9uVGVtcGxhdGVcbi8vICAgIFN1YnN0aXR1dGlvblRlbXBsYXRlWz9ZaWVsZCwgP0F3YWl0LCA/VGFnZ2VkXVxubGV0IFRlbXBsYXRlTGl0ZXJhbCA9IChZaWVsZCwgQXdhaXQsIFRhZ2dlZCkgPT4gKGdpdmVuKSA9PiB7XG4gIGNvbnN0IFN1YnN0aXR1dGlvblRlbXBsYXRlID0gcmVxdWlyZSgnLi9TdWJzdGl0dXRpb25UZW1wbGF0ZScpO1xuICBsZXQgcGFyYW1zID0gW1lpZWxkLCBBd2FpdCwgVGFnZ2VkXTtcbiAgbGV0IHsgcXVhc2lzLCBleHByZXNzaW9ucyB9ID0gZ2l2ZW47XG4gIGlmIChleHByZXNzaW9ucy5sZW5ndGggPT0gMCAmJiBxdWFzaXMubGVuZ3RoID09IDEpIHtcbiAgICBsZXQgdGVtcCA9ICdgJyArIHF1YXNpc1swXS52YWx1ZS5yYXcgKyAnYCdcbiAgICBsZXQgbGV4aWNhbCA9IG5ldyBMZXhpY2FsTm9kZSgnTm9TdWJzdGl0dXRpb25UZW1wbGF0ZScsIHRlbXApO1xuICAgIHJldHVybiBuZXcgTm9kZSgnVGVtcGxhdGVMaXRlcmFsJywgZ2l2ZW4sIDAsIFtsZXhpY2FsXSwgcGFyYW1zKTtcbiAgfSBlbHNlIHtcbiAgICBsZXQgc3VicyA9IFN1YnN0aXR1dGlvblRlbXBsYXRlKFlpZWxkLCBBd2FpdCwgVGFnZ2VkKShnaXZlbik7XG4gICAgcmV0dXJuIG5ldyBOb2RlKCdUZW1wbGF0ZUxpdGVyYWwnLCBnaXZlbiwgMSwgW3N1YnNdLCBwYXJhbXMpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gVGVtcGxhdGVMaXRlcmFsO1xuIiwiY29uc3QgTm9kZSA9IHJlcXVpcmUoJy4uL05vZGUnKTtcbmNvbnN0IExleGljYWxOb2RlID0gcmVxdWlyZSgnLi4vTGV4aWNhbE5vZGUnKTtcblxuLy8gVGVtcGxhdGVNaWRkbGVMaXN0W1lpZWxkLCBBd2FpdCwgVGFnZ2VkXSA6XG4vLyAgICBUZW1wbGF0ZU1pZGRsZSBFeHByZXNzaW9uWytJbiwgP1lpZWxkLCA/QXdhaXRdXG4vLyAgICBUZW1wbGF0ZU1pZGRsZUxpc3RbP1lpZWxkLCA/QXdhaXQsID9UYWdnZWRdIFRlbXBsYXRlTWlkZGxlIEV4cHJlc3Npb25bK0luLCA/WWllbGQsID9Bd2FpdF1cbmxldCBUZW1wbGF0ZU1pZGRsZUxpc3QgPSAoWWllbGQsIEF3YWl0LCBUYWdnZWQpID0+IChnaXZlbikgPT4ge1xuICBjb25zdCBFeHByZXNzaW9uID0gcmVxdWlyZSgnLi9FeHByZXNzaW9uJyk7XG4gIGxldCBwYXJhbXMgPSBbWWllbGQsIEF3YWl0LCBUYWdnZWRdO1xuICBsZXQgeyBxdWFzaXMsIGV4cHJlc3Npb25zIH0gPSBnaXZlbjtcbiAgbGV0IG1pZGRsZSA9ICd9JyArIHF1YXNpcy5wb3AoKS52YWx1ZS5yYXcgKyAnJHsnO1xuICBsZXQgbWlkZGxlTGV4aWNhbCA9IG5ldyBMZXhpY2FsTm9kZSgnVGVtcGxhdGVNaWRkbGUnLCBtaWRkbGUpO1xuICBsZXQgZXhwciA9IEV4cHJlc3Npb24odHJ1ZSwgWWllbGQsIEF3YWl0KShleHByZXNzaW9ucy5wb3AoKSk7XG4gIGlmIChxdWFzaXMubGVuZ3RoID09IDApIHtcbiAgICByZXR1cm4gbmV3IE5vZGUoJ1RlbXBsYXRlTWlkZGxlTGlzdCcsIGdpdmVuLCAwLCBbbWlkZGxlTGV4aWNhbCwgZXhwcl0sIHBhcmFtcyk7XG4gIH0gZWxzZSB7XG4gICAgbGV0IGxpc3QgPSBUZW1wbGF0ZU1pZGRsZUxpc3QoWWllbGQsIEF3YWl0LCBUYWdnZWQpKGdpdmVuKTtcbiAgICByZXR1cm4gbmV3IE5vZGUoJ1RlbXBsYXRlTWlkZGxlTGlzdCcsIGdpdmVuLCAxLCBbbGlzdCwgbWlkZGxlTGV4aWNhbCwgZXhwcl0sIHBhcmFtcyk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBUZW1wbGF0ZU1pZGRsZUxpc3Q7XG4iLCJjb25zdCBOb2RlID0gcmVxdWlyZSgnLi4vTm9kZScpO1xuY29uc3QgTGV4aWNhbE5vZGUgPSByZXF1aXJlKCcuLi9MZXhpY2FsTm9kZScpO1xuXG4vLyBUZW1wbGF0ZVNwYW5zW1lpZWxkLCBBd2FpdCwgVGFnZ2VkXSA6XG4vLyAgICBUZW1wbGF0ZVRhaWxcbi8vICAgIFRlbXBsYXRlTWlkZGxlTGlzdFs/WWllbGQsID9Bd2FpdCwgP1RhZ2dlZF0gVGVtcGxhdGVUYWlsXG5sZXQgVGVtcGxhdGVTcGFucyA9IChZaWVsZCwgQXdhaXQsIFRhZ2dlZCkgPT4gKGdpdmVuKSA9PiB7XG4gIGNvbnN0IFRlbXBsYXRlTWlkZGxlTGlzdCA9IHJlcXVpcmUoJy4vVGVtcGxhdGVNaWRkbGVMaXN0Jyk7XG4gIGxldCBwYXJhbXMgPSBbWWllbGQsIEF3YWl0LCBUYWdnZWRdO1xuICBsZXQgeyBxdWFzaXMsIGV4cHJlc3Npb25zIH0gPSBnaXZlbjtcbiAgbGV0IHRhaWwgPSAnfScgKyBxdWFzaXMucG9wKCkudmFsdWUucmF3ICsgJ2AnO1xuICBsZXQgdGFpbExleGljYWwgPSBuZXcgTGV4aWNhbE5vZGUoJ1RlbXBsYXRlVGFpbCcsIHRhaWwpO1xuICBpZiAoZXhwcmVzc2lvbnMubGVuZ3RoID09IDApIHtcbiAgICByZXR1cm4gbmV3IE5vZGUoJ1RlbXBsYXRlU3BhbnMnLCBnaXZlbiwgMCwgW3RhaWxMZXhpY2FsXSwgcGFyYW1zKTtcbiAgfSBlbHNlIHtcbiAgICBsZXQgbGlzdCA9IFRlbXBsYXRlTWlkZGxlTGlzdChZaWVsZCwgQXdhaXQsIFRhZ2dlZCkoZ2l2ZW4pO1xuICAgIHJldHVybiBuZXcgTm9kZSgnVGVtcGxhdGVTcGFucycsIGdpdmVuLCAxLCBbbGlzdCwgdGFpbExleGljYWxdLCBwYXJhbXMpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gVGVtcGxhdGVTcGFucztcbiIsImNvbnN0IE5vZGUgPSByZXF1aXJlKCcuLi9Ob2RlJyk7XG5cbi8vIFRocm93U3RhdGVtZW50W1lpZWxkLCBBd2FpdF0gOlxuLy8gICAgdGhyb3cgW25vIExpbmVUZXJtaW5hdG9yIGhlcmVdIEV4cHJlc3Npb25bK0luLCA/WWllbGQsID9Bd2FpdF0gO1xubGV0IFRocm93U3RhdGVtZW50ID0gKFlpZWxkLCBBd2FpdCkgPT4gKGdpdmVuKSA9PiB7XG4gIGNvbnN0IEV4cHJlc3Npb24gPSByZXF1aXJlKCcuL0V4cHJlc3Npb24nKTtcbiAgbGV0IHBhcmFtcyA9IFtZaWVsZCwgQXdhaXRdO1xuICBsZXQgZXhwciA9IEV4cHJlc3Npb24odHJ1ZSwgWWllbGQsIEF3YWl0KShnaXZlbi5hcmd1bWVudCk7XG4gIHJldHVybiBuZXcgTm9kZSgnVGhyb3dTdGF0ZW1lbnQnLCBnaXZlbiwgMCwgW2V4cHJdLCBwYXJhbXMpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFRocm93U3RhdGVtZW50O1xuIiwiY29uc3QgTm9kZSA9IHJlcXVpcmUoJy4uL05vZGUnKTtcblxuLy8gVHJ5U3RhdGVtZW50W1lpZWxkLCBBd2FpdCwgUmV0dXJuXSA6XG4vLyAgICB0cnkgQmxvY2tbP1lpZWxkLCA/QXdhaXQsID9SZXR1cm5dIENhdGNoWz9ZaWVsZCwgP0F3YWl0LCA/UmV0dXJuXVxuLy8gICAgdHJ5IEJsb2NrWz9ZaWVsZCwgP0F3YWl0LCA/UmV0dXJuXSBGaW5hbGx5Wz9ZaWVsZCwgP0F3YWl0LCA/UmV0dXJuXVxuLy8gICAgdHJ5IEJsb2NrWz9ZaWVsZCwgP0F3YWl0LCA/UmV0dXJuXSBDYXRjaFs/WWllbGQsID9Bd2FpdCwgP1JldHVybl0gRmluYWxseVs/WWllbGQsID9Bd2FpdCwgP1JldHVybl1cbmxldCBUcnlTdGF0ZW1lbnQgPSAoWWllbGQsIEF3YWl0LCBSZXR1cm4pID0+IChnaXZlbikgPT4ge1xuICBjb25zdCBCbG9jayA9IHJlcXVpcmUoJy4vQmxvY2snKTtcbiAgY29uc3QgQ2F0Y2ggPSByZXF1aXJlKCcuL0NhdGNoJyk7XG4gIGNvbnN0IEZpbmFsbHkgPSByZXF1aXJlKCcuL0ZpbmFsbHknKTtcblxuICBsZXQgcGFyYW1zID0gW1lpZWxkLCBBd2FpdCwgUmV0dXJuXTtcbiAgbGV0IHsgYmxvY2ssIGhhbmRsZXIsIGZpbmFsaXplciB9ID0gZ2l2ZW47XG5cbiAgbGV0IGIgPSBCbG9jayhZaWVsZCwgQXdhaXQsIFJldHVybikoYmxvY2spO1xuXG4gIGlmIChoYW5kbGVyICE9IG51bGwgJiYgZmluYWxpemVyID09IG51bGwpIHtcbiAgICBsZXQgYyA9IENhdGNoKFlpZWxkLCBBd2FpdCwgUmV0dXJuKShoYW5kbGVyKTtcbiAgICByZXR1cm4gbmV3IE5vZGUoJ1RyeVN0YXRlbWVudCcsIGdpdmVuLCAwLCBbYiwgY10sIHBhcmFtcyk7XG4gIH0gZWxzZSBpZiAoaGFuZGxlciA9PSBudWxsICYmIGZpbmFsaXplciAhPSBudWxsKSB7XG4gICAgbGV0IGYgPSBGaW5hbGx5KFlpZWxkLCBBd2FpdCwgUmV0dXJuKShmaW5hbGl6ZXIpO1xuICAgIHJldHVybiBuZXcgTm9kZSgnVHJ5U3RhdGVtZW50JywgZ2l2ZW4sIDEsIFtiLCBmXSwgcGFyYW1zKTtcbiAgfSBlbHNlIGlmIChoYW5kbGVyICE9IG51bGwgJiYgZmluYWxpemVyICE9IG51bGwpIHtcbiAgICBsZXQgYyA9IENhdGNoKFlpZWxkLCBBd2FpdCwgUmV0dXJuKShoYW5kbGVyKTtcbiAgICBsZXQgZiA9IEZpbmFsbHkoWWllbGQsIEF3YWl0LCBSZXR1cm4pKGZpbmFsaXplcik7XG4gICAgcmV0dXJuIG5ldyBOb2RlKCdUcnlTdGF0ZW1lbnQnLCBnaXZlbiwgMiwgW2IsIGMsIGZdLCBwYXJhbXMpO1xuICB9IGVsc2Uge1xuICAgIE5vZGUuVE9ETygnVHJ5U3RhdGVtZW50Jyk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBUcnlTdGF0ZW1lbnQ7XG4iLCJjb25zdCBOb2RlID0gcmVxdWlyZSgnLi4vTm9kZScpO1xuXG4vLyBVbmFyeUV4cHJlc3Npb25bWWllbGQsIEF3YWl0XSA6XG4vLyAgICBVcGRhdGVFeHByZXNzaW9uWz9ZaWVsZCwgP0F3YWl0XVxuLy8gICAgZGVsZXRlIFVuYXJ5RXhwcmVzc2lvbls/WWllbGQsID9Bd2FpdF1cbi8vICAgIHZvaWQgVW5hcnlFeHByZXNzaW9uWz9ZaWVsZCwgP0F3YWl0XVxuLy8gICAgdHlwZW9mIFVuYXJ5RXhwcmVzc2lvbls/WWllbGQsID9Bd2FpdF1cbi8vICAgICsgVW5hcnlFeHByZXNzaW9uWz9ZaWVsZCwgP0F3YWl0XVxuLy8gICAgLSBVbmFyeUV4cHJlc3Npb25bP1lpZWxkLCA/QXdhaXRdXG4vLyAgICB+IFVuYXJ5RXhwcmVzc2lvbls/WWllbGQsID9Bd2FpdF1cbi8vICAgICEgVW5hcnlFeHByZXNzaW9uWz9ZaWVsZCwgP0F3YWl0XVxuLy8gICAgWytBd2FpdF1Bd2FpdEV4cHJlc3Npb25bP1lpZWxkXVxubGV0IFVuYXJ5RXhwcmVzc2lvbiA9IChZaWVsZCwgQXdhaXQpID0+IChnaXZlbikgPT4ge1xuICBsZXQgVXBkYXRlRXhwcmVzc2lvbiA9IHJlcXVpcmUoJy4vVXBkYXRlRXhwcmVzc2lvbicpO1xuICBsZXQgQXdhaXRFeHByZXNzaW9uID0gcmVxdWlyZSgnLi9Bd2FpdEV4cHJlc3Npb24nKTtcblxuICBsZXQgcGFyYW1zID0gW1lpZWxkLCBBd2FpdF07XG4gIGxldCB7IHR5cGUgfSA9IGdpdmVuO1xuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlICdVcGRhdGVFeHByZXNzaW9uJzpcbiAgICBjYXNlICdDYWxsRXhwcmVzc2lvbic6XG4gICAgY2FzZSAnTmV3RXhwcmVzc2lvbic6XG4gICAgY2FzZSAnTWVtYmVyRXhwcmVzc2lvbic6XG4gICAgY2FzZSAnT2JqZWN0RXhwcmVzc2lvbic6XG4gICAgY2FzZSAnQXJyYXlFeHByZXNzaW9uJzpcbiAgICBjYXNlICdGdW5jdGlvbkV4cHJlc3Npb24nOlxuICAgIGNhc2UgJ0NsYXNzRXhwcmVzc2lvbic6XG4gICAgY2FzZSAnU2VxdWVuY2VFeHByZXNzaW9uJzpcbiAgICBjYXNlICdQYXJlbnRoZXNpemVkRXhwcmVzc2lvbic6XG4gICAgY2FzZSAnVGVtcGxhdGVMaXRlcmFsJzpcbiAgICBjYXNlICdUYWdnZWRUZW1wbGF0ZUV4cHJlc3Npb24nOlxuICAgIGNhc2UgJ0lkZW50aWZpZXInOlxuICAgIGNhc2UgJ1RoaXNFeHByZXNzaW9uJzpcbiAgICBjYXNlICdBcnJheVBhdHRlcm4nOlxuICAgIGNhc2UgJ09iamVjdFBhdHRlcm4nOlxuICAgIGNhc2UgJ01ldGFQcm9wZXJ0eSc6XG4gICAgY2FzZSAnTGl0ZXJhbCc6IHtcbiAgICAgIGxldCBleHByID0gVXBkYXRlRXhwcmVzc2lvbihZaWVsZCwgQXdhaXQpKGdpdmVuKTtcbiAgICAgIHJldHVybiBuZXcgTm9kZSgnVW5hcnlFeHByZXNzaW9uJywgZ2l2ZW4sIDAsIFtleHByXSwgcGFyYW1zKTtcbiAgICB9XG4gICAgY2FzZSAnVW5hcnlFeHByZXNzaW9uJzoge1xuICAgICAgbGV0IGluZGV4O1xuICAgICAgbGV0IHsgb3BlcmF0b3IsIGFyZ3VtZW50IH0gPSBnaXZlbjtcbiAgICAgIHN3aXRjaCAob3BlcmF0b3IpIHtcbiAgICAgICAgY2FzZSAnZGVsZXRlJzogaW5kZXggPSAxOyBicmVhaztcbiAgICAgICAgY2FzZSAndm9pZCc6IGluZGV4ID0gMjsgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3R5cGVvZic6IGluZGV4ID0gMzsgYnJlYWs7XG4gICAgICAgIGNhc2UgJysnOiBpbmRleCA9IDQ7IGJyZWFrO1xuICAgICAgICBjYXNlICctJzogaW5kZXggPSA1OyBicmVhaztcbiAgICAgICAgY2FzZSAnfic6IGluZGV4ID0gNjsgYnJlYWs7XG4gICAgICAgIGNhc2UgJyEnOiBpbmRleCA9IDc7IGJyZWFrO1xuICAgICAgICBkZWZhdWx0OiB0aHJvdyBgW0Vycm9yXSB1bmtub3duIHVuYXJ5IG9wZXJhdG9yOiAke29wZXJhdG9yfWA7XG4gICAgICB9XG4gICAgICBsZXQgZXhwciA9IFVuYXJ5RXhwcmVzc2lvbihZaWVsZCwgQXdhaXQpKGFyZ3VtZW50KTtcbiAgICAgIHJldHVybiBuZXcgTm9kZSgnVW5hcnlFeHByZXNzaW9uJywgZ2l2ZW4sIGluZGV4LCBbZXhwcl0sIHBhcmFtcyk7XG4gICAgfVxuICAgIGNhc2UgJ0F3YWl0RXhwcmVzc2lvbic6IHtcbiAgICAgIGxldCBleHByID0gQXdhaXRFeHByZXNzaW9uKFlpZWxkKShnaXZlbik7XG4gICAgICByZXR1cm4gbmV3IE5vZGUoJ1VuYXJ5RXhwcmVzc2lvbicsIGdpdmVuLCA4LCBbZXhwcl0sIHBhcmFtcyk7XG4gICAgfVxuICAgIGRlZmF1bHQ6XG4gICAgICBOb2RlLlRPRE8oYCR7dHlwZX0gQCBVbmFyeUV4cHJlc3Npb25gKTtcbiAgfVxuICBOb2RlLlRPRE8oJ1VuYXJ5RXhwcmVzc2lvbicpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFVuYXJ5RXhwcmVzc2lvbjtcbiIsImNvbnN0IE5vZGUgPSByZXF1aXJlKCcuLi9Ob2RlJyk7XG5cbi8vIFVuaXF1ZUZvcm1hbFBhcmFtZXRlcnNbWWllbGQsIEF3YWl0XSA6XG4vLyAgICBGb3JtYWxQYXJhbWV0ZXJzWz9ZaWVsZCwgP0F3YWl0XVxubGV0IFVuaXF1ZUZvcm1hbFBhcmFtZXRlcnMgPSAoWWllbGQsIEF3YWl0KSA9PiAoZ2l2ZW4sIGhhc0NvbW1hKSA9PiB7XG4gIGNvbnN0IEZvcm1hbFBhcmFtZXRlcnMgPSByZXF1aXJlKCcuL0Zvcm1hbFBhcmFtZXRlcnMnKTtcbiAgbGV0IHBhcmFtcyA9IFtZaWVsZCwgQXdhaXRdO1xuICBsZXQgcHMgPSBGb3JtYWxQYXJhbWV0ZXJzKFlpZWxkLCBBd2FpdCkoZ2l2ZW4sIGhhc0NvbW1hKTtcbiAgcmV0dXJuIG5ldyBOb2RlKCdVbmlxdWVGb3JtYWxQYXJhbWV0ZXJzJywgZ2l2ZW4sIDAsIFtwc10sIHBhcmFtcyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gVW5pcXVlRm9ybWFsUGFyYW1ldGVycztcbiIsImNvbnN0IE5vZGUgPSByZXF1aXJlKCcuLi9Ob2RlJyk7XG5cbi8vIFVwZGF0ZUV4cHJlc3Npb25bWWllbGQsIEF3YWl0XSA6XG4vLyAgICBMZWZ0SGFuZFNpZGVFeHByZXNzaW9uWz9ZaWVsZCwgP0F3YWl0XVxuLy8gICAgTGVmdEhhbmRTaWRlRXhwcmVzc2lvbls/WWllbGQsID9Bd2FpdF0gW25vIExpbmVUZXJtaW5hdG9yIGhlcmVdICsrXG4vLyAgICBMZWZ0SGFuZFNpZGVFeHByZXNzaW9uWz9ZaWVsZCwgP0F3YWl0XSBbbm8gTGluZVRlcm1pbmF0b3IgaGVyZV0gLS1cbi8vICAgICsrIFVuYXJ5RXhwcmVzc2lvbls/WWllbGQsID9Bd2FpdF1cbi8vICAgIC0tIFVuYXJ5RXhwcmVzc2lvbls/WWllbGQsID9Bd2FpdF1cbmxldCBVcGRhdGVFeHByZXNzaW9uID0gKFlpZWxkLCBBd2FpdCkgPT4gKGdpdmVuKSA9PiB7XG4gIGNvbnN0IExlZnRIYW5kU2lkZUV4cHJlc3Npb24gPSByZXF1aXJlKCcuL0xlZnRIYW5kU2lkZUV4cHJlc3Npb24nKTtcbiAgY29uc3QgVW5hcnlFeHByZXNzaW9uID0gcmVxdWlyZSgnLi9VbmFyeUV4cHJlc3Npb24nKTtcbiAgbGV0IHBhcmFtcyA9IFtZaWVsZCwgQXdhaXRdO1xuICBsZXQgeyB0eXBlIH0gPSBnaXZlbjtcbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSAnQ2FsbEV4cHJlc3Npb24nOlxuICAgIGNhc2UgJ05ld0V4cHJlc3Npb24nOlxuICAgIGNhc2UgJ01lbWJlckV4cHJlc3Npb24nOlxuICAgIGNhc2UgJ09iamVjdEV4cHJlc3Npb24nOlxuICAgIGNhc2UgJ0FycmF5RXhwcmVzc2lvbic6XG4gICAgY2FzZSAnRnVuY3Rpb25FeHByZXNzaW9uJzpcbiAgICBjYXNlICdDbGFzc0V4cHJlc3Npb24nOlxuICAgIGNhc2UgJ1NlcXVlbmNlRXhwcmVzc2lvbic6XG4gICAgY2FzZSAnUGFyZW50aGVzaXplZEV4cHJlc3Npb24nOlxuICAgIGNhc2UgJ1RlbXBsYXRlTGl0ZXJhbCc6XG4gICAgY2FzZSAnVGFnZ2VkVGVtcGxhdGVFeHByZXNzaW9uJzpcbiAgICBjYXNlICdJZGVudGlmaWVyJzpcbiAgICBjYXNlICdUaGlzRXhwcmVzc2lvbic6XG4gICAgY2FzZSAnQXJyYXlQYXR0ZXJuJzpcbiAgICBjYXNlICdPYmplY3RQYXR0ZXJuJzpcbiAgICBjYXNlICdNZXRhUHJvcGVydHknOlxuICAgIGNhc2UgJ0xpdGVyYWwnOiB7XG4gICAgICBsZXQgZXhwciA9IExlZnRIYW5kU2lkZUV4cHJlc3Npb24oWWllbGQsIEF3YWl0KShnaXZlbik7XG4gICAgICByZXR1cm4gbmV3IE5vZGUoJ1VwZGF0ZUV4cHJlc3Npb24nLCBnaXZlbiwgMCwgW2V4cHJdLCBwYXJhbXMpO1xuICAgIH1cbiAgICBjYXNlICdVcGRhdGVFeHByZXNzaW9uJzoge1xuICAgICAgbGV0IHsgcHJlZml4LCBvcGVyYXRvciwgYXJndW1lbnQgfSA9IGdpdmVuO1xuICAgICAgbGV0IGFyZywgaW5kZXg7XG4gICAgICBpZiAoIXByZWZpeCkge1xuICAgICAgICBhcmcgPSBMZWZ0SGFuZFNpZGVFeHByZXNzaW9uKFlpZWxkLCBBd2FpdCkoYXJndW1lbnQpO1xuICAgICAgICBpZiAob3BlcmF0b3IgPT0gJysrJykgaW5kZXggPSAxO1xuICAgICAgICBlbHNlIGlmIChvcGVyYXRvciA9PSAnLS0nKSBpbmRleCA9IDI7XG4gICAgICAgIGVsc2UgTm9kZS5UT0RPKGB4JHtvcGVyYXRvcn0gQCBVcGRhdGVFeHByZXNzaW9uYCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhcmcgPSBVbmFyeUV4cHJlc3Npb24oWWllbGQsIEF3YWl0KShhcmd1bWVudCk7XG4gICAgICAgIGlmIChvcGVyYXRvciA9PSAnKysnKSBpbmRleCA9IDM7XG4gICAgICAgIGVsc2UgaWYgKG9wZXJhdG9yID09ICctLScpIGluZGV4ID0gNDtcbiAgICAgICAgZWxzZSBOb2RlLlRPRE8oYCR7b3BlcmF0b3J9eCBAIFVwZGF0ZUV4cHJlc3Npb25gKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBuZXcgTm9kZSgnVXBkYXRlRXhwcmVzc2lvbicsIGdpdmVuLCBpbmRleCwgW2FyZ10sIHBhcmFtcyk7XG4gICAgfVxuICAgIGRlZmF1bHQ6XG4gICAgICBOb2RlLlRPRE8oYCR7dHlwZX0gQCBVcGRhdGVFeHByZXNzaW9uYCk7XG4gIH1cbiAgTm9kZS5UT0RPKCdVcGRhdGVFeHByZXNzaW9uJyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gVXBkYXRlRXhwcmVzc2lvbjtcbiIsImNvbnN0IE5vZGUgPSByZXF1aXJlKCcuLi9Ob2RlJyk7XG5cbi8vIFZhcmlhYmxlRGVjbGFyYXRpb25bSW4sIFlpZWxkLCBBd2FpdF0gOlxuLy8gICAgQmluZGluZ0lkZW50aWZpZXJbP1lpZWxkLCA/QXdhaXRdIEluaXRpYWxpemVyWz9JbiwgP1lpZWxkLCA/QXdhaXRdX29wdFxuLy8gICAgQmluZGluZ1BhdHRlcm5bP1lpZWxkLCA/QXdhaXRdIEluaXRpYWxpemVyWz9JbiwgP1lpZWxkLCA/QXdhaXRdXG5sZXQgVmFyaWFibGVEZWNsYXJhdGlvbiA9IChJbiwgWWllbGQsIEF3YWl0KSA9PiAoZ2l2ZW4pID0+IHtcbiAgbGV0IEJpbmRpbmdJZGVudGlmaWVyID0gcmVxdWlyZSgnLi9CaW5kaW5nSWRlbnRpZmllcicpO1xuICBsZXQgSW5pdGlhbGl6ZXIgPSByZXF1aXJlKCcuL0luaXRpYWxpemVyJyk7XG4gIGxldCBCaW5kaW5nUGF0dGVybiA9IHJlcXVpcmUoJy4vQmluZGluZ1BhdHRlcm4nKTtcblxuICBsZXQgcGFyYW1zID0gW0luLCBZaWVsZCwgQXdhaXRdO1xuICBpZiAoZ2l2ZW4uaWQudHlwZSA9PT0gJ0lkZW50aWZpZXInKSB7XG4gICAgbGV0IGJpbmRpbmdJZCA9IEJpbmRpbmdJZGVudGlmaWVyKFlpZWxkLCBBd2FpdCkoZ2l2ZW4uaWQpO1xuICAgIGxldCBpbml0ID0gbnVsbDtcbiAgICBpZiAoZ2l2ZW4uaW5pdCkgaW5pdCA9IEluaXRpYWxpemVyKEluLCBZaWVsZCwgQXdhaXQpKGdpdmVuLmluaXQpO1xuICAgIHJldHVybiBuZXcgTm9kZSgnVmFyaWFibGVEZWNsYXJhdGlvbicsIGdpdmVuLCAwLCBbYmluZGluZ0lkLCBpbml0XSwgcGFyYW1zKTtcbiAgfSBlbHNlIHtcbiAgICBsZXQgYmluZGluZ1BhdCA9IEJpbmRpbmdQYXR0ZXJuKFlpZWxkLCBBd2FpdCkoZ2l2ZW4uaWQpO1xuICAgIGxldCBpbml0ID0gSW5pdGlhbGl6ZXIoSW4sIFlpZWxkLCBBd2FpdCkoZ2l2ZW4uaW5pdCk7XG4gICAgcmV0dXJuIG5ldyBOb2RlKCdWYXJpYWJsZURlY2xhcmF0aW9uJywgZ2l2ZW4sIDEsIFtiaW5kaW5nUGF0LCBpbml0XSwgcGFyYW1zKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFZhcmlhYmxlRGVjbGFyYXRpb247XG4iLCJjb25zdCBOb2RlID0gcmVxdWlyZSgnLi4vTm9kZScpO1xuXG4vLyBWYXJpYWJsZURlY2xhcmF0aW9uTGlzdFtJbiwgWWllbGQsIEF3YWl0XSA6XG4vLyAgICBWYXJpYWJsZURlY2xhcmF0aW9uWz9JbiwgP1lpZWxkLCA/QXdhaXRdXG4vLyAgICBWYXJpYWJsZURlY2xhcmF0aW9uTGlzdFs/SW4sID9ZaWVsZCwgP0F3YWl0XSAsIFZhcmlhYmxlRGVjbGFyYXRpb25bP0luLCA/WWllbGQsID9Bd2FpdF1cbmxldCBWYXJpYWJsZURlY2xhcmF0aW9uTGlzdCA9IChJbiwgWWllbGQsIEF3YWl0KSA9PiAoZ2l2ZW4pID0+IHtcbiAgbGV0IFZhcmlhYmxlRGVjbGFyYXRpb24gPSByZXF1aXJlKCcuL1ZhcmlhYmxlRGVjbGFyYXRpb24nKTtcblxuICBsZXQgZ2VuQ2hpbGQgPSBWYXJpYWJsZURlY2xhcmF0aW9uKEluLCBZaWVsZCwgQXdhaXQpO1xuICBsZXQgcGFyYW1zID0gW0luLCBZaWVsZCwgQXdhaXRdO1xuICByZXR1cm4gTm9kZS5mcm9tTGlzdChcbiAgICAnVmFyaWFibGVEZWNsYXJhdGlvbkxpc3QnLFxuICAgIGdpdmVuLmRlY2xhcmF0aW9ucyxcbiAgICBnZW5DaGlsZCxcbiAgICBwYXJhbXNcbiAgKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBWYXJpYWJsZURlY2xhcmF0aW9uTGlzdDtcbiIsImNvbnN0IE5vZGUgPSByZXF1aXJlKCcuLi9Ob2RlJyk7XG5cbi8vIFZhcmlhYmxlU3RhdGVtZW50W1lpZWxkLCBBd2FpdF0gOlxuLy8gICAgdmFyIFZhcmlhYmxlRGVjbGFyYXRpb25MaXN0WytJbiwgP1lpZWxkLCA/QXdhaXRdIDtcbmxldCBWYXJpYWJsZVN0YXRlbWVudCA9IChZaWVsZCwgQXdhaXQpID0+IChnaXZlbikgPT4ge1xuICBsZXQgVmFyaWFibGVEZWNsYXJhdGlvbkxpc3QgPSByZXF1aXJlKCcuL1ZhcmlhYmxlRGVjbGFyYXRpb25MaXN0Jyk7XG5cbiAgbGV0IGRlY2xMaXN0ID0gVmFyaWFibGVEZWNsYXJhdGlvbkxpc3QodHJ1ZSwgWWllbGQsIEF3YWl0KShnaXZlbik7XG4gIGxldCBwYXJhbXMgPSBbWWllbGQsIEF3YWl0XTtcbiAgcmV0dXJuIG5ldyBOb2RlKCdWYXJpYWJsZVN0YXRlbWVudCcsIGdpdmVuLCAwLCBbZGVjbExpc3RdLCBwYXJhbXMpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFZhcmlhYmxlU3RhdGVtZW50O1xuIiwiY29uc3QgTm9kZSA9IHJlcXVpcmUoJy4uL05vZGUnKTtcblxuLy8gV2hpbGVTdGF0ZW1lbnRbWWllbGQsIEF3YWl0LCBSZXR1cm5dIDpcbi8vICAgIHdoaWxlICggRXhwcmVzc2lvblsrSW4sID9ZaWVsZCwgP0F3YWl0XSApIFN0YXRlbWVudFs/WWllbGQsID9Bd2FpdCwgP1JldHVybl1cbmxldCBXaGlsZVN0YXRlbWVudCA9IChZaWVsZCwgQXdhaXQsIFJldHVybikgPT4gKGdpdmVuKSA9PiB7XG4gIGNvbnN0IEV4cHJlc3Npb24gPSByZXF1aXJlKCcuL0V4cHJlc3Npb24nKTtcbiAgY29uc3QgU3RhdGVtZW50ID0gcmVxdWlyZSgnLi9TdGF0ZW1lbnQnKTtcbiAgbGV0IHBhcmFtcyA9IFtZaWVsZCwgQXdhaXQsIFJldHVybl07XG4gIGxldCBleHByID0gRXhwcmVzc2lvbih0cnVlLCBZaWVsZCwgQXdhaXQpKGdpdmVuLnRlc3QpO1xuICBsZXQgc3RtdCA9IFN0YXRlbWVudChZaWVsZCwgQXdhaXQsIFJldHVybikoZ2l2ZW4uYm9keSk7XG4gIHJldHVybiBuZXcgTm9kZSgnV2hpbGVTdGF0ZW1lbnQnLCBnaXZlbiwgMCwgW2V4cHIsIHN0bXRdLCBwYXJhbXMpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFdoaWxlU3RhdGVtZW50O1xuIiwiY29uc3QgTm9kZSA9IHJlcXVpcmUoJy4uL05vZGUnKTtcblxuLy8gV2l0aFN0YXRlbWVudFtZaWVsZCwgQXdhaXQsIFJldHVybl0gOlxuLy8gICAgd2l0aCAoIEV4cHJlc3Npb25bK0luLCA/WWllbGQsID9Bd2FpdF0gKSBTdGF0ZW1lbnRbP1lpZWxkLCA/QXdhaXQsID9SZXR1cm5dXG5sZXQgV2l0aFN0YXRlbWVudCA9IChZaWVsZCwgQXdhaXQsIFJldHVybikgPT4gKGdpdmVuKSA9PiB7XG4gIGNvbnN0IEV4cHJlc3Npb24gPSByZXF1aXJlKCcuL0V4cHJlc3Npb24nKTtcbiAgY29uc3QgU3RhdGVtZW50ID0gcmVxdWlyZSgnLi9TdGF0ZW1lbnQnKTtcbiAgbGV0IHBhcmFtcyA9IFtZaWVsZCwgQXdhaXQsIFJldHVybl07XG4gIGxldCBleHByID0gRXhwcmVzc2lvbih0cnVlLCBZaWVsZCwgQXdhaXQpKGdpdmVuLm9iamVjdCk7XG4gIGxldCBzdG10ID0gU3RhdGVtZW50KFlpZWxkLCBBd2FpdCwgUmV0dXJuKShnaXZlbi5ib2R5KTtcbiAgcmV0dXJuIG5ldyBOb2RlKCdXaXRoU3RhdGVtZW50JywgZ2l2ZW4sIDAsIFtleHByLCBzdG10XSwgcGFyYW1zKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBXaXRoU3RhdGVtZW50O1xuIiwiY29uc3QgTm9kZSA9IHJlcXVpcmUoJy4uL05vZGUnKTtcblxuLy8gWWllbGRFeHByZXNzaW9uW0luLCBBd2FpdF0gOlxuLy8gICAgeWllbGRcbi8vICAgIHlpZWxkIFtubyBMaW5lVGVybWluYXRvciBoZXJlXSBBc3NpZ25tZW50RXhwcmVzc2lvbls/SW4sICtZaWVsZCwgP0F3YWl0XVxuLy8gICAgeWllbGQgW25vIExpbmVUZXJtaW5hdG9yIGhlcmVdICogQXNzaWdubWVudEV4cHJlc3Npb25bP0luLCArWWllbGQsID9Bd2FpdF1cbmxldCBZaWVsZEV4cHJlc3Npb24gPSAoSW4sIEF3YWl0KSA9PiAoZ2l2ZW4pID0+IHtcbiAgY29uc3QgQXNzaWdubWVudEV4cHJlc3Npb24gPSByZXF1aXJlKCcuL0Fzc2lnbm1lbnRFeHByZXNzaW9uJyk7XG4gIGxldCBwYXJhbXMgPSBbSW4sIEF3YWl0XTtcbiAgbGV0IHsgYXJndW1lbnQsIGRlbGVnYXRlIH0gPSBnaXZlbjtcbiAgaWYgKGFyZ3VtZW50ID09IG51bGwpIHtcbiAgICByZXR1cm4gbmV3IE5vZGUoJ1lpZWxkRXhwcmVzc2lvbicsIGdpdmVuLCAwLCBbXSwgcGFyYW1zKTtcbiAgfSBlbHNlIGlmICghZGVsZWdhdGUpIHtcbiAgICBsZXQgZXhwciA9IEFzc2lnbm1lbnRFeHByZXNzaW9uKEluLCB0cnVlLCBBd2FpdCkoYXJndW1lbnQpO1xuICAgIHJldHVybiBuZXcgTm9kZSgnWWllbGRFeHByZXNzaW9uJywgZ2l2ZW4sIDEsIFtleHByXSwgcGFyYW1zKTtcbiAgfSBlbHNlIHtcbiAgICBsZXQgZXhwciA9IEFzc2lnbm1lbnRFeHByZXNzaW9uKEluLCB0cnVlLCBBd2FpdCkoYXJndW1lbnQpO1xuICAgIHJldHVybiBuZXcgTm9kZSgnWWllbGRFeHByZXNzaW9uJywgZ2l2ZW4sIDIsIFtleHByXSwgcGFyYW1zKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFlpZWxkRXhwcmVzc2lvbjtcbiIsInZhciBtYXAgPSB7XG5cdFwiLi9lczIwMjEvU2NyaXB0XCI6IDU4MVxufTtcblxuXG5mdW5jdGlvbiB3ZWJwYWNrQ29udGV4dChyZXEpIHtcblx0dmFyIGlkID0gd2VicGFja0NvbnRleHRSZXNvbHZlKHJlcSk7XG5cdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKGlkKTtcbn1cbmZ1bmN0aW9uIHdlYnBhY2tDb250ZXh0UmVzb2x2ZShyZXEpIHtcblx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhtYXAsIHJlcSkpIHtcblx0XHR2YXIgZSA9IG5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIgKyByZXEgKyBcIidcIik7XG5cdFx0ZS5jb2RlID0gJ01PRFVMRV9OT1RfRk9VTkQnO1xuXHRcdHRocm93IGU7XG5cdH1cblx0cmV0dXJuIG1hcFtyZXFdO1xufVxud2VicGFja0NvbnRleHQua2V5cyA9IGZ1bmN0aW9uIHdlYnBhY2tDb250ZXh0S2V5cygpIHtcblx0cmV0dXJuIE9iamVjdC5rZXlzKG1hcCk7XG59O1xud2VicGFja0NvbnRleHQucmVzb2x2ZSA9IHdlYnBhY2tDb250ZXh0UmVzb2x2ZTtcbm1vZHVsZS5leHBvcnRzID0gd2VicGFja0NvbnRleHQ7XG53ZWJwYWNrQ29udGV4dC5pZCA9IDk2MTM7IiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCIvLyBzdGFydHVwXG4vLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbi8vIFRoaXMgZW50cnkgbW9kdWxlIGlzIHJlZmVyZW5jZWQgYnkgb3RoZXIgbW9kdWxlcyBzbyBpdCBjYW4ndCBiZSBpbmxpbmVkXG52YXIgX193ZWJwYWNrX2V4cG9ydHNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMjU3MCk7XG4iXSwic291cmNlUm9vdCI6IiJ9