{
  [0] access __x0__ = (GLOBAL_context "LexicalEnvironment")
  [0] let scope = __x0__
  [1] app __x1__ = (NewDeclarativeEnvironment scope)
  [1] if (is-completion __x1__) if (= __x1__.Type CONST_normal) __x1__ = __x1__.Value else return __x1__ else [31] {}
  [1] let funcEnv = __x1__
  [2] access __x2__ = (BindingIdentifier "StringValue")
  [2] let name = __x2__
  [3] app __x3__ = (funcEnv.CreateImmutableBinding funcEnv name false)
  [3] if (is-completion __x3__) if (= __x3__.Type CONST_normal) __x3__ = __x3__.Value else return __x3__ else [31] {}
  [3] __x3__
  [4] let sourceText = (get-syntax AsyncFunctionExpression)
  [5] ??? "Let id:{closure} be ! OrdinaryFunctionCreate ( % AsyncFunction . prototype % , id:{sourceText} , nt:{FormalParameters} , nt:{AsyncFunctionBody} , const:{non-lexical-this} , id:{funcEnv} ) ."
  [6] app __x4__ = (SetFunctionName closure name)
  [6] if (is-completion __x4__) if (= __x4__.Type CONST_normal) __x4__ = __x4__.Value else return __x4__ else [31] {}
  [6] __x4__
  [7] app __x5__ = (funcEnv.InitializeBinding funcEnv name closure)
  [7] if (is-completion __x5__) if (= __x5__.Type CONST_normal) __x5__ = __x5__.Value else return __x5__ else [31] {}
  [7] __x5__
  [8] app __x6__ = (WrapCompletion closure)
  [8] return __x6__
}