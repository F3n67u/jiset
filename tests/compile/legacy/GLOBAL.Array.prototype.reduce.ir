{
  app __x0__ = (GetArgument argumentsList 0i)
  let callbackfn = __x0__
  app __x1__ = (GetArgument argumentsList 1i)
  let initialValue = __x1__
  app __x2__ = (ToObject this)
  let O = [? __x2__]
  app __x3__ = (LengthOfArrayLike O)
  let len = [? __x3__]
  app __x4__ = (IsCallable callbackfn)
  if (= __x4__ false) throw TypeError else {}
  if (&& (= len 0i) (= argumentsList[1i] absent)) throw TypeError else {}
  let k = 0i
  let accumulator = undefined
  if (! (= argumentsList[1i] absent)) accumulator = initialValue else {
    let kPresent = false
    while (&& (= kPresent false) (< k len)) {
      app __x5__ = (ToString k)
      let Pk = [! __x5__]
      app __x6__ = (HasProperty O Pk)
      kPresent = [? __x6__]
      if (= kPresent true) {
        app __x7__ = (Get O Pk)
        accumulator = [? __x7__]
      } else {}
      k = (+ k 1i)
    }
    if (= kPresent false) throw TypeError else {}
  }
  while (< k len) {
    app __x8__ = (ToString k)
    let Pk = [! __x8__]
    app __x9__ = (HasProperty O Pk)
    let kPresent = [? __x9__]
    if (= kPresent true) {
      app __x10__ = (Get O Pk)
      let kValue = [? __x10__]
      app __x11__ = (Call callbackfn undefined (new [accumulator, kValue, k, O]))
      accumulator = [? __x11__]
    } else {}
    k = (+ k 1i)
  }
  return accumulator
}