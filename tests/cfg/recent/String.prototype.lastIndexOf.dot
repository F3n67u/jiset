digraph {
  node14084 [shape=cds, label=<<font color="black">1:app __x1__ = (ToString O)</font>> color="black" fillcolor="white" style=filled]
  node14089 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">3:let numPos = [? __x3__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14088 [shape=cds, label=<<font color="black">3:app __x3__ = (ToNumber position)</font>> color="black" fillcolor="white" style=filled]
  node14082 [shape=cds, label=<<font color="black">0:app __x0__ = (RequireObjectCoercible this)</font>> color="black" fillcolor="white" style=filled]
  node14080 [shape=cds, label=<<font color="black">app searchString = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node14091 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let pos = Infinity</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14094 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">6:let len = S.length</td></tr>
      <tr><td align="left">7:??? &quot;Let id:{start} be the result of clamping id:{pos} between 0 and id:{len} .&quot;</td></tr>
      <tr><td align="left">8:let searchLen = searchStr.length</td></tr>
      <tr><td align="left">9:??? &quot;Let id:{k} be the largest possible non - negative integer not larger than id:{start} such that id:{k} + id:{searchLen} &le; id:{len} , and for all non - negative integers id:{j} such that id:{j} &lt; id:{searchLen} , the code unit at index id:{k} + id:{j} within id:{S} is the same as the code unit at index id:{j} within id:{searchStr} ; but if there is no such integer , let id:{k} be - 1 .&quot;</td></tr>
      <tr><td align="left">10:return k</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14078 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node14093 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">let pos = [! __x4__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14092 [shape=cds, label=<<font color="black">app __x4__ = (ToIntegerOrInfinity numPos)</font>> color="black" fillcolor="white" style=filled]
  node14085 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">1:let S = [? __x1__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14081 [shape=cds, label=<<font color="black">app position = (GetArgument argumentsList 1i)</font>> color="black" fillcolor="white" style=filled]
  node14086 [shape=cds, label=<<font color="black">2:app __x2__ = (ToString searchString)</font>> color="black" fillcolor="white" style=filled]
  node14083 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let O = [? __x0__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14079 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node14090 [shape=diamond, label=<<font color="black">(= numPos NaN)</font>> color="black" fillcolor="white" style=filled]
  node14087 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">2:let searchStr = [? __x2__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14084 -> node14085 [ color="black"]
  node14078 -> node14080 [ color="black"]
  node14089 -> node14090 [ color="black"]
  node14085 -> node14086 [ color="black"]
  node14087 -> node14088 [ color="black"]
  node14093 -> node14094 [ color="black"]
  node14094 -> node14079 [ color="black"]
  node14090 -> node14091 [label=<<font color="black">true</font>> color="black"]
  node14090 -> node14092 [label=<<font color="black">false</font>> color="black"]
  node14082 -> node14083 [ color="black"]
  node14091 -> node14094 [ color="black"]
  node14080 -> node14081 [ color="black"]
  node14083 -> node14084 [ color="black"]
  node14086 -> node14087 [ color="black"]
  node14092 -> node14093 [ color="black"]
  node14088 -> node14089 [ color="black"]
  node14081 -> node14082 [ color="black"]
}
