digraph {
  node14099 [shape=cds, label=<<font color="black">2:app __x1__ = (LocalTZA tv true)</font>> color="black" fillcolor="white" style=filled]
  node14103 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">7:let offsetSign = &quot;-&quot;</td></tr>
      <tr><td align="left">8:let absOffset = (- offset)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14096 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node14100 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">2:let offset = __x1__</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14104 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">9:??? &quot;Let id:{offsetMin} be the String representation of MinFromTime ( id:{absOffset} ) , formatted as a two - digit decimal number , padded to the left with the code unit 0x0030 ( DIGIT ZERO ) if necessary .&quot;</td></tr>
      <tr><td align="left">10:??? &quot;Let id:{offsetHour} be the String representation of HourFromTime ( id:{absOffset} ) , formatted as a two - digit decimal number , padded to the left with the code unit 0x0030 ( DIGIT ZERO ) if necessary .&quot;</td></tr>
      <tr><td align="left">11:??? &quot;Let id:{tzName} be an implementation - defined string that is either the empty String or the string - concatenation of the code unit 0x0020 ( SPACE ) , the code unit 0x0028 ( LEFT PARENTHESIS ) , an implementation - defined timezone name , and the code unit 0x0029 ( RIGHT PARENTHESIS ) .&quot;</td></tr>
      <tr><td align="left">12:return (+ (+ (+ offsetSign offsetHour) offsetMin) tzName)</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14101 [shape=diamond, label=<<font color="black">(! (&lt; offset 0i))</font>> color="black" fillcolor="white" style=filled]
  node14098 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:assert (= __x0__ Number)</td></tr>
      <tr><td align="left">1:assert (! (= tv NaN))</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14102 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">4:let offsetSign = &quot;+&quot;</td></tr>
      <tr><td align="left">5:let absOffset = offset</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14097 [shape=cds, label=<<font color="black">0:app __x0__ = (Type tv)</font>> color="black" fillcolor="white" style=filled]
  node14095 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node14100 -> node14101 [ color="black"]
  node14102 -> node14104 [ color="black"]
  node14104 -> node14096 [ color="black"]
  node14103 -> node14104 [ color="black"]
  node14095 -> node14097 [ color="black"]
  node14101 -> node14102 [label=<<font color="black">true</font>> color="black"]
  node14101 -> node14103 [label=<<font color="black">false</font>> color="black"]
  node14099 -> node14100 [ color="black"]
  node14097 -> node14098 [ color="black"]
  node14098 -> node14099 [ color="black"]
}
