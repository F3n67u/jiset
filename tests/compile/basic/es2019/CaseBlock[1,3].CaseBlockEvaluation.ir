{
  let V = undefined
  if (! (= CaseClauses0 absent)) ??? "Let id:{A} be the List of nt:{CaseClause} items in the first nt:{CaseClauses} , in source text order ." else let A = (new [])
  let found = false
  let __x0__ = A
  let __x1__ = 0i
  while (< __x1__ __x0__.length) {
    let C = __x0__[__x1__]
    if (= found false) {
      app __x2__ = (CaseClauseIsSelected C input)
      found = [? __x2__]
    } else {}
    if (= found true) {
      access __x3__ = (C "Evaluation")
      let R = __x3__
      if (! (= R.Value CONST_empty)) V = R.Value else {}
      app __x4__ = (IsAbruptCompletion R)
      if __x4__ {
        app __x5__ = (UpdateEmpty R V)
        app __x6__ = (Completion __x5__)
        return __x6__
      } else {}
    } else {}
    __x1__ = (+ __x1__ 1i)
  }
  let foundInB = false
  if (! (= CaseClauses1 absent)) ??? "Let id:{B} be the List of nt:{CaseClause} items in the second nt:{CaseClauses} , in source text order ." else let B = (new [])
  if (= found false) {
    let __x7__ = B
    let __x8__ = 0i
    while (< __x8__ __x7__.length) {
      let C = __x7__[__x8__]
      if (= foundInB false) {
        app __x9__ = (CaseClauseIsSelected C input)
        foundInB = [? __x9__]
      } else {}
      if (= foundInB true) {
        access __x10__ = (C "Evaluation")
        let R = __x10__
        if (! (= R.Value CONST_empty)) V = R.Value else {}
        app __x11__ = (IsAbruptCompletion R)
        if __x11__ {
          app __x12__ = (UpdateEmpty R V)
          app __x13__ = (Completion __x12__)
          return __x13__
        } else {}
      } else {}
      __x8__ = (+ __x8__ 1i)
    }
  } else {}
  if (= foundInB true) {
    app __x14__ = (NormalCompletion V)
    return __x14__
  } else {}
  access __x15__ = (DefaultClause "Evaluation")
  let R = __x15__
  if (! (= R.Value CONST_empty)) V = R.Value else {}
  app __x16__ = (IsAbruptCompletion R)
  if __x16__ {
    app __x17__ = (UpdateEmpty R V)
    app __x18__ = (Completion __x17__)
    return __x18__
  } else {}
  let __x19__ = B
  let __x20__ = 0i
  while (< __x20__ __x19__.length) {
    let C = __x19__[__x20__]
    access __x21__ = (C "Evaluation")
    let R = __x21__
    if (! (= R.Value CONST_empty)) V = R.Value else {}
    app __x22__ = (IsAbruptCompletion R)
    if __x22__ {
      app __x23__ = (UpdateEmpty R V)
      app __x24__ = (Completion __x23__)
      return __x24__
    } else {}
    __x20__ = (+ __x20__ 1i)
  }
  app __x25__ = (NormalCompletion V)
  return __x25__
}