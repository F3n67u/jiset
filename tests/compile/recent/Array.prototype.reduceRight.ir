{
  app callbackfn = (GetArgument argumentsList 0i)
  app initialValue = (GetArgument argumentsList 1i)
  [0] app __x0__ = (ToObject this)
  [0] if (is-completion __x0__) if (= __x0__.Type CONST_normal) __x0__ = __x0__.Value else return __x0__ else [4] {}
  [0] let O = __x0__
  [1] app __x1__ = (LengthOfArrayLike O)
  [1] if (is-completion __x1__) if (= __x1__.Type CONST_normal) __x1__ = __x1__.Value else return __x1__ else [4] {}
  [1] let len = __x1__
  [2] app __x2__ = (IsCallable callbackfn)
  [2] if (= __x2__ false) {
    app __x3__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_TypeError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
    return __x3__
  } else [4] {}
  [3] if (&& (= len 0i) (= initialValue absent)) {
    app __x4__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_TypeError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
    return __x4__
  } else [4] {}
  [4] let k = (- len 1i)
  [5] let accumulator = undefined
  [8] if (! (= initialValue absent)) accumulator = initialValue else {
    [9] let kPresent = false
    [10] while (&& (= kPresent false) (! (< k 0i))) {
      [11] ??? "Let id:{Pk} be ! ToString ( 𝔽 ( id:{k} ) ) ."
      [12] app __x5__ = (HasProperty O Pk)
      [12] if (is-completion __x5__) if (= __x5__.Type CONST_normal) __x5__ = __x5__.Value else return __x5__ else [4] {}
      [12] kPresent = __x5__
      [13] if (= kPresent true) {
        [14] app __x6__ = (Get O Pk)
        [14] if (is-completion __x6__) if (= __x6__.Type CONST_normal) __x6__ = __x6__.Value else return __x6__ else [4] {}
        [14] accumulator = __x6__
      } else [4] {}
      [15] k = (- k 1i)
    }
    [16] if (= kPresent false) {
      app __x7__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_TypeError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
      return __x7__
    } else [4] {}
  }
  [17] while (! (< k 0i)) {
    [18] ??? "Let id:{Pk} be ! ToString ( 𝔽 ( id:{k} ) ) ."
    [19] app __x8__ = (HasProperty O Pk)
    [19] if (is-completion __x8__) if (= __x8__.Type CONST_normal) __x8__ = __x8__.Value else return __x8__ else [4] {}
    [19] let kPresent = __x8__
    [20] if (= kPresent true) {
      [21] app __x9__ = (Get O Pk)
      [21] if (is-completion __x9__) if (= __x9__.Type CONST_normal) __x9__ = __x9__.Value else return __x9__ else [4] {}
      [21] let kValue = __x9__
      [22] ??? "Set id:{accumulator} to ? Call ( id:{callbackfn} , value:{undefined} , « id:{accumulator} , id:{kValue} , 𝔽 ( id:{k} ) , id:{O} » ) ."
    } else [4] {}
    [23] k = (- k 1i)
  }
  [24] app __x10__ = (WrapCompletion accumulator)
  [24] return __x10__
}