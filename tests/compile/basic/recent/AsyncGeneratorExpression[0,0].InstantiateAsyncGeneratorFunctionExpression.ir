{
  if (= name absent) name = "" else {}
  access __x0__ = (GLOBAL_context "LexicalEnvironment")
  let scope = __x0__
  let sourceText = (get-syntax AsyncGeneratorExpression)
  app __x1__ = (OrdinaryFunctionCreate INTRINSIC_AsyncGeneratorFunction_prototype sourceText FormalParameters AsyncGeneratorBody CONST_nonDASHlexicalDASHthis scope)
  let closure = [! __x1__]
  app __x2__ = (SetFunctionName closure name)
  __x2__
  app __x3__ = (OrdinaryObjectCreate INTRINSIC_AsyncGeneratorFunction_prototype_prototype)
  let prototype = [! __x3__]
  app __x4__ = (DefinePropertyOrThrow closure "prototype" (new PropertyDescriptor("Value" -> prototype, "Writable" -> true, "Enumerable" -> false, "Configurable" -> false)))
  [! __x4__]
  return closure
}