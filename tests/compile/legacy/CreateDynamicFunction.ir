{
  let callerContext = GLOBAL_executionStack[(- GLOBAL_executionStack.length 2i)]
  let callerRealm = callerContext.Realm
  let calleeRealm = REALM
  app __x0__ = (HostEnsureCanCompileStrings callerRealm calleeRealm)
  [? __x0__]
  if (= newTarget undefined) newTarget = constructor else {}
  if (= kind CONST_normal) {
    let goal = "FunctionBody"
    let parameterGoal = "FormalParameters"
    let fallbackProto = "%Function.prototype%"
  } else if (= kind CONST_generator) {
    let goal = "GeneratorBody"
    let parameterGoal = "FormalParameters"
    let fallbackProto = "%Generator%"
  } else if (= kind CONST_async) {
    let goal = "AsyncFunctionBody"
    let parameterGoal = "FormalParameters"
    let fallbackProto = "%AsyncFunction.prototype%"
  } else {
    assert (= kind CONST_asyncGenerator)
    let goal = "AsyncGeneratorBody"
    let parameterGoal = "FormalParameters"
    let fallbackProto = "%AsyncGenerator%"
  }
  let argCount = args.length
  let P = ""
  if (== argCount 0i) let bodyArg = "" else if (== argCount 1i) let bodyArg = args[0i] else {
    assert (< 1i argCount)
    let firstArg = args[0i]
    app __x1__ = (ToString firstArg)
    P = [? __x1__]
    let k = 1i
    while (< k (- argCount 1i)) {
      let nextArg = args[k]
      app __x2__ = (ToString nextArg)
      let nextArgString = [? __x2__]
      ??? "Set id:{P} to the string - concatenation of the previous value of id:{P} , value:{\",\"} ( a comma ) , and id:{nextArgString} ."
      k = (+ k 1i)
    }
    let bodyArg = args[k]
  }
  app __x3__ = (ToString bodyArg)
  let bodyString = (+ (+ "\n" [? __x3__]) "\n")
  ??? "Perform the following substeps in an implementation - dependent order , possibly interleaving parsing and error detection : in:{} out:{}"
  app __x4__ = (GetPrototypeFromConstructor newTarget fallbackProto)
  let proto = [? __x4__]
  let realmF = REALM
  let scope = realmF.GlobalEnv
  app __x5__ = (OrdinaryFunctionCreate proto parameters body CONST_nonDASHlexicalDASHthis scope)
  let F = [! __x5__]
  if (= kind CONST_generator) {
    app __x6__ = (OrdinaryObjectCreate INTRINSIC_Generator_prototype)
    let prototype = __x6__
    app __x7__ = (DefinePropertyOrThrow F "prototype" (new PropertyDescriptor("Value" -> prototype, "Writable" -> true, "Enumerable" -> false, "Configurable" -> false)))
    __x7__
  } else if (= kind CONST_asyncGenerator) {
    app __x8__ = (OrdinaryObjectCreate INTRINSIC_AsyncGenerator_prototype)
    let prototype = __x8__
    app __x9__ = (DefinePropertyOrThrow F "prototype" (new PropertyDescriptor("Value" -> prototype, "Writable" -> true, "Enumerable" -> false, "Configurable" -> false)))
    __x9__
  } else if (= kind CONST_normal) {
    app __x10__ = (MakeConstructor F)
    __x10__
  } else {}
  app __x11__ = (SetFunctionName F "anonymous")
  __x11__
  ??? "Let id:{prefix} be the prefix associated with id:{kind} in Table 48 ."
  let sourceString = (+ (+ (+ (+ (+ (+ prefix " anonymous(") P) "\n") ") {") bodyString) "}")
  app __x12__ = (UTF16DecodeString sourceString)
  F.SourceText = [! __x12__]
  return F
}