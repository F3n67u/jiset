{
  let queue = generator.AsyncGeneratorQueue
  assert (< 0i queue.length)
  let next = queue[0i]
  let __x0__ = (pop queue 0i)
  let promiseCapability = next.Capability
  app __x1__ = (Call promiseCapability.Reject undefined (new [exception]))
  if (is-completion __x1__) if (= __x1__.Type CONST_normal) __x1__ = __x1__.Value else return __x1__ else {}
  __x1__
  app __x2__ = (AsyncGeneratorResumeNext generator)
  if (is-completion __x2__) if (= __x2__.Type CONST_normal) __x2__ = __x2__.Value else return __x2__ else {}
  __x2__
  app __x3__ = (WrapCompletion undefined)
  return __x3__
}