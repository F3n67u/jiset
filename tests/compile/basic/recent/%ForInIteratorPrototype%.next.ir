{
  let O = this
  app __x0__ = (Type O)
  assert (= __x0__ Object)
  let object = O.Object
  let visited = O.VisitedKeys
  let remaining = O.RemainingKeys
  while true {
    if (= O.ObjectWasVisited false) {
      app __x1__ = (object.OwnPropertyKeys object)
      let keys = [? __x1__]
      let __x2__ = keys
      let __x3__ = 0i
      while (< __x3__ __x2__.length) {
        let key = __x2__[__x3__]
        app __x4__ = (Type key)
        if (= __x4__ String) append key -> remaining else {}
        __x3__ = (+ __x3__ 1i)
      }
      O.ObjectWasVisited = true
    } else {}
    while (< 0i remaining.length) {
      let r = remaining[0i]
      let __x5__ = (pop remaining 0i)
      ??? "If there does not exist an element id:{v} of id:{visited} such that SameValue ( id:{r} , id:{v} ) is value:{true} , then in:{} out:{}"
    }
    app __x6__ = (object.GetPrototypeOf object)
    object = [? __x6__]
    O.Object = object
    O.ObjectWasVisited = false
    if (= object null) {
      app __x7__ = (CreateIterResultObject undefined true)
      return __x7__
    } else {}
  }
}