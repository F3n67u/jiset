{
  [0] access __x0__ = (RelationalExpression "Evaluation")
  [0] let lref = __x0__
  [1] app __x1__ = (GetValue lref)
  [1] if (is-completion __x1__) if (= __x1__.Type CONST_normal) __x1__ = __x1__.Value else return __x1__ else [3] {}
  [1] let lval = __x1__
  [2] access __x2__ = (ShiftExpression "Evaluation")
  [2] let rref = __x2__
  [3] app __x3__ = (GetValue rref)
  [3] if (is-completion __x3__) if (= __x3__.Type CONST_normal) __x3__ = __x3__.Value else return __x3__ else [3] {}
  [3] let rval = __x3__
  [4] app __x4__ = (Type rval)
  [4] if (! (= __x4__ Object)) {
    app __x5__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_TypeError.prototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))
    return __x5__
  } else [3] {}
  [5] app __x6__ = (ToPropertyKey lval)
  [5] app __x7__ = (HasProperty rval __x6__)
  [5] if (is-completion __x7__) if (= __x7__.Type CONST_normal) __x7__ = __x7__.Value else return __x7__ else [3] {}
  [5] app __x8__ = (WrapCompletion __x7__)
  [5] return __x8__
}