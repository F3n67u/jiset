digraph {
  node0 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node5 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">return undefined</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node1 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node6 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">1:??? &quot;It is a Syntax Error if the nt:{LeftHandSideExpression} is grammar:{CoverParenthesizedExpressionAndArrowParameterList0, [Expression]} and nt:{Expression} derives a production that would produce a Syntax Error according to these rules if that production is substituted for nt:{LeftHandSideExpression} . This rule is recursively applied .&quot;</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node2 [shape=cds, label=<<font color="black">0:access __x0__ = (LeftHandSideExpression &quot;IsValidSimpleAssignmentTarget&quot;)</font>> color="black" fillcolor="white" style=filled]
  node3 [shape=diamond, label=<<font color="black">(= __x0__ false)</font>> color="black" fillcolor="white" style=filled]
  node4 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw SyntaxError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node5 -> node6 [ color="black"]
  node4 -> node6 [ color="black"]
  node0 -> node2 [ color="black"]
  node6 -> node1 [ color="black"]
  node2 -> node3 [ color="black"]
  node3 -> node4 [label=<<font color="black">true</font>> color="black"]
  node3 -> node5 [label=<<font color="black">false</font>> color="black"]
}
