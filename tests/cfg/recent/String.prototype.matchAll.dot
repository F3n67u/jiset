digraph {
  node14396 [shape=cds, label=<<font color="black">app regexp = (GetArgument argumentsList 0i)</font>> color="black" fillcolor="white" style=filled]
  node14408 [shape=diamond, label=<<font color="black">(! (contains [? __x4__] &quot;g&quot;))</font>> color="black" fillcolor="white" style=filled]
  node14410 [shape=cds, label=<<font color="black">7:app __x5__ = (GetMethod regexp SYMBOL_matchAll)</font>> color="black" fillcolor="white" style=filled]
  node14420 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">12:return [? __x9__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14405 [shape=cds, label=<<font color="black">5:app __x3__ = (RequireObjectCoercible flags)</font>> color="black" fillcolor="white" style=filled]
  node14394 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node14402 [shape=diamond, label=<<font color="black">(= isRegExp true)</font>> color="black" fillcolor="white" style=filled]
  node14412 [shape=diamond, label=<<font color="black">(! (= matcher undefined))</font>> color="black" fillcolor="white" style=filled]
  node14400 [shape=cds, label=<<font color="black">2:app __x1__ = (IsRegExp regexp)</font>> color="black" fillcolor="white" style=filled]
  node14403 [shape=cds, label=<<font color="black">4:app __x2__ = (Get regexp &quot;flags&quot;)</font>> color="black" fillcolor="white" style=filled]
  node14415 [shape=cds, label=<<font color="black">10:app __x7__ = (ToString O)</font>> color="black" fillcolor="white" style=filled]
  node14418 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">11:let rx = [? __x8__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14411 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">7:let matcher = [? __x5__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14407 [shape=cds, label=<<font color="black">6:app __x4__ = (ToString flags)</font>> color="black" fillcolor="white" style=filled]
  node14404 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">4:let flags = [? __x2__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14419 [shape=cds, label=<<font color="black">12:app __x9__ = (Invoke rx SYMBOL_matchAll (new [S]))</font>> color="black" fillcolor="white" style=filled]
  node14399 [shape=diamond, label=<<font color="black">(! (|| (= regexp undefined) (= regexp null)))</font>> color="black" fillcolor="white" style=filled]
  node14414 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">9:return [? __x6__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14409 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">throw TypeError</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14401 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">2:let isRegExp = [? __x1__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14395 [shape=circle label=" " color="black" fillcolor="white" style=filled]
  node14398 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">0:let O = [? __x0__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14413 [shape=cds, label=<<font color="black">9:app __x6__ = (Call matcher regexp (new [O]))</font>> color="black" fillcolor="white" style=filled]
  node14397 [shape=cds, label=<<font color="black">0:app __x0__ = (RequireObjectCoercible this)</font>> color="black" fillcolor="white" style=filled]
  node14416 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">10:let S = [? __x7__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14406 [shape=none, margin=0, label=<<font color="black">
    <table border="0" cellborder="1" cellspacing="0" cellpadding="10">
      <tr><td align="left">5:[? __x3__]</td></tr>
    </table>
  </font>> color="black" fillcolor="white" style=filled]
  node14417 [shape=cds, label=<<font color="black">11:app __x8__ = (RegExpCreate regexp &quot;g&quot;)</font>> color="black" fillcolor="white" style=filled]
  node14402 -> node14403 [label=<<font color="black">true</font>> color="black"]
  node14402 -> node14410 [label=<<font color="black">false</font>> color="black"]
  node14396 -> node14397 [ color="black"]
  node14413 -> node14414 [ color="black"]
  node14401 -> node14402 [ color="black"]
  node14411 -> node14412 [ color="black"]
  node14418 -> node14419 [ color="black"]
  node14404 -> node14405 [ color="black"]
  node14415 -> node14416 [ color="black"]
  node14405 -> node14406 [ color="black"]
  node14406 -> node14407 [ color="black"]
  node14394 -> node14396 [ color="black"]
  node14403 -> node14404 [ color="black"]
  node14400 -> node14401 [ color="black"]
  node14416 -> node14417 [ color="black"]
  node14397 -> node14398 [ color="black"]
  node14409 -> node14410 [ color="black"]
  node14412 -> node14413 [label=<<font color="black">true</font>> color="black"]
  node14412 -> node14415 [label=<<font color="black">false</font>> color="black"]
  node14410 -> node14411 [ color="black"]
  node14408 -> node14409 [label=<<font color="black">true</font>> color="black"]
  node14408 -> node14410 [label=<<font color="black">false</font>> color="black"]
  node14419 -> node14420 [ color="black"]
  node14417 -> node14418 [ color="black"]
  node14399 -> node14400 [label=<<font color="black">true</font>> color="black"]
  node14399 -> node14415 [label=<<font color="black">false</font>> color="black"]
  node14420 -> node14395 [ color="black"]
  node14414 -> node14415 [ color="black"]
  node14398 -> node14399 [ color="black"]
  node14407 -> node14408 [ color="black"]
}
